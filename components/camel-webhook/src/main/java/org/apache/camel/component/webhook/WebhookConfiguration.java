begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.webhook
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|webhook
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|HostUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Configuration class for the webhook component.  */
end_comment

begin_class
annotation|@
name|UriParams
DECL|class|WebhookConfiguration
specifier|public
class|class
name|WebhookConfiguration
implements|implements
name|Cloneable
block|{
comment|/*      * Note: all properties start with the 'webhook' prefix to avoid collision with the delegate endpoint.      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|webhookComponentName
specifier|private
name|String
name|webhookComponentName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|webhookExternalUrl
specifier|private
name|String
name|webhookExternalUrl
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|webhookBasePath
specifier|private
name|String
name|webhookBasePath
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|webhookPath
specifier|private
name|String
name|webhookPath
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|webhookAutoRegister
specifier|private
name|boolean
name|webhookAutoRegister
init|=
literal|true
decl_stmt|;
annotation|@
name|UriPath
DECL|field|endpointUri
specifier|private
name|String
name|endpointUri
decl_stmt|;
DECL|field|restConfiguration
specifier|private
name|RestConfiguration
name|restConfiguration
decl_stmt|;
DECL|method|WebhookConfiguration ()
specifier|public
name|WebhookConfiguration
parameter_list|()
block|{     }
DECL|method|getWebhookComponentName ()
specifier|public
name|String
name|getWebhookComponentName
parameter_list|()
block|{
return|return
name|webhookComponentName
return|;
block|}
comment|/**      * Returns a copy of this configuration      */
DECL|method|copy ()
specifier|public
name|WebhookConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|WebhookConfiguration
operator|)
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Computes the external URL of the webhook as seen by the remote webhook provider.      */
DECL|method|computeFullExternalUrl ()
specifier|public
name|String
name|computeFullExternalUrl
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
name|externalServerUrl
init|=
name|this
operator|.
name|webhookExternalUrl
decl_stmt|;
if|if
condition|(
name|externalServerUrl
operator|==
literal|null
condition|)
block|{
name|externalServerUrl
operator|=
name|computeServerUriPrefix
argument_list|()
expr_stmt|;
block|}
name|String
name|path
init|=
name|computeFullPath
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
name|externalServerUrl
operator|+
name|path
return|;
block|}
comment|/**      * Computes the URL of the webhook that should be used to bind the REST endpoint locally.      */
DECL|method|computeServerUriPrefix ()
specifier|public
name|String
name|computeServerUriPrefix
parameter_list|()
throws|throws
name|UnknownHostException
block|{
comment|// if no explicit port/host configured, then use port from rest configuration
name|String
name|scheme
init|=
literal|"http"
decl_stmt|;
name|String
name|host
init|=
literal|""
decl_stmt|;
name|int
name|port
init|=
literal|80
decl_stmt|;
if|if
condition|(
name|restConfiguration
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scheme
operator|=
name|restConfiguration
operator|.
name|getScheme
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|restConfiguration
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|restConfiguration
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
name|int
name|num
init|=
name|restConfiguration
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|port
operator|=
name|num
expr_stmt|;
block|}
comment|// if no explicit hostname set then resolve the hostname
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|host
argument_list|)
condition|)
block|{
if|if
condition|(
name|restConfiguration
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|allLocalIp
condition|)
block|{
name|host
operator|=
literal|"0.0.0.0"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|restConfiguration
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localHostName
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|restConfiguration
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localIp
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalIp
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|scheme
operator|+
literal|"://"
operator|+
name|host
operator|+
operator|(
name|port
operator|!=
literal|80
condition|?
literal|":"
operator|+
name|port
else|:
literal|""
operator|)
return|;
block|}
comment|/**      * Computes the path part of the webhook.      *      * @param external indicates if it's the path seen by the external provider or the internal one.      * @return the webhook full path      */
DECL|method|computeFullPath (boolean external)
specifier|public
name|String
name|computeFullPath
parameter_list|(
name|boolean
name|external
parameter_list|)
block|{
comment|// calculate the url to the rest service
name|String
name|path
init|=
name|this
operator|.
name|webhookPath
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|computeDefaultPath
argument_list|(
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|webhookBasePath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|webhookBasePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|this
operator|.
name|webhookBasePath
operator|+
name|path
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|this
operator|.
name|webhookBasePath
operator|+
name|path
expr_stmt|;
block|}
block|}
if|if
condition|(
name|external
condition|)
block|{
name|String
name|contextPath
init|=
name|restConfiguration
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|contextPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|contextPath
operator|+
name|path
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|contextPath
operator|+
name|path
expr_stmt|;
block|}
block|}
block|}
return|return
name|path
return|;
block|}
comment|/**      * A default path is computed for the webhook if not provided by the user.      * It uses a hash of the delegate endpoint in order for it to be reproducible.      *      * This is not random on purpose.      */
DECL|method|computeDefaultPath (String uri)
specifier|protected
specifier|static
name|String
name|computeDefaultPath
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
name|md
operator|.
name|update
argument_list|(
name|uri
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|md
operator|.
name|digest
argument_list|()
decl_stmt|;
return|return
literal|"/"
operator|+
name|Base64
operator|.
name|getUrlEncoder
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|digest
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot compute default webhook path"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getEndpointUri ()
specifier|public
name|String
name|getEndpointUri
parameter_list|()
block|{
return|return
name|endpointUri
return|;
block|}
comment|/**      * The delegate uri. Must belong to a component that supports webhooks.      */
DECL|method|setEndpointUri (String endpointUri)
specifier|public
name|void
name|setEndpointUri
parameter_list|(
name|String
name|endpointUri
parameter_list|)
block|{
name|this
operator|.
name|endpointUri
operator|=
name|endpointUri
expr_stmt|;
block|}
DECL|method|getRestConfiguration ()
specifier|public
name|RestConfiguration
name|getRestConfiguration
parameter_list|()
block|{
return|return
name|restConfiguration
return|;
block|}
comment|/**      * The Camel Rest Configuration used by the webhook.      */
DECL|method|setRestConfiguration (RestConfiguration restConfiguration)
specifier|public
name|void
name|setRestConfiguration
parameter_list|(
name|RestConfiguration
name|restConfiguration
parameter_list|)
block|{
name|this
operator|.
name|restConfiguration
operator|=
name|restConfiguration
expr_stmt|;
block|}
comment|/**      * The Camel Rest component to use for the REST transport, such as netty4-http.      */
DECL|method|setWebhookComponentName (String webhookComponentName)
specifier|public
name|void
name|setWebhookComponentName
parameter_list|(
name|String
name|webhookComponentName
parameter_list|)
block|{
name|this
operator|.
name|webhookComponentName
operator|=
name|webhookComponentName
expr_stmt|;
block|}
DECL|method|getWebhookExternalUrl ()
specifier|public
name|String
name|getWebhookExternalUrl
parameter_list|()
block|{
return|return
name|webhookExternalUrl
return|;
block|}
comment|/**      * The URL of the current service as seen by the webhook provider      */
DECL|method|setWebhookExternalUrl (String webhookExternalUrl)
specifier|public
name|void
name|setWebhookExternalUrl
parameter_list|(
name|String
name|webhookExternalUrl
parameter_list|)
block|{
name|this
operator|.
name|webhookExternalUrl
operator|=
name|webhookExternalUrl
expr_stmt|;
block|}
DECL|method|getWebhookBasePath ()
specifier|public
name|String
name|getWebhookBasePath
parameter_list|()
block|{
return|return
name|webhookBasePath
return|;
block|}
comment|/**      * The first (base) path element where the webhook will be exposed.      * It's a good practice to set it to a random string, so that it cannot be guessed by unauthorized parties.      */
DECL|method|setWebhookBasePath (String webhookBasePath)
specifier|public
name|void
name|setWebhookBasePath
parameter_list|(
name|String
name|webhookBasePath
parameter_list|)
block|{
name|this
operator|.
name|webhookBasePath
operator|=
name|webhookBasePath
expr_stmt|;
block|}
DECL|method|getWebhookPath ()
specifier|public
name|String
name|getWebhookPath
parameter_list|()
block|{
return|return
name|webhookPath
return|;
block|}
comment|/**      * The path where the webhook endpoint will be exposed (relative to basePath, if any)      */
DECL|method|setWebhookPath (String webhookPath)
specifier|public
name|void
name|setWebhookPath
parameter_list|(
name|String
name|webhookPath
parameter_list|)
block|{
name|this
operator|.
name|webhookPath
operator|=
name|webhookPath
expr_stmt|;
block|}
DECL|method|isWebhookAutoRegister ()
specifier|public
name|boolean
name|isWebhookAutoRegister
parameter_list|()
block|{
return|return
name|webhookAutoRegister
return|;
block|}
comment|/**      * Automatically register the webhook at startup and unregister it on shutdown.      */
DECL|method|setWebhookAutoRegister (boolean webhookAutoRegister)
specifier|public
name|void
name|setWebhookAutoRegister
parameter_list|(
name|boolean
name|webhookAutoRegister
parameter_list|)
block|{
name|this
operator|.
name|webhookAutoRegister
operator|=
name|webhookAutoRegister
expr_stmt|;
block|}
block|}
end_class

end_unit

