begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pubnub
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pubnub
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|PubNubConfiguration
specifier|public
class|class
name|PubNubConfiguration
block|{
annotation|@
name|UriPath
argument_list|()
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|channel
specifier|private
name|String
name|channel
decl_stmt|;
annotation|@
name|UriParam
argument_list|()
DECL|field|publisherKey
specifier|private
name|String
name|publisherKey
decl_stmt|;
annotation|@
name|UriParam
argument_list|()
DECL|field|subscriberKey
specifier|private
name|String
name|subscriberKey
decl_stmt|;
annotation|@
name|UriParam
argument_list|()
DECL|field|secretKey
specifier|private
name|String
name|secretKey
decl_stmt|;
annotation|@
name|UriParam
argument_list|()
DECL|field|authKey
specifier|private
name|String
name|authKey
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|secure
specifier|private
name|boolean
name|secure
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|()
DECL|field|uuid
specifier|private
name|String
name|uuid
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|enums
operator|=
literal|"HERE_NOW,WHERE_NOW,GET_STATE,SET_STATE,GET_HISTORY,PUBLISH,FIRE"
argument_list|)
DECL|field|operation
specifier|private
name|String
name|operation
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|withPresence
specifier|private
name|boolean
name|withPresence
decl_stmt|;
comment|/**      * The publish key obtained from your PubNub account. Required when publishing messages.      */
DECL|method|getPublisherKey ()
specifier|public
name|String
name|getPublisherKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|publisherKey
return|;
block|}
DECL|method|setPublisherKey (String publisherKey)
specifier|public
name|void
name|setPublisherKey
parameter_list|(
name|String
name|publisherKey
parameter_list|)
block|{
name|this
operator|.
name|publisherKey
operator|=
name|publisherKey
expr_stmt|;
block|}
comment|/**      * The subscribe key obtained from your PubNub account. Required when subscribing to channels or listening for presence events      */
DECL|method|getSubscriberKey ()
specifier|public
name|String
name|getSubscriberKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|subscriberKey
return|;
block|}
DECL|method|setSubscriberKey (String subscriberKey)
specifier|public
name|void
name|setSubscriberKey
parameter_list|(
name|String
name|subscriberKey
parameter_list|)
block|{
name|this
operator|.
name|subscriberKey
operator|=
name|subscriberKey
expr_stmt|;
block|}
comment|/**      * The secret key used for message signing.      */
DECL|method|getSecretKey ()
specifier|public
name|String
name|getSecretKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|secretKey
return|;
block|}
DECL|method|setSecretKey (String secretKey)
specifier|public
name|void
name|setSecretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|this
operator|.
name|secretKey
operator|=
name|secretKey
expr_stmt|;
block|}
comment|/**      * If Access Manager is utilized, client will use this authKey in all restricted requests.      */
DECL|method|getAuthKey ()
specifier|public
name|String
name|getAuthKey
parameter_list|()
block|{
return|return
name|authKey
return|;
block|}
DECL|method|setAuthKey (String authKey)
specifier|public
name|void
name|setAuthKey
parameter_list|(
name|String
name|authKey
parameter_list|)
block|{
name|this
operator|.
name|authKey
operator|=
name|authKey
expr_stmt|;
block|}
comment|/**      * Use ssl      */
DECL|method|isSecure ()
specifier|public
name|boolean
name|isSecure
parameter_list|()
block|{
return|return
name|this
operator|.
name|secure
return|;
block|}
DECL|method|setSecure (boolean secure)
specifier|public
name|void
name|setSecure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|this
operator|.
name|secure
operator|=
name|secure
expr_stmt|;
block|}
comment|/**      * The channel used for subscribing/publishing events      */
DECL|method|getChannel ()
specifier|public
name|String
name|getChannel
parameter_list|()
block|{
return|return
name|this
operator|.
name|channel
return|;
block|}
DECL|method|setChannel (String channel)
specifier|public
name|void
name|setChannel
parameter_list|(
name|String
name|channel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
block|}
comment|/**      * The uuid identifying the connection. Will be auto assigned if not set.      */
DECL|method|setUuid (String uuid)
specifier|public
name|void
name|setUuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
block|}
DECL|method|getUuid ()
specifier|public
name|String
name|getUuid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uuid
return|;
block|}
comment|/**      * The operation to perform.      */
DECL|method|setOperation (String operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|getOperation ()
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|this
operator|.
name|operation
return|;
block|}
comment|/**      * Also subscribe to related presence information      */
DECL|method|setWithPresence (boolean withPresence)
specifier|public
name|void
name|setWithPresence
parameter_list|(
name|boolean
name|withPresence
parameter_list|)
block|{
name|this
operator|.
name|withPresence
operator|=
name|withPresence
expr_stmt|;
block|}
DECL|method|withPresence ()
specifier|public
name|boolean
name|withPresence
parameter_list|()
block|{
return|return
name|withPresence
return|;
block|}
block|}
end_class

end_unit

