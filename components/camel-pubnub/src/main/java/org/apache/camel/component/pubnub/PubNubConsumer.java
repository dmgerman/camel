begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pubnub
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pubnub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|PubNub
import|;
end_import

begin_import
import|import
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|callbacks
operator|.
name|SubscribeCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|models
operator|.
name|consumer
operator|.
name|PNStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|models
operator|.
name|consumer
operator|.
name|pubsub
operator|.
name|PNMessageResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|models
operator|.
name|consumer
operator|.
name|pubsub
operator|.
name|PNPresenceEventResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|enums
operator|.
name|PNStatusCategory
operator|.
name|PNTimeoutCategory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|enums
operator|.
name|PNStatusCategory
operator|.
name|PNUnexpectedDisconnectCategory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pubnub
operator|.
name|PubNubConstants
operator|.
name|CHANNEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pubnub
operator|.
name|PubNubConstants
operator|.
name|TIMETOKEN
import|;
end_import

begin_class
DECL|class|PubNubConsumer
specifier|public
class|class
name|PubNubConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|PubNubEndpoint
name|endpoint
decl_stmt|;
DECL|field|pubNubConfiguration
specifier|private
specifier|final
name|PubNubConfiguration
name|pubNubConfiguration
decl_stmt|;
DECL|method|PubNubConsumer (PubNubEndpoint endpoint, Processor processor, PubNubConfiguration pubNubConfiguration)
specifier|public
name|PubNubConsumer
parameter_list|(
name|PubNubEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|PubNubConfiguration
name|pubNubConfiguration
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|pubNubConfiguration
operator|=
name|pubNubConfiguration
expr_stmt|;
block|}
DECL|method|initCommunication ()
specifier|private
name|void
name|initCommunication
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|getPubnub
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|PubNubCallback
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pubNubConfiguration
operator|.
name|withPresence
argument_list|()
condition|)
block|{
name|endpoint
operator|.
name|getPubnub
argument_list|()
operator|.
name|subscribe
argument_list|()
operator|.
name|channels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|pubNubConfiguration
operator|.
name|getChannel
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withPresence
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|.
name|getPubnub
argument_list|()
operator|.
name|subscribe
argument_list|()
operator|.
name|channels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|pubNubConfiguration
operator|.
name|getChannel
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|terminateCommunication ()
specifier|private
name|void
name|terminateCommunication
parameter_list|()
block|{
try|try
block|{
name|endpoint
operator|.
name|getPubnub
argument_list|()
operator|.
name|unsubscribe
argument_list|()
operator|.
name|channels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|pubNubConfiguration
operator|.
name|getChannel
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|initCommunication
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doResume
argument_list|()
expr_stmt|;
name|initCommunication
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|terminateCommunication
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
name|terminateCommunication
argument_list|()
expr_stmt|;
name|super
operator|.
name|doSuspend
argument_list|()
expr_stmt|;
block|}
DECL|class|PubNubCallback
class|class
name|PubNubCallback
extends|extends
name|SubscribeCallback
block|{
annotation|@
name|Override
DECL|method|status (PubNub pubnub, PNStatus status)
specifier|public
name|void
name|status
parameter_list|(
name|PubNub
name|pubnub
parameter_list|,
name|PNStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|.
name|getCategory
argument_list|()
operator|==
name|PNUnexpectedDisconnectCategory
operator|||
name|status
operator|.
name|getCategory
argument_list|()
operator|==
name|PNTimeoutCategory
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Got status: {}. Reconnecting to PubNub"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|pubnub
operator|.
name|reconnect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Status message: {}"
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|message (PubNub pubnub, PNMessageResult message)
specifier|public
name|void
name|message
parameter_list|(
name|PubNub
name|pubnub
parameter_list|,
name|PNMessageResult
name|message
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|inmessage
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|inmessage
operator|.
name|setBody
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|inmessage
operator|.
name|setHeader
argument_list|(
name|TIMETOKEN
argument_list|,
name|message
operator|.
name|getTimetoken
argument_list|()
argument_list|)
expr_stmt|;
name|inmessage
operator|.
name|setHeader
argument_list|(
name|CHANNEL
argument_list|,
name|message
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|presence (PubNub pubnub, PNPresenceEventResult presence)
specifier|public
name|void
name|presence
parameter_list|(
name|PubNub
name|pubnub
parameter_list|,
name|PNPresenceEventResult
name|presence
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|inmessage
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|inmessage
operator|.
name|setBody
argument_list|(
name|presence
argument_list|)
expr_stmt|;
name|inmessage
operator|.
name|setHeader
argument_list|(
name|TIMETOKEN
argument_list|,
name|presence
operator|.
name|getTimetoken
argument_list|()
argument_list|)
expr_stmt|;
name|inmessage
operator|.
name|setHeader
argument_list|(
name|CHANNEL
argument_list|,
name|presence
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

