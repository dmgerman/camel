begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pubnub
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pubnub
package|;
end_package

begin_import
import|import
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|Pubnub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"pubnub"
argument_list|,
name|title
operator|=
literal|"PubNub"
argument_list|,
name|syntax
operator|=
literal|"pubnub:endpointType:channel"
argument_list|,
name|consumerClass
operator|=
name|PubNubConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"cloud,iot,messaging"
argument_list|)
DECL|class|PubNubEndpoint
specifier|public
class|class
name|PubNubEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriParam
DECL|field|pubnub
specifier|private
name|Pubnub
name|pubnub
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|enums
operator|=
literal|"pubsub,presence"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|endpointType
specifier|private
name|PubNubEndpointType
name|endpointType
init|=
name|PubNubEndpointType
operator|.
name|pubsub
decl_stmt|;
annotation|@
name|UriPath
argument_list|()
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|channel
specifier|private
name|String
name|channel
decl_stmt|;
annotation|@
name|UriParam
argument_list|()
DECL|field|publisherKey
specifier|private
name|String
name|publisherKey
decl_stmt|;
annotation|@
name|UriParam
argument_list|()
DECL|field|subscriberKey
specifier|private
name|String
name|subscriberKey
decl_stmt|;
annotation|@
name|UriParam
argument_list|()
DECL|field|secretKey
specifier|private
name|String
name|secretKey
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|ssl
specifier|private
name|boolean
name|ssl
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|()
DECL|field|uuid
specifier|private
name|String
name|uuid
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|enums
operator|=
literal|"HERE_NOW, WHERE_NOW, GET_STATE, SET_STATE, GET_HISTORY, PUBLISH"
argument_list|)
DECL|field|operation
specifier|private
name|String
name|operation
decl_stmt|;
DECL|method|PubNubEndpoint (String uri, PubNubComponent component)
specifier|public
name|PubNubEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|PubNubComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|PubNubProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|PubNubConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * The type endpoint type. Either pubsub or presence      */
DECL|method|getEndpointType ()
specifier|public
name|PubNubEndpointType
name|getEndpointType
parameter_list|()
block|{
return|return
name|endpointType
return|;
block|}
DECL|method|setEndpointType (PubNubEndpointType endpointType)
specifier|public
name|void
name|setEndpointType
parameter_list|(
name|PubNubEndpointType
name|endpointType
parameter_list|)
block|{
name|this
operator|.
name|endpointType
operator|=
name|endpointType
expr_stmt|;
block|}
comment|/**      * The pubnub publish key obtained from your pubnub account. Required when      * publishing messages.      */
DECL|method|getPublisherKey ()
specifier|public
name|String
name|getPublisherKey
parameter_list|()
block|{
return|return
name|publisherKey
return|;
block|}
DECL|method|setPublisherKey (String publisherKey)
specifier|public
name|void
name|setPublisherKey
parameter_list|(
name|String
name|publisherKey
parameter_list|)
block|{
name|this
operator|.
name|publisherKey
operator|=
name|publisherKey
expr_stmt|;
block|}
comment|/**      * The pubnub subscribe key obtained from your pubnub account. Required when      * subscribing to channels or listening for presence events      */
DECL|method|getSubscriberKey ()
specifier|public
name|String
name|getSubscriberKey
parameter_list|()
block|{
return|return
name|subscriberKey
return|;
block|}
DECL|method|setSubscriberKey (String subscriberKey)
specifier|public
name|void
name|setSubscriberKey
parameter_list|(
name|String
name|subscriberKey
parameter_list|)
block|{
name|this
operator|.
name|subscriberKey
operator|=
name|subscriberKey
expr_stmt|;
block|}
comment|/**      * The pubnub secret key used for message signing.      */
DECL|method|getSecretKey ()
specifier|public
name|String
name|getSecretKey
parameter_list|()
block|{
return|return
name|secretKey
return|;
block|}
DECL|method|setSecretKey (String secretKey)
specifier|public
name|void
name|setSecretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|this
operator|.
name|secretKey
operator|=
name|secretKey
expr_stmt|;
block|}
comment|/**      * Use ssl      */
DECL|method|isSsl ()
specifier|public
name|boolean
name|isSsl
parameter_list|()
block|{
return|return
name|ssl
return|;
block|}
DECL|method|setSsl (boolean ssl)
specifier|public
name|void
name|setSsl
parameter_list|(
name|boolean
name|ssl
parameter_list|)
block|{
name|this
operator|.
name|ssl
operator|=
name|ssl
expr_stmt|;
block|}
comment|/**      * The channel used for subscribing/publishing events      */
DECL|method|getChannel ()
specifier|public
name|String
name|getChannel
parameter_list|()
block|{
return|return
name|channel
return|;
block|}
DECL|method|setChannel (String channel)
specifier|public
name|void
name|setChannel
parameter_list|(
name|String
name|channel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
block|}
comment|/**      * The uuid identifying the connection. Will be auto assigned if not set.      */
DECL|method|setUuid (String uuid)
specifier|public
name|void
name|setUuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
block|}
DECL|method|getUuid ()
specifier|public
name|String
name|getUuid
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
comment|/**      * The operation to perform.      */
DECL|method|setOperation (String operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|getOperation ()
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
comment|/**      * Reference to a Pubnub client in the registry.      */
DECL|method|getPubnub ()
specifier|public
name|Pubnub
name|getPubnub
parameter_list|()
block|{
return|return
name|pubnub
return|;
block|}
DECL|method|setPubnub (Pubnub pubnub)
specifier|public
name|void
name|setPubnub
parameter_list|(
name|Pubnub
name|pubnub
parameter_list|)
block|{
name|this
operator|.
name|pubnub
operator|=
name|pubnub
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|pubnub
operator|!=
literal|null
condition|)
block|{
name|pubnub
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|pubnub
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|pubnub
operator|=
name|getPubnub
argument_list|()
operator|!=
literal|null
condition|?
name|getPubnub
argument_list|()
else|:
name|getInstance
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
DECL|method|getInstance ()
specifier|private
name|Pubnub
name|getInstance
parameter_list|()
block|{
name|Pubnub
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getSecretKey
argument_list|()
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|Pubnub
argument_list|(
name|getPublisherKey
argument_list|()
argument_list|,
name|getSubscriberKey
argument_list|()
argument_list|,
name|getSecretKey
argument_list|()
argument_list|,
name|isSsl
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|Pubnub
argument_list|(
name|getPublisherKey
argument_list|()
argument_list|,
name|getSubscriberKey
argument_list|()
argument_list|,
name|isSsl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getUuid
argument_list|()
argument_list|)
condition|)
block|{
name|answer
operator|.
name|setUUID
argument_list|(
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|autoUUID
init|=
name|answer
operator|.
name|uuid
argument_list|()
decl_stmt|;
name|setUuid
argument_list|(
name|autoUUID
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUUID
argument_list|(
name|autoUUID
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

