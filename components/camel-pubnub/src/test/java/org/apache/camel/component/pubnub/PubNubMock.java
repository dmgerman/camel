begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pubnub
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pubnub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|Pubnub
import|;
end_import

begin_import
import|import
name|com
operator|.
name|pubnub
operator|.
name|api
operator|.
name|PubnubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_class
DECL|class|PubNubMock
specifier|public
class|class
name|PubNubMock
extends|extends
name|Pubnub
block|{
DECL|field|subscribers
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Callback
argument_list|>
name|subscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Callback
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|presenceSubscribers
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Callback
argument_list|>
name|presenceSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Callback
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|stateMap
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|JSONObject
argument_list|>
name|stateMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|JSONObject
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|3
argument_list|)
decl_stmt|;
DECL|method|PubNubMock (String publishKey, String subscribeKey)
specifier|public
name|PubNubMock
parameter_list|(
name|String
name|publishKey
parameter_list|,
name|String
name|subscribeKey
parameter_list|)
block|{
name|super
argument_list|(
name|publishKey
argument_list|,
name|subscribeKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subscribe (String channel, Callback callback)
specifier|public
name|void
name|subscribe
parameter_list|(
name|String
name|channel
parameter_list|,
name|Callback
name|callback
parameter_list|)
throws|throws
name|PubnubException
block|{
name|subscribers
operator|.
name|put
argument_list|(
name|channel
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|callback
operator|.
name|connectCallback
argument_list|(
name|channel
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
name|Callback
name|presenceCallback
init|=
name|presenceSubscribers
operator|.
name|get
argument_list|(
name|channel
argument_list|)
decl_stmt|;
if|if
condition|(
name|presenceCallback
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|String
name|presence
init|=
literal|"{\"action\":\"join\",\"timestamp\":1431777382,\"uuid\":\"d08f121b-d146-45af-a814-058c1b7d283a\",\"occupancy\":1}"
decl_stmt|;
name|presenceCallback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
operator|new
name|JSONObject
argument_list|(
name|presence
argument_list|)
argument_list|,
literal|""
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|publish (String channel, JSONObject message, Callback callback)
specifier|public
name|void
name|publish
parameter_list|(
name|String
name|channel
parameter_list|,
name|JSONObject
name|message
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
name|Callback
name|clientMockCallback
init|=
name|subscribers
operator|.
name|get
argument_list|(
name|channel
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientMockCallback
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|clientMockCallback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
name|message
argument_list|,
literal|""
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|publish (String channel, JSONArray message, Callback callback)
specifier|public
name|void
name|publish
parameter_list|(
name|String
name|channel
parameter_list|,
name|JSONArray
name|message
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
name|Callback
name|clientMockCallback
init|=
name|subscribers
operator|.
name|get
argument_list|(
name|channel
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientMockCallback
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|clientMockCallback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
name|message
argument_list|,
literal|""
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|publish (String channel, String message, Callback callback)
specifier|public
name|void
name|publish
parameter_list|(
name|String
name|channel
parameter_list|,
name|String
name|message
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
name|Callback
name|clientMockCallback
init|=
name|subscribers
operator|.
name|get
argument_list|(
name|channel
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientMockCallback
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|clientMockCallback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
name|message
argument_list|,
literal|""
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|presence (String channel, Callback callback)
specifier|public
name|void
name|presence
parameter_list|(
name|String
name|channel
parameter_list|,
name|Callback
name|callback
parameter_list|)
throws|throws
name|PubnubException
block|{
name|presenceSubscribers
operator|.
name|put
argument_list|(
name|channel
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|callback
operator|.
name|connectCallback
argument_list|(
name|channel
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|history (String channel, boolean reverse, Callback callback)
specifier|public
name|void
name|history
parameter_list|(
name|String
name|channel
parameter_list|,
name|boolean
name|reverse
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|callback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
operator|new
name|JSONArray
argument_list|(
literal|"[[\"message1\", \"message2\", \"message3\"],\"Start Time Token\",\"End Time Token\"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setState (String channel, String uuid, JSONObject state, Callback callback)
specifier|public
name|void
name|setState
parameter_list|(
name|String
name|channel
parameter_list|,
name|String
name|uuid
parameter_list|,
name|JSONObject
name|state
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|stateMap
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|callback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getState (String channel, String uuid, Callback callback)
specifier|public
name|void
name|getState
parameter_list|(
name|String
name|channel
parameter_list|,
name|String
name|uuid
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|JSONObject
name|jsonObject
init|=
name|stateMap
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|callback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
name|jsonObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hereNow (String channel, boolean state, boolean uuids, Callback callback)
specifier|public
name|void
name|hereNow
parameter_list|(
name|String
name|channel
parameter_list|,
name|boolean
name|state
parameter_list|,
name|boolean
name|uuids
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|//@formatter:off
name|JSONObject
name|response
init|=
operator|new
name|JSONObject
argument_list|(
literal|"{\"uuids\":[\"76c2c571-9a2b-d074-b4f8-e93e09f49bd\","
operator|+
literal|"\"175c2c67-b2a9-470d-8f4b-1db94f90e39e\", "
operator|+
literal|"\"2c67175c-2a9b-074d-4b8f-90e39e1db94f\"],"
operator|+
literal|"\"occupancy\":3 }"
argument_list|)
decl_stmt|;
comment|//@formatter:on
name|callback
operator|.
name|successCallback
argument_list|(
name|channel
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|whereNow (String uuid, Callback callback)
specifier|public
name|void
name|whereNow
parameter_list|(
name|String
name|uuid
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|callback
operator|.
name|successCallback
argument_list|(
literal|"channel"
argument_list|,
operator|new
name|JSONObject
argument_list|(
literal|"{\"channels\":[\"hello_world\"]}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

