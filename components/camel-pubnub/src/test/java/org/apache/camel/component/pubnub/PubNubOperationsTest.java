begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pubnub
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pubnub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PubNubOperationsTest
specifier|public
class|class
name|PubNubOperationsTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testWhereNow ()
specifier|public
name|void
name|testWhereNow
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PubNubConstants
operator|.
name|OPERATION
argument_list|,
literal|"WHERE_NOW"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PubNubConstants
operator|.
name|UUID
argument_list|,
literal|"uuid"
argument_list|)
expr_stmt|;
name|JSONObject
name|response
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:publish"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|,
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello_world"
argument_list|,
name|response
operator|.
name|getJSONArray
argument_list|(
literal|"channels"
argument_list|)
operator|.
name|getString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHereNow ()
specifier|public
name|void
name|testHereNow
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PubNubConstants
operator|.
name|OPERATION
argument_list|,
literal|"HERE_NOW"
argument_list|)
expr_stmt|;
name|JSONObject
name|response
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:publish"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|,
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|response
operator|.
name|getInt
argument_list|(
literal|"occupancy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetHistory ()
specifier|public
name|void
name|testGetHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PubNubConstants
operator|.
name|OPERATION
argument_list|,
literal|"GET_HISTORY"
argument_list|)
expr_stmt|;
name|JSONArray
name|response
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:publish"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|,
name|JSONArray
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"message1"
argument_list|,
name|response
operator|.
name|getJSONArray
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAndGetState ()
specifier|public
name|void
name|testSetAndGetState
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PubNubConstants
operator|.
name|OPERATION
argument_list|,
literal|"SET_STATE"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PubNubConstants
operator|.
name|UUID
argument_list|,
literal|"myuuid"
argument_list|)
expr_stmt|;
name|JSONObject
name|state
init|=
operator|new
name|JSONObject
argument_list|(
literal|"{\"state\":\"active\", \"lat\":\"55.645499\", \"lon\":\"12.370967\"}"
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:publish"
argument_list|,
name|state
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|headers
operator|.
name|replace
argument_list|(
name|PubNubConstants
operator|.
name|OPERATION
argument_list|,
literal|"GET_STATE"
argument_list|)
expr_stmt|;
name|JSONObject
name|response
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:publish"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|,
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|state
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"pubnub"
argument_list|,
operator|new
name|PubNubMock
argument_list|(
literal|"dummy"
argument_list|,
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|//@formatter:off
name|from
argument_list|(
literal|"direct:publish"
argument_list|)
operator|.
name|to
argument_list|(
literal|"pubnub://pubsub:mychannel?uuid=myuuid&pubnub=#pubnub"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:io.rhiot.component.pubnub?showAll=true&multiline=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|//@formatter:on
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

