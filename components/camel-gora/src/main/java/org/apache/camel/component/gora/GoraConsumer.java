begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gora
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gora
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gora
operator|.
name|utils
operator|.
name|GoraUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|gora
operator|.
name|persistency
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|gora
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|gora
operator|.
name|query
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|gora
operator|.
name|store
operator|.
name|DataStore
import|;
end_import

begin_comment
comment|/**  * Implementation of Camel-Gora {@link Consumer}.  */
end_comment

begin_class
DECL|class|GoraConsumer
specifier|public
class|class
name|GoraConsumer
extends|extends
name|ScheduledPollConsumer
block|{
comment|/**      * GORA datastore      */
DECL|field|dataStore
specifier|private
specifier|final
name|DataStore
argument_list|<
name|Object
argument_list|,
name|Persistent
argument_list|>
name|dataStore
decl_stmt|;
comment|/**      * Camel-Gora endpoint configuration      */
DECL|field|configuration
specifier|private
specifier|final
name|GoraConfiguration
name|configuration
decl_stmt|;
comment|/**      * Camel Gora Query      */
DECL|field|query
specifier|private
name|Query
name|query
decl_stmt|;
comment|/**      * Poll run      */
DECL|field|firstRun
specifier|private
name|boolean
name|firstRun
decl_stmt|;
comment|/**      * Consumer Constructor      *      * @param endpoint      Reference to the Camel-Gora endpoint      * @param processor     Reference to Consumer Processor      * @param configuration Reference to Camel-Gora endpoint configuration      * @param dataStore     Reference to the datastore      */
DECL|method|GoraConsumer (final Endpoint endpoint, final Processor processor, final GoraConfiguration configuration, final DataStore<Object, Persistent> dataStore)
specifier|public
name|GoraConsumer
parameter_list|(
specifier|final
name|Endpoint
name|endpoint
parameter_list|,
specifier|final
name|Processor
name|processor
parameter_list|,
specifier|final
name|GoraConfiguration
name|configuration
parameter_list|,
specifier|final
name|DataStore
argument_list|<
name|Object
argument_list|,
name|Persistent
argument_list|>
name|dataStore
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|NoSuchMethodException
throws|,
name|InvocationTargetException
throws|,
name|IllegalAccessException
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|dataStore
operator|=
name|dataStore
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|GoraUtils
operator|.
name|constractQueryFromConfiguration
argument_list|(
name|this
operator|.
name|dataStore
argument_list|,
name|this
operator|.
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|this
operator|.
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
comment|// compute time (approx) since last update
if|if
condition|(
name|firstRun
condition|)
block|{
name|this
operator|.
name|query
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|query
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//proceed with query
specifier|final
name|Result
name|result
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Processing exchange [{}]..."
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|result
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

