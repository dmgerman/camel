begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gora
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gora
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServicePoolAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|gora
operator|.
name|persistency
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|gora
operator|.
name|store
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gora
operator|.
name|utils
operator|.
name|GoraUtils
operator|.
name|constractQueryFromPropertiesMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gora
operator|.
name|utils
operator|.
name|GoraUtils
operator|.
name|getKeyFromExchange
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gora
operator|.
name|utils
operator|.
name|GoraUtils
operator|.
name|getValueFromExchange
import|;
end_import

begin_comment
comment|/**  * Camel-Gora {@link DefaultProducer}.  *  */
end_comment

begin_class
DECL|class|GoraProducer
specifier|public
class|class
name|GoraProducer
extends|extends
name|DefaultProducer
implements|implements
name|ServicePoolAware
block|{
comment|/**      * logger      */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GoraProducer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Camel-Gora endpoint configuration      */
DECL|field|configuration
specifier|private
specifier|final
name|GoraConfiguration
name|configuration
decl_stmt|;
comment|/**      * GORA datastore      */
DECL|field|dataStore
specifier|private
specifier|final
name|DataStore
argument_list|<
name|Object
argument_list|,
name|Persistent
argument_list|>
name|dataStore
decl_stmt|;
comment|/**      * Constructor      *      * @param endpoint      Reference to the Camel-Gora endpoint      * @param configuration Reference to Camel-Gora endpoint configuration      * @param dataStore     Reference to the datastore      */
DECL|method|GoraProducer (final Endpoint endpoint, final GoraConfiguration configuration, final DataStore<Object, Persistent> dataStore)
specifier|public
name|GoraProducer
parameter_list|(
specifier|final
name|Endpoint
name|endpoint
parameter_list|,
specifier|final
name|GoraConfiguration
name|configuration
parameter_list|,
specifier|final
name|DataStore
argument_list|<
name|Object
argument_list|,
name|Persistent
argument_list|>
name|dataStore
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataStore
operator|=
name|dataStore
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|process (final Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|operation
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GoraAttribute
operator|.
name|GORA_OPERATION
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
operator|||
name|operation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Gora operation is null or empty!"
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
literal|0
decl_stmt|;
comment|// 0 used as default response in order to avoid null body exception
if|if
condition|(
name|GoraOperation
operator|.
name|PUT
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|dataStore
operator|.
name|put
argument_list|(
name|getKeyFromExchange
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValueFromExchange
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|GoraOperation
operator|.
name|GET
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|result
operator|=
name|dataStore
operator|.
name|get
argument_list|(
name|getKeyFromExchange
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|GoraOperation
operator|.
name|DELETE
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|result
operator|=
name|dataStore
operator|.
name|delete
argument_list|(
name|getKeyFromExchange
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|GoraOperation
operator|.
name|QUERY
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|result
operator|=
name|constractQueryFromPropertiesMap
argument_list|(
name|props
argument_list|,
name|dataStore
argument_list|,
name|this
operator|.
name|configuration
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|GoraOperation
operator|.
name|DELETE_BY_QUERY
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|result
operator|=
name|dataStore
operator|.
name|deleteByQuery
argument_list|(
name|constractQueryFromPropertiesMap
argument_list|(
name|props
argument_list|,
name|dataStore
argument_list|,
name|this
operator|.
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|GoraOperation
operator|.
name|GET_SCHEMA_NAME
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|result
operator|=
name|dataStore
operator|.
name|getSchemaName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|GoraOperation
operator|.
name|DELETE_SCHEMA
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|dataStore
operator|.
name|deleteSchema
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|GoraOperation
operator|.
name|CREATE_SCHEMA
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|dataStore
operator|.
name|createSchema
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|GoraOperation
operator|.
name|SCHEMA_EXIST
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|result
operator|=
name|dataStore
operator|.
name|schemaExists
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown operation!"
argument_list|)
throw|;
block|}
comment|/*            from the tests auto-flush seems not to work always            therefore a temporary solution is calling flush            on every action         */
if|if
condition|(
name|configuration
operator|.
name|isFlushOnEveryOperation
argument_list|()
condition|)
block|{
name|dataStore
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

