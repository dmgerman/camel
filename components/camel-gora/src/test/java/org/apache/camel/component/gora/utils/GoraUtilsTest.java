begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gora.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gora
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gora
operator|.
name|GoraAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gora
operator|.
name|GoraConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * GORA Utils Tests  *  */
end_comment

begin_class
DECL|class|GoraUtilsTest
specifier|public
class|class
name|GoraUtilsTest
block|{
annotation|@
name|Test
DECL|method|configurationExistShouldSucceedtIfMethodExist ()
specifier|public
name|void
name|configurationExistShouldSucceedtIfMethodExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|GoraConfiguration
name|conf
init|=
operator|new
name|GoraConfiguration
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|GoraUtils
operator|.
name|configurationExist
argument_list|(
name|GoraAttribute
operator|.
name|GORA_QUERY_LIMIT
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchMethodException
operator|.
name|class
argument_list|)
DECL|method|configurationExistShouldThrowExceptionIfMethodDoesNotExist ()
specifier|public
name|void
name|configurationExistShouldThrowExceptionIfMethodDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|GoraConfiguration
name|conf
init|=
operator|new
name|GoraConfiguration
argument_list|()
decl_stmt|;
name|GoraUtils
operator|.
name|configurationExist
argument_list|(
name|GoraAttribute
operator|.
name|GORA_KEY
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getAttributeAsLongShouldSReturnTheCorrectValue ()
specifier|public
name|void
name|getAttributeAsLongShouldSReturnTheCorrectValue
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|GoraConfiguration
name|conf
init|=
operator|new
name|GoraConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLimit
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|3
argument_list|)
argument_list|,
name|GoraUtils
operator|.
name|getAttributeAsLong
argument_list|(
name|GoraAttribute
operator|.
name|GORA_QUERY_LIMIT
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

