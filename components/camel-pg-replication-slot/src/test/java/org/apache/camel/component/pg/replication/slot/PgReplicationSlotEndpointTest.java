begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pg.replication.slot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pg
operator|.
name|replication
operator|.
name|slot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|PgReplicationSlotEndpointTest
specifier|public
class|class
name|PgReplicationSlotEndpointTest
block|{
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testUriParsing ()
specifier|public
name|void
name|testUriParsing
parameter_list|()
block|{
name|PgReplicationSlotEndpoint
name|endpoint
init|=
literal|null
decl_stmt|;
name|PgReplicationSlotComponent
name|component
init|=
name|mock
argument_list|(
name|PgReplicationSlotComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|=
operator|new
name|PgReplicationSlotEndpoint
argument_list|(
literal|"pg-replication-slot:/database/slot:plugin"
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getDatabase
argument_list|()
argument_list|,
literal|"database"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5432
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getSlot
argument_list|()
argument_list|,
literal|"slot"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getOutputPlugin
argument_list|()
argument_list|,
literal|"plugin"
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|PgReplicationSlotEndpoint
argument_list|(
literal|"pg-replication-slot:remote-server/database/slot:plugin"
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getDatabase
argument_list|()
argument_list|,
literal|"database"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5432
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"remote-server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getSlot
argument_list|()
argument_list|,
literal|"slot"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getOutputPlugin
argument_list|()
argument_list|,
literal|"plugin"
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|PgReplicationSlotEndpoint
argument_list|(
literal|"pg-replication-slot:remote-server:333/database/slot:plugin"
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getDatabase
argument_list|()
argument_list|,
literal|"database"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|333
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"remote-server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getSlot
argument_list|()
argument_list|,
literal|"slot"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getOutputPlugin
argument_list|()
argument_list|,
literal|"plugin"
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|PgReplicationSlotEndpoint
argument_list|(
literal|"pg-replication-slot://remote-server:333/database/slot:plugin"
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getDatabase
argument_list|()
argument_list|,
literal|"database"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|333
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"remote-server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getSlot
argument_list|()
argument_list|,
literal|"slot"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getOutputPlugin
argument_list|()
argument_list|,
literal|"plugin"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParsingBadUri ()
specifier|public
name|void
name|testParsingBadUri
parameter_list|()
block|{
name|this
operator|.
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|PgReplicationSlotComponent
name|component
init|=
name|mock
argument_list|(
name|PgReplicationSlotComponent
operator|.
name|class
argument_list|)
decl_stmt|;
operator|new
name|PgReplicationSlotEndpoint
argument_list|(
literal|"pg-replication-slot:/database/slot"
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

