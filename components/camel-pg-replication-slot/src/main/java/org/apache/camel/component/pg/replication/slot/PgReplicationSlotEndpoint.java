begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pg.replication.slot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pg
operator|.
name|replication
operator|.
name|slot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ScheduledPollEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|postgresql
operator|.
name|PGProperty
import|;
end_import

begin_comment
comment|/**  * Consumer endpoint to receive from PostgreSQL Replication Slot.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"3.0.0"
argument_list|,
name|scheme
operator|=
literal|"pg-replication-slot"
argument_list|,
name|title
operator|=
literal|"PostgresSQL Replication Slot"
argument_list|,
name|syntax
operator|=
literal|"pg-replication-slot:host:port/database/slot:outputPlugin"
argument_list|,
name|label
operator|=
literal|"database,sql"
argument_list|,
name|consumerOnly
operator|=
literal|true
argument_list|)
DECL|class|PgReplicationSlotEndpoint
specifier|public
class|class
name|PgReplicationSlotEndpoint
extends|extends
name|ScheduledPollEndpoint
block|{
DECL|field|URI_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|URI_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^pg-replication-slot:(//)?(?<host>[^:]*):?(?<port>\\d*)?/(?<database>\\w+)/(?<slot>\\w+):(?<plugin>\\w+).*$"
argument_list|)
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Postgres host"
argument_list|,
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"localhost"
argument_list|)
DECL|field|host
specifier|private
name|String
name|host
init|=
literal|"localhost"
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Postgres port"
argument_list|,
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"5432"
argument_list|)
DECL|field|port
specifier|private
name|Integer
name|port
init|=
literal|5432
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Postgres database name"
argument_list|,
name|label
operator|=
literal|"common"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|database
specifier|private
name|String
name|database
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Replication Slot name"
argument_list|,
name|label
operator|=
literal|"common"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|slot
specifier|private
name|String
name|slot
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Output plugin name"
argument_list|,
name|label
operator|=
literal|"common"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|outputPlugin
specifier|private
name|String
name|outputPlugin
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Postgres user"
argument_list|,
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"postgres"
argument_list|)
DECL|field|user
specifier|private
name|String
name|user
init|=
literal|"postgres"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Postgres password"
argument_list|,
name|label
operator|=
literal|"common"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|statusInterval
specifier|private
name|Integer
name|statusInterval
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|prefix
operator|=
literal|"slotOptions."
argument_list|,
name|multiValue
operator|=
literal|true
argument_list|)
DECL|field|slotOptions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|slotOptions
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|autoCreateSlot
specifier|private
name|Boolean
name|autoCreateSlot
init|=
literal|true
decl_stmt|;
DECL|method|PgReplicationSlotEndpoint (String uri, Component component)
specifier|public
name|PgReplicationSlotEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|parseUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|PgReplicationSlotConsumer
name|consumer
init|=
operator|new
name|PgReplicationSlotConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Creates a new PostgreSQL JDBC connection that's setup for replication.      *      * @return JDBC connection      * @throws SQLException      */
DECL|method|newDbConnection ()
name|Connection
name|newDbConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|PGProperty
operator|.
name|USER
operator|.
name|set
argument_list|(
name|props
argument_list|,
name|this
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|PGProperty
operator|.
name|PASSWORD
operator|.
name|set
argument_list|(
name|props
argument_list|,
name|this
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|PGProperty
operator|.
name|ASSUME_MIN_SERVER_VERSION
operator|.
name|set
argument_list|(
name|props
argument_list|,
literal|"9.6"
argument_list|)
expr_stmt|;
name|PGProperty
operator|.
name|REPLICATION
operator|.
name|set
argument_list|(
name|props
argument_list|,
literal|"database"
argument_list|)
expr_stmt|;
name|PGProperty
operator|.
name|PREFER_QUERY_MODE
operator|.
name|set
argument_list|(
name|props
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|PGProperty
operator|.
name|TCP_KEEP_ALIVE
operator|.
name|set
argument_list|(
name|props
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"jdbc:postgresql://%s:%d/%s"
argument_list|,
name|this
operator|.
name|getHost
argument_list|()
argument_list|,
name|this
operator|.
name|getPort
argument_list|()
argument_list|,
name|this
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|,
name|props
argument_list|)
return|;
block|}
comment|/**      * Parse the provided URI and extract available parameters      *      * @throws IllegalArgumentException if there is an error in the parameters      */
DECL|method|parseUri (String uri)
specifier|protected
specifier|final
name|void
name|parseUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"URI: {}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|URI_PATTERN
operator|.
name|matcher
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The provided URL does not match the acceptable pattern"
argument_list|)
throw|;
block|}
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|"host"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|setHost
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|"port"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|"port"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setDatabase
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|"database"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSlot
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|"slot"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setOutputPlugin
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|"plugin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * PostgreSQL server host      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|Integer
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * PostgreSQL server port      */
DECL|method|setPort (Integer port)
specifier|public
name|void
name|setPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getDatabase ()
specifier|public
name|String
name|getDatabase
parameter_list|()
block|{
return|return
name|database
return|;
block|}
comment|/**      * PostgreSQL database name      */
DECL|method|setDatabase (String database)
specifier|public
name|void
name|setDatabase
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
block|}
DECL|method|getSlot ()
specifier|public
name|String
name|getSlot
parameter_list|()
block|{
return|return
name|slot
return|;
block|}
comment|/**      * Replication slot name.      */
DECL|method|setSlot (String slot)
specifier|public
name|void
name|setSlot
parameter_list|(
name|String
name|slot
parameter_list|)
block|{
name|this
operator|.
name|slot
operator|=
name|slot
expr_stmt|;
block|}
DECL|method|getOutputPlugin ()
specifier|public
name|String
name|getOutputPlugin
parameter_list|()
block|{
return|return
name|outputPlugin
return|;
block|}
comment|/**      * Output plugin name (e.g. test_decoding, wal2json)      */
DECL|method|setOutputPlugin (String outputPlugin)
specifier|public
name|void
name|setOutputPlugin
parameter_list|(
name|String
name|outputPlugin
parameter_list|)
block|{
name|this
operator|.
name|outputPlugin
operator|=
name|outputPlugin
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
comment|/**      * PostgreSQL username      */
DECL|method|setUser (String user)
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * PostgreSQL password      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getStatusInterval ()
specifier|public
name|Integer
name|getStatusInterval
parameter_list|()
block|{
return|return
name|statusInterval
return|;
block|}
comment|/**      * Specifies the number of seconds between status packets sent back to Postgres server.      */
DECL|method|setStatusInterval (Integer statusInterval)
specifier|public
name|void
name|setStatusInterval
parameter_list|(
name|Integer
name|statusInterval
parameter_list|)
block|{
name|this
operator|.
name|statusInterval
operator|=
name|statusInterval
expr_stmt|;
block|}
DECL|method|getSlotOptions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSlotOptions
parameter_list|()
block|{
return|return
name|slotOptions
return|;
block|}
comment|/**      * Slot options to be passed to the output plugin.      */
DECL|method|setSlotOptions (Map<String, Object> slotOptions)
specifier|public
name|void
name|setSlotOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|slotOptions
parameter_list|)
block|{
name|this
operator|.
name|slotOptions
operator|=
name|slotOptions
expr_stmt|;
block|}
DECL|method|getAutoCreateSlot ()
specifier|public
name|Boolean
name|getAutoCreateSlot
parameter_list|()
block|{
return|return
name|autoCreateSlot
return|;
block|}
comment|/**      * Auto create slot if it does not exist      */
DECL|method|setAutoCreateSlot (Boolean autoCreateSlot)
specifier|public
name|void
name|setAutoCreateSlot
parameter_list|(
name|Boolean
name|autoCreateSlot
parameter_list|)
block|{
name|this
operator|.
name|autoCreateSlot
operator|=
name|autoCreateSlot
expr_stmt|;
block|}
block|}
end_class

end_unit

