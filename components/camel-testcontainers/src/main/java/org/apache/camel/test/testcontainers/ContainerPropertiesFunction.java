begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.testcontainers
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|testcontainers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testcontainers
operator|.
name|containers
operator|.
name|GenericContainer
import|;
end_import

begin_class
DECL|class|ContainerPropertiesFunction
specifier|public
class|class
name|ContainerPropertiesFunction
implements|implements
name|PropertiesFunction
block|{
DECL|field|containers
specifier|private
specifier|final
name|List
argument_list|<
name|GenericContainer
argument_list|<
name|?
argument_list|>
argument_list|>
name|containers
decl_stmt|;
DECL|method|ContainerPropertiesFunction (List<GenericContainer<?>> containers)
specifier|public
name|ContainerPropertiesFunction
parameter_list|(
name|List
argument_list|<
name|GenericContainer
argument_list|<
name|?
argument_list|>
argument_list|>
name|containers
parameter_list|)
block|{
name|this
operator|.
name|containers
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|containers
argument_list|,
literal|"Containers"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"container"
return|;
block|}
annotation|@
name|Override
DECL|method|apply (String remainder)
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|remainder
parameter_list|)
block|{
specifier|final
name|String
name|type
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|remainder
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|query
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|remainder
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"container function syntax is container:type:query"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"host"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|remainder
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to determine container name"
argument_list|)
throw|;
block|}
return|return
name|Containers
operator|.
name|lookup
argument_list|(
name|containers
argument_list|,
name|StringHelper
operator|.
name|after
argument_list|(
name|remainder
argument_list|,
literal|":"
argument_list|)
argument_list|)
operator|.
name|getContainerIpAddress
argument_list|()
return|;
block|}
if|if
condition|(
literal|"port"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|port
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|query
argument_list|,
literal|"@"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|query
argument_list|,
literal|"@"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|port
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to determine original port"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to determine container name"
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|Containers
operator|.
name|lookup
argument_list|(
name|containers
argument_list|,
name|name
argument_list|)
operator|.
name|getMappedPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

