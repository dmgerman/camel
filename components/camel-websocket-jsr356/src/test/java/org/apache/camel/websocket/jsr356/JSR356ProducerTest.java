begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.websocket.jsr356
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|websocket
operator|.
name|jsr356
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|Dependent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|OnMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|OnOpen
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|server
operator|.
name|ServerEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|meecrowave
operator|.
name|Meecrowave
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|meecrowave
operator|.
name|junit
operator|.
name|MeecrowaveRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
DECL|class|JSR356ProducerTest
specifier|public
class|class
name|JSR356ProducerTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Rule
DECL|field|servlet
specifier|public
specifier|final
name|MeecrowaveRule
name|servlet
init|=
operator|new
name|MeecrowaveRule
argument_list|(
operator|new
name|Meecrowave
operator|.
name|Builder
argument_list|()
block|{
block|{
name|randomHttpPort
parameter_list|()
constructor_decl|;
name|setScanningPackageIncludes
argument_list|(
literal|"org.apache.camel.websocket.jsr356.JSR356ProducerTest$"
argument_list|)
expr_stmt|;
comment|// deploy test classes
block|}
block|}
argument_list|,
literal|""
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|testName
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:ensureServerModeSendsProperly"
argument_list|)
DECL|field|serverProducer
specifier|private
name|ProducerTemplate
name|serverProducer
decl_stmt|;
annotation|@
name|Test
DECL|method|ensureServerModeSendsProperly ()
specifier|public
name|void
name|ensureServerModeSendsProperly
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|body
init|=
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|serverProducer
operator|.
name|sendBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|ExistingServerEndpoint
operator|.
name|self
operator|.
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|singletonList
argument_list|(
name|body
argument_list|)
argument_list|,
name|ExistingServerEndpoint
operator|.
name|self
operator|.
name|messages
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:ensureServerModeSendsProperly"
argument_list|)
operator|.
name|id
argument_list|(
literal|"camel_consumer_acts_as_client"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"websocket-jsr356://ws://localhost:"
operator|+
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHttpPort
argument_list|()
operator|+
literal|"/existingserver"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Dependent
annotation|@
name|ServerEndpoint
argument_list|(
literal|"/existingserver"
argument_list|)
DECL|class|ExistingServerEndpoint
specifier|public
specifier|static
class|class
name|ExistingServerEndpoint
block|{
DECL|field|self
specifier|private
specifier|static
name|ExistingServerEndpoint
name|self
decl_stmt|;
DECL|field|messages
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|OnOpen
DECL|method|onOpen (final Session session)
specifier|public
name|void
name|onOpen
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|)
block|{
name|self
operator|=
name|this
expr_stmt|;
block|}
annotation|@
name|OnMessage
DECL|method|onMessage (final String message)
specifier|public
specifier|synchronized
name|void
name|onMessage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

