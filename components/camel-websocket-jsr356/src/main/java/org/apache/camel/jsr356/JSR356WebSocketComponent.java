begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jsr356
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsr356
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|ofNullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|server
operator|.
name|ServerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_class
DECL|class|JSR356WebSocketComponent
specifier|public
class|class
name|JSR356WebSocketComponent
extends|extends
name|DefaultComponent
block|{
comment|// didn't find a better way to handle that unless we can assume the CamelContext is in the ServletContext
DECL|field|SERVER_CONTAINERS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ContextBag
argument_list|>
name|SERVER_CONTAINERS
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"sessionCount"
argument_list|)
DECL|field|sessionCount
specifier|protected
name|int
name|sessionCount
decl_stmt|;
annotation|@
name|Override
DECL|method|createEndpoint (final String uri, final String remaining, final Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|String
name|remaining
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
return|return
operator|new
name|JSR356Endpoint
argument_list|(
name|this
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|sendMessage (final Session session, final Object message)
specifier|public
name|void
name|sendMessage
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|Object
name|message
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|session
init|)
block|{
comment|// todo: handle async?
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|session
operator|.
name|getBasicRemote
argument_list|()
operator|.
name|sendText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ByteBuffer
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|session
operator|.
name|getBasicRemote
argument_list|()
operator|.
name|sendBinary
argument_list|(
name|ByteBuffer
operator|.
name|class
operator|.
name|cast
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|InputStream
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|int
name|read
decl_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|InputStream
operator|.
name|class
operator|.
name|cast
argument_list|(
name|message
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
comment|// todo: config
specifier|final
name|OutputStream
name|out
init|=
name|session
operator|.
name|getBasicRemote
argument_list|()
operator|.
name|getSendStream
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported input: "
operator|+
name|message
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|registerServer (final String contextPath, final ServerContainer container)
specifier|public
specifier|static
name|void
name|registerServer
parameter_list|(
specifier|final
name|String
name|contextPath
parameter_list|,
specifier|final
name|ServerContainer
name|container
parameter_list|)
block|{
name|SERVER_CONTAINERS
operator|.
name|put
argument_list|(
name|contextPath
argument_list|,
operator|new
name|ContextBag
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterServer (final String contextPath)
specifier|public
specifier|static
name|void
name|unregisterServer
parameter_list|(
specifier|final
name|String
name|contextPath
parameter_list|)
block|{
name|SERVER_CONTAINERS
operator|.
name|remove
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
block|}
DECL|method|getContext (final String context)
specifier|public
specifier|static
name|ContextBag
name|getContext
parameter_list|(
specifier|final
name|String
name|context
parameter_list|)
block|{
return|return
name|ofNullable
argument_list|(
name|context
argument_list|)
operator|.
name|map
argument_list|(
name|SERVER_CONTAINERS
operator|::
name|get
argument_list|)
operator|.
name|orElseGet
argument_list|(
operator|(
operator|)
operator|->
name|SERVER_CONTAINERS
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|SERVER_CONTAINERS
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
else|:
name|SERVER_CONTAINERS
operator|.
name|get
argument_list|(
literal|""
argument_list|)
argument_list|)
return|;
block|}
DECL|class|ContextBag
specifier|public
specifier|static
class|class
name|ContextBag
block|{
DECL|field|container
specifier|private
specifier|final
name|ServerContainer
name|container
decl_stmt|;
DECL|field|endpoints
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CamelServerEndpoint
argument_list|>
name|endpoints
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ContextBag (final ServerContainer container)
specifier|private
name|ContextBag
parameter_list|(
specifier|final
name|ServerContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
DECL|method|getContainer ()
specifier|public
name|ServerContainer
name|getContainer
parameter_list|()
block|{
return|return
name|container
return|;
block|}
DECL|method|getEndpoints ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CamelServerEndpoint
argument_list|>
name|getEndpoints
parameter_list|()
block|{
return|return
name|endpoints
return|;
block|}
block|}
block|}
end_class

end_unit

