begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.websocket.jsr356
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|websocket
operator|.
name|jsr356
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|CloseReason
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|EndpointConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|websocket
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CamelServerEndpoint
specifier|public
class|class
name|CamelServerEndpoint
extends|extends
name|Endpoint
block|{
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelServerEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoints
specifier|private
specifier|final
name|Collection
argument_list|<
name|BiConsumer
argument_list|<
name|Session
argument_list|,
name|Object
argument_list|>
argument_list|>
name|endpoints
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|session
specifier|private
name|Session
name|session
decl_stmt|;
DECL|method|getEndpoints ()
name|Collection
argument_list|<
name|BiConsumer
argument_list|<
name|Session
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getEndpoints
parameter_list|()
block|{
return|return
name|endpoints
return|;
block|}
DECL|method|getSession ()
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
annotation|@
name|Override
DECL|method|onOpen (final Session session, final EndpointConfig endpointConfig)
specifier|public
name|void
name|onOpen
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|EndpointConfig
name|endpointConfig
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Session opened #{}"
argument_list|,
name|session
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|addMessageHandler
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|this
operator|::
name|propagateExchange
argument_list|)
expr_stmt|;
name|session
operator|.
name|addMessageHandler
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|this
operator|::
name|propagateExchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onClose (final Session session, final CloseReason closeReason)
specifier|public
name|void
name|onClose
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|CloseReason
name|closeReason
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Session closed #{}"
argument_list|,
name|session
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onError (final Session session, final Throwable throwable)
specifier|public
name|void
name|onError
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|Throwable
name|throwable
parameter_list|)
block|{
synchronized|synchronized
init|(
name|session
init|)
block|{
if|if
condition|(
name|session
operator|.
name|isOpen
argument_list|()
condition|)
block|{
try|try
block|{
name|session
operator|.
name|close
argument_list|(
operator|new
name|CloseReason
argument_list|(
name|CloseReason
operator|.
name|CloseCodes
operator|.
name|CLOSED_ABNORMALLY
argument_list|,
literal|"an exception occured"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error closing session #{}"
argument_list|,
name|session
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Error on session #{}"
argument_list|,
name|session
operator|.
name|getId
argument_list|()
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|propagateExchange (final Object message)
specifier|private
name|void
name|propagateExchange
parameter_list|(
specifier|final
name|Object
name|message
parameter_list|)
block|{
synchronized|synchronized
init|(
name|session
init|)
block|{
name|endpoints
operator|.
name|forEach
argument_list|(
name|consumer
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|session
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

