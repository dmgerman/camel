begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xquery
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|lib
operator|.
name|ModuleURIResolver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|trans
operator|.
name|XPathException
import|;
end_import

begin_comment
comment|/**  * Resolves XQuery file imports  */
end_comment

begin_class
DECL|class|XQueryModuleURIResolver
specifier|public
class|class
name|XQueryModuleURIResolver
implements|implements
name|ModuleURIResolver
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|xqueryComponent
specifier|private
specifier|final
name|XQueryComponent
name|xqueryComponent
decl_stmt|;
DECL|method|XQueryModuleURIResolver (XQueryComponent xqueryComponent)
specifier|public
name|XQueryModuleURIResolver
parameter_list|(
name|XQueryComponent
name|xqueryComponent
parameter_list|)
block|{
name|this
operator|.
name|xqueryComponent
operator|=
name|xqueryComponent
expr_stmt|;
block|}
DECL|method|resolve (String moduleURI, String baseURI, String[] locations)
specifier|public
name|StreamSource
index|[]
name|resolve
parameter_list|(
name|String
name|moduleURI
parameter_list|,
name|String
name|baseURI
parameter_list|,
name|String
index|[]
name|locations
parameter_list|)
throws|throws
name|XPathException
block|{
name|StreamSource
index|[]
name|ss
init|=
operator|new
name|StreamSource
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ss
index|[
name|i
index|]
operator|=
operator|new
name|StreamSource
argument_list|(
name|xqueryComponent
operator|.
name|resolveModuleResource
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Error resolving resource: "
operator|+
name|locations
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ss
return|;
block|}
block|}
end_class

end_unit

