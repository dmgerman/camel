begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.saxon
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|saxon
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|lib
operator|.
name|NamespaceConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|XPathAnnotationResultTypeTest
specifier|public
class|class
name|XPathAnnotationResultTypeTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|myBean
specifier|protected
name|MyBean
name|myBean
init|=
operator|new
name|MyBean
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testSendMessage ()
specifier|public
name|void
name|testSendMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|response
init|=
operator|(
name|String
operator|)
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in1"
argument_list|,
literal|"<a><b>hello</b></a>"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HELLO"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
name|String
operator|)
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in2"
argument_list|,
literal|"<a><b>hello</b></a>"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HELLO"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bindToRegistry (Registry registry)
specifier|protected
name|void
name|bindToRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
throws|throws
name|Exception
block|{
name|registry
operator|.
name|bind
argument_list|(
literal|"myBean"
argument_list|,
name|myBean
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|XPathFactory
operator|.
name|DEFAULT_PROPERTY_NAME
operator|+
literal|":"
operator|+
name|NamespaceConstant
operator|.
name|OBJECT_MODEL_SAXON
argument_list|,
literal|"net.sf.saxon.xpath.XPathFactoryImpl"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:in1"
argument_list|)
operator|.
name|bean
argument_list|(
literal|"myBean"
argument_list|,
literal|"readImplicit"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:in2"
argument_list|)
operator|.
name|bean
argument_list|(
literal|"myBean"
argument_list|,
literal|"readExplicit"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyBean
specifier|public
specifier|static
class|class
name|MyBean
block|{
DECL|field|abText
specifier|public
name|String
name|abText
decl_stmt|;
DECL|method|readImplicit (@PathR) String abText)
specifier|public
name|String
name|readImplicit
parameter_list|(
annotation|@
name|XPath
argument_list|(
literal|"upper-case(//a/b/text())"
argument_list|)
name|String
name|abText
parameter_list|)
block|{
return|return
name|abText
return|;
block|}
DECL|method|readExplicit (@Pathvalue = R, resultType = String.class) String abText)
specifier|public
name|String
name|readExplicit
parameter_list|(
annotation|@
name|XPath
argument_list|(
name|value
operator|=
literal|"upper-case(//a/b/text())"
argument_list|,
name|resultType
operator|=
name|String
operator|.
name|class
argument_list|)
name|String
name|abText
parameter_list|)
block|{
return|return
name|abText
return|;
block|}
block|}
block|}
end_class

end_unit

