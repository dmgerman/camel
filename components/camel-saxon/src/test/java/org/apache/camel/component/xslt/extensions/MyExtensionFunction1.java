begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xslt.extensions
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
operator|.
name|extensions
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|expr
operator|.
name|XPathContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|lib
operator|.
name|ExtensionFunctionCall
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|lib
operator|.
name|ExtensionFunctionDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|om
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|om
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|om
operator|.
name|SequenceTool
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|om
operator|.
name|StructuredQName
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|trans
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|tree
operator|.
name|iter
operator|.
name|SingletonIterator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|value
operator|.
name|Int64Value
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|MyExtensionFunction1
specifier|public
class|class
name|MyExtensionFunction1
extends|extends
name|ExtensionFunctionDefinition
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MyExtensionFunction1
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getFunctionQName ()
specifier|public
name|StructuredQName
name|getFunctionQName
parameter_list|()
block|{
return|return
operator|new
name|StructuredQName
argument_list|(
literal|""
argument_list|,
literal|"http://mytest/"
argument_list|,
literal|"myExtensionFunction1"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMinimumNumberOfArguments ()
specifier|public
name|int
name|getMinimumNumberOfArguments
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumNumberOfArguments ()
specifier|public
name|int
name|getMaximumNumberOfArguments
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
DECL|method|getArgumentTypes ()
specifier|public
name|SequenceType
index|[]
name|getArgumentTypes
parameter_list|()
block|{
return|return
operator|new
name|SequenceType
index|[]
block|{
name|SequenceType
operator|.
name|SINGLE_INTEGER
block|,
name|SequenceType
operator|.
name|SINGLE_INTEGER
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getResultType (SequenceType[] suppliedArgumentTypes)
specifier|public
name|SequenceType
name|getResultType
parameter_list|(
name|SequenceType
index|[]
name|suppliedArgumentTypes
parameter_list|)
block|{
name|int
name|resultCardinality
init|=
literal|1
decl_stmt|;
return|return
name|SequenceType
operator|.
name|makeSequenceType
argument_list|(
name|SequenceType
operator|.
name|SINGLE_INTEGER
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|resultCardinality
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makeCallExpression ()
specifier|public
name|ExtensionFunctionCall
name|makeCallExpression
parameter_list|()
block|{
return|return
operator|new
name|ExtensionFunctionCall
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Sequence
name|call
parameter_list|(
name|XPathContext
name|xPathContext
parameter_list|,
name|Sequence
index|[]
name|arguments
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// 1st argument (mandatory, index 0)
name|Int64Value
name|arg1
init|=
operator|(
name|Int64Value
operator|)
name|arguments
index|[
literal|0
index|]
operator|.
name|iterate
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|arg1Int
init|=
name|arg1
operator|.
name|getDecimalValue
argument_list|()
operator|.
name|toBigInteger
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// 2nd argument (mandatory, index 1)
name|Int64Value
name|arg2
init|=
operator|(
name|Int64Value
operator|)
name|arguments
index|[
literal|1
index|]
operator|.
name|iterate
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|arg2Int
init|=
name|arg2
operator|.
name|getDecimalValue
argument_list|()
operator|.
name|toBigInteger
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// Functionality goes here
name|int
name|resultInt
init|=
name|arg1Int
operator|+
name|arg2Int
decl_stmt|;
name|Item
name|result
init|=
operator|new
name|Int64Value
argument_list|(
name|resultInt
argument_list|)
decl_stmt|;
return|return
name|SequenceTool
operator|.
name|toLazySequence
argument_list|(
name|SingletonIterator
operator|.
name|makeIterator
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

