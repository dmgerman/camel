begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xslt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|TransformerFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SaxonUriResolverTest
specifier|public
class|class
name|SaxonUriResolverTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|XSL_PATH
specifier|private
specifier|static
specifier|final
name|String
name|XSL_PATH
init|=
literal|"org/apache/camel/component/xslt/transform_includes_data.xsl"
decl_stmt|;
DECL|field|XML_DATA
specifier|private
specifier|static
specifier|final
name|String
name|XML_DATA
init|=
literal|"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><root>1</root>"
decl_stmt|;
DECL|field|XML_RESP
specifier|private
specifier|static
specifier|final
name|String
name|XML_RESP
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><MyDate>February</MyDate>"
decl_stmt|;
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|Source
name|xsl
init|=
name|fromClasspath
argument_list|(
name|XSL_PATH
argument_list|)
decl_stmt|;
name|xsl
operator|.
name|setSystemId
argument_list|(
literal|"classpath:/"
operator|+
name|XSL_PATH
argument_list|)
expr_stmt|;
name|Source
name|xml
init|=
name|fromString
argument_list|(
name|XML_DATA
argument_list|)
decl_stmt|;
name|TransformerFactory
name|factory
init|=
operator|new
name|TransformerFactoryImpl
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|factory
operator|.
name|newTransformer
argument_list|(
name|xsl
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|setURIResolver
argument_list|(
operator|new
name|XsltUriResolver
argument_list|(
name|context
argument_list|()
argument_list|,
name|XSL_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|xml
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|XML_RESP
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|fromString (String data)
specifier|protected
name|Source
name|fromString
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fromClasspath (String path)
specifier|protected
name|Source
name|fromClasspath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StreamSource
argument_list|(
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|context
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

