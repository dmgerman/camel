begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xslt.extensions
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
operator|.
name|extensions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SaxonExtensionFunctionsTest
specifier|public
class|class
name|SaxonExtensionFunctionsTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|XSLT_PATH
specifier|private
specifier|static
specifier|final
name|String
name|XSLT_PATH
init|=
literal|"org/apache/camel/component/xslt/extensions/extensions.xslt"
decl_stmt|;
DECL|field|XSLT_RESULT
specifier|private
specifier|static
specifier|final
name|String
name|XSLT_RESULT
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><Test1>3</Test1><Test2>abccde</Test2><Test3>xyz</Test3>"
decl_stmt|;
annotation|@
name|Test
DECL|method|testExtensions ()
specifier|public
name|void
name|testExtensions
parameter_list|()
block|{
name|String
name|result
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:extensions"
argument_list|,
literal|"<dummy/>"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XSLT_RESULT
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bindToRegistry (Registry registry)
specifier|protected
name|void
name|bindToRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
throws|throws
name|Exception
block|{
name|registry
operator|.
name|bind
argument_list|(
literal|"function1"
argument_list|,
operator|new
name|MyExtensionFunction1
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"function2"
argument_list|,
operator|new
name|MyExtensionFunction2
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:extensions"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"xslt:%s?saxonExtensionFunctions=#function1,#function2"
argument_list|,
name|XSLT_PATH
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:org.apache.camel.component.xslt.extensions?level=INFO"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

