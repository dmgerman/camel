begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xquery
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|expr
operator|.
name|XPathContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|lib
operator|.
name|ExtensionFunctionCall
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|lib
operator|.
name|ExtensionFunctionDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|om
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|om
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|om
operator|.
name|StructuredQName
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|trans
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version  */
end_comment

begin_class
DECL|class|XQueryWithExtensionTest
specifier|public
class|class
name|XQueryWithExtensionTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|registerExtensionFunction
argument_list|(
operator|new
name|SimpleExtension
argument_list|()
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"saxonConf"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Test
DECL|method|testWithExtension ()
specifier|public
name|void
name|testWithExtension
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"<transformed extension-function-render=\"arg1[test]\"/>"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"<body>test</body>"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xquery:org/apache/camel/component/xquery/transformWithExtension.xquery?configuration=#saxonConf"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * This is a very simple example of a saxon extension function. We will use      * this for testing purposes.      *<p/>      * Example:<code>efx:simple('some text')</code> will be rendered to      *<code>arg1[some text]</code> and returned in the XQuery response.      */
DECL|class|SimpleExtension
specifier|public
specifier|static
specifier|final
class|class
name|SimpleExtension
extends|extends
name|ExtensionFunctionDefinition
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
DECL|method|getArgumentTypes ()
specifier|public
name|SequenceType
index|[]
name|getArgumentTypes
parameter_list|()
block|{
return|return
operator|new
name|SequenceType
index|[]
block|{
name|SequenceType
operator|.
name|SINGLE_STRING
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getResultType (SequenceType[] suppliedArgumentTypes)
specifier|public
name|SequenceType
name|getResultType
parameter_list|(
name|SequenceType
index|[]
name|suppliedArgumentTypes
parameter_list|)
block|{
return|return
name|SequenceType
operator|.
name|SINGLE_STRING
return|;
block|}
annotation|@
name|Override
DECL|method|getFunctionQName ()
specifier|public
name|StructuredQName
name|getFunctionQName
parameter_list|()
block|{
return|return
operator|new
name|StructuredQName
argument_list|(
literal|"efx"
argument_list|,
literal|"http://test/saxon/ext"
argument_list|,
literal|"simple"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makeCallExpression ()
specifier|public
name|ExtensionFunctionCall
name|makeCallExpression
parameter_list|()
block|{
return|return
operator|new
name|ExtensionFunctionCall
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Sequence
name|call
parameter_list|(
name|XPathContext
name|xPathContext
parameter_list|,
name|Sequence
index|[]
name|sequences
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// get value of first arg passed to the function
name|Item
name|arg1
init|=
name|sequences
index|[
literal|0
index|]
operator|.
name|head
argument_list|()
decl_stmt|;
name|String
name|arg1Val
init|=
name|arg1
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
comment|// return a altered version of the first arg
return|return
operator|new
name|StringValue
argument_list|(
literal|"arg1["
operator|+
name|arg1Val
operator|+
literal|"]"
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

