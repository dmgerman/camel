begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ironmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ironmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_class
DECL|class|GsonUtil
specifier|public
specifier|final
class|class
name|GsonUtil
block|{
DECL|field|GSON
specifier|private
specifier|static
specifier|final
name|Gson
name|GSON
init|=
operator|new
name|Gson
argument_list|()
decl_stmt|;
DECL|method|GsonUtil ()
specifier|private
name|GsonUtil
parameter_list|()
block|{     }
DECL|class|IronMqMessage
specifier|static
class|class
name|IronMqMessage
block|{
DECL|field|headers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|body
specifier|private
name|String
name|body
decl_stmt|;
DECL|method|IronMqMessage (String body, Map<String, Object> headers)
name|IronMqMessage
parameter_list|(
name|String
name|body
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
name|this
operator|.
name|body
operator|=
name|body
expr_stmt|;
block|}
DECL|method|getHeaders ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
DECL|method|getBody ()
specifier|public
name|String
name|getBody
parameter_list|()
block|{
return|return
name|body
return|;
block|}
block|}
DECL|method|getBodyFromMessage (Message message)
specifier|static
name|String
name|getBodyFromMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|IronMqMessage
name|ironMessage
init|=
operator|new
name|IronMqMessage
argument_list|(
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|message
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|GSON
operator|.
name|toJson
argument_list|(
name|ironMessage
argument_list|)
return|;
block|}
DECL|method|copyFrom (io.iron.ironmq.Message source, Message target)
specifier|static
name|void
name|copyFrom
parameter_list|(
name|io
operator|.
name|iron
operator|.
name|ironmq
operator|.
name|Message
name|source
parameter_list|,
name|Message
name|target
parameter_list|)
block|{
name|IronMqMessage
name|ironMqMessage
init|=
name|GSON
operator|.
name|fromJson
argument_list|(
name|source
operator|.
name|getBody
argument_list|()
argument_list|,
name|IronMqMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|target
operator|.
name|setBody
argument_list|(
name|ironMqMessage
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ironMqMessage
operator|.
name|getHeaders
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|ironMqMessage
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|getHeader
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|target
operator|.
name|setHeader
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

