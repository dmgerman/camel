begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ironmq.integrationtest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ironmq
operator|.
name|integrationtest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ironmq
operator|.
name|IronMQConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Must be manually tested. Provide your own projectId and token!"
argument_list|)
DECL|class|Queue2QueueExample
specifier|public
class|class
name|Queue2QueueExample
extends|extends
name|CamelTestSupport
block|{
DECL|field|PAYLOAD
specifier|private
specifier|static
specifier|final
name|String
name|PAYLOAD
init|=
literal|"{some:text, number:#}"
decl_stmt|;
comment|// replace with your proejctid
DECL|field|projectId
specifier|private
name|String
name|projectId
init|=
literal|"myIronMQproject"
decl_stmt|;
comment|// replace with your token
DECL|field|token
specifier|private
name|String
name|token
init|=
literal|"myIronMQToken"
decl_stmt|;
DECL|field|ironQueue1
specifier|private
specifier|final
name|String
name|ironQueue1
init|=
literal|"ironmq:queue1?projectId="
operator|+
name|projectId
operator|+
literal|"&token="
operator|+
name|token
operator|+
literal|"&ironMQCloud=https://mq-aws-eu-west-1-1.iron.io"
decl_stmt|;
DECL|field|ironQueue2
specifier|private
specifier|final
name|String
name|ironQueue2
init|=
literal|"ironmq:queue2?projectId="
operator|+
name|projectId
operator|+
literal|"&token="
operator|+
name|token
operator|+
literal|"&ironMQCloud=https://mq-aws-eu-west-1-1.iron.io"
decl_stmt|;
annotation|@
name|Before
DECL|method|clean ()
specifier|public
name|void
name|clean
parameter_list|()
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|ironQueue1
argument_list|,
literal|"fo"
argument_list|,
name|IronMQConstants
operator|.
name|OPERATION
argument_list|,
name|IronMQConstants
operator|.
name|CLEARQUEUE
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|ironQueue2
argument_list|,
literal|"fo"
argument_list|,
name|IronMQConstants
operator|.
name|OPERATION
argument_list|,
name|IronMQConstants
operator|.
name|CLEARQUEUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendMessagesBetweenQueues ()
specifier|public
name|void
name|testSendMessagesBetweenQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payloadToSend
init|=
name|PAYLOAD
operator|.
name|replace
argument_list|(
literal|"#"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|payloadToSend
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
name|ironQueue1
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|ironQueue1
argument_list|)
operator|.
name|to
argument_list|(
name|ironQueue2
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|ironQueue2
argument_list|)
operator|.
name|log
argument_list|(
literal|"got message : ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

