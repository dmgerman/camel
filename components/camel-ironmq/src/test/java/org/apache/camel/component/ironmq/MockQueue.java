begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ironmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ironmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|io
operator|.
name|iron
operator|.
name|ironmq
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|io
operator|.
name|iron
operator|.
name|ironmq
operator|.
name|EmptyQueueException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|iron
operator|.
name|ironmq
operator|.
name|HTTPException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|iron
operator|.
name|ironmq
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|io
operator|.
name|iron
operator|.
name|ironmq
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|io
operator|.
name|iron
operator|.
name|ironmq
operator|.
name|MessageOptions
import|;
end_import

begin_import
import|import
name|io
operator|.
name|iron
operator|.
name|ironmq
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|io
operator|.
name|iron
operator|.
name|ironmq
operator|.
name|Queue
import|;
end_import

begin_class
DECL|class|MockQueue
specifier|public
class|class
name|MockQueue
extends|extends
name|Queue
block|{
DECL|field|messages
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
name|messages
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MockQueue (Client client, String name)
specifier|public
name|MockQueue
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|push (String msg, long delay)
specifier|public
name|String
name|push
parameter_list|(
name|String
name|msg
parameter_list|,
name|long
name|delay
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|randint
init|=
operator|new
name|BigInteger
argument_list|(
literal|24
operator|*
literal|8
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
operator|new
name|Message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|message
operator|.
name|setId
argument_list|(
name|randint
argument_list|)
expr_stmt|;
name|message
operator|.
name|setReservationId
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|messages
operator|.
name|put
argument_list|(
name|randint
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|randint
return|;
block|}
annotation|@
name|Override
DECL|method|pushMessages (String[] msg, long delay)
specifier|public
name|Ids
name|pushMessages
parameter_list|(
name|String
index|[]
name|msg
parameter_list|,
name|long
name|delay
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|messageName
range|:
name|msg
control|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|messageName
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|String
name|randint
init|=
operator|new
name|BigInteger
argument_list|(
literal|24
operator|*
literal|8
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|message
operator|.
name|setId
argument_list|(
name|randint
argument_list|)
expr_stmt|;
name|message
operator|.
name|setReservationId
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|messages
operator|.
name|put
argument_list|(
name|randint
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Ids
name|ids
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|Ids
argument_list|>
name|constructor
init|=
name|Ids
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|(
name|Messages
operator|.
name|class
argument_list|)
decl_stmt|;
name|constructor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Messages
name|messageList
init|=
operator|new
name|Messages
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|(
name|messages
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ids
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|messageList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
return|return
name|ids
return|;
block|}
annotation|@
name|Override
DECL|method|deleteMessage (String id, String reservationId)
specifier|public
name|void
name|deleteMessage
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|reservationId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|messages
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|messages
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HTTPException
argument_list|(
literal|404
argument_list|,
literal|"not found"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteMessages (Messages messages)
specifier|public
name|void
name|deleteMessages
parameter_list|(
name|Messages
name|messages
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageOptions
index|[]
name|messageOptions
init|=
name|messages
operator|.
name|toMessageOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|MessageOptions
name|messageOption
range|:
name|messageOptions
control|)
block|{
name|deleteMessage
argument_list|(
name|messageOption
operator|.
name|getId
argument_list|()
argument_list|,
name|messageOption
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|peek ()
specifier|public
name|Message
name|peek
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|messages
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|messages
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
throw|throw
operator|new
name|EmptyQueueException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|reserve ()
specifier|public
name|Message
name|reserve
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|messages
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
name|next
init|=
name|messages
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|next
operator|.
name|getValue
argument_list|()
return|;
block|}
throw|throw
operator|new
name|EmptyQueueException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|reserve (int numberOfMessages)
specifier|public
name|Messages
name|reserve
parameter_list|(
name|int
name|numberOfMessages
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reserve
argument_list|(
name|numberOfMessages
argument_list|,
literal|120
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reserve (int numberOfMessages, int timeout, int wait)
specifier|public
name|Messages
name|reserve
parameter_list|(
name|int
name|numberOfMessages
parameter_list|,
name|int
name|timeout
parameter_list|,
name|int
name|wait
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|messages
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
argument_list|>
name|iterator
init|=
name|messages
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|i
operator|<
name|numberOfMessages
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|next
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|Messages
name|messages
init|=
operator|new
name|Messages
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Message
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|messages
return|;
block|}
throw|throw
operator|new
name|EmptyQueueException
argument_list|()
throw|;
block|}
DECL|method|add (Message message)
name|void
name|add
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|messages
operator|.
name|put
argument_list|(
name|message
operator|.
name|getId
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

