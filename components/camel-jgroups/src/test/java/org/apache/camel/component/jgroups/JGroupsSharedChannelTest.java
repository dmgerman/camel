begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for shared channel in JGroups endpoint  */
end_comment

begin_class
DECL|class|JGroupsSharedChannelTest
specifier|public
class|class
name|JGroupsSharedChannelTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|JGROUPS_SHARED_CHANNEL
specifier|private
specifier|static
specifier|final
name|String
name|JGROUPS_SHARED_CHANNEL
init|=
literal|"jgroups:sharedChannel"
decl_stmt|;
DECL|field|DIRECT_PRODUCER
specifier|private
specifier|static
specifier|final
name|String
name|DIRECT_PRODUCER
init|=
literal|"direct:producer"
decl_stmt|;
DECL|field|MOCK_CONSUMER
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_CONSUMER
init|=
literal|"mock:consumer"
decl_stmt|;
DECL|field|PRODUCER_ROUTE
specifier|private
specifier|static
specifier|final
name|String
name|PRODUCER_ROUTE
init|=
literal|"producerRoute"
decl_stmt|;
DECL|field|CONSUMER_ROUTE
specifier|private
specifier|static
specifier|final
name|String
name|CONSUMER_ROUTE
init|=
literal|"consumerRoute"
decl_stmt|;
DECL|field|TEST_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MESSAGE
init|=
literal|"Test Message"
decl_stmt|;
annotation|@
name|Test
DECL|method|testStopStartProducer ()
specifier|public
name|void
name|testStopStartProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|context
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|PRODUCER_ROUTE
argument_list|)
expr_stmt|;
name|context
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|startRoute
argument_list|(
name|PRODUCER_ROUTE
argument_list|)
expr_stmt|;
name|testSendReceive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStopStartConsumer ()
specifier|public
name|void
name|testStopStartConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|context
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|CONSUMER_ROUTE
argument_list|)
expr_stmt|;
name|template
argument_list|()
operator|.
name|sendBody
argument_list|(
name|DIRECT_PRODUCER
argument_list|,
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
name|context
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|startRoute
argument_list|(
name|CONSUMER_ROUTE
argument_list|)
expr_stmt|;
name|testSendReceive
argument_list|()
expr_stmt|;
block|}
DECL|method|testSendReceive ()
specifier|private
name|void
name|testSendReceive
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|template
argument_list|()
operator|.
name|sendBody
argument_list|(
name|DIRECT_PRODUCER
argument_list|,
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
specifier|final
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
name|MOCK_CONSUMER
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|DIRECT_PRODUCER
argument_list|)
operator|.
name|routeId
argument_list|(
name|PRODUCER_ROUTE
argument_list|)
operator|.
name|to
argument_list|(
name|JGROUPS_SHARED_CHANNEL
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|JGROUPS_SHARED_CHANNEL
argument_list|)
operator|.
name|routeId
argument_list|(
name|CONSUMER_ROUTE
argument_list|)
operator|.
name|to
argument_list|(
name|MOCK_CONSUMER
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

