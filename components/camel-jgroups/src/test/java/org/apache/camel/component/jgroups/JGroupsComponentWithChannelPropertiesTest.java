begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|JChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JGroupsComponentWithChannelPropertiesTest
specifier|public
class|class
name|JGroupsComponentWithChannelPropertiesTest
extends|extends
name|CamelTestSupport
block|{
comment|// Constants
DECL|field|CLUSTER_NAME
specifier|static
specifier|final
name|String
name|CLUSTER_NAME
init|=
literal|"CLUSTER_NAME"
decl_stmt|;
DECL|field|MESSAGE
specifier|static
specifier|final
name|String
name|MESSAGE
init|=
literal|"MESSAGE"
decl_stmt|;
DECL|field|SAMPLE_CHANNEL_PROPERTY
specifier|static
specifier|final
name|String
name|SAMPLE_CHANNEL_PROPERTY
init|=
literal|"enable_diagnostics=true"
decl_stmt|;
DECL|field|SAMPLE_CHANNEL_PROPERTIES
specifier|static
specifier|final
name|String
name|SAMPLE_CHANNEL_PROPERTIES
init|=
name|String
operator|.
name|format
argument_list|(
literal|"UDP(%s)"
argument_list|,
name|SAMPLE_CHANNEL_PROPERTY
argument_list|)
decl_stmt|;
DECL|field|CONFIGURED_ENDPOINT_URI
specifier|static
specifier|final
name|String
name|CONFIGURED_ENDPOINT_URI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"jgroups:%s?channelProperties=%s"
argument_list|,
name|CLUSTER_NAME
argument_list|,
literal|"udp.xml"
argument_list|)
decl_stmt|;
comment|// Fixtures
DECL|field|clientChannel
name|JChannel
name|clientChannel
decl_stmt|;
DECL|field|defaultComponentChannel
name|JChannel
name|defaultComponentChannel
decl_stmt|;
comment|// Routes fixture
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|JGroupsComponent
name|defaultComponent
init|=
operator|new
name|JGroupsComponent
argument_list|()
decl_stmt|;
name|defaultComponent
operator|.
name|setChannel
argument_list|(
name|defaultComponentChannel
argument_list|)
expr_stmt|;
name|context
argument_list|()
operator|.
name|addComponent
argument_list|(
literal|"my-default-jgroups"
argument_list|,
name|defaultComponent
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"my-default-jgroups:"
operator|+
name|CLUSTER_NAME
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:default"
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|CONFIGURED_ENDPOINT_URI
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:configured"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|// Fixture setup
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doPreSetup
argument_list|()
expr_stmt|;
name|clientChannel
operator|=
operator|new
name|JChannel
argument_list|()
expr_stmt|;
name|clientChannel
operator|.
name|connect
argument_list|(
name|CLUSTER_NAME
argument_list|)
expr_stmt|;
name|defaultComponentChannel
operator|=
operator|new
name|JChannel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|clientChannel
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldConsumeMulticastedMessage ()
specifier|public
name|void
name|shouldConsumeMulticastedMessage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Given
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:default"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|MESSAGE
argument_list|)
expr_stmt|;
comment|// When
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|null
argument_list|,
name|MESSAGE
argument_list|)
decl_stmt|;
name|message
operator|.
name|setSrc
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|clientChannel
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Then
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldConfigureChannelWithProperties ()
specifier|public
name|void
name|shouldConfigureChannelWithProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|// When
name|JGroupsEndpoint
name|endpoint
init|=
name|getMandatoryEndpoint
argument_list|(
name|CONFIGURED_ENDPOINT_URI
argument_list|,
name|JGroupsEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Then
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getResolvedChannel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|SAMPLE_CHANNEL_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldCreateChannel ()
specifier|public
name|void
name|shouldCreateChannel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// When
name|JGroupsEndpoint
name|endpoint
init|=
name|getMandatoryEndpoint
argument_list|(
literal|"my-default-jgroups:"
operator|+
name|CLUSTER_NAME
argument_list|,
name|JGroupsEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|JGroupsComponent
name|component
init|=
operator|(
name|JGroupsComponent
operator|)
name|endpoint
operator|.
name|getComponent
argument_list|()
decl_stmt|;
comment|// Then
name|assertNotNull
argument_list|(
name|component
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

