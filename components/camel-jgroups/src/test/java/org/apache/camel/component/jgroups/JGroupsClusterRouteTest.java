begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|UUID
operator|.
name|randomUUID
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|JGroupsExpressions
operator|.
name|delayIfContextNotStarted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|JGroupsFilters
operator|.
name|dropNonCoordinatorViews
import|;
end_import

begin_class
DECL|class|JGroupsClusterRouteTest
specifier|public
class|class
name|JGroupsClusterRouteTest
extends|extends
name|Assert
block|{
comment|// Routing fixtures
DECL|field|firstCamelContext
name|CamelContext
name|firstCamelContext
decl_stmt|;
DECL|field|secondCamelContext
name|CamelContext
name|secondCamelContext
decl_stmt|;
DECL|field|clusterName
name|String
name|clusterName
init|=
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|masterMockUri
name|String
name|masterMockUri
init|=
literal|"mock:master?resultWaitTime=2m"
decl_stmt|;
DECL|class|Builder
class|class
name|Builder
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"jgroups:"
operator|+
name|clusterName
operator|+
literal|"?enableViewMessages=true"
argument_list|)
operator|.
name|filter
argument_list|(
name|dropNonCoordinatorViews
argument_list|()
argument_list|)
operator|.
name|threads
argument_list|()
operator|.
name|delay
argument_list|(
name|delayIfContextNotStarted
argument_list|(
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"controlbus:route?routeId=masterRoute&action=start&async=true"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"timer://master?repeatCount=1"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"masterRoute"
argument_list|)
operator|.
name|autoStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
name|masterMockUri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|firstCamelContext
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|firstCamelContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|Builder
argument_list|()
argument_list|)
expr_stmt|;
name|secondCamelContext
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|secondCamelContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|Builder
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Tests
annotation|@
name|Test
DECL|method|shouldElectSecondNode ()
specifier|public
name|void
name|shouldElectSecondNode
parameter_list|()
throws|throws
name|Exception
block|{
name|expectMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|firstCamelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|expectMasterIsNot
argument_list|(
name|secondCamelContext
argument_list|)
expr_stmt|;
name|secondCamelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertMasterIsNot
argument_list|(
name|secondCamelContext
argument_list|)
expr_stmt|;
name|expectMasterIs
argument_list|(
name|secondCamelContext
argument_list|)
expr_stmt|;
name|firstCamelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertMasterIs
argument_list|(
name|secondCamelContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldKeepMaster ()
specifier|public
name|void
name|shouldKeepMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|expectMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|firstCamelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|expectMasterIsNot
argument_list|(
name|secondCamelContext
argument_list|)
expr_stmt|;
name|secondCamelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertMasterIsNot
argument_list|(
name|secondCamelContext
argument_list|)
expr_stmt|;
name|expectMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|secondCamelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldElectSecondNodeAndReturnToFirst ()
specifier|public
name|void
name|shouldElectSecondNodeAndReturnToFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|expectMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|firstCamelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|expectMasterIsNot
argument_list|(
name|secondCamelContext
argument_list|)
expr_stmt|;
name|secondCamelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertMasterIsNot
argument_list|(
name|secondCamelContext
argument_list|)
expr_stmt|;
name|expectMasterIsNot
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|firstCamelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertMasterIsNot
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|expectMasterIsNot
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|firstCamelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertMasterIsNot
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|expectMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
name|secondCamelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertMasterIs
argument_list|(
name|firstCamelContext
argument_list|)
expr_stmt|;
block|}
comment|// Helpers
DECL|method|expectMasterIs (CamelContext camelContext)
specifier|private
name|void
name|expectMasterIs
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|masterMockUri
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|expectMasterIsNot (CamelContext camelContext)
specifier|private
name|void
name|expectMasterIsNot
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|masterMockUri
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMasterIs (CamelContext camelContext)
specifier|private
name|void
name|assertMasterIs
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|masterMockUri
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|assertMasterIsNot (CamelContext camelContext)
specifier|private
name|void
name|assertMasterIsNot
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|masterMockUri
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

