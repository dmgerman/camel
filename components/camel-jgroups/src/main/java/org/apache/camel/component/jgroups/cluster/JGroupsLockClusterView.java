begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups.cluster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cluster
operator|.
name|CamelClusterMember
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cluster
operator|.
name|CamelClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|cluster
operator|.
name|AbstractCamelClusterView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|JChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|locking
operator|.
name|LockService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|JGroupsLockClusterView
specifier|public
class|class
name|JGroupsLockClusterView
extends|extends
name|AbstractCamelClusterView
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JGroupsLockClusterView
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|localMember
specifier|private
specifier|final
name|CamelClusterMember
name|localMember
init|=
operator|new
name|JGropusLocalMember
argument_list|()
decl_stmt|;
DECL|field|jgroupsConfig
specifier|private
name|String
name|jgroupsConfig
decl_stmt|;
DECL|field|jgroupsClusterName
specifier|private
name|String
name|jgroupsClusterName
decl_stmt|;
DECL|field|lockName
specifier|private
name|String
name|lockName
decl_stmt|;
DECL|field|channel
specifier|private
name|JChannel
name|channel
decl_stmt|;
DECL|field|lockService
specifier|private
name|LockService
name|lockService
decl_stmt|;
DECL|field|lock
specifier|private
name|Lock
name|lock
decl_stmt|;
DECL|field|executor
specifier|private
name|ScheduledExecutorService
name|executor
decl_stmt|;
DECL|field|isMaster
specifier|private
specifier|volatile
name|boolean
name|isMaster
decl_stmt|;
DECL|method|JGroupsLockClusterView (CamelClusterService cluster, String namespace, String jgroupsConfig, String jgroupsClusterName)
specifier|protected
name|JGroupsLockClusterView
parameter_list|(
name|CamelClusterService
name|cluster
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|jgroupsConfig
parameter_list|,
name|String
name|jgroupsClusterName
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|lockName
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|jgroupsConfig
operator|=
name|jgroupsConfig
expr_stmt|;
name|this
operator|.
name|jgroupsClusterName
operator|=
name|jgroupsClusterName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeader ()
specifier|public
name|Optional
argument_list|<
name|CamelClusterMember
argument_list|>
name|getLeader
parameter_list|()
block|{
if|if
condition|(
name|isMaster
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|localMember
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLocalMember ()
specifier|public
name|CamelClusterMember
name|getLocalMember
parameter_list|()
block|{
return|return
name|localMember
return|;
block|}
annotation|@
name|Override
DECL|method|getMembers ()
specifier|public
name|List
argument_list|<
name|CamelClusterMember
argument_list|>
name|getMembers
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|CamelClusterMember
argument_list|>
argument_list|()
block|{
block|{
name|add
parameter_list|(
name|localMember
parameter_list|)
constructor_decl|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lock
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|channel
operator|==
literal|null
condition|)
block|{
name|channel
operator|=
operator|new
name|JChannel
argument_list|(
name|jgroupsConfig
argument_list|)
expr_stmt|;
name|lockService
operator|=
operator|new
name|LockService
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|connect
argument_list|(
name|jgroupsClusterName
argument_list|)
expr_stmt|;
name|lock
operator|=
name|lockService
operator|.
name|getLock
argument_list|(
name|lockName
argument_list|)
expr_stmt|;
comment|// Camel context should be set at this stage.
specifier|final
name|CamelContext
name|context
init|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
literal|"CamelContext"
argument_list|)
decl_stmt|;
name|executor
operator|=
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"JGroupsLockClusterView-"
operator|+
name|getClusterService
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"-"
operator|+
name|lockName
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to become master acquiring the lock for group: "
operator|+
name|lockName
operator|+
literal|" in JGroups cluster"
operator|+
name|jgroupsClusterName
operator|+
literal|" with configuration: "
operator|+
name|jgroupsConfig
argument_list|)
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isMaster
operator|=
literal|true
expr_stmt|;
name|fireLeadershipChangedEvent
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|localMember
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Became master by acquiring the lock for group: "
operator|+
name|lockName
operator|+
literal|" in JGroups cluster"
operator|+
name|jgroupsClusterName
operator|+
literal|" with configuration: "
operator|+
name|jgroupsConfig
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdownExecutor
argument_list|()
expr_stmt|;
name|isMaster
operator|=
literal|false
expr_stmt|;
name|fireLeadershipChangedEvent
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|clearLock
argument_list|()
expr_stmt|;
name|channel
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdownExecutor
argument_list|()
expr_stmt|;
name|isMaster
operator|=
literal|false
expr_stmt|;
name|fireLeadershipChangedEvent
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|clearLock
argument_list|()
expr_stmt|;
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
name|channel
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|clearLock ()
specifier|private
name|void
name|clearLock
parameter_list|()
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lock
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|shutdownExecutor ()
specifier|private
name|void
name|shutdownExecutor
parameter_list|()
block|{
name|CamelContext
name|context
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|executor
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|JGropusLocalMember
specifier|private
specifier|final
class|class
name|JGropusLocalMember
implements|implements
name|CamelClusterMember
block|{
annotation|@
name|Override
DECL|method|isLeader ()
specifier|public
name|boolean
name|isLeader
parameter_list|()
block|{
return|return
name|isMaster
return|;
block|}
annotation|@
name|Override
DECL|method|isLocal ()
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|getClusterService
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

