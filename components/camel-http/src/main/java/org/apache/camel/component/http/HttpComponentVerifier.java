begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|DefaultComponentVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|ResultBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|ResultErrorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|ResultErrorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|params
operator|.
name|HttpClientParams
import|;
end_import

begin_class
DECL|class|HttpComponentVerifier
specifier|final
class|class
name|HttpComponentVerifier
extends|extends
name|DefaultComponentVerifier
block|{
DECL|field|component
specifier|private
specifier|final
name|HttpComponent
name|component
decl_stmt|;
DECL|method|HttpComponentVerifier (HttpComponent component)
name|HttpComponentVerifier
parameter_list|(
name|HttpComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|component
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
comment|// *********************************
comment|// Parameters validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyParameters (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// The default is success
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|PARAMETERS
argument_list|)
decl_stmt|;
comment|// The httpUri is mandatory
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
literal|"httpUri"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|authMethod
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"authMethod"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authMethod
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// If auth method is set, username and password must be provided
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
literal|"authUsername"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
literal|"authPassword"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if the AuthMethod is known
name|AuthMethod
name|auth
init|=
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|AuthMethod
operator|.
name|class
argument_list|,
name|authMethod
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|!=
name|AuthMethod
operator|.
name|Basic
operator|&&
name|auth
operator|!=
name|AuthMethod
operator|.
name|Digest
operator|&&
name|auth
operator|!=
name|AuthMethod
operator|.
name|NTLM
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withIllegalOption
argument_list|(
literal|"authMethod"
argument_list|,
name|authMethod
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If auth method is NTLM, authDomain is mandatory
if|if
condition|(
name|auth
operator|==
name|AuthMethod
operator|.
name|NTLM
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
literal|"authDomain"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// *********************************
comment|// Connectivity validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyConnectivity (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyConnectivity
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// Default is success
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|CONNECTIVITY
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|uri
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"httpUri"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uri
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// lack of httpUri is a blocking issue
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
literal|"httpUri"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|error
argument_list|(
name|parameters
argument_list|,
name|this
operator|::
name|verifyHttpConnectivity
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|verifyHttpConnectivity (ResultBuilder builder, Map<String, Object> parameters)
specifier|private
name|void
name|verifyHttpConnectivity
parameter_list|(
name|ResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|uri
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"httpUri"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpClient
name|httpclient
init|=
name|createHttpClient
argument_list|(
name|builder
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|HttpMethod
name|method
init|=
operator|new
name|GetMethod
argument_list|(
name|uri
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|code
init|=
name|httpclient
operator|.
name|executeMethod
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|String
name|okCodes
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"okStatusCodeRange"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"200-299"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HttpHelper
operator|.
name|isStatusCodeOk
argument_list|(
name|code
argument_list|,
name|okCodes
argument_list|)
condition|)
block|{
if|if
condition|(
name|code
operator|==
literal|401
condition|)
block|{
comment|// Unauthorized, add authUsername and authPassword to the list
comment|// of parameters in error
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withHttpCode
argument_list|(
name|code
argument_list|)
operator|.
name|description
argument_list|(
name|method
operator|.
name|getStatusText
argument_list|()
argument_list|)
operator|.
name|parameter
argument_list|(
literal|"authUsername"
argument_list|)
operator|.
name|parameter
argument_list|(
literal|"authPassword"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|>=
literal|300
operator|&&
name|code
operator|<
literal|400
condition|)
block|{
comment|// redirect
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withHttpCode
argument_list|(
name|code
argument_list|)
operator|.
name|description
argument_list|(
name|method
operator|.
name|getStatusText
argument_list|()
argument_list|)
operator|.
name|parameter
argument_list|(
literal|"httpUri"
argument_list|)
operator|.
name|attribute
argument_list|(
name|ComponentVerifier
operator|.
name|HTTP_REDIRECT
argument_list|,
literal|true
argument_list|)
operator|.
name|attribute
argument_list|(
name|ComponentVerifier
operator|.
name|HTTP_REDIRECT_LOCATION
argument_list|,
parameter_list|()
lambda|->
name|HttpUtil
operator|.
name|responseHeaderValue
argument_list|(
name|method
argument_list|,
literal|"location"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|>=
literal|400
condition|)
block|{
comment|// generic http error
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withHttpCode
argument_list|(
name|code
argument_list|)
operator|.
name|description
argument_list|(
name|method
operator|.
name|getStatusText
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withException
argument_list|(
name|e
argument_list|)
operator|.
name|parameter
argument_list|(
literal|"httpUri"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// *********************************
comment|// Helpers
comment|// *********************************
DECL|method|configureAuthentication (ResultBuilder builder, Map<String, Object> parameters)
specifier|private
name|Optional
argument_list|<
name|HttpClientConfigurer
argument_list|>
name|configureAuthentication
parameter_list|(
name|ResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|authMethod
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"authMethod"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authMethod
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|authUsername
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"authUsername"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|authPassword
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"authPassword"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authUsername
operator|.
name|isPresent
argument_list|()
operator|&&
name|authUsername
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|AuthMethod
name|auth
init|=
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|AuthMethod
operator|.
name|class
argument_list|,
name|authMethod
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|==
name|AuthMethod
operator|.
name|Basic
operator|||
name|auth
operator|==
name|AuthMethod
operator|.
name|Digest
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|BasicAuthenticationHttpClientConfigurer
argument_list|(
literal|false
argument_list|,
name|authUsername
operator|.
name|get
argument_list|()
argument_list|,
name|authPassword
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|auth
operator|==
name|AuthMethod
operator|.
name|NTLM
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|authDomain
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"authDomain"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|authHost
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"authHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authDomain
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withMissingOption
argument_list|(
literal|"authDomain"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|NTLMAuthenticationHttpClientConfigurer
argument_list|(
literal|false
argument_list|,
name|authUsername
operator|.
name|get
argument_list|()
argument_list|,
name|authPassword
operator|.
name|get
argument_list|()
argument_list|,
name|authDomain
operator|.
name|get
argument_list|()
argument_list|,
name|authHost
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withIllegalOption
argument_list|(
literal|"authMethod"
argument_list|,
name|authMethod
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
literal|"authUsername"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
literal|"authPassword"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|configureProxy (ResultBuilder builder, Map<String, Object> parameters)
specifier|private
name|Optional
argument_list|<
name|HttpClientConfigurer
argument_list|>
name|configureProxy
parameter_list|(
name|ResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|CompositeHttpConfigurer
name|configurer
init|=
operator|new
name|CompositeHttpConfigurer
argument_list|()
decl_stmt|;
comment|// Add a Proxy
name|Optional
argument_list|<
name|String
argument_list|>
name|proxyHost
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxyHost
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|proxyHost
operator|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"proxyHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Optional
argument_list|<
name|Integer
argument_list|>
name|proxyPort
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthPort"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxyPort
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|proxyPort
operator|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"proxyPort"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxyHost
operator|.
name|isPresent
argument_list|()
operator|||
name|proxyPort
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|configurer
operator|.
name|addConfigurer
argument_list|(
operator|new
name|HttpProxyConfigurer
argument_list|(
name|proxyHost
argument_list|,
name|proxyPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Configure proxy auth
name|Optional
argument_list|<
name|String
argument_list|>
name|authMethod
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthMethod"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authMethod
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|authUsername
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthUsername"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|authPassword
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthPassword"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authUsername
operator|.
name|isPresent
argument_list|()
operator|&&
name|authUsername
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|AuthMethod
name|auth
init|=
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|AuthMethod
operator|.
name|class
argument_list|,
name|authMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|==
name|AuthMethod
operator|.
name|Basic
operator|||
name|auth
operator|==
name|AuthMethod
operator|.
name|Digest
condition|)
block|{
name|configurer
operator|.
name|addConfigurer
argument_list|(
operator|new
name|BasicAuthenticationHttpClientConfigurer
argument_list|(
literal|false
argument_list|,
name|authUsername
operator|.
name|get
argument_list|()
argument_list|,
name|authPassword
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|auth
operator|==
name|AuthMethod
operator|.
name|NTLM
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|authDomain
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthDomain"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|authHost
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authDomain
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withMissingOption
argument_list|(
literal|"authDomain"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|NTLMAuthenticationHttpClientConfigurer
argument_list|(
literal|false
argument_list|,
name|authUsername
operator|.
name|get
argument_list|()
argument_list|,
name|authPassword
operator|.
name|get
argument_list|()
argument_list|,
name|authDomain
operator|.
name|get
argument_list|()
argument_list|,
name|authHost
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withIllegalOption
argument_list|(
literal|"authMethod"
argument_list|,
name|authMethod
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
literal|"authUsername"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
literal|"authPassword"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|configurer
argument_list|)
return|;
block|}
DECL|method|createHttpClient (ResultBuilder builder, Map<String, Object> parameters)
specifier|private
name|HttpClient
name|createHttpClient
parameter_list|(
name|ResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpClientParams
name|clientParams
init|=
name|setProperties
argument_list|(
operator|new
name|HttpClientParams
argument_list|()
argument_list|,
literal|"httpClient."
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|(
name|clientParams
argument_list|)
decl_stmt|;
name|CompositeHttpConfigurer
name|configurer
init|=
operator|new
name|CompositeHttpConfigurer
argument_list|()
decl_stmt|;
name|configureProxy
argument_list|(
name|builder
argument_list|,
name|parameters
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|configurer
operator|::
name|addConfigurer
argument_list|)
expr_stmt|;
name|configureAuthentication
argument_list|(
name|builder
argument_list|,
name|parameters
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|configurer
operator|::
name|addConfigurer
argument_list|)
expr_stmt|;
name|configurer
operator|.
name|configureHttpClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
block|}
end_class

end_unit

