begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http.helper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * Helper class to help wrapping content into GZIP input and output streams.  */
end_comment

begin_class
DECL|class|GZIPHelper
specifier|public
specifier|final
class|class
name|GZIPHelper
block|{
DECL|method|GZIPHelper ()
specifier|private
name|GZIPHelper
parameter_list|()
block|{     }
DECL|method|uncompressGzip (String contentEncoding, InputStream in)
specifier|public
specifier|static
name|InputStream
name|uncompressGzip
parameter_list|(
name|String
name|contentEncoding
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isGzip
argument_list|(
name|contentEncoding
argument_list|)
condition|)
block|{
return|return
operator|new
name|GZIPInputStream
argument_list|(
name|in
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
return|;
block|}
block|}
DECL|method|compressGzip (String contentEncoding, InputStream in)
specifier|public
specifier|static
name|InputStream
name|compressGzip
parameter_list|(
name|String
name|contentEncoding
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isGzip
argument_list|(
name|contentEncoding
argument_list|)
condition|)
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GZIPOutputStream
name|gzip
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
try|try
block|{
name|IOHelper
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|gzip
argument_list|)
expr_stmt|;
name|gzip
operator|.
name|finish
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|gzip
argument_list|,
literal|"gzip"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|,
literal|"byte array output stream"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|in
return|;
block|}
block|}
DECL|method|compressGzip (String contentEncoding, byte[] data)
specifier|public
specifier|static
name|InputStream
name|compressGzip
parameter_list|(
name|String
name|contentEncoding
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isGzip
argument_list|(
name|contentEncoding
argument_list|)
condition|)
block|{
name|ByteArrayOutputStream
name|os
init|=
literal|null
decl_stmt|;
name|GZIPOutputStream
name|gzip
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|gzip
operator|=
operator|new
name|GZIPOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|gzip
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|gzip
operator|.
name|finish
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|gzip
argument_list|,
literal|"gzip"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|,
literal|"byte array"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
DECL|method|compressGZIP (byte[] data)
specifier|public
specifier|static
name|byte
index|[]
name|compressGZIP
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GZIPOutputStream
name|gzip
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
try|try
block|{
name|gzip
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|gzip
operator|.
name|finish
argument_list|()
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|gzip
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isGzip (Message message)
specifier|public
specifier|static
name|boolean
name|isGzip
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|isGzip
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isGzip (String header , Exchange exchange)
specifier|public
specifier|static
name|boolean
name|isGzip
parameter_list|(
name|String
name|header
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|==
literal|null
operator|||
operator|!
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|SKIP_GZIP_ENCODING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|isGzip
argument_list|(
name|header
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|isGzip (String header)
specifier|public
specifier|static
name|boolean
name|isGzip
parameter_list|(
name|String
name|header
parameter_list|)
block|{
return|return
name|header
operator|!=
literal|null
operator|&&
name|header
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"gzip"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

