begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * Binding between {@link HttpMessage} and {@link HttpServletResponse}.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultHttpBinding
specifier|public
class|class
name|DefaultHttpBinding
implements|implements
name|HttpBinding
block|{
DECL|field|useReaderForPayload
specifier|private
name|boolean
name|useReaderForPayload
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
init|=
operator|new
name|HttpHeaderFilterStrategy
argument_list|()
decl_stmt|;
DECL|method|DefaultHttpBinding ()
specifier|public
name|DefaultHttpBinding
parameter_list|()
block|{     }
DECL|method|DefaultHttpBinding (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|DefaultHttpBinding
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
DECL|method|readRequest (HttpServletRequest request, HttpMessage message)
specifier|public
name|void
name|readRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
block|{
comment|// lets force a parse of the body and headers
name|message
operator|.
name|getBody
argument_list|()
expr_stmt|;
name|message
operator|.
name|getHeaders
argument_list|()
expr_stmt|;
block|}
DECL|method|writeResponse (HttpExchange exchange, HttpServletResponse response)
specifier|public
name|void
name|writeResponse
parameter_list|(
name|HttpExchange
name|exchange
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exchange
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|Message
name|fault
init|=
name|exchange
operator|.
name|getFault
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fault
operator|!=
literal|null
condition|)
block|{
name|doWriteFaultResponse
argument_list|(
name|fault
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doWriteExceptionResponse
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|doWriteResponse
argument_list|(
name|out
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doWriteExceptionResponse (Throwable exception, HttpServletResponse response)
specifier|public
name|void
name|doWriteExceptionResponse
parameter_list|(
name|Throwable
name|exception
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setStatus
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// 500 for internal server error
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
comment|// append the stacktrace as response
name|PrintWriter
name|pw
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|doWriteFaultResponse (Message message, HttpServletResponse response)
specifier|public
name|void
name|doWriteFaultResponse
parameter_list|(
name|Message
name|message
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|doWriteResponse
argument_list|(
name|message
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|doWriteResponse (Message message, HttpServletResponse response)
specifier|public
name|void
name|doWriteResponse
parameter_list|(
name|Message
name|message
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set the status code in the response. Default is 200.
if|if
condition|(
name|message
operator|.
name|getHeader
argument_list|(
name|HttpProducer
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|int
name|code
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|HttpProducer
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
comment|// set the content type in the response.
if|if
condition|(
name|message
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|contentType
init|=
name|message
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
comment|// append headers
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// write the body.
if|if
condition|(
name|message
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// try to stream the body since that would be the most efficient
name|InputStream
name|is
init|=
name|message
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|ServletOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|response
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
comment|// set content length before we flush
name|response
operator|.
name|setContentLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|data
init|=
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
comment|// set content length before we write data
name|response
operator|.
name|setContentLength
argument_list|(
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|print
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|parseBody (HttpMessage httpMessage)
specifier|public
name|Object
name|parseBody
parameter_list|(
name|HttpMessage
name|httpMessage
parameter_list|)
throws|throws
name|IOException
block|{
comment|// lets assume the body is a reader
name|HttpServletRequest
name|request
init|=
name|httpMessage
operator|.
name|getRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|isUseReaderForPayload
argument_list|()
condition|)
block|{
return|return
name|request
operator|.
name|getReader
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|request
operator|.
name|getInputStream
argument_list|()
return|;
block|}
block|}
DECL|method|isUseReaderForPayload ()
specifier|public
name|boolean
name|isUseReaderForPayload
parameter_list|()
block|{
return|return
name|useReaderForPayload
return|;
block|}
DECL|method|setUseReaderForPayload (boolean useReaderForPayload)
specifier|public
name|void
name|setUseReaderForPayload
parameter_list|(
name|boolean
name|useReaderForPayload
parameter_list|)
block|{
name|this
operator|.
name|useReaderForPayload
operator|=
name|useReaderForPayload
expr_stmt|;
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
block|}
end_class

end_unit

