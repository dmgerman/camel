begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|URIException
import|;
end_import

begin_comment
comment|/**  * An adapter for the Camel<a href="http://camel.apache.org/http">camel-http</a> component  * to map to a simulated {@link HttpServletRequest} which is needed when using  * {@link UrlRewrite} functionality.  *<p/>  *<b>Important:</b> This implementation does not support all the  * methods from {@link HttpServletRequest}. In such cases the method  * return an<i>empty</i> value.  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|HttpRequestAdapter
specifier|public
class|class
name|HttpRequestAdapter
implements|implements
name|HttpServletRequest
block|{
DECL|field|baseUri
specifier|private
specifier|final
name|URI
name|baseUri
decl_stmt|;
DECL|field|method
specifier|private
specifier|final
name|HttpMethod
name|method
decl_stmt|;
DECL|method|HttpRequestAdapter (URI baseUri, HttpMethod method)
specifier|public
name|HttpRequestAdapter
parameter_list|(
name|URI
name|baseUri
parameter_list|,
name|HttpMethod
name|method
parameter_list|)
block|{
name|this
operator|.
name|baseUri
operator|=
name|baseUri
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAuthType ()
specifier|public
name|String
name|getAuthType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCookies ()
specifier|public
name|Cookie
index|[]
name|getCookies
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDateHeader (String name)
specifier|public
name|long
name|getDateHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|header
init|=
name|getHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|header
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getHeader (String name)
specifier|public
name|String
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Header
name|header
init|=
name|method
operator|.
name|getRequestHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|header
operator|!=
literal|null
condition|?
name|header
operator|.
name|getValue
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getHeaders (String name)
specifier|public
name|Enumeration
name|getHeaders
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getHeaderNames ()
specifier|public
name|Enumeration
name|getHeaderNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getIntHeader (String name)
specifier|public
name|int
name|getIntHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|header
init|=
name|getHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|header
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getMethod ()
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|method
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPathInfo ()
specifier|public
name|String
name|getPathInfo
parameter_list|()
block|{
return|return
name|method
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPathTranslated ()
specifier|public
name|String
name|getPathTranslated
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getContextPath ()
specifier|public
name|String
name|getContextPath
parameter_list|()
block|{
return|return
name|baseUri
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getQueryString ()
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|method
operator|.
name|getQueryString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRemoteUser ()
specifier|public
name|String
name|getRemoteUser
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isUserInRole (String role)
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getUserPrincipal ()
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRequestedSessionId ()
specifier|public
name|String
name|getRequestedSessionId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRequestURI ()
specifier|public
name|String
name|getRequestURI
parameter_list|()
block|{
return|return
name|method
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRequestURL ()
specifier|public
name|StringBuffer
name|getRequestURL
parameter_list|()
block|{
try|try
block|{
name|String
name|s
init|=
name|method
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|StringBuffer
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URIException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getServletPath ()
specifier|public
name|String
name|getServletPath
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|getSession (boolean create)
specifier|public
name|HttpSession
name|getSession
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSession ()
specifier|public
name|HttpSession
name|getSession
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isRequestedSessionIdValid ()
specifier|public
name|boolean
name|isRequestedSessionIdValid
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isRequestedSessionIdFromCookie ()
specifier|public
name|boolean
name|isRequestedSessionIdFromCookie
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isRequestedSessionIdFromURL ()
specifier|public
name|boolean
name|isRequestedSessionIdFromURL
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isRequestedSessionIdFromUrl ()
specifier|public
name|boolean
name|isRequestedSessionIdFromUrl
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getAttribute (String name)
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getAttributeNames ()
specifier|public
name|Enumeration
name|getAttributeNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCharacterEncoding ()
specifier|public
name|String
name|getCharacterEncoding
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setCharacterEncoding (String env)
specifier|public
name|void
name|setCharacterEncoding
parameter_list|(
name|String
name|env
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|getContentLength ()
specifier|public
name|int
name|getContentLength
parameter_list|()
block|{
return|return
name|getIntHeader
argument_list|(
literal|"Content-Length"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInputStream ()
specifier|public
name|ServletInputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getParameter (String name)
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getParameterNames ()
specifier|public
name|Enumeration
name|getParameterNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getParameterValues (String name)
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getParameterMap ()
specifier|public
name|Map
name|getParameterMap
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
literal|" HTTP/1.1"
return|;
block|}
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
comment|// http or https
name|String
name|uri
init|=
name|getRequestURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|startsWith
argument_list|(
literal|"https"
argument_list|)
condition|)
block|{
return|return
literal|"https"
return|;
block|}
else|else
block|{
return|return
literal|"http"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getServerName ()
specifier|public
name|String
name|getServerName
parameter_list|()
block|{
return|return
name|baseUri
operator|.
name|getHost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getServerPort ()
specifier|public
name|int
name|getServerPort
parameter_list|()
block|{
return|return
name|baseUri
operator|.
name|getPort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getReader ()
specifier|public
name|BufferedReader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRemoteAddr ()
specifier|public
name|String
name|getRemoteAddr
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRemoteHost ()
specifier|public
name|String
name|getRemoteHost
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setAttribute (String name, Object o)
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|o
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|removeAttribute (String name)
specifier|public
name|void
name|removeAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getLocale ()
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getLocales ()
specifier|public
name|Enumeration
name|getLocales
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isSecure ()
specifier|public
name|boolean
name|isSecure
parameter_list|()
block|{
return|return
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"https"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRequestDispatcher (String path)
specifier|public
name|RequestDispatcher
name|getRequestDispatcher
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRealPath (String path)
specifier|public
name|String
name|getRealPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRemotePort ()
specifier|public
name|int
name|getRemotePort
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalName ()
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalAddr ()
specifier|public
name|String
name|getLocalAddr
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalPort ()
specifier|public
name|int
name|getLocalPort
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

