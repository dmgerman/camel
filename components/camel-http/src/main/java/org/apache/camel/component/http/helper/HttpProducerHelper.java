begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http.helper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpMethods
import|;
end_import

begin_comment
comment|/**  * Helper methods for HTTP producers.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|HttpProducerHelper
specifier|public
specifier|final
class|class
name|HttpProducerHelper
block|{
DECL|method|HttpProducerHelper ()
specifier|private
name|HttpProducerHelper
parameter_list|()
block|{     }
comment|/**      * Creates the URL to invoke.      *      * @param exchange the exchange      * @param endpoint the endpoint      * @return the URL to invoke      */
DECL|method|createURL (Exchange exchange, HttpEndpoint endpoint)
specifier|public
specifier|static
name|String
name|createURL
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|HttpEndpoint
name|endpoint
parameter_list|)
block|{
name|String
name|uri
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|endpoint
operator|.
name|isBridgeEndpoint
argument_list|()
operator|)
condition|)
block|{
name|uri
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// append HTTP_PATH to HTTP_URI if it is provided in the header
name|String
name|path
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|URI
name|baseURI
decl_stmt|;
name|String
name|baseURIString
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_BASE_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|baseURIString
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|baseURIString
operator|=
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// will set a default one for it
name|baseURIString
operator|=
literal|"/"
expr_stmt|;
block|}
block|}
name|baseURI
operator|=
operator|new
name|URI
argument_list|(
name|baseURIString
argument_list|)
expr_stmt|;
name|String
name|basePath
init|=
name|baseURI
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|basePath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot analyze the Exchange.HTTP_PATH header, due to: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// make sure that there is exactly one "/" between HTTP_URI and
comment|// HTTP_PATH
if|if
condition|(
operator|!
name|uri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|+
literal|"/"
expr_stmt|;
block|}
name|uri
operator|=
name|uri
operator|.
name|concat
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|uri
return|;
block|}
comment|/**      * Creates the HttpMethod to use to call the remote server, often either its GET or POST.      *      * @param exchange the exchange      * @return the created method      */
DECL|method|createMethod (Exchange exchange, HttpEndpoint endpoint, boolean hasPayload)
specifier|public
specifier|static
name|HttpMethods
name|createMethod
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|HttpEndpoint
name|endpoint
parameter_list|,
name|boolean
name|hasPayload
parameter_list|)
block|{
comment|// is a query string provided in the endpoint URI or in a header (header
comment|// overrules endpoint)
name|String
name|queryString
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
name|queryString
operator|=
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
comment|// compute what method to use either GET or POST
name|HttpMethods
name|answer
decl_stmt|;
name|HttpMethods
name|m
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|HttpMethods
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
comment|// always use what end-user provides in a header
name|answer
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queryString
operator|!=
literal|null
condition|)
block|{
comment|// if a query string is provided then use GET
name|answer
operator|=
name|HttpMethods
operator|.
name|GET
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to POST if we have payload, otherwise GET
name|answer
operator|=
name|hasPayload
condition|?
name|HttpMethods
operator|.
name|POST
else|:
name|HttpMethods
operator|.
name|GET
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

