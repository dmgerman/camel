begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|helper
operator|.
name|GZIPHelper
import|;
end_import

begin_class
DECL|class|GZIPHelperTest
specifier|public
class|class
name|GZIPHelperTest
extends|extends
name|TestCase
block|{
DECL|method|testGetGZIPWrappedInputStreamTrue ()
specifier|public
name|void
name|testGetGZIPWrappedInputStreamTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|compressed
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GZIPOutputStream
name|gzout
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|compressed
argument_list|)
decl_stmt|;
name|gzout
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|gzout
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|bai
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|compressed
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|inStream
init|=
name|GZIPHelper
operator|.
name|getGZIPWrappedInputStream
argument_list|(
name|GZIPHelper
operator|.
name|GZIP
argument_list|,
name|bai
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Returned InputStream is not of type GZIPInputStream"
argument_list|,
name|inStream
operator|instanceof
name|GZIPInputStream
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGZIPWrappedInputStreamFalse ()
specifier|public
name|void
name|testGetGZIPWrappedInputStreamFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayInputStream
name|bai
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
decl_stmt|;
name|InputStream
name|inStream
init|=
name|GZIPHelper
operator|.
name|getGZIPWrappedInputStream
argument_list|(
literal|"other-encoding"
argument_list|,
name|bai
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected Return InputStream type"
argument_list|,
name|inStream
operator|instanceof
name|GZIPInputStream
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetInputStreamStringByteArrayTrue ()
specifier|public
name|void
name|testGetInputStreamStringByteArrayTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|GZIPHelper
operator|.
name|toGZIPInputStreamIfRequested
argument_list|(
name|GZIPHelper
operator|.
name|GZIP
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|GZIPInputStream
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Returned InpuStream is not GZipped correctly"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetInputStreamStringByteArrayFalse ()
specifier|public
name|void
name|testGetInputStreamStringByteArrayFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|GZIPHelper
operator|.
name|toGZIPInputStreamIfRequested
argument_list|(
literal|"other-encoding"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|GZIPInputStream
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Returned InputStream should not be GZipped!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected error.
block|}
block|}
DECL|method|testCompressArrayIfGZIPRequestedStringByteArrayTrue ()
specifier|public
name|void
name|testCompressArrayIfGZIPRequestedStringByteArrayTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|initialArray
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|ByteArrayOutputStream
name|compressed
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GZIPOutputStream
name|gzout
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|compressed
argument_list|)
decl_stmt|;
name|gzout
operator|.
name|write
argument_list|(
name|initialArray
argument_list|)
expr_stmt|;
name|gzout
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|expectedArray
init|=
name|compressed
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Returned expectedArray is null"
argument_list|,
name|expectedArray
argument_list|)
expr_stmt|;
name|byte
index|[]
name|retArray
init|=
name|GZIPHelper
operator|.
name|compressArrayIfGZIPRequested
argument_list|(
name|GZIPHelper
operator|.
name|GZIP
argument_list|,
name|initialArray
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Returned array is null"
argument_list|,
name|retArray
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Length of returned array is different than expected array."
argument_list|,
name|expectedArray
operator|.
name|length
operator|==
name|retArray
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Contents of returned array is different thatn expected array"
argument_list|,
name|expectedArray
index|[
name|i
index|]
argument_list|,
name|retArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetGZIPWrappedOutputStream ()
specifier|public
name|void
name|testGetGZIPWrappedOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|arrayOutputStream
init|=
name|GZIPHelper
operator|.
name|getGZIPWrappedOutputStream
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|arrayOutputStream
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

