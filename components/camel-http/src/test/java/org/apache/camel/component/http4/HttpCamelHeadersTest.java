begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http4
operator|.
name|handler
operator|.
name|HeaderValidationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|bootstrap
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HttpCamelHeadersTest
specifier|public
class|class
name|HttpCamelHeadersTest
extends|extends
name|BaseHttpTest
block|{
DECL|field|localServer
specifier|protected
name|HttpServer
name|localServer
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"TestHeader"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Accept-Language"
argument_list|,
literal|"pl"
argument_list|)
expr_stmt|;
name|localServer
operator|=
name|ServerBootstrap
operator|.
name|bootstrap
argument_list|()
operator|.
name|setHttpProcessor
argument_list|(
name|getBasicHttpProcessor
argument_list|()
argument_list|)
operator|.
name|setConnectionReuseStrategy
argument_list|(
name|getConnectionReuseStrategy
argument_list|()
argument_list|)
operator|.
name|setResponseFactory
argument_list|(
name|getHttpResponseFactory
argument_list|()
argument_list|)
operator|.
name|setExpectationVerifier
argument_list|(
name|getHttpExpectationVerifier
argument_list|()
argument_list|)
operator|.
name|setSslContext
argument_list|(
name|getSSLContext
argument_list|()
argument_list|)
operator|.
name|registerHandler
argument_list|(
literal|"/"
argument_list|,
operator|new
name|MyHeaderValidationHandler
argument_list|(
literal|"GET"
argument_list|,
literal|"HTTP/1.0"
argument_list|,
name|getExpectedContent
argument_list|()
argument_list|,
name|expectedHeaders
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|localServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|localServer
operator|!=
literal|null
condition|)
block|{
name|localServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|httpHeadersShouldPresent ()
specifier|public
name|void
name|httpHeadersShouldPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExchange
argument_list|(
name|doExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertHeaders (Map<String, Object> headers)
specifier|protected
name|void
name|assertHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
block|{
name|super
operator|.
name|assertHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|headers
operator|.
name|get
argument_list|(
literal|"TestHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pl"
argument_list|,
name|headers
operator|.
name|get
argument_list|(
literal|"Accept-Language"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doExchange ()
specifier|private
name|Exchange
name|doExchange
parameter_list|()
block|{
return|return
name|template
operator|.
name|request
argument_list|(
literal|"http://"
operator|+
name|localServer
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|localServer
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/"
operator|+
name|setupEndpointParams
argument_list|()
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"TestHeader"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"Accept-Language"
argument_list|,
literal|"pl"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PROTOCOL_VERSION
argument_list|,
literal|"HTTP/1.0"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|setupEndpointParams ()
specifier|protected
name|String
name|setupEndpointParams
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
DECL|class|MyHeaderValidationHandler
specifier|private
class|class
name|MyHeaderValidationHandler
extends|extends
name|HeaderValidationHandler
block|{
DECL|field|expectProtocolVersion
specifier|private
name|String
name|expectProtocolVersion
decl_stmt|;
DECL|method|MyHeaderValidationHandler (String expectedMethod, String protocolVersion, String responseContent, Map<String, String> expectedHeaders)
name|MyHeaderValidationHandler
parameter_list|(
name|String
name|expectedMethod
parameter_list|,
name|String
name|protocolVersion
parameter_list|,
name|String
name|responseContent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedHeaders
parameter_list|)
block|{
name|super
argument_list|(
name|expectedMethod
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|responseContent
argument_list|,
name|expectedHeaders
argument_list|)
expr_stmt|;
name|expectProtocolVersion
operator|=
name|protocolVersion
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (final HttpRequest request, final HttpResponse response, final HttpContext context)
specifier|public
name|void
name|handle
parameter_list|(
specifier|final
name|HttpRequest
name|request
parameter_list|,
specifier|final
name|HttpResponse
name|response
parameter_list|,
specifier|final
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|expectProtocolVersion
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getProtocolVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatusCode
argument_list|(
name|HttpStatus
operator|.
name|SC_HTTP_VERSION_NOT_SUPPORTED
argument_list|)
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|handle
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

