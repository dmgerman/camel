begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|HeaderFilteringTest
specifier|public
class|class
name|HeaderFilteringTest
block|{
DECL|field|BODY
specifier|private
specifier|static
specifier|final
name|String
name|BODY
init|=
literal|"{\"example\":\"json\"}"
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|server
specifier|private
name|HttpServer
name|server
decl_stmt|;
annotation|@
name|Test
DECL|method|shouldFilterIncomingHttpHeadersInProducer ()
specifier|public
name|void
name|shouldFilterIncomingHttpHeadersInProducer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HttpComponent
name|http
init|=
operator|new
name|HttpComponent
argument_list|()
decl_stmt|;
specifier|final
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|Producer
name|producer
init|=
name|http
operator|.
name|createProducer
argument_list|(
name|context
argument_list|,
literal|"http://localhost:"
operator|+
name|port
argument_list|,
literal|"GET"
argument_list|,
literal|"/test"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"application/json"
argument_list|,
literal|"application/json"
argument_list|,
operator|new
name|RestConfiguration
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DefaultExchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|DefaultMessage
name|in
init|=
operator|new
name|DefaultMessage
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"Host"
argument_list|,
literal|"www.not-localhost.io"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|BODY
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
name|in
argument_list|)
expr_stmt|;
try|try
block|{
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|HttpOperationFailedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n%s"
argument_list|,
name|e
operator|.
name|getResponseBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|startHttpServer ()
specifier|public
name|void
name|startHttpServer
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|=
name|HttpServer
operator|.
name|create
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|server
operator|.
name|createContext
argument_list|(
literal|"/test"
argument_list|,
name|this
operator|::
name|handleTest
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|port
operator|=
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopHttpServer ()
specifier|public
name|void
name|stopHttpServer
parameter_list|()
block|{
name|server
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|handleTest (final HttpExchange exchange)
name|void
name|handleTest
parameter_list|(
specifier|final
name|HttpExchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|OutputStream
name|responseBody
init|=
name|exchange
operator|.
name|getResponseBody
argument_list|()
init|)
block|{
try|try
block|{
name|assertThat
argument_list|(
name|exchange
operator|.
name|getRequestBody
argument_list|()
argument_list|)
operator|.
name|hasSameContentAs
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|BODY
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exchange
operator|.
name|getRequestHeaders
argument_list|()
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"Host"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|sendResponseHeaders
argument_list|(
literal|200
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|AssertionError
name|error
parameter_list|)
block|{
specifier|final
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|error
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|failure
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|failureBytes
init|=
name|failure
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|sendResponseHeaders
argument_list|(
literal|500
argument_list|,
name|failureBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|responseBody
operator|.
name|write
argument_list|(
name|failureBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

