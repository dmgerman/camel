begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http.handler
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|AbstractHandler
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|BasicValidationHandler
specifier|public
class|class
name|BasicValidationHandler
extends|extends
name|AbstractHandler
block|{
DECL|field|expectedMethod
specifier|protected
name|String
name|expectedMethod
decl_stmt|;
DECL|field|expectedQuery
specifier|protected
name|String
name|expectedQuery
decl_stmt|;
DECL|field|expectedContent
specifier|protected
name|Object
name|expectedContent
decl_stmt|;
DECL|field|responseContent
specifier|protected
name|String
name|responseContent
decl_stmt|;
DECL|method|BasicValidationHandler (String expectedMethod, String expectedQuery, Object expectedContent, String responseContent)
specifier|public
name|BasicValidationHandler
parameter_list|(
name|String
name|expectedMethod
parameter_list|,
name|String
name|expectedQuery
parameter_list|,
name|Object
name|expectedContent
parameter_list|,
name|String
name|responseContent
parameter_list|)
block|{
name|this
operator|.
name|expectedMethod
operator|=
name|expectedMethod
expr_stmt|;
name|this
operator|.
name|expectedQuery
operator|=
name|expectedQuery
expr_stmt|;
name|this
operator|.
name|expectedContent
operator|=
name|expectedContent
expr_stmt|;
name|this
operator|.
name|responseContent
operator|=
name|responseContent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)
specifier|public
name|void
name|handle
parameter_list|(
name|String
name|target
parameter_list|,
name|Request
name|baseRequest
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|baseRequest
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedMethod
operator|!=
literal|null
operator|&&
operator|!
name|expectedMethod
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|validateQuery
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|expectedContent
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|content
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|request
operator|.
name|getReader
argument_list|()
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expectedContent
operator|.
name|equals
argument_list|(
name|content
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseContent
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/plain; charset=utf-8"
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|responseContent
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateQuery (HttpServletRequest request)
specifier|protected
name|boolean
name|validateQuery
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|query
init|=
name|request
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedQuery
operator|!=
literal|null
operator|&&
operator|!
name|expectedQuery
operator|.
name|equals
argument_list|(
name|query
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

