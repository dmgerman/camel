begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.fixed.multibytes
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|fixed
operator|.
name|multibytes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|DataField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|FixedLengthRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|fixed
operator|.
name|BindyFixedLengthDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BindyMultiBytesTest
specifier|public
class|class
name|BindyMultiBytesTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Produce
argument_list|(
literal|"direct:in"
argument_list|)
DECL|field|producer
specifier|private
name|ProducerTemplate
name|producer
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:result"
argument_list|)
DECL|field|result
specifier|private
name|MockEndpoint
name|result
decl_stmt|;
comment|// *************************************************************************
comment|// TESTS
comment|// *************************************************************************
comment|/**      * Let's assume we want to read the content of a 10 bytes record from an UTF-8 encoded file.      * test string takes 10 bytes with 9 characters (2 char = 3 bytes content + padding).      * I assume to be able to read 9 char string from this 10 bytes fixed length record with bindy.      */
annotation|@
name|Test
DECL|method|testMultiBytes ()
specifier|public
name|void
name|testMultiBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"a\u00DF        "
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should be 10 length"
argument_list|,
literal|10
argument_list|,
name|test
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|testAsBytes
init|=
name|test
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"A\u00DF takes 11 bytes, because \u00DF takes 2"
argument_list|,
literal|11
argument_list|,
name|testAsBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessagesMatches
argument_list|(
name|exchange
lambda|->
name|test
operator|.
name|equals
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|TestRecord
operator|.
name|class
argument_list|)
operator|.
name|getField1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|sendBody
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// ROUTES
comment|// *************************************************************************
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteBuilder
name|routeBuilder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|constant
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|unmarshal
argument_list|(
operator|new
name|BindyFixedLengthDataFormat
argument_list|(
name|TestRecord
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|routeBuilder
return|;
block|}
annotation|@
name|FixedLengthRecord
argument_list|(
name|length
operator|=
literal|10
argument_list|,
name|paddingChar
operator|=
literal|' '
argument_list|)
DECL|class|TestRecord
specifier|public
specifier|static
class|class
name|TestRecord
block|{
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|1
argument_list|,
name|length
operator|=
literal|10
argument_list|)
DECL|field|field1
specifier|private
name|String
name|field1
decl_stmt|;
DECL|method|getField1 ()
specifier|public
name|String
name|getField1
parameter_list|()
block|{
return|return
name|field1
return|;
block|}
DECL|method|setField1 (String field1)
specifier|public
name|void
name|setField1
parameter_list|(
name|String
name|field1
parameter_list|)
block|{
name|this
operator|.
name|field1
operator|=
name|field1
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

