begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.format.factories
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|factories
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|FormattingOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|BigDecimalFormatFactoryTest
specifier|public
class|class
name|BigDecimalFormatFactoryTest
block|{
DECL|field|formattingOptions
specifier|private
name|FormattingOptions
name|formattingOptions
init|=
operator|new
name|FormattingOptions
argument_list|()
operator|.
name|forClazz
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|wrongClass
specifier|private
name|FormattingOptions
name|wrongClass
init|=
operator|new
name|FormattingOptions
argument_list|()
operator|.
name|forClazz
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hasPattern
specifier|private
name|FormattingOptions
name|hasPattern
init|=
operator|new
name|FormattingOptions
argument_list|()
operator|.
name|forClazz
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
operator|.
name|withPattern
argument_list|(
literal|"999.99"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|canBuild ()
specifier|public
name|void
name|canBuild
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
operator|new
name|BigDecimalFormatFactory
argument_list|()
operator|.
name|canBuild
argument_list|(
name|formattingOptions
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|BigDecimalFormatFactory
argument_list|()
operator|.
name|canBuild
argument_list|(
name|wrongClass
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|BigDecimalFormatFactory
argument_list|()
operator|.
name|canBuild
argument_list|(
name|hasPattern
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|build ()
specifier|public
name|void
name|build
parameter_list|()
throws|throws
name|Exception
block|{      }
block|}
end_class

end_unit

