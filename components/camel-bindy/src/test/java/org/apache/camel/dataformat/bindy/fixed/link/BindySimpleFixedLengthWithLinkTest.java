begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.fixed.link
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|fixed
operator|.
name|link
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|DataField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|FixedLengthRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BindyDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BindyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * This test validates that header and footer records are successfully  * marshalled / unmarshalled in conjunction with the primary data records  * defined for the bindy data format.  */
end_comment

begin_class
DECL|class|BindySimpleFixedLengthWithLinkTest
specifier|public
class|class
name|BindySimpleFixedLengthWithLinkTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|URI_DIRECT_UNMARSHALL
specifier|public
specifier|static
specifier|final
name|String
name|URI_DIRECT_UNMARSHALL
init|=
literal|"direct:unmarshall"
decl_stmt|;
DECL|field|URI_MOCK_UNMARSHALL_RESULT
specifier|public
specifier|static
specifier|final
name|String
name|URI_MOCK_UNMARSHALL_RESULT
init|=
literal|"mock:unmarshall-result"
decl_stmt|;
DECL|field|URI_DIRECT_MARSHALL
specifier|public
specifier|static
specifier|final
name|String
name|URI_DIRECT_MARSHALL
init|=
literal|"direct:marshall"
decl_stmt|;
DECL|field|URI_MOCK_MARSHALL_RESULT
specifier|public
specifier|static
specifier|final
name|String
name|URI_MOCK_MARSHALL_RESULT
init|=
literal|"mock:marshall-result"
decl_stmt|;
DECL|field|TEST_RECORD
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RECORD
init|=
literal|"AAABBBCCC\r\n"
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|URI_MOCK_UNMARSHALL_RESULT
argument_list|)
DECL|field|unmarshallResult
specifier|private
name|MockEndpoint
name|unmarshallResult
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|URI_MOCK_MARSHALL_RESULT
argument_list|)
DECL|field|marshallResult
specifier|private
name|MockEndpoint
name|marshallResult
decl_stmt|;
comment|// *************************************************************************
comment|// TESTS
comment|// *************************************************************************
annotation|@
name|Test
DECL|method|testUnmarshallMessage ()
specifier|public
name|void
name|testUnmarshallMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|unmarshallResult
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|URI_DIRECT_UNMARSHALL
argument_list|,
name|TEST_RECORD
argument_list|)
expr_stmt|;
name|unmarshallResult
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// check the model
name|Exchange
name|exchange
init|=
name|unmarshallResult
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Order
name|order
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Order
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|order
operator|.
name|fieldA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|order
operator|.
name|fieldC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|order
operator|.
name|subRec
operator|.
name|fieldB
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshallMessage ()
specifier|public
name|void
name|testMarshallMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|marshallResult
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|()
decl_stmt|;
name|order
operator|.
name|setFieldA
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|order
operator|.
name|setFieldC
argument_list|(
literal|"CCC"
argument_list|)
expr_stmt|;
name|SubRec
name|subRec
init|=
operator|new
name|SubRec
argument_list|()
decl_stmt|;
name|subRec
operator|.
name|setFieldB
argument_list|(
literal|"BBB"
argument_list|)
expr_stmt|;
name|order
operator|.
name|setSubRec
argument_list|(
name|subRec
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|URI_DIRECT_MARSHALL
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|marshallResult
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// check the model
name|Exchange
name|exchange
init|=
name|marshallResult
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|asString
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|asString
argument_list|,
name|is
argument_list|(
literal|"AAABBBCCC\r\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// ROUTES
comment|// *************************************************************************
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteBuilder
name|routeBuilder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|BindyDataFormat
name|bindy
init|=
operator|new
name|BindyDataFormat
argument_list|()
decl_stmt|;
name|bindy
operator|.
name|setClassType
argument_list|(
name|Order
operator|.
name|class
argument_list|)
expr_stmt|;
name|bindy
operator|.
name|setLocale
argument_list|(
literal|"en"
argument_list|)
expr_stmt|;
name|bindy
operator|.
name|setType
argument_list|(
name|BindyType
operator|.
name|Fixed
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|URI_DIRECT_UNMARSHALL
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|bindy
argument_list|)
operator|.
name|to
argument_list|(
name|URI_MOCK_UNMARSHALL_RESULT
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|URI_DIRECT_MARSHALL
argument_list|)
operator|.
name|marshal
argument_list|(
name|bindy
argument_list|)
operator|.
name|to
argument_list|(
name|URI_MOCK_MARSHALL_RESULT
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|routeBuilder
return|;
block|}
annotation|@
name|FixedLengthRecord
DECL|class|Order
specifier|public
specifier|static
class|class
name|Order
block|{
comment|// 'AAA'
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|1
argument_list|,
name|length
operator|=
literal|3
argument_list|)
DECL|field|fieldA
specifier|private
name|String
name|fieldA
decl_stmt|;
annotation|@
name|Link
DECL|field|subRec
specifier|private
name|SubRec
name|subRec
decl_stmt|;
comment|// 'CCC'
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|7
argument_list|,
name|length
operator|=
literal|3
argument_list|)
DECL|field|fieldC
specifier|private
name|String
name|fieldC
decl_stmt|;
DECL|method|getFieldA ()
specifier|public
name|String
name|getFieldA
parameter_list|()
block|{
return|return
name|fieldA
return|;
block|}
DECL|method|setFieldA (String fieldA)
specifier|public
name|void
name|setFieldA
parameter_list|(
name|String
name|fieldA
parameter_list|)
block|{
name|this
operator|.
name|fieldA
operator|=
name|fieldA
expr_stmt|;
block|}
DECL|method|getFieldC ()
specifier|public
name|String
name|getFieldC
parameter_list|()
block|{
return|return
name|fieldC
return|;
block|}
DECL|method|setFieldC (String fieldC)
specifier|public
name|void
name|setFieldC
parameter_list|(
name|String
name|fieldC
parameter_list|)
block|{
name|this
operator|.
name|fieldC
operator|=
name|fieldC
expr_stmt|;
block|}
DECL|method|getSubRec ()
specifier|public
name|SubRec
name|getSubRec
parameter_list|()
block|{
return|return
name|subRec
return|;
block|}
DECL|method|setSubRec (SubRec subRec)
specifier|public
name|void
name|setSubRec
parameter_list|(
name|SubRec
name|subRec
parameter_list|)
block|{
name|this
operator|.
name|subRec
operator|=
name|subRec
expr_stmt|;
block|}
block|}
annotation|@
name|Link
annotation|@
name|FixedLengthRecord
DECL|class|SubRec
specifier|public
specifier|static
class|class
name|SubRec
block|{
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|4
argument_list|,
name|length
operator|=
literal|3
argument_list|)
DECL|field|fieldB
specifier|private
name|String
name|fieldB
decl_stmt|;
DECL|method|getFieldB ()
specifier|public
name|String
name|getFieldB
parameter_list|()
block|{
return|return
name|fieldB
return|;
block|}
DECL|method|setFieldB (String fieldB)
specifier|public
name|void
name|setFieldB
parameter_list|(
name|String
name|fieldB
parameter_list|)
block|{
name|this
operator|.
name|fieldB
operator|=
name|fieldB
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

