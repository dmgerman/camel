begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|CsvRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|DataField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|AbstractJUnit4SpringContextTests
import|;
end_import

begin_class
annotation|@
name|ContextConfiguration
DECL|class|BindyCsvSkipFieldTest
specifier|public
class|class
name|BindyCsvSkipFieldTest
extends|extends
name|AbstractJUnit4SpringContextTests
block|{
DECL|field|URI_MOCK_RESULT
specifier|private
specifier|static
specifier|final
name|String
name|URI_MOCK_RESULT
init|=
literal|"mock:result"
decl_stmt|;
DECL|field|URI_DIRECT_START
specifier|private
specifier|static
specifier|final
name|String
name|URI_DIRECT_START
init|=
literal|"direct:start"
decl_stmt|;
DECL|field|input
specifier|private
specifier|static
name|String
name|input
init|=
literal|"VOA,12 abc street,Skip Street,Melbourne,VIC,3000,Australia,Skip dummy1,end of record"
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
name|URI_DIRECT_START
argument_list|)
DECL|field|template
specifier|private
name|ProducerTemplate
name|template
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
name|URI_MOCK_RESULT
argument_list|)
DECL|field|result
specifier|private
name|MockEndpoint
name|result
decl_stmt|;
annotation|@
name|Test
annotation|@
name|DirtiesContext
DECL|method|testUnMarshalAndMarshal ()
specifier|public
name|void
name|testUnMarshalAndMarshal
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|class|ContextConfig
specifier|public
specifier|static
class|class
name|ContextConfig
extends|extends
name|RouteBuilder
block|{
DECL|field|camelDataFormat
name|BindyCsvDataFormat
name|camelDataFormat
init|=
operator|new
name|BindyCsvDataFormat
argument_list|(
name|CsvSkipField
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
name|URI_DIRECT_START
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|camelDataFormat
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CsvSkipField
name|csvSkipField
init|=
operator|(
name|CsvSkipField
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
assert|assert
name|csvSkipField
operator|.
name|getAttention
argument_list|()
operator|.
name|equals
argument_list|(
literal|"VOA"
argument_list|)
assert|;
assert|assert
name|csvSkipField
operator|.
name|getAddressLine1
argument_list|()
operator|.
name|equals
argument_list|(
literal|"12 abc street"
argument_list|)
assert|;
assert|assert
name|csvSkipField
operator|.
name|getCity
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Melbourne"
argument_list|)
assert|;
assert|assert
name|csvSkipField
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
literal|"VIC"
argument_list|)
assert|;
assert|assert
name|csvSkipField
operator|.
name|getZip
argument_list|()
operator|.
name|equals
argument_list|(
literal|"3000"
argument_list|)
assert|;
assert|assert
name|csvSkipField
operator|.
name|getCountry
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Australia"
argument_list|)
assert|;
assert|assert
name|csvSkipField
operator|.
name|getDummy2
argument_list|()
operator|.
name|equals
argument_list|(
literal|"end of record"
argument_list|)
assert|;
block|}
block|}
argument_list|)
operator|.
name|marshal
argument_list|(
name|camelDataFormat
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|URI_MOCK_RESULT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|CsvRecord
argument_list|(
name|separator
operator|=
literal|","
argument_list|,
name|skipField
operator|=
literal|true
argument_list|)
DECL|class|CsvSkipField
specifier|public
specifier|static
class|class
name|CsvSkipField
block|{
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|1
argument_list|)
DECL|field|attention
specifier|private
name|String
name|attention
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|2
argument_list|)
DECL|field|addressLine1
specifier|private
name|String
name|addressLine1
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|4
argument_list|)
DECL|field|city
specifier|private
name|String
name|city
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|5
argument_list|)
DECL|field|state
specifier|private
name|String
name|state
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|6
argument_list|)
DECL|field|zip
specifier|private
name|String
name|zip
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|7
argument_list|)
DECL|field|country
specifier|private
name|String
name|country
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|9
argument_list|)
DECL|field|dummy2
specifier|private
name|String
name|dummy2
decl_stmt|;
DECL|method|getAttention ()
specifier|public
name|String
name|getAttention
parameter_list|()
block|{
return|return
name|attention
return|;
block|}
DECL|method|setAttention (String attention)
specifier|public
name|void
name|setAttention
parameter_list|(
name|String
name|attention
parameter_list|)
block|{
name|this
operator|.
name|attention
operator|=
name|attention
expr_stmt|;
block|}
DECL|method|getAddressLine1 ()
specifier|public
name|String
name|getAddressLine1
parameter_list|()
block|{
return|return
name|addressLine1
return|;
block|}
DECL|method|setAddressLine1 (String addressLine1)
specifier|public
name|void
name|setAddressLine1
parameter_list|(
name|String
name|addressLine1
parameter_list|)
block|{
name|this
operator|.
name|addressLine1
operator|=
name|addressLine1
expr_stmt|;
block|}
DECL|method|getCity ()
specifier|public
name|String
name|getCity
parameter_list|()
block|{
return|return
name|city
return|;
block|}
DECL|method|setCity (String city)
specifier|public
name|void
name|setCity
parameter_list|(
name|String
name|city
parameter_list|)
block|{
name|this
operator|.
name|city
operator|=
name|city
expr_stmt|;
block|}
DECL|method|getState ()
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|setState (String state)
specifier|public
name|void
name|setState
parameter_list|(
name|String
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
DECL|method|getZip ()
specifier|public
name|String
name|getZip
parameter_list|()
block|{
return|return
name|zip
return|;
block|}
DECL|method|setZip (String zip)
specifier|public
name|void
name|setZip
parameter_list|(
name|String
name|zip
parameter_list|)
block|{
name|this
operator|.
name|zip
operator|=
name|zip
expr_stmt|;
block|}
DECL|method|getCountry ()
specifier|public
name|String
name|getCountry
parameter_list|()
block|{
return|return
name|country
return|;
block|}
DECL|method|setCountry (String country)
specifier|public
name|void
name|setCountry
parameter_list|(
name|String
name|country
parameter_list|)
block|{
name|this
operator|.
name|country
operator|=
name|country
expr_stmt|;
block|}
DECL|method|getDummy2 ()
specifier|public
name|String
name|getDummy2
parameter_list|()
block|{
return|return
name|dummy2
return|;
block|}
DECL|method|setDummy2 (String dummy2)
specifier|public
name|void
name|setDummy2
parameter_list|(
name|String
name|dummy2
parameter_list|)
block|{
name|this
operator|.
name|dummy2
operator|=
name|dummy2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Record [attention="
operator|+
name|getAttention
argument_list|()
operator|+
literal|", addressLine1="
operator|+
name|getAddressLine1
argument_list|()
operator|+
literal|", "
operator|+
literal|"city="
operator|+
name|getCity
argument_list|()
operator|+
literal|", state="
operator|+
name|getState
argument_list|()
operator|+
literal|", zip="
operator|+
name|getZip
argument_list|()
operator|+
literal|", country="
operator|+
name|getCountry
argument_list|()
operator|+
literal|", dummy2="
operator|+
name|getDummy2
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

end_unit

