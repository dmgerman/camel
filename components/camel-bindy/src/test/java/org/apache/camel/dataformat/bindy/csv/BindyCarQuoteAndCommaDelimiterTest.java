begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|factories
operator|.
name|DefaultFactoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|model
operator|.
name|car
operator|.
name|Car
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|model
operator|.
name|car
operator|.
name|Car
operator|.
name|Colour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|PropertyPlaceholderDelegateRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BindyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BindyCarQuoteAndCommaDelimiterTest
specifier|public
class|class
name|BindyCarQuoteAndCommaDelimiterTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|HEADER
specifier|private
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"\"stockid\";\"make\";\"model\";\"deriv\";\"series\";\"registration\";\"chassis\";\"engine\";\"year\""
operator|+
literal|";\"klms\";\"body\";\"colour\";\"enginesize\";\"trans\";\"fuel\";\"options\";\"desc\";\"status\";\"Reserve_price\";\"nvic\""
decl_stmt|;
DECL|field|ROW
specifier|private
specifier|static
specifier|final
name|String
name|ROW
init|=
literal|"\"SS552\";\"TOYOTA\";\"KLUGER\";\"CV 4X4\";\"MCU28R UPGRADE\";\"TBA\";\"\";\"\";\"2005\";\"155000.0\";\"4D WAGON\""
operator|+
literal|";\"BLACK\";\"3.3 LTR\";\"5 Sp Auto\";\"MULTI POINT FINJ\";\"POWER MIRRORS, POWER STEERING, POWER WINDOWS, CRUISE CONTROL,"
operator|+
literal|" ENGINE IMMOBILISER, BRAKE ASSIST, DUAL AIRBAG PACKAGE, ANTI-LOCK BRAKING, CENTRAL LOCKING REMOTE CONTROL, ALARM SYSTEM/REMOTE"
operator|+
literal|" ANTI THEFT, AUTOMATIC AIR CON / CLIMATE CONTROL, ELECTRONIC BRAKE FORCE DISTRIBUTION, CLOTH TRIM, LIMITED SLIP DIFFERENTIAL,"
operator|+
literal|" RADIO CD WITH 6 SPEAKERS\";\"Dual Airbag Package, Anti-lock Braking, Automatic Air Con / Climate Control, Alarm System/Remote"
operator|+
literal|" Anti Theft, Brake Assist, Cruise Control, Central Locking Remote Control, Cloth Trim, Electronic Brake Force Distribution,"
operator|+
literal|" Engine Immobiliser, Limited Slip Differential, Power Mirrors, Power Steering, Power Windows, Radio CD with 6 Speakers"
operator|+
literal|" CV GOOD KLMS AUTO POWER OPTIONS GOOD KLMS   \";\"Used\";\"0.0\";\"EZR05I\"\n"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|PropertyPlaceholderDelegateRegistry
name|registry
init|=
operator|(
name|PropertyPlaceholderDelegateRegistry
operator|)
name|context
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|JndiRegistry
name|reg
init|=
operator|(
name|JndiRegistry
operator|)
name|registry
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|reg
operator|.
name|bind
argument_list|(
literal|"defaultFactoryRegistry"
argument_list|,
operator|new
name|DefaultFactoryRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBindyUnmarshalQuoteAndCommaDelimiter ()
specifier|public
name|void
name|testBindyUnmarshalQuoteAndCommaDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:out"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:out"
argument_list|,
name|HEADER
operator|+
literal|"\n"
operator|+
name|ROW
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Car
name|rec1
init|=
name|mock
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Car
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SS552"
argument_list|,
name|rec1
operator|.
name|getStockid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TOYOTA"
argument_list|,
name|rec1
operator|.
name|getMake
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KLUGER"
argument_list|,
name|rec1
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2005
argument_list|,
name|rec1
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|"155000.0"
argument_list|)
argument_list|,
name|rec1
operator|.
name|getKlms
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EZR05I"
argument_list|,
name|rec1
operator|.
name|getNvic
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Used"
argument_list|,
name|rec1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Car
operator|.
name|Colour
operator|.
name|BLACK
argument_list|,
name|rec1
operator|.
name|getColour
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBindyMarshalQuoteAndCommaDelimiter ()
specifier|public
name|void
name|testBindyMarshalQuoteAndCommaDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:in"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Car
name|car
init|=
name|getCar
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:in"
argument_list|,
name|car
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|String
name|body
init|=
name|mock
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ROW
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|model
operator|.
name|car
operator|.
name|Car
operator|.
name|class
decl_stmt|;
name|BindyCsvDataFormat
name|dataFormat
init|=
operator|new
name|BindyCsvDataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setClassType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setLocale
argument_list|(
literal|"en"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:out"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|bindy
argument_list|(
name|BindyType
operator|.
name|Csv
argument_list|,
name|type
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:out"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|marshal
argument_list|(
name|dataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:in"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getCar ()
specifier|private
name|Car
name|getCar
parameter_list|()
block|{
name|Car
name|car
init|=
operator|new
name|Car
argument_list|()
decl_stmt|;
name|car
operator|.
name|setStockid
argument_list|(
literal|"SS552"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setMake
argument_list|(
literal|"TOYOTA"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setModel
argument_list|(
literal|"KLUGER"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setDeriv
argument_list|(
literal|"CV 4X4"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setSeries
argument_list|(
literal|"MCU28R UPGRADE"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setRegistration
argument_list|(
literal|"TBA"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setChassis
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|car
operator|.
name|setEngine
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|car
operator|.
name|setYear
argument_list|(
literal|2005
argument_list|)
expr_stmt|;
name|car
operator|.
name|setKlms
argument_list|(
literal|155000
argument_list|)
expr_stmt|;
name|car
operator|.
name|setBody
argument_list|(
literal|"4D WAGON"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setColour
argument_list|(
name|Colour
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|car
operator|.
name|setEnginesize
argument_list|(
literal|"3.3 LTR"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setTrans
argument_list|(
literal|"5 Sp Auto"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setFuel
argument_list|(
literal|"MULTI POINT FINJ"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setOptions
argument_list|(
literal|"POWER MIRRORS, POWER STEERING, POWER WINDOWS, CRUISE CONTROL,"
operator|+
literal|" ENGINE IMMOBILISER, BRAKE ASSIST, DUAL AIRBAG PACKAGE, ANTI-LOCK BRAKING, CENTRAL LOCKING REMOTE CONTROL, ALARM SYSTEM/REMOTE"
operator|+
literal|" ANTI THEFT, AUTOMATIC AIR CON / CLIMATE CONTROL, ELECTRONIC BRAKE FORCE DISTRIBUTION, CLOTH TRIM, LIMITED SLIP DIFFERENTIAL,"
operator|+
literal|" RADIO CD WITH 6 SPEAKERS"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setDesc
argument_list|(
literal|"Dual Airbag Package, Anti-lock Braking, Automatic Air Con / Climate Control, Alarm System/Remote"
operator|+
literal|" Anti Theft, Brake Assist, Cruise Control, Central Locking Remote Control, Cloth Trim, Electronic Brake Force Distribution,"
operator|+
literal|" Engine Immobiliser, Limited Slip Differential, Power Mirrors, Power Steering, Power Windows, Radio CD with 6 Speakers"
operator|+
literal|" CV GOOD KLMS AUTO POWER OPTIONS GOOD KLMS   "
argument_list|)
expr_stmt|;
name|car
operator|.
name|setStatus
argument_list|(
literal|"Used"
argument_list|)
expr_stmt|;
name|car
operator|.
name|setNvic
argument_list|(
literal|"EZR05I"
argument_list|)
expr_stmt|;
return|return
name|car
return|;
block|}
block|}
end_class

end_unit

