begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.fixed.number
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|fixed
operator|.
name|number
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|DataField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|FixedLengthRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BindyDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BindyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|AbstractJUnit4SpringContextTests
import|;
end_import

begin_class
annotation|@
name|ContextConfiguration
DECL|class|BindyNumberTest
specifier|public
class|class
name|BindyNumberTest
extends|extends
name|AbstractJUnit4SpringContextTests
block|{
DECL|field|URI_DIRECT_MARSHALL
specifier|public
specifier|static
specifier|final
name|String
name|URI_DIRECT_MARSHALL
init|=
literal|"direct:marshall"
decl_stmt|;
DECL|field|URI_DIRECT_UNMARSHALL
specifier|public
specifier|static
specifier|final
name|String
name|URI_DIRECT_UNMARSHALL
init|=
literal|"direct:unmarshall"
decl_stmt|;
DECL|field|URI_MOCK_MARSHALL_RESULT
specifier|public
specifier|static
specifier|final
name|String
name|URI_MOCK_MARSHALL_RESULT
init|=
literal|"mock:marshall-result"
decl_stmt|;
DECL|field|URI_MOCK_UNMARSHALL_RESULT
specifier|public
specifier|static
specifier|final
name|String
name|URI_MOCK_UNMARSHALL_RESULT
init|=
literal|"mock:unmarshall-result"
decl_stmt|;
comment|// *************************************************************************
comment|//
comment|// *************************************************************************
annotation|@
name|Produce
argument_list|(
name|URI_DIRECT_MARSHALL
argument_list|)
DECL|field|mtemplate
specifier|private
name|ProducerTemplate
name|mtemplate
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|URI_MOCK_MARSHALL_RESULT
argument_list|)
DECL|field|mresult
specifier|private
name|MockEndpoint
name|mresult
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|URI_DIRECT_UNMARSHALL
argument_list|)
DECL|field|utemplate
specifier|private
name|ProducerTemplate
name|utemplate
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|URI_MOCK_UNMARSHALL_RESULT
argument_list|)
DECL|field|uresult
specifier|private
name|MockEndpoint
name|uresult
decl_stmt|;
comment|// *************************************************************************
comment|// TEST
comment|// *************************************************************************
annotation|@
name|Test
annotation|@
name|DirtiesContext
DECL|method|testMarshall ()
specifier|public
name|void
name|testMarshall
parameter_list|()
throws|throws
name|Exception
block|{
name|DataModel
name|rec
init|=
operator|new
name|DataModel
argument_list|()
decl_stmt|;
name|rec
operator|.
name|field1
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|123.45
argument_list|)
expr_stmt|;
name|rec
operator|.
name|field2
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|10.00
argument_list|)
expr_stmt|;
name|rec
operator|.
name|field3
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|10.00
argument_list|)
expr_stmt|;
name|rec
operator|.
name|field4
operator|=
operator|new
name|Double
argument_list|(
literal|10.00
argument_list|)
expr_stmt|;
name|rec
operator|.
name|field5
operator|=
operator|new
name|Double
argument_list|(
literal|10.00
argument_list|)
expr_stmt|;
name|mresult
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"1234510.00   1010.00   10\r\n"
argument_list|)
expr_stmt|;
name|mtemplate
operator|.
name|sendBody
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|mresult
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|DirtiesContext
DECL|method|testUnMarshall ()
specifier|public
name|void
name|testUnMarshall
parameter_list|()
throws|throws
name|Exception
block|{
name|utemplate
operator|.
name|sendBody
argument_list|(
literal|"1234510.00   1010.00   10"
argument_list|)
expr_stmt|;
name|uresult
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|uresult
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// check the model
name|Exchange
name|exc
init|=
name|uresult
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DataModel
name|data
init|=
name|exc
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|DataModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|123.45D
argument_list|,
name|data
operator|.
name|field1
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10.00D
argument_list|,
name|data
operator|.
name|field2
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10.00D
argument_list|,
name|data
operator|.
name|field3
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10.00D
argument_list|,
name|data
operator|.
name|field4
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10.00D
argument_list|,
name|data
operator|.
name|field5
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// ROUTES
comment|// *************************************************************************
DECL|class|ContextConfig
specifier|public
specifier|static
class|class
name|ContextConfig
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|BindyDataFormat
name|bindy
init|=
operator|new
name|BindyDataFormat
argument_list|()
decl_stmt|;
name|bindy
operator|.
name|setClassType
argument_list|(
name|DataModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|bindy
operator|.
name|setLocale
argument_list|(
literal|"en"
argument_list|)
expr_stmt|;
name|bindy
operator|.
name|setType
argument_list|(
name|BindyType
operator|.
name|Fixed
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|URI_DIRECT_MARSHALL
argument_list|)
operator|.
name|marshal
argument_list|(
name|bindy
argument_list|)
operator|.
name|to
argument_list|(
name|URI_MOCK_MARSHALL_RESULT
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|URI_DIRECT_UNMARSHALL
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|bindy
argument_list|(
name|BindyType
operator|.
name|Fixed
argument_list|,
name|DataModel
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|URI_MOCK_UNMARSHALL_RESULT
argument_list|)
expr_stmt|;
block|}
block|}
comment|// *************************************************************************
comment|// DATA MODEL
comment|// *************************************************************************
annotation|@
name|FixedLengthRecord
argument_list|(
name|length
operator|=
literal|25
argument_list|,
name|paddingChar
operator|=
literal|' '
argument_list|)
DECL|class|DataModel
specifier|public
specifier|static
class|class
name|DataModel
block|{
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|1
argument_list|,
name|length
operator|=
literal|5
argument_list|,
name|precision
operator|=
literal|2
argument_list|,
name|impliedDecimalSeparator
operator|=
literal|true
argument_list|)
DECL|field|field1
specifier|public
name|BigDecimal
name|field1
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|6
argument_list|,
name|length
operator|=
literal|5
argument_list|,
name|precision
operator|=
literal|2
argument_list|)
DECL|field|field2
specifier|public
name|BigDecimal
name|field2
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|11
argument_list|,
name|length
operator|=
literal|5
argument_list|)
DECL|field|field3
specifier|public
name|BigDecimal
name|field3
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|16
argument_list|,
name|length
operator|=
literal|5
argument_list|,
name|precision
operator|=
literal|2
argument_list|)
DECL|field|field4
specifier|public
name|Double
name|field4
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|21
argument_list|,
name|length
operator|=
literal|5
argument_list|)
DECL|field|field5
specifier|public
name|Double
name|field5
decl_stmt|;
block|}
block|}
end_class

end_unit

