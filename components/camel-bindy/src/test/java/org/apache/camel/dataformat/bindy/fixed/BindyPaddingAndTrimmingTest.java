begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.fixed
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|fixed
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|DataField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|FixedLengthRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BindyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BindyPaddingAndTrimmingTest
specifier|public
class|class
name|BindyPaddingAndTrimmingTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|URI_DIRECT_UNMARSHAL
specifier|private
specifier|static
specifier|final
name|String
name|URI_DIRECT_UNMARSHAL
init|=
literal|"direct:unmarshall"
decl_stmt|;
DECL|field|URI_MOCK_UNMARSHAL_RESULT
specifier|private
specifier|static
specifier|final
name|String
name|URI_MOCK_UNMARSHAL_RESULT
init|=
literal|"mock:unmarshal_result"
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
name|URI_MOCK_UNMARSHAL_RESULT
argument_list|)
DECL|field|unmarhsalResult
specifier|private
name|MockEndpoint
name|unmarhsalResult
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|URI_DIRECT_UNMARSHAL
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|bindy
argument_list|(
name|BindyType
operator|.
name|Fixed
argument_list|,
name|MyBindyModel
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|URI_MOCK_UNMARSHAL_RESULT
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testUnmarshal ()
specifier|public
name|void
name|testUnmarshal
parameter_list|()
throws|throws
name|Exception
block|{
name|unmarhsalResult
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|URI_DIRECT_UNMARSHAL
argument_list|,
literal|"foo  \r\n"
argument_list|)
expr_stmt|;
name|unmarhsalResult
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|MyBindyModel
name|myBindyModel
init|=
name|unmarhsalResult
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|MyBindyModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo  "
argument_list|,
name|myBindyModel
operator|.
name|foo
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|myBindyModel
operator|.
name|bar
argument_list|,
name|Is
operator|.
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnmarshalTooLong ()
specifier|public
name|void
name|testUnmarshalTooLong
parameter_list|()
throws|throws
name|Exception
block|{
name|unmarhsalResult
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|URI_DIRECT_UNMARSHAL
argument_list|,
literal|"foo  bar    \r\n"
argument_list|)
expr_stmt|;
name|unmarhsalResult
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|MyBindyModel
name|myBindyModel
init|=
name|unmarhsalResult
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|MyBindyModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo  "
argument_list|,
name|myBindyModel
operator|.
name|foo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FixedLengthRecord
argument_list|(
name|length
operator|=
literal|10
argument_list|,
name|ignoreMissingChars
operator|=
literal|true
argument_list|,
name|ignoreTrailingChars
operator|=
literal|true
argument_list|)
DECL|class|MyBindyModel
specifier|public
specifier|static
class|class
name|MyBindyModel
block|{
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|0
argument_list|,
name|length
operator|=
literal|5
argument_list|)
DECL|field|foo
name|String
name|foo
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|5
argument_list|,
name|length
operator|=
literal|5
argument_list|)
DECL|field|bar
name|String
name|bar
decl_stmt|;
DECL|method|getFoo ()
specifier|public
name|String
name|getFoo
parameter_list|()
block|{
return|return
name|foo
return|;
block|}
DECL|method|setFoo (String foo)
specifier|public
name|void
name|setFoo
parameter_list|(
name|String
name|foo
parameter_list|)
block|{
name|this
operator|.
name|foo
operator|=
name|foo
expr_stmt|;
block|}
DECL|method|getBar ()
specifier|public
name|String
name|getBar
parameter_list|()
block|{
return|return
name|bar
return|;
block|}
DECL|method|setBar (String bar)
specifier|public
name|void
name|setBar
parameter_list|(
name|String
name|bar
parameter_list|)
block|{
name|this
operator|.
name|bar
operator|=
name|bar
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

