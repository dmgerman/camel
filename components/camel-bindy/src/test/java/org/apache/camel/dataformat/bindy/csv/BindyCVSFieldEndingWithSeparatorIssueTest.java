begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BindyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * The parsing issue when field ends with separator is fixed by updating BindyCvsDataFormat.unquoteTokens(..)<br>  * See capture.png<br>  *   * The suggested update does fix only the separator at the end of field.  * !!! The separator in the beginning of the quoted field is still not handled.  *  */
end_comment

begin_class
DECL|class|BindyCVSFieldEndingWithSeparatorIssueTest
specifier|public
class|class
name|BindyCVSFieldEndingWithSeparatorIssueTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testBindy ()
specifier|public
name|void
name|testBindy
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|ctx
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|addRoutes
argument_list|(
name|createRoute
argument_list|()
argument_list|)
expr_stmt|;
comment|// new ReconciliationRoute()
name|ctx
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|addressLine1
init|=
literal|"8506 SIX FORKS ROAD,"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|ctx
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedPropertyReceived
argument_list|(
literal|"addressLine1"
argument_list|,
name|addressLine1
argument_list|)
expr_stmt|;
name|String
name|csvLine
init|=
literal|"\"PROBLEM SOLVER\",\""
operator|+
name|addressLine1
operator|+
literal|"\",\"SUITE 104\",\"RALEIGH\",\"NC\",\"27615\",\"US\""
decl_stmt|;
name|ProducerTemplate
name|template
init|=
name|ctx
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:fromCsv"
argument_list|,
name|csvLine
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// The algorithm of BindyCvsDataFormat.unquoteTokens(..) does not handle
comment|// separator at end of a field
comment|// addressLine1 results in the next field being appended -> '8506 SIX
comment|// FORKS ROAD,,SUITE 104'
block|}
annotation|@
name|Test
DECL|method|testBindyMoreSeparators ()
specifier|public
name|void
name|testBindyMoreSeparators
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|ctx
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|addRoutes
argument_list|(
name|createRoute
argument_list|()
argument_list|)
expr_stmt|;
comment|// new ReconciliationRoute()
name|ctx
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|addressLine1
init|=
literal|"8506 SIX FORKS ROAD, , ,,, ,"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|ctx
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedPropertyReceived
argument_list|(
literal|"addressLine1"
argument_list|,
name|addressLine1
argument_list|)
expr_stmt|;
name|String
name|csvLine
init|=
literal|"\"PROBLEM SOLVER\",\""
operator|+
name|addressLine1
operator|+
literal|"\",\"SUITE 104\",\"RALEIGH\",\"NC\",\"27615\",\"US\""
decl_stmt|;
name|ProducerTemplate
name|template
init|=
name|ctx
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:fromCsv"
argument_list|,
name|csvLine
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"This issue will be revisit when we have chance to rewrite bindy parser"
argument_list|)
DECL|method|testBindySeparatorsAround ()
specifier|public
name|void
name|testBindySeparatorsAround
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|ctx
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|addRoutes
argument_list|(
name|createRoute
argument_list|()
argument_list|)
expr_stmt|;
comment|// new ReconciliationRoute()
name|ctx
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// TODO The separator in the beginning of the quoted field is still not handled.
comment|// We may need to convert the separators in the quote into some kind of safe code
name|String
name|addressLine1
init|=
literal|",8506 SIX FORKS ROAD,"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|ctx
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedPropertyReceived
argument_list|(
literal|"addressLine1"
argument_list|,
name|addressLine1
argument_list|)
expr_stmt|;
name|String
name|csvLine
init|=
literal|"\"PROBLEM SOLVER\",\""
operator|+
name|addressLine1
operator|+
literal|"\",\"SUITE 104\",\"RALEIGH\",\"NC\",\"27615\",\"US\""
decl_stmt|;
name|ProducerTemplate
name|template
init|=
name|ctx
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:fromCsv"
argument_list|,
name|csvLine
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|createRoute ()
specifier|private
name|RouteBuilder
name|createRoute
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:fromCsv"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|bindy
argument_list|(
name|BindyType
operator|.
name|Csv
argument_list|,
name|Record
operator|.
name|class
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"addressLine1"
argument_list|,
name|simple
argument_list|(
literal|"${in.body.addressLine1}"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"addressLine2"
argument_list|,
name|simple
argument_list|(
literal|"${in.body.addressLine2}"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"${in.body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

