begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|WickedHeaderWithCommaCsvTest
specifier|public
class|class
name|WickedHeaderWithCommaCsvTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testHeadersWithComma ()
specifier|public
name|void
name|testHeadersWithComma
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockEndpoint
name|unmarshalMock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:receiveUnmarshal"
argument_list|)
decl_stmt|;
name|unmarshalMock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|csv
init|=
operator|(
literal|"\"Foo (one, or more, foos)\",\"Bar (one, or more, bars)\""
operator|+
literal|"\r\n"
operator|)
operator|+
literal|"\"1,000.00\",\"1,500.00\""
operator|+
literal|"\r\n"
operator|+
literal|"\"2,000.00\",\"2,700.00\""
operator|+
literal|"\r\n"
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:startUnmarshal"
argument_list|,
name|csv
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|WickedHeaderWithCommaCsv
argument_list|>
name|wickedHeaderWithCommaCsvs
init|=
name|unmarshalMock
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|WickedHeaderWithCommaCsv
name|row1000
init|=
name|wickedHeaderWithCommaCsvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1,000.00"
argument_list|,
name|row1000
operator|.
name|getFoo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1,500.00"
argument_list|,
name|row1000
operator|.
name|getBar
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|WickedHeaderWithCommaCsv
name|row2000
init|=
name|wickedHeaderWithCommaCsvs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2,000.00"
argument_list|,
name|row2000
operator|.
name|getFoo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2,700.00"
argument_list|,
name|row2000
operator|.
name|getBar
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MockEndpoint
name|marshalMock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:receiveMarshal"
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:startMarshal"
argument_list|,
name|wickedHeaderWithCommaCsvs
argument_list|)
expr_stmt|;
name|marshalMock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|marshalMock
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|csv
operator|.
name|trim
argument_list|()
argument_list|,
name|result
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:startUnmarshal"
argument_list|)
operator|.
name|unmarshal
argument_list|(
operator|new
name|BindyCsvDataFormat
argument_list|(
name|WickedHeaderWithCommaCsv
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:receiveUnmarshal"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:startMarshal"
argument_list|)
operator|.
name|marshal
argument_list|(
operator|new
name|BindyCsvDataFormat
argument_list|(
name|WickedHeaderWithCommaCsv
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:receiveMarshal"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

