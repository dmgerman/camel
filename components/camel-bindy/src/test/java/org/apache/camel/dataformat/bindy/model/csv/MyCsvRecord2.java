begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.model.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|model
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|CsvRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|DataField
import|;
end_import

begin_class
annotation|@
name|CsvRecord
argument_list|(
name|separator
operator|=
literal|","
argument_list|,
name|skipFirstLine
operator|=
literal|false
argument_list|,
name|endWithLineBreak
operator|=
literal|false
argument_list|)
DECL|class|MyCsvRecord2
specifier|public
class|class
name|MyCsvRecord2
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|1
argument_list|)
DECL|field|attention
specifier|private
name|String
name|attention
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|2
argument_list|)
DECL|field|addressLine1
specifier|private
name|String
name|addressLine1
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|3
argument_list|)
DECL|field|addressLine2
specifier|private
name|String
name|addressLine2
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|4
argument_list|)
DECL|field|city
specifier|private
name|String
name|city
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|5
argument_list|)
DECL|field|state
specifier|private
name|String
name|state
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|6
argument_list|)
DECL|field|zip
specifier|private
name|String
name|zip
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|7
argument_list|)
DECL|field|country
specifier|private
name|String
name|country
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|8
argument_list|)
DECL|field|dummy1
specifier|private
name|String
name|dummy1
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|9
argument_list|)
DECL|field|dummy2
specifier|private
name|String
name|dummy2
decl_stmt|;
DECL|method|MyCsvRecord2 ()
specifier|public
name|MyCsvRecord2
parameter_list|()
block|{     }
DECL|method|getAttention ()
specifier|public
name|String
name|getAttention
parameter_list|()
block|{
return|return
name|attention
return|;
block|}
DECL|method|setAttention (String attention)
specifier|public
name|void
name|setAttention
parameter_list|(
name|String
name|attention
parameter_list|)
block|{
name|this
operator|.
name|attention
operator|=
name|attention
expr_stmt|;
block|}
DECL|method|getAddressLine1 ()
specifier|public
name|String
name|getAddressLine1
parameter_list|()
block|{
return|return
name|addressLine1
return|;
block|}
DECL|method|setAddressLine1 (String addressLine1)
specifier|public
name|void
name|setAddressLine1
parameter_list|(
name|String
name|addressLine1
parameter_list|)
block|{
name|this
operator|.
name|addressLine1
operator|=
name|addressLine1
expr_stmt|;
block|}
DECL|method|getAddressLine2 ()
specifier|public
name|String
name|getAddressLine2
parameter_list|()
block|{
return|return
name|addressLine2
return|;
block|}
DECL|method|setAddressLine2 (String addressLine2)
specifier|public
name|void
name|setAddressLine2
parameter_list|(
name|String
name|addressLine2
parameter_list|)
block|{
name|this
operator|.
name|addressLine2
operator|=
name|addressLine2
expr_stmt|;
block|}
DECL|method|getCity ()
specifier|public
name|String
name|getCity
parameter_list|()
block|{
return|return
name|city
return|;
block|}
DECL|method|setCity (String city)
specifier|public
name|void
name|setCity
parameter_list|(
name|String
name|city
parameter_list|)
block|{
name|this
operator|.
name|city
operator|=
name|city
expr_stmt|;
block|}
DECL|method|getState ()
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|setState (String state)
specifier|public
name|void
name|setState
parameter_list|(
name|String
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
DECL|method|getZip ()
specifier|public
name|String
name|getZip
parameter_list|()
block|{
return|return
name|zip
return|;
block|}
DECL|method|setZip (String zip)
specifier|public
name|void
name|setZip
parameter_list|(
name|String
name|zip
parameter_list|)
block|{
name|this
operator|.
name|zip
operator|=
name|zip
expr_stmt|;
block|}
DECL|method|getCountry ()
specifier|public
name|String
name|getCountry
parameter_list|()
block|{
return|return
name|country
return|;
block|}
DECL|method|setCountry (String country)
specifier|public
name|void
name|setCountry
parameter_list|(
name|String
name|country
parameter_list|)
block|{
name|this
operator|.
name|country
operator|=
name|country
expr_stmt|;
block|}
DECL|method|getDummy1 ()
specifier|public
name|String
name|getDummy1
parameter_list|()
block|{
return|return
name|dummy1
return|;
block|}
DECL|method|setDummy1 (String dummy1)
specifier|public
name|void
name|setDummy1
parameter_list|(
name|String
name|dummy1
parameter_list|)
block|{
name|this
operator|.
name|dummy1
operator|=
name|dummy1
expr_stmt|;
block|}
DECL|method|getDummy2 ()
specifier|public
name|String
name|getDummy2
parameter_list|()
block|{
return|return
name|dummy2
return|;
block|}
DECL|method|setDummy2 (String dummy2)
specifier|public
name|void
name|setDummy2
parameter_list|(
name|String
name|dummy2
parameter_list|)
block|{
name|this
operator|.
name|dummy2
operator|=
name|dummy2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Record [attention="
operator|+
name|attention
operator|+
literal|", addressLine1="
operator|+
name|addressLine1
operator|+
literal|", addressLine2="
operator|+
name|addressLine2
operator|+
literal|", city="
operator|+
name|city
operator|+
literal|", state="
operator|+
name|state
operator|+
literal|", zip="
operator|+
name|zip
operator|+
literal|", country="
operator|+
name|country
operator|+
literal|", dummy1="
operator|+
name|dummy1
operator|+
literal|", dummy2="
operator|+
name|dummy2
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

