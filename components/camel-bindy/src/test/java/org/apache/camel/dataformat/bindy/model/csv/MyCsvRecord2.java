begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.model.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|model
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|CsvRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|DataField
import|;
end_import

begin_comment
comment|//from https://issues.apache.org/jira/browse/CAMEL-11065
end_comment

begin_class
annotation|@
name|CsvRecord
argument_list|(
name|separator
operator|=
literal|","
argument_list|,
name|quote
operator|=
literal|"'"
argument_list|)
DECL|class|MyCsvRecord2
specifier|public
class|class
name|MyCsvRecord2
implements|implements
name|Serializable
block|{
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|1
argument_list|)
DECL|field|text1
specifier|private
name|String
name|text1
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|2
argument_list|)
DECL|field|text2
specifier|private
name|String
name|text2
decl_stmt|;
annotation|@
name|DataField
argument_list|(
name|pos
operator|=
literal|3
argument_list|,
name|pattern
operator|=
literal|"########.##"
argument_list|)
DECL|field|number
specifier|private
name|BigDecimal
name|number
decl_stmt|;
DECL|method|getText1 ()
specifier|public
name|String
name|getText1
parameter_list|()
block|{
return|return
name|text1
return|;
block|}
DECL|method|setText1 (String text1)
specifier|public
name|void
name|setText1
parameter_list|(
name|String
name|text1
parameter_list|)
block|{
name|this
operator|.
name|text1
operator|=
name|text1
expr_stmt|;
block|}
DECL|method|getText2 ()
specifier|public
name|String
name|getText2
parameter_list|()
block|{
return|return
name|text2
return|;
block|}
DECL|method|setText2 (String text2)
specifier|public
name|void
name|setText2
parameter_list|(
name|String
name|text2
parameter_list|)
block|{
name|this
operator|.
name|text2
operator|=
name|text2
expr_stmt|;
block|}
DECL|method|getNumber ()
specifier|public
name|BigDecimal
name|getNumber
parameter_list|()
block|{
return|return
name|number
return|;
block|}
DECL|method|setNumber (BigDecimal number)
specifier|public
name|void
name|setNumber
parameter_list|(
name|BigDecimal
name|number
parameter_list|)
block|{
name|this
operator|.
name|number
operator|=
name|number
expr_stmt|;
block|}
block|}
end_class

end_unit

