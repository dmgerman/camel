begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|KeyValuePairField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|OneToMany
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|util
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * The BindyKeyValuePairFactory is the class who allows to bind data of type key  * value pair. Such format exist in financial messages FIX. This class allows to  * generate a model associated to message, bind data from a message to the  * POJOs, export data of POJOs to a message and format data into String, Date,  * Double, ... according to the format/pattern defined  */
end_comment

begin_class
DECL|class|BindyKeyValuePairFactory
specifier|public
class|class
name|BindyKeyValuePairFactory
extends|extends
name|BindyAbstractFactory
implements|implements
name|BindyFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BindyKeyValuePairFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|keyValuePairFields
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|KeyValuePairField
argument_list|>
name|keyValuePairFields
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|KeyValuePairField
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|annotedFields
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Field
argument_list|>
name|annotedFields
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Field
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|sections
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|sections
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|lists
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
name|lists
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|keyValuePairSeparator
specifier|private
name|String
name|keyValuePairSeparator
decl_stmt|;
DECL|field|pairSeparator
specifier|private
name|String
name|pairSeparator
decl_stmt|;
DECL|field|messageOrdered
specifier|private
name|boolean
name|messageOrdered
decl_stmt|;
DECL|method|BindyKeyValuePairFactory (PackageScanClassResolver resolver, String... packageNames)
specifier|public
name|BindyKeyValuePairFactory
parameter_list|(
name|PackageScanClassResolver
name|resolver
parameter_list|,
name|String
modifier|...
name|packageNames
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|resolver
argument_list|,
name|packageNames
argument_list|)
expr_stmt|;
comment|// Initialize what is specific to Key Value Pair model
name|initKeyValuePairModel
argument_list|()
expr_stmt|;
block|}
comment|/**      * method uses to initialize the model representing the classes who will      * bind the data This process will scan for classes according to the package      * name provided, check the annotated classes and fields. Next, we retrieve      * the parameters required like : Pair Separator& key value pair separator      *       * @throws Exception      */
DECL|method|initKeyValuePairModel ()
specifier|public
name|void
name|initKeyValuePairModel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Find annotated KeyValuePairfields declared in the Model classes
name|initAnnotedFields
argument_list|()
expr_stmt|;
comment|// Initialize key value pair parameter(s)
name|initMessageParameters
argument_list|()
expr_stmt|;
block|}
DECL|method|initAnnotedFields ()
specifier|public
name|void
name|initAnnotedFields
parameter_list|()
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
range|:
name|models
control|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|linkFields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|cl
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|KeyValuePairField
name|keyValuePairField
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|KeyValuePairField
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValuePairField
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key declared in the class : "
operator|+
name|cl
operator|.
name|getName
argument_list|()
operator|+
literal|", key : "
operator|+
name|keyValuePairField
operator|.
name|tag
argument_list|()
operator|+
literal|", Field : "
operator|+
name|keyValuePairField
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyValuePairFields
operator|.
name|put
argument_list|(
name|keyValuePairField
operator|.
name|tag
argument_list|()
argument_list|,
name|keyValuePairField
argument_list|)
expr_stmt|;
name|annotedFields
operator|.
name|put
argument_list|(
name|keyValuePairField
operator|.
name|tag
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|Link
name|linkField
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Link
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkField
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Class linked  : "
operator|+
name|cl
operator|.
name|getName
argument_list|()
operator|+
literal|", Field"
operator|+
name|field
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|linkFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|linkFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|annotedLinkFields
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|,
name|linkFields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      *       */
DECL|method|bind (List<String> data, Map<String, Object> model, int line)
specifier|public
name|void
name|bind
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|data
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|model
parameter_list|,
name|int
name|line
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key value pairs data : "
operator|+
name|data
argument_list|)
expr_stmt|;
block|}
comment|// Separate the key from its value
comment|// e.g 8=FIX 4.1 --> key = 8 and Value = FIX 4.1
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|keyValuePairSeparator
argument_list|,
literal|"Key Value Pair not defined in the @Message annotation"
argument_list|)
expr_stmt|;
comment|// Generate map of key value
comment|// We use a Map of List as we can have the same key several times
comment|// (relation one to many)
for|for
control|(
name|String
name|s
range|:
name|data
control|)
block|{
comment|// Get KeyValuePair
name|String
index|[]
name|keyValuePair
init|=
name|s
operator|.
name|split
argument_list|(
name|getKeyValuePairSeparator
argument_list|()
argument_list|)
decl_stmt|;
comment|// Extract Key
name|int
name|key
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// Extract key value
name|String
name|value
init|=
name|keyValuePair
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key : "
operator|+
name|key
operator|+
literal|", value : "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Add value to the Map using key value as key
if|if
condition|(
operator|!
name|results
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|List
name|list
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
name|list
init|=
operator|(
name|LinkedList
operator|)
name|results
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Iterate over the model
for|for
control|(
name|Class
name|clazz
range|:
name|models
control|)
block|{
name|Object
name|obj
init|=
name|model
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
comment|// Generate model from key value map
name|generateModelFromKeyValueMap
argument_list|(
name|clazz
argument_list|,
name|obj
argument_list|,
name|results
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param clazz      * @param obj      * @param results      * @param line      * @throws Exception      */
DECL|method|generateModelFromKeyValueMap (Class clazz, Object obj, Map<Integer, List> results, int line)
specifier|private
name|void
name|generateModelFromKeyValueMap
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Object
name|obj
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|>
name|results
parameter_list|,
name|int
name|line
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|KeyValuePairField
name|keyValuePairField
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|KeyValuePairField
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValuePairField
operator|!=
literal|null
condition|)
block|{
comment|// Key
name|int
name|key
init|=
name|keyValuePairField
operator|.
name|tag
argument_list|()
decl_stmt|;
comment|// Get Value
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|results
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
comment|// we don't received data
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
comment|/*                      * The relation is one to one So we check if we are in a                      * target class and if the field is mandatory                      */
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
comment|// Check mandatory field
if|if
condition|(
name|keyValuePairField
operator|.
name|required
argument_list|()
operator|&&
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The mandatory key/tag : "
operator|+
name|key
operator|+
literal|" has not been defined !"
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
name|getDefaultValueForPrimitive
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|field
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting of field "
operator|+
name|field
operator|+
literal|" failed for object : "
operator|+
name|obj
operator|+
literal|" and result : "
operator|+
name|result
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|/*                          * The relation is one to many So, we create an object                          * with empty fields and we don't check if the fields                          * are mandatory                          */
comment|// Get List from Map
name|List
name|l
init|=
name|lists
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
comment|// Test if object exist
if|if
condition|(
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|obj
operator|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|obj
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
name|Object
name|result
init|=
name|getDefaultValueForPrimitive
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|field
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting of field "
operator|+
name|field
operator|+
literal|" failed for object : "
operator|+
name|obj
operator|+
literal|" and result : "
operator|+
name|result
argument_list|)
throw|;
block|}
comment|// Add object created to the list
if|if
condition|(
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|l
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
comment|// and to the Map
name|lists
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
comment|// Reset obj to null
name|obj
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The list of values is empty for the following key : "
operator|+
name|key
operator|+
literal|" defined in the class : "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// end of test if obj != null
block|}
else|else
block|{
comment|// Data have been retrieved from message
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
comment|// Relation OneToOne
name|value
operator|=
operator|(
name|String
operator|)
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// Get pattern defined for the field
name|String
name|pattern
init|=
name|keyValuePairField
operator|.
name|pattern
argument_list|()
decl_stmt|;
comment|// Create format object to format the field
name|Format
argument_list|<
name|?
argument_list|>
name|format
init|=
name|FormatFactory
operator|.
name|getFormat
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|keyValuePairField
operator|.
name|precision
argument_list|()
argument_list|)
decl_stmt|;
comment|// format the value of the key received
name|result
operator|=
name|formatField
argument_list|(
name|format
argument_list|,
name|value
argument_list|,
name|key
argument_list|,
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Value formated : "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|getDefaultValueForPrimitive
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|field
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// System.out.println("Exception : " + e);
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting of field "
operator|+
name|field
operator|+
literal|" failed for object : "
operator|+
name|obj
operator|+
literal|" and result : "
operator|+
name|result
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Get List from Map
name|List
name|l
init|=
name|lists
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
comment|// Relation OneToMany
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Test if object exist
if|if
condition|(
operator|(
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|l
operator|.
name|size
argument_list|()
operator|>
name|i
operator|)
condition|)
block|{
name|obj
operator|=
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|obj
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
name|value
operator|=
operator|(
name|String
operator|)
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// Get pattern defined for the field
name|String
name|pattern
init|=
name|keyValuePairField
operator|.
name|pattern
argument_list|()
decl_stmt|;
comment|// Create format object to format the field
name|Format
argument_list|<
name|?
argument_list|>
name|format
init|=
name|FormatFactory
operator|.
name|getFormat
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|keyValuePairField
operator|.
name|precision
argument_list|()
argument_list|)
decl_stmt|;
comment|// format the value of the key received
name|Object
name|result
init|=
name|formatField
argument_list|(
name|format
argument_list|,
name|value
argument_list|,
name|key
argument_list|,
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Value formated : "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|field
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|getDefaultValueForPrimitive
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting of field "
operator|+
name|field
operator|+
literal|" failed for object : "
operator|+
name|obj
operator|+
literal|" and result : "
operator|+
name|result
argument_list|)
throw|;
block|}
comment|// Add object created to the list
if|if
condition|(
operator|(
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|l
operator|.
name|size
argument_list|()
operator|>
name|i
operator|)
condition|)
block|{
name|l
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
comment|// and to the Map
name|lists
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
comment|// Reset obj to null
name|obj
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The list of values is empty for the following key : "
operator|+
name|key
operator|+
literal|" defined in the class : "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|// No values found from message
name|Object
name|result
init|=
name|getDefaultValueForPrimitive
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|field
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting of field "
operator|+
name|field
operator|+
literal|" failed for object : "
operator|+
name|obj
operator|+
literal|" and result : "
operator|+
name|result
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|OneToMany
name|oneToMany
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|OneToMany
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|oneToMany
operator|!=
literal|null
condition|)
block|{
name|String
name|targetClass
init|=
name|oneToMany
operator|.
name|mappedTo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|targetClass
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// Class cl = Class.forName(targetClass); Does not work in
comment|// OSGI when class is defined in another bundle
name|Class
name|cl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cl
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|targetClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|cl
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|targetClass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lists
operator|.
name|containsKey
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|lists
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|generateModelFromKeyValueMap
argument_list|(
name|cl
argument_list|,
literal|null
argument_list|,
name|results
argument_list|,
name|line
argument_list|)
expr_stmt|;
comment|// Add list of objects
name|field
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|lists
operator|.
name|get
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No target class has been defined in @OneToMany annotation !"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      *       */
DECL|method|unbind (Map<String, Object> model)
specifier|public
name|String
name|unbind
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|model
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|KeyValuePairField
argument_list|>
name|keyValuePairFieldsSorted
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|KeyValuePairField
argument_list|>
argument_list|(
name|keyValuePairFields
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|keyValuePairFieldsSorted
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Map containing the OUT position of the field
comment|// The key is double and is created using the position of the field and
comment|// location of the class in the message (using section)
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|positions
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Check if separator exists
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|pairSeparator
argument_list|,
literal|"The pair separator has not been instantiated or property not defined in the @Message annotation"
argument_list|)
expr_stmt|;
name|char
name|separator
init|=
name|Converter
operator|.
name|getCharDelimitor
argument_list|(
name|this
operator|.
name|getPairSeparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Separator converted : '0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|separator
argument_list|)
operator|+
literal|"', from : "
operator|+
name|this
operator|.
name|getPairSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|KeyValuePairField
name|keyValuePairField
init|=
name|keyValuePairFieldsSorted
operator|.
name|get
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|keyValuePairField
argument_list|,
literal|"KeyValuePair is null !"
argument_list|)
expr_stmt|;
comment|// Retrieve the field
name|Field
name|field
init|=
name|annotedFields
operator|.
name|get
argument_list|(
name|keyValuePairField
operator|.
name|tag
argument_list|()
argument_list|)
decl_stmt|;
comment|// Change accessibility to allow to read protected/private fields
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tag : "
operator|+
name|keyValuePairField
operator|.
name|tag
argument_list|()
operator|+
literal|", Field type : "
operator|+
name|field
operator|.
name|getType
argument_list|()
operator|+
literal|", class : "
operator|+
name|field
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Retrieve the format, pattern and precision associated to the type
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
name|keyValuePairField
operator|.
name|pattern
argument_list|()
decl_stmt|;
name|int
name|precision
init|=
name|keyValuePairField
operator|.
name|precision
argument_list|()
decl_stmt|;
comment|// Create format
name|Format
name|format
init|=
name|FormatFactory
operator|.
name|getFormat
argument_list|(
name|type
argument_list|,
name|pattern
argument_list|,
name|precision
argument_list|)
decl_stmt|;
comment|// Get object to be formatted
name|Object
name|obj
init|=
name|model
operator|.
name|get
argument_list|(
name|field
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
comment|// Get field value
name|Object
name|keyValue
init|=
name|field
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isMessageOrdered
argument_list|()
condition|)
block|{
comment|// Generate a key using the number of the section
comment|// and the position of the field
name|Integer
name|key1
init|=
name|sections
operator|.
name|get
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|key2
init|=
name|keyValuePairField
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key of the section : "
operator|+
name|key1
operator|+
literal|", and the field  : "
operator|+
name|key2
argument_list|)
expr_stmt|;
block|}
name|Integer
name|keyGenerated
init|=
name|generateKey
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key generated : "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|keyGenerated
argument_list|)
operator|+
literal|", for section : "
operator|+
name|key1
argument_list|)
expr_stmt|;
block|}
comment|// Add value to the list if not null
if|if
condition|(
name|keyValue
operator|!=
literal|null
condition|)
block|{
comment|// Format field value
name|String
name|valueFormated
decl_stmt|;
try|try
block|{
name|valueFormated
operator|=
name|format
operator|.
name|format
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Formating error detected for the tag : "
operator|+
name|keyValuePairField
operator|.
name|tag
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Create the key value string
name|String
name|value
init|=
name|keyValuePairField
operator|.
name|tag
argument_list|()
operator|+
name|this
operator|.
name|getKeyValuePairSeparator
argument_list|()
operator|+
name|valueFormated
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Value to be formatted : "
operator|+
name|keyValue
operator|+
literal|", for the tag : "
operator|+
name|keyValuePairField
operator|.
name|tag
argument_list|()
operator|+
literal|", and its formated value : "
operator|+
name|valueFormated
argument_list|)
expr_stmt|;
block|}
comment|// Add the content to the TreeMap according to the
comment|// position defined
name|positions
operator|.
name|put
argument_list|(
name|keyGenerated
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Positions size : "
operator|+
name|positions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Add value to the list if not null
if|if
condition|(
name|keyValue
operator|!=
literal|null
condition|)
block|{
comment|// Format field value
name|String
name|valueFormated
decl_stmt|;
try|try
block|{
name|valueFormated
operator|=
name|format
operator|.
name|format
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Formating error detected for the tag : "
operator|+
name|keyValuePairField
operator|.
name|tag
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Create the key value string
name|String
name|value
init|=
name|keyValuePairField
operator|.
name|tag
argument_list|()
operator|+
name|this
operator|.
name|getKeyValuePairSeparator
argument_list|()
operator|+
name|valueFormated
operator|+
name|separator
decl_stmt|;
comment|// Add content to the stringBuilder
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Value added : "
operator|+
name|keyValuePairField
operator|.
name|tag
argument_list|()
operator|+
name|this
operator|.
name|getKeyValuePairSeparator
argument_list|()
operator|+
name|valueFormated
operator|+
name|separator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Iterate through the list to generate
comment|// the message according to the order/position
if|if
condition|(
name|this
operator|.
name|isMessageOrdered
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|posit
init|=
name|positions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|posit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|positions
operator|.
name|get
argument_list|(
name|posit
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Value added at the position ("
operator|+
name|posit
operator|+
literal|") : "
operator|+
name|value
operator|+
name|separator
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|value
operator|+
name|separator
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|formatField (Format format, String value, int tag, int line)
specifier|private
name|Object
name|formatField
parameter_list|(
name|Format
name|format
parameter_list|,
name|String
name|value
parameter_list|,
name|int
name|tag
parameter_list|,
name|int
name|line
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|obj
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// Format field value
try|try
block|{
name|obj
operator|=
name|format
operator|.
name|parse
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsing error detected for field defined at the tag : "
operator|+
name|tag
operator|+
literal|", line : "
operator|+
name|line
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|obj
return|;
block|}
comment|/**      * Find the pair separator used to delimit the key value pair fields      */
DECL|method|getPairSeparator ()
specifier|public
name|String
name|getPairSeparator
parameter_list|()
block|{
return|return
name|pairSeparator
return|;
block|}
comment|/**      * Find the key value pair separator used to link the key with its value      */
DECL|method|getKeyValuePairSeparator ()
specifier|public
name|String
name|getKeyValuePairSeparator
parameter_list|()
block|{
return|return
name|keyValuePairSeparator
return|;
block|}
comment|/**      * Flag indicating if the message must be ordered      *       * @return boolean      */
DECL|method|isMessageOrdered ()
specifier|public
name|boolean
name|isMessageOrdered
parameter_list|()
block|{
return|return
name|messageOrdered
return|;
block|}
comment|/**      * Get parameters defined in @Message annotation      */
DECL|method|initMessageParameters ()
specifier|private
name|void
name|initMessageParameters
parameter_list|()
block|{
if|if
condition|(
operator|(
name|pairSeparator
operator|==
literal|null
operator|)
operator|||
operator|(
name|keyValuePairSeparator
operator|==
literal|null
operator|)
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
range|:
name|models
control|)
block|{
comment|// Get annotation @Message from the class
name|Message
name|message
init|=
name|cl
operator|.
name|getAnnotation
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Get annotation @Section from the class
name|Section
name|section
init|=
name|cl
operator|.
name|getAnnotation
argument_list|(
name|Section
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
comment|// Get Pair Separator parameter
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|message
operator|.
name|pairSeparator
argument_list|()
argument_list|,
literal|"No Pair Separator has been defined in the @Message annotation !"
argument_list|)
expr_stmt|;
name|pairSeparator
operator|=
name|message
operator|.
name|pairSeparator
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pair Separator defined for the message : "
operator|+
name|pairSeparator
argument_list|)
expr_stmt|;
block|}
comment|// Get KeyValuePair Separator parameter
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|message
operator|.
name|keyValuePairSeparator
argument_list|()
argument_list|,
literal|"No Key Value Pair Separator has been defined in the @Message annotation !"
argument_list|)
expr_stmt|;
name|keyValuePairSeparator
operator|=
name|message
operator|.
name|keyValuePairSeparator
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key Value Pair Separator defined for the message : "
operator|+
name|keyValuePairSeparator
argument_list|)
expr_stmt|;
block|}
comment|// Get carriage return parameter
name|crlf
operator|=
name|message
operator|.
name|crlf
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Carriage return defined for the message : "
operator|+
name|crlf
argument_list|)
expr_stmt|;
block|}
comment|// Get isOrderer parameter
name|messageOrdered
operator|=
name|message
operator|.
name|isOrdered
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Is the message ordered in output : "
operator|+
name|messageOrdered
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
comment|// Test if section number is not null
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|section
operator|.
name|number
argument_list|()
argument_list|,
literal|"No number has been defined for the section !"
argument_list|)
expr_stmt|;
comment|// Get section number and add it to the sections
name|sections
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|,
name|section
operator|.
name|number
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

