begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.format
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|Format
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AbstractNumberFormat
specifier|public
specifier|abstract
class|class
name|AbstractNumberFormat
parameter_list|<
name|T
extends|extends
name|Number
parameter_list|>
implements|implements
name|Format
argument_list|<
name|T
argument_list|>
block|{
DECL|field|impliedDecimalPosition
specifier|private
name|boolean
name|impliedDecimalPosition
decl_stmt|;
DECL|field|precision
specifier|private
name|int
name|precision
decl_stmt|;
DECL|field|format
specifier|private
name|DecimalFormat
name|format
decl_stmt|;
DECL|field|multiplier
specifier|private
name|int
name|multiplier
decl_stmt|;
comment|/**      *      */
DECL|method|AbstractNumberFormat ()
specifier|public
name|AbstractNumberFormat
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      *      */
DECL|method|AbstractNumberFormat (boolean impliedDecimalPosition, int precision, Locale locale)
specifier|public
name|AbstractNumberFormat
parameter_list|(
name|boolean
name|impliedDecimalPosition
parameter_list|,
name|int
name|precision
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|impliedDecimalPosition
operator|=
name|impliedDecimalPosition
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
operator|>
literal|0
condition|?
name|precision
else|:
literal|0
expr_stmt|;
name|this
operator|.
name|format
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|multiplier
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|format
operator|=
operator|new
name|DecimalFormat
argument_list|()
expr_stmt|;
name|this
operator|.
name|format
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|format
operator|.
name|setDecimalSeparatorAlwaysShown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|locale
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|format
operator|.
name|setDecimalFormatSymbols
argument_list|(
name|DecimalFormatSymbols
operator|.
name|getInstance
argument_list|(
name|locale
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|impliedDecimalPosition
condition|)
block|{
name|this
operator|.
name|format
operator|.
name|setMinimumFractionDigits
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|format
operator|.
name|setMaximumFractionDigits
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|multiplier
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|10D
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|format
operator|.
name|setMinimumFractionDigits
argument_list|(
name|this
operator|.
name|precision
argument_list|)
expr_stmt|;
name|this
operator|.
name|format
operator|.
name|setMaximumFractionDigits
argument_list|(
name|this
operator|.
name|precision
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasImpliedDecimalPosition ()
specifier|protected
name|boolean
name|hasImpliedDecimalPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|impliedDecimalPosition
return|;
block|}
DECL|method|getPrecision ()
specifier|protected
name|int
name|getPrecision
parameter_list|()
block|{
return|return
name|this
operator|.
name|precision
return|;
block|}
DECL|method|getFormat ()
specifier|protected
name|DecimalFormat
name|getFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|format
return|;
block|}
DECL|method|getMultiplier ()
specifier|protected
name|int
name|getMultiplier
parameter_list|()
block|{
return|return
name|multiplier
return|;
block|}
block|}
end_class

end_unit

