begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.format.factories
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|factories
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|FormattingOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|PatternFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|FormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|LocalDateTimeFormatFactory
specifier|public
class|class
name|LocalDateTimeFormatFactory
extends|extends
name|AbstractFormatFactory
block|{
block|{
name|supportedClasses
operator|.
name|add
parameter_list|(
name|LocalDateTime
operator|.
name|class
parameter_list|)
constructor_decl|;
block|}
annotation|@
name|Override
DECL|method|build (FormattingOptions formattingOptions)
specifier|public
name|Format
argument_list|<
name|?
argument_list|>
name|build
parameter_list|(
name|FormattingOptions
name|formattingOptions
parameter_list|)
block|{
return|return
operator|new
name|LocalDateTimePatternFormat
argument_list|(
name|formattingOptions
operator|.
name|getPattern
argument_list|()
argument_list|,
name|formattingOptions
operator|.
name|getTimezone
argument_list|()
argument_list|,
name|formattingOptions
operator|.
name|getLocale
argument_list|()
argument_list|)
return|;
block|}
DECL|class|LocalDateTimePatternFormat
specifier|private
specifier|static
class|class
name|LocalDateTimePatternFormat
implements|implements
name|PatternFormat
argument_list|<
name|LocalDateTime
argument_list|>
block|{
DECL|field|pattern
specifier|private
name|String
name|pattern
decl_stmt|;
DECL|field|locale
specifier|private
name|Locale
name|locale
decl_stmt|;
DECL|field|zone
specifier|private
name|ZoneId
name|zone
decl_stmt|;
DECL|method|LocalDateTimePatternFormat (String pattern, String timezone, Locale locale)
name|LocalDateTimePatternFormat
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|timezone
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
if|if
condition|(
name|timezone
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|zone
operator|=
name|ZoneId
operator|.
name|systemDefault
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|zone
operator|=
name|ZoneId
operator|.
name|of
argument_list|(
name|timezone
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|format (LocalDateTime object)
specifier|public
name|String
name|format
parameter_list|(
name|LocalDateTime
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|pattern
argument_list|,
literal|"pattern"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|getDateFormat
argument_list|()
operator|.
name|format
argument_list|(
name|object
argument_list|)
return|;
block|}
DECL|method|parse (String string)
specifier|public
name|LocalDateTime
name|parse
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|Exception
block|{
name|LocalDateTime
name|date
decl_stmt|;
name|DateTimeFormatter
name|df
init|=
name|this
operator|.
name|getDateFormat
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|pattern
argument_list|,
literal|"pattern"
argument_list|)
expr_stmt|;
if|if
condition|(
name|doesStringFitLengthOfPattern
argument_list|(
name|string
argument_list|)
condition|)
block|{
name|date
operator|=
name|LocalDateTime
operator|.
name|parse
argument_list|(
name|string
argument_list|,
name|df
argument_list|)
expr_stmt|;
return|return
name|date
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FormatException
argument_list|(
literal|"Date provided does not fit the pattern defined"
argument_list|)
throw|;
block|}
block|}
DECL|method|doesStringFitLengthOfPattern (String string)
specifier|private
name|boolean
name|doesStringFitLengthOfPattern
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|string
operator|.
name|length
argument_list|()
operator|<=
name|this
operator|.
name|pattern
operator|.
name|length
argument_list|()
return|;
block|}
DECL|method|getDateFormat ()
name|DateTimeFormatter
name|getDateFormat
parameter_list|()
block|{
name|DateTimeFormatter
name|result
decl_stmt|;
if|if
condition|(
name|locale
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
name|pattern
argument_list|,
name|locale
argument_list|)
operator|.
name|withZone
argument_list|(
name|zone
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
name|pattern
argument_list|)
operator|.
name|withZone
argument_list|(
name|zone
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getPattern ()
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
comment|/**          * Sets the pattern          *          * @param pattern the pattern          */
DECL|method|setPattern (String pattern)
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

