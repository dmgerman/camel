begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|CsvRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|FixedLengthRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanFilter
import|;
end_import

begin_comment
comment|/**  * Annotation based loader for model classes with Bindy annotations.  */
end_comment

begin_class
DECL|class|AnnotationModelLoader
specifier|public
class|class
name|AnnotationModelLoader
block|{
DECL|field|resolver
specifier|private
name|PackageScanClassResolver
name|resolver
decl_stmt|;
DECL|field|filter
specifier|private
name|PackageScanFilter
name|filter
decl_stmt|;
DECL|field|annotations
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|annotations
decl_stmt|;
DECL|method|AnnotationModelLoader (PackageScanClassResolver resolver)
specifier|public
name|AnnotationModelLoader
parameter_list|(
name|PackageScanClassResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|annotations
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|CsvRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|Link
operator|.
name|class
argument_list|)
expr_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|Message
operator|.
name|class
argument_list|)
expr_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|Section
operator|.
name|class
argument_list|)
expr_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|FixedLengthRecord
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|AnnotationModelLoader (PackageScanClassResolver resolver, PackageScanFilter filter)
specifier|public
name|AnnotationModelLoader
parameter_list|(
name|PackageScanClassResolver
name|resolver
parameter_list|,
name|PackageScanFilter
name|filter
parameter_list|)
block|{
name|this
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
DECL|method|loadModels (String... packageNames)
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|loadModels
parameter_list|(
name|String
modifier|...
name|packageNames
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|results
init|=
name|resolver
operator|.
name|findAnnotated
argument_list|(
name|annotations
argument_list|,
name|packageNames
argument_list|)
decl_stmt|;
comment|//TODO;  this logic could be moved into the PackageScanClassResolver by creating:
comment|//          findAnnotated(annotations, packageNames, filter)
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resultsToRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|results
control|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|matches
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|resultsToRemove
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|results
operator|.
name|removeAll
argument_list|(
name|resultsToRemove
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

