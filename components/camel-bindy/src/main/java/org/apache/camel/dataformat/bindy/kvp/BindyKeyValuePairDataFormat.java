begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.kvp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|kvp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|BindyAbstractDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|BindyAbstractFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|BindyKeyValuePairFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|FormatFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|WrappedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A<a href="http://camel.apache.org/data-format.html">data format</a> (  * {@link DataFormat}) using Bindy to marshal to and from CSV files  */
end_comment

begin_class
DECL|class|BindyKeyValuePairDataFormat
specifier|public
class|class
name|BindyKeyValuePairDataFormat
extends|extends
name|BindyAbstractDataFormat
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BindyKeyValuePairDataFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|BindyKeyValuePairDataFormat ()
specifier|public
name|BindyKeyValuePairDataFormat
parameter_list|()
block|{     }
DECL|method|BindyKeyValuePairDataFormat (Class<?> type)
specifier|public
name|BindyKeyValuePairDataFormat
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"bindy-kvp"
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|marshal (Exchange exchange, Object body, OutputStream outputStream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|body
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|BindyAbstractFactory
name|factory
init|=
name|getFactory
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|crlf
init|=
name|ConverterUtils
operator|.
name|getByteReturn
argument_list|(
name|factory
operator|.
name|getCarriageReturn
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TypeConverter
name|converter
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
comment|// the body may not be a prepared list of map that bindy expects so help
comment|// a bit here and create one if needed
for|for
control|(
name|Object
name|model
range|:
name|ObjectHelper
operator|.
name|createIterable
argument_list|(
name|body
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
decl_stmt|;
if|if
condition|(
name|model
operator|instanceof
name|Map
condition|)
block|{
name|row
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|model
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|model
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|factory
operator|.
name|unbind
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|converter
operator|.
name|convertTo
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|exchange
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|crlf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unmarshal (Exchange exchange, InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|BindyKeyValuePairFactory
name|factory
init|=
operator|(
name|BindyKeyValuePairFactory
operator|)
name|getFactory
argument_list|()
decl_stmt|;
comment|// List of Pojos
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Map to hold the model @OneToMany classes while binding
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|lists
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|InputStreamReader
name|in
init|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|ExchangeHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
comment|// Use a Stream to stream a file across
try|try
init|(
name|Stream
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|BufferedReader
argument_list|(
name|in
argument_list|)
operator|.
name|lines
argument_list|()
init|)
block|{
comment|// Retrieve the pair separator defined to split the record
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|factory
operator|.
name|getPairSeparator
argument_list|()
argument_list|,
literal|"The pair separator property of the annotation @Message"
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
name|factory
operator|.
name|getPairSeparator
argument_list|()
decl_stmt|;
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|lines
operator|.
name|forEachOrdered
argument_list|(
name|line
lambda|->
block|{
name|consumeFile
argument_list|(
name|factory
argument_list|,
name|models
argument_list|,
name|lists
argument_list|,
name|separator
argument_list|,
name|count
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WrappedException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getWrappedException
argument_list|()
throw|;
block|}
comment|// BigIntegerFormatFactory if models list is empty or not
comment|// If this is the case (correspond to an empty stream, ...)
if|if
condition|(
name|models
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"No records have been defined in the CSV"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|extractUnmarshalResult
argument_list|(
name|models
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|in
argument_list|,
literal|"in"
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|consumeFile (BindyKeyValuePairFactory factory, List<Map<String, Object>> models, Map<String, List<Object>> lists, String separator, AtomicInteger count, String line)
specifier|private
name|void
name|consumeFile
parameter_list|(
name|BindyKeyValuePairFactory
name|factory
parameter_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|models
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|lists
parameter_list|,
name|String
name|separator
parameter_list|,
name|AtomicInteger
name|count
parameter_list|,
name|String
name|line
parameter_list|)
block|{
try|try
block|{
comment|// Trim the line coming in to remove any trailing whitespace
name|String
name|trimmedLine
init|=
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|trimmedLine
argument_list|)
condition|)
block|{
comment|// Increment counter
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// Pojos of the model
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|model
decl_stmt|;
comment|// Create POJO
name|model
operator|=
name|factory
operator|.
name|factory
argument_list|()
expr_stmt|;
comment|// Split the message according to the pair separator defined in
comment|// annotated class @Message
comment|// Explicitly replace any occurrence of the Unicode new line character.
comment|// Simply reading the line in with the File stream doesn't get us around the fact
comment|// that this character is still present in the data set, and we don't wish for it
comment|// to be present when storing the actual data in the model.
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|line
operator|.
name|split
argument_list|(
name|separator
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|replace
argument_list|(
literal|"\u0085"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No records have been defined in the KVP"
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Bind data from message with model classes
comment|// Counter is used to detect line where error occurs
name|factory
operator|.
name|bind
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|result
argument_list|,
name|model
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|,
name|lists
argument_list|)
expr_stmt|;
comment|// Link objects together
name|factory
operator|.
name|link
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// Add objects graph to the list
name|models
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Graph of objects created: {}"
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WrappedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createModelFactory (FormatFactory formatFactory)
specifier|protected
name|BindyAbstractFactory
name|createModelFactory
parameter_list|(
name|FormatFactory
name|formatFactory
parameter_list|)
throws|throws
name|Exception
block|{
name|BindyKeyValuePairFactory
name|bindyKeyValuePairFactory
init|=
operator|new
name|BindyKeyValuePairFactory
argument_list|(
name|getClassType
argument_list|()
argument_list|)
decl_stmt|;
name|bindyKeyValuePairFactory
operator|.
name|setFormatFactory
argument_list|(
name|formatFactory
argument_list|)
expr_stmt|;
return|return
name|bindyKeyValuePairFactory
return|;
block|}
block|}
end_class

end_unit

