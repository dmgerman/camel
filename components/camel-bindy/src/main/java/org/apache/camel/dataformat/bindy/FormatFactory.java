begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|BindyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|DataField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|KeyValuePairField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|BigDecimalFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|BigDecimalPatternFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|BigIntegerFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|BooleanFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|ByteFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|BytePatternFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|CharacterFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|DatePatternFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|DoubleFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|DoublePatternFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|EnumFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|FloatFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|FloatPatternFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|IntegerFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|IntegerPatternFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|LongFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|LongPatternFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|ShortFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|ShortPatternFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|StringFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Factory to return {@link Format} classes for a given type.  */
end_comment

begin_class
DECL|class|FormatFactory
specifier|public
specifier|final
class|class
name|FormatFactory
block|{
DECL|method|FormatFactory ()
specifier|private
name|FormatFactory
parameter_list|()
block|{     }
comment|/**      * Retrieves the format to use for the given type      *      * @param clazz represents the type of the format (String, Integer, Byte)      * @param pattern is the pattern to be used during the formatting of the data      * @param locale optional locale for NumberFormat and DateFormat parsing.      * @param precision optional scale for BigDecimal parsing.      * @param rounding optional rounding mode to be used to scale BigDecimal with precision value      * @param impliedDecimalSeparator optional flag for floating-point values      * @param decimalSeparator optional decimal separator for BigDecimal      * @param groupingSeparator optional grouping separator for BigDecimal      * @return Format the formatter      * @throws IllegalArgumentException if not suitable formatter is found      */
DECL|method|doGetFormat (Class<?> clazz, String pattern, String locale, String timezone, int precision, String rounding, boolean impliedDecimalSeparator, String decimalSeparator, String groupingSeparator)
specifier|private
specifier|static
name|Format
argument_list|<
name|?
argument_list|>
name|doGetFormat
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|locale
parameter_list|,
name|String
name|timezone
parameter_list|,
name|int
name|precision
parameter_list|,
name|String
name|rounding
parameter_list|,
name|boolean
name|impliedDecimalSeparator
parameter_list|,
name|String
name|decimalSeparator
parameter_list|,
name|String
name|groupingSeparator
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|clazz
operator|==
name|byte
operator|.
name|class
operator|||
name|clazz
operator|==
name|Byte
operator|.
name|class
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pattern
argument_list|)
condition|?
operator|new
name|BytePatternFormat
argument_list|(
name|pattern
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
else|:
operator|new
name|ByteFormat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|short
operator|.
name|class
operator|||
name|clazz
operator|==
name|Short
operator|.
name|class
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pattern
argument_list|)
condition|?
operator|new
name|ShortPatternFormat
argument_list|(
name|pattern
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
else|:
operator|new
name|ShortFormat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|int
operator|.
name|class
operator|||
name|clazz
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pattern
argument_list|)
condition|?
operator|new
name|IntegerPatternFormat
argument_list|(
name|pattern
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
else|:
operator|new
name|IntegerFormat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|long
operator|.
name|class
operator|||
name|clazz
operator|==
name|Long
operator|.
name|class
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pattern
argument_list|)
condition|?
operator|new
name|LongPatternFormat
argument_list|(
name|pattern
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
else|:
operator|new
name|LongFormat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|float
operator|.
name|class
operator|||
name|clazz
operator|==
name|Float
operator|.
name|class
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pattern
argument_list|)
condition|?
operator|new
name|FloatPatternFormat
argument_list|(
name|pattern
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
else|:
operator|new
name|FloatFormat
argument_list|(
name|impliedDecimalSeparator
argument_list|,
name|precision
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|double
operator|.
name|class
operator|||
name|clazz
operator|==
name|Double
operator|.
name|class
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pattern
argument_list|)
condition|?
operator|new
name|DoublePatternFormat
argument_list|(
name|pattern
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
else|:
operator|new
name|DoubleFormat
argument_list|(
name|impliedDecimalSeparator
argument_list|,
name|precision
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|BigDecimal
operator|.
name|class
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pattern
argument_list|)
condition|?
operator|new
name|BigDecimalPatternFormat
argument_list|(
name|pattern
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|,
name|precision
argument_list|,
name|rounding
argument_list|,
name|decimalSeparator
argument_list|,
name|groupingSeparator
argument_list|)
else|:
operator|new
name|BigDecimalFormat
argument_list|(
name|impliedDecimalSeparator
argument_list|,
name|precision
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|BigInteger
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|BigIntegerFormat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|StringFormat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Date
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|DatePatternFormat
argument_list|(
name|pattern
argument_list|,
name|timezone
argument_list|,
name|getLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|char
operator|.
name|class
operator|||
name|clazz
operator|==
name|Character
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|CharacterFormat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|boolean
operator|.
name|class
operator|||
name|clazz
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|BooleanFormat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|.
name|isEnum
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
name|Format
argument_list|<
name|?
argument_list|>
name|fmt
init|=
operator|new
name|EnumFormat
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
name|fmt
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not find a suitable formatter for the type: "
operator|+
name|clazz
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Retrieves the format to use for the given type      *      * @param clazz represents the type of the format (String, Integer, Byte)      * @param locale optional locale for NumberFormat and DateFormat parsing.      * @return Format the formatter      * @throws IllegalArgumentException if not suitable formatter is found      */
DECL|method|getFormat (Class<?> clazz, String locale, DataField data, BindyConverter converter)
specifier|public
specifier|static
name|Format
argument_list|<
name|?
argument_list|>
name|getFormat
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|locale
parameter_list|,
name|DataField
name|data
parameter_list|,
name|BindyConverter
name|converter
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|converter
operator|!=
literal|null
condition|)
block|{
return|return
name|converter
operator|.
name|value
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
name|String
name|pattern
init|=
name|data
operator|.
name|pattern
argument_list|()
decl_stmt|;
name|String
name|timezone
init|=
name|data
operator|.
name|timezone
argument_list|()
decl_stmt|;
name|int
name|precision
init|=
name|data
operator|.
name|precision
argument_list|()
decl_stmt|;
name|String
name|decimalSeparator
init|=
name|data
operator|.
name|decimalSeparator
argument_list|()
decl_stmt|;
name|String
name|groupingSeparator
init|=
name|data
operator|.
name|groupingSeparator
argument_list|()
decl_stmt|;
name|String
name|rounding
init|=
name|data
operator|.
name|rounding
argument_list|()
decl_stmt|;
return|return
name|doGetFormat
argument_list|(
name|clazz
argument_list|,
name|pattern
argument_list|,
name|locale
argument_list|,
name|timezone
argument_list|,
name|precision
argument_list|,
name|rounding
argument_list|,
name|data
operator|.
name|impliedDecimalSeparator
argument_list|()
argument_list|,
name|decimalSeparator
argument_list|,
name|groupingSeparator
argument_list|)
return|;
block|}
comment|/**      * Retrieves the format to use for the given type      *      * @param clazz represents the type of the format (String, Integer, Byte)      * @param locale optional locale for NumberFormat and DateFormat parsing.      * @return Format the formatter      * @throws IllegalArgumentException if not suitable formatter is found      * TODO : Check if KeyValuePair could also use decimal/groupingSeparator/rounding for BigDecimal      */
DECL|method|getFormat (Class<?> clazz, String locale, KeyValuePairField data, BindyConverter converter)
specifier|public
specifier|static
name|Format
argument_list|<
name|?
argument_list|>
name|getFormat
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|locale
parameter_list|,
name|KeyValuePairField
name|data
parameter_list|,
name|BindyConverter
name|converter
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|converter
operator|!=
literal|null
condition|)
block|{
return|return
name|converter
operator|.
name|value
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
name|String
name|pattern
init|=
name|data
operator|.
name|pattern
argument_list|()
decl_stmt|;
name|String
name|timezone
init|=
name|data
operator|.
name|timezone
argument_list|()
decl_stmt|;
name|int
name|precision
init|=
name|data
operator|.
name|precision
argument_list|()
decl_stmt|;
return|return
name|doGetFormat
argument_list|(
name|clazz
argument_list|,
name|pattern
argument_list|,
name|locale
argument_list|,
name|timezone
argument_list|,
name|precision
argument_list|,
literal|null
argument_list|,
name|data
operator|.
name|impliedDecimalSeparator
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getLocale (String locale)
specifier|private
specifier|static
name|Locale
name|getLocale
parameter_list|(
name|String
name|locale
parameter_list|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|locale
argument_list|)
condition|)
block|{
return|return
name|Locale
operator|.
name|getDefault
argument_list|()
return|;
block|}
name|Locale
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|locale
argument_list|)
condition|)
block|{
name|String
index|[]
name|result
init|=
name|locale
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|length
operator|<=
literal|2
condition|)
block|{
name|answer
operator|=
name|result
operator|.
name|length
operator|==
literal|1
condition|?
operator|new
name|Locale
argument_list|(
name|result
index|[
literal|0
index|]
argument_list|)
else|:
operator|new
name|Locale
argument_list|(
name|result
index|[
literal|0
index|]
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

