begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.format.factories
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|factories
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|FormattingOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|AbstractNumberFormat
import|;
end_import

begin_class
DECL|class|BigIntegerFormatFactory
specifier|public
class|class
name|BigIntegerFormatFactory
extends|extends
name|AbstractFormatFactory
block|{
DECL|field|bigIntegerFormat
specifier|private
specifier|final
name|BigIntegerFormat
name|bigIntegerFormat
init|=
operator|new
name|BigIntegerFormat
argument_list|()
decl_stmt|;
block|{
name|supportedClasses
operator|.
name|add
parameter_list|(
name|BigInteger
operator|.
name|class
parameter_list|)
constructor_decl|;
block|}
annotation|@
name|Override
DECL|method|canBuild (FormattingOptions formattingOptions)
specifier|public
name|boolean
name|canBuild
parameter_list|(
name|FormattingOptions
name|formattingOptions
parameter_list|)
block|{
return|return
name|super
operator|.
name|canBuild
argument_list|(
name|formattingOptions
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|build (FormattingOptions formattingOptions)
specifier|public
name|Format
argument_list|<
name|?
argument_list|>
name|build
parameter_list|(
name|FormattingOptions
name|formattingOptions
parameter_list|)
block|{
return|return
name|bigIntegerFormat
return|;
block|}
DECL|class|BigIntegerFormat
specifier|private
specifier|static
class|class
name|BigIntegerFormat
extends|extends
name|AbstractNumberFormat
argument_list|<
name|BigInteger
argument_list|>
block|{
DECL|method|format (BigInteger object)
specifier|public
name|String
name|format
parameter_list|(
name|BigInteger
name|object
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|object
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parse (String string)
specifier|public
name|BigInteger
name|parse
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|BigInteger
argument_list|(
name|string
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

