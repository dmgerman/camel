begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|BindyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|CsvRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|DataField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|OneToMany
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|annotation
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|FormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The BindyCsvFactory is the class who allows to : Generate a model associated  * to a CSV record, bind data from a record to the POJOs, export data of POJOs  * to a CSV record and format data into String, Date, Double, ... according to  * the format/pattern defined  */
end_comment

begin_class
DECL|class|BindyCsvFactory
specifier|public
class|class
name|BindyCsvFactory
extends|extends
name|BindyAbstractFactory
implements|implements
name|BindyFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BindyCsvFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|isOneToMany
name|boolean
name|isOneToMany
decl_stmt|;
DECL|field|dataFields
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|DataField
argument_list|>
name|dataFields
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|DataField
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|annotatedFields
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Field
argument_list|>
name|annotatedFields
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Field
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|sections
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|sections
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|numberOptionalFields
specifier|private
name|int
name|numberOptionalFields
decl_stmt|;
DECL|field|numberMandatoryFields
specifier|private
name|int
name|numberMandatoryFields
decl_stmt|;
DECL|field|totalFields
specifier|private
name|int
name|totalFields
decl_stmt|;
DECL|field|maxpos
specifier|private
name|int
name|maxpos
decl_stmt|;
DECL|field|separator
specifier|private
name|String
name|separator
decl_stmt|;
DECL|field|skipFirstLine
specifier|private
name|boolean
name|skipFirstLine
decl_stmt|;
DECL|field|generateHeaderColumnNames
specifier|private
name|boolean
name|generateHeaderColumnNames
decl_stmt|;
DECL|field|messageOrdered
specifier|private
name|boolean
name|messageOrdered
decl_stmt|;
DECL|field|quote
specifier|private
name|String
name|quote
decl_stmt|;
DECL|field|quoting
specifier|private
name|boolean
name|quoting
decl_stmt|;
DECL|field|autospanLine
specifier|private
name|boolean
name|autospanLine
decl_stmt|;
DECL|field|allowEmptyStream
specifier|private
name|boolean
name|allowEmptyStream
decl_stmt|;
DECL|field|quotingEscaped
specifier|private
name|boolean
name|quotingEscaped
decl_stmt|;
DECL|field|endWithLineBreak
specifier|private
name|boolean
name|endWithLineBreak
decl_stmt|;
DECL|method|BindyCsvFactory (Class<?> type)
specifier|public
name|BindyCsvFactory
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// initialize specific parameters of the csv model
name|initCsvModel
argument_list|()
expr_stmt|;
block|}
comment|/**      * method uses to initialize the model representing the classes who will      * bind the data. This process will scan for classes according to the      * package name provided, check the annotated classes and fields and      * retrieve the separator of the CSV record      *      * @throws Exception      */
DECL|method|initCsvModel ()
specifier|public
name|void
name|initCsvModel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Find annotated Datafields declared in the Model classes
name|initAnnotatedFields
argument_list|()
expr_stmt|;
comment|// initialize Csv parameter(s)
comment|// separator and skip first line from @CSVrecord annotation
name|initCsvRecordParameters
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initAnnotatedFields ()
specifier|public
name|void
name|initAnnotatedFields
parameter_list|()
block|{
name|maxpos
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
range|:
name|models
control|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|linkFields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Class retrieved: {}"
argument_list|,
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|field
range|:
name|cl
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|DataField
name|dataField
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|DataField
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataField
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Position defined in the class: {}, position: {}, Field: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|cl
operator|.
name|getName
argument_list|()
block|,
name|dataField
operator|.
name|pos
argument_list|()
block|,
name|dataField
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataField
operator|.
name|required
argument_list|()
condition|)
block|{
operator|++
name|numberMandatoryFields
expr_stmt|;
block|}
else|else
block|{
operator|++
name|numberOptionalFields
expr_stmt|;
block|}
name|int
name|pos
init|=
name|dataField
operator|.
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|annotatedFields
operator|.
name|containsKey
argument_list|(
name|pos
argument_list|)
condition|)
block|{
name|Field
name|f
init|=
name|annotatedFields
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Potentially invalid model: existing @DataField '{}' replaced by '{}'"
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dataFields
operator|.
name|put
argument_list|(
name|pos
argument_list|,
name|dataField
argument_list|)
expr_stmt|;
name|annotatedFields
operator|.
name|put
argument_list|(
name|pos
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|maxpos
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxpos
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|Link
name|linkField
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Link
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkField
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Class linked: {}, Field: {}"
argument_list|,
name|cl
operator|.
name|getName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|linkFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|linkFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|annotatedLinkFields
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|,
name|linkFields
argument_list|)
expr_stmt|;
block|}
name|totalFields
operator|=
name|numberMandatoryFields
operator|+
name|numberOptionalFields
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of optional fields: {}"
argument_list|,
name|numberOptionalFields
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of mandatory fields: {}"
argument_list|,
name|numberMandatoryFields
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Total: {}"
argument_list|,
name|totalFields
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|annotatedFields
operator|.
name|size
argument_list|()
operator|<
name|maxpos
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Potentially incomplete model: some csv fields may not be mapped to @DataField members"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|bind (CamelContext camelContext, List<String> tokens, Map<String, Object> model, int line)
specifier|public
name|void
name|bind
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tokens
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|model
parameter_list|,
name|int
name|line
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|pos
init|=
literal|1
decl_stmt|;
name|int
name|counterMandatoryFields
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|data
range|:
name|tokens
control|)
block|{
comment|// Get DataField from model
name|DataField
name|dataField
init|=
name|dataFields
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|dataField
argument_list|,
literal|"No position "
operator|+
name|pos
operator|+
literal|" defined for the field: "
operator|+
name|data
operator|+
literal|", line: "
operator|+
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataField
operator|.
name|trim
argument_list|()
condition|)
block|{
name|data
operator|=
name|data
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dataField
operator|.
name|required
argument_list|()
condition|)
block|{
comment|// Increment counter of mandatory fields
operator|++
name|counterMandatoryFields
expr_stmt|;
comment|// Check if content of the field is empty
comment|// This is not possible for mandatory fields
if|if
condition|(
name|data
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The mandatory field defined at the position "
operator|+
name|pos
operator|+
literal|" is empty for the line: "
operator|+
name|line
argument_list|)
throw|;
block|}
block|}
comment|// Get Field to be setted
name|Field
name|field
init|=
name|annotatedFields
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pos: {}, Data: {}, Field type: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pos
block|,
name|data
block|,
name|field
operator|.
name|getType
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Create format object to format the field
name|FormattingOptions
name|formattingOptions
init|=
name|ConverterUtils
operator|.
name|convert
argument_list|(
name|dataField
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getAnnotation
argument_list|(
name|BindyConverter
operator|.
name|class
argument_list|)
argument_list|,
name|getLocale
argument_list|()
argument_list|)
decl_stmt|;
name|Format
argument_list|<
name|?
argument_list|>
name|format
init|=
name|formatFactory
operator|.
name|getFormat
argument_list|(
name|formattingOptions
argument_list|)
decl_stmt|;
comment|// field object to be set
name|Object
name|modelField
init|=
name|model
operator|.
name|get
argument_list|(
name|field
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// format the data received
name|Object
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|quoting
operator|&&
name|quote
operator|!=
literal|null
operator|&&
operator|(
name|data
operator|.
name|contains
argument_list|(
literal|"\\"
operator|+
name|quote
argument_list|)
operator|||
name|data
operator|.
name|contains
argument_list|(
name|quote
argument_list|)
operator|)
operator|&&
name|quotingEscaped
condition|)
block|{
name|value
operator|=
name|format
operator|.
name|parse
argument_list|(
name|data
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
operator|+
name|quote
argument_list|,
literal|"\\"
operator|+
name|quote
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|format
operator|.
name|parse
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FormatException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
operator|+
literal|", position: "
operator|+
name|pos
operator|+
literal|", line: "
operator|+
name|line
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsing error detected for field defined at the position: "
operator|+
name|pos
operator|+
literal|", line: "
operator|+
name|line
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|dataField
operator|.
name|defaultValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|value
operator|=
name|format
operator|.
name|parse
argument_list|(
name|dataField
operator|.
name|defaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|getDefaultValueForPrimitive
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|dataField
operator|.
name|method
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
if|if
condition|(
name|dataField
operator|.
name|method
argument_list|()
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|dataField
operator|.
name|method
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dataField
operator|.
name|method
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clazz
operator|=
name|field
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
name|String
name|methodName
init|=
name|dataField
operator|.
name|method
argument_list|()
operator|.
name|substring
argument_list|(
name|dataField
operator|.
name|method
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|,
name|dataField
operator|.
name|method
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
name|ReflectionHelper
operator|.
name|findMethod
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
comment|// this method must be static and return type
comment|// must be the same as the datafield and
comment|// must receive only the datafield value
comment|// as the method argument
name|value
operator|=
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|m
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to method without parameter, that is on the value itself
name|m
operator|=
name|ReflectionHelper
operator|.
name|findMethod
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
name|value
operator|=
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|m
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|field
operator|.
name|set
argument_list|(
name|modelField
argument_list|,
name|value
argument_list|)
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Counter mandatory fields: {}"
argument_list|,
name|counterMandatoryFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|counterMandatoryFields
operator|<
name|numberMandatoryFields
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Some mandatory fields are missing, line: "
operator|+
name|line
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|<
name|totalFields
condition|)
block|{
name|setDefaultValuesForFields
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|unbind (CamelContext camelContext, Map<String, Object> model)
specifier|public
name|String
name|unbind
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|model
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Check if separator exists
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|separator
argument_list|,
literal|"The separator has not been instantiated or property not defined in the @CsvRecord annotation"
argument_list|)
expr_stmt|;
name|char
name|separator
init|=
name|ConverterUtils
operator|.
name|getCharDelimiter
argument_list|(
name|this
operator|.
name|getSeparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Separator converted: '0x{}', from: {}"
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|separator
argument_list|)
argument_list|,
name|this
operator|.
name|getSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|models
control|)
block|{
if|if
condition|(
name|model
operator|.
name|containsKey
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|obj
init|=
name|model
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Model object: {}, class: {}"
argument_list|,
name|obj
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
comment|// Generate Csv table
name|generateCsvPositionMap
argument_list|(
name|clazz
argument_list|,
name|obj
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Transpose result
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isOneToMany
condition|)
block|{
name|l
operator|=
name|product
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Convert Map<Integer, List> into List<List>
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|sortValues
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|temp
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|sortValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Get list of values
name|List
argument_list|<
name|String
argument_list|>
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// For one to one relation
comment|// There is only one item in the list
name|String
name|value
init|=
name|val
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Add the value to the temp array
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|temp
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|temp
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|l
operator|.
name|add
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|it
init|=
name|l
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itx
init|=
name|tokens
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itx
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|res
init|=
name|itx
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
comment|// the field may be enclosed in quotes if a quote was configured
if|if
condition|(
name|quoting
operator|&&
name|quote
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|quote
argument_list|)
expr_stmt|;
block|}
comment|// CAMEL-7519 - improvoment escape the token itself by prepending escape char
if|if
condition|(
name|quoting
operator|&&
name|quote
operator|!=
literal|null
operator|&&
operator|(
name|res
operator|.
name|contains
argument_list|(
literal|"\\"
operator|+
name|quote
argument_list|)
operator|||
name|res
operator|.
name|contains
argument_list|(
name|quote
argument_list|)
operator|)
operator|&&
name|quotingEscaped
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|res
operator|.
name|replaceAll
argument_list|(
literal|"\\"
operator|+
name|quote
argument_list|,
literal|"\\\\"
operator|+
name|quote
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|quoting
operator|&&
name|quote
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|quote
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|itx
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|ConverterUtils
operator|.
name|getStringCarriageReturn
argument_list|(
name|getCarriageReturn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|product (Map<Integer, List<String>> values)
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|product
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|sortValues
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|product
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|index
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|idxSize
init|=
literal|0
decl_stmt|;
do|do
block|{
name|idxSize
operator|=
literal|0
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|1
init|;
name|ii
operator|<=
name|sortValues
operator|.
name|lastKey
argument_list|()
condition|;
name|ii
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|values
operator|.
name|get
argument_list|(
name|ii
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|v
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
operator|++
name|idxSize
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|>=
name|idx
operator|+
literal|1
condition|)
block|{
name|v
operator|.
name|add
argument_list|(
name|l
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|ii
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Value: {}, pos: {}, at: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|l
operator|.
name|get
argument_list|(
name|idx
argument_list|)
block|,
name|ii
block|,
name|idx
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|v
operator|.
name|add
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|ii
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|++
name|idxSize
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Value: {}, pos: {}, at index: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
block|,
name|ii
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|idxSize
operator|!=
name|sortValues
operator|.
name|lastKey
argument_list|()
condition|)
block|{
name|product
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
operator|++
name|idx
expr_stmt|;
block|}
do|while
condition|(
name|idxSize
operator|!=
name|sortValues
operator|.
name|lastKey
argument_list|()
condition|)
do|;
return|return
name|product
return|;
block|}
comment|/**      * Generate a table containing the data formatted and sorted with their position/offset      * If the model is Ordered than a key is created combining the annotation @Section and Position of the field      * If a relation @OneToMany is defined, than we iterate recursively through this function      * The result is placed in the Map<Integer, List> results      */
DECL|method|generateCsvPositionMap (Class<?> clazz, Object obj, Map<Integer, List<String>> results)
specifier|private
name|void
name|generateCsvPositionMap
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Object
name|obj
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|result
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DataField
name|datafield
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|DataField
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|datafield
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
comment|// Retrieve the format, pattern and precision associated to the type
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Create format
name|FormattingOptions
name|formattingOptions
init|=
name|ConverterUtils
operator|.
name|convert
argument_list|(
name|datafield
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getAnnotation
argument_list|(
name|BindyConverter
operator|.
name|class
argument_list|)
argument_list|,
name|getLocale
argument_list|()
argument_list|)
decl_stmt|;
name|Format
argument_list|<
name|?
argument_list|>
name|format
init|=
name|formatFactory
operator|.
name|getFormat
argument_list|(
name|formattingOptions
argument_list|)
decl_stmt|;
comment|// Get field value
name|Object
name|value
init|=
name|field
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
comment|// If the field value is empty, populate it with the default value
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|datafield
operator|.
name|defaultValue
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
name|datafield
operator|.
name|defaultValue
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|formatString
argument_list|(
name|format
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|datafield
operator|.
name|trim
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|datafield
operator|.
name|clip
argument_list|()
operator|&&
name|result
operator|.
name|length
argument_list|()
operator|>
name|datafield
operator|.
name|length
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|datafield
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Value to be formatted: {}, position: {}, and its formatted value: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value
block|,
name|datafield
operator|.
name|pos
argument_list|()
block|,
name|result
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
literal|""
expr_stmt|;
block|}
name|Integer
name|key
decl_stmt|;
if|if
condition|(
name|isMessageOrdered
argument_list|()
operator|&&
name|obj
operator|!=
literal|null
condition|)
block|{
comment|// Generate a key using the number of the section
comment|// and the position of the field
name|Integer
name|key1
init|=
name|sections
operator|.
name|get
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|key2
init|=
name|datafield
operator|.
name|position
argument_list|()
decl_stmt|;
name|Integer
name|keyGenerated
init|=
name|generateKey
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key generated: {}, for section: {}"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|keyGenerated
argument_list|)
argument_list|,
name|key1
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|keyGenerated
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
name|datafield
operator|.
name|pos
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|results
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|results
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|OneToMany
name|oneToMany
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|OneToMany
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|oneToMany
operator|!=
literal|null
condition|)
block|{
comment|// Set global variable
comment|// Will be used during generation of CSV
name|isOneToMany
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|target
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|generateCsvPositionMap
argument_list|(
name|target
operator|.
name|getClass
argument_list|()
argument_list|,
name|target
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Call this function to add empty value
comment|// in the table
name|generateCsvPositionMap
argument_list|(
name|field
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Generate for the first line the headers of the columns      *      * @return the headers columns      */
DECL|method|generateHeader ()
specifier|public
name|String
name|generateHeader
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|DataField
argument_list|>
name|dataFieldsSorted
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|DataField
argument_list|>
argument_list|(
name|dataFields
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|dataFieldsSorted
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuilder
name|builderHeader
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataField
name|dataField
init|=
name|dataFieldsSorted
operator|.
name|get
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
comment|// Retrieve the field
name|Field
name|field
init|=
name|annotatedFields
operator|.
name|get
argument_list|(
name|dataField
operator|.
name|pos
argument_list|()
argument_list|)
decl_stmt|;
comment|// Change accessibility to allow to read protected/private fields
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Get dataField
if|if
condition|(
operator|!
name|dataField
operator|.
name|columnName
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|builderHeader
operator|.
name|append
argument_list|(
name|dataField
operator|.
name|columnName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builderHeader
operator|.
name|append
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|builderHeader
operator|.
name|append
argument_list|(
name|ConverterUtils
operator|.
name|getCharDelimiter
argument_list|(
name|separator
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builderHeader
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get parameters defined in @CsvRecord annotation      */
DECL|method|initCsvRecordParameters ()
specifier|private
name|void
name|initCsvRecordParameters
parameter_list|()
block|{
if|if
condition|(
name|separator
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
range|:
name|models
control|)
block|{
comment|// Get annotation @CsvRecord from the class
name|CsvRecord
name|record
init|=
name|cl
operator|.
name|getAnnotation
argument_list|(
name|CsvRecord
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Get annotation @Section from the class
name|Section
name|section
init|=
name|cl
operator|.
name|getAnnotation
argument_list|(
name|Section
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Csv record: {}"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// Get skipFirstLine parameter
name|skipFirstLine
operator|=
name|record
operator|.
name|skipFirstLine
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip First Line parameter of the CSV: {}"
operator|+
name|skipFirstLine
argument_list|)
expr_stmt|;
comment|// Get generateHeaderColumnNames parameter
name|generateHeaderColumnNames
operator|=
name|record
operator|.
name|generateHeaderColumns
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generate header column names parameter of the CSV: {}"
argument_list|,
name|generateHeaderColumnNames
argument_list|)
expr_stmt|;
comment|// Get Separator parameter
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|record
operator|.
name|separator
argument_list|()
argument_list|,
literal|"No separator has been defined in the @Record annotation"
argument_list|)
expr_stmt|;
name|separator
operator|=
name|record
operator|.
name|separator
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Separator defined for the CSV: {}"
argument_list|,
name|separator
argument_list|)
expr_stmt|;
comment|// Get carriage return parameter
name|crlf
operator|=
name|record
operator|.
name|crlf
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Carriage return defined for the CSV: {}"
argument_list|,
name|crlf
argument_list|)
expr_stmt|;
comment|// Get isOrdered parameter
name|messageOrdered
operator|=
name|record
operator|.
name|isOrdered
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Must CSV record be ordered: {}"
argument_list|,
name|messageOrdered
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|record
operator|.
name|quote
argument_list|()
argument_list|)
condition|)
block|{
name|quote
operator|=
name|record
operator|.
name|quote
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Quoting columns with: {}"
argument_list|,
name|quote
argument_list|)
expr_stmt|;
block|}
name|quoting
operator|=
name|record
operator|.
name|quoting
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CSV will be quoted: {}"
argument_list|,
name|quoting
argument_list|)
expr_stmt|;
name|autospanLine
operator|=
name|record
operator|.
name|autospanLine
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Autospan line in last record: {}"
argument_list|,
name|autospanLine
argument_list|)
expr_stmt|;
comment|// Get allowEmptyStream parameter
name|allowEmptyStream
operator|=
name|record
operator|.
name|allowEmptyStream
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Allow empty stream parameter of the CSV: {}"
operator|+
name|allowEmptyStream
argument_list|)
expr_stmt|;
comment|// Get quotingEscaped parameter
name|quotingEscaped
operator|=
name|record
operator|.
name|quotingEscaped
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Escape quote character flag of the CSV: {}"
operator|+
name|quotingEscaped
argument_list|)
expr_stmt|;
comment|// Get endWithLineBreak parameter
name|endWithLineBreak
operator|=
name|record
operator|.
name|endWithLineBreak
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"End with line break: {}"
operator|+
name|endWithLineBreak
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
comment|// BigIntegerFormatFactory if section number is not null
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|section
operator|.
name|number
argument_list|()
argument_list|,
literal|"No number has been defined for the section"
argument_list|)
expr_stmt|;
comment|// Get section number and add it to the sections
name|sections
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|,
name|section
operator|.
name|number
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Set the default values for the non defined fields.      * @param model the model which has its default fields set.      * @throws IllegalAccessException if the underlying fields are inaccessible      * @throws Exception In case the field cannot be parsed      */
DECL|method|setDefaultValuesForFields (final Map<String, Object> model)
specifier|private
name|void
name|setDefaultValuesForFields
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|model
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|Exception
block|{
comment|// Set the default values, if defined
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|dataFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
name|annotatedFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DataField
name|dataField
init|=
name|dataFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|modelField
init|=
name|model
operator|.
name|get
argument_list|(
name|field
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|get
argument_list|(
name|modelField
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|dataField
operator|.
name|defaultValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FormattingOptions
name|formattingOptions
init|=
name|ConverterUtils
operator|.
name|convert
argument_list|(
name|dataField
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getAnnotation
argument_list|(
name|BindyConverter
operator|.
name|class
argument_list|)
argument_list|,
name|getLocale
argument_list|()
argument_list|)
decl_stmt|;
name|Format
argument_list|<
name|?
argument_list|>
name|format
init|=
name|formatFactory
operator|.
name|getFormat
argument_list|(
name|formattingOptions
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|format
operator|.
name|parse
argument_list|(
name|dataField
operator|.
name|defaultValue
argument_list|()
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|modelField
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Find the separator used to delimit the CSV fields      */
DECL|method|getSeparator ()
specifier|public
name|String
name|getSeparator
parameter_list|()
block|{
return|return
name|separator
return|;
block|}
comment|/**      * Flag indicating if the first line of the CSV must be skipped      */
DECL|method|getGenerateHeaderColumnNames ()
specifier|public
name|boolean
name|getGenerateHeaderColumnNames
parameter_list|()
block|{
return|return
name|generateHeaderColumnNames
return|;
block|}
comment|/**      * Find the separator used to delimit the CSV fields      */
DECL|method|getSkipFirstLine ()
specifier|public
name|boolean
name|getSkipFirstLine
parameter_list|()
block|{
return|return
name|skipFirstLine
return|;
block|}
comment|/**      * If last record is to span the rest of the line      */
DECL|method|getAutospanLine ()
specifier|public
name|boolean
name|getAutospanLine
parameter_list|()
block|{
return|return
name|autospanLine
return|;
block|}
comment|/**      * Flag indicating if the message must be ordered      *      * @return boolean      */
DECL|method|isMessageOrdered ()
specifier|public
name|boolean
name|isMessageOrdered
parameter_list|()
block|{
return|return
name|messageOrdered
return|;
block|}
DECL|method|getQuote ()
specifier|public
name|String
name|getQuote
parameter_list|()
block|{
return|return
name|quote
return|;
block|}
DECL|method|getMaxpos ()
specifier|public
name|int
name|getMaxpos
parameter_list|()
block|{
return|return
name|maxpos
return|;
block|}
DECL|method|isAllowEmptyStream ()
specifier|public
name|boolean
name|isAllowEmptyStream
parameter_list|()
block|{
return|return
name|allowEmptyStream
return|;
block|}
DECL|method|isEndWithLineBreak ()
specifier|public
name|boolean
name|isEndWithLineBreak
parameter_list|()
block|{
return|return
name|endWithLineBreak
return|;
block|}
block|}
end_class

end_unit

