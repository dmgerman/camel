begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.format.factories
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
operator|.
name|factories
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|FormattingOptions
import|;
end_import

begin_comment
comment|/**  * This class manages all FormatFactoryInterfaces.  * This class is a singleton class.  * FormatFactoryInterfaces can declare to support one or more classes or  * can declare to be generic (e.g. {@link EnumFormatFactory}).  * The factories that support one or more classes are stored in a Map.  * The generic factories are stored in a list.  * The build method first tries to find a factory using the map.  * If it doesn't find one it uses the generic list.  * If it can't find a factory it throws an IllegalArgumentException.  */
end_comment

begin_class
DECL|class|FormatFactories
specifier|public
specifier|final
class|class
name|FormatFactories
extends|extends
name|AbstractFormatFactory
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|FormatFactories
name|INSTANCE
init|=
operator|new
name|FormatFactories
argument_list|()
decl_stmt|;
DECL|field|CLASS_BASED_FACTORIES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|List
argument_list|<
name|FormatFactoryInterface
argument_list|>
argument_list|>
name|CLASS_BASED_FACTORIES
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|OTHER_FACTORIES
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|FormatFactoryInterface
argument_list|>
name|OTHER_FACTORIES
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|FormatFactories ()
specifier|private
name|FormatFactories
parameter_list|()
block|{     }
DECL|method|getInstance ()
specifier|public
specifier|static
name|FormatFactories
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
comment|/**      * Registers a {@link FormatFactoryInterface}.      * Two types of factories exist:      *<ul>      *<li>Factories that support one or more classes</li>      *<li>Factories that support no specific class (e.g. {@link EnumFormatFactory})</li>      *</ul>      * @param formatFactory      * @return the FormatFactories instance      */
DECL|method|register (FormatFactoryInterface formatFactory)
specifier|public
specifier|synchronized
name|FormatFactories
name|register
parameter_list|(
name|FormatFactoryInterface
name|formatFactory
parameter_list|)
block|{
if|if
condition|(
name|formatFactory
operator|.
name|supportedClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OTHER_FACTORIES
operator|.
name|add
argument_list|(
name|formatFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|formatFactory
operator|.
name|supportedClasses
argument_list|()
control|)
block|{
name|getByClass
argument_list|(
name|clazz
argument_list|)
operator|.
name|add
argument_list|(
name|formatFactory
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|canBuild (FormattingOptions formattingOptions)
specifier|public
name|boolean
name|canBuild
parameter_list|(
name|FormattingOptions
name|formattingOptions
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|build (FormattingOptions formattingOptions)
specifier|public
name|Format
argument_list|<
name|?
argument_list|>
name|build
parameter_list|(
name|FormattingOptions
name|formattingOptions
parameter_list|)
block|{
for|for
control|(
name|FormatFactoryInterface
name|formatFactory
range|:
name|getByClass
argument_list|(
name|formattingOptions
operator|.
name|getClazz
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|formatFactory
operator|.
name|canBuild
argument_list|(
name|formattingOptions
argument_list|)
condition|)
block|{
return|return
name|formatFactory
operator|.
name|build
argument_list|(
name|formattingOptions
argument_list|)
return|;
block|}
block|}
for|for
control|(
name|FormatFactoryInterface
name|formatFactory
range|:
name|OTHER_FACTORIES
control|)
block|{
if|if
condition|(
name|formatFactory
operator|.
name|canBuild
argument_list|(
name|formattingOptions
argument_list|)
condition|)
block|{
return|return
name|formatFactory
operator|.
name|build
argument_list|(
name|formattingOptions
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not find a suitable formatter for the type: "
operator|+
name|formattingOptions
operator|.
name|getClazz
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|getByClass (Class<?> clazz)
specifier|private
name|List
argument_list|<
name|FormatFactoryInterface
argument_list|>
name|getByClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|FormatFactoryInterface
argument_list|>
name|result
init|=
name|CLASS_BASED_FACTORIES
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|CLASS_BASED_FACTORIES
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

