begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.bindy.format
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|format
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|bindy
operator|.
name|PatternFormat
import|;
end_import

begin_class
DECL|class|NumberPatternFormat
specifier|public
specifier|abstract
class|class
name|NumberPatternFormat
parameter_list|<
name|T
parameter_list|>
implements|implements
name|PatternFormat
argument_list|<
name|T
argument_list|>
block|{
DECL|field|pattern
specifier|private
name|String
name|pattern
decl_stmt|;
DECL|field|locale
specifier|private
name|Locale
name|locale
decl_stmt|;
DECL|field|decimalSeparator
specifier|private
name|String
name|decimalSeparator
decl_stmt|;
DECL|field|groupingSeparator
specifier|private
name|String
name|groupingSeparator
decl_stmt|;
DECL|field|precision
specifier|private
name|int
name|precision
decl_stmt|;
DECL|field|rounding
specifier|private
name|String
name|rounding
decl_stmt|;
DECL|method|NumberPatternFormat ()
specifier|public
name|NumberPatternFormat
parameter_list|()
block|{     }
DECL|method|NumberPatternFormat (String pattern, Locale locale)
specifier|public
name|NumberPatternFormat
parameter_list|(
name|String
name|pattern
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
block|}
DECL|method|NumberPatternFormat (String pattern, Locale locale, int precision, String rounding, String decimalSeparator, String groupingSeparator)
specifier|public
name|NumberPatternFormat
parameter_list|(
name|String
name|pattern
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|int
name|precision
parameter_list|,
name|String
name|rounding
parameter_list|,
name|String
name|decimalSeparator
parameter_list|,
name|String
name|groupingSeparator
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
name|this
operator|.
name|decimalSeparator
operator|=
name|decimalSeparator
expr_stmt|;
name|this
operator|.
name|groupingSeparator
operator|=
name|groupingSeparator
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|rounding
operator|=
name|rounding
expr_stmt|;
block|}
DECL|method|format (T object)
specifier|public
name|String
name|format
parameter_list|(
name|T
name|object
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getNumberFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|getNumberFormat
argument_list|()
operator|.
name|format
argument_list|(
name|object
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|object
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|parse (String string)
specifier|public
specifier|abstract
name|T
name|parse
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Gets the number format if in use.      *      * @return the number format, or<tt>null</tt> if not in use      */
DECL|method|getNumberFormat ()
specifier|protected
name|NumberFormat
name|getNumberFormat
parameter_list|()
block|{
if|if
condition|(
name|locale
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NumberFormat
name|format
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|locale
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|instanceof
name|DecimalFormat
condition|)
block|{
name|DecimalFormat
name|df
init|=
operator|(
name|DecimalFormat
operator|)
name|format
decl_stmt|;
if|if
condition|(
name|decimalSeparator
operator|!=
literal|null
operator|&&
name|groupingSeparator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|decimalSeparator
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|groupingSeparator
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DecimalFormatSymbols
name|dfs
init|=
operator|new
name|DecimalFormatSymbols
argument_list|(
name|locale
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|setDecimalSeparator
argument_list|(
name|decimalSeparator
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setGroupingSeparator
argument_list|(
name|groupingSeparator
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|df
operator|.
name|setDecimalFormatSymbols
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|df
operator|.
name|applyPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|format
return|;
block|}
DECL|method|getPattern ()
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
DECL|method|setPattern (String pattern)
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|getPrecision ()
specifier|public
name|int
name|getPrecision
parameter_list|()
block|{
return|return
name|precision
return|;
block|}
DECL|method|setPrecision (int precision)
specifier|public
name|void
name|setPrecision
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
block|}
DECL|method|getRounding ()
specifier|public
name|String
name|getRounding
parameter_list|()
block|{
return|return
name|rounding
return|;
block|}
DECL|method|setRounding (String rounding)
specifier|public
name|void
name|setRounding
parameter_list|(
name|String
name|rounding
parameter_list|)
block|{
name|this
operator|.
name|rounding
operator|=
name|rounding
expr_stmt|;
block|}
DECL|method|getLocale ()
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
name|locale
return|;
block|}
DECL|method|setLocale (Locale locale)
specifier|public
name|void
name|setLocale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
block|}
block|}
end_class

end_unit

