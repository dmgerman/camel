begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cdi.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cdi
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|Dependent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Typed
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_comment
comment|/**  * This class contains utility methods to resolve contextual references  * in situations where no injection is available.  *  * @see BeanManagerProvider  */
end_comment

begin_class
annotation|@
name|Typed
DECL|class|BeanProvider
specifier|public
specifier|final
class|class
name|BeanProvider
block|{
DECL|method|BeanProvider ()
specifier|private
name|BeanProvider
parameter_list|()
block|{
comment|// this is a utility class which doesn't get instantiated.
block|}
comment|/**      *<p></p>Get a Contextual Reference by it's type and annotation (qualifier).      * You can use this method to get contextual references of a given type.      * A 'Contextual Reference' is a proxy which will automatically resolve      * the correct contextual instance when you access any method.</p>      *<p/>      *<p><b>Attention:</b> You shall not use this method to manually resolve a      *&#064;Dependent bean! The reason is that this contextual instances do usually      * live in the well defined lifecycle of their injection point (the bean they got      * injected into). But if we manually resolve a&#064;Dependent bean, then it does<b>not</b>      * belong to such a well defined lifecycle (because&#064;Dependent it is not      *&#064;NormalScoped) and thus will not automatically be      * destroyed at the end of the lifecycle. You need to manually destroy this contextual instance via      * {@link javax.enterprise.context.spi.Contextual#destroy(Object, javax.enterprise.context.spi.CreationalContext)}.      * Thus you also need to manually store the CreationalContext and the Bean you      * used to create the contextual instance which this method will not provide.</p>      *      * @param type       the type of the bean in question      * @param optional   if<code>true</code> it will return<code>null</code> if no bean could be found or created.      *                   Otherwise it will throw an {@code IllegalStateException}      * @param qualifiers additional qualifiers which further distinct the resolved bean      * @param<T>        target type      * @return the resolved Contextual Reference      */
DECL|method|getContextualReference (Class<T> type, boolean optional, Annotation... qualifiers)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getContextualReference
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|boolean
name|optional
parameter_list|,
name|Annotation
modifier|...
name|qualifiers
parameter_list|)
block|{
name|BeanManager
name|beanManager
init|=
name|getBeanManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
name|beanManager
operator|.
name|getBeans
argument_list|(
name|type
argument_list|,
name|qualifiers
argument_list|)
decl_stmt|;
if|if
condition|(
name|beans
operator|==
literal|null
operator|||
name|beans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|optional
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find beans for Type='"
operator|+
name|type
operator|+
literal|"' and qualifiers: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|qualifiers
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|getContextualReference
argument_list|(
name|type
argument_list|,
name|beanManager
argument_list|,
name|beans
argument_list|)
return|;
block|}
comment|/**      *<p>Get a Contextual Reference by it's EL Name.      * This only works for beans with the&#064;Named annotation.</p>      *<p/>      *<p><b>Attention:</b> please see the notes on manually resolving&#064;Dependent bean      * in {@link #getContextualReference(Class, boolean, java.lang.annotation.Annotation...)}!</p>      *      * @param name     the EL name of the bean      * @param optional if<code>true</code> it will return<code>null</code> if no bean could be found or created.      *                 Otherwise it will throw an {@code IllegalStateException}      * @return the resolved Contextual Reference      */
DECL|method|getContextualReference (String name, boolean optional)
specifier|public
specifier|static
name|Object
name|getContextualReference
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|optional
parameter_list|)
block|{
return|return
name|getContextualReference
argument_list|(
name|name
argument_list|,
name|optional
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      *<p>Get a Contextual Reference by it's EL Name.      * This only works for beans with the&#064;Named annotation.</p>      *<p/>      *<p><b>Attention:</b> please see the notes on manually resolving&#064;Dependent bean      * in {@link #getContextualReference(Class, boolean, java.lang.annotation.Annotation...)}!</p>      *      * @param name     the EL name of the bean      * @param optional if<code>true</code> it will return<code>null</code> if no bean could be found or created.      *                 Otherwise it will throw an {@code IllegalStateException}      * @param type     the type of the bean in question - use {@link #getContextualReference(String, boolean)}      *                 if the type is unknown e.g. in dyn. use-cases      * @param<T>      target type      * @return the resolved Contextual Reference      */
DECL|method|getContextualReference (String name, boolean optional, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getContextualReference
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|optional
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|BeanManager
name|beanManager
init|=
name|getBeanManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
name|beanManager
operator|.
name|getBeans
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|beans
operator|==
literal|null
operator|||
name|beans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|optional
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find beans for Type="
operator|+
name|type
operator|+
literal|" and name:"
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|getContextualReference
argument_list|(
name|type
argument_list|,
name|beanManager
argument_list|,
name|beans
argument_list|)
return|;
block|}
comment|/**      *<p>Get a list of Contextual References by it's type independent of the qualifier      * (including dependent scoped beans).      *<p/>      * You can use this method to get all contextual references of a given type.      * A 'Contextual Reference' is a proxy which will automatically resolve      * the correct contextual instance when you access any method.</p>      *<p/>      *<p><b>Attention:</b> please see the notes on manually resolving&#064;Dependent bean      * in {@link #getContextualReference(Class, boolean, java.lang.annotation.Annotation...)}!</p>      *      * @param type     the type of the bean in question      * @param optional if<code>true</code> it will return an empty list if no bean could be found or created.      *                 Otherwise it will throw an {@code IllegalStateException}      * @param<T>      target type      * @return the resolved list of Contextual Reference or an empty-list if optional is true      */
DECL|method|getContextualReferences (Class<T> type, boolean optional)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getContextualReferences
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|boolean
name|optional
parameter_list|)
block|{
return|return
name|getContextualReferences
argument_list|(
name|type
argument_list|,
name|optional
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      *<p>Get a list of Contextual References by it's type independent of the qualifier.      *<p/>      * Further details are available at {@link #getContextualReferences(Class, boolean)}      *      * @param type                      the type of the bean in question      * @param optional                  if<code>true</code> it will return an empty list if no bean could be found or created.      *                                  Otherwise it will throw an {@code IllegalStateException}      * @param includeDefaultScopedBeans specifies if dependent scoped beans should be included in the in the result      * @param<T>                       target type      * @return the resolved list of Contextual Reference or an empty-list if optional is true      */
DECL|method|getContextualReferences ( Class<T> type, boolean optional, boolean includeDefaultScopedBeans)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getContextualReferences
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|boolean
name|optional
parameter_list|,
name|boolean
name|includeDefaultScopedBeans
parameter_list|)
block|{
name|BeanManager
name|beanManager
init|=
name|getBeanManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
name|beanManager
operator|.
name|getBeans
argument_list|(
name|type
argument_list|,
operator|new
name|AnyLiteral
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|beans
operator|==
literal|null
operator|||
name|beans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|optional
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find beans for Type="
operator|+
name|type
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|includeDefaultScopedBeans
condition|)
block|{
name|beans
operator|=
name|filterDefaultScopedBeans
argument_list|(
name|beans
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|beans
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
range|:
name|beans
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getContextualReference
argument_list|(
name|type
argument_list|,
name|beanManager
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Bean
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|bean
block|}
block|)
block|)
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
unit|}         return
name|result
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|getContextualNamesReferences (Class<T> type, boolean optional, boolean includeDefaultScopedBeans)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|getContextualNamesReferences
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|boolean
name|optional
parameter_list|,
name|boolean
name|includeDefaultScopedBeans
parameter_list|)
block|{
name|BeanManager
name|beanManager
init|=
name|getBeanManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
name|beanManager
operator|.
name|getBeans
argument_list|(
name|type
argument_list|,
operator|new
name|AnyLiteral
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|beans
operator|==
literal|null
operator|||
name|beans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|optional
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find beans for Type="
operator|+
name|type
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|includeDefaultScopedBeans
condition|)
block|{
name|beans
operator|=
name|filterDefaultScopedBeans
argument_list|(
name|beans
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|(
name|beans
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
range|:
name|beans
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|bean
operator|.
name|getName
argument_list|()
argument_list|,
name|getContextualReference
argument_list|(
name|type
argument_list|,
name|beanManager
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Bean
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|bean
block|}
block|)
block|)
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
unit|}         return
name|result
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
DECL|method|filterDefaultScopedBeans (Set<Bean<?>> beans)
specifier|static
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|filterDefaultScopedBeans
parameter_list|(
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
parameter_list|)
block|{
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|beans
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beanIterator
init|=
name|beans
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Bean
argument_list|<
name|?
argument_list|>
name|currentBean
decl_stmt|;
while|while
condition|(
name|beanIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentBean
operator|=
name|beanIterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Dependent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|currentBean
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|currentBean
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**      * Internal helper method to resolve the right bean and resolve the contextual reference.      *      * @param type        the type of the bean in question      * @param beanManager current bean-manager      * @param beans       beans in question      * @param<T>         target type      * @return the contextual reference      */
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getContextualReference (Class<T> type, BeanManager beanManager, Set<Bean<?>> beans)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getContextualReference
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|BeanManager
name|beanManager
parameter_list|,
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
parameter_list|)
block|{
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|beanManager
operator|.
name|resolve
argument_list|(
name|beans
argument_list|)
decl_stmt|;
name|CreationalContext
argument_list|<
name|?
argument_list|>
name|creationalContext
init|=
name|beanManager
operator|.
name|createCreationalContext
argument_list|(
name|bean
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|beanManager
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|type
argument_list|,
name|creationalContext
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Internal method to resolve the BeanManager via the {@link BeanManagerProvider}      */
end_comment

begin_function
DECL|method|getBeanManager ()
specifier|private
specifier|static
name|BeanManager
name|getBeanManager
parameter_list|()
block|{
return|return
name|BeanManagerProvider
operator|.
name|getInstance
argument_list|()
operator|.
name|getBeanManager
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

