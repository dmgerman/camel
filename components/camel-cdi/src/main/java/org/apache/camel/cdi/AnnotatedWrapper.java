begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Annotated
import|;
end_import

begin_comment
comment|// This class is used as a work-around to OWB-1099
end_comment

begin_class
DECL|class|AnnotatedWrapper
specifier|final
class|class
name|AnnotatedWrapper
implements|implements
name|Annotated
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Annotated
name|delegate
decl_stmt|;
DECL|method|AnnotatedWrapper (Annotated delegate)
name|AnnotatedWrapper
parameter_list|(
name|Annotated
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBaseType ()
specifier|public
name|Type
name|getBaseType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getBaseType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTypeClosure ()
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypeClosure
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getTypeClosure
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAnnotation (Class<T> annotationType)
specifier|public
parameter_list|<
name|T
extends|extends
name|Annotation
parameter_list|>
name|T
name|getAnnotation
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|annotationType
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getAnnotation
argument_list|(
name|annotationType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAnnotations ()
specifier|public
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getAnnotations
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getAnnotations
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isAnnotationPresent (Class<? extends Annotation> annotationType)
specifier|public
name|boolean
name|isAnnotationPresent
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|isAnnotationPresent
argument_list|(
name|annotationType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|object
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AnnotatedWrapper
name|that
init|=
operator|(
name|AnnotatedWrapper
operator|)
name|object
decl_stmt|;
if|if
condition|(
operator|!
name|getBaseType
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getBaseType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getTypeClosure
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getTypeClosure
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getAnnotations
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getAnnotations
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|getBaseType
argument_list|()
operator|!=
literal|null
condition|?
name|getBaseType
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|getTypeClosure
argument_list|()
operator|!=
literal|null
condition|?
name|getTypeClosure
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|getAnnotations
argument_list|()
operator|!=
literal|null
condition|?
name|getAnnotations
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

