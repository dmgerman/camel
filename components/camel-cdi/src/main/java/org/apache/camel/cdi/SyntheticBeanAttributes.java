begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|Dependent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiSpiHelper
operator|.
name|isAnnotationType
import|;
end_import

begin_class
DECL|class|SyntheticBeanAttributes
class|class
name|SyntheticBeanAttributes
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|manager
specifier|private
specifier|final
name|BeanManager
name|manager
decl_stmt|;
DECL|field|annotated
specifier|private
specifier|final
name|SyntheticAnnotated
name|annotated
decl_stmt|;
DECL|method|SyntheticBeanAttributes (BeanManager manager, SyntheticAnnotated annotated)
name|SyntheticBeanAttributes
parameter_list|(
name|BeanManager
name|manager
parameter_list|,
name|SyntheticAnnotated
name|annotated
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|annotated
operator|=
name|annotated
expr_stmt|;
block|}
DECL|method|addQualifier (A qualifier)
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|void
name|addQualifier
parameter_list|(
name|A
name|qualifier
parameter_list|)
block|{
name|annotated
operator|.
name|addAnnotation
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
DECL|method|getScope ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|getScope
parameter_list|()
block|{
return|return
name|annotated
operator|.
name|getAnnotations
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Annotation
operator|::
name|annotationType
argument_list|)
operator|.
name|filter
argument_list|(
name|manager
operator|::
name|isScope
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|orElse
argument_list|(
name|Dependent
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getQualifiers ()
specifier|public
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getQualifiers
parameter_list|()
block|{
return|return
name|annotated
operator|.
name|getAnnotations
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|manager
operator|.
name|isQualifier
argument_list|(
name|a
operator|.
name|annotationType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|annotated
operator|.
name|getAnnotations
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|isAnnotationType
argument_list|(
name|Named
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Named
operator|.
name|class
operator|::
name|cast
argument_list|)
operator|.
name|map
argument_list|(
name|Named
operator|::
name|value
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|getStereotypes ()
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|getStereotypes
parameter_list|()
block|{
return|return
name|emptySet
argument_list|()
return|;
block|}
DECL|method|getTypes ()
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypes
parameter_list|()
block|{
return|return
name|annotated
operator|.
name|getTypeClosure
argument_list|()
return|;
block|}
DECL|method|isAlternative ()
specifier|public
name|boolean
name|isAlternative
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

