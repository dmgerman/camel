begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_comment
comment|/**  * To make looking up beans in CDI easier  */
end_comment

begin_class
DECL|class|CdiBeanManagerHelper
specifier|public
specifier|final
class|class
name|CdiBeanManagerHelper
block|{
comment|/**      * To lookup a bean by a type      */
DECL|method|lookupBeanByType (BeanManager beanManager, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|lookupBeanByType
parameter_list|(
name|BeanManager
name|beanManager
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
name|beanManager
operator|.
name|getBeans
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|beans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|beanManager
operator|.
name|resolve
argument_list|(
name|beans
argument_list|)
decl_stmt|;
name|CreationalContext
argument_list|<
name|?
argument_list|>
name|creationalContext
init|=
name|beanManager
operator|.
name|createCreationalContext
argument_list|(
name|bean
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|beanManager
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|type
argument_list|,
name|creationalContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * To lookup a bean by a name      */
DECL|method|lookupBeanByName (BeanManager beanManager, String name)
specifier|public
specifier|static
name|Object
name|lookupBeanByName
parameter_list|(
name|BeanManager
name|beanManager
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|lookupBeanByNameAndType
argument_list|(
name|beanManager
argument_list|,
name|name
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * To lookup a bean by name and type      */
DECL|method|lookupBeanByNameAndType (BeanManager beanManager, String name, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|lookupBeanByNameAndType
parameter_list|(
name|BeanManager
name|beanManager
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
name|beanManager
operator|.
name|getBeans
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|beans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|beanManager
operator|.
name|resolve
argument_list|(
name|beans
argument_list|)
decl_stmt|;
name|CreationalContext
argument_list|<
name|?
argument_list|>
name|creationalContext
init|=
name|beanManager
operator|.
name|createCreationalContext
argument_list|(
name|bean
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|beanManager
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|type
argument_list|,
name|creationalContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

