begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|CreationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|InjectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
operator|.
name|AbstractCamelFactoryBean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|BeanManagerHelper
operator|.
name|getReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
import|;
end_import

begin_class
DECL|class|XmlFactoryBeanInjectionTarget
specifier|final
class|class
name|XmlFactoryBeanInjectionTarget
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SyntheticInjectionTarget
argument_list|<
name|T
argument_list|>
block|{
DECL|method|XmlFactoryBeanInjectionTarget (BeanManager manager, AbstractCamelFactoryBean<T> factory, Bean<?> context)
name|XmlFactoryBeanInjectionTarget
parameter_list|(
name|BeanManager
name|manager
parameter_list|,
name|AbstractCamelFactoryBean
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|,
name|Bean
argument_list|<
name|?
argument_list|>
name|context
parameter_list|)
block|{
name|super
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|factory
operator|.
name|getCamelContextId
argument_list|()
argument_list|)
operator|&&
name|context
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|setCamelContext
argument_list|(
name|getReference
argument_list|(
name|manager
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
return|return
name|factory
operator|.
name|getObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|CreationException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|i
lambda|->
block|{             }
argument_list|,
name|i
lambda|->
block|{
try|try
block|{
name|factory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

