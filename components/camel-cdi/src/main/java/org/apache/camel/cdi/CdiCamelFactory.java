begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Default
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|InjectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Typed
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|UnsatisfiedResolutionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|util
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_class
DECL|class|CdiCamelFactory
specifier|final
class|class
name|CdiCamelFactory
block|{
annotation|@
name|Produces
DECL|method|typeConverter (InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension)
specifier|private
specifier|static
name|TypeConverter
name|typeConverter
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
annotation|@
name|Any
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
return|return
name|selectContext
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|)
operator|.
name|getTypeConverter
argument_list|()
return|;
block|}
annotation|@
name|Produces
annotation|@
name|Default
annotation|@
name|Uri
argument_list|(
literal|""
argument_list|)
comment|// Qualifiers are dynamically added in CdiCamelExtension
DECL|method|producerTemplate (InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension)
specifier|private
specifier|static
name|ProducerTemplate
name|producerTemplate
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
annotation|@
name|Any
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
name|Uri
name|uri
init|=
name|CdiSpiHelper
operator|.
name|getQualifierByType
argument_list|(
name|ip
argument_list|,
name|Uri
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
return|return
name|producerTemplateFromUri
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|,
name|uri
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultProducerTemplate
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|)
return|;
block|}
block|}
DECL|method|producerTemplateFromUri (InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension, Uri uri)
specifier|private
specifier|static
name|ProducerTemplate
name|producerTemplateFromUri
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
annotation|@
name|Any
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|,
name|Uri
name|uri
parameter_list|)
block|{
try|try
block|{
name|CamelContext
name|context
init|=
name|uri
operator|.
name|context
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|selectContext
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|)
else|:
name|selectContext
argument_list|(
name|uri
operator|.
name|context
argument_list|()
argument_list|,
name|instance
argument_list|)
decl_stmt|;
name|ProducerTemplate
name|producerTemplate
init|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|uri
operator|.
name|value
argument_list|()
argument_list|,
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|producerTemplate
operator|.
name|setDefaultEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|producerTemplate
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Error injecting producer template annotated with "
operator|+
name|uri
operator|+
literal|" into "
operator|+
name|ip
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
DECL|method|defaultProducerTemplate (InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension)
specifier|private
specifier|static
name|ProducerTemplate
name|defaultProducerTemplate
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
annotation|@
name|Any
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
try|try
block|{
name|CamelContext
name|context
init|=
name|selectContext
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|createProducerTemplate
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Error injecting producer template into "
operator|+
name|ip
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Produces
annotation|@
name|Typed
argument_list|(
name|MockEndpoint
operator|.
name|class
argument_list|)
comment|// Qualifiers are dynamically added in CdiCamelExtension
DECL|method|mockEndpointFromMember (InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension)
specifier|private
specifier|static
name|MockEndpoint
name|mockEndpointFromMember
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
annotation|@
name|Any
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
name|String
name|uri
init|=
literal|"mock:"
operator|+
name|ip
operator|.
name|getMember
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|selectContext
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|)
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Error injecting mock endpoint into "
operator|+
name|ip
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Uri
argument_list|(
literal|""
argument_list|)
annotation|@
name|Produces
annotation|@
name|Typed
argument_list|(
name|MockEndpoint
operator|.
name|class
argument_list|)
comment|// Qualifiers are dynamically added in CdiCamelExtension
DECL|method|mockEndpointFromUri (InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension)
specifier|private
specifier|static
name|MockEndpoint
name|mockEndpointFromUri
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
annotation|@
name|Any
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
name|Uri
name|uri
init|=
name|CdiSpiHelper
operator|.
name|getQualifierByType
argument_list|(
name|ip
argument_list|,
name|Uri
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|CamelContext
name|context
init|=
name|uri
operator|.
name|context
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|selectContext
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|)
else|:
name|selectContext
argument_list|(
name|uri
operator|.
name|context
argument_list|()
argument_list|,
name|instance
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|getEndpoint
argument_list|(
name|uri
operator|.
name|value
argument_list|()
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Error injecting mock endpoint annotated with "
operator|+
name|uri
operator|+
literal|" into "
operator|+
name|ip
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
comment|// Maintained for backward compatibility reason though this is redundant with @Uri
comment|// see https://issues.apache.org/jira/browse/CAMEL-5553?focusedCommentId=13445936&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13445936
annotation|@
name|Mock
annotation|@
name|Produces
annotation|@
name|Typed
argument_list|(
name|MockEndpoint
operator|.
name|class
argument_list|)
comment|// Qualifiers are dynamically added in CdiCamelExtension
DECL|method|createMockEndpoint (InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension)
specifier|private
specifier|static
name|MockEndpoint
name|createMockEndpoint
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
annotation|@
name|Any
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
name|Mock
name|mock
init|=
name|CdiSpiHelper
operator|.
name|getQualifierByType
argument_list|(
name|ip
argument_list|,
name|Mock
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|CamelContext
name|context
init|=
name|mock
operator|.
name|context
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|selectContext
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|)
else|:
name|selectContext
argument_list|(
name|mock
operator|.
name|context
argument_list|()
argument_list|,
name|instance
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|getEndpoint
argument_list|(
name|mock
operator|.
name|value
argument_list|()
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Error injecting mock endpoint annotated with "
operator|+
name|mock
operator|+
literal|" into "
operator|+
name|ip
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Uri
argument_list|(
literal|""
argument_list|)
annotation|@
name|Produces
comment|// Qualifiers are dynamically added in CdiCamelExtension
DECL|method|endpoint (InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension)
specifier|private
specifier|static
name|Endpoint
name|endpoint
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
annotation|@
name|Any
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
name|Uri
name|uri
init|=
name|CdiSpiHelper
operator|.
name|getQualifierByType
argument_list|(
name|ip
argument_list|,
name|Uri
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|CamelContext
name|context
init|=
name|uri
operator|.
name|context
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|selectContext
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|)
else|:
name|selectContext
argument_list|(
name|uri
operator|.
name|context
argument_list|()
argument_list|,
name|instance
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|getEndpoint
argument_list|(
name|uri
operator|.
name|value
argument_list|()
argument_list|,
name|Endpoint
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Error injecting endpoint annotated with "
operator|+
name|uri
operator|+
literal|" into "
operator|+
name|ip
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Produces
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Qualifiers are dynamically added in CdiCamelExtension
DECL|method|cdiEventEndpoint (InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension, @Any Event<Object> event)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|CdiEventEndpoint
argument_list|<
name|T
argument_list|>
name|cdiEventEndpoint
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
annotation|@
name|Any
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|,
annotation|@
name|Any
name|Event
argument_list|<
name|Object
argument_list|>
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|selectContext
argument_list|(
name|ip
argument_list|,
name|instance
argument_list|,
name|extension
argument_list|)
decl_stmt|;
name|Type
name|type
init|=
name|Object
operator|.
name|class
decl_stmt|;
if|if
condition|(
name|ip
operator|.
name|getType
argument_list|()
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|type
operator|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|ip
operator|.
name|getType
argument_list|()
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
name|String
name|uri
init|=
name|eventEndpointUri
argument_list|(
name|type
argument_list|,
name|ip
operator|.
name|getQualifiers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasEndpoint
argument_list|(
name|uri
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// FIXME: to be replaced once event firing with dynamic parameterized type is properly supported (see https://issues.jboss.org/browse/CDI-516)
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|literal
init|=
operator|new
name|TypeLiteral
argument_list|<
name|T
argument_list|>
argument_list|()
block|{             }
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|TypeLiteral
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|class
argument_list|)
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|literal
argument_list|,
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|context
operator|.
name|addEndpoint
argument_list|(
name|uri
argument_list|,
operator|new
name|CdiEventEndpoint
argument_list|<>
argument_list|(
name|event
operator|.
name|select
argument_list|(
name|literal
argument_list|,
name|ip
operator|.
name|getQualifiers
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Annotation
index|[
name|ip
operator|.
name|getQualifiers
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
name|uri
argument_list|,
name|context
argument_list|,
operator|(
name|ForwardingObserverMethod
argument_list|<
name|T
argument_list|>
operator|)
name|extension
operator|.
name|getObserverMethod
argument_list|(
name|ip
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|context
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|,
name|CdiEventEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|selectContext (String name, Instance<T> instance)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|T
name|selectContext
parameter_list|(
name|String
name|name
parameter_list|,
name|Instance
argument_list|<
name|T
argument_list|>
name|instance
parameter_list|)
block|{
for|for
control|(
name|T
name|context
range|:
name|instance
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|context
return|;
block|}
block|}
throw|throw
operator|new
name|UnsatisfiedResolutionException
argument_list|(
literal|"No Camel context with name ["
operator|+
name|name
operator|+
literal|"] is deployed!"
argument_list|)
throw|;
block|}
DECL|method|selectContext (InjectionPoint ip, Instance<T> instance, CdiCamelExtension extension)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|T
name|selectContext
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|,
name|Instance
argument_list|<
name|T
argument_list|>
name|instance
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
name|Collection
argument_list|<
name|Annotation
argument_list|>
name|qualifiers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ip
operator|.
name|getQualifiers
argument_list|()
argument_list|)
decl_stmt|;
name|qualifiers
operator|.
name|retainAll
argument_list|(
name|extension
operator|.
name|getContextQualifiers
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|instance
operator|.
name|select
argument_list|(
name|DefaultLiteral
operator|.
name|INSTANCE
argument_list|)
operator|.
name|isUnsatisfied
argument_list|()
condition|)
block|{
return|return
name|instance
operator|.
name|select
argument_list|(
name|DefaultLiteral
operator|.
name|INSTANCE
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
return|return
name|instance
operator|.
name|select
argument_list|(
name|qualifiers
operator|.
name|toArray
argument_list|(
operator|new
name|Annotation
index|[
name|qualifiers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|eventEndpointUri (Type type, Set<Annotation> qualifiers)
specifier|private
specifier|static
name|String
name|eventEndpointUri
parameter_list|(
name|Type
name|type
parameter_list|,
name|Set
argument_list|<
name|Annotation
argument_list|>
name|qualifiers
parameter_list|)
block|{
name|String
name|uri
init|=
literal|"cdi-event://"
operator|+
name|authorityFromType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|StringBuilder
name|parameters
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Annotation
argument_list|>
name|it
init|=
name|qualifiers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|parameters
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|annotationType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|parameters
operator|.
name|append
argument_list|(
literal|"%2C"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parameters
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|uri
operator|+=
literal|"?qualifiers="
operator|+
name|parameters
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
DECL|method|authorityFromType (Type type)
specifier|private
specifier|static
name|String
name|authorityFromType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
return|return
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|authorityFromType
argument_list|(
name|pt
operator|.
name|getRawType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Type
argument_list|>
name|it
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"%3C"
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|authorityFromType
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"%2C"
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"%3E"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|arrayType
init|=
operator|(
name|GenericArrayType
operator|)
name|type
decl_stmt|;
return|return
name|authorityFromType
argument_list|(
name|arrayType
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
operator|+
literal|"%5B%5D"
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create URI authority for event type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

