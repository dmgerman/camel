begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|security
operator|.
name|AccessController
operator|.
name|doPrivileged
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|collectingAndThen
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Annotated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedConstructor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|util
operator|.
name|Nonbinding
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|AnyLiteral
operator|.
name|ANY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|DefaultLiteral
operator|.
name|DEFAULT
import|;
end_import

begin_class
annotation|@
name|Vetoed
DECL|class|CdiSpiHelper
specifier|final
class|class
name|CdiSpiHelper
block|{
DECL|method|CdiSpiHelper ()
specifier|private
name|CdiSpiHelper
parameter_list|()
block|{     }
DECL|method|hasType (Type type)
specifier|static
name|Predicate
argument_list|<
name|Bean
argument_list|>
name|hasType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|bean
lambda|->
name|bean
operator|.
name|getTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|isAnnotationType (Class<? extends Annotation> clazz)
specifier|static
name|Predicate
argument_list|<
name|Annotation
argument_list|>
name|isAnnotationType
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|clazz
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|annotation
lambda|->
name|clazz
operator|.
name|equals
argument_list|(
name|annotation
operator|.
name|annotationType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getRawType (Type type)
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getRawType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|getRawType
argument_list|(
name|ParameterizedType
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
name|getBound
argument_list|(
name|TypeVariable
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
operator|.
name|getBounds
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
return|return
name|getBound
argument_list|(
name|WildcardType
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
operator|.
name|getUpperBounds
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
init|=
name|getRawType
argument_list|(
name|GenericArrayType
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawType
operator|!=
literal|null
condition|)
block|{
return|return
name|Array
operator|.
name|newInstance
argument_list|(
name|rawType
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to retrieve raw type for ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|method|getBound (Type[] bounds)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getBound
parameter_list|(
name|Type
index|[]
name|bounds
parameter_list|)
block|{
if|if
condition|(
name|bounds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
else|else
block|{
return|return
name|getRawType
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|SafeVarargs
DECL|method|hasAnnotation (AnnotatedType<?> type, Class<? extends Annotation>... annotations)
specifier|static
name|boolean
name|hasAnnotation
parameter_list|(
name|AnnotatedType
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
modifier|...
name|annotations
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|annotations
argument_list|)
operator|.
name|filter
argument_list|(
name|annotation
lambda|->
name|hasAnnotation
argument_list|(
name|type
argument_list|,
name|annotation
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|isPresent
argument_list|()
return|;
block|}
DECL|method|hasAnnotation (AnnotatedType<?> type, Class<? extends Annotation> annotation)
specifier|static
name|boolean
name|hasAnnotation
parameter_list|(
name|AnnotatedType
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isAnnotationPresent
argument_list|(
name|annotation
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|AnnotatedMethod
argument_list|<
name|?
argument_list|>
name|method
range|:
name|type
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|annotation
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|AnnotatedConstructor
argument_list|<
name|?
argument_list|>
name|constructor
range|:
name|type
operator|.
name|getConstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|constructor
operator|.
name|isAnnotationPresent
argument_list|(
name|annotation
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|AnnotatedField
argument_list|<
name|?
argument_list|>
name|field
range|:
name|type
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|annotation
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getQualifiers (Annotated annotated, BeanManager manager)
specifier|static
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getQualifiers
parameter_list|(
name|Annotated
name|annotated
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
return|return
name|annotated
operator|.
name|getAnnotations
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|annotation
lambda|->
name|manager
operator|.
name|isQualifier
argument_list|(
name|annotation
operator|.
name|annotationType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collectingAndThen
argument_list|(
name|toSet
argument_list|()
argument_list|,
name|qualifiers
lambda|->
block|{
argument_list|if
operator|(
name|qualifiers
operator|.
name|isEmpty
argument_list|()
operator|)
block|{
name|qualifiers
operator|.
name|add
argument_list|(
name|DEFAULT
argument_list|)
block|;                     }
name|qualifiers
operator|.
name|add
argument_list|(
name|ANY
argument_list|)
argument_list|;                     return
name|qualifiers
argument_list|;
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Generates a unique signature for {@link Bean}.      */
end_comment

begin_function
DECL|method|createBeanId (Bean<?> bean)
unit|static
name|String
name|createBeanId
parameter_list|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|bean
operator|.
name|getName
argument_list|()
argument_list|,
name|bean
operator|.
name|getScope
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|createAnnotationCollectionId
argument_list|(
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|)
argument_list|,
name|createTypeCollectionId
argument_list|(
name|bean
operator|.
name|getTypes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Generates a unique signature of a collection of types.      */
end_comment

begin_function
DECL|method|createTypeCollectionId (Collection<Type> types)
specifier|private
specifier|static
name|String
name|createTypeCollectionId
parameter_list|(
name|Collection
argument_list|<
name|Type
argument_list|>
name|types
parameter_list|)
block|{
return|return
name|types
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|comparing
argument_list|(
name|CdiSpiHelper
operator|::
name|createTypeId
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|CdiSpiHelper
operator|::
name|createTypeId
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|","
argument_list|,
literal|"["
argument_list|,
literal|"]"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Generates a unique signature for a {@link Type}.      */
end_comment

begin_function
DECL|method|createTypeId (Type type)
specifier|private
specifier|static
name|String
name|createTypeId
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|createTypeId
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getRawType
argument_list|()
argument_list|)
operator|+
name|Stream
operator|.
name|of
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|CdiSpiHelper
operator|::
name|createTypeId
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|","
argument_list|,
literal|"<"
argument_list|,
literal|">"
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
name|TypeVariable
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|createTypeId
argument_list|(
name|GenericArrayType
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to create type id for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
end_function

begin_comment
comment|/**      * Generates a unique signature for a collection of annotations.      */
end_comment

begin_function
DECL|method|createAnnotationCollectionId (Collection<Annotation> annotations)
specifier|private
specifier|static
name|String
name|createAnnotationCollectionId
parameter_list|(
name|Collection
argument_list|<
name|Annotation
argument_list|>
name|annotations
parameter_list|)
block|{
if|if
condition|(
name|annotations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|annotations
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
parameter_list|(
name|a1
parameter_list|,
name|a2
parameter_list|)
lambda|->
name|a1
operator|.
name|annotationType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|annotationType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|CdiSpiHelper
operator|::
name|createAnnotationId
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|","
argument_list|,
literal|"["
argument_list|,
literal|"]"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Generates a unique signature for an {@link Annotation}.      */
end_comment

begin_function
DECL|method|createAnnotationId (Annotation annotation)
specifier|static
name|String
name|createAnnotationId
parameter_list|(
name|Annotation
name|annotation
parameter_list|)
block|{
name|Method
index|[]
name|methods
init|=
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|Method
index|[]
argument_list|>
call|)
argument_list|()
operator|->
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|of
argument_list|(
name|methods
argument_list|)
operator|.
name|filter
argument_list|(
name|method
lambda|->
operator|!
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|Nonbinding
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|sorted
argument_list|(
name|comparing
argument_list|(
name|Method
operator|::
name|getName
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
parameter_list|()
lambda|->
operator|new
name|StringJoiner
argument_list|(
literal|","
argument_list|,
literal|"@"
operator|+
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"("
argument_list|,
literal|")"
argument_list|)
argument_list|,
parameter_list|(
name|joiner
parameter_list|,
name|method
parameter_list|)
lambda|->
block|{
lambda|try
block|{
name|joiner
operator|.
name|add
argument_list|(
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|method
operator|.
name|invoke
argument_list|(
name|annotation
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|IllegalArgumentException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while accessing member ["
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
operator|+
literal|" of annotation ["
operator|+
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
end_function

begin_operator
operator|,
end_operator

begin_expr_stmt
name|StringJoiner
operator|::
name|merge
end_expr_stmt

begin_expr_stmt
unit|)
operator|.
name|toString
argument_list|()
expr_stmt|;
end_expr_stmt

unit|} }
end_unit

