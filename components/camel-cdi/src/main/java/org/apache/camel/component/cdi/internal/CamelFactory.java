begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cdi.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cdi
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Annotated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|CamelPostProcessorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|deltaspike
operator|.
name|core
operator|.
name|api
operator|.
name|provider
operator|.
name|BeanProvider
import|;
end_import

begin_comment
comment|/**  * produces {@link Endpoint} and {@link org.apache.camel.ProducerTemplate} instances for injection into beans  */
end_comment

begin_class
DECL|class|CamelFactory
specifier|public
class|class
name|CamelFactory
block|{
annotation|@
name|Inject
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
annotation|@
name|Produces
annotation|@
name|Mock
DECL|method|createMockEndpoint (InjectionPoint point)
specifier|public
name|MockEndpoint
name|createMockEndpoint
parameter_list|(
name|InjectionPoint
name|point
parameter_list|)
block|{
name|String
name|uri
init|=
literal|""
decl_stmt|;
name|String
name|ref
init|=
literal|""
decl_stmt|;
name|EndpointInject
name|annotation
init|=
name|point
operator|.
name|getAnnotated
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
name|uri
operator|=
name|annotation
operator|.
name|uri
argument_list|()
expr_stmt|;
name|ref
operator|=
name|annotation
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|ref
operator|=
name|point
operator|.
name|getMember
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|uri
operator|=
literal|"mock:"
operator|+
name|ref
expr_stmt|;
block|}
return|return
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Produces
DECL|method|createEndpoint (InjectionPoint point, BeanManager beanManager)
specifier|public
name|Endpoint
name|createEndpoint
parameter_list|(
name|InjectionPoint
name|point
parameter_list|,
name|BeanManager
name|beanManager
parameter_list|)
block|{
name|Annotated
name|annotated
init|=
name|point
operator|.
name|getAnnotated
argument_list|()
decl_stmt|;
name|Uri
name|uri
init|=
name|annotated
operator|.
name|getAnnotation
argument_list|(
name|Uri
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
return|return
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|camelContext
argument_list|,
name|uri
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
name|EndpointInject
name|annotation
init|=
name|annotated
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|annotation
argument_list|,
literal|"Must be annotated with @EndpointInject"
argument_list|)
expr_stmt|;
return|return
name|getEndpoint
argument_list|(
name|point
argument_list|,
name|annotation
operator|.
name|uri
argument_list|()
argument_list|,
name|annotation
operator|.
name|ref
argument_list|()
argument_list|,
name|annotation
operator|.
name|property
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Produces
DECL|method|createProducerTemplate (InjectionPoint point)
specifier|public
name|ProducerTemplate
name|createProducerTemplate
parameter_list|(
name|InjectionPoint
name|point
parameter_list|)
block|{
name|ProducerTemplate
name|producerTemplate
init|=
name|camelContext
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|Annotated
name|annotated
init|=
name|point
operator|.
name|getAnnotated
argument_list|()
decl_stmt|;
name|Uri
name|uri
init|=
name|annotated
operator|.
name|getAnnotation
argument_list|(
name|Uri
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|endpoint
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|=
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|camelContext
argument_list|,
name|uri
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Produce
name|annotation
init|=
name|annotated
operator|.
name|getAnnotation
argument_list|(
name|Produce
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|=
name|getEndpoint
argument_list|(
name|point
argument_list|,
name|annotation
operator|.
name|uri
argument_list|()
argument_list|,
name|annotation
operator|.
name|ref
argument_list|()
argument_list|,
name|annotation
operator|.
name|property
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|producerTemplate
operator|.
name|setDefaultEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|producerTemplate
return|;
block|}
DECL|method|getEndpoint (InjectionPoint point, String uri, String ref, String property)
specifier|protected
name|Endpoint
name|getEndpoint
parameter_list|(
name|InjectionPoint
name|point
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|property
parameter_list|)
block|{
name|String
name|injectName
init|=
name|getInjectionPointName
argument_list|(
name|point
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|property
argument_list|)
condition|)
block|{
return|return
name|resolveEndpoint
argument_list|(
name|uri
argument_list|,
name|ref
argument_list|,
name|injectName
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|/*             TODO this code won't work in CDI as we've not yet created the bean being injected yet             so cannot evaluate the property yet!              CamelPostProcessorHelper helper = new CamelPostProcessorHelper(camelContext);             Bean<?> bean = point.getBean();             Class<?> beanClass = bean.getBeanClass();             Object instance = BeanProvider.getContextualReference((Class)beanClass, bean);             return helper.getEndpointInjection(instance, uri, ref, property, injectName, true); */
block|}
block|}
DECL|method|resolveEndpoint (String uri, String ref, String injectionName)
specifier|private
name|Endpoint
name|resolveEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|injectionName
parameter_list|)
block|{
return|return
name|CamelContextHelper
operator|.
name|getEndpointInjection
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|,
name|ref
argument_list|,
name|injectionName
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getInjectionPointName (InjectionPoint point)
specifier|private
name|String
name|getInjectionPointName
parameter_list|(
name|InjectionPoint
name|point
parameter_list|)
block|{
comment|// TODO is there a better name?
return|return
name|point
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

