begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedConstructor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedType
import|;
end_import

begin_class
DECL|class|AnnotatedTypeDelegate
specifier|final
class|class
name|AnnotatedTypeDelegate
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AnnotatedDelegate
implements|implements
name|AnnotatedType
argument_list|<
name|T
argument_list|>
block|{
DECL|field|methods
specifier|private
specifier|final
name|Set
argument_list|<
name|AnnotatedMethod
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|methods
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|AnnotatedType
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
DECL|method|AnnotatedTypeDelegate (AnnotatedType<T> delegate, Set<AnnotatedMethod<? super T>> methods)
name|AnnotatedTypeDelegate
parameter_list|(
name|AnnotatedType
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|,
name|Set
argument_list|<
name|AnnotatedMethod
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|methods
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|methods
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|delegate
operator|.
name|getMethods
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|methods
operator|.
name|removeAll
argument_list|(
name|methods
argument_list|)
expr_stmt|;
name|this
operator|.
name|methods
operator|.
name|addAll
argument_list|(
name|methods
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConstructors ()
specifier|public
name|Set
argument_list|<
name|AnnotatedConstructor
argument_list|<
name|T
argument_list|>
argument_list|>
name|getConstructors
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getConstructors
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFields ()
specifier|public
name|Set
argument_list|<
name|AnnotatedField
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFields
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getJavaClass ()
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|getJavaClass
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getJavaClass
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMethods ()
specifier|public
name|Set
argument_list|<
name|AnnotatedMethod
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|getMethods
parameter_list|()
block|{
return|return
name|methods
return|;
block|}
block|}
end_class

end_unit

