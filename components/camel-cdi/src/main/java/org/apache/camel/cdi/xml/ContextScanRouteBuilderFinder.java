begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|util
operator|.
name|AnnotationLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A helper class which will find all {@link org.apache.camel.builder.RouteBuilder} beans  * in the {@link BeanManager}.  */
end_comment

begin_class
DECL|class|ContextScanRouteBuilderFinder
specifier|final
class|class
name|ContextScanRouteBuilderFinder
block|{
DECL|field|ANY
specifier|private
specifier|static
specifier|final
name|AnnotationLiteral
argument_list|<
name|Any
argument_list|>
name|ANY
init|=
operator|new
name|AnnotationLiteral
argument_list|<
name|Any
argument_list|>
argument_list|()
block|{     }
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContextScanRouteBuilderFinder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|manager
specifier|private
specifier|final
name|BeanManager
name|manager
decl_stmt|;
DECL|field|filter
specifier|private
specifier|final
name|PackageScanFilter
name|filter
decl_stmt|;
DECL|field|includeNonSingletons
specifier|private
specifier|final
name|boolean
name|includeNonSingletons
decl_stmt|;
DECL|method|ContextScanRouteBuilderFinder (BeanManager manager, PackageScanFilter filter, boolean includeNonSingletons)
name|ContextScanRouteBuilderFinder
parameter_list|(
name|BeanManager
name|manager
parameter_list|,
name|PackageScanFilter
name|filter
parameter_list|,
name|boolean
name|includeNonSingletons
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|includeNonSingletons
operator|=
name|includeNonSingletons
expr_stmt|;
block|}
comment|/**      * Appends all the {@link org.apache.camel.builder.RouteBuilder} bean instances that can be found in the manager.      */
DECL|method|appendBuilders (List<RoutesBuilder> list)
name|void
name|appendBuilders
parameter_list|(
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|list
parameter_list|)
block|{
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
range|:
name|manager
operator|.
name|getBeans
argument_list|(
name|RoutesBuilder
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
control|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Found RouteBuilder bean {}"
argument_list|,
name|bean
argument_list|)
expr_stmt|;
comment|// certain beans should be ignored
if|if
condition|(
name|shouldIgnoreBean
argument_list|(
name|bean
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Ignoring RouteBuilder {}"
argument_list|,
name|bean
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|isFilteredClass
argument_list|(
name|bean
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Ignoring filtered RouteBuilder {}"
argument_list|,
name|bean
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Adding instantiated RouteBuilder {}"
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|Object
name|instance
init|=
name|manager
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|RoutesBuilder
operator|.
name|class
argument_list|,
name|manager
operator|.
name|createCreationalContext
argument_list|(
name|bean
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|(
name|RoutesBuilder
operator|)
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shouldIgnoreBean (Bean<?> bean)
specifier|private
name|boolean
name|shouldIgnoreBean
parameter_list|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
parameter_list|)
block|{
return|return
operator|!
name|includeNonSingletons
operator|&&
operator|!
name|ApplicationScoped
operator|.
name|class
operator|.
name|equals
argument_list|(
name|bean
operator|.
name|getScope
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isFilteredClass (Bean<?> bean)
specifier|private
name|boolean
name|isFilteredClass
parameter_list|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
parameter_list|)
block|{
return|return
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|matches
argument_list|(
name|bean
operator|.
name|getBeanClass
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

