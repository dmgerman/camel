begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cdi.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cdi
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AfterBeanDiscovery
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AfterDeploymentValidation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeforeShutdown
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessAnnotatedType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cdi
operator|.
name|CdiCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|CamelPostProcessorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|deltaspike
operator|.
name|core
operator|.
name|api
operator|.
name|provider
operator|.
name|BeanProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|deltaspike
operator|.
name|core
operator|.
name|util
operator|.
name|metadata
operator|.
name|builder
operator|.
name|AnnotatedTypeBuilder
import|;
end_import

begin_comment
comment|/**  * Set of camel specific hooks for CDI.  */
end_comment

begin_class
DECL|class|CamelExtension
specifier|public
class|class
name|CamelExtension
implements|implements
name|Extension
block|{
comment|/**      * Context instance.      */
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|beanAdapters
specifier|private
name|Map
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|,
name|BeanAdapter
argument_list|>
name|beanAdapters
init|=
operator|new
name|HashMap
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|,
name|BeanAdapter
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Process camel context aware bean definitions.      *      * @param process Annotated type.      * @throws Exception In case of exceptions.      */
DECL|method|contextAwareness (@bserves ProcessAnnotatedType<CamelContextAware> process)
specifier|protected
name|void
name|contextAwareness
parameter_list|(
annotation|@
name|Observes
name|ProcessAnnotatedType
argument_list|<
name|CamelContextAware
argument_list|>
name|process
parameter_list|)
throws|throws
name|Exception
block|{
name|AnnotatedType
argument_list|<
name|CamelContextAware
argument_list|>
name|annotatedType
init|=
name|process
operator|.
name|getAnnotatedType
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|CamelContextAware
argument_list|>
name|javaClass
init|=
name|annotatedType
operator|.
name|getJavaClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|CamelContextAware
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|javaClass
argument_list|)
condition|)
block|{
name|Method
name|method
init|=
name|javaClass
operator|.
name|getMethod
argument_list|(
literal|"setCamelContext"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|AnnotatedTypeBuilder
argument_list|<
name|CamelContextAware
argument_list|>
name|builder
init|=
operator|new
name|AnnotatedTypeBuilder
argument_list|<
name|CamelContextAware
argument_list|>
argument_list|()
operator|.
name|readFromType
argument_list|(
name|javaClass
argument_list|)
operator|.
name|addToMethod
argument_list|(
name|method
argument_list|,
operator|new
name|InjectLiteral
argument_list|()
argument_list|)
decl_stmt|;
name|process
operator|.
name|setAnnotatedType
argument_list|(
name|builder
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Disable creation of default CamelContext bean and rely on context created      * and managed by extension.      *      * @param process Annotated type.      */
DECL|method|disableDefaultContext (@bserves ProcessAnnotatedType<CamelContext> process)
specifier|protected
name|void
name|disableDefaultContext
parameter_list|(
annotation|@
name|Observes
name|ProcessAnnotatedType
argument_list|<
name|CamelContext
argument_list|>
name|process
parameter_list|)
block|{
name|process
operator|.
name|veto
argument_list|()
expr_stmt|;
block|}
comment|/**      * Registers managed camel bean.      *      * @param abd     After bean discovery event.      * @param manager Bean manager.      */
DECL|method|registerManagedCamelContext (@bserves AfterBeanDiscovery abd, BeanManager manager)
specifier|protected
name|void
name|registerManagedCamelContext
parameter_list|(
annotation|@
name|Observes
name|AfterBeanDiscovery
name|abd
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|abd
operator|.
name|addBean
argument_list|(
operator|new
name|CamelContextBean
argument_list|(
name|manager
operator|.
name|createInjectionTarget
argument_list|(
name|manager
operator|.
name|createAnnotatedType
argument_list|(
name|CdiCamelContext
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Start up camel context.      *      * @param adv After deployment validation event.      * @throws Exception In case of failures.      */
DECL|method|validate (@bserves AfterDeploymentValidation adv)
specifier|protected
name|void
name|validate
parameter_list|(
annotation|@
name|Observes
name|AfterDeploymentValidation
name|adv
parameter_list|)
throws|throws
name|Exception
block|{
name|getCamelContext
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Shutdown camel context.      *      * @param bsd Shutdown event.      * @throws Exception In case of failures.      */
DECL|method|shutdown (@bserves BeforeShutdown bsd)
specifier|protected
name|void
name|shutdown
parameter_list|(
annotation|@
name|Observes
name|BeforeShutdown
name|bsd
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|detectConsumeBeans (@bserves ProcessBean<?> event)
specifier|public
name|void
name|detectConsumeBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessBean
argument_list|<
name|?
argument_list|>
name|event
parameter_list|)
block|{
specifier|final
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|event
operator|.
name|getBean
argument_list|()
decl_stmt|;
name|ReflectionHelper
operator|.
name|doWithMethods
argument_list|(
name|bean
operator|.
name|getBeanClass
argument_list|()
argument_list|,
operator|new
name|ReflectionHelper
operator|.
name|MethodCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWith
parameter_list|(
name|Method
name|method
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|Consume
name|consume
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Consume
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|consume
operator|!=
literal|null
condition|)
block|{
name|BeanAdapter
name|beanAdapter
init|=
name|getBeanAdapter
argument_list|(
name|bean
argument_list|)
decl_stmt|;
name|beanAdapter
operator|.
name|addConsumeMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
name|Produce
name|produce
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Produce
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|produce
operator|!=
literal|null
condition|)
block|{
name|BeanAdapter
name|beanAdapter
init|=
name|getBeanAdapter
argument_list|(
name|bean
argument_list|)
decl_stmt|;
name|beanAdapter
operator|.
name|addProduceMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|ReflectionHelper
operator|.
name|doWithFields
argument_list|(
name|bean
operator|.
name|getBeanClass
argument_list|()
argument_list|,
operator|new
name|ReflectionHelper
operator|.
name|FieldCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWith
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|Produce
name|produce
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Produce
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|produce
operator|!=
literal|null
operator|&&
operator|!
name|injectAnnotatedField
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|BeanAdapter
name|beanAdapter
init|=
name|getBeanAdapter
argument_list|(
name|bean
argument_list|)
decl_stmt|;
name|beanAdapter
operator|.
name|addProduceField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns true if this field is annotated with @Inject      */
DECL|method|injectAnnotatedField (Field field)
specifier|protected
specifier|static
name|boolean
name|injectAnnotatedField
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
return|return
name|field
operator|.
name|getAnnotation
argument_list|(
name|Inject
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|initializeBeans (@bserves AfterDeploymentValidation event, BeanManager beanManager)
specifier|public
name|void
name|initializeBeans
parameter_list|(
annotation|@
name|Observes
name|AfterDeploymentValidation
name|event
parameter_list|,
name|BeanManager
name|beanManager
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|DefaultCamelBeanPostProcessor
name|postProcessor
init|=
operator|new
name|DefaultCamelBeanPostProcessor
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BeanAdapter
argument_list|>
name|adapters
init|=
name|beanAdapters
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|BeanAdapter
name|adapter
range|:
name|adapters
control|)
block|{
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|adapter
operator|.
name|getBean
argument_list|()
decl_stmt|;
name|CreationalContext
argument_list|<
name|?
argument_list|>
name|creationalContext
init|=
name|beanManager
operator|.
name|createCreationalContext
argument_list|(
name|bean
argument_list|)
decl_stmt|;
name|Object
name|reference
init|=
name|beanManager
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|creationalContext
argument_list|)
decl_stmt|;
name|String
name|beanName
init|=
name|bean
operator|.
name|getName
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|initialiseBean
argument_list|(
name|postProcessor
argument_list|,
name|reference
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBeanAdapter (Bean<?> bean)
specifier|protected
name|BeanAdapter
name|getBeanAdapter
parameter_list|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
parameter_list|)
block|{
name|BeanAdapter
name|beanAdapter
init|=
name|beanAdapters
operator|.
name|get
argument_list|(
name|bean
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanAdapter
operator|==
literal|null
condition|)
block|{
name|beanAdapter
operator|=
operator|new
name|BeanAdapter
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|beanAdapters
operator|.
name|put
argument_list|(
name|bean
argument_list|,
name|beanAdapter
argument_list|)
expr_stmt|;
block|}
return|return
name|beanAdapter
return|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
name|camelContext
operator|=
name|BeanProvider
operator|.
name|getContextualReference
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|camelContext
return|;
block|}
block|}
end_class

end_unit

