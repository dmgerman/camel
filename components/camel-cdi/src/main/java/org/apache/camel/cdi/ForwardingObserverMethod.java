begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Reception
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|TransactionPhase
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ObserverMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_class
DECL|class|ForwardingObserverMethod
specifier|final
class|class
name|ForwardingObserverMethod
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ObserverMethod
argument_list|<
name|T
argument_list|>
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|CdiEventEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
decl_stmt|;
DECL|method|ForwardingObserverMethod (CdiEventEndpoint<T> endpoint)
name|ForwardingObserverMethod
parameter_list|(
name|CdiEventEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBeanClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getBeanClass
parameter_list|()
block|{
return|return
name|CamelContext
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|getObservedType ()
specifier|public
name|Type
name|getObservedType
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getObservedQualifiers ()
specifier|public
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getObservedQualifiers
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getQualifiers
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getReception ()
specifier|public
name|Reception
name|getReception
parameter_list|()
block|{
return|return
name|Reception
operator|.
name|ALWAYS
return|;
block|}
annotation|@
name|Override
DECL|method|getTransactionPhase ()
specifier|public
name|TransactionPhase
name|getTransactionPhase
parameter_list|()
block|{
return|return
name|TransactionPhase
operator|.
name|IN_PROGRESS
return|;
block|}
annotation|@
name|Override
DECL|method|notify (T event)
specifier|public
name|void
name|notify
parameter_list|(
name|T
name|event
parameter_list|)
block|{
name|endpoint
operator|.
name|notify
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

