begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * CdiBeanRegistry used by Camel to perform lookup into the CDI {@link javax.enterprise.inject.spi.BeanManager}.  */
end_comment

begin_class
DECL|class|CdiBeanRegistry
specifier|public
class|class
name|CdiBeanRegistry
implements|implements
name|Registry
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CdiBeanRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|beanManager
specifier|private
specifier|final
name|BeanManager
name|beanManager
decl_stmt|;
DECL|method|CdiBeanRegistry (BeanManager beanManager)
specifier|public
name|CdiBeanRegistry
parameter_list|(
name|BeanManager
name|beanManager
parameter_list|)
block|{
name|this
operator|.
name|beanManager
operator|=
name|beanManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupByName (final String name)
specifier|public
name|Object
name|lookupByName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking up bean with name {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|CdiBeanManagerHelper
operator|.
name|lookupBeanByName
argument_list|(
name|beanManager
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupByNameAndType (final String name, final Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|lookupByNameAndType
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking up bean with name {} of type {}"
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|CdiBeanManagerHelper
operator|.
name|lookupBeanByNameAndType
argument_list|(
name|beanManager
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findByTypeWithName (final Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|findByTypeWithName
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Lookups based of type {}"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|beans
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|definitions
init|=
name|beanManager
operator|.
name|getBeans
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|definitions
operator|==
literal|null
condition|)
block|{
return|return
name|beans
return|;
block|}
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
range|:
name|definitions
control|)
block|{
if|if
condition|(
name|bean
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|T
name|obj
init|=
name|CdiBeanManagerHelper
operator|.
name|lookupBeanByNameAndType
argument_list|(
name|beanManager
argument_list|,
name|bean
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|beans
operator|.
name|put
argument_list|(
name|bean
operator|.
name|getName
argument_list|()
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|beans
return|;
block|}
annotation|@
name|Override
DECL|method|findByType (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|findByType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Lookups based of type {}"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|beans
init|=
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|definitions
init|=
name|beanManager
operator|.
name|getBeans
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|definitions
operator|==
literal|null
condition|)
block|{
return|return
name|beans
return|;
block|}
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
range|:
name|definitions
control|)
block|{
if|if
condition|(
name|bean
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|T
name|obj
init|=
name|CdiBeanManagerHelper
operator|.
name|lookupBeanByNameAndType
argument_list|(
name|beanManager
argument_list|,
name|bean
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|beans
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|beans
return|;
block|}
annotation|@
name|Override
DECL|method|lookup (String name)
specifier|public
name|Object
name|lookup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|lookupByName
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookup (String name, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|lookup
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|lookupByNameAndType
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupByType (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|lookupByType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|findByTypeWithName
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CdiRegistry["
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

