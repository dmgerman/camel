begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * CdiBeanRegistry used by Camel to perform lookup into the  * Cdi BeanManager. The BeanManager must be passed as argument  * to the CdiRegistry constructor.  */
end_comment

begin_class
DECL|class|CdiBeanRegistry
specifier|public
class|class
name|CdiBeanRegistry
implements|implements
name|Registry
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CdiBeanRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|BeanManager
name|delegate
decl_stmt|;
DECL|method|CdiBeanRegistry (final BeanManager delegate)
specifier|public
name|CdiBeanRegistry
parameter_list|(
specifier|final
name|BeanManager
name|delegate
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|delegate
argument_list|,
literal|"delegate"
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookup (final String name)
specifier|public
name|Object
name|lookup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking up bean using name = [{}] in CDI registry."
argument_list|,
name|name
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
name|getDelegate
argument_list|()
operator|.
name|getBeans
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|beans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found no bean matching name = [{}] in CDI registry."
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|beans
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected to find exactly one bean having name ["
operator|+
name|name
operator|+
literal|"], but got ["
operator|+
name|beans
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|beans
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found bean [{}] matching name = [{}] in CDI registry."
argument_list|,
name|bean
argument_list|,
name|name
argument_list|)
expr_stmt|;
specifier|final
name|CreationalContext
argument_list|<
name|?
argument_list|>
name|context
init|=
name|getDelegate
argument_list|()
operator|.
name|createCreationalContext
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|getDelegate
argument_list|()
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|bean
operator|.
name|getBeanClass
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookup (final String name, final Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|lookup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking up bean using name = [{}] having expected type = [{}] in CDI registry."
argument_list|,
name|name
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|type
operator|.
name|cast
argument_list|(
name|lookup
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupByType (final Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|lookupByType
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking up all beans having expected type = [{}] in CDI registry."
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
name|getDelegate
argument_list|()
operator|.
name|getBeans
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|beans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found no beans having expected type = [{}] in CDI registry."
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found [{}] beans having expected type = [{}] in CDI registry."
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|beans
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|beansByName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|(
name|beans
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CreationalContext
argument_list|<
name|?
argument_list|>
name|context
init|=
name|getDelegate
argument_list|()
operator|.
name|createCreationalContext
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
range|:
name|beans
control|)
block|{
name|beansByName
operator|.
name|put
argument_list|(
name|bean
operator|.
name|getName
argument_list|()
argument_list|,
name|type
operator|.
name|cast
argument_list|(
name|getDelegate
argument_list|()
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|type
argument_list|,
name|context
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|beansByName
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CdiRegistry["
operator|+
name|this
operator|.
name|delegate
operator|+
literal|"]"
return|;
block|}
DECL|method|getDelegate ()
specifier|private
name|BeanManager
name|getDelegate
parameter_list|()
block|{
return|return
name|this
operator|.
name|delegate
return|;
block|}
block|}
end_class

end_unit

