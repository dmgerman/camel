begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|ListParameterizedType
specifier|final
class|class
name|ListParameterizedType
implements|implements
name|ParameterizedType
block|{
DECL|field|argument
specifier|private
specifier|final
name|Type
name|argument
decl_stmt|;
DECL|method|ListParameterizedType (Type argument)
name|ListParameterizedType
parameter_list|(
name|Type
name|argument
parameter_list|)
block|{
name|this
operator|.
name|argument
operator|=
name|argument
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getActualTypeArguments ()
specifier|public
name|Type
index|[]
name|getActualTypeArguments
parameter_list|()
block|{
return|return
operator|new
name|Type
index|[]
block|{
name|argument
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getRawType ()
specifier|public
name|Type
name|getRawType
parameter_list|()
block|{
return|return
name|List
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|getOwnerType ()
specifier|public
name|Type
name|getOwnerType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

