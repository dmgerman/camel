begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|CreationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|UnsatisfiedResolutionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DefaultErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|ErrorHandlerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|RedeliveryPolicyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|errorhandler
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|nonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|BeanManagerHelper
operator|.
name|getReferenceByName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
import|;
end_import

begin_class
DECL|class|XmlErrorHandlerFactoryBean
specifier|final
class|class
name|XmlErrorHandlerFactoryBean
extends|extends
name|SyntheticBean
argument_list|<
name|ErrorHandlerBuilder
argument_list|>
block|{
DECL|field|manager
specifier|private
specifier|final
name|BeanManager
name|manager
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|ErrorHandlerDefinition
name|handler
decl_stmt|;
DECL|method|XmlErrorHandlerFactoryBean (BeanManager manager, SyntheticAnnotated annotated, Class<?> type, Function<Bean<ErrorHandlerBuilder>, String> toString, ErrorHandlerDefinition handler)
name|XmlErrorHandlerFactoryBean
parameter_list|(
name|BeanManager
name|manager
parameter_list|,
name|SyntheticAnnotated
name|annotated
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Function
argument_list|<
name|Bean
argument_list|<
name|ErrorHandlerBuilder
argument_list|>
argument_list|,
name|String
argument_list|>
name|toString
parameter_list|,
name|ErrorHandlerDefinition
name|handler
parameter_list|)
block|{
name|super
argument_list|(
name|manager
argument_list|,
name|annotated
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (CreationalContext<ErrorHandlerBuilder> creationalContext)
specifier|public
name|ErrorHandlerBuilder
name|create
parameter_list|(
name|CreationalContext
argument_list|<
name|ErrorHandlerBuilder
argument_list|>
name|creationalContext
parameter_list|)
block|{
try|try
block|{
name|ErrorHandlerBuilder
name|builder
init|=
name|handler
operator|.
name|getType
argument_list|()
operator|.
name|getTypeAsClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|handler
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DefaultErrorHandler
case|:
case|case
name|DeadLetterChannel
case|:
name|setProperties
argument_list|(
operator|(
name|DefaultErrorHandlerBuilder
operator|)
name|builder
argument_list|)
expr_stmt|;
break|break;
case|case
name|NoErrorHandler
case|:
comment|// No configuration required
break|break;
case|case
name|TransactionErrorHandler
case|:
break|break;
default|default:
break|break;
block|}
return|return
name|builder
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|CreationException
argument_list|(
literal|"Error while creating instance for "
operator|+
name|this
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroy (ErrorHandlerBuilder instance, CreationalContext<ErrorHandlerBuilder> creationalContext)
specifier|public
name|void
name|destroy
parameter_list|(
name|ErrorHandlerBuilder
name|instance
parameter_list|,
name|CreationalContext
argument_list|<
name|ErrorHandlerBuilder
argument_list|>
name|creationalContext
parameter_list|)
block|{
comment|// NOOP
block|}
DECL|method|setProperties (DefaultErrorHandlerBuilder builder)
specifier|private
name|void
name|setProperties
parameter_list|(
name|DefaultErrorHandlerBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|nonNull
argument_list|(
name|handler
operator|.
name|getDeadLetterHandleNewException
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setDeadLetterHandleNewException
argument_list|(
name|handler
operator|.
name|getDeadLetterHandleNewException
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setDeadLetterUri
argument_list|(
name|handler
operator|.
name|getDeadLetterUri
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExecutorServiceRef
argument_list|(
name|handler
operator|.
name|getExecutorServiceRef
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRetryWhileRef
argument_list|(
name|handler
operator|.
name|getRetryWhileRef
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonNull
argument_list|(
name|handler
operator|.
name|getUseOriginalMessage
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setUseOriginalMessage
argument_list|(
name|handler
operator|.
name|getUseOriginalMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonNull
argument_list|(
name|handler
operator|.
name|getUseOriginalBody
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setUseOriginalBody
argument_list|(
name|handler
operator|.
name|getUseOriginalBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|handler
operator|.
name|getOnExceptionOccurredRef
argument_list|()
argument_list|)
condition|)
block|{
name|Processor
name|processor
init|=
name|getReferenceByName
argument_list|(
name|manager
argument_list|,
name|handler
operator|.
name|getOnExceptionOccurredRef
argument_list|()
argument_list|,
name|Processor
operator|.
name|class
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|UnsatisfiedResolutionException
argument_list|(
name|format
argument_list|(
literal|"No bean with name [%s] to satisfy attribute [%s]"
argument_list|,
name|handler
operator|.
name|getOnPrepareFailureRef
argument_list|()
argument_list|,
literal|"onExceptionOccurredRef"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setOnExceptionOccurred
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|handler
operator|.
name|getOnPrepareFailureRef
argument_list|()
argument_list|)
condition|)
block|{
name|Processor
name|processor
init|=
name|getReferenceByName
argument_list|(
name|manager
argument_list|,
name|handler
operator|.
name|getOnPrepareFailureRef
argument_list|()
argument_list|,
name|Processor
operator|.
name|class
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|UnsatisfiedResolutionException
argument_list|(
name|format
argument_list|(
literal|"No bean with name [%s] to satisfy attribute [%s]"
argument_list|,
name|handler
operator|.
name|getOnPrepareFailureRef
argument_list|()
argument_list|,
literal|"onPrepareFailureRef"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setOnPrepareFailure
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|handler
operator|.
name|getOnRedeliveryRef
argument_list|()
argument_list|)
condition|)
block|{
name|Processor
name|processor
init|=
name|getReferenceByName
argument_list|(
name|manager
argument_list|,
name|handler
operator|.
name|getOnRedeliveryRef
argument_list|()
argument_list|,
name|Processor
operator|.
name|class
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|UnsatisfiedResolutionException
argument_list|(
name|format
argument_list|(
literal|"No bean with name [%s] to satisfy attribute [%s]"
argument_list|,
name|handler
operator|.
name|getOnPrepareFailureRef
argument_list|()
argument_list|,
literal|"onRedeliveryRef"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setOnRedelivery
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonNull
argument_list|(
name|handler
operator|.
name|getRedeliveryPolicy
argument_list|()
argument_list|)
condition|)
block|{
name|RedeliveryPolicyFactoryBean
name|policy
init|=
name|handler
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setBeanManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRedeliveryPolicy
argument_list|(
name|policy
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|handler
operator|.
name|getRedeliveryPolicyRef
argument_list|()
argument_list|)
condition|)
block|{
name|RedeliveryPolicy
name|policy
init|=
name|getReferenceByName
argument_list|(
name|manager
argument_list|,
name|handler
operator|.
name|getRedeliveryPolicyRef
argument_list|()
argument_list|,
name|RedeliveryPolicy
operator|.
name|class
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|UnsatisfiedResolutionException
argument_list|(
name|format
argument_list|(
literal|"No bean with name [%s] to satisfy attribute [%s]"
argument_list|,
name|handler
operator|.
name|getRedeliveryPolicyRef
argument_list|()
argument_list|,
literal|"redeliveryPolicyRef"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setRedeliveryPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

