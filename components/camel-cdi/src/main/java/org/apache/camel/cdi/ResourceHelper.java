begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_class
annotation|@
name|Vetoed
DECL|class|ResourceHelper
specifier|final
class|class
name|ResourceHelper
block|{
DECL|method|ResourceHelper ()
specifier|private
name|ResourceHelper
parameter_list|()
block|{     }
DECL|method|getResource (String path, ClassLoader classLoader)
specifier|static
name|URL
name|getResource
parameter_list|(
name|String
name|path
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
comment|// Try resource loading from the ClassLoader associated with the @ImportResource annotated class
name|URL
name|url
init|=
name|loadResource
argument_list|(
name|path
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
comment|// Try resource loading from TCCL
name|url
operator|=
name|loadResource
argument_list|(
name|path
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
comment|// Try resource loading from this class ClassLoader
name|url
operator|=
name|loadResource
argument_list|(
name|path
argument_list|,
name|ResourceHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
comment|// Fall back to resource loading via the system ClassLoader
return|return
name|loadResource
argument_list|(
name|path
argument_list|,
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|loadResource (String path, ClassLoader classLoader)
specifier|private
specifier|static
name|URL
name|loadResource
parameter_list|(
name|String
name|path
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
block|{
return|return
name|classLoader
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

