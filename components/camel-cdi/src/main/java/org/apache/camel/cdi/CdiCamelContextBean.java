begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|PassivationCapable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_class
DECL|class|CdiCamelContextBean
specifier|final
class|class
name|CdiCamelContextBean
implements|implements
name|Bean
argument_list|<
name|DefaultCamelContext
argument_list|>
implements|,
name|PassivationCapable
block|{
DECL|field|qualifiers
specifier|private
specifier|final
name|Set
argument_list|<
name|Annotation
argument_list|>
name|qualifiers
decl_stmt|;
DECL|field|types
specifier|private
specifier|final
name|Set
argument_list|<
name|Type
argument_list|>
name|types
decl_stmt|;
DECL|field|target
specifier|private
specifier|final
name|InjectionTarget
argument_list|<
name|DefaultCamelContext
argument_list|>
name|target
decl_stmt|;
DECL|method|CdiCamelContextBean (CdiCamelContextAnnotated annotated, InjectionTarget<DefaultCamelContext> target)
name|CdiCamelContextBean
parameter_list|(
name|CdiCamelContextAnnotated
name|annotated
parameter_list|,
name|InjectionTarget
argument_list|<
name|DefaultCamelContext
argument_list|>
name|target
parameter_list|)
block|{
name|this
operator|.
name|qualifiers
operator|=
name|annotated
operator|.
name|getAnnotations
argument_list|()
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|annotated
operator|.
name|getTypeClosure
argument_list|()
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getScope ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|getScope
parameter_list|()
block|{
return|return
name|ApplicationScoped
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|getQualifiers ()
specifier|public
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getQualifiers
parameter_list|()
block|{
return|return
name|qualifiers
return|;
block|}
annotation|@
name|Override
DECL|method|create (CreationalContext<DefaultCamelContext> creational)
specifier|public
name|DefaultCamelContext
name|create
parameter_list|(
name|CreationalContext
argument_list|<
name|DefaultCamelContext
argument_list|>
name|creational
parameter_list|)
block|{
name|DefaultCamelContext
name|context
init|=
name|target
operator|.
name|produce
argument_list|(
name|creational
argument_list|)
decl_stmt|;
name|target
operator|.
name|inject
argument_list|(
name|context
argument_list|,
name|creational
argument_list|)
expr_stmt|;
name|target
operator|.
name|postConstruct
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|creational
operator|.
name|push
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|destroy (DefaultCamelContext instance, CreationalContext<DefaultCamelContext> creational)
specifier|public
name|void
name|destroy
parameter_list|(
name|DefaultCamelContext
name|instance
parameter_list|,
name|CreationalContext
argument_list|<
name|DefaultCamelContext
argument_list|>
name|creational
parameter_list|)
block|{
name|target
operator|.
name|preDestroy
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|target
operator|.
name|dispose
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|creational
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBeanClass ()
specifier|public
name|Class
argument_list|<
name|DefaultCamelContext
argument_list|>
name|getBeanClass
parameter_list|()
block|{
return|return
name|DefaultCamelContext
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|getInjectionPoints ()
specifier|public
name|Set
argument_list|<
name|InjectionPoint
argument_list|>
name|getInjectionPoints
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
comment|// Not called as this is not a named bean
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Default CDI Camel Context"
return|;
block|}
annotation|@
name|Override
DECL|method|getStereotypes ()
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|getStereotypes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTypes ()
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypes
parameter_list|()
block|{
return|return
name|types
return|;
block|}
annotation|@
name|Override
DECL|method|isAlternative ()
specifier|public
name|boolean
name|isAlternative
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isNullable ()
specifier|public
name|boolean
name|isNullable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

