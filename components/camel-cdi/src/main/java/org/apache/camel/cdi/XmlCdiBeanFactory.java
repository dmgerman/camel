begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|CreationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|ApplicationContextFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|BeanManagerAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|CamelContextFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|ErrorHandlerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|ErrorHandlerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|ImportDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|ProxyFactoryDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|RestContextDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|RouteContextDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
operator|.
name|ServiceExporterDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
operator|.
name|AbstractCamelFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|AnyLiteral
operator|.
name|ANY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|ApplicationScopedLiteral
operator|.
name|APPLICATION_SCOPED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|DefaultLiteral
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Startup
operator|.
name|Literal
operator|.
name|STARTUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
import|;
end_import

begin_class
DECL|class|XmlCdiBeanFactory
specifier|final
class|class
name|XmlCdiBeanFactory
block|{
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XmlCdiBeanFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|manager
specifier|private
specifier|final
name|BeanManager
name|manager
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|CdiCamelEnvironment
name|environment
decl_stmt|;
DECL|field|extension
specifier|private
specifier|final
name|CdiCamelExtension
name|extension
decl_stmt|;
DECL|method|XmlCdiBeanFactory (BeanManager manager, CdiCamelEnvironment environment, CdiCamelExtension extension)
specifier|private
name|XmlCdiBeanFactory
parameter_list|(
name|BeanManager
name|manager
parameter_list|,
name|CdiCamelEnvironment
name|environment
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|extension
operator|=
name|extension
expr_stmt|;
block|}
DECL|method|with (BeanManager manager, CdiCamelEnvironment environment, CdiCamelExtension extension)
specifier|static
name|XmlCdiBeanFactory
name|with
parameter_list|(
name|BeanManager
name|manager
parameter_list|,
name|CdiCamelEnvironment
name|environment
parameter_list|,
name|CdiCamelExtension
name|extension
parameter_list|)
block|{
return|return
operator|new
name|XmlCdiBeanFactory
argument_list|(
name|manager
argument_list|,
name|environment
argument_list|,
name|extension
argument_list|)
return|;
block|}
DECL|method|beansFrom (String path)
name|Set
argument_list|<
name|SyntheticBean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beansFrom
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|JAXBException
throws|,
name|IOException
block|{
name|URL
name|url
init|=
name|ResourceHelper
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to locate resource [{}] for import!"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
return|return
name|beansFrom
argument_list|(
name|url
argument_list|)
return|;
block|}
DECL|method|beansFrom (URL url)
name|Set
argument_list|<
name|SyntheticBean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beansFrom
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|JAXBException
throws|,
name|IOException
block|{
try|try
init|(
name|InputStream
name|xml
init|=
name|url
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Object
name|node
init|=
name|XmlCdiJaxbContexts
operator|.
name|CAMEL_CDI
operator|.
name|instance
argument_list|()
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
name|xml
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|RoutesDefinition
condition|)
block|{
name|RoutesDefinition
name|routes
init|=
operator|(
name|RoutesDefinition
operator|)
name|node
decl_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|routesDefinitionBean
argument_list|(
name|routes
argument_list|,
name|url
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|ApplicationContextFactoryBean
condition|)
block|{
name|ApplicationContextFactoryBean
name|app
init|=
operator|(
name|ApplicationContextFactoryBean
operator|)
name|node
decl_stmt|;
name|Set
argument_list|<
name|SyntheticBean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CamelContextFactoryBean
name|factory
range|:
name|app
operator|.
name|getContexts
argument_list|()
control|)
block|{
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|camelContextBean
argument_list|(
name|factory
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|beans
operator|.
name|add
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|beans
operator|.
name|addAll
argument_list|(
name|camelContextBeans
argument_list|(
name|factory
argument_list|,
name|bean
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ErrorHandlerDefinition
name|definition
range|:
name|app
operator|.
name|getErrorHandlers
argument_list|()
control|)
block|{
name|beans
operator|.
name|add
argument_list|(
name|errorHandlerBean
argument_list|(
name|definition
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ImportDefinition
name|definition
range|:
name|app
operator|.
name|getImports
argument_list|()
control|)
block|{
comment|// Get the base URL as imports are relative to this
name|String
name|path
init|=
name|url
operator|.
name|getFile
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|url
operator|.
name|getFile
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|base
init|=
name|url
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"://"
operator|+
name|url
operator|.
name|getHost
argument_list|()
operator|+
name|path
decl_stmt|;
name|beans
operator|.
name|addAll
argument_list|(
name|beansFrom
argument_list|(
name|base
operator|+
literal|"/"
operator|+
name|definition
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RestContextDefinition
name|factory
range|:
name|app
operator|.
name|getRestContexts
argument_list|()
control|)
block|{
name|beans
operator|.
name|add
argument_list|(
name|restContextBean
argument_list|(
name|factory
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RouteContextDefinition
name|factory
range|:
name|app
operator|.
name|getRouteContexts
argument_list|()
control|)
block|{
name|beans
operator|.
name|add
argument_list|(
name|routeContextBean
argument_list|(
name|factory
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AbstractCamelFactoryBean
argument_list|<
name|?
argument_list|>
name|factory
range|:
name|app
operator|.
name|getBeans
argument_list|()
control|)
block|{
if|if
condition|(
name|factory
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|beans
operator|.
name|add
argument_list|(
name|camelContextBean
argument_list|(
literal|null
argument_list|,
name|factory
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|beans
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|CamelContextFactoryBean
condition|)
block|{
name|CamelContextFactoryBean
name|factory
init|=
operator|(
name|CamelContextFactoryBean
operator|)
name|node
decl_stmt|;
name|Set
argument_list|<
name|SyntheticBean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|camelContextBean
argument_list|(
name|factory
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|beans
operator|.
name|add
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|beans
operator|.
name|addAll
argument_list|(
name|camelContextBeans
argument_list|(
name|factory
argument_list|,
name|bean
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|beans
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|RestContextDefinition
condition|)
block|{
name|RestContextDefinition
name|factory
init|=
operator|(
name|RestContextDefinition
operator|)
name|node
decl_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|restContextBean
argument_list|(
name|factory
argument_list|,
name|url
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|RouteContextDefinition
condition|)
block|{
name|RouteContextDefinition
name|factory
init|=
operator|(
name|RouteContextDefinition
operator|)
name|node
decl_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|routeContextBean
argument_list|(
name|factory
argument_list|,
name|url
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|camelContextBean (CamelContextFactoryBean factory, URL url)
specifier|private
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|camelContextBean
parameter_list|(
name|CamelContextFactoryBean
name|factory
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
name|Set
argument_list|<
name|Annotation
argument_list|>
name|annotations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|ANY
argument_list|)
expr_stmt|;
if|if
condition|(
name|factory
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|annotations
argument_list|,
name|ContextName
operator|.
name|Literal
operator|.
name|of
argument_list|(
name|factory
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|NamedLiteral
operator|.
name|of
argument_list|(
name|factory
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|annotations
operator|.
name|add
argument_list|(
name|DEFAULT
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setImplicitId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setId
argument_list|(
operator|new
name|CdiCamelContextNameStrategy
argument_list|()
operator|.
name|getNextName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|annotations
operator|.
name|add
argument_list|(
name|APPLICATION_SCOPED
argument_list|)
expr_stmt|;
name|SyntheticAnnotated
name|annotated
init|=
operator|new
name|SyntheticAnnotated
argument_list|(
name|DefaultCamelContext
operator|.
name|class
argument_list|,
name|manager
operator|.
name|createAnnotatedType
argument_list|(
name|DefaultCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getTypeClosure
argument_list|()
argument_list|,
name|annotations
argument_list|)
decl_stmt|;
return|return
operator|new
name|SyntheticBean
argument_list|<>
argument_list|(
name|manager
argument_list|,
name|annotated
argument_list|,
name|DefaultCamelContext
operator|.
name|class
argument_list|,
name|environment
operator|.
name|camelContextInjectionTarget
argument_list|(
operator|new
name|SyntheticInjectionTarget
argument_list|<>
argument_list|(
parameter_list|()
lambda|->
block|{
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setBeanManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
argument_list|,
name|context
lambda|->
block|{
try|try
block|{
name|factory
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|CreationException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
argument_list|)
argument_list|,
name|annotated
argument_list|,
name|manager
argument_list|,
name|extension
argument_list|)
argument_list|,
name|bean
lambda|->
literal|"imported Camel context with "
operator|+
operator|(
name|factory
operator|.
name|isImplicitId
argument_list|()
condition|?
literal|"implicit "
else|:
literal|""
operator|)
operator|+
literal|"id ["
operator|+
name|factory
operator|.
name|getId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"from resource ["
operator|+
name|url
operator|+
literal|"] "
operator|+
literal|"with qualifiers "
operator|+
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|)
return|;
block|}
DECL|method|camelContextBeans (CamelContextFactoryBean factory, Bean<?> context, URL url)
specifier|private
name|Set
argument_list|<
name|SyntheticBean
argument_list|<
name|?
argument_list|>
argument_list|>
name|camelContextBeans
parameter_list|(
name|CamelContextFactoryBean
name|factory
parameter_list|,
name|Bean
argument_list|<
name|?
argument_list|>
name|context
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
name|Set
argument_list|<
name|SyntheticBean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO: WARN log if the definition doesn't have an id
if|if
condition|(
name|factory
operator|.
name|getBeans
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|getBeans
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|bean
lambda|->
name|bean
operator|.
name|getId
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|bean
lambda|->
name|camelContextBean
argument_list|(
name|context
argument_list|,
name|bean
argument_list|,
name|url
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|beans
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
comment|// TODO: define in beans
if|if
condition|(
name|factory
operator|.
name|getEndpoints
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|getEndpoints
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|endpoint
lambda|->
name|endpoint
operator|.
name|getId
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|endpoint
lambda|->
name|camelContextBean
argument_list|(
name|context
argument_list|,
name|endpoint
argument_list|,
name|url
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|beans
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|.
name|getErrorHandlers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|getErrorHandlers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|handler
lambda|->
name|handler
operator|.
name|getId
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|handler
lambda|->
name|errorHandlerBean
argument_list|(
name|handler
argument_list|,
name|url
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|beans
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|.
name|getExports
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|getExports
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|export
lambda|->
name|serviceExporterBean
argument_list|(
name|context
argument_list|,
name|export
argument_list|,
name|url
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|beans
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|.
name|getProxies
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|getProxies
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|proxy
lambda|->
name|proxy
operator|.
name|getId
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|proxy
lambda|->
name|proxyFactoryBean
argument_list|(
name|context
argument_list|,
name|proxy
argument_list|,
name|url
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|beans
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
comment|// TODO: define in beans
if|if
condition|(
name|factory
operator|.
name|getRedeliveryPolicies
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|getRedeliveryPolicies
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|policy
lambda|->
name|policy
operator|.
name|getId
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|policy
lambda|->
name|camelContextBean
argument_list|(
name|context
argument_list|,
name|policy
argument_list|,
name|url
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|beans
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
return|return
name|beans
return|;
block|}
DECL|method|camelContextBean (Bean<?> context, AbstractCamelFactoryBean<?> factory, URL url)
specifier|private
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|camelContextBean
parameter_list|(
name|Bean
argument_list|<
name|?
argument_list|>
name|context
parameter_list|,
name|AbstractCamelFactoryBean
argument_list|<
name|?
argument_list|>
name|factory
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
if|if
condition|(
name|factory
operator|instanceof
name|BeanManagerAware
condition|)
block|{
operator|(
operator|(
name|BeanManagerAware
operator|)
name|factory
operator|)
operator|.
name|setBeanManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Annotation
argument_list|>
name|annotations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|ANY
argument_list|)
expr_stmt|;
comment|// FIXME: should add @ContextName if the Camel context bean has it
name|annotations
operator|.
name|add
argument_list|(
name|factory
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|?
name|NamedLiteral
operator|.
name|of
argument_list|(
name|factory
operator|.
name|getId
argument_list|()
argument_list|)
else|:
name|DEFAULT
argument_list|)
expr_stmt|;
comment|// TODO: should that be @Singleton to enable injection points with bean instance type?
if|if
condition|(
name|factory
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
name|annotations
operator|.
name|add
argument_list|(
name|APPLICATION_SCOPED
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SyntheticBean
argument_list|<>
argument_list|(
name|manager
argument_list|,
operator|new
name|SyntheticAnnotated
argument_list|(
name|factory
operator|.
name|getObjectType
argument_list|()
argument_list|,
name|manager
operator|.
name|createAnnotatedType
argument_list|(
name|factory
operator|.
name|getObjectType
argument_list|()
argument_list|)
operator|.
name|getTypeClosure
argument_list|()
argument_list|,
name|annotations
argument_list|)
argument_list|,
name|factory
operator|.
name|getObjectType
argument_list|()
argument_list|,
operator|new
name|XmlFactoryBeanInjectionTarget
argument_list|<>
argument_list|(
name|manager
argument_list|,
name|factory
argument_list|,
name|context
argument_list|)
argument_list|,
name|bean
lambda|->
literal|"imported bean ["
operator|+
name|factory
operator|.
name|getId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"from resource ["
operator|+
name|url
operator|+
literal|"] "
operator|+
literal|"with qualifiers "
operator|+
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|)
return|;
block|}
DECL|method|proxyFactoryBean (Bean<?> context, ProxyFactoryDefinition proxy, URL url)
specifier|private
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|proxyFactoryBean
parameter_list|(
name|Bean
argument_list|<
name|?
argument_list|>
name|context
parameter_list|,
name|ProxyFactoryDefinition
name|proxy
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|proxy
operator|.
name|getServiceRef
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|proxy
operator|.
name|getServiceUrl
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CreationException
argument_list|(
name|format
argument_list|(
literal|"Missing [%s] or [%s] attribute for imported bean [%s] from resource [%s]"
argument_list|,
literal|"serviceRef"
argument_list|,
literal|"serviceUrl"
argument_list|,
name|proxy
operator|.
name|getId
argument_list|()
argument_list|,
name|url
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|XmlProxyFactoryBean
argument_list|<>
argument_list|(
name|manager
argument_list|,
operator|new
name|SyntheticAnnotated
argument_list|(
name|proxy
operator|.
name|getServiceInterface
argument_list|()
argument_list|,
name|manager
operator|.
name|createAnnotatedType
argument_list|(
name|proxy
operator|.
name|getServiceInterface
argument_list|()
argument_list|)
operator|.
name|getTypeClosure
argument_list|()
argument_list|,
name|APPLICATION_SCOPED
argument_list|,
name|ANY
argument_list|,
name|NamedLiteral
operator|.
name|of
argument_list|(
name|proxy
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|proxy
operator|.
name|getServiceInterface
argument_list|()
argument_list|,
name|bean
lambda|->
literal|"imported bean ["
operator|+
name|proxy
operator|.
name|getId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"from resource ["
operator|+
name|url
operator|+
literal|"] "
operator|+
literal|"with qualifiers "
operator|+
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|,
name|context
argument_list|,
name|proxy
argument_list|)
return|;
block|}
DECL|method|serviceExporterBean (Bean<?> context, ServiceExporterDefinition exporter, URL url)
specifier|private
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|serviceExporterBean
parameter_list|(
name|Bean
argument_list|<
name|?
argument_list|>
name|context
parameter_list|,
name|ServiceExporterDefinition
name|exporter
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
comment|// TODO: replace with CreationException
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|exporter
operator|.
name|getServiceRef
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|format
argument_list|(
literal|"Missing [%s] attribute for imported bean [%s] from resource [%s]"
argument_list|,
literal|"serviceRef"
argument_list|,
name|Objects
operator|.
name|toString
argument_list|(
name|exporter
operator|.
name|getId
argument_list|()
argument_list|,
literal|"export"
argument_list|)
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
if|if
condition|(
name|exporter
operator|.
name|getServiceInterface
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|exporter
operator|.
name|getServiceInterface
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|manager
operator|.
name|resolve
argument_list|(
name|manager
operator|.
name|getBeans
argument_list|(
name|exporter
operator|.
name|getServiceRef
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bean
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|bean
operator|.
name|getBeanClass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|exporter
operator|.
name|getServiceInterface
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|format
argument_list|(
literal|"Missing [%s] attribute for imported bean [%s] from resource [%s]"
argument_list|,
literal|"serviceInterface"
argument_list|,
name|Objects
operator|.
name|toString
argument_list|(
name|exporter
operator|.
name|getId
argument_list|()
argument_list|,
literal|"export"
argument_list|)
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|=
name|exporter
operator|.
name|getServiceInterface
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Type
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|manager
operator|.
name|createAnnotatedType
argument_list|(
name|type
argument_list|)
operator|.
name|getTypeClosure
argument_list|()
argument_list|)
decl_stmt|;
comment|// Weld does not add Object.class for interfaces as they do not extend Object.class.
comment|// Though let's add it so that it's possible to lookup by bean type Object.class
comment|// beans whose bean class is an interface (for startup beans).
name|types
operator|.
name|add
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
operator|new
name|XmlServiceExporterBean
argument_list|<>
argument_list|(
name|manager
argument_list|,
operator|new
name|SyntheticAnnotated
argument_list|(
name|type
argument_list|,
name|types
argument_list|,
name|APPLICATION_SCOPED
argument_list|,
name|ANY
argument_list|,
name|STARTUP
argument_list|,
name|exporter
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|?
name|NamedLiteral
operator|.
name|of
argument_list|(
name|exporter
operator|.
name|getId
argument_list|()
argument_list|)
else|:
name|DEFAULT
argument_list|)
argument_list|,
name|type
argument_list|,
name|bean
lambda|->
literal|"imported bean ["
operator|+
name|Objects
operator|.
name|toString
argument_list|(
name|exporter
operator|.
name|getId
argument_list|()
argument_list|,
literal|"export"
argument_list|)
operator|+
literal|"] "
operator|+
literal|"from resource ["
operator|+
name|url
operator|+
literal|"] "
operator|+
literal|"with qualifiers "
operator|+
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|,
name|context
argument_list|,
name|exporter
argument_list|)
return|;
block|}
DECL|method|restContextBean (RestContextDefinition definition, URL url)
specifier|private
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|restContextBean
parameter_list|(
name|RestContextDefinition
name|definition
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|format
argument_list|(
literal|"Missing [%s] attribute for imported bean [%s] from resource [%s]"
argument_list|,
literal|"id"
argument_list|,
literal|"restContext"
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SyntheticBean
argument_list|<>
argument_list|(
name|manager
argument_list|,
operator|new
name|SyntheticAnnotated
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
name|List
operator|.
name|class
argument_list|,
operator|new
name|ListParameterizedType
argument_list|(
name|RestDefinition
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|,
name|ANY
argument_list|,
name|NamedLiteral
operator|.
name|of
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|List
operator|.
name|class
argument_list|,
operator|new
name|SyntheticInjectionTarget
argument_list|<>
argument_list|(
name|definition
operator|::
name|getRests
argument_list|)
argument_list|,
name|bean
lambda|->
literal|"imported rest context with "
operator|+
literal|"id ["
operator|+
name|definition
operator|.
name|getId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"from resource ["
operator|+
name|url
operator|+
literal|"] "
operator|+
literal|"with qualifiers "
operator|+
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|)
return|;
block|}
DECL|method|routeContextBean (RouteContextDefinition definition, URL url)
specifier|private
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|routeContextBean
parameter_list|(
name|RouteContextDefinition
name|definition
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|format
argument_list|(
literal|"Missing [%s] attribute for imported bean [%s] from resource [%s]"
argument_list|,
literal|"id"
argument_list|,
literal|"routeContext"
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SyntheticBean
argument_list|<>
argument_list|(
name|manager
argument_list|,
operator|new
name|SyntheticAnnotated
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
name|List
operator|.
name|class
argument_list|,
operator|new
name|ListParameterizedType
argument_list|(
name|RouteDefinition
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|,
name|ANY
argument_list|,
name|NamedLiteral
operator|.
name|of
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|List
operator|.
name|class
argument_list|,
operator|new
name|SyntheticInjectionTarget
argument_list|<>
argument_list|(
name|definition
operator|::
name|getRoutes
argument_list|)
argument_list|,
name|bean
lambda|->
literal|"imported route context with "
operator|+
literal|"id ["
operator|+
name|definition
operator|.
name|getId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"from resource ["
operator|+
name|url
operator|+
literal|"] "
operator|+
literal|"with qualifiers "
operator|+
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|)
return|;
block|}
DECL|method|routesDefinitionBean (RoutesDefinition definition, URL url)
specifier|private
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|routesDefinitionBean
parameter_list|(
name|RoutesDefinition
name|definition
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
return|return
operator|new
name|SyntheticBean
argument_list|<>
argument_list|(
name|manager
argument_list|,
comment|// TODO: should be @Named if the id is set
operator|new
name|SyntheticAnnotated
argument_list|(
name|RoutesDefinition
operator|.
name|class
argument_list|,
name|manager
operator|.
name|createAnnotatedType
argument_list|(
name|RoutesDefinition
operator|.
name|class
argument_list|)
operator|.
name|getTypeClosure
argument_list|()
argument_list|,
name|ANY
argument_list|,
name|DEFAULT
argument_list|)
argument_list|,
name|RoutesDefinition
operator|.
name|class
argument_list|,
operator|new
name|SyntheticInjectionTarget
argument_list|<>
argument_list|(
parameter_list|()
lambda|->
name|definition
argument_list|)
argument_list|,
name|bean
lambda|->
literal|"imported routes definition "
operator|+
operator|(
name|definition
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|?
literal|"["
operator|+
name|definition
operator|.
name|getId
argument_list|()
operator|+
literal|"] "
else|:
literal|""
operator|)
operator|+
literal|"from resource ["
operator|+
name|url
operator|+
literal|"]"
argument_list|)
return|;
block|}
DECL|method|errorHandlerBean (ErrorHandlerDefinition definition, URL url)
specifier|private
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|errorHandlerBean
parameter_list|(
name|ErrorHandlerDefinition
name|definition
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
name|ErrorHandlerType
name|type
init|=
name|definition
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Validate attributes according to type
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getDeadLetterUri
argument_list|()
argument_list|)
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|DeadLetterChannel
argument_list|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"deadLetterUri"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getDeadLetterHandleNewException
argument_list|()
argument_list|)
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|DeadLetterChannel
argument_list|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"deadLetterHandleNewException"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getTransactionTemplateRef
argument_list|()
argument_list|)
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|TransactionErrorHandler
argument_list|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"transactionTemplateRef"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getTransactionManagerRef
argument_list|()
argument_list|)
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|TransactionErrorHandler
argument_list|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"transactionManagerRef"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getRollbackLoggingLevel
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|TransactionErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"rollbackLoggingLevel"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getUseOriginalMessage
argument_list|()
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|LoggingErrorHandler
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|NoErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"useOriginalMessage"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getOnRedeliveryRef
argument_list|()
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|LoggingErrorHandler
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|NoErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"onRedeliveryRef"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getOnExceptionOccurredRef
argument_list|()
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|LoggingErrorHandler
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|NoErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"onExceptionOccurredRef"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getOnPrepareFailureRef
argument_list|()
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|TransactionErrorHandler
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|LoggingErrorHandler
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|NoErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"onPrepareFailureRef"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getRetryWhileRef
argument_list|()
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|LoggingErrorHandler
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|NoErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"retryWhileRef"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getOnRedeliveryRef
argument_list|()
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|LoggingErrorHandler
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|NoErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"redeliveryPolicyRef"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getExecutorServiceRef
argument_list|()
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|LoggingErrorHandler
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|NoErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"executorServiceRef"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getLogName
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|LoggingErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"logName"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getLevel
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|ErrorHandlerType
operator|.
name|LoggingErrorHandler
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|attributeNotSupported
argument_list|(
literal|"level"
argument_list|,
name|type
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|XmlErrorHandlerFactoryBean
argument_list|(
name|manager
argument_list|,
operator|new
name|SyntheticAnnotated
argument_list|(
name|type
operator|.
name|getTypeAsClass
argument_list|()
argument_list|,
name|manager
operator|.
name|createAnnotatedType
argument_list|(
name|type
operator|.
name|getTypeAsClass
argument_list|()
argument_list|)
operator|.
name|getTypeClosure
argument_list|()
argument_list|,
name|ANY
argument_list|,
name|NamedLiteral
operator|.
name|of
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|type
operator|.
name|getTypeAsClass
argument_list|()
argument_list|,
name|bean
lambda|->
literal|"imported error handler with "
operator|+
literal|"id ["
operator|+
name|definition
operator|.
name|getId
argument_list|()
operator|+
literal|"] "
operator|+
literal|"from resource ["
operator|+
name|url
operator|+
literal|"] "
operator|+
literal|"with qualifiers "
operator|+
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|,
name|definition
argument_list|)
return|;
block|}
DECL|method|attributeNotSupported (String attribute, ErrorHandlerType type, String id)
specifier|private
specifier|static
name|CreationException
name|attributeNotSupported
parameter_list|(
name|String
name|attribute
parameter_list|,
name|ErrorHandlerType
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|CreationException
argument_list|(
name|format
argument_list|(
literal|"Attribute [%s] is not supported by error handler type [%s], in error handler with id [%s]"
argument_list|,
name|attribute
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

