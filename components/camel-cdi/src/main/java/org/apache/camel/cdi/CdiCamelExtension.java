begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|newSetFromMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Default
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|InjectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AfterBeanDiscovery
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AfterDeploymentValidation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Annotated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ObserverMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessAnnotatedType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessInjectionTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessObserverMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessProducerField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessProducerMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BeanInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|AbstractExchangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiSpiHelper
operator|.
name|hasAnnotation
import|;
end_import

begin_class
DECL|class|CdiCamelExtension
specifier|public
class|class
name|CdiCamelExtension
implements|implements
name|Extension
block|{
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CdiCamelExtension
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|CdiCamelEnvironment
name|environment
init|=
operator|new
name|CdiCamelEnvironment
argument_list|()
decl_stmt|;
DECL|field|converters
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|converters
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|camelBeans
specifier|private
specifier|final
name|Set
argument_list|<
name|AnnotatedType
argument_list|<
name|?
argument_list|>
argument_list|>
name|camelBeans
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|AnnotatedType
argument_list|<
name|?
argument_list|>
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|eagerBeans
specifier|private
specifier|final
name|Set
argument_list|<
name|AnnotatedType
argument_list|<
name|?
argument_list|>
argument_list|>
name|eagerBeans
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|AnnotatedType
argument_list|<
name|?
argument_list|>
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|cdiEventEndpoints
specifier|private
specifier|final
name|Map
argument_list|<
name|InjectionPoint
argument_list|,
name|ForwardingObserverMethod
argument_list|<
name|?
argument_list|>
argument_list|>
name|cdiEventEndpoints
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|contextBeans
specifier|private
specifier|final
name|Map
argument_list|<
name|Annotated
argument_list|,
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|contextBeans
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|contextQualifiers
specifier|private
specifier|final
name|Set
argument_list|<
name|Annotation
argument_list|>
name|contextQualifiers
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|Annotation
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|eventQualifiers
specifier|private
specifier|final
name|Set
argument_list|<
name|Annotation
argument_list|>
name|eventQualifiers
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|Annotation
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|producerBeans
specifier|private
specifier|final
name|Map
argument_list|<
name|Method
argument_list|,
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|producerBeans
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|producerQualifiers
specifier|private
specifier|final
name|Map
argument_list|<
name|Method
argument_list|,
name|Set
argument_list|<
name|Annotation
argument_list|>
argument_list|>
name|producerQualifiers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getObserverMethod (InjectionPoint ip)
name|ForwardingObserverMethod
argument_list|<
name|?
argument_list|>
name|getObserverMethod
parameter_list|(
name|InjectionPoint
name|ip
parameter_list|)
block|{
return|return
name|cdiEventEndpoints
operator|.
name|get
argument_list|(
name|ip
argument_list|)
return|;
block|}
DECL|method|getObserverEvents ()
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getObserverEvents
parameter_list|()
block|{
return|return
name|eventQualifiers
return|;
block|}
DECL|method|getContextBean (Annotated annotated)
name|Bean
argument_list|<
name|?
argument_list|>
name|getContextBean
parameter_list|(
name|Annotated
name|annotated
parameter_list|)
block|{
return|return
name|contextBeans
operator|.
name|get
argument_list|(
name|annotated
argument_list|)
return|;
block|}
DECL|method|getContextQualifiers ()
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getContextQualifiers
parameter_list|()
block|{
return|return
name|contextQualifiers
return|;
block|}
DECL|method|processAnnotatedType (@bserves ProcessAnnotatedType<?> pat)
specifier|private
name|void
name|processAnnotatedType
parameter_list|(
annotation|@
name|Observes
name|ProcessAnnotatedType
argument_list|<
name|?
argument_list|>
name|pat
parameter_list|)
block|{
if|if
condition|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
operator|.
name|isAnnotationPresent
argument_list|(
name|Vetoed
operator|.
name|class
argument_list|)
condition|)
block|{
name|pat
operator|.
name|veto
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasAnnotation
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|Converter
operator|.
name|class
argument_list|)
condition|)
block|{
name|converters
operator|.
name|add
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
operator|.
name|getJavaClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasAnnotation
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|BeanInject
operator|.
name|class
argument_list|,
name|Consume
operator|.
name|class
argument_list|,
name|EndpointInject
operator|.
name|class
argument_list|,
name|Produce
operator|.
name|class
argument_list|,
name|PropertyInject
operator|.
name|class
argument_list|)
condition|)
block|{
name|camelBeans
operator|.
name|add
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasAnnotation
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|Consume
operator|.
name|class
argument_list|)
condition|)
block|{
name|eagerBeans
operator|.
name|add
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|camelContextAware (@bserves ProcessAnnotatedType<? extends CamelContextAware> pat)
specifier|private
name|void
name|camelContextAware
parameter_list|(
annotation|@
name|Observes
name|ProcessAnnotatedType
argument_list|<
name|?
extends|extends
name|CamelContextAware
argument_list|>
name|pat
parameter_list|)
block|{
name|camelBeans
operator|.
name|add
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|camelContextBeans (@bserves ProcessInjectionTarget<T> pit, BeanManager manager)
specifier|private
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|void
name|camelContextBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessInjectionTarget
argument_list|<
name|T
argument_list|>
name|pit
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|pit
operator|.
name|setInjectionTarget
argument_list|(
name|environment
operator|.
name|camelContextInjectionTarget
argument_list|(
name|pit
operator|.
name|getInjectionTarget
argument_list|()
argument_list|,
name|pit
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|manager
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|camelContextProducers (@bserves ProcessProducer<?, T> pp, BeanManager manager)
specifier|private
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|void
name|camelContextProducers
parameter_list|(
annotation|@
name|Observes
name|ProcessProducer
argument_list|<
name|?
argument_list|,
name|T
argument_list|>
name|pp
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|pp
operator|.
name|setProducer
argument_list|(
name|environment
operator|.
name|camelContextProducer
argument_list|(
name|pp
operator|.
name|getProducer
argument_list|()
argument_list|,
name|pp
operator|.
name|getAnnotatedMember
argument_list|()
argument_list|,
name|manager
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|camelBeansPostProcessor (@bserves ProcessInjectionTarget<T> pit, BeanManager manager)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|camelBeansPostProcessor
parameter_list|(
annotation|@
name|Observes
name|ProcessInjectionTarget
argument_list|<
name|T
argument_list|>
name|pit
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
if|if
condition|(
name|camelBeans
operator|.
name|contains
argument_list|(
name|pit
operator|.
name|getAnnotatedType
argument_list|()
argument_list|)
condition|)
block|{
name|pit
operator|.
name|setInjectionTarget
argument_list|(
operator|new
name|CamelBeanInjectionTarget
argument_list|<>
argument_list|(
name|pit
operator|.
name|getInjectionTarget
argument_list|()
argument_list|,
name|manager
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cdiEventEndpoints (@bserves ProcessBean<?> pb)
specifier|private
name|void
name|cdiEventEndpoints
parameter_list|(
annotation|@
name|Observes
name|ProcessBean
argument_list|<
name|?
argument_list|>
name|pb
parameter_list|)
block|{
for|for
control|(
name|InjectionPoint
name|ip
range|:
name|pb
operator|.
name|getBean
argument_list|()
operator|.
name|getInjectionPoints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|CdiEventEndpoint
operator|.
name|class
operator|.
name|equals
argument_list|(
name|CdiSpiHelper
operator|.
name|getRawType
argument_list|(
name|ip
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// TODO: refine the key to the type and qualifiers instead of the whole injection point as it leads to registering redundant observers
if|if
condition|(
name|ip
operator|.
name|getType
argument_list|()
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|cdiEventEndpoints
operator|.
name|put
argument_list|(
name|ip
argument_list|,
operator|new
name|ForwardingObserverMethod
argument_list|<>
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|ip
operator|.
name|getType
argument_list|()
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|ip
operator|.
name|getQualifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ip
operator|.
name|getType
argument_list|()
operator|instanceof
name|Class
condition|)
block|{
name|cdiEventEndpoints
operator|.
name|put
argument_list|(
name|ip
argument_list|,
operator|new
name|ForwardingObserverMethod
argument_list|<>
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|ip
operator|.
name|getQualifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|endpointBeans (@bserves ProcessProducerMethod<T, CdiCamelFactory> ppm)
specifier|private
parameter_list|<
name|T
extends|extends
name|Endpoint
parameter_list|>
name|void
name|endpointBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerMethod
argument_list|<
name|T
argument_list|,
name|CdiCamelFactory
argument_list|>
name|ppm
parameter_list|)
block|{
name|producerBeans
operator|.
name|put
argument_list|(
name|ppm
operator|.
name|getAnnotatedProducerMethod
argument_list|()
operator|.
name|getJavaMember
argument_list|()
argument_list|,
name|ppm
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|producerTemplateBeans (@bserves ProcessProducerMethod<ProducerTemplate, CdiCamelFactory> ppm)
specifier|private
name|void
name|producerTemplateBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerMethod
argument_list|<
name|ProducerTemplate
argument_list|,
name|CdiCamelFactory
argument_list|>
name|ppm
parameter_list|)
block|{
name|producerBeans
operator|.
name|put
argument_list|(
name|ppm
operator|.
name|getAnnotatedProducerMethod
argument_list|()
operator|.
name|getJavaMember
argument_list|()
argument_list|,
name|ppm
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|camelFactoryProducers (@bserves ProcessAnnotatedType<CdiCamelFactory> pat, BeanManager manager)
specifier|private
name|void
name|camelFactoryProducers
parameter_list|(
annotation|@
name|Observes
name|ProcessAnnotatedType
argument_list|<
name|CdiCamelFactory
argument_list|>
name|pat
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|AnnotatedType
argument_list|<
name|CdiCamelFactory
argument_list|>
name|at
init|=
name|pat
operator|.
name|getAnnotatedType
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|AnnotatedMethod
argument_list|<
name|?
super|super
name|CdiCamelFactory
argument_list|>
argument_list|>
name|methods
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AnnotatedMethod
argument_list|<
name|?
super|super
name|CdiCamelFactory
argument_list|>
name|am
range|:
name|pat
operator|.
name|getAnnotatedType
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|am
operator|.
name|isAnnotationPresent
argument_list|(
name|Produces
operator|.
name|class
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|CdiSpiHelper
operator|.
name|getRawType
argument_list|(
name|am
operator|.
name|getBaseType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Endpoint
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|ProducerTemplate
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Annotation
argument_list|>
name|qualifiers
init|=
name|CdiSpiHelper
operator|.
name|getQualifiers
argument_list|(
name|am
argument_list|,
name|manager
argument_list|)
decl_stmt|;
name|producerQualifiers
operator|.
name|put
argument_list|(
name|am
operator|.
name|getJavaMember
argument_list|()
argument_list|,
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
expr|<
name|Annotation
operator|>
name|singleton
argument_list|(
name|DefaultLiteral
operator|.
name|INSTANCE
argument_list|)
else|:
name|qualifiers
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Annotation
argument_list|>
name|annotations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|am
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|annotations
operator|.
name|removeAll
argument_list|(
name|qualifiers
argument_list|)
expr_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|Excluded
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|methods
operator|.
name|add
argument_list|(
operator|new
name|AnnotatedMethodDelegate
argument_list|<>
argument_list|(
name|am
argument_list|,
name|annotations
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|pat
operator|.
name|setAnnotatedType
argument_list|(
operator|new
name|AnnotatedTypeDelegate
argument_list|<>
argument_list|(
name|at
argument_list|,
name|methods
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|camelEventNotifiers (@bserves ProcessObserverMethod<T, ?> pom)
specifier|private
parameter_list|<
name|T
extends|extends
name|EventObject
parameter_list|>
name|void
name|camelEventNotifiers
parameter_list|(
annotation|@
name|Observes
name|ProcessObserverMethod
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|pom
parameter_list|)
block|{
comment|// Only activate Camel event notifiers for explicit Camel event observers, that is, an observer method for a super type won't activate notifiers.
name|Type
name|type
init|=
name|pom
operator|.
name|getObserverMethod
argument_list|()
operator|.
name|getObservedType
argument_list|()
decl_stmt|;
comment|// Camel events are raw types
if|if
condition|(
name|type
operator|instanceof
name|Class
operator|&&
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
operator|.
name|getPackage
argument_list|()
operator|.
name|equals
argument_list|(
name|AbstractExchangeEvent
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
condition|)
block|{
name|eventQualifiers
operator|.
name|addAll
argument_list|(
name|pom
operator|.
name|getObserverMethod
argument_list|()
operator|.
name|getObservedQualifiers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
name|singleton
argument_list|(
name|AnyLiteral
operator|.
name|INSTANCE
argument_list|)
else|:
name|pom
operator|.
name|getObserverMethod
argument_list|()
operator|.
name|getObservedQualifiers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|camelContextBeans (@bserves ProcessBean<T> pb)
specifier|private
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|void
name|camelContextBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessBean
argument_list|<
name|T
argument_list|>
name|pb
parameter_list|)
block|{
name|processCamelContextBean
argument_list|(
name|pb
operator|.
name|getAnnotated
argument_list|()
argument_list|,
name|pb
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|camelContextProducerFields (@bserves ProcessProducerField<T, ?> pb)
specifier|private
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|void
name|camelContextProducerFields
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerField
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|pb
parameter_list|)
block|{
name|processCamelContextBean
argument_list|(
name|pb
operator|.
name|getAnnotated
argument_list|()
argument_list|,
name|pb
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|camelContextProducerMethods (@bserves ProcessProducerMethod<T, ?> pb)
specifier|private
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|void
name|camelContextProducerMethods
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerMethod
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|pb
parameter_list|)
block|{
name|processCamelContextBean
argument_list|(
name|pb
operator|.
name|getAnnotated
argument_list|()
argument_list|,
name|pb
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processCamelContextBean (Annotated annotated, Bean<?> bean)
specifier|private
name|void
name|processCamelContextBean
parameter_list|(
name|Annotated
name|annotated
parameter_list|,
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
parameter_list|)
block|{
name|contextQualifiers
operator|.
name|addAll
argument_list|(
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Annotated must be wrapped because of OWB-1099
name|contextBeans
operator|.
name|put
argument_list|(
operator|new
name|AnnotatedWrapper
argument_list|(
name|annotated
argument_list|)
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
DECL|method|cdiCamelFactoryProducers (@bserves AfterBeanDiscovery abd)
specifier|private
name|void
name|cdiCamelFactoryProducers
parameter_list|(
annotation|@
name|Observes
name|AfterBeanDiscovery
name|abd
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Method
argument_list|,
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|producer
range|:
name|producerBeans
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|producer
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Annotation
argument_list|>
name|qualifiers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|producerQualifiers
operator|.
name|get
argument_list|(
name|producer
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|producer
operator|.
name|getKey
argument_list|()
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
name|CdiEventEndpoint
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
for|for
control|(
name|InjectionPoint
name|ip
range|:
name|cdiEventEndpoints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|qualifiers
operator|.
name|addAll
argument_list|(
name|ip
operator|.
name|getQualifiers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Endpoint
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|ProducerTemplate
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|qualifiers
operator|.
name|addAll
argument_list|(
name|CdiSpiHelper
operator|.
name|excludeElementOfTypes
argument_list|(
name|contextQualifiers
argument_list|,
name|Any
operator|.
name|class
argument_list|,
name|Default
operator|.
name|class
argument_list|,
name|Named
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: would be more correct to add a bean for each Camel context bean
name|abd
operator|.
name|addBean
argument_list|(
operator|new
name|BeanDelegate
argument_list|<>
argument_list|(
name|bean
argument_list|,
name|qualifiers
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addDefaultCamelContext (@bserves AfterBeanDiscovery abd, BeanManager manager)
specifier|private
name|void
name|addDefaultCamelContext
parameter_list|(
annotation|@
name|Observes
name|AfterBeanDiscovery
name|abd
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
if|if
condition|(
name|contextBeans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|abd
operator|.
name|addBean
argument_list|(
operator|new
name|CdiCamelContextBean
argument_list|(
name|manager
argument_list|,
name|environment
operator|.
name|camelContextInjectionTarget
argument_list|(
operator|new
name|CamelContextDefaultProducer
argument_list|()
argument_list|,
literal|null
argument_list|,
name|manager
argument_list|,
name|CdiCamelExtension
operator|.
name|this
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addCdiEventObserverMethods (@bserves AfterBeanDiscovery abd)
specifier|private
name|void
name|addCdiEventObserverMethods
parameter_list|(
annotation|@
name|Observes
name|AfterBeanDiscovery
name|abd
parameter_list|)
block|{
for|for
control|(
name|ObserverMethod
name|method
range|:
name|cdiEventEndpoints
operator|.
name|values
argument_list|()
control|)
block|{
name|abd
operator|.
name|addObserverMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createCamelContexts (@bserves AfterDeploymentValidation adv, BeanManager manager)
specifier|private
name|void
name|createCamelContexts
parameter_list|(
annotation|@
name|Observes
name|AfterDeploymentValidation
name|adv
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|Collection
argument_list|<
name|CamelContext
argument_list|>
name|contexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|context
range|:
name|manager
operator|.
name|getBeans
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|,
name|AnyLiteral
operator|.
name|INSTANCE
argument_list|)
control|)
block|{
name|contexts
operator|.
name|add
argument_list|(
name|BeanManagerHelper
operator|.
name|getReference
argument_list|(
name|manager
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add type converters to Camel contexts
name|CdiTypeConverterLoader
name|loader
init|=
operator|new
name|CdiTypeConverterLoader
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|converter
range|:
name|converters
control|)
block|{
for|for
control|(
name|CamelContext
name|context
range|:
name|contexts
control|)
block|{
name|loader
operator|.
name|loadConverterMethods
argument_list|(
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add routes to Camel contexts
name|boolean
name|deploymentException
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|routes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|manager
operator|.
name|getBeans
argument_list|(
name|RoutesBuilder
operator|.
name|class
argument_list|,
name|AnyLiteral
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
name|routes
operator|.
name|addAll
argument_list|(
name|manager
operator|.
name|getBeans
argument_list|(
name|RouteContainer
operator|.
name|class
argument_list|,
name|AnyLiteral
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|context
range|:
name|manager
operator|.
name|getBeans
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|,
name|AnyLiteral
operator|.
name|INSTANCE
argument_list|)
control|)
block|{
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|route
range|:
name|routes
control|)
block|{
name|Set
argument_list|<
name|Annotation
argument_list|>
name|qualifiers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|context
operator|.
name|getQualifiers
argument_list|()
argument_list|)
decl_stmt|;
name|qualifiers
operator|.
name|retainAll
argument_list|(
name|route
operator|.
name|getQualifiers
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|deploymentException
operator||=
operator|!
name|addRouteToContext
argument_list|(
name|route
argument_list|,
name|context
argument_list|,
name|manager
argument_list|,
name|adv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Let's return to avoid starting misconfigured contexts
if|if
condition|(
name|deploymentException
condition|)
block|{
return|return;
block|}
comment|// Trigger eager beans instantiation
for|for
control|(
name|AnnotatedType
argument_list|<
name|?
argument_list|>
name|type
range|:
name|eagerBeans
control|)
block|{
comment|// Calling toString is necessary to force the initialization of normal-scoped beans
name|BeanManagerHelper
operator|.
name|getReferencesByType
argument_list|(
name|manager
argument_list|,
name|type
operator|.
name|getJavaClass
argument_list|()
argument_list|,
name|AnyLiteral
operator|.
name|INSTANCE
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// Start Camel contexts
for|for
control|(
name|CamelContext
name|context
range|:
name|contexts
control|)
block|{
if|if
condition|(
name|ServiceStatus
operator|.
name|Started
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Camel CDI is starting Camel context [{}]"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|adv
operator|.
name|addDeploymentProblem
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Clean-up
name|converters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|camelBeans
operator|.
name|clear
argument_list|()
expr_stmt|;
name|eagerBeans
operator|.
name|clear
argument_list|()
expr_stmt|;
name|producerBeans
operator|.
name|clear
argument_list|()
expr_stmt|;
name|producerQualifiers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|addRouteToContext (Bean<?> routeBean, Bean<?> contextBean, BeanManager manager, AfterDeploymentValidation adv)
specifier|private
name|boolean
name|addRouteToContext
parameter_list|(
name|Bean
argument_list|<
name|?
argument_list|>
name|routeBean
parameter_list|,
name|Bean
argument_list|<
name|?
argument_list|>
name|contextBean
parameter_list|,
name|BeanManager
name|manager
parameter_list|,
name|AfterDeploymentValidation
name|adv
parameter_list|)
block|{
try|try
block|{
name|CamelContext
name|context
init|=
name|BeanManagerHelper
operator|.
name|getReference
argument_list|(
name|manager
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|,
name|contextBean
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|route
init|=
name|BeanManagerHelper
operator|.
name|getReference
argument_list|(
name|manager
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|routeBean
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|instanceof
name|RoutesBuilder
condition|)
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|(
name|RoutesBuilder
operator|)
name|route
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|route
operator|instanceof
name|RouteContainer
condition|)
block|{
name|context
operator|.
name|addRouteDefinitions
argument_list|(
operator|(
operator|(
name|RouteContainer
operator|)
name|route
operator|)
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid routes type ["
operator|+
name|routeBean
operator|.
name|getBeanClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"], must be either of type RoutesBuilder or RouteContainer!"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
name|adv
operator|.
name|addDeploymentProblem
argument_list|(
operator|new
name|InjectionException
argument_list|(
literal|"Error adding routes of type ["
operator|+
name|routeBean
operator|.
name|getBeanClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] to Camel context ["
operator|+
name|context
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|adv
operator|.
name|addDeploymentProblem
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

