begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|newSetFromMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
operator|.
name|isEqual
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|collectingAndThen
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
operator|.
name|concat
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Default
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|InjectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AfterBeanDiscovery
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AfterDeploymentValidation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Annotated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessAnnotatedType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessInjectionTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessObserverMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessProducerField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|ProcessProducerMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BeanInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FluentProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|AnyLiteral
operator|.
name|ANY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|ApplicationScopedLiteral
operator|.
name|APPLICATION_SCOPED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|BeanManagerHelper
operator|.
name|getReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|BeanManagerHelper
operator|.
name|getReferencesByType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiEventEndpoint
operator|.
name|eventEndpointUri
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiSpiHelper
operator|.
name|getQualifiers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiSpiHelper
operator|.
name|getRawType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiSpiHelper
operator|.
name|hasAnnotation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiSpiHelper
operator|.
name|hasType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiSpiHelper
operator|.
name|isAnnotationType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|DefaultLiteral
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Excluded
operator|.
name|EXCLUDED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|ResourceHelper
operator|.
name|getResource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Startup
operator|.
name|Literal
operator|.
name|STARTUP
import|;
end_import

begin_class
DECL|class|CdiCamelExtension
specifier|public
class|class
name|CdiCamelExtension
implements|implements
name|Extension
block|{
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CdiCamelExtension
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|CdiCamelEnvironment
name|environment
init|=
operator|new
name|CdiCamelEnvironment
argument_list|()
decl_stmt|;
DECL|field|converters
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|converters
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|camelBeans
specifier|private
specifier|final
name|Set
argument_list|<
name|AnnotatedType
argument_list|<
name|?
argument_list|>
argument_list|>
name|camelBeans
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|eagerBeans
specifier|private
specifier|final
name|Set
argument_list|<
name|AnnotatedType
argument_list|<
name|?
argument_list|>
argument_list|>
name|eagerBeans
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|cdiEventEndpoints
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CdiEventEndpoint
argument_list|<
name|?
argument_list|>
argument_list|>
name|cdiEventEndpoints
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|cdiBeans
specifier|private
specifier|final
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|cdiBeans
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|contextQualifiers
specifier|private
specifier|final
name|Set
argument_list|<
name|Annotation
argument_list|>
name|contextQualifiers
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|producerBeans
specifier|private
specifier|final
name|Map
argument_list|<
name|Method
argument_list|,
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|producerBeans
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|producerQualifiers
specifier|private
specifier|final
name|Map
argument_list|<
name|Method
argument_list|,
name|Set
argument_list|<
name|Annotation
argument_list|>
argument_list|>
name|producerQualifiers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|eventQualifiers
specifier|private
specifier|final
name|Set
argument_list|<
name|Annotation
argument_list|>
name|eventQualifiers
init|=
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|resources
specifier|private
specifier|final
name|Map
argument_list|<
name|AnnotatedType
argument_list|<
name|?
argument_list|>
argument_list|,
name|ImportResource
argument_list|>
name|resources
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|CdiCamelConfigurationEvent
name|configuration
init|=
operator|new
name|CdiCamelConfigurationEvent
argument_list|()
decl_stmt|;
DECL|method|getEventEndpoint (String uri)
name|CdiEventEndpoint
argument_list|<
name|?
argument_list|>
name|getEventEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|cdiEventEndpoints
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
DECL|method|getObserverEvents ()
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getObserverEvents
parameter_list|()
block|{
return|return
name|eventQualifiers
return|;
block|}
DECL|method|getContextQualifiers ()
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getContextQualifiers
parameter_list|()
block|{
return|return
name|contextQualifiers
return|;
block|}
DECL|method|processAnnotatedType (@bserves ProcessAnnotatedType<?> pat)
specifier|private
name|void
name|processAnnotatedType
parameter_list|(
annotation|@
name|Observes
name|ProcessAnnotatedType
argument_list|<
name|?
argument_list|>
name|pat
parameter_list|)
block|{
if|if
condition|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
operator|.
name|isAnnotationPresent
argument_list|(
name|Vetoed
operator|.
name|class
argument_list|)
condition|)
block|{
name|pat
operator|.
name|veto
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasAnnotation
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|Converter
operator|.
name|class
argument_list|)
condition|)
block|{
name|converters
operator|.
name|add
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
operator|.
name|getJavaClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasAnnotation
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|BeanInject
operator|.
name|class
argument_list|,
name|Consume
operator|.
name|class
argument_list|,
name|EndpointInject
operator|.
name|class
argument_list|,
name|Produce
operator|.
name|class
argument_list|,
name|PropertyInject
operator|.
name|class
argument_list|)
condition|)
block|{
name|camelBeans
operator|.
name|add
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasAnnotation
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|Consume
operator|.
name|class
argument_list|)
condition|)
block|{
name|eagerBeans
operator|.
name|add
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasAnnotation
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|ImportResource
operator|.
name|class
argument_list|)
condition|)
block|{
name|resources
operator|.
name|put
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|pat
operator|.
name|getAnnotatedType
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ImportResource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|camelContextBeans (@bserves ProcessInjectionTarget<T> pit, BeanManager manager)
specifier|private
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|void
name|camelContextBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessInjectionTarget
argument_list|<
name|T
argument_list|>
name|pit
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|pit
operator|.
name|setInjectionTarget
argument_list|(
name|environment
operator|.
name|camelContextInjectionTarget
argument_list|(
name|pit
operator|.
name|getInjectionTarget
argument_list|()
argument_list|,
name|pit
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|manager
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|camelContextProducers (@bserves ProcessProducer<?, T> pp, BeanManager manager)
specifier|private
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|void
name|camelContextProducers
parameter_list|(
annotation|@
name|Observes
name|ProcessProducer
argument_list|<
name|?
argument_list|,
name|T
argument_list|>
name|pp
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|pp
operator|.
name|setProducer
argument_list|(
name|environment
operator|.
name|camelContextProducer
argument_list|(
name|pp
operator|.
name|getProducer
argument_list|()
argument_list|,
name|pp
operator|.
name|getAnnotatedMember
argument_list|()
argument_list|,
name|manager
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|camelBeansPostProcessor (@bserves ProcessInjectionTarget<T> pit, BeanManager manager)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|camelBeansPostProcessor
parameter_list|(
annotation|@
name|Observes
name|ProcessInjectionTarget
argument_list|<
name|T
argument_list|>
name|pit
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
if|if
condition|(
name|camelBeans
operator|.
name|contains
argument_list|(
name|pit
operator|.
name|getAnnotatedType
argument_list|()
argument_list|)
condition|)
block|{
name|pit
operator|.
name|setInjectionTarget
argument_list|(
operator|new
name|CamelBeanInjectionTarget
argument_list|<>
argument_list|(
name|pit
operator|.
name|getInjectionTarget
argument_list|()
argument_list|,
name|manager
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|camelContextAware (@bserves ProcessInjectionTarget<T> pit, BeanManager manager)
specifier|private
parameter_list|<
name|T
extends|extends
name|CamelContextAware
parameter_list|>
name|void
name|camelContextAware
parameter_list|(
annotation|@
name|Observes
name|ProcessInjectionTarget
argument_list|<
name|T
argument_list|>
name|pit
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|pit
operator|.
name|setInjectionTarget
argument_list|(
operator|new
name|CamelBeanInjectionTarget
argument_list|<>
argument_list|(
name|pit
operator|.
name|getInjectionTarget
argument_list|()
argument_list|,
name|manager
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|endpointBeans (@bserves ProcessProducerMethod<T, CdiCamelFactory> ppm)
specifier|private
parameter_list|<
name|T
extends|extends
name|Endpoint
parameter_list|>
name|void
name|endpointBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerMethod
argument_list|<
name|T
argument_list|,
name|CdiCamelFactory
argument_list|>
name|ppm
parameter_list|)
block|{
name|producerBeans
operator|.
name|put
argument_list|(
name|ppm
operator|.
name|getAnnotatedProducerMethod
argument_list|()
operator|.
name|getJavaMember
argument_list|()
argument_list|,
name|ppm
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|consumerTemplateBeans (@bserves ProcessProducerMethod<ConsumerTemplate, CdiCamelFactory> ppm)
specifier|private
name|void
name|consumerTemplateBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerMethod
argument_list|<
name|ConsumerTemplate
argument_list|,
name|CdiCamelFactory
argument_list|>
name|ppm
parameter_list|)
block|{
name|producerBeans
operator|.
name|put
argument_list|(
name|ppm
operator|.
name|getAnnotatedProducerMethod
argument_list|()
operator|.
name|getJavaMember
argument_list|()
argument_list|,
name|ppm
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|producerTemplateBeans (@bserves ProcessProducerMethod<ProducerTemplate, CdiCamelFactory> ppm)
specifier|private
name|void
name|producerTemplateBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerMethod
argument_list|<
name|ProducerTemplate
argument_list|,
name|CdiCamelFactory
argument_list|>
name|ppm
parameter_list|)
block|{
name|producerBeans
operator|.
name|put
argument_list|(
name|ppm
operator|.
name|getAnnotatedProducerMethod
argument_list|()
operator|.
name|getJavaMember
argument_list|()
argument_list|,
name|ppm
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|fluentProducerTemplateBeans (@bserves ProcessProducerMethod<FluentProducerTemplate, CdiCamelFactory> ppm)
specifier|private
name|void
name|fluentProducerTemplateBeans
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerMethod
argument_list|<
name|FluentProducerTemplate
argument_list|,
name|CdiCamelFactory
argument_list|>
name|ppm
parameter_list|)
block|{
name|producerBeans
operator|.
name|put
argument_list|(
name|ppm
operator|.
name|getAnnotatedProducerMethod
argument_list|()
operator|.
name|getJavaMember
argument_list|()
argument_list|,
name|ppm
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|camelFactoryProducers (@bserves ProcessAnnotatedType<CdiCamelFactory> pat, BeanManager manager)
specifier|private
name|void
name|camelFactoryProducers
parameter_list|(
annotation|@
name|Observes
name|ProcessAnnotatedType
argument_list|<
name|CdiCamelFactory
argument_list|>
name|pat
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|pat
operator|.
name|setAnnotatedType
argument_list|(
operator|new
name|AnnotatedTypeDelegate
argument_list|<>
argument_list|(
name|pat
operator|.
name|getAnnotatedType
argument_list|()
argument_list|,
name|pat
operator|.
name|getAnnotatedType
argument_list|()
operator|.
name|getMethods
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|am
lambda|->
name|am
operator|.
name|isAnnotationPresent
argument_list|(
name|Produces
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|am
lambda|->
name|am
operator|.
name|getTypeClosure
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|isEqual
argument_list|(
name|TypeConverter
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|peek
argument_list|(
name|am
lambda|->
name|producerQualifiers
operator|.
name|put
argument_list|(
name|am
operator|.
name|getJavaMember
argument_list|()
argument_list|,
name|getQualifiers
argument_list|(
name|am
argument_list|,
name|manager
argument_list|)
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|am
lambda|->
operator|new
name|AnnotatedMethodDelegate
argument_list|<>
argument_list|(
name|am
argument_list|,
name|am
operator|.
name|getAnnotations
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|annotation
lambda|->
operator|!
name|manager
operator|.
name|isQualifier
argument_list|(
name|annotation
operator|.
name|annotationType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collectingAndThen
argument_list|(
name|toSet
argument_list|()
argument_list|,
name|annotations
lambda|->
block|{
name|annotations
operator|.
name|add
argument_list|(
name|EXCLUDED
argument_list|)
argument_list|; return
name|annotations
argument_list|;
block|}
block|)
end_class

begin_expr_stmt
unit|)))
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
end_expr_stmt

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_function
unit|}      private
DECL|method|camelEventNotifiers (@bserves ProcessObserverMethod<T, ?> pom)
parameter_list|<
name|T
extends|extends
name|CamelEvent
parameter_list|>
name|void
name|camelEventNotifiers
parameter_list|(
annotation|@
name|Observes
name|ProcessObserverMethod
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|pom
parameter_list|)
block|{
comment|// Only activate Camel event notifiers for explicit Camel event observers, that is, an observer method for a super type won't activate notifiers.
name|Type
name|type
init|=
name|pom
operator|.
name|getObserverMethod
argument_list|()
operator|.
name|getObservedType
argument_list|()
decl_stmt|;
comment|// Camel events are raw types
if|if
condition|(
name|type
operator|instanceof
name|Class
operator|&&
name|CamelEvent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|type
argument_list|)
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Annotation
argument_list|>
name|qualifiers
init|=
name|pom
operator|.
name|getObserverMethod
argument_list|()
operator|.
name|getObservedQualifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|eventQualifiers
operator|.
name|add
argument_list|(
name|ANY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qualifiers
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|qualifiers
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|isAnnotationType
argument_list|(
name|Named
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
name|eventQualifiers
operator|.
name|add
argument_list|(
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eventQualifiers
operator|.
name|addAll
argument_list|(
name|qualifiers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|beans (@bserves ProcessProducerField<?, ?> pb)
specifier|private
name|void
name|beans
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerField
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|pb
parameter_list|)
block|{
name|cdiBeans
operator|.
name|add
argument_list|(
name|pb
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|beans (@bserves ProcessProducerMethod<?, ?> pb)
specifier|private
name|void
name|beans
parameter_list|(
annotation|@
name|Observes
name|ProcessProducerMethod
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|pb
parameter_list|)
block|{
name|cdiBeans
operator|.
name|add
argument_list|(
name|pb
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|beans (@bserves ProcessBean<?> pb, BeanManager manager)
specifier|private
name|void
name|beans
parameter_list|(
annotation|@
name|Observes
name|ProcessBean
argument_list|<
name|?
argument_list|>
name|pb
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
name|cdiBeans
operator|.
name|add
argument_list|(
name|pb
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
comment|// Lookup for CDI event endpoint injection points
name|pb
operator|.
name|getBean
argument_list|()
operator|.
name|getInjectionPoints
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ip
lambda|->
name|CdiEventEndpoint
operator|.
name|class
operator|.
name|equals
argument_list|(
name|getRawType
argument_list|(
name|ip
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|ip
lambda|->
block|{
name|Type
name|type
operator|=
name|ip
operator|.
name|getType
argument_list|()
operator|instanceof
name|ParameterizedType
condition|?
operator|(
operator|(
name|ParameterizedType
operator|)
name|ip
operator|.
name|getType
argument_list|()
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
else|:
name|Object
operator|.
name|class
argument_list|;
name|String
name|uri
operator|=
name|eventEndpointUri
argument_list|(
name|type
argument_list|,
name|ip
operator|.
name|getQualifiers
argument_list|()
argument_list|)
argument_list|;
name|cdiEventEndpoints
operator|.
name|put
argument_list|(
name|uri
argument_list|,
operator|new
name|CdiEventEndpoint
argument_list|<>
argument_list|(
name|uri
argument_list|,
name|type
argument_list|,
name|ip
operator|.
name|getQualifiers
argument_list|()
argument_list|,
name|manager
argument_list|)
argument_list|)
argument_list|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      private
DECL|method|afterBeanDiscovery (@bserves AfterBeanDiscovery abd, BeanManager manager)
name|void
name|afterBeanDiscovery
parameter_list|(
annotation|@
name|Observes
name|AfterBeanDiscovery
name|abd
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
comment|// The set of extra Camel CDI beans
name|Set
argument_list|<
name|SyntheticBean
argument_list|<
name|?
argument_list|>
argument_list|>
name|extraBeans
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add beans from Camel XML resources
for|for
control|(
name|AnnotatedType
argument_list|<
name|?
argument_list|>
name|annotatedType
range|:
name|resources
operator|.
name|keySet
argument_list|()
control|)
block|{
name|XmlCdiBeanFactory
name|factory
init|=
name|XmlCdiBeanFactory
operator|.
name|with
argument_list|(
name|manager
argument_list|,
name|environment
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|ImportResource
name|resource
init|=
name|resources
operator|.
name|get
argument_list|(
name|annotatedType
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|resource
operator|.
name|value
argument_list|()
control|)
block|{
try|try
block|{
name|extraBeans
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|beansFrom
argument_list|(
name|path
argument_list|,
name|annotatedType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|cause
parameter_list|)
block|{
if|if
condition|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"AbstractCamelContextFactoryBean"
argument_list|)
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Importing Camel XML requires to have the 'camel-core-xml' dependency in the classpath!"
argument_list|)
expr_stmt|;
block|}
throw|throw
name|cause
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
name|abd
operator|.
name|addDefinitionError
argument_list|(
operator|new
name|InjectionException
argument_list|(
literal|"Error while importing resource ["
operator|+
name|getResource
argument_list|(
name|path
argument_list|,
name|annotatedType
operator|.
name|getJavaClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Camel contexts from the imported Camel XML
name|concat
argument_list|(
name|cdiBeans
operator|.
name|stream
argument_list|()
argument_list|,
name|extraBeans
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|hasType
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Bean
operator|::
name|getQualifiers
argument_list|)
operator|.
name|forEach
argument_list|(
name|contextQualifiers
operator|::
name|addAll
argument_list|)
expr_stmt|;
comment|// From the @ContextName qualifiers on RoutesBuilder and RouteContainer beans
name|List
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|routeBeans
init|=
name|cdiBeans
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|hasType
argument_list|(
name|RoutesBuilder
operator|.
name|class
argument_list|)
operator|.
name|or
argument_list|(
name|hasType
argument_list|(
name|RouteContainer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|bean
lambda|->
name|bean
operator|.
name|getQualifiers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|isAnnotationType
argument_list|(
name|ContextName
operator|.
name|class
argument_list|)
operator|.
name|and
argument_list|(
name|name
lambda|->
operator|!
name|contextQualifiers
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
operator|.
name|peek
argument_list|(
name|contextQualifiers
operator|::
name|add
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
range|:
name|routeBeans
control|)
block|{
name|Optional
argument_list|<
name|Annotation
argument_list|>
name|annotation
init|=
name|bean
operator|.
name|getQualifiers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|isAnnotationType
argument_list|(
name|ContextName
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|extraBeans
operator|.
name|add
argument_list|(
name|camelContextBean
argument_list|(
name|manager
argument_list|,
name|bean
operator|.
name|getBeanClass
argument_list|()
argument_list|,
name|ANY
argument_list|,
name|annotation
operator|.
name|get
argument_list|()
argument_list|,
name|APPLICATION_SCOPED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|allBeans
init|=
name|concat
argument_list|(
name|cdiBeans
operator|.
name|stream
argument_list|()
argument_list|,
name|extraBeans
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|contexts
init|=
name|allBeans
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|hasType
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|contexts
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|shouldDeployDefaultCamelContext
argument_list|(
name|allBeans
argument_list|)
condition|)
block|{
comment|// Add @Default Camel context bean if any
name|extraBeans
operator|.
name|add
argument_list|(
name|camelContextBean
argument_list|(
name|manager
argument_list|,
literal|null
argument_list|,
name|ANY
argument_list|,
name|DEFAULT
argument_list|,
name|APPLICATION_SCOPED
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contexts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Add the @Default qualifier if there is only one Camel context bean
name|Bean
argument_list|<
name|?
argument_list|>
name|context
init|=
name|contexts
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|getQualifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|DEFAULT
argument_list|)
condition|)
block|{
comment|// Only decorate if that's a programmatic bean
if|if
condition|(
name|context
operator|instanceof
name|SyntheticBean
condition|)
block|{
operator|(
operator|(
name|SyntheticBean
argument_list|<
name|?
argument_list|>
operator|)
name|context
operator|)
operator|.
name|addQualifier
argument_list|(
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Finally add the beans to the deployment
name|extraBeans
operator|.
name|forEach
argument_list|(
name|abd
operator|::
name|addBean
argument_list|)
expr_stmt|;
comment|// Update the CDI Camel factory beans
name|Set
argument_list|<
name|Annotation
argument_list|>
name|endpointQualifiers
init|=
name|cdiEventEndpoints
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|CdiEventEndpoint
operator|::
name|getQualifiers
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Set
operator|::
name|stream
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Annotation
argument_list|>
name|templateQualifiers
init|=
name|contextQualifiers
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|isAnnotationType
argument_list|(
name|Default
operator|.
name|class
argument_list|)
operator|.
name|or
argument_list|(
name|isAnnotationType
argument_list|(
name|Named
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|negate
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO: would be more correct to add a bean for each Camel context bean
name|producerBeans
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|producer
lambda|->
operator|new
name|BeanDelegate
argument_list|<>
argument_list|(
name|producer
operator|.
name|getValue
argument_list|()
argument_list|,
name|producerQualifiers
operator|.
name|get
argument_list|(
name|producer
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|CdiEventEndpoint
operator|.
name|class
operator|.
name|equals
argument_list|(
name|producer
operator|.
name|getKey
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|?
name|endpointQualifiers
else|:
name|templateQualifiers
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|abd
operator|::
name|addBean
argument_list|)
expr_stmt|;
comment|// Add CDI event endpoint observer methods
name|cdiEventEndpoints
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ForwardingObserverMethod
operator|::
operator|new
argument_list|)
operator|.
name|forEach
argument_list|(
name|abd
operator|::
name|addObserverMethod
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|shouldDeployDefaultCamelContext (Set<Bean<?>> beans)
specifier|private
name|boolean
name|shouldDeployDefaultCamelContext
parameter_list|(
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
parameter_list|)
block|{
return|return
name|beans
operator|.
name|stream
argument_list|()
comment|// Is there a Camel bean with the @Default qualifier?
comment|// Excluding internal components...
operator|.
name|filter
argument_list|(
name|bean
lambda|->
operator|!
name|bean
operator|.
name|getBeanClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|equals
argument_list|(
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|hasType
argument_list|(
name|CamelContextAware
operator|.
name|class
argument_list|)
operator|.
name|or
argument_list|(
name|hasType
argument_list|(
name|Component
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|hasType
argument_list|(
name|RouteContainer
operator|.
name|class
argument_list|)
operator|.
name|or
argument_list|(
name|hasType
argument_list|(
name|RoutesBuilder
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Bean
operator|::
name|getQualifiers
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Set
operator|::
name|stream
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|isEqual
argument_list|(
name|DEFAULT
argument_list|)
argument_list|)
comment|// Or a bean with Camel annotations?
operator|||
name|concat
argument_list|(
name|camelBeans
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|AnnotatedType
operator|::
name|getFields
argument_list|)
argument_list|,
name|camelBeans
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|AnnotatedType
operator|::
name|getMethods
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Set
operator|::
name|stream
argument_list|)
operator|.
name|map
argument_list|(
name|Annotated
operator|::
name|getAnnotations
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Set
operator|::
name|stream
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|isAnnotationType
argument_list|(
name|Consume
operator|.
name|class
argument_list|)
operator|.
name|and
argument_list|(
name|a
lambda|->
operator|(
operator|(
name|Consume
operator|)
name|a
operator|)
operator|.
name|context
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|or
argument_list|(
name|isAnnotationType
argument_list|(
name|BeanInject
operator|.
name|class
argument_list|)
operator|.
name|and
argument_list|(
name|a
lambda|->
operator|(
operator|(
name|BeanInject
operator|)
name|a
operator|)
operator|.
name|context
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|isAnnotationType
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
operator|.
name|and
argument_list|(
name|a
lambda|->
operator|(
operator|(
name|EndpointInject
operator|)
name|a
operator|)
operator|.
name|context
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|isAnnotationType
argument_list|(
name|Produce
operator|.
name|class
argument_list|)
operator|.
name|and
argument_list|(
name|a
lambda|->
operator|(
operator|(
name|Produce
operator|)
name|a
operator|)
operator|.
name|context
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|isAnnotationType
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
operator|.
name|and
argument_list|(
name|a
lambda|->
operator|(
operator|(
name|PropertyInject
operator|)
name|a
operator|)
operator|.
name|context
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
argument_list|)
argument_list|)
comment|// Or an injection point for Camel primitives?
operator|||
name|beans
operator|.
name|stream
argument_list|()
comment|// Excluding internal components...
operator|.
name|filter
argument_list|(
name|bean
lambda|->
operator|!
name|bean
operator|.
name|getBeanClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|equals
argument_list|(
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Bean
operator|::
name|getInjectionPoints
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Set
operator|::
name|stream
argument_list|)
operator|.
name|filter
argument_list|(
name|ip
lambda|->
name|getRawType
argument_list|(
name|ip
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.apache.camel"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|InjectionPoint
operator|::
name|getQualifiers
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Set
operator|::
name|stream
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|isAnnotationType
argument_list|(
name|Uri
operator|.
name|class
argument_list|)
operator|.
name|or
argument_list|(
name|isEqual
argument_list|(
name|DEFAULT
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|camelContextBean (BeanManager manager, Class<?> beanClass, Annotation... qualifiers)
specifier|private
name|SyntheticBean
argument_list|<
name|?
argument_list|>
name|camelContextBean
parameter_list|(
name|BeanManager
name|manager
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|,
name|Annotation
modifier|...
name|qualifiers
parameter_list|)
block|{
name|SyntheticAnnotated
name|annotated
init|=
operator|new
name|SyntheticAnnotated
argument_list|(
name|DefaultCamelContext
operator|.
name|class
argument_list|,
name|manager
operator|.
name|createAnnotatedType
argument_list|(
name|DefaultCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getTypeClosure
argument_list|()
argument_list|,
name|beanClass
argument_list|,
name|qualifiers
argument_list|)
decl_stmt|;
return|return
operator|new
name|SyntheticBean
argument_list|<>
argument_list|(
name|manager
argument_list|,
name|annotated
argument_list|,
name|DefaultCamelContext
operator|.
name|class
argument_list|,
name|environment
operator|.
name|camelContextInjectionTarget
argument_list|(
operator|new
name|SyntheticInjectionTarget
argument_list|<>
argument_list|(
name|DefaultCamelContext
operator|::
operator|new
argument_list|)
argument_list|,
name|annotated
argument_list|,
name|manager
argument_list|,
name|this
argument_list|)
argument_list|,
name|bean
lambda|->
literal|"Default Camel context bean with qualifiers "
operator|+
name|bean
operator|.
name|getQualifiers
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|afterDeploymentValidation (@bserves AfterDeploymentValidation adv, BeanManager manager)
specifier|private
name|void
name|afterDeploymentValidation
parameter_list|(
annotation|@
name|Observes
name|AfterDeploymentValidation
name|adv
parameter_list|,
name|BeanManager
name|manager
parameter_list|)
block|{
comment|// Send event for Camel CDI configuration
name|manager
operator|.
name|fireEvent
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|unmodifiable
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|CamelContext
argument_list|>
name|contexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|context
range|:
name|manager
operator|.
name|getBeans
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
control|)
block|{
name|contexts
operator|.
name|add
argument_list|(
name|getReference
argument_list|(
name|manager
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add type converters to Camel contexts
for|for
control|(
name|CamelContext
name|context
range|:
name|contexts
control|)
block|{
name|CdiTypeConverterLoader
name|loader
init|=
operator|new
name|CdiTypeConverterLoader
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|converter
range|:
name|converters
control|)
block|{
name|loader
operator|.
name|loadConverterMethods
argument_list|(
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add routes to Camel contexts
if|if
condition|(
name|configuration
operator|.
name|autoConfigureRoutes
argument_list|()
condition|)
block|{
name|boolean
name|deploymentException
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|routes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|manager
operator|.
name|getBeans
argument_list|(
name|RoutesBuilder
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
name|routes
operator|.
name|addAll
argument_list|(
name|manager
operator|.
name|getBeans
argument_list|(
name|RouteContainer
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|context
range|:
name|manager
operator|.
name|getBeans
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
control|)
block|{
for|for
control|(
name|Bean
argument_list|<
name|?
argument_list|>
name|route
range|:
name|routes
control|)
block|{
name|Set
argument_list|<
name|Annotation
argument_list|>
name|qualifiers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|context
operator|.
name|getQualifiers
argument_list|()
argument_list|)
decl_stmt|;
name|qualifiers
operator|.
name|retainAll
argument_list|(
name|route
operator|.
name|getQualifiers
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|deploymentException
operator||=
operator|!
name|addRouteToContext
argument_list|(
name|route
argument_list|,
name|context
argument_list|,
name|manager
argument_list|,
name|adv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Let's return to avoid starting misconfigured contexts
if|if
condition|(
name|deploymentException
condition|)
block|{
return|return;
block|}
block|}
comment|// Trigger eager beans instantiation (calling toString is necessary to force
comment|// the initialization of normal-scoped beans).
comment|// FIXME: This does not work with OpenWebBeans for bean whose bean type is an
comment|// interface as the Object methods does not get forwarded to the bean instances!
name|eagerBeans
operator|.
name|forEach
argument_list|(
name|type
lambda|->
name|getReferencesByType
argument_list|(
name|manager
argument_list|,
name|type
operator|.
name|getJavaClass
argument_list|()
argument_list|,
name|ANY
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getBeans
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|ANY
argument_list|,
name|STARTUP
argument_list|)
operator|.
name|forEach
argument_list|(
name|bean
lambda|->
name|getReference
argument_list|(
name|manager
argument_list|,
name|bean
operator|.
name|getBeanClass
argument_list|()
argument_list|,
name|bean
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start Camel contexts
if|if
condition|(
name|configuration
operator|.
name|autoStartContexts
argument_list|()
condition|)
block|{
for|for
control|(
name|CamelContext
name|context
range|:
name|contexts
control|)
block|{
if|if
condition|(
name|ServiceStatus
operator|.
name|Started
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Camel CDI is starting Camel context [{}]"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|adv
operator|.
name|addDeploymentProblem
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Clean-up
name|Stream
operator|.
name|of
argument_list|(
name|converters
argument_list|,
name|camelBeans
argument_list|,
name|eagerBeans
argument_list|,
name|cdiBeans
argument_list|)
operator|.
name|forEach
argument_list|(
name|Set
operator|::
name|clear
argument_list|)
expr_stmt|;
name|Stream
operator|.
name|of
argument_list|(
name|producerBeans
argument_list|,
name|producerQualifiers
argument_list|)
operator|.
name|forEach
argument_list|(
name|Map
operator|::
name|clear
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|addRouteToContext (Bean<?> routeBean, Bean<?> contextBean, BeanManager manager, AfterDeploymentValidation adv)
specifier|private
name|boolean
name|addRouteToContext
parameter_list|(
name|Bean
argument_list|<
name|?
argument_list|>
name|routeBean
parameter_list|,
name|Bean
argument_list|<
name|?
argument_list|>
name|contextBean
parameter_list|,
name|BeanManager
name|manager
parameter_list|,
name|AfterDeploymentValidation
name|adv
parameter_list|)
block|{
try|try
block|{
name|CamelContext
name|context
init|=
name|getReference
argument_list|(
name|manager
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|,
name|contextBean
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|route
init|=
name|getReference
argument_list|(
name|manager
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|routeBean
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|instanceof
name|RoutesBuilder
condition|)
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|(
name|RoutesBuilder
operator|)
name|route
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|route
operator|instanceof
name|RouteContainer
condition|)
block|{
name|context
operator|.
name|adapt
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|)
operator|.
name|addRouteDefinitions
argument_list|(
operator|(
operator|(
name|RouteContainer
operator|)
name|route
operator|)
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid routes type ["
operator|+
name|routeBean
operator|.
name|getBeanClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"], "
operator|+
literal|"must be either of type RoutesBuilder or RouteContainer!"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
name|adv
operator|.
name|addDeploymentProblem
argument_list|(
operator|new
name|InjectionException
argument_list|(
literal|"Error adding routes of type ["
operator|+
name|routeBean
operator|.
name|getBeanClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] "
operator|+
literal|"to Camel context ["
operator|+
name|context
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|adv
operator|.
name|addDeploymentProblem
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function

unit|}
end_unit

