begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|InjectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|osgi
operator|.
name|OsgiCamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|osgi
operator|.
name|OsgiCamelContextPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|osgi
operator|.
name|utils
operator|.
name|BundleContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContextNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelContextNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_class
DECL|class|CamelContextOsgiProducer
specifier|final
class|class
name|CamelContextOsgiProducer
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
extends|extends
name|DelegateProducer
argument_list|<
name|T
argument_list|>
block|{
DECL|method|CamelContextOsgiProducer (Producer<T> delegate)
name|CamelContextOsgiProducer
parameter_list|(
name|Producer
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|produce (CreationalContext<T> ctx)
specifier|public
name|T
name|produce
parameter_list|(
name|CreationalContext
argument_list|<
name|T
argument_list|>
name|ctx
parameter_list|)
block|{
name|T
name|context
init|=
name|super
operator|.
name|produce
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
comment|// Register the context in the OSGi registry
name|BundleContext
name|bundle
init|=
name|BundleContextUtils
operator|.
name|getBundleContext
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
operator|new
name|OsgiCamelContextPublisher
argument_list|(
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|context
operator|instanceof
name|DefaultCamelContext
operator|)
condition|)
block|{
comment|// Fail fast for the time being to avoid side effects by some methods get declared on the CamelContext interface
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Camel CDI requires Camel context ["
operator|+
name|context
operator|.
name|getName
argument_list|()
operator|+
literal|"] to be a subtype of DefaultCamelContext"
argument_list|)
throw|;
block|}
name|DefaultCamelContext
name|adapted
init|=
name|context
operator|.
name|adapt
argument_list|(
name|DefaultCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|adapted
operator|.
name|setRegistry
argument_list|(
name|OsgiCamelContextHelper
operator|.
name|wrapRegistry
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getRegistry
argument_list|()
argument_list|,
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
name|CamelContextNameStrategy
name|strategy
init|=
name|context
operator|.
name|getNameStrategy
argument_list|()
decl_stmt|;
name|OsgiCamelContextHelper
operator|.
name|osgiUpdate
argument_list|(
name|adapted
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
comment|// FIXME: the above call should not override explicit strategies provided by the end user or should decorate them instead of overriding them completely
if|if
condition|(
operator|!
operator|(
name|strategy
operator|instanceof
name|DefaultCamelContextNameStrategy
operator|)
condition|)
block|{
name|context
operator|.
name|setNameStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
block|}
end_class

end_unit

