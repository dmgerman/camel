begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|InjectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|UnsatisfiedResolutionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BeanInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|CamelPostProcessorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
import|;
end_import

begin_class
annotation|@
name|Vetoed
DECL|class|CdiCamelBeanPostProcessor
specifier|final
class|class
name|CdiCamelBeanPostProcessor
extends|extends
name|DefaultCamelBeanPostProcessor
block|{
DECL|field|manager
specifier|private
specifier|final
name|BeanManager
name|manager
decl_stmt|;
DECL|field|postProcessorHelpers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CamelPostProcessorHelper
argument_list|>
name|postProcessorHelpers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO: proper support for multi Camel contexts and custom context qualifiers
DECL|method|CdiCamelBeanPostProcessor (BeanManager manager)
name|CdiCamelBeanPostProcessor
parameter_list|(
name|BeanManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
DECL|method|injectFields (final Object bean, final String beanName)
specifier|protected
name|void
name|injectFields
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|doWithFields
argument_list|(
name|bean
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|ReflectionHelper
operator|.
name|FieldCallback
argument_list|()
block|{
specifier|public
name|void
name|doWith
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|PropertyInject
name|propertyInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyInject
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|injectFieldProperty
argument_list|(
name|field
argument_list|,
name|propertyInject
operator|.
name|value
argument_list|()
argument_list|,
name|propertyInject
operator|.
name|defaultValue
argument_list|()
argument_list|,
name|propertyInject
operator|.
name|context
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Injection of ["
operator|+
name|propertyInject
operator|+
literal|"] for field ["
operator|+
name|field
operator|+
literal|"] failed!"
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
name|BeanInject
name|beanInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|BeanInject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: proper support for multi Camel contexts
if|if
condition|(
name|beanInject
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|beanInject
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|injectFieldBean
argument_list|(
name|field
argument_list|,
name|beanInject
operator|.
name|value
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Injection of ["
operator|+
name|beanInject
operator|+
literal|"] for field ["
operator|+
name|field
operator|+
literal|"] failed!"
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
name|EndpointInject
name|endpointInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointInject
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|injectField
argument_list|(
name|field
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|context
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Injection of ["
operator|+
name|endpointInject
operator|+
literal|"] for field ["
operator|+
name|field
operator|+
literal|"] failed!"
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
name|Produce
name|produce
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Produce
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|produce
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|injectField
argument_list|(
name|field
argument_list|,
name|produce
operator|.
name|uri
argument_list|()
argument_list|,
name|produce
operator|.
name|ref
argument_list|()
argument_list|,
name|produce
operator|.
name|property
argument_list|()
argument_list|,
name|produce
operator|.
name|context
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
operator|new
name|InjectionException
argument_list|(
literal|"Injection of ["
operator|+
name|produce
operator|+
literal|"] for field ["
operator|+
name|field
operator|+
literal|"] failed!"
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|injectField (Field field, String uri, String ref, String property, String context, Object bean, String beanName)
specifier|private
name|void
name|injectField
parameter_list|(
name|Field
name|field
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|context
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|bean
argument_list|,
name|getPostProcessorHelper
argument_list|(
name|context
argument_list|)
operator|.
name|getInjectionValue
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|uri
argument_list|,
name|ref
argument_list|,
name|property
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|injectFieldProperty (Field field, String property, String defaultValue, String context, Object bean, String beanName)
specifier|private
name|void
name|injectFieldProperty
parameter_list|(
name|Field
name|field
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|String
name|context
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|bean
argument_list|,
name|getPostProcessorHelper
argument_list|(
name|context
argument_list|)
operator|.
name|getInjectionPropertyValue
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|property
argument_list|,
name|defaultValue
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getPostProcessorHelper (String contextName)
specifier|private
name|CamelPostProcessorHelper
name|getPostProcessorHelper
parameter_list|(
name|String
name|contextName
parameter_list|)
block|{
name|CamelPostProcessorHelper
name|helper
init|=
name|postProcessorHelpers
operator|.
name|get
argument_list|(
name|contextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|==
literal|null
condition|)
block|{
name|CamelContext
name|context
init|=
name|getOrLookupCamelContext
argument_list|(
name|contextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsatisfiedResolutionException
argument_list|(
literal|"No Camel context with name ["
operator|+
name|contextName
operator|+
literal|"] is deployed!"
argument_list|)
throw|;
block|}
name|helper
operator|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|postProcessorHelpers
operator|.
name|put
argument_list|(
name|contextName
argument_list|,
name|helper
argument_list|)
expr_stmt|;
block|}
return|return
name|helper
return|;
block|}
DECL|method|getOrLookupCamelContext (String contextName)
specifier|private
name|CamelContext
name|getOrLookupCamelContext
parameter_list|(
name|String
name|contextName
parameter_list|)
block|{
comment|// TODO: proper support for custom context qualifiers
return|return
name|BeanManagerHelper
operator|.
name|getReferenceByType
argument_list|(
name|manager
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|,
name|contextName
operator|.
name|isEmpty
argument_list|()
condition|?
name|DefaultLiteral
operator|.
name|INSTANCE
else|:
name|ContextName
operator|.
name|Literal
operator|.
name|of
argument_list|(
name|contextName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOrLookupCamelContext ()
specifier|public
name|CamelContext
name|getOrLookupCamelContext
parameter_list|()
block|{
return|return
name|BeanManagerHelper
operator|.
name|getReferenceByType
argument_list|(
name|manager
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

