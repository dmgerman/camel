begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Annotated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|ContextName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Produces {@link Endpoint} and {@link org.apache.camel.ProducerTemplate} instances for injection into beans  */
end_comment

begin_class
DECL|class|CamelFactory
specifier|public
class|class
name|CamelFactory
block|{
DECL|field|camelContextMap
annotation|@
name|Inject
name|CamelContextMap
name|camelContextMap
decl_stmt|;
annotation|@
name|Produces
annotation|@
name|Mock
DECL|method|createMockEndpoint (InjectionPoint point)
specifier|public
name|MockEndpoint
name|createMockEndpoint
parameter_list|(
name|InjectionPoint
name|point
parameter_list|)
block|{
name|Mock
name|annotation
init|=
name|point
operator|.
name|getAnnotated
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Mock
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|annotation
argument_list|,
literal|"Should be annotated with @Mock"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|annotation
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|uri
operator|=
literal|"mock:"
operator|+
name|point
operator|.
name|getMember
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|getCamelContext
argument_list|(
name|point
argument_list|,
name|annotation
operator|.
name|context
argument_list|()
argument_list|)
argument_list|,
name|uri
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Produces
annotation|@
name|Uri
argument_list|(
literal|""
argument_list|)
DECL|method|createEndpoint (InjectionPoint point)
specifier|public
name|Endpoint
name|createEndpoint
parameter_list|(
name|InjectionPoint
name|point
parameter_list|)
block|{
name|Annotated
name|annotated
init|=
name|point
operator|.
name|getAnnotated
argument_list|()
decl_stmt|;
name|Uri
name|uri
init|=
name|annotated
operator|.
name|getAnnotation
argument_list|(
name|Uri
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|uri
argument_list|,
literal|"Should be annotated with @Uri"
argument_list|)
expr_stmt|;
return|return
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|getCamelContext
argument_list|(
name|point
argument_list|,
name|uri
operator|.
name|context
argument_list|()
argument_list|)
argument_list|,
name|uri
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Produces
annotation|@
name|Uri
argument_list|(
literal|""
argument_list|)
DECL|method|createProducerTemplate (InjectionPoint point)
specifier|public
name|ProducerTemplate
name|createProducerTemplate
parameter_list|(
name|InjectionPoint
name|point
parameter_list|)
block|{
name|Annotated
name|annotated
init|=
name|point
operator|.
name|getAnnotated
argument_list|()
decl_stmt|;
name|Uri
name|uri
init|=
name|annotated
operator|.
name|getAnnotation
argument_list|(
name|Uri
operator|.
name|class
argument_list|)
decl_stmt|;
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|(
name|point
argument_list|,
name|uri
operator|.
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|ProducerTemplate
name|producerTemplate
init|=
name|camelContext
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|uri
argument_list|,
literal|"Should be annotated with @Uri"
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|camelContext
argument_list|,
name|uri
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|producerTemplate
operator|.
name|setDefaultEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|producerTemplate
return|;
block|}
DECL|method|getCamelContext (InjectionPoint point, String contextName)
specifier|protected
name|CamelContext
name|getCamelContext
parameter_list|(
name|InjectionPoint
name|point
parameter_list|,
name|String
name|contextName
parameter_list|)
block|{
name|ContextName
name|startup
init|=
name|point
operator|.
name|getAnnotated
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ContextName
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|startup
operator|==
literal|null
condition|)
block|{
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|point
operator|.
name|getBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|bean
operator|!=
literal|null
condition|)
block|{
name|startup
operator|=
name|bean
operator|.
name|getBeanClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ContextName
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|name
init|=
name|CamelExtension
operator|.
name|getCamelContextName
argument_list|(
name|contextName
argument_list|,
name|startup
argument_list|)
decl_stmt|;
return|return
name|camelContextMap
operator|.
name|getMandatoryCamelContext
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

