begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
operator|.
name|AbstractCamelProducerTemplateFactoryBean
import|;
end_import

begin_comment
comment|/**  * A factory for creating a new {@link org.apache.camel.ProducerTemplate}  * instance with a minimum of XML  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"template"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ProducerTemplateFactoryBean
specifier|public
class|class
name|ProducerTemplateFactoryBean
extends|extends
name|AbstractCamelProducerTemplateFactoryBean
implements|implements
name|BeanManagerAware
block|{
annotation|@
name|XmlTransient
DECL|field|manager
specifier|private
name|BeanManager
name|manager
decl_stmt|;
annotation|@
name|Override
DECL|method|setBeanManager (BeanManager manager)
specifier|public
name|void
name|setBeanManager
parameter_list|(
name|BeanManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContextWithId (String camelContextId)
specifier|protected
name|CamelContext
name|getCamelContextWithId
parameter_list|(
name|String
name|camelContextId
parameter_list|)
block|{
return|return
name|BeanManagerHelper
operator|.
name|getCamelContextById
argument_list|(
name|manager
argument_list|,
name|camelContextId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|discoverDefaultCamelContext ()
specifier|protected
name|CamelContext
name|discoverDefaultCamelContext
parameter_list|()
block|{
return|return
name|BeanManagerHelper
operator|.
name|getDefaultCamelContext
argument_list|(
name|manager
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Work-around as DefaultProducerTemplate does not have a default no-args constructor
comment|// which leads to OpenWebBeans being unable to create proxies for the corresponding bean
DECL|method|getObjectType ()
specifier|public
name|Class
name|getObjectType
parameter_list|()
block|{
return|return
name|ProducerTemplate
operator|.
name|class
return|;
block|}
block|}
end_class

end_unit

