begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cdi.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cdi
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A helper class to be able to resolve CamelContext instances by their name  */
end_comment

begin_class
annotation|@
name|ApplicationScoped
DECL|class|CamelContextMap
specifier|public
class|class
name|CamelContextMap
block|{
annotation|@
name|Inject
DECL|field|camelContexts
specifier|private
name|Instance
argument_list|<
name|CamelContext
argument_list|>
name|camelContexts
decl_stmt|;
DECL|field|camelContextMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CamelContext
argument_list|>
name|camelContextMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CamelContext
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|PostConstruct
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContexts
argument_list|,
literal|"camelContexts"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CamelContext
argument_list|>
name|iterator
init|=
name|camelContexts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CamelContext
name|camelContext
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|camelContextMap
operator|.
name|put
argument_list|(
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the {@link CamelContext} for the given context name      */
DECL|method|getCamelContext (String name)
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|CamelContext
name|answer
init|=
name|camelContextMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// lets return the first one for the default context?
name|Collection
argument_list|<
name|CamelContext
argument_list|>
name|values
init|=
name|camelContextMap
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|CamelContext
name|value
range|:
name|values
control|)
block|{
name|answer
operator|=
name|value
expr_stmt|;
break|break;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Returns the CamelContext for the given name or throw an exception      */
DECL|method|getMandatoryCamelContext (String contextName)
specifier|public
name|CamelContext
name|getMandatoryCamelContext
parameter_list|(
name|String
name|contextName
parameter_list|)
block|{
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|(
name|contextName
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"No CamelContext found for name '"
operator|+
name|contextName
operator|+
literal|"' when available names are "
operator|+
name|camelContextMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
DECL|method|getCamelContextMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CamelContext
argument_list|>
name|getCamelContextMap
parameter_list|()
block|{
return|return
name|camelContextMap
return|;
block|}
block|}
end_class

end_unit

