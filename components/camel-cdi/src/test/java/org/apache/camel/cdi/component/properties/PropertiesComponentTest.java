begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.component.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|component
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Verifies behavior of properties component in CDI environment.  */
end_comment

begin_class
DECL|class|PropertiesComponentTest
specifier|public
class|class
name|PropertiesComponentTest
extends|extends
name|CdiContextTestSupport
block|{
annotation|@
name|Test
DECL|method|shouldUseCdiProperties ()
specifier|public
name|void
name|shouldUseCdiProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|context
operator|.
name|getComponent
argument_list|(
literal|"properties"
argument_list|)
operator|instanceof
name|CdiPropertiesComponent
argument_list|)
expr_stmt|;
name|String
name|resolved
init|=
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
literal|"d{{directEndpoint}}b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ddirect:injectb"
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|resolved
operator|=
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
literal|"{{directEndpoint}}_{{directEndpoint}}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"direct:inject_direct:inject"
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullArgument ()
specifier|public
name|void
name|testNullArgument
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextWithNoPlaceholder ()
specifier|public
name|void
name|testTextWithNoPlaceholder
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"IamAnonymous"
argument_list|,
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
literal|"IamAnonymous"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testUnknownNestedPlaceholder ()
specifier|public
name|void
name|testUnknownNestedPlaceholder
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
literal|"{{IamAnonymous}}"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

