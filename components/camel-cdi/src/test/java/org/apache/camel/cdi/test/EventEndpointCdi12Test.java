begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Default
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|util
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiCamelExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|EventConsumingRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|EventProducingRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|pojo
operator|.
name|EventPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|qualifier
operator|.
name|BarQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|qualifier
operator|.
name|FooQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|test
operator|.
name|api
operator|.
name|Deployment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|junit
operator|.
name|Arquillian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Archive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ShrinkWrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|EmptyAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|spec
operator|.
name|JavaArchive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|assertIsSatisfied
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Arquillian
operator|.
name|class
argument_list|)
DECL|class|EventEndpointCdi12Test
specifier|public
class|class
name|EventEndpointCdi12Test
block|{
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"mock:consumeObject"
argument_list|)
DECL|field|consumeObject
specifier|private
name|MockEndpoint
name|consumeObject
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"mock:consumeString"
argument_list|)
DECL|field|consumeString
specifier|private
name|MockEndpoint
name|consumeString
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"mock:consumeStringPayload"
argument_list|)
DECL|field|consumeStringPayload
specifier|private
name|MockEndpoint
name|consumeStringPayload
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"mock:consumeIntegerPayload"
argument_list|)
DECL|field|consumeIntegerPayload
specifier|private
name|MockEndpoint
name|consumeIntegerPayload
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"mock:consumeFooQualifier"
argument_list|)
DECL|field|consumeFooQualifier
specifier|private
name|MockEndpoint
name|consumeFooQualifier
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"mock:consumeBarQualifier"
argument_list|)
DECL|field|consumeBarQualifier
specifier|private
name|MockEndpoint
name|consumeBarQualifier
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"direct:produceObject"
argument_list|)
DECL|field|produceObject
specifier|private
name|ProducerTemplate
name|produceObject
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"direct:produceString"
argument_list|)
DECL|field|produceString
specifier|private
name|ProducerTemplate
name|produceString
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"direct:produceStringPayload"
argument_list|)
DECL|field|produceStringPayload
specifier|private
name|ProducerTemplate
name|produceStringPayload
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"direct:produceIntegerPayload"
argument_list|)
DECL|field|produceIntegerPayload
specifier|private
name|ProducerTemplate
name|produceIntegerPayload
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"direct:produceFooQualifier"
argument_list|)
DECL|field|produceFooQualifier
specifier|private
name|ProducerTemplate
name|produceFooQualifier
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"direct:produceBarQualifier"
argument_list|)
DECL|field|produceBarQualifier
specifier|private
name|ProducerTemplate
name|produceBarQualifier
decl_stmt|;
annotation|@
name|Inject
DECL|field|objectEvent
specifier|private
name|Event
argument_list|<
name|Object
argument_list|>
name|objectEvent
decl_stmt|;
annotation|@
name|Inject
DECL|field|stringPayloadEvent
specifier|private
name|Event
argument_list|<
name|EventPayload
argument_list|<
name|String
argument_list|>
argument_list|>
name|stringPayloadEvent
decl_stmt|;
annotation|@
name|Inject
DECL|field|integerPayloadEvent
specifier|private
name|Event
argument_list|<
name|EventPayload
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|integerPayloadEvent
decl_stmt|;
annotation|@
name|Inject
DECL|field|observer
specifier|private
name|EventObserver
name|observer
decl_stmt|;
annotation|@
name|Deployment
DECL|method|deployment ()
specifier|public
specifier|static
name|Archive
argument_list|<
name|?
argument_list|>
name|deployment
parameter_list|()
block|{
return|return
name|ShrinkWrap
operator|.
name|create
argument_list|(
name|JavaArchive
operator|.
name|class
argument_list|)
comment|// Camel CDI
operator|.
name|addPackage
argument_list|(
name|CdiCamelExtension
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
comment|// Test classes
operator|.
name|addClasses
argument_list|(
name|EventConsumingRoute
operator|.
name|class
argument_list|,
name|EventProducingRoute
operator|.
name|class
argument_list|)
comment|// Bean archive deployment descriptor
operator|.
name|addAsManifestResource
argument_list|(
name|EmptyAsset
operator|.
name|INSTANCE
argument_list|,
literal|"beans.xml"
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|resetCollectedEventsAndMockEndpoints ()
specifier|public
name|void
name|resetCollectedEventsAndMockEndpoints
parameter_list|()
block|{
name|observer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|consumeObject
operator|.
name|reset
argument_list|()
expr_stmt|;
name|consumeString
operator|.
name|reset
argument_list|()
expr_stmt|;
name|consumeStringPayload
operator|.
name|reset
argument_list|()
expr_stmt|;
name|consumeIntegerPayload
operator|.
name|reset
argument_list|()
expr_stmt|;
name|consumeFooQualifier
operator|.
name|reset
argument_list|()
expr_stmt|;
name|consumeBarQualifier
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendEventsToConsumers ()
specifier|public
name|void
name|sendEventsToConsumers
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|consumeObject
operator|.
name|expectedMessageCount
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|consumeObject
operator|.
name|expectedBodiesReceived
argument_list|(
literal|1234
argument_list|,
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|123L
argument_list|,
literal|987L
argument_list|)
expr_stmt|;
name|consumeString
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumeString
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|consumeStringPayload
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|consumeStringPayload
operator|.
name|expectedBodiesReceived
argument_list|(
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|consumeIntegerPayload
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|consumeIntegerPayload
operator|.
name|expectedBodiesReceived
argument_list|(
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|consumeFooQualifier
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumeFooQualifier
operator|.
name|expectedBodiesReceived
argument_list|(
literal|123L
argument_list|)
expr_stmt|;
name|consumeBarQualifier
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumeBarQualifier
operator|.
name|expectedBodiesReceived
argument_list|(
literal|987L
argument_list|)
expr_stmt|;
name|objectEvent
operator|.
name|select
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|fire
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|objectEvent
operator|.
name|select
argument_list|(
operator|new
name|TypeLiteral
argument_list|<
name|EventPayload
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{         }
argument_list|)
operator|.
name|fire
argument_list|(
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|stringPayloadEvent
operator|.
name|select
argument_list|(
operator|new
name|BarQualifier
operator|.
name|Literal
argument_list|()
argument_list|)
operator|.
name|fire
argument_list|(
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|objectEvent
operator|.
name|select
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|fire
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|integerPayloadEvent
operator|.
name|fire
argument_list|(
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|integerPayloadEvent
operator|.
name|fire
argument_list|(
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|objectEvent
operator|.
name|select
argument_list|(
name|Long
operator|.
name|class
argument_list|,
operator|new
name|FooQualifier
operator|.
name|Literal
argument_list|()
argument_list|)
operator|.
name|fire
argument_list|(
literal|123L
argument_list|)
expr_stmt|;
name|objectEvent
operator|.
name|select
argument_list|(
name|Long
operator|.
name|class
argument_list|,
operator|new
name|BarQualifier
operator|.
name|Literal
argument_list|()
argument_list|)
operator|.
name|fire
argument_list|(
literal|987L
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|consumeObject
argument_list|,
name|consumeString
argument_list|,
name|consumeStringPayload
argument_list|,
name|consumeIntegerPayload
argument_list|,
name|consumeFooQualifier
argument_list|,
name|consumeBarQualifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendMessagesToProducers ()
specifier|public
name|void
name|sendMessagesToProducers
parameter_list|()
block|{
name|produceObject
operator|.
name|sendBody
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|EventPayload
name|foo
init|=
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|produceStringPayload
operator|.
name|sendBody
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|produceObject
operator|.
name|sendBody
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|produceString
operator|.
name|sendBody
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|EventPayload
argument_list|<
name|Integer
argument_list|>
name|bar
init|=
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|produceIntegerPayload
operator|.
name|sendBody
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|EventPayload
argument_list|<
name|Integer
argument_list|>
name|baz
init|=
operator|new
name|EventPayload
argument_list|<>
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|produceIntegerPayload
operator|.
name|sendBody
argument_list|(
name|baz
argument_list|)
expr_stmt|;
name|produceFooQualifier
operator|.
name|sendBody
argument_list|(
literal|456L
argument_list|)
expr_stmt|;
name|produceBarQualifier
operator|.
name|sendBody
argument_list|(
literal|495L
argument_list|)
expr_stmt|;
name|produceObject
operator|.
name|sendBody
argument_list|(
literal|777L
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|observer
operator|.
name|getObjectEvents
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"string"
argument_list|,
name|foo
argument_list|,
literal|1234
argument_list|,
literal|"test"
argument_list|,
name|bar
argument_list|,
name|baz
argument_list|,
literal|456L
argument_list|,
literal|495L
argument_list|,
literal|777L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|observer
operator|.
name|getStringEvents
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"string"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|observer
operator|.
name|getStringPayloadEvents
argument_list|()
argument_list|,
name|contains
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|observer
operator|.
name|getIntegerPayloadEvents
argument_list|()
argument_list|,
name|contains
argument_list|(
name|bar
argument_list|,
name|baz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|observer
operator|.
name|getDefaultQualifierEvents
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"string"
argument_list|,
name|foo
argument_list|,
literal|1234
argument_list|,
literal|"test"
argument_list|,
name|bar
argument_list|,
name|baz
argument_list|,
literal|777L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|observer
operator|.
name|getFooQualifierEvents
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|456L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|observer
operator|.
name|getBarQualifierEvents
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|495L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ApplicationScoped
DECL|class|EventObserver
specifier|static
class|class
name|EventObserver
block|{
DECL|field|objectEvents
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|objectEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|defaultQualifierEvents
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|defaultQualifierEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|stringEvents
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|stringEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|stringPayloadEvents
specifier|private
specifier|final
name|List
argument_list|<
name|EventPayload
argument_list|<
name|String
argument_list|>
argument_list|>
name|stringPayloadEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|integerPayloadEvents
specifier|private
specifier|final
name|List
argument_list|<
name|EventPayload
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|integerPayloadEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fooQualifierEvents
specifier|private
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|fooQualifierEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|barQualifierEvents
specifier|private
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|barQualifierEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|collectObjectEvents (@bserves Object event)
name|void
name|collectObjectEvents
parameter_list|(
annotation|@
name|Observes
name|Object
name|event
parameter_list|)
block|{
name|objectEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|collectStringEvents (@bserves String event)
name|void
name|collectStringEvents
parameter_list|(
annotation|@
name|Observes
name|String
name|event
parameter_list|)
block|{
name|stringEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|collectStringPayloadEvents (@bserves EventPayload<String> event)
name|void
name|collectStringPayloadEvents
parameter_list|(
annotation|@
name|Observes
name|EventPayload
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|stringPayloadEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|collectIntegerPayloadEvents (@bserves EventPayload<Integer> event)
name|void
name|collectIntegerPayloadEvents
parameter_list|(
annotation|@
name|Observes
name|EventPayload
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|integerPayloadEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|collectDefaultQualifierEvents (@bserves @efault Object event)
name|void
name|collectDefaultQualifierEvents
parameter_list|(
annotation|@
name|Observes
annotation|@
name|Default
name|Object
name|event
parameter_list|)
block|{
name|defaultQualifierEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|collectFooQualifierEvents (@bserves @ooQualifier Long event)
name|void
name|collectFooQualifierEvents
parameter_list|(
annotation|@
name|Observes
annotation|@
name|FooQualifier
name|Long
name|event
parameter_list|)
block|{
name|fooQualifierEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|collectBarQualifierEvents (@bserves @arQualifier Long event)
name|void
name|collectBarQualifierEvents
parameter_list|(
annotation|@
name|Observes
annotation|@
name|BarQualifier
name|Long
name|event
parameter_list|)
block|{
name|barQualifierEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|getObjectEvents ()
name|List
argument_list|<
name|Object
argument_list|>
name|getObjectEvents
parameter_list|()
block|{
return|return
name|objectEvents
return|;
block|}
DECL|method|getStringEvents ()
name|List
argument_list|<
name|String
argument_list|>
name|getStringEvents
parameter_list|()
block|{
return|return
name|stringEvents
return|;
block|}
DECL|method|getStringPayloadEvents ()
name|List
argument_list|<
name|EventPayload
argument_list|<
name|String
argument_list|>
argument_list|>
name|getStringPayloadEvents
parameter_list|()
block|{
return|return
name|stringPayloadEvents
return|;
block|}
DECL|method|getIntegerPayloadEvents ()
name|List
argument_list|<
name|EventPayload
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getIntegerPayloadEvents
parameter_list|()
block|{
return|return
name|integerPayloadEvents
return|;
block|}
DECL|method|getDefaultQualifierEvents ()
name|List
argument_list|<
name|Object
argument_list|>
name|getDefaultQualifierEvents
parameter_list|()
block|{
return|return
name|defaultQualifierEvents
return|;
block|}
DECL|method|getFooQualifierEvents ()
name|List
argument_list|<
name|Long
argument_list|>
name|getFooQualifierEvents
parameter_list|()
block|{
return|return
name|fooQualifierEvents
return|;
block|}
DECL|method|getBarQualifierEvents ()
name|List
argument_list|<
name|Long
argument_list|>
name|getBarQualifierEvents
parameter_list|()
block|{
return|return
name|barQualifierEvents
return|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|objectEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stringEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stringPayloadEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|integerPayloadEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|defaultQualifierEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fooQualifierEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|barQualifierEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

