begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiCamelExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|ContextName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|DefaultCamelContextBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|FirstCamelContextBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|SecondCamelContextBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|test
operator|.
name|api
operator|.
name|Deployment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|junit
operator|.
name|Arquillian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|junit
operator|.
name|InSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Archive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ShrinkWrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|EmptyAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|spec
operator|.
name|JavaArchive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Arquillian
operator|.
name|class
argument_list|)
DECL|class|MultiContextConsumerTemplateTest
specifier|public
class|class
name|MultiContextConsumerTemplateTest
block|{
annotation|@
name|Inject
DECL|field|defaultCamelContext
specifier|private
name|CamelContext
name|defaultCamelContext
decl_stmt|;
annotation|@
name|Inject
DECL|field|defaultConsumer
specifier|private
name|ConsumerTemplate
name|defaultConsumer
decl_stmt|;
annotation|@
name|Inject
DECL|field|defaultProducer
specifier|private
name|ProducerTemplate
name|defaultProducer
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"first"
argument_list|)
DECL|field|firstCamelContext
specifier|private
name|CamelContext
name|firstCamelContext
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"first"
argument_list|)
DECL|field|firstConsumer
specifier|private
name|ConsumerTemplate
name|firstConsumer
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"first"
argument_list|)
DECL|field|firstProducer
specifier|private
name|ProducerTemplate
name|firstProducer
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"second"
argument_list|)
DECL|field|secondCamelContext
specifier|private
name|CamelContext
name|secondCamelContext
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"second"
argument_list|)
DECL|field|secondConsumer
specifier|private
name|ConsumerTemplate
name|secondConsumer
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"second"
argument_list|)
DECL|field|secondProducer
specifier|private
name|ProducerTemplate
name|secondProducer
decl_stmt|;
annotation|@
name|Deployment
DECL|method|deployment ()
specifier|public
specifier|static
name|Archive
argument_list|<
name|?
argument_list|>
name|deployment
parameter_list|()
block|{
return|return
name|ShrinkWrap
operator|.
name|create
argument_list|(
name|JavaArchive
operator|.
name|class
argument_list|)
comment|// Camel CDI
operator|.
name|addPackage
argument_list|(
name|CdiCamelExtension
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
comment|// Test classes
operator|.
name|addClasses
argument_list|(
name|DefaultCamelContextBean
operator|.
name|class
argument_list|,
name|FirstCamelContextBean
operator|.
name|class
argument_list|,
name|SecondCamelContextBean
operator|.
name|class
argument_list|)
comment|// Bean archive deployment descriptor
operator|.
name|addAsManifestResource
argument_list|(
name|EmptyAsset
operator|.
name|INSTANCE
argument_list|,
literal|"beans.xml"
argument_list|)
return|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|1
argument_list|)
DECL|method|configureCamelContexts ()
specifier|public
name|void
name|configureCamelContexts
parameter_list|()
throws|throws
name|Exception
block|{
name|secondCamelContext
operator|.
name|startAllRoutes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|2
argument_list|)
DECL|method|receiveBodyFromDefaultCamelContext ()
specifier|public
name|void
name|receiveBodyFromDefaultCamelContext
parameter_list|()
block|{
name|defaultProducer
operator|.
name|sendBody
argument_list|(
literal|"seda:foo"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|defaultConsumer
operator|.
name|receiveBody
argument_list|(
literal|"seda:foo"
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Body is incorrect!"
argument_list|,
name|body
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|3
argument_list|)
DECL|method|receiveBodyFromFirstCamelContext ()
specifier|public
name|void
name|receiveBodyFromFirstCamelContext
parameter_list|()
block|{
name|firstProducer
operator|.
name|sendBody
argument_list|(
literal|"seda:bar"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|firstConsumer
operator|.
name|receiveBody
argument_list|(
literal|"seda:bar"
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Body is incorrect!"
argument_list|,
name|body
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|4
argument_list|)
DECL|method|receiveBodyFromSecondCamelContext ()
specifier|public
name|void
name|receiveBodyFromSecondCamelContext
parameter_list|()
block|{
name|secondProducer
operator|.
name|sendBody
argument_list|(
literal|"seda:baz"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|secondConsumer
operator|.
name|receiveBody
argument_list|(
literal|"seda:baz"
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Body is incorrect!"
argument_list|,
name|body
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

