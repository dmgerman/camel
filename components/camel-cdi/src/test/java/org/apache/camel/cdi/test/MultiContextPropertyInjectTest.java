begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiCamelExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|ContextName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|DefaultCamelContextBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|FirstCamelContextBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|FirstCamelContextPropertyInjectBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|PropertyInjectBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|SecondCamelContextBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|bean
operator|.
name|SecondCamelContextPropertyInjectBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|test
operator|.
name|api
operator|.
name|Deployment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|junit
operator|.
name|Arquillian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|junit
operator|.
name|InSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Archive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ShrinkWrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|EmptyAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|spec
operator|.
name|JavaArchive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|assertIsSatisfied
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Arquillian
operator|.
name|class
argument_list|)
DECL|class|MultiContextPropertyInjectTest
specifier|public
class|class
name|MultiContextPropertyInjectTest
block|{
annotation|@
name|Inject
DECL|field|defaultCamelContext
specifier|private
name|CamelContext
name|defaultCamelContext
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"direct:in"
argument_list|)
DECL|field|defaultInbound
specifier|private
name|ProducerTemplate
name|defaultInbound
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"mock:out"
argument_list|)
DECL|field|defaultOutbound
specifier|private
name|MockEndpoint
name|defaultOutbound
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"first"
argument_list|)
DECL|field|firstCamelContext
specifier|private
name|CamelContext
name|firstCamelContext
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"first"
argument_list|)
annotation|@
name|Uri
argument_list|(
literal|"direct:in"
argument_list|)
DECL|field|firstInbound
specifier|private
name|ProducerTemplate
name|firstInbound
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"first"
argument_list|)
annotation|@
name|Uri
argument_list|(
literal|"mock:out"
argument_list|)
DECL|field|firstOutbound
specifier|private
name|MockEndpoint
name|firstOutbound
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"second"
argument_list|)
DECL|field|secondCamelContext
specifier|private
name|CamelContext
name|secondCamelContext
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"second"
argument_list|)
annotation|@
name|Uri
argument_list|(
literal|"direct:in"
argument_list|)
DECL|field|secondInbound
specifier|private
name|ProducerTemplate
name|secondInbound
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|ContextName
argument_list|(
literal|"second"
argument_list|)
annotation|@
name|Uri
argument_list|(
literal|"mock:out"
argument_list|)
DECL|field|secondOutbound
specifier|private
name|MockEndpoint
name|secondOutbound
decl_stmt|;
annotation|@
name|Produces
annotation|@
name|ApplicationScoped
annotation|@
name|Named
argument_list|(
literal|"properties"
argument_list|)
DECL|method|configuration ()
specifier|private
specifier|static
name|PropertiesComponent
name|configuration
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"property"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|PropertiesComponent
name|component
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
name|component
operator|.
name|setInitialProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|component
return|;
block|}
annotation|@
name|Deployment
DECL|method|deployment ()
specifier|public
specifier|static
name|Archive
argument_list|<
name|?
argument_list|>
name|deployment
parameter_list|()
block|{
return|return
name|ShrinkWrap
operator|.
name|create
argument_list|(
name|JavaArchive
operator|.
name|class
argument_list|)
comment|// Camel CDI
operator|.
name|addPackage
argument_list|(
name|CdiCamelExtension
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
comment|// Test classes
operator|.
name|addClasses
argument_list|(
name|DefaultCamelContextBean
operator|.
name|class
argument_list|,
name|PropertyInjectBean
operator|.
name|class
argument_list|,
name|FirstCamelContextBean
operator|.
name|class
argument_list|,
name|FirstCamelContextPropertyInjectBean
operator|.
name|class
argument_list|,
name|SecondCamelContextBean
operator|.
name|class
argument_list|,
name|SecondCamelContextPropertyInjectBean
operator|.
name|class
argument_list|)
comment|// Bean archive deployment descriptor
operator|.
name|addAsManifestResource
argument_list|(
name|EmptyAsset
operator|.
name|INSTANCE
argument_list|,
literal|"beans.xml"
argument_list|)
return|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|1
argument_list|)
DECL|method|configureCamelContexts ()
specifier|public
name|void
name|configureCamelContexts
parameter_list|()
throws|throws
name|Exception
block|{
name|defaultCamelContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|bean
argument_list|(
name|PropertyInjectBean
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:out"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|firstCamelContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|bean
argument_list|(
name|FirstCamelContextPropertyInjectBean
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:out"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|secondCamelContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|bean
argument_list|(
name|SecondCamelContextPropertyInjectBean
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:out"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|secondCamelContext
operator|.
name|getRouteController
argument_list|()
operator|.
name|startAllRoutes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|2
argument_list|)
DECL|method|sendMessageToDefaultCamelContextInbound ()
specifier|public
name|void
name|sendMessageToDefaultCamelContextInbound
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|defaultOutbound
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|defaultOutbound
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|defaultOutbound
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"header"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|defaultInbound
operator|.
name|sendBody
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|defaultOutbound
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|3
argument_list|)
DECL|method|retrieveReferenceFromDefaultCamelContext (PropertyInjectBean bean)
specifier|public
name|void
name|retrieveReferenceFromDefaultCamelContext
parameter_list|(
name|PropertyInjectBean
name|bean
parameter_list|)
block|{
name|assertThat
argument_list|(
name|bean
operator|.
name|getProperty
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|4
argument_list|)
DECL|method|sendMessageToFirstCamelContextInbound ()
specifier|public
name|void
name|sendMessageToFirstCamelContextInbound
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|firstOutbound
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|firstOutbound
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|firstOutbound
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"header"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|firstInbound
operator|.
name|sendBody
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|firstOutbound
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|5
argument_list|)
DECL|method|retrieveReferenceFromFirstCamelContext (FirstCamelContextPropertyInjectBean bean)
specifier|public
name|void
name|retrieveReferenceFromFirstCamelContext
parameter_list|(
name|FirstCamelContextPropertyInjectBean
name|bean
parameter_list|)
block|{
name|assertThat
argument_list|(
name|bean
operator|.
name|getProperty
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|6
argument_list|)
DECL|method|sendMessageToSecondCamelContextInbound ()
specifier|public
name|void
name|sendMessageToSecondCamelContextInbound
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|secondOutbound
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|secondOutbound
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|secondOutbound
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"header"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|secondInbound
operator|.
name|sendBody
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|secondOutbound
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|InSequence
argument_list|(
literal|7
argument_list|)
DECL|method|retrieveReferenceFromSecondCamelContext (SecondCamelContextPropertyInjectBean bean)
specifier|public
name|void
name|retrieveReferenceFromSecondCamelContext
parameter_list|(
name|SecondCamelContextPropertyInjectBean
name|bean
parameter_list|)
block|{
name|assertThat
argument_list|(
name|bean
operator|.
name|getProperty
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

