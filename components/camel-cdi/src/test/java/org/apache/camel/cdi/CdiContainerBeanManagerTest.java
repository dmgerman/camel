begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|store
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cdi
operator|.
name|CdiCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|webbeans
operator|.
name|cditest
operator|.
name|CdiTestContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|webbeans
operator|.
name|cditest
operator|.
name|CdiTestContainerLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CdiContainerBeanManagerTest
specifier|public
class|class
name|CdiContainerBeanManagerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|resultEndpoint
specifier|private
name|MockEndpoint
name|resultEndpoint
decl_stmt|;
DECL|field|template
specifier|private
name|ProducerTemplate
name|template
decl_stmt|;
DECL|field|cdiContainer
specifier|private
name|CdiTestContainer
name|cdiContainer
decl_stmt|;
comment|// @Inject
comment|// private ShoppingBean shoppingBean;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cdiContainer
operator|=
name|CdiTestContainerLoader
operator|.
name|getCdiContainer
argument_list|()
expr_stmt|;
name|cdiContainer
operator|.
name|bootContainer
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|">> Container started and bean manager instantiated !"
argument_list|)
expr_stmt|;
comment|// Camel
name|context
operator|=
operator|new
name|CdiCamelContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
name|createRouteBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setTracing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|template
operator|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|">> Camel started !"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutDown ()
specifier|public
name|void
name|shutDown
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cdiContainer
operator|.
name|shutdownContainer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInjection ()
specifier|public
name|void
name|testInjection
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:inject"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|resultEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Item
argument_list|>
name|expected
init|=
name|itemsExpected
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|items
init|=
name|results
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Object
index|[]
name|itemsExpected
init|=
name|itemsExpected
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|itemsExpected
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|(
name|itemsExpected
index|[
name|i
index|]
operator|instanceof
name|Item
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|items
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|(
name|items
index|[
name|i
index|]
operator|instanceof
name|Item
operator|)
argument_list|)
expr_stmt|;
name|Item
name|itemExpected
init|=
operator|(
name|Item
operator|)
name|itemsExpected
index|[
name|i
index|]
decl_stmt|;
name|Item
name|itemReceived
init|=
operator|(
name|Item
operator|)
name|items
index|[
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|itemExpected
operator|.
name|getName
argument_list|()
argument_list|,
name|itemReceived
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|itemExpected
operator|.
name|getPrice
argument_list|()
argument_list|,
name|itemReceived
operator|.
name|getPrice
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|itemsExpected ()
specifier|private
name|List
argument_list|<
name|Item
argument_list|>
name|itemsExpected
parameter_list|()
block|{
name|List
argument_list|<
name|Item
argument_list|>
name|products
init|=
operator|new
name|ArrayList
argument_list|<
name|Item
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|products
operator|.
name|add
argument_list|(
operator|new
name|Item
argument_list|(
literal|"Item-"
operator|+
name|i
argument_list|,
literal|1500L
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|products
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:inject"
argument_list|)
operator|.
name|beanRef
argument_list|(
literal|"shoppingBean"
argument_list|,
literal|"listAllProducts"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

