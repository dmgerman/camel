begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiCamelExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiEventEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|test
operator|.
name|api
operator|.
name|Deployment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|junit
operator|.
name|Arquillian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Archive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ShrinkWrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|EmptyAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|spec
operator|.
name|JavaArchive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|assertIsSatisfied
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Arquillian
operator|.
name|class
argument_list|)
DECL|class|RawEventEndpointCdi12Test
specifier|public
class|class
name|RawEventEndpointCdi12Test
block|{
annotation|@
name|Inject
DECL|field|consumed
specifier|private
name|MockEndpoint
name|consumed
decl_stmt|;
annotation|@
name|Inject
DECL|field|produced
specifier|private
name|MockEndpoint
name|produced
decl_stmt|;
annotation|@
name|Deployment
DECL|method|deployment ()
specifier|public
specifier|static
name|Archive
argument_list|<
name|?
argument_list|>
name|deployment
parameter_list|()
block|{
return|return
name|ShrinkWrap
operator|.
name|create
argument_list|(
name|JavaArchive
operator|.
name|class
argument_list|)
comment|// Camel CDI
operator|.
name|addPackage
argument_list|(
name|CdiCamelExtension
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
comment|// Test classes
operator|.
name|addClasses
argument_list|(
name|RawEventRoute
operator|.
name|class
argument_list|,
name|RawEventObserver
operator|.
name|class
argument_list|)
comment|// Bean archive deployment descriptor
operator|.
name|addAsManifestResource
argument_list|(
name|EmptyAsset
operator|.
name|INSTANCE
argument_list|,
literal|"beans.xml"
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|resetMock ()
specifier|public
name|void
name|resetMock
parameter_list|()
block|{
name|consumed
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendEventToConsumer (Event<Object> event)
specifier|public
name|void
name|sendEventToConsumer
parameter_list|(
name|Event
argument_list|<
name|Object
argument_list|>
name|event
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|consumed
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumed
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|event
operator|.
name|select
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|fire
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|consumed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendMessageToProducer (@riR) ProducerTemplate producer)
specifier|public
name|void
name|sendMessageToProducer
parameter_list|(
annotation|@
name|Uri
argument_list|(
literal|"direct:produce"
argument_list|)
name|ProducerTemplate
name|producer
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|random
init|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|produced
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|produced
operator|.
name|expectedBodiesReceived
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|consumed
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumed
operator|.
name|expectedBodiesReceived
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|producer
operator|.
name|sendBody
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|consumed
argument_list|,
name|produced
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|RawEventRoute
class|class
name|RawEventRoute
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Inject
DECL|field|rawEventEndpoint
specifier|private
name|CdiEventEndpoint
name|rawEventEndpoint
decl_stmt|;
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
name|rawEventEndpoint
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumed"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:produce"
argument_list|)
operator|.
name|to
argument_list|(
name|rawEventEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
annotation|@
name|ApplicationScoped
DECL|class|RawEventObserver
class|class
name|RawEventObserver
block|{
DECL|method|collectEvents (@bserves long event, @Uri(R) ProducerTemplate producer)
name|void
name|collectEvents
parameter_list|(
annotation|@
name|Observes
name|long
name|event
parameter_list|,
annotation|@
name|Uri
argument_list|(
literal|"mock:produced"
argument_list|)
name|ProducerTemplate
name|producer
parameter_list|)
block|{
name|producer
operator|.
name|sendBody
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

