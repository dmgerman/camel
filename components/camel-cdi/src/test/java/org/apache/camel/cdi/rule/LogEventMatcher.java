begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.rule
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|rule
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|DiagnosingMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_class
DECL|class|LogEventMatcher
specifier|public
specifier|final
class|class
name|LogEventMatcher
extends|extends
name|DiagnosingMatcher
argument_list|<
name|LogEvent
argument_list|>
block|{
DECL|field|level
specifier|private
name|String
name|level
decl_stmt|;
DECL|field|logger
specifier|private
name|String
name|logger
decl_stmt|;
DECL|field|message
specifier|private
name|Matcher
argument_list|<
name|String
argument_list|>
name|message
decl_stmt|;
DECL|method|LogEventMatcher ()
specifier|private
name|LogEventMatcher
parameter_list|()
block|{     }
DECL|method|logEvent ()
specifier|public
specifier|static
name|LogEventMatcher
name|logEvent
parameter_list|()
block|{
return|return
operator|new
name|LogEventMatcher
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|matches (Object item, Description description)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
name|LogEvent
name|target
init|=
operator|(
name|LogEvent
operator|)
name|item
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|" was LogEvent with "
argument_list|)
operator|.
name|appendText
argument_list|(
literal|"level ["
operator|+
name|Objects
operator|.
name|toString
argument_list|(
name|target
operator|.
name|getLevel
argument_list|()
argument_list|,
literal|"n/a"
argument_list|)
operator|+
literal|"], "
argument_list|)
operator|.
name|appendText
argument_list|(
literal|"logger ["
operator|+
name|Objects
operator|.
name|toString
argument_list|(
name|target
operator|.
name|getLogger
argument_list|()
argument_list|,
literal|"n/a"
argument_list|)
operator|+
literal|"], "
argument_list|)
operator|.
name|appendText
argument_list|(
literal|"message ["
operator|+
name|Objects
operator|.
name|toString
argument_list|(
name|target
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"n/a"
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|describeTo (Description description)
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"LogEvent with "
argument_list|)
operator|.
name|appendText
argument_list|(
literal|"level ["
operator|+
name|Objects
operator|.
name|toString
argument_list|(
name|level
argument_list|,
literal|"n/a"
argument_list|)
operator|+
literal|"], "
argument_list|)
operator|.
name|appendText
argument_list|(
literal|"logger ["
operator|+
name|Objects
operator|.
name|toString
argument_list|(
name|logger
argument_list|,
literal|"n/a"
argument_list|)
operator|+
literal|"], "
argument_list|)
operator|.
name|appendText
argument_list|(
literal|"message ["
operator|+
name|Objects
operator|.
name|toString
argument_list|(
name|message
argument_list|,
literal|"n/a"
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
DECL|method|withLevel (String level)
specifier|public
name|LogEventMatcher
name|withLevel
parameter_list|(
name|String
name|level
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withLogger (String logger)
specifier|public
name|LogEventMatcher
name|withLogger
parameter_list|(
name|String
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withMessage (Matcher<String> message)
specifier|public
name|LogEventMatcher
name|withMessage
parameter_list|(
name|Matcher
argument_list|<
name|String
argument_list|>
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|match (LogEvent target)
specifier|private
name|boolean
name|match
parameter_list|(
name|LogEvent
name|target
parameter_list|)
block|{
if|if
condition|(
name|level
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|level
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getLevel
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|logger
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getLogger
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|message
operator|.
name|matches
argument_list|(
name|target
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

