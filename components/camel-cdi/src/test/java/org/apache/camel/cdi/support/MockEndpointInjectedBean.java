begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|support
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_class
DECL|class|MockEndpointInjectedBean
specifier|public
class|class
name|MockEndpointInjectedBean
block|{
comment|/*      TODO - cannot currently figure out how to be able to inject both Endpoint and MockEndpoint     using a @Produces plugin with a single method without using explicit qualifier annotations     to separate the two scenarios which is a bit ugly.      See discussion here:     https://issues.apache.org/jira/browse/CAMEL-5553      Ideally it would be nice to be able to do this:      @Inject     @EndpointInject(uri = "mock:blah")     private MockEndpoint endpoint;      */
annotation|@
name|Inject
annotation|@
name|Mock
DECL|field|foo
specifier|private
name|MockEndpoint
name|foo
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Mock
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:something"
argument_list|)
DECL|field|bar
specifier|private
name|MockEndpoint
name|bar
decl_stmt|;
DECL|method|getBar ()
specifier|public
name|MockEndpoint
name|getBar
parameter_list|()
block|{
return|return
name|bar
return|;
block|}
DECL|method|getFoo ()
specifier|public
name|MockEndpoint
name|getFoo
parameter_list|()
block|{
return|return
name|foo
return|;
block|}
block|}
end_class

end_unit

