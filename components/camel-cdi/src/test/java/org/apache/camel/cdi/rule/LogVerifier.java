begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.rule
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|rule
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|AbstractAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|layout
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Verifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_class
DECL|class|LogVerifier
specifier|public
class|class
name|LogVerifier
extends|extends
name|Verifier
block|{
DECL|field|appender
specifier|private
specifier|final
name|Appender
name|appender
decl_stmt|;
DECL|field|messages
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|LogVerifier ()
specifier|public
name|LogVerifier
parameter_list|()
block|{
name|appender
operator|=
name|newAppender
argument_list|()
expr_stmt|;
block|}
DECL|method|doAppend (org.apache.logging.log4j.core.LogEvent event)
specifier|protected
name|void
name|doAppend
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
name|event
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getMessages ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMessages
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|messages
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|apply (final Statement base, Description description)
specifier|public
name|Statement
name|apply
parameter_list|(
specifier|final
name|Statement
name|base
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|base
operator|.
name|evaluate
argument_list|()
expr_stmt|;
name|verify
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{                 }
block|}
block|}
return|;
block|}
DECL|class|LogAppender
specifier|private
class|class
name|LogAppender
extends|extends
name|AbstractAppender
block|{
DECL|method|LogAppender (String name)
specifier|public
name|LogAppender
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|PatternLayout
operator|.
name|newBuilder
argument_list|()
operator|.
name|withPattern
argument_list|(
name|PatternLayout
operator|.
name|SIMPLE_CONVERSION_PATTERN
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append (org.apache.logging.log4j.core.LogEvent event)
specifier|public
name|void
name|append
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
name|event
parameter_list|)
block|{
name|doAppend
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newAppender ()
specifier|private
name|Appender
name|newAppender
parameter_list|()
block|{
specifier|final
name|LoggerContext
name|ctx
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LogAppender
name|appender
init|=
operator|new
name|LogAppender
argument_list|(
literal|"cdi-rule"
argument_list|)
decl_stmt|;
name|appender
operator|.
name|start
argument_list|()
expr_stmt|;
name|config
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|config
operator|.
name|getRootLogger
argument_list|()
operator|.
name|removeAppender
argument_list|(
literal|"cdi-rule"
argument_list|)
expr_stmt|;
name|config
operator|.
name|getRootLogger
argument_list|()
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
return|return
name|appender
return|;
block|}
block|}
end_class

end_unit

