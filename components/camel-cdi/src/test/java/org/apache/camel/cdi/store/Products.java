begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cdi.store
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|store
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|Named
DECL|class|Products
specifier|public
class|class
name|Products
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|products
specifier|private
name|List
argument_list|<
name|Item
argument_list|>
name|products
init|=
operator|new
name|ArrayList
argument_list|<
name|Item
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|Products ()
specifier|public
name|Products
parameter_list|()
block|{      }
annotation|@
name|PostConstruct
DECL|method|afterInit ()
specifier|public
name|void
name|afterInit
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Item
name|item
init|=
operator|new
name|Item
argument_list|(
literal|"Item-"
operator|+
name|i
argument_list|,
name|i
operator|*
literal|1500L
argument_list|)
decl_stmt|;
name|products
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|PreDestroy
DECL|method|preDestroy ()
specifier|public
name|void
name|preDestroy
parameter_list|()
block|{
name|products
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return the products      */
DECL|method|getProducts ()
specifier|public
name|List
argument_list|<
name|Item
argument_list|>
name|getProducts
parameter_list|()
block|{
return|return
name|products
return|;
block|}
block|}
end_class

end_unit

