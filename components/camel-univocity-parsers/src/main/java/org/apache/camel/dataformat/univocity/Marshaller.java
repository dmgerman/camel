begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.univocity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|univocity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|univocity
operator|.
name|parsers
operator|.
name|common
operator|.
name|AbstractWriter
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
operator|.
name|convertToMandatoryType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
operator|.
name|convertToType
import|;
end_import

begin_comment
comment|/**  * This class marshalls the exchange body using an uniVocity writer. It can automatically generates headers and keep  * their order in memory.  *  * @param<W> Writer class  */
end_comment

begin_class
DECL|class|Marshaller
specifier|final
class|class
name|Marshaller
parameter_list|<
name|W
extends|extends
name|AbstractWriter
parameter_list|<
name|?
parameter_list|>
parameter_list|>
block|{
DECL|field|headers
specifier|private
specifier|final
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|adaptHeaders
specifier|private
specifier|final
name|boolean
name|adaptHeaders
decl_stmt|;
comment|/**      * Creates a new instance.      *      * @param headers      the base headers to use      * @param adaptHeaders whether or not we can add headers on the fly depending on the data      */
DECL|method|Marshaller (String[] headers, boolean adaptHeaders)
name|Marshaller
parameter_list|(
name|String
index|[]
name|headers
parameter_list|,
name|boolean
name|adaptHeaders
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|headers
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|headers
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|adaptHeaders
operator|=
name|adaptHeaders
expr_stmt|;
block|}
comment|/**      * Marshals the given body.      *      * @param exchange exchange to use (for type conversion)      * @param body     body to marshal      * @param writer   uniVocity writer to use      * @throws NoTypeConversionAvailableException when it's not possible to convert the body as list and maps.      */
DECL|method|marshal (Exchange exchange, Object body, W writer)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|body
parameter_list|,
name|W
name|writer
parameter_list|)
throws|throws
name|NoTypeConversionAvailableException
block|{
try|try
block|{
name|List
name|list
init|=
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|body
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|row
range|:
name|list
control|)
block|{
name|writeRow
argument_list|(
name|exchange
argument_list|,
name|row
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeRow
argument_list|(
name|exchange
argument_list|,
name|body
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Writes the given row.      *      * @param exchange exchange to use (for type conversion)      * @param row      row to write      * @param writer   uniVocity writer to use      * @throws NoTypeConversionAvailableException when it's not possible to convert the row as map.      */
DECL|method|writeRow (Exchange exchange, Object row, W writer)
specifier|private
name|void
name|writeRow
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|row
parameter_list|,
name|W
name|writer
parameter_list|)
throws|throws
name|NoTypeConversionAvailableException
block|{
name|Map
name|map
init|=
name|convertToMandatoryType
argument_list|(
name|exchange
argument_list|,
name|Map
operator|.
name|class
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|adaptHeaders
condition|)
block|{
for|for
control|(
name|Object
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|convertToMandatoryType
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|headers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|header
range|:
name|headers
control|)
block|{
name|values
index|[
name|index
operator|++
index|]
operator|=
name|map
operator|.
name|get
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeRow
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

