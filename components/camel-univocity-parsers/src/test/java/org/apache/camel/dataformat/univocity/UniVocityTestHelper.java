begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.univocity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|univocity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|lineSeparator
import|;
end_import

begin_comment
comment|/**  * This class provides utility methods for the unit tests  */
end_comment

begin_class
DECL|class|UniVocityTestHelper
specifier|final
class|class
name|UniVocityTestHelper
block|{
comment|/**      * Creates a Map with the given key values      *      * @param keyValues the key values      * @return Map with the given key values      */
DECL|method|asMap (String... keyValues)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|asMap
parameter_list|(
name|String
modifier|...
name|keyValues
parameter_list|)
block|{
if|if
condition|(
name|keyValues
operator|==
literal|null
operator|||
name|keyValues
operator|.
name|length
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must specify key values with an even number."
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|keyValues
operator|.
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyValues
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|keyValues
index|[
name|i
index|]
argument_list|,
name|keyValues
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Joins the given lines with the platform new line.      *      * @param lines lines to join      * @return joined lines with the platform new line      */
DECL|method|join (String... lines)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
modifier|...
name|lines
parameter_list|)
block|{
if|if
condition|(
name|lines
operator|==
literal|null
operator|||
name|lines
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

