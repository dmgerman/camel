begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.pubsub.unit
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|pubsub
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|pubsub
operator|.
name|GooglePubsubConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|pubsub
operator|.
name|GooglePubsubEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|pubsub
operator|.
name|PubsubTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PubsubEndpointTest
specifier|public
class|class
name|PubsubEndpointTest
extends|extends
name|PubsubTestSupport
block|{
DECL|field|TEST_SUBSCRIPTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SUBSCRIPTION_NAME
init|=
literal|"test-sub-name"
decl_stmt|;
comment|// For testing purposes the URI params need to be aligned in alphabetical order
DECL|field|SUBSCRIPTION_URI
specifier|private
specifier|static
specifier|final
name|String
name|SUBSCRIPTION_URI
init|=
name|TEST_SUBSCRIPTION_NAME
operator|+
literal|"?ackMode=NONE"
operator|+
literal|"&concurrentConsumers=5"
operator|+
literal|"&maxMessagesPerPoll=2"
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"google-pubsub://{{project.id}}:"
operator|+
name|SUBSCRIPTION_URI
argument_list|)
DECL|field|from
specifier|private
name|Endpoint
name|from
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"direct:to"
argument_list|)
DECL|field|to
specifier|private
name|Endpoint
name|to
decl_stmt|;
annotation|@
name|Test
DECL|method|testEndpointConfiguration ()
specifier|public
name|void
name|testEndpointConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
comment|// :1 identifies the first registered endpoint fo a type in the context
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|hasEndpoint
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"google-pubsub:%s:%s:1"
argument_list|,
name|PROJECT_ID
argument_list|,
name|SUBSCRIPTION_URI
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Endpoint 'google-pubsub:%s:%s' is not found in Camel Context"
argument_list|,
name|PROJECT_ID
argument_list|,
name|SUBSCRIPTION_URI
argument_list|)
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|instanceof
name|GooglePubsubEndpoint
argument_list|)
expr_stmt|;
name|GooglePubsubEndpoint
name|pubsubEndpoint
init|=
operator|(
name|GooglePubsubEndpoint
operator|)
name|endpoint
decl_stmt|;
name|assertEquals
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|pubsubEndpoint
operator|.
name|createExchange
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"google-pubsub://"
operator|+
name|PROJECT_ID
operator|+
literal|":"
operator|+
name|SUBSCRIPTION_URI
argument_list|,
name|pubsubEndpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PROJECT_ID
argument_list|,
name|pubsubEndpoint
operator|.
name|getProjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_SUBSCRIPTION_NAME
argument_list|,
name|pubsubEndpoint
operator|.
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|,
name|pubsubEndpoint
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
argument_list|,
name|pubsubEndpoint
operator|.
name|getMaxMessagesPerPoll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GooglePubsubConstants
operator|.
name|AckMode
operator|.
name|NONE
argument_list|,
name|pubsubEndpoint
operator|.
name|getAckMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
name|from
argument_list|)
operator|.
name|to
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

