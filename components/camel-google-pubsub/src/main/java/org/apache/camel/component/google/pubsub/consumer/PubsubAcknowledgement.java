begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.pubsub.consumer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|pubsub
operator|.
name|consumer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|repackaged
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|AcknowledgeRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|ModifyAckDeadlineRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|pubsub
operator|.
name|GooglePubsubEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_class
DECL|class|PubsubAcknowledgement
specifier|public
specifier|abstract
class|class
name|PubsubAcknowledgement
block|{
DECL|field|logger
specifier|protected
name|Logger
name|logger
decl_stmt|;
DECL|field|subscriptionFullName
specifier|private
specifier|final
name|String
name|subscriptionFullName
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|GooglePubsubEndpoint
name|endpoint
decl_stmt|;
DECL|method|PubsubAcknowledgement (GooglePubsubEndpoint endpoint)
specifier|public
name|PubsubAcknowledgement
parameter_list|(
name|GooglePubsubEndpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|subscriptionFullName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"projects/%s/subscriptions/%s"
argument_list|,
name|endpoint
operator|.
name|getProjectId
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|loggerId
init|=
name|endpoint
operator|.
name|getLoggerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|loggerId
argument_list|)
condition|)
block|{
name|loggerId
operator|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|logger
operator|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
expr_stmt|;
block|}
DECL|method|acknowledge (List<String> ackIdList)
name|void
name|acknowledge
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ackIdList
parameter_list|)
block|{
name|AcknowledgeRequest
name|ackRequest
init|=
operator|new
name|AcknowledgeRequest
argument_list|()
operator|.
name|setAckIds
argument_list|(
name|ackIdList
argument_list|)
decl_stmt|;
try|try
block|{
name|endpoint
operator|.
name|getPubsub
argument_list|()
operator|.
name|projects
argument_list|()
operator|.
name|subscriptions
argument_list|()
operator|.
name|acknowledge
argument_list|(
name|subscriptionFullName
argument_list|,
name|ackRequest
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|resetAckDeadline (List<String> ackIdList, Integer seconds)
name|void
name|resetAckDeadline
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ackIdList
parameter_list|,
name|Integer
name|seconds
parameter_list|)
block|{
name|ModifyAckDeadlineRequest
name|nackRequest
init|=
operator|new
name|ModifyAckDeadlineRequest
argument_list|()
operator|.
name|setAckIds
argument_list|(
name|ackIdList
argument_list|)
operator|.
name|setAckDeadlineSeconds
argument_list|(
name|seconds
argument_list|)
decl_stmt|;
try|try
block|{
name|endpoint
operator|.
name|getPubsub
argument_list|()
operator|.
name|projects
argument_list|()
operator|.
name|subscriptions
argument_list|()
operator|.
name|modifyAckDeadline
argument_list|(
name|subscriptionFullName
argument_list|,
name|nackRequest
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// It will timeout automatically on the channel
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to reset ack deadline "
operator|+
name|ackIdList
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

