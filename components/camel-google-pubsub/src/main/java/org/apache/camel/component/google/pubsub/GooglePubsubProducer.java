begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.pubsub
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|pubsub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|PublishRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|PublishResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|PubsubMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Generic PubSub Producer  */
end_comment

begin_class
DECL|class|GooglePubsubProducer
specifier|public
class|class
name|GooglePubsubProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|logger
specifier|private
name|Logger
name|logger
decl_stmt|;
DECL|method|GooglePubsubProducer (GooglePubsubEndpoint endpoint)
specifier|public
name|GooglePubsubProducer
parameter_list|(
name|GooglePubsubEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|String
name|loggerId
init|=
name|endpoint
operator|.
name|getLoggerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|loggerId
argument_list|)
condition|)
block|{
name|loggerId
operator|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|logger
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|loggerId
argument_list|)
expr_stmt|;
block|}
comment|/**      * The incoming message is expected to be either      * - a List of Exchanges (aggregated)      * - an Exchange      */
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|entryList
init|=
name|prepareExchangeList
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryList
operator|==
literal|null
operator|||
name|entryList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"The incoming message is either null or empty. Triggered by an aggregation timeout?"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"uploader thread/id: "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" / "
operator|+
name|exchange
operator|.
name|getExchangeId
argument_list|()
operator|+
literal|" . api call completed."
argument_list|)
expr_stmt|;
block|}
name|sendMessages
argument_list|(
name|entryList
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method converts a single incoming message into a List      *      * @param exchange      * @return      */
DECL|method|prepareExchangeList (Exchange exchange)
specifier|private
specifier|static
name|List
argument_list|<
name|Exchange
argument_list|>
name|prepareExchangeList
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|entryList
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|GROUPED_EXCHANGE
argument_list|)
condition|)
block|{
name|entryList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|entryList
operator|.
name|add
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entryList
operator|=
operator|(
name|List
argument_list|<
name|Exchange
argument_list|>
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|GROUPED_EXCHANGE
argument_list|)
expr_stmt|;
block|}
return|return
name|entryList
return|;
block|}
DECL|method|sendMessages (List<Exchange> exchanges)
specifier|private
name|void
name|sendMessages
parameter_list|(
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
parameter_list|)
throws|throws
name|Exception
block|{
name|GooglePubsubEndpoint
name|endpoint
init|=
operator|(
name|GooglePubsubEndpoint
operator|)
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|topicName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"projects/%s/topics/%s"
argument_list|,
name|endpoint
operator|.
name|getProjectId
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PubsubMessage
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|PubsubMessage
name|message
init|=
operator|new
name|PubsubMessage
argument_list|()
decl_stmt|;
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|String
condition|)
block|{
name|message
operator|.
name|encodeData
argument_list|(
operator|(
operator|(
name|String
operator|)
name|body
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|message
operator|.
name|encodeData
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|encodeData
argument_list|(
name|serialize
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Object
name|attributes
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GooglePubsubConstants
operator|.
name|ATTRIBUTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributes
operator|!=
literal|null
operator|&&
name|attributes
operator|instanceof
name|Map
operator|&&
operator|(
operator|(
name|Map
operator|)
name|attributes
operator|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|setAttributes
argument_list|(
operator|(
name|Map
operator|)
name|attributes
argument_list|)
expr_stmt|;
block|}
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|PublishRequest
name|publishRequest
init|=
operator|new
name|PublishRequest
argument_list|()
operator|.
name|setMessages
argument_list|(
name|messages
argument_list|)
decl_stmt|;
name|PublishResponse
name|response
init|=
name|endpoint
operator|.
name|getPubsub
argument_list|()
operator|.
name|projects
argument_list|()
operator|.
name|topics
argument_list|()
operator|.
name|publish
argument_list|(
name|topicName
argument_list|,
name|publishRequest
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sentMessageIds
init|=
name|response
operator|.
name|getMessageIds
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Exchange
name|entry
range|:
name|exchanges
control|)
block|{
name|entry
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GooglePubsubConstants
operator|.
name|MESSAGE_ID
argument_list|,
name|sentMessageIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|serialize (Object obj)
specifier|public
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|os
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeObject
argument_list|(
name|obj
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

