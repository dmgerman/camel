begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.pubsub
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|pubsub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|repackaged
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|Pubsub
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|PubsubMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|PullRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|PullResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|ReceivedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|pubsub
operator|.
name|consumer
operator|.
name|ExchangeAckTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|GooglePubsubConsumer
class|class
name|GooglePubsubConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|localLog
specifier|private
name|Logger
name|localLog
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|GooglePubsubEndpoint
name|endpoint
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
DECL|field|ackStrategy
specifier|private
specifier|final
name|Synchronization
name|ackStrategy
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|pubsub
specifier|private
name|Pubsub
name|pubsub
decl_stmt|;
DECL|method|GooglePubsubConsumer (GooglePubsubEndpoint endpoint, Processor processor)
name|GooglePubsubConsumer
parameter_list|(
name|GooglePubsubEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|ackStrategy
operator|=
operator|new
name|ExchangeAckTransaction
argument_list|(
name|this
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|pubsub
operator|=
name|endpoint
operator|.
name|getConnectionFactory
argument_list|()
operator|.
name|getMultiThreadClient
argument_list|(
name|this
operator|.
name|endpoint
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|loggerId
init|=
name|endpoint
operator|.
name|getLoggerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|loggerId
argument_list|)
condition|)
block|{
name|loggerId
operator|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|localLog
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|loggerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|localLog
operator|.
name|info
argument_list|(
literal|"Starting Google PubSub consumer for {}/{}"
argument_list|,
name|endpoint
operator|.
name|getProjectId
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|=
name|endpoint
operator|.
name|createExecutor
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|endpoint
operator|.
name|getConcurrentConsumers
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|PubsubPoller
argument_list|(
name|i
operator|+
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|localLog
operator|.
name|info
argument_list|(
literal|"Stopping Google PubSub consumer for {}/{}"
argument_list|,
name|endpoint
operator|.
name|getProjectId
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|!=
literal|null
operator|&&
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownNow
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
name|executor
operator|=
literal|null
expr_stmt|;
block|}
DECL|class|PubsubPoller
specifier|private
class|class
name|PubsubPoller
implements|implements
name|Runnable
block|{
DECL|field|subscriptionFullName
specifier|private
specifier|final
name|String
name|subscriptionFullName
decl_stmt|;
DECL|field|threadId
specifier|private
specifier|final
name|String
name|threadId
decl_stmt|;
DECL|method|PubsubPoller (String id)
name|PubsubPoller
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|subscriptionFullName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"projects/%s/subscriptions/%s"
argument_list|,
name|GooglePubsubConsumer
operator|.
name|this
operator|.
name|endpoint
operator|.
name|getProjectId
argument_list|()
argument_list|,
name|GooglePubsubConsumer
operator|.
name|this
operator|.
name|endpoint
operator|.
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadId
operator|=
name|GooglePubsubConsumer
operator|.
name|this
operator|.
name|endpoint
operator|.
name|getDestinationName
argument_list|()
operator|+
literal|"-"
operator|+
literal|"Thread "
operator|+
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|localLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|localLog
operator|.
name|debug
argument_list|(
literal|"Subscribing {} to {}"
argument_list|,
name|threadId
argument_list|,
name|subscriptionFullName
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|isRunAllowed
argument_list|()
operator|&&
operator|!
name|isSuspendingOrSuspended
argument_list|()
condition|)
block|{
try|try
block|{
name|PullRequest
name|pullRequest
init|=
operator|new
name|PullRequest
argument_list|()
operator|.
name|setMaxMessages
argument_list|(
name|endpoint
operator|.
name|getMaxMessagesPerPoll
argument_list|()
argument_list|)
decl_stmt|;
name|PullResponse
name|pullResponse
decl_stmt|;
try|try
block|{
if|if
condition|(
name|localLog
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|localLog
operator|.
name|trace
argument_list|(
literal|"Polling : {}"
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
block|}
name|pullResponse
operator|=
name|GooglePubsubConsumer
operator|.
name|this
operator|.
name|pubsub
operator|.
name|projects
argument_list|()
operator|.
name|subscriptions
argument_list|()
operator|.
name|pull
argument_list|(
name|subscriptionFullName
argument_list|,
name|pullRequest
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|ste
parameter_list|)
block|{
if|if
condition|(
name|localLog
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|localLog
operator|.
name|trace
argument_list|(
literal|"Socket timeout : {}"
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
literal|null
operator|==
name|pullResponse
operator|.
name|getReceivedMessages
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|ReceivedMessage
argument_list|>
name|receivedMessages
init|=
name|pullResponse
operator|.
name|getReceivedMessages
argument_list|()
decl_stmt|;
for|for
control|(
name|ReceivedMessage
name|receivedMessage
range|:
name|receivedMessages
control|)
block|{
name|PubsubMessage
name|pubsubMessage
init|=
name|receivedMessage
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|byte
index|[]
name|body
init|=
name|pubsubMessage
operator|.
name|decodeData
argument_list|()
decl_stmt|;
if|if
condition|(
name|localLog
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|localLog
operator|.
name|trace
argument_list|(
literal|"Received message ID : {}"
argument_list|,
name|pubsubMessage
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GooglePubsubConstants
operator|.
name|ACK_ID
argument_list|,
name|receivedMessage
operator|.
name|getAckId
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GooglePubsubConstants
operator|.
name|MESSAGE_ID
argument_list|,
name|pubsubMessage
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GooglePubsubConstants
operator|.
name|PUBLISH_TIME
argument_list|,
name|pubsubMessage
operator|.
name|getPublishTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|receivedMessage
operator|.
name|getMessage
argument_list|()
operator|.
name|getAttributes
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GooglePubsubConstants
operator|.
name|ATTRIBUTES
argument_list|,
name|receivedMessage
operator|.
name|getMessage
argument_list|()
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getAckMode
argument_list|()
operator|!=
name|GooglePubsubConstants
operator|.
name|AckMode
operator|.
name|NONE
condition|)
block|{
name|exchange
operator|.
name|addOnCompletion
argument_list|(
name|GooglePubsubConsumer
operator|.
name|this
operator|.
name|ackStrategy
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|localLog
operator|.
name|error
argument_list|(
literal|"Failure getting messages from PubSub : "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

