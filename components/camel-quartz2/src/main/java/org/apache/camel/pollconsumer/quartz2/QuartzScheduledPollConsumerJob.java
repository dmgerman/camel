begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.pollconsumer.quartz2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|pollconsumer
operator|.
name|quartz2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quartz2
operator|.
name|CamelJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|QuartzScheduledPollConsumerJob
specifier|public
class|class
name|QuartzScheduledPollConsumerJob
extends|extends
name|CamelJob
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QuartzScheduledPollConsumerJob
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|QuartzScheduledPollConsumerJob ()
specifier|public
name|QuartzScheduledPollConsumerJob
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|execute (JobExecutionContext context)
specifier|public
name|void
name|execute
parameter_list|(
name|JobExecutionContext
name|context
parameter_list|)
throws|throws
name|JobExecutionException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Execute job: {}"
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Runnable
name|task
init|=
operator|(
name|Runnable
operator|)
name|context
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
comment|// if not task then use the route id to lookup the consumer to be used as the task
name|String
name|routeId
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeId
operator|!=
literal|null
operator|&&
name|camelContext
operator|!=
literal|null
condition|)
block|{
comment|// find the consumer
for|for
control|(
name|Route
name|route
range|:
name|camelContext
operator|.
name|getRoutes
argument_list|()
control|)
block|{
if|if
condition|(
name|route
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
condition|)
block|{
name|Consumer
name|consumer
init|=
name|route
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumer
operator|instanceof
name|Runnable
condition|)
block|{
name|task
operator|=
operator|(
name|Runnable
operator|)
name|consumer
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Running task: {}"
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

