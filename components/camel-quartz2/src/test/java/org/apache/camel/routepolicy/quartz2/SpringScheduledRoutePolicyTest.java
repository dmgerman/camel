begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.routepolicy.quartz2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|routepolicy
operator|.
name|quartz2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|SpringScheduledRoutePolicyTest
specifier|public
specifier|abstract
class|class
name|SpringScheduledRoutePolicyTest
extends|extends
name|TestSupport
block|{
DECL|enum|TestType
specifier|protected
enum|enum
name|TestType
block|{
DECL|enumConstant|SIMPLE
DECL|enumConstant|CRON
name|SIMPLE
block|,
name|CRON
block|}
DECL|field|applicationContext
specifier|private
name|ClassPathXmlApplicationContext
name|applicationContext
decl_stmt|;
DECL|field|testType
specifier|private
name|TestType
name|testType
decl_stmt|;
DECL|method|startTest ()
specifier|public
name|void
name|startTest
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|startRouteWithPolicy
argument_list|(
literal|"startPolicy"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:success"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|context
operator|.
name|stopRoute
argument_list|(
literal|"testRoute"
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getRouteStatus
argument_list|(
literal|"testRoute"
argument_list|)
operator|==
name|ServiceStatus
operator|.
name|Started
argument_list|)
expr_stmt|;
name|context
operator|.
name|createProducerTemplate
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Ready or not, Here, I come"
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|stopTest ()
specifier|public
name|void
name|stopTest
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|consumerStopped
init|=
literal|false
decl_stmt|;
name|CamelContext
name|context
init|=
name|startRouteWithPolicy
argument_list|(
literal|"stopPolicy"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getRouteStatus
argument_list|(
literal|"testRoute"
argument_list|)
operator|==
name|ServiceStatus
operator|.
name|Stopped
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|createProducerTemplate
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Ready or not, Here, I come"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|consumerStopped
operator|=
literal|true
expr_stmt|;
block|}
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|consumerStopped
argument_list|)
expr_stmt|;
block|}
DECL|method|suspendTest ()
specifier|public
name|void
name|suspendTest
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|consumerSuspended
init|=
literal|false
decl_stmt|;
name|CamelContext
name|context
init|=
name|startRouteWithPolicy
argument_list|(
literal|"suspendPolicy"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|createProducerTemplate
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Ready or not, Here, I come"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|consumerSuspended
operator|=
literal|true
expr_stmt|;
block|}
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|consumerSuspended
argument_list|)
expr_stmt|;
block|}
DECL|method|resumeTest ()
specifier|public
name|void
name|resumeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|startRouteWithPolicy
argument_list|(
literal|"resumePolicy"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:success"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|suspendService
argument_list|(
name|context
operator|.
name|getRoute
argument_list|(
literal|"testRoute"
argument_list|)
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|context
operator|.
name|createProducerTemplate
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Ready or not, Here, I come"
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startRouteWithPolicy (String policyBeanName)
specifier|private
name|CamelContext
name|startRouteWithPolicy
parameter_list|(
name|String
name|policyBeanName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routes
init|=
operator|(
name|List
argument_list|<
name|RouteDefinition
argument_list|>
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"testRouteContext"
argument_list|)
decl_stmt|;
name|RoutePolicy
name|policy
init|=
name|applicationContext
operator|.
name|getBean
argument_list|(
name|policyBeanName
argument_list|,
name|RoutePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getTestType
argument_list|()
operator|==
name|TestType
operator|.
name|SIMPLE
condition|?
name|policy
operator|instanceof
name|SimpleScheduledRoutePolicy
else|:
name|policy
operator|instanceof
name|CronScheduledRoutePolicy
argument_list|)
expr_stmt|;
name|routes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ModelCamelContext
operator|)
name|context
operator|)
operator|.
name|addRouteDefinitions
argument_list|(
name|routes
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|getApplicationContext ()
specifier|public
name|ClassPathXmlApplicationContext
name|getApplicationContext
parameter_list|()
block|{
return|return
name|applicationContext
return|;
block|}
DECL|method|setApplicationContext (ClassPathXmlApplicationContext applicationContext)
specifier|public
name|void
name|setApplicationContext
parameter_list|(
name|ClassPathXmlApplicationContext
name|applicationContext
parameter_list|)
block|{
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
block|}
DECL|method|getTestType ()
specifier|public
name|TestType
name|getTestType
parameter_list|()
block|{
return|return
name|testType
return|;
block|}
DECL|method|setTestType (TestType testType)
specifier|public
name|void
name|setTestType
parameter_list|(
name|TestType
name|testType
parameter_list|)
block|{
name|this
operator|.
name|testType
operator|=
name|testType
expr_stmt|;
block|}
block|}
end_class

end_unit

