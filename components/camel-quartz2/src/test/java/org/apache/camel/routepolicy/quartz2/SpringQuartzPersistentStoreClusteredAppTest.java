begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.routepolicy.quartz2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|routepolicy
operator|.
name|quartz2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|direct
operator|.
name|DirectConsumerNotAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|SpringQuartzPersistentStoreClusteredAppTest
specifier|public
class|class
name|SpringQuartzPersistentStoreClusteredAppTest
extends|extends
name|TestSupport
block|{
annotation|@
name|Test
DECL|method|testQuartzPersistentStoreClusteredApp ()
specifier|public
name|void
name|testQuartzPersistentStoreClusteredApp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// boot up the first clustered app which also launches an embedded database
name|AbstractXmlApplicationContext
name|app
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/routepolicy/quartz2/SpringQuartzClusteredAppOneTest.xml"
argument_list|)
decl_stmt|;
name|app
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// and now the second one
name|AbstractXmlApplicationContext
name|app2
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/routepolicy/quartz2/SpringQuartzClusteredAppTwoTest.xml"
argument_list|)
decl_stmt|;
name|app2
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camel
init|=
name|app
operator|.
name|getBean
argument_list|(
literal|"camelContext"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|camel
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"clustering pings!"
argument_list|)
expr_stmt|;
comment|// wait a bit to make sure the route has been properly started through
comment|// the given route policy
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|app
operator|.
name|getBean
argument_list|(
literal|"template"
argument_list|,
name|ProducerTemplate
operator|.
name|class
argument_list|)
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"clustering"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|CamelContext
name|camel2
init|=
name|app2
operator|.
name|getBean
argument_list|(
literal|"camelContext"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|camel2
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock2
init|=
name|camel2
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// expect no consumer being started as the seconds app is expected to
comment|// run in standby modus
try|try
block|{
name|app2
operator|.
name|getBean
argument_list|(
literal|"template"
argument_list|,
name|ProducerTemplate
operator|.
name|class
argument_list|)
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"clustering"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|cee
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|DirectConsumerNotAvailableException
operator|.
name|class
argument_list|,
name|cee
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mock2
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// we're done so let's properly close the application contexts, but stop
comment|// the second app before the first one so that the quartz scheduler running
comment|// inside it can properly be shutdown
name|app2
operator|.
name|close
argument_list|()
expr_stmt|;
name|app
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

