begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quartz2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quartz2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|CronTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SchedulerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SimpleTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SpringQuartzPersistentStoreRestartAppChangeOptionsTest
specifier|public
class|class
name|SpringQuartzPersistentStoreRestartAppChangeOptionsTest
extends|extends
name|TestSupport
block|{
DECL|field|db
specifier|private
specifier|static
name|AbstractXmlApplicationContext
name|db
decl_stmt|;
DECL|field|app
specifier|private
name|AbstractXmlApplicationContext
name|app
decl_stmt|;
DECL|field|app2
specifier|private
name|AbstractXmlApplicationContext
name|app2
decl_stmt|;
DECL|field|app3
specifier|private
name|AbstractXmlApplicationContext
name|app3
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|prepareDB ()
specifier|public
specifier|static
name|void
name|prepareDB
parameter_list|()
block|{
comment|// boot up the database the two invocations are going to share inside a clustered quartz setup
name|db
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppDatabase.xml"
argument_list|)
expr_stmt|;
name|db
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdownDB ()
specifier|public
specifier|static
name|void
name|shutdownDB
parameter_list|()
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|closeApps ()
specifier|public
name|void
name|closeApps
parameter_list|()
block|{
comment|// we're done so let's properly close the application contexts, but close
comment|// the second app before the first one so that the quartz scheduler running
comment|// inside it can be properly shutdown
name|IOHelper
operator|.
name|close
argument_list|(
name|app3
argument_list|,
name|app2
argument_list|,
name|app
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestartAppChangeCronExpression ()
specifier|public
name|void
name|testRestartAppChangeCronExpression
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test creates application context twice with different cron expressions in configuration xml.
comment|// Both times it retrieves back the cron expression, accessing it via trigger (so, using value stored in DB).
comment|// After that it asserts that two cron expressions are not equal.
comment|// load spring app
name|app
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml"
argument_list|)
expr_stmt|;
name|app
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camel
init|=
name|app
operator|.
name|getBean
argument_list|(
literal|"camelContext"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|String
name|cronExpression
init|=
operator|(
operator|(
name|CronTrigger
operator|)
name|getTrigger
argument_list|(
name|camel
argument_list|,
literal|"quartzRoute"
argument_list|)
operator|)
operator|.
name|getCronExpression
argument_list|()
decl_stmt|;
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Restarting ..."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Restarting ..."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Restarting ..."
argument_list|)
expr_stmt|;
comment|// load spring app
name|app2
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest2.xml"
argument_list|)
expr_stmt|;
name|app2
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camel2
init|=
name|app2
operator|.
name|getBean
argument_list|(
literal|"camelContext"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|camel2
argument_list|)
expr_stmt|;
name|String
name|cronExpression2
init|=
operator|(
operator|(
name|CronTrigger
operator|)
name|getTrigger
argument_list|(
name|camel2
argument_list|,
literal|"quartzRoute"
argument_list|)
operator|)
operator|.
name|getCronExpression
argument_list|()
decl_stmt|;
name|app2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
name|cronExpression
argument_list|,
name|cronExpression2
argument_list|)
expr_stmt|;
comment|// load spring app
name|app3
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest3.xml"
argument_list|)
expr_stmt|;
name|app3
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camel3
init|=
name|app3
operator|.
name|getBean
argument_list|(
literal|"camelContext3"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|camel3
argument_list|)
expr_stmt|;
name|String
name|cronExpression3
init|=
operator|(
operator|(
name|CronTrigger
operator|)
name|getTrigger
argument_list|(
name|camel3
argument_list|,
literal|"quartzRoute"
argument_list|)
operator|)
operator|.
name|getCronExpression
argument_list|()
decl_stmt|;
name|app3
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cronExpression2
argument_list|,
name|cronExpression3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestartAppChangeTriggerOptions ()
specifier|public
name|void
name|testRestartAppChangeTriggerOptions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test creates application context twice with different simple trigger options in configuration xml.
comment|// Both times it retrieves back the option, accessing it via trigger (so, using value stored in DB).
comment|// After that it asserts that two options are not equal.
comment|// load spring app
name|AbstractXmlApplicationContext
name|app
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeOptionsTest1.xml"
argument_list|)
decl_stmt|;
name|app
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camel
init|=
name|app
operator|.
name|getBean
argument_list|(
literal|"camelContext"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|SimpleTrigger
name|trigger
init|=
operator|(
name|SimpleTrigger
operator|)
name|getTrigger
argument_list|(
name|camel
argument_list|,
literal|"quartzRoute"
argument_list|)
decl_stmt|;
name|long
name|repeatInterval
init|=
name|trigger
operator|.
name|getRepeatInterval
argument_list|()
decl_stmt|;
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Restarting ..."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Restarting ..."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Restarting ..."
argument_list|)
expr_stmt|;
comment|// load spring app
name|AbstractXmlApplicationContext
name|app2
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeOptionsTest2.xml"
argument_list|)
decl_stmt|;
name|app2
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camel2
init|=
name|app2
operator|.
name|getBean
argument_list|(
literal|"camelContext"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|camel2
argument_list|)
expr_stmt|;
name|SimpleTrigger
name|trigger2
init|=
operator|(
name|SimpleTrigger
operator|)
name|getTrigger
argument_list|(
name|camel2
argument_list|,
literal|"quartzRoute"
argument_list|)
decl_stmt|;
name|long
name|repeatInterval2
init|=
name|trigger2
operator|.
name|getRepeatInterval
argument_list|()
decl_stmt|;
name|app2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// we're done so let's properly close the application contexts, but close
comment|// the second app before the first one so that the quartz scheduler running
comment|// inside it can be properly shutdown
name|IOHelper
operator|.
name|close
argument_list|(
name|app2
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|repeatInterval
argument_list|,
name|repeatInterval2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestartAppChangeTriggerType ()
specifier|public
name|void
name|testRestartAppChangeTriggerType
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test creates application context twice with different simple trigger options in configuration xml.
comment|// Both times it retrieves back the option, accessing it via trigger (so, using value stored in DB).
comment|// After that it asserts that two options are not equal.
comment|// load spring app
name|app
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml"
argument_list|)
expr_stmt|;
name|app
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camel
init|=
name|app
operator|.
name|getBean
argument_list|(
literal|"camelContext"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getTrigger
argument_list|(
name|camel
argument_list|,
literal|"quartzRoute"
argument_list|)
operator|instanceof
name|CronTrigger
argument_list|)
expr_stmt|;
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Restarting ..."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Restarting ..."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Restarting ..."
argument_list|)
expr_stmt|;
comment|// load spring app
name|AbstractXmlApplicationContext
name|app2
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeOptionsTest2.xml"
argument_list|)
decl_stmt|;
name|app2
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camel2
init|=
name|app2
operator|.
name|getBean
argument_list|(
literal|"camelContext"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|camel2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getTrigger
argument_list|(
name|camel2
argument_list|,
literal|"quartzRoute"
argument_list|)
operator|instanceof
name|SimpleTrigger
argument_list|)
expr_stmt|;
name|app2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// we're done so let's properly close the application contexts, but close
comment|// the second app before the first one so that the quartz scheduler running
comment|// inside it can be properly shutdown
name|IOHelper
operator|.
name|close
argument_list|(
name|app2
argument_list|,
name|app
argument_list|)
expr_stmt|;
block|}
DECL|method|getTrigger (CamelContext camel, String routeId)
specifier|private
name|Trigger
name|getTrigger
parameter_list|(
name|CamelContext
name|camel
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|SchedulerException
block|{
name|QuartzEndpoint
name|endpoint
init|=
call|(
name|QuartzEndpoint
call|)
argument_list|(
name|camel
operator|.
name|getRoute
argument_list|(
name|routeId
argument_list|)
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|QuartzComponent
name|component
init|=
name|endpoint
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Scheduler
name|scheduler
init|=
name|component
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
return|return
name|scheduler
operator|.
name|getTrigger
argument_list|(
name|endpoint
operator|.
name|getTriggerKey
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

