begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.influxdb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|influxdb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|influxdb
operator|.
name|InfluxDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"influxdb"
argument_list|,
name|title
operator|=
literal|"InfluxDB"
argument_list|,
name|syntax
operator|=
literal|"influxdb:connectionBean"
argument_list|,
name|label
operator|=
literal|"database,ticks"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|)
DECL|class|InfluxDbEndpoint
specifier|public
class|class
name|InfluxDbEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InfluxDbEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|influxDB
specifier|private
name|InfluxDB
name|influxDB
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Connection to the influx database, of class InfluxDB.class"
argument_list|)
DECL|field|connectionBean
specifier|private
name|String
name|connectionBean
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"the name of the series where the points will be created, name can be modified dynamically by headers"
argument_list|)
DECL|field|databaseName
specifier|private
name|String
name|databaseName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"default"
argument_list|,
name|description
operator|=
literal|"defines the retention policy for the points created in influxdb"
argument_list|)
DECL|field|retentionPolicy
specifier|private
name|String
name|retentionPolicy
init|=
literal|"default"
decl_stmt|;
comment|/**      * @param uri      * @param influxDbComponent      */
DECL|method|InfluxDbEndpoint (String uri, InfluxDbComponent influxDbComponent, InfluxDB dbConn)
specifier|public
name|InfluxDbEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|InfluxDbComponent
name|influxDbComponent
parameter_list|,
name|InfluxDB
name|dbConn
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|influxDbComponent
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbConn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"dbConn is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|influxDB
operator|=
name|dbConn
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Prepairing influxdb enpoint with uri {}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating influx db producer connectionBean:{}, databaseName:{}, retentionPolicy:{}"
argument_list|,
name|connectionBean
argument_list|,
name|databaseName
argument_list|,
name|retentionPolicy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating influx db producer"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InfluxDbProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating influx db consumer"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot receive messages from this endpoint"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getInfluxDB ()
specifier|public
name|InfluxDB
name|getInfluxDB
parameter_list|()
block|{
return|return
name|influxDB
return|;
block|}
DECL|method|setInfluxDB (InfluxDB influxDB)
specifier|public
name|void
name|setInfluxDB
parameter_list|(
name|InfluxDB
name|influxDB
parameter_list|)
block|{
name|this
operator|.
name|influxDB
operator|=
name|influxDB
expr_stmt|;
block|}
comment|/**      * Getter for databaseName      *       * @return the name of the database where the time series will be stored      */
DECL|method|getDatabaseName ()
specifier|public
name|String
name|getDatabaseName
parameter_list|()
block|{
return|return
name|databaseName
return|;
block|}
comment|/**      * Setter for databaseName      *       * @param databaseName      */
DECL|method|setDatabaseName (String databaseName)
specifier|public
name|void
name|setDatabaseName
parameter_list|(
name|String
name|databaseName
parameter_list|)
block|{
name|this
operator|.
name|databaseName
operator|=
name|databaseName
expr_stmt|;
block|}
comment|/**      * Getter for retentionPolicy      *       * @return the string that defines the retention policy to the data created      *         by the endpoint      */
DECL|method|getRetentionPolicy ()
specifier|public
name|String
name|getRetentionPolicy
parameter_list|()
block|{
return|return
name|retentionPolicy
return|;
block|}
comment|/**      * Setter for retentionPolicy      *       * @param retentionPolicy      */
DECL|method|setRetentionPolicy (String retentionPolicy)
specifier|public
name|void
name|setRetentionPolicy
parameter_list|(
name|String
name|retentionPolicy
parameter_list|)
block|{
name|this
operator|.
name|retentionPolicy
operator|=
name|retentionPolicy
expr_stmt|;
block|}
comment|/**      * Getter for connectionBean      *       * @return the name of the bean for the {@link org.influxdb.InfluxDB}      *         connection      */
DECL|method|getConnectionBean ()
specifier|public
name|String
name|getConnectionBean
parameter_list|()
block|{
return|return
name|connectionBean
return|;
block|}
comment|/**      * Name of {@link org.influxdb.InfluxDB} to use.      */
DECL|method|setConnectionBean (String connectionBean)
specifier|public
name|void
name|setConnectionBean
parameter_list|(
name|String
name|connectionBean
parameter_list|)
block|{
name|this
operator|.
name|connectionBean
operator|=
name|connectionBean
expr_stmt|;
block|}
block|}
end_class

end_unit

