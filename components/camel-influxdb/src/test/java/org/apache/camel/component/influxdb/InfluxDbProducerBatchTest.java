begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.influxdb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|influxdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|influxdb
operator|.
name|dto
operator|.
name|BatchPoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|influxdb
operator|.
name|dto
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|InfluxDbProducerBatchTest
specifier|public
class|class
name|InfluxDbProducerBatchTest
extends|extends
name|AbstractInfluxDbTest
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:test"
argument_list|)
DECL|field|successEndpoint
name|MockEndpoint
name|successEndpoint
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:error"
argument_list|)
DECL|field|errorEndpoint
name|MockEndpoint
name|errorEndpoint
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"mock:error"
argument_list|)
operator|.
name|redeliveryDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//test route
name|from
argument_list|(
literal|"direct:test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"influxdb:influxDbBean?batch=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|resetEndpoints ()
specifier|public
name|void
name|resetEndpoints
parameter_list|()
block|{
name|errorEndpoint
operator|.
name|reset
argument_list|()
expr_stmt|;
name|successEndpoint
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeBatchPoints ()
specifier|public
name|void
name|writeBatchPoints
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|errorEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|successEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BatchPoints
name|batchPoints
init|=
name|createBatchPoints
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:test"
argument_list|,
name|batchPoints
argument_list|)
expr_stmt|;
name|errorEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|successEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|createBatchPoints ()
specifier|private
name|BatchPoints
name|createBatchPoints
parameter_list|()
block|{
name|BatchPoints
name|batchPoints
init|=
name|BatchPoints
operator|.
name|database
argument_list|(
literal|"myTestTimeSeries"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Point
name|point1
init|=
name|Point
operator|.
name|measurement
argument_list|(
literal|"cpu"
argument_list|)
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|addField
argument_list|(
literal|"idle"
argument_list|,
literal|90L
argument_list|)
operator|.
name|addField
argument_list|(
literal|"user"
argument_list|,
literal|9L
argument_list|)
operator|.
name|addField
argument_list|(
literal|"system"
argument_list|,
literal|1L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Point
name|point2
init|=
name|Point
operator|.
name|measurement
argument_list|(
literal|"disk"
argument_list|)
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|addField
argument_list|(
literal|"used"
argument_list|,
literal|8L
argument_list|)
operator|.
name|addField
argument_list|(
literal|"free"
argument_list|,
literal|1L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|batchPoints
operator|.
name|point
argument_list|(
name|point1
argument_list|)
expr_stmt|;
name|batchPoints
operator|.
name|point
argument_list|(
name|point2
argument_list|)
expr_stmt|;
return|return
name|batchPoints
return|;
block|}
block|}
end_class

end_unit

