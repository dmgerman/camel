begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.influxdb.converters
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|influxdb
operator|.
name|converters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|influxdb
operator|.
name|InfluxDbConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|influxdb
operator|.
name|dto
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|CamelInfluxDbConverterTest
specifier|public
class|class
name|CamelInfluxDbConverterTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelInfluxDbConverterTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|doesNotAddCamelHeaders ()
specifier|public
name|void
name|doesNotAddCamelHeaders
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pointInMapFormat
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointInMapFormat
operator|.
name|put
argument_list|(
name|InfluxDbConstants
operator|.
name|MEASUREMENT_NAME
argument_list|,
literal|"testCPU"
argument_list|)
expr_stmt|;
name|double
name|value
init|=
literal|99.999999d
decl_stmt|;
name|pointInMapFormat
operator|.
name|put
argument_list|(
literal|"busy"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Point
name|p
init|=
name|CamelInfluxDbConverters
operator|.
name|fromMapToPoint
argument_list|(
name|pointInMapFormat
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|p
operator|.
name|lineProtocol
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"doesNotAddCamelHeaders generated: \"{}\""
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|line
operator|.
name|contains
argument_list|(
name|InfluxDbConstants
operator|.
name|MEASUREMENT_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canAddDouble ()
specifier|public
name|void
name|canAddDouble
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pointInMapFormat
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointInMapFormat
operator|.
name|put
argument_list|(
name|InfluxDbConstants
operator|.
name|MEASUREMENT_NAME
argument_list|,
literal|"testCPU"
argument_list|)
expr_stmt|;
name|double
name|value
init|=
literal|99.999999d
decl_stmt|;
name|pointInMapFormat
operator|.
name|put
argument_list|(
literal|"busy"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Point
name|p
init|=
name|CamelInfluxDbConverters
operator|.
name|fromMapToPoint
argument_list|(
name|pointInMapFormat
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|p
operator|.
name|lineProtocol
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Doublecommand generated: \"{}\""
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
literal|"busy=99.999999"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canAddInt ()
specifier|public
name|void
name|canAddInt
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pointInMapFormat
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointInMapFormat
operator|.
name|put
argument_list|(
name|InfluxDbConstants
operator|.
name|MEASUREMENT_NAME
argument_list|,
literal|"testCPU"
argument_list|)
expr_stmt|;
name|int
name|value
init|=
literal|99999999
decl_stmt|;
name|pointInMapFormat
operator|.
name|put
argument_list|(
literal|"busy"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Point
name|p
init|=
name|CamelInfluxDbConverters
operator|.
name|fromMapToPoint
argument_list|(
name|pointInMapFormat
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|p
operator|.
name|lineProtocol
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Int command generated: \"{}\""
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
literal|"busy=99999999"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canAddByte ()
specifier|public
name|void
name|canAddByte
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pointInMapFormat
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointInMapFormat
operator|.
name|put
argument_list|(
name|InfluxDbConstants
operator|.
name|MEASUREMENT_NAME
argument_list|,
literal|"testCPU"
argument_list|)
expr_stmt|;
name|byte
name|value
init|=
name|Byte
operator|.
name|MAX_VALUE
decl_stmt|;
name|pointInMapFormat
operator|.
name|put
argument_list|(
literal|"busy"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Point
name|p
init|=
name|CamelInfluxDbConverters
operator|.
name|fromMapToPoint
argument_list|(
name|pointInMapFormat
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|p
operator|.
name|lineProtocol
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Byte command generated: \"{}\""
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
literal|"busy=127"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

