begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rss
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rss
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|ConstraintMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|ConstraintSecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|HashLoginService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|SecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|authentication
operator|.
name|BasicAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|security
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|security
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|JettyTestServer
specifier|public
specifier|final
class|class
name|JettyTestServer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JettyTestServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PORT
specifier|private
specifier|static
specifier|final
name|int
name|PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|instance
specifier|private
specifier|static
name|JettyTestServer
name|instance
decl_stmt|;
DECL|field|port
specifier|public
name|int
name|port
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|method|JettyTestServer ()
specifier|private
name|JettyTestServer
parameter_list|()
block|{     }
DECL|method|startServer ()
specifier|public
name|void
name|startServer
parameter_list|()
block|{
name|server
operator|=
operator|new
name|Server
argument_list|(
name|PORT
argument_list|)
expr_stmt|;
name|port
operator|=
name|PORT
expr_stmt|;
name|ServletContextHandler
name|servletContext
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|servletContext
operator|.
name|setSecurityHandler
argument_list|(
name|basicAuth
argument_list|(
literal|"camel"
argument_list|,
literal|"camelPass"
argument_list|,
literal|"Private!"
argument_list|)
argument_list|)
expr_stmt|;
name|servletContext
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|servletContext
argument_list|)
expr_stmt|;
name|servletContext
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
operator|new
name|MyHttpServlet
argument_list|()
argument_list|)
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not start Server!"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopServer ()
specifier|public
name|void
name|stopServer
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Server doesn't stop normal..."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|=
literal|null
expr_stmt|;
name|port
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
DECL|method|basicAuth (String username, String password, String realm)
specifier|private
name|SecurityHandler
name|basicAuth
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|realm
parameter_list|)
block|{
name|HashLoginService
name|l
init|=
operator|new
name|HashLoginService
argument_list|()
decl_stmt|;
name|l
operator|.
name|putUser
argument_list|(
name|username
argument_list|,
name|Credential
operator|.
name|getCredential
argument_list|(
name|password
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|l
operator|.
name|setName
argument_list|(
name|realm
argument_list|)
expr_stmt|;
name|Constraint
name|constraint
init|=
operator|new
name|Constraint
argument_list|()
decl_stmt|;
name|constraint
operator|.
name|setName
argument_list|(
name|Constraint
operator|.
name|__BASIC_AUTH
argument_list|)
expr_stmt|;
name|constraint
operator|.
name|setRoles
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|constraint
operator|.
name|setAuthenticate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ConstraintMapping
name|cm
init|=
operator|new
name|ConstraintMapping
argument_list|()
decl_stmt|;
name|cm
operator|.
name|setConstraint
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPathSpec
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|ConstraintSecurityHandler
name|csh
init|=
operator|new
name|ConstraintSecurityHandler
argument_list|()
decl_stmt|;
name|csh
operator|.
name|setAuthenticator
argument_list|(
operator|new
name|BasicAuthenticator
argument_list|()
argument_list|)
expr_stmt|;
name|csh
operator|.
name|setRealmName
argument_list|(
literal|"myrealm"
argument_list|)
expr_stmt|;
name|csh
operator|.
name|addConstraintMapping
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|csh
operator|.
name|setLoginService
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
name|csh
return|;
block|}
DECL|method|getInstance ()
specifier|public
specifier|static
name|JettyTestServer
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|JettyTestServer
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
DECL|class|MyHttpServlet
specifier|private
class|class
name|MyHttpServlet
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5594945031962091041L
decl_stmt|;
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
literal|"src/test/data/rss20.xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

