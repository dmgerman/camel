begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rss
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rss
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|syndication
operator|.
name|feed
operator|.
name|synd
operator|.
name|SyndEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|syndication
operator|.
name|feed
operator|.
name|synd
operator|.
name|SyndFeed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultPollingEndpoint
import|;
end_import

begin_comment
comment|/**  * An<a href="http://activemq.apache.org/camel/rss.html">RSS Endpoint</a>.  *   */
end_comment

begin_class
DECL|class|RssEndpoint
specifier|public
class|class
name|RssEndpoint
extends|extends
name|DefaultPollingEndpoint
block|{
comment|/**      * Header key for the {@link com.sun.syndication.feed.synd.SyndFeed} object is stored on the in message on the exchange.      */
DECL|field|HEADER_RSS_FEED
specifier|public
specifier|static
specifier|final
name|String
name|HEADER_RSS_FEED
init|=
literal|"org.apache.camel.component.rss.feed"
decl_stmt|;
DECL|field|rssUri
specifier|private
name|String
name|rssUri
decl_stmt|;
DECL|field|splitEntries
specifier|private
name|boolean
name|splitEntries
init|=
literal|true
decl_stmt|;
DECL|method|RssEndpoint (String uri, RssComponent component, String rssUri)
specifier|public
name|RssEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|RssComponent
name|component
parameter_list|,
name|String
name|rssUri
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|setRssUri
argument_list|(
name|rssUri
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RssProducer is not implemented"
argument_list|)
throw|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|RssConsumerSupport
name|answer
decl_stmt|;
if|if
condition|(
name|isSplitEntries
argument_list|()
condition|)
block|{
name|answer
operator|=
operator|new
name|RssEntryPollingConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|RssPollingConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
comment|// ScheduledPollConsumer default delay is 500 millis and that is too often for polling a feed,
comment|// so we override with a new default value. End user can override this value by providing a consumer.delay parameter
name|answer
operator|.
name|setDelay
argument_list|(
name|RssConsumerSupport
operator|.
name|DEFAULT_CONSUMER_DELAY
argument_list|)
expr_stmt|;
name|configureConsumer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createExchange (SyndFeed feed)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|SyndFeed
name|feed
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|feed
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HEADER_RSS_FEED
argument_list|,
name|feed
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
DECL|method|createExchange (SyndFeed feed, SyndEntry entry)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|SyndFeed
name|feed
parameter_list|,
name|SyndEntry
name|entry
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HEADER_RSS_FEED
argument_list|,
name|feed
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|setRssUri (String rssUri)
specifier|public
name|void
name|setRssUri
parameter_list|(
name|String
name|rssUri
parameter_list|)
block|{
name|this
operator|.
name|rssUri
operator|=
name|rssUri
expr_stmt|;
block|}
DECL|method|getRssUri ()
specifier|public
name|String
name|getRssUri
parameter_list|()
block|{
return|return
name|rssUri
return|;
block|}
DECL|method|setSplitEntries (boolean splitEntries)
specifier|public
name|void
name|setSplitEntries
parameter_list|(
name|boolean
name|splitEntries
parameter_list|)
block|{
name|this
operator|.
name|splitEntries
operator|=
name|splitEntries
expr_stmt|;
block|}
DECL|method|isSplitEntries ()
specifier|public
name|boolean
name|isSplitEntries
parameter_list|()
block|{
return|return
name|splitEntries
return|;
block|}
block|}
end_class

end_unit

