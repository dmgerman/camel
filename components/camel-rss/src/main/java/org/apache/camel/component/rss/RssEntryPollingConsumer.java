begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rss
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rss
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|syndication
operator|.
name|feed
operator|.
name|synd
operator|.
name|SyndEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|syndication
operator|.
name|feed
operator|.
name|synd
operator|.
name|SyndFeed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_comment
comment|/**  * Consumer to poll RSS feeds and return each entry from the feed step by step.  *  */
end_comment

begin_class
DECL|class|RssEntryPollingConsumer
specifier|public
class|class
name|RssEntryPollingConsumer
extends|extends
name|RssPollingConsumer
block|{
DECL|field|entryIndex
specifier|private
name|int
name|entryIndex
decl_stmt|;
DECL|field|list
specifier|private
name|List
argument_list|<
name|SyndEntry
argument_list|>
name|list
decl_stmt|;
DECL|method|RssEntryPollingConsumer (RssEndpoint endpoint, Processor processor)
specifier|public
name|RssEntryPollingConsumer
parameter_list|(
name|RssEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
DECL|method|poll ()
specifier|public
name|void
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
name|SyndFeed
name|feed
init|=
name|createFeed
argument_list|()
decl_stmt|;
name|populateList
argument_list|(
name|feed
argument_list|)
expr_stmt|;
while|while
condition|(
name|hasNextEntry
argument_list|()
condition|)
block|{
name|SyndEntry
name|entry
init|=
name|list
operator|.
name|get
argument_list|(
name|entryIndex
operator|--
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|feed
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// return and wait for the next poll to continue from last time (this consumer is stateful)
return|return;
block|}
name|list
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|populateList (SyndFeed feed)
specifier|private
name|void
name|populateList
parameter_list|(
name|SyndFeed
name|feed
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
name|feed
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|entryIndex
operator|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
block|}
DECL|method|hasNextEntry ()
specifier|private
name|boolean
name|hasNextEntry
parameter_list|()
block|{
return|return
name|entryIndex
operator|>=
literal|0
return|;
block|}
block|}
end_class

end_unit

