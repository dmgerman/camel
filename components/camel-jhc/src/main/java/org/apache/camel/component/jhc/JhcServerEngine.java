begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jhc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jhc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jhc
operator|.
name|JhcConsumer
operator|.
name|MyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|DefaultServerIOEventDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|reactor
operator|.
name|SSLServerIOEventDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|reactor
operator|.
name|IOEventDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|reactor
operator|.
name|IOReactorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|reactor
operator|.
name|ListeningIOReactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandlerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandlerResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_class
DECL|class|JhcServerEngine
specifier|public
class|class
name|JhcServerEngine
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JhcServerEngine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|params
specifier|private
specifier|final
name|HttpParams
name|params
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|protocol
specifier|private
name|String
name|protocol
decl_stmt|;
DECL|field|nbThreads
specifier|private
name|int
name|nbThreads
init|=
literal|2
decl_stmt|;
DECL|field|ioReactor
specifier|private
name|ListeningIOReactor
name|ioReactor
decl_stmt|;
DECL|field|threadFactory
specifier|private
name|ThreadFactory
name|threadFactory
decl_stmt|;
DECL|field|runner
specifier|private
name|Thread
name|runner
decl_stmt|;
DECL|field|sslContext
specifier|private
name|SSLContext
name|sslContext
decl_stmt|;
DECL|field|serviceHandler
specifier|private
name|AsyncBufferingHttpServiceHandler
name|serviceHandler
decl_stmt|;
DECL|field|handlerRegistry
specifier|private
name|HttpRequestHandlerRegistry
name|handlerRegistry
decl_stmt|;
DECL|field|isStarted
specifier|private
name|boolean
name|isStarted
decl_stmt|;
DECL|field|referenceCounter
specifier|private
name|int
name|referenceCounter
decl_stmt|;
DECL|method|JhcServerEngine (HttpParams params, int port, String protocol)
name|JhcServerEngine
parameter_list|(
name|HttpParams
name|params
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|serviceHandler
operator|=
operator|new
name|AsyncBufferingHttpServiceHandler
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|handlerRegistry
operator|=
operator|new
name|HttpRequestHandlerRegistry
argument_list|()
expr_stmt|;
name|serviceHandler
operator|.
name|setHandlerResolver
argument_list|(
name|handlerRegistry
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocol
return|;
block|}
DECL|method|setSslContext (SSLContext sslContext)
specifier|public
name|void
name|setSslContext
parameter_list|(
name|SSLContext
name|sslContext
parameter_list|)
block|{
name|this
operator|.
name|sslContext
operator|=
name|sslContext
expr_stmt|;
block|}
DECL|method|getSslContext ()
specifier|public
name|SSLContext
name|getSslContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|sslContext
return|;
block|}
DECL|method|register (String pattern, AsyncHttpRequestHandler handler)
specifier|public
specifier|synchronized
name|void
name|register
parameter_list|(
name|String
name|pattern
parameter_list|,
name|AsyncHttpRequestHandler
name|handler
parameter_list|)
block|{
name|handlerRegistry
operator|.
name|register
argument_list|(
name|pattern
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|referenceCounter
operator|++
expr_stmt|;
block|}
DECL|method|unregister (String pattern)
specifier|public
specifier|synchronized
name|void
name|unregister
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|handlerRegistry
operator|.
name|unregister
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|referenceCounter
operator|--
expr_stmt|;
block|}
DECL|method|getReferenceCounter ()
specifier|public
name|int
name|getReferenceCounter
parameter_list|()
block|{
return|return
name|referenceCounter
return|;
block|}
DECL|method|isStarted ()
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|isStarted
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOReactorException
block|{
specifier|final
name|SocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|ioReactor
operator|=
operator|new
name|DefaultListeningIOReactor
argument_list|(
name|nbThreads
argument_list|,
name|threadFactory
argument_list|,
name|params
argument_list|)
expr_stmt|;
specifier|final
name|IOEventDispatch
name|ioEventDispatch
decl_stmt|;
if|if
condition|(
literal|"https"
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
name|ioEventDispatch
operator|=
operator|new
name|SSLServerIOEventDispatch
argument_list|(
name|serviceHandler
argument_list|,
name|sslContext
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ioEventDispatch
operator|=
operator|new
name|DefaultServerIOEventDispatch
argument_list|(
name|serviceHandler
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|runner
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ioReactor
operator|.
name|listen
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|isStarted
operator|=
literal|true
expr_stmt|;
name|ioReactor
operator|.
name|execute
argument_list|(
name|ioEventDispatch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"I/O error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping the jhc ioReactor "
argument_list|)
expr_stmt|;
name|ioReactor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting the runner"
argument_list|)
expr_stmt|;
try|try
block|{
name|runner
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//do nothing here
block|}
name|isStarted
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Runner stopped"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

