begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jhc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jhc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ConnectionReuseStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponseFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|MethodNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|UnsupportedHttpVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ByteArrayEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|ContentDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|ContentEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|NHttpServerConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|NHttpServiceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|entity
operator|.
name|ContentBufferEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|entity
operator|.
name|ContentOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|NHttpServiceHandlerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|ByteBufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|ContentInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|ContentOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|HeapByteBufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|SimpleInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|SimpleOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpParamsLinker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|ExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EncodingUtils
import|;
end_import

begin_comment
comment|/**  * HTTP service handler implementation that buffers the content of HTTP messages  * entirely in memory and processes HTTP requests on the main I/O thread.  *  *<p>This service handler should be used only when dealing with HTTP messages  * that are known to be limited in length</p>  *  * @author<a href="mailto:oleg at ural.ru">Oleg Kalnichevski</a>  *  */
end_comment

begin_class
DECL|class|BufferingHttpServiceHandler
specifier|public
class|class
name|BufferingHttpServiceHandler
extends|extends
name|NHttpServiceHandlerBase
implements|implements
name|NHttpServiceHandler
block|{
DECL|method|BufferingHttpServiceHandler ( final HttpProcessor httpProcessor, final HttpResponseFactory responseFactory, final ConnectionReuseStrategy connStrategy, final ByteBufferAllocator allocator, final HttpParams params)
specifier|public
name|BufferingHttpServiceHandler
parameter_list|(
specifier|final
name|HttpProcessor
name|httpProcessor
parameter_list|,
specifier|final
name|HttpResponseFactory
name|responseFactory
parameter_list|,
specifier|final
name|ConnectionReuseStrategy
name|connStrategy
parameter_list|,
specifier|final
name|ByteBufferAllocator
name|allocator
parameter_list|,
specifier|final
name|HttpParams
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|httpProcessor
argument_list|,
name|responseFactory
argument_list|,
name|connStrategy
argument_list|,
name|allocator
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|BufferingHttpServiceHandler ( final HttpProcessor httpProcessor, final HttpResponseFactory responseFactory, final ConnectionReuseStrategy connStrategy, final HttpParams params)
specifier|public
name|BufferingHttpServiceHandler
parameter_list|(
specifier|final
name|HttpProcessor
name|httpProcessor
parameter_list|,
specifier|final
name|HttpResponseFactory
name|responseFactory
parameter_list|,
specifier|final
name|ConnectionReuseStrategy
name|connStrategy
parameter_list|,
specifier|final
name|HttpParams
name|params
parameter_list|)
block|{
name|this
argument_list|(
name|httpProcessor
argument_list|,
name|responseFactory
argument_list|,
name|connStrategy
argument_list|,
operator|new
name|HeapByteBufferAllocator
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|connected (final NHttpServerConnection conn)
specifier|public
name|void
name|connected
parameter_list|(
specifier|final
name|NHttpServerConnection
name|conn
parameter_list|)
block|{
name|HttpContext
name|context
init|=
name|conn
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|ServerConnState
name|connState
init|=
operator|new
name|ServerConnState
argument_list|(
name|allocator
argument_list|)
decl_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|CONN_STATE
argument_list|,
name|connState
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|eventListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventListener
operator|.
name|connectionOpen
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|requestReceived (final NHttpServerConnection conn)
specifier|public
name|void
name|requestReceived
parameter_list|(
specifier|final
name|NHttpServerConnection
name|conn
parameter_list|)
block|{
name|HttpContext
name|context
init|=
name|conn
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|HttpRequest
name|request
init|=
name|conn
operator|.
name|getHttpRequest
argument_list|()
decl_stmt|;
name|HttpParamsLinker
operator|.
name|link
argument_list|(
name|request
argument_list|,
name|this
operator|.
name|params
argument_list|)
expr_stmt|;
name|ServerConnState
name|connState
init|=
operator|(
name|ServerConnState
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|CONN_STATE
argument_list|)
decl_stmt|;
comment|// Update connection state
name|connState
operator|.
name|resetInput
argument_list|()
expr_stmt|;
name|connState
operator|.
name|setRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|connState
operator|.
name|setInputState
argument_list|(
name|ServerConnState
operator|.
name|REQUEST_RECEIVED
argument_list|)
expr_stmt|;
name|ProtocolVersion
name|ver
init|=
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getProtocolVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ver
operator|.
name|lessEquals
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|)
condition|)
block|{
comment|// Downgrade protocol version if greater than HTTP/1.1
name|ver
operator|=
name|HttpVersion
operator|.
name|HTTP_1_1
expr_stmt|;
block|}
name|HttpResponse
name|response
decl_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|expectContinue
argument_list|()
condition|)
block|{
name|response
operator|=
name|this
operator|.
name|responseFactory
operator|.
name|newHttpResponse
argument_list|(
name|ver
argument_list|,
name|HttpStatus
operator|.
name|SC_CONTINUE
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|HttpParamsLinker
operator|.
name|link
argument_list|(
name|response
argument_list|,
name|this
operator|.
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|expectationVerifier
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|expectationVerifier
operator|.
name|verify
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpException
name|ex
parameter_list|)
block|{
name|response
operator|=
name|this
operator|.
name|responseFactory
operator|.
name|newHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_0
argument_list|,
name|HttpStatus
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|HttpParamsLinker
operator|.
name|link
argument_list|(
name|response
argument_list|,
name|this
operator|.
name|params
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
name|ex
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|<
literal|200
condition|)
block|{
comment|// Send 1xx response indicating the server expections
comment|// have been met
name|conn
operator|.
name|submitResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The request does not meet the server expections
name|conn
operator|.
name|resetInput
argument_list|()
expr_stmt|;
name|connState
operator|.
name|resetInput
argument_list|()
expr_stmt|;
name|sendResponse
argument_list|(
name|conn
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Request content is expected.
comment|// Wait until the request content is fully received
block|}
else|else
block|{
comment|// No request content is expected.
comment|// Process request right away
name|conn
operator|.
name|suspendInput
argument_list|()
expr_stmt|;
name|processRequest
argument_list|(
name|conn
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|shutdownConnection
argument_list|(
name|conn
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|eventListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventListener
operator|.
name|fatalIOException
argument_list|(
name|ex
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HttpException
name|ex
parameter_list|)
block|{
name|closeConnection
argument_list|(
name|conn
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|eventListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventListener
operator|.
name|fatalProtocolException
argument_list|(
name|ex
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|closed (final NHttpServerConnection conn)
specifier|public
name|void
name|closed
parameter_list|(
specifier|final
name|NHttpServerConnection
name|conn
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|eventListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventListener
operator|.
name|connectionClosed
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|exception (final NHttpServerConnection conn, final HttpException httpex)
specifier|public
name|void
name|exception
parameter_list|(
specifier|final
name|NHttpServerConnection
name|conn
parameter_list|,
specifier|final
name|HttpException
name|httpex
parameter_list|)
block|{
name|HttpContext
name|context
init|=
name|conn
operator|.
name|getContext
argument_list|()
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|this
operator|.
name|responseFactory
operator|.
name|newHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_0
argument_list|,
name|HttpStatus
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|HttpParamsLinker
operator|.
name|link
argument_list|(
name|response
argument_list|,
name|this
operator|.
name|params
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
name|httpex
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sendResponse
argument_list|(
name|conn
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|shutdownConnection
argument_list|(
name|conn
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|eventListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventListener
operator|.
name|fatalIOException
argument_list|(
name|ex
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HttpException
name|ex
parameter_list|)
block|{
name|closeConnection
argument_list|(
name|conn
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|eventListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventListener
operator|.
name|fatalProtocolException
argument_list|(
name|ex
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|inputReady (final NHttpServerConnection conn, final ContentDecoder decoder)
specifier|public
name|void
name|inputReady
parameter_list|(
specifier|final
name|NHttpServerConnection
name|conn
parameter_list|,
specifier|final
name|ContentDecoder
name|decoder
parameter_list|)
block|{
name|HttpContext
name|context
init|=
name|conn
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|HttpRequest
name|request
init|=
name|conn
operator|.
name|getHttpRequest
argument_list|()
decl_stmt|;
name|ServerConnState
name|connState
init|=
operator|(
name|ServerConnState
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|CONN_STATE
argument_list|)
decl_stmt|;
name|ContentInputBuffer
name|buffer
init|=
name|connState
operator|.
name|getInbuffer
argument_list|()
decl_stmt|;
comment|// Update connection state
name|connState
operator|.
name|setInputState
argument_list|(
name|ServerConnState
operator|.
name|REQUEST_BODY_STREAM
argument_list|)
expr_stmt|;
try|try
block|{
name|buffer
operator|.
name|consumeContent
argument_list|(
name|decoder
argument_list|)
expr_stmt|;
if|if
condition|(
name|decoder
operator|.
name|isCompleted
argument_list|()
condition|)
block|{
comment|// Request entity has been fully received
name|connState
operator|.
name|setInputState
argument_list|(
name|ServerConnState
operator|.
name|REQUEST_BODY_DONE
argument_list|)
expr_stmt|;
comment|// Create a wrapper entity instead of the original one
name|HttpEntityEnclosingRequest
name|entityReq
init|=
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|entityReq
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|entityReq
operator|.
name|setEntity
argument_list|(
operator|new
name|ContentBufferEntity
argument_list|(
name|entityReq
operator|.
name|getEntity
argument_list|()
argument_list|,
name|connState
operator|.
name|getInbuffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|suspendInput
argument_list|()
expr_stmt|;
name|processRequest
argument_list|(
name|conn
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|shutdownConnection
argument_list|(
name|conn
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|eventListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventListener
operator|.
name|fatalIOException
argument_list|(
name|ex
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HttpException
name|ex
parameter_list|)
block|{
name|closeConnection
argument_list|(
name|conn
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|eventListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventListener
operator|.
name|fatalProtocolException
argument_list|(
name|ex
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|responseReady (final NHttpServerConnection conn)
specifier|public
name|void
name|responseReady
parameter_list|(
specifier|final
name|NHttpServerConnection
name|conn
parameter_list|)
block|{     }
DECL|method|outputReady (final NHttpServerConnection conn, final ContentEncoder encoder)
specifier|public
name|void
name|outputReady
parameter_list|(
specifier|final
name|NHttpServerConnection
name|conn
parameter_list|,
specifier|final
name|ContentEncoder
name|encoder
parameter_list|)
block|{
name|HttpContext
name|context
init|=
name|conn
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|HttpResponse
name|response
init|=
name|conn
operator|.
name|getHttpResponse
argument_list|()
decl_stmt|;
name|ServerConnState
name|connState
init|=
operator|(
name|ServerConnState
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|CONN_STATE
argument_list|)
decl_stmt|;
name|ContentOutputBuffer
name|buffer
init|=
name|connState
operator|.
name|getOutbuffer
argument_list|()
decl_stmt|;
comment|// Update connection state
name|connState
operator|.
name|setOutputState
argument_list|(
name|ServerConnState
operator|.
name|RESPONSE_BODY_STREAM
argument_list|)
expr_stmt|;
try|try
block|{
name|buffer
operator|.
name|produceContent
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoder
operator|.
name|isCompleted
argument_list|()
condition|)
block|{
name|connState
operator|.
name|setOutputState
argument_list|(
name|ServerConnState
operator|.
name|RESPONSE_BODY_DONE
argument_list|)
expr_stmt|;
name|connState
operator|.
name|resetOutput
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|connStrategy
operator|.
name|keepAlive
argument_list|(
name|response
argument_list|,
name|context
argument_list|)
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conn
operator|.
name|requestInput
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|shutdownConnection
argument_list|(
name|conn
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|eventListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventListener
operator|.
name|fatalIOException
argument_list|(
name|ex
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleException (final HttpException ex, final HttpResponse response)
specifier|protected
name|void
name|handleException
parameter_list|(
specifier|final
name|HttpException
name|ex
parameter_list|,
specifier|final
name|HttpResponse
name|response
parameter_list|)
block|{
name|int
name|code
init|=
name|HttpStatus
operator|.
name|SC_INTERNAL_SERVER_ERROR
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|MethodNotSupportedException
condition|)
block|{
name|code
operator|=
name|HttpStatus
operator|.
name|SC_NOT_IMPLEMENTED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ex
operator|instanceof
name|UnsupportedHttpVersionException
condition|)
block|{
name|code
operator|=
name|HttpStatus
operator|.
name|SC_HTTP_VERSION_NOT_SUPPORTED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ex
operator|instanceof
name|ProtocolException
condition|)
block|{
name|code
operator|=
name|HttpStatus
operator|.
name|SC_BAD_REQUEST
expr_stmt|;
block|}
name|response
operator|.
name|setStatusCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|byte
index|[]
name|msg
init|=
name|EncodingUtils
operator|.
name|getAsciiBytes
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayEntity
name|entity
init|=
operator|new
name|ByteArrayEntity
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setContentType
argument_list|(
literal|"text/plain; charset=US-ASCII"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|processRequest ( final NHttpServerConnection conn, final HttpRequest request)
specifier|protected
name|void
name|processRequest
parameter_list|(
specifier|final
name|NHttpServerConnection
name|conn
parameter_list|,
specifier|final
name|HttpRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|HttpException
block|{
name|HttpContext
name|context
init|=
name|conn
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|ProtocolVersion
name|ver
init|=
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getProtocolVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ver
operator|.
name|lessEquals
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|)
condition|)
block|{
comment|// Downgrade protocol version if greater than HTTP/1.1
name|ver
operator|=
name|HttpVersion
operator|.
name|HTTP_1_1
expr_stmt|;
block|}
name|HttpResponse
name|response
init|=
name|this
operator|.
name|responseFactory
operator|.
name|newHttpResponse
argument_list|(
name|ver
argument_list|,
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|conn
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|HttpParamsLinker
operator|.
name|link
argument_list|(
name|response
argument_list|,
name|this
operator|.
name|params
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|ExecutionContext
operator|.
name|HTTP_REQUEST
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|ExecutionContext
operator|.
name|HTTP_CONNECTION
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|ExecutionContext
operator|.
name|HTTP_RESPONSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|httpProcessor
operator|.
name|process
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|HttpRequestHandler
name|handler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|handlerResolver
operator|!=
literal|null
condition|)
block|{
name|String
name|requestURI
init|=
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|handler
operator|=
name|this
operator|.
name|handlerResolver
operator|.
name|lookup
argument_list|(
name|requestURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handle
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setStatusCode
argument_list|(
name|HttpStatus
operator|.
name|SC_NOT_IMPLEMENTED
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HttpException
name|ex
parameter_list|)
block|{
name|response
operator|=
name|this
operator|.
name|responseFactory
operator|.
name|newHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_0
argument_list|,
name|HttpStatus
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|HttpParamsLinker
operator|.
name|link
argument_list|(
name|response
argument_list|,
name|this
operator|.
name|params
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
name|ex
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
name|sendResponse
argument_list|(
name|conn
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|sendResponse ( final NHttpServerConnection conn, final HttpResponse response)
specifier|protected
name|void
name|sendResponse
parameter_list|(
specifier|final
name|NHttpServerConnection
name|conn
parameter_list|,
specifier|final
name|HttpResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|HttpException
block|{
name|HttpContext
name|context
init|=
name|conn
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|ServerConnState
name|connState
init|=
operator|(
name|ServerConnState
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|CONN_STATE
argument_list|)
decl_stmt|;
name|ContentOutputBuffer
name|buffer
init|=
name|connState
operator|.
name|getOutbuffer
argument_list|()
decl_stmt|;
name|this
operator|.
name|httpProcessor
operator|.
name|process
argument_list|(
name|response
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|canResponseHaveBody
argument_list|(
name|connState
operator|.
name|getRequest
argument_list|()
argument_list|,
name|response
argument_list|)
condition|)
block|{
name|response
operator|.
name|setEntity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|submitResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// Update connection state
name|connState
operator|.
name|setOutputState
argument_list|(
name|ServerConnState
operator|.
name|RESPONSE_SENT
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|OutputStream
name|outstream
init|=
operator|new
name|ContentOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|entity
operator|.
name|writeTo
argument_list|(
name|outstream
argument_list|)
expr_stmt|;
name|outstream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outstream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connState
operator|.
name|resetOutput
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|connStrategy
operator|.
name|keepAlive
argument_list|(
name|response
argument_list|,
name|context
argument_list|)
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conn
operator|.
name|requestInput
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|ServerConnState
specifier|static
class|class
name|ServerConnState
block|{
DECL|field|READY
specifier|public
specifier|static
specifier|final
name|int
name|READY
init|=
literal|0
decl_stmt|;
DECL|field|REQUEST_RECEIVED
specifier|public
specifier|static
specifier|final
name|int
name|REQUEST_RECEIVED
init|=
literal|1
decl_stmt|;
DECL|field|REQUEST_BODY_STREAM
specifier|public
specifier|static
specifier|final
name|int
name|REQUEST_BODY_STREAM
init|=
literal|2
decl_stmt|;
DECL|field|REQUEST_BODY_DONE
specifier|public
specifier|static
specifier|final
name|int
name|REQUEST_BODY_DONE
init|=
literal|4
decl_stmt|;
DECL|field|RESPONSE_SENT
specifier|public
specifier|static
specifier|final
name|int
name|RESPONSE_SENT
init|=
literal|8
decl_stmt|;
DECL|field|RESPONSE_BODY_STREAM
specifier|public
specifier|static
specifier|final
name|int
name|RESPONSE_BODY_STREAM
init|=
literal|16
decl_stmt|;
DECL|field|RESPONSE_BODY_DONE
specifier|public
specifier|static
specifier|final
name|int
name|RESPONSE_BODY_DONE
init|=
literal|32
decl_stmt|;
DECL|field|inbuffer
specifier|private
name|SimpleInputBuffer
name|inbuffer
decl_stmt|;
DECL|field|outbuffer
specifier|private
name|ContentOutputBuffer
name|outbuffer
decl_stmt|;
DECL|field|inputState
specifier|private
name|int
name|inputState
decl_stmt|;
DECL|field|outputState
specifier|private
name|int
name|outputState
decl_stmt|;
DECL|field|request
specifier|private
name|HttpRequest
name|request
decl_stmt|;
DECL|field|allocator
specifier|private
specifier|final
name|ByteBufferAllocator
name|allocator
decl_stmt|;
DECL|method|ServerConnState (final ByteBufferAllocator allocator)
specifier|public
name|ServerConnState
parameter_list|(
specifier|final
name|ByteBufferAllocator
name|allocator
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|inputState
operator|=
name|READY
expr_stmt|;
name|this
operator|.
name|outputState
operator|=
name|READY
expr_stmt|;
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
block|}
DECL|method|getInbuffer ()
specifier|public
name|ContentInputBuffer
name|getInbuffer
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|inbuffer
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|inbuffer
operator|=
operator|new
name|SimpleInputBuffer
argument_list|(
literal|2048
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|inbuffer
return|;
block|}
DECL|method|getOutbuffer ()
specifier|public
name|ContentOutputBuffer
name|getOutbuffer
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|outbuffer
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|outbuffer
operator|=
operator|new
name|SimpleOutputBuffer
argument_list|(
literal|2048
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|outbuffer
return|;
block|}
DECL|method|getInputState ()
specifier|public
name|int
name|getInputState
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputState
return|;
block|}
DECL|method|setInputState (int inputState)
specifier|public
name|void
name|setInputState
parameter_list|(
name|int
name|inputState
parameter_list|)
block|{
name|this
operator|.
name|inputState
operator|=
name|inputState
expr_stmt|;
block|}
DECL|method|getOutputState ()
specifier|public
name|int
name|getOutputState
parameter_list|()
block|{
return|return
name|this
operator|.
name|outputState
return|;
block|}
DECL|method|setOutputState (int outputState)
specifier|public
name|void
name|setOutputState
parameter_list|(
name|int
name|outputState
parameter_list|)
block|{
name|this
operator|.
name|outputState
operator|=
name|outputState
expr_stmt|;
block|}
DECL|method|getRequest ()
specifier|public
name|HttpRequest
name|getRequest
parameter_list|()
block|{
return|return
name|this
operator|.
name|request
return|;
block|}
DECL|method|setRequest (final HttpRequest request)
specifier|public
name|void
name|setRequest
parameter_list|(
specifier|final
name|HttpRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
DECL|method|resetInput ()
specifier|public
name|void
name|resetInput
parameter_list|()
block|{
name|this
operator|.
name|inbuffer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|request
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|inputState
operator|=
name|READY
expr_stmt|;
block|}
DECL|method|resetOutput ()
specifier|public
name|void
name|resetOutput
parameter_list|()
block|{
name|this
operator|.
name|outbuffer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|outputState
operator|=
name|READY
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

