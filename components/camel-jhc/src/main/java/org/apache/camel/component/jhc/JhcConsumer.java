begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jhc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jhc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponseFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|DefaultHttpResponseFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|NHttpConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandler
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA. User: gnodet Date: Sep 7, 2007 Time: 8:15:54 PM To  * change this template use File | Settings | File Templates.  */
end_comment

begin_class
DECL|class|JhcConsumer
specifier|public
class|class
name|JhcConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JhcConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|engine
specifier|private
name|JhcServerEngine
name|engine
decl_stmt|;
DECL|field|handler
specifier|private
name|MyHandler
name|handler
decl_stmt|;
DECL|method|JhcConsumer (JhcEndpoint endpoint, Processor processor)
specifier|public
name|JhcConsumer
parameter_list|(
name|JhcEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|engine
operator|=
name|JhcServerEngineFactory
operator|.
name|getJhcServerEngine
argument_list|(
name|endpoint
operator|.
name|getParams
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|=
operator|new
name|MyHandler
argument_list|(
name|endpoint
operator|.
name|getParams
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getEndpoint ()
specifier|public
name|JhcEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|JhcEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|engine
operator|.
name|register
argument_list|(
name|handler
operator|.
name|getPath
argument_list|()
operator|+
literal|"*"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|engine
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|engine
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|.
name|unregister
argument_list|(
name|handler
operator|.
name|getPath
argument_list|()
operator|+
literal|"*"
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|.
name|getReferenceCounter
argument_list|()
operator|==
literal|0
condition|)
block|{
name|engine
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|class|MyHttpRequestHandler
class|class
name|MyHttpRequestHandler
implements|implements
name|HttpRequestHandler
block|{
DECL|method|handle (HttpRequest httpRequest, HttpResponse httpResponse, HttpContext httpContext)
specifier|public
name|void
name|handle
parameter_list|(
name|HttpRequest
name|httpRequest
parameter_list|,
name|HttpResponse
name|httpResponse
parameter_list|,
name|HttpContext
name|httpContext
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"handle"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|EventLogger
specifier|static
class|class
name|EventLogger
implements|implements
name|EventListener
block|{
DECL|method|connectionOpen (final NHttpConnection conn)
specifier|public
name|void
name|connectionOpen
parameter_list|(
specifier|final
name|NHttpConnection
name|conn
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection open: "
operator|+
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|connectionTimeout (final NHttpConnection conn)
specifier|public
name|void
name|connectionTimeout
parameter_list|(
specifier|final
name|NHttpConnection
name|conn
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection timed out: "
operator|+
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|connectionClosed (final NHttpConnection conn)
specifier|public
name|void
name|connectionClosed
parameter_list|(
specifier|final
name|NHttpConnection
name|conn
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection closed: "
operator|+
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fatalIOException (final IOException ex, final NHttpConnection conn)
specifier|public
name|void
name|fatalIOException
parameter_list|(
specifier|final
name|IOException
name|ex
parameter_list|,
specifier|final
name|NHttpConnection
name|conn
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"I/O error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fatalProtocolException (final HttpException ex, final NHttpConnection conn)
specifier|public
name|void
name|fatalProtocolException
parameter_list|(
specifier|final
name|HttpException
name|ex
parameter_list|,
specifier|final
name|NHttpConnection
name|conn
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HTTP error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MyHandler
class|class
name|MyHandler
implements|implements
name|AsyncHttpRequestHandler
block|{
DECL|field|params
specifier|private
specifier|final
name|HttpParams
name|params
decl_stmt|;
DECL|field|responseFactory
specifier|private
specifier|final
name|HttpResponseFactory
name|responseFactory
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|method|MyHandler (HttpParams params, String path)
specifier|public
name|MyHandler
parameter_list|(
name|HttpParams
name|params
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
argument_list|(
name|params
argument_list|,
name|path
argument_list|,
operator|new
name|DefaultHttpResponseFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|MyHandler (HttpParams params, String path, HttpResponseFactory responseFactory)
specifier|public
name|MyHandler
parameter_list|(
name|HttpParams
name|params
parameter_list|,
name|String
name|path
parameter_list|,
name|HttpResponseFactory
name|responseFactory
parameter_list|)
block|{
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|responseFactory
operator|=
name|responseFactory
expr_stmt|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|handle (final HttpRequest request, final HttpContext context, final AsyncResponseHandler handler)
specifier|public
name|void
name|handle
parameter_list|(
specifier|final
name|HttpRequest
name|request
parameter_list|,
specifier|final
name|HttpContext
name|context
parameter_list|,
specifier|final
name|AsyncResponseHandler
name|handler
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"http.uri"
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"handleExchange"
argument_list|)
expr_stmt|;
comment|// create the default response to this request
name|ProtocolVersion
name|httpVersion
init|=
operator|(
name|HttpVersion
operator|)
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getProtocolVersion
argument_list|()
decl_stmt|;
name|HttpResponse
name|response
init|=
name|responseFactory
operator|.
name|newHttpResponse
argument_list|(
name|httpVersion
argument_list|,
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|response
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|HttpEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|response
operator|.
name|setParams
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handle (HttpRequest request, HttpResponse response, HttpContext context)
specifier|public
name|void
name|handle
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
comment|// now we just handler the requset async, do nothing here
block|}
block|}
block|}
end_class

end_unit

