begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jhc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jhc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|CancelledKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SelectionKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ServerSocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|reactor
operator|.
name|AbstractMultiworkerIOReactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|reactor
operator|.
name|ChannelEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|reactor
operator|.
name|IOReactorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|reactor
operator|.
name|ListeningIOReactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_comment
comment|/**  * Trunk version of DefaultListenerIOReactor.  * Should be removed when upgrading to httpcore> alpha5  */
end_comment

begin_class
DECL|class|DefaultListeningIOReactor
specifier|public
class|class
name|DefaultListeningIOReactor
extends|extends
name|AbstractMultiworkerIOReactor
implements|implements
name|ListeningIOReactor
block|{
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
DECL|field|params
specifier|private
specifier|final
name|HttpParams
name|params
decl_stmt|;
DECL|method|DefaultListeningIOReactor ( int workerCount, final ThreadFactory threadFactory, final HttpParams params)
specifier|public
name|DefaultListeningIOReactor
parameter_list|(
name|int
name|workerCount
parameter_list|,
specifier|final
name|ThreadFactory
name|threadFactory
parameter_list|,
specifier|final
name|HttpParams
name|params
parameter_list|)
throws|throws
name|IOReactorException
block|{
name|super
argument_list|(
name|workerCount
argument_list|,
name|threadFactory
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
DECL|method|DefaultListeningIOReactor ( int workerCount, final HttpParams params)
specifier|public
name|DefaultListeningIOReactor
parameter_list|(
name|int
name|workerCount
parameter_list|,
specifier|final
name|HttpParams
name|params
parameter_list|)
throws|throws
name|IOReactorException
block|{
name|this
argument_list|(
name|workerCount
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|processEvents (final Set selectedKeys)
specifier|private
name|void
name|processEvents
parameter_list|(
specifier|final
name|Set
name|selectedKeys
parameter_list|)
throws|throws
name|IOReactorException
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|selectedKeys
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SelectionKey
name|key
init|=
operator|(
name|SelectionKey
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|processEvent
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|selectedKeys
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|processEvent (final SelectionKey key)
specifier|private
name|void
name|processEvent
parameter_list|(
specifier|final
name|SelectionKey
name|key
parameter_list|)
throws|throws
name|IOReactorException
block|{
try|try
block|{
if|if
condition|(
name|key
operator|.
name|isAcceptable
argument_list|()
condition|)
block|{
name|ServerSocketChannel
name|serverChannel
init|=
operator|(
name|ServerSocketChannel
operator|)
name|key
operator|.
name|channel
argument_list|()
decl_stmt|;
name|SocketChannel
name|socketChannel
init|=
literal|null
decl_stmt|;
try|try
block|{
name|socketChannel
operator|=
name|serverChannel
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|exceptionHandler
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|exceptionHandler
operator|.
name|handle
argument_list|(
name|ex
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOReactorException
argument_list|(
literal|"Failure accepting connection"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|socketChannel
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|prepareSocket
argument_list|(
name|socketChannel
operator|.
name|socket
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|exceptionHandler
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|exceptionHandler
operator|.
name|handle
argument_list|(
name|ex
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOReactorException
argument_list|(
literal|"Failure initalizing socket"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
name|ChannelEntry
name|entry
init|=
operator|new
name|ChannelEntry
argument_list|(
name|socketChannel
argument_list|)
decl_stmt|;
name|addChannel
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|CancelledKeyException
name|ex
parameter_list|)
block|{
name|key
operator|.
name|attach
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|listen ( final SocketAddress address)
specifier|public
name|SocketAddress
name|listen
parameter_list|(
specifier|final
name|SocketAddress
name|address
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"I/O reactor has been shut down"
argument_list|)
throw|;
block|}
name|ServerSocketChannel
name|serverChannel
init|=
name|ServerSocketChannel
operator|.
name|open
argument_list|()
decl_stmt|;
name|serverChannel
operator|.
name|configureBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|serverChannel
operator|.
name|socket
argument_list|()
operator|.
name|bind
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|SelectionKey
name|key
init|=
name|serverChannel
operator|.
name|register
argument_list|(
name|this
operator|.
name|selector
argument_list|,
name|SelectionKey
operator|.
name|OP_ACCEPT
argument_list|)
decl_stmt|;
name|key
operator|.
name|attach
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|serverChannel
operator|.
name|socket
argument_list|()
operator|.
name|getLocalSocketAddress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|processEvents (int count)
specifier|protected
name|void
name|processEvents
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOReactorException
block|{
name|processEvents
argument_list|(
name|this
operator|.
name|selector
operator|.
name|selectedKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

