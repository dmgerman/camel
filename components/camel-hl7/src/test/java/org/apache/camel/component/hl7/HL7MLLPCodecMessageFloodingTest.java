begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hl7
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for the HL7MLLP Codec.  */
end_comment

begin_class
DECL|class|HL7MLLPCodecMessageFloodingTest
specifier|public
class|class
name|HL7MLLPCodecMessageFloodingTest
extends|extends
name|HL7TestSupport
block|{
annotation|@
name|BindToRegistry
argument_list|(
literal|"hl7codec"
argument_list|)
DECL|method|addHl7MllpCodec ()
specifier|public
name|HL7MLLPCodec
name|addHl7MllpCodec
parameter_list|()
throws|throws
name|Exception
block|{
name|HL7MLLPCodec
name|codec
init|=
operator|new
name|HL7MLLPCodec
argument_list|()
decl_stmt|;
name|codec
operator|.
name|setCharset
argument_list|(
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|codec
operator|.
name|setConvertLFtoCR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|codec
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"mina:tcp://127.0.0.1:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"?sync=true&codec=#hl7codec"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|hl7
argument_list|()
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|input
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Message
name|response
init|=
name|input
operator|.
name|generateACK
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
comment|// simulate some processing time
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testHL7MessageFlood ()
specifier|public
name|void
name|testHL7MessageFlood
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Write and receive using plain sockets and in different threads
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedOutputStream
name|outputStream
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BufferedInputStream
name|inputStream
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|messageCount
init|=
literal|100
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|messageCount
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|response
decl_stmt|;
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|boolean
name|cont
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|cont
operator|&&
operator|(
name|response
operator|=
name|inputStream
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|response
operator|==
literal|28
condition|)
block|{
name|response
operator|=
name|inputStream
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// read second end
comment|// byte
if|if
condition|(
name|response
operator|==
literal|13
condition|)
block|{
comment|// Responses must arrive in same order
name|cont
operator|=
name|s
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"X%dX"
argument_list|,
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|s
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{                 }
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|in
init|=
literal|"MSH|^~\\&|MYSENDER|MYRECEIVER|MYAPPLICATION||200612211200||QRY^A19|X%dX|P|2.4\r"
operator|+
literal|"QRD|200612211200|R|I|GetPatient|||1^RD|0101701234|DEM||"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|in
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Some systems send end bytes in a separate frame
comment|// Thread.sleep(10);
name|outputStream
operator|.
name|write
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Some systems send end bytes in a separate frame
comment|// Thread.sleep(10);
name|outputStream
operator|.
name|write
argument_list|(
literal|28
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Potentially wait after message
comment|// Thread.sleep(10);
block|}
name|boolean
name|success
init|=
name|latch
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

