begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hl7
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
package|;
end_package

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|v24
operator|.
name|message
operator|.
name|ADT_A01
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|v24
operator|.
name|segment
operator|.
name|PID
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|validation
operator|.
name|MessageRule
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|validation
operator|.
name|ValidationContext
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|validation
operator|.
name|impl
operator|.
name|DefaultValidation
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|validation
operator|.
name|impl
operator|.
name|MessageRuleBinding
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|validation
operator|.
name|impl
operator|.
name|ValidationContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
operator|.
name|HL7
operator|.
name|messageConformsTo
import|;
end_import

begin_class
DECL|class|MessageValidatorTest
specifier|public
class|class
name|MessageValidatorTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|VALIDATION_OK
specifier|private
specifier|static
specifier|final
name|ValidationException
index|[]
name|VALIDATION_OK
init|=
operator|new
name|ValidationException
index|[
literal|0
index|]
decl_stmt|;
DECL|field|defaultContext
specifier|private
name|ValidationContext
name|defaultContext
decl_stmt|;
DECL|field|customContext
specifier|private
name|ValidationContextImpl
name|customContext
decl_stmt|;
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|defaultContext
operator|=
operator|new
name|DefaultValidation
argument_list|()
expr_stmt|;
name|customContext
operator|=
operator|new
name|DefaultValidation
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
name|MessageRule
name|rule
init|=
operator|new
name|MessageRule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSectionReference
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ValidationException
index|[]
name|test
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|ADT_A01
name|a01
init|=
operator|(
name|ADT_A01
operator|)
name|msg
decl_stmt|;
if|if
condition|(
name|a01
operator|.
name|getPID
argument_list|()
operator|.
name|getAdministrativeSex
argument_list|()
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ValidationException
index|[]
name|e
init|=
operator|new
name|ValidationException
index|[
literal|1
index|]
decl_stmt|;
name|e
index|[
literal|0
index|]
operator|=
operator|new
name|ValidationException
argument_list|(
literal|"No gender provided!"
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
return|return
name|VALIDATION_OK
return|;
block|}
block|}
decl_stmt|;
name|MessageRuleBinding
name|binding
init|=
operator|new
name|MessageRuleBinding
argument_list|(
literal|"2.4"
argument_list|,
literal|"ADT"
argument_list|,
literal|"A01"
argument_list|,
name|rule
argument_list|)
decl_stmt|;
name|customContext
operator|.
name|getMessageRuleBindings
argument_list|()
operator|.
name|add
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultValidationContext ()
specifier|public
name|void
name|testDefaultValidationContext
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test1"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|createADT01Message
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:test1"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CamelExecutionException
operator|.
name|class
argument_list|)
DECL|method|testCustomValidationContext ()
specifier|public
name|void
name|testCustomValidationContext
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test2"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|createADT01Message
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:test2"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDynamicCustomValidationContext ()
specifier|public
name|void
name|testDynamicCustomValidationContext
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test3"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|createADT01Message
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:test3"
argument_list|,
name|msg
argument_list|,
literal|"validator"
argument_list|,
name|defaultContext
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:test1"
argument_list|)
operator|.
name|validate
argument_list|(
name|messageConformsTo
argument_list|(
name|defaultContext
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test1"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:test2"
argument_list|)
operator|.
name|validate
argument_list|(
name|messageConformsTo
argument_list|(
name|customContext
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test2"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:test3"
argument_list|)
operator|.
name|validate
argument_list|(
name|messageConformsTo
argument_list|(
name|header
argument_list|(
literal|"validator"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test3"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|createADT01Message ()
specifier|private
specifier|static
name|Message
name|createADT01Message
parameter_list|()
throws|throws
name|Exception
block|{
name|ADT_A01
name|adt
init|=
operator|new
name|ADT_A01
argument_list|()
decl_stmt|;
name|adt
operator|.
name|initQuickstart
argument_list|(
literal|"ADT"
argument_list|,
literal|"A01"
argument_list|,
literal|"P"
argument_list|)
expr_stmt|;
comment|// Populate the PID Segment
name|PID
name|pid
init|=
name|adt
operator|.
name|getPID
argument_list|()
decl_stmt|;
name|pid
operator|.
name|getPatientName
argument_list|(
literal|0
argument_list|)
operator|.
name|getFamilyName
argument_list|()
operator|.
name|getSurname
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"Doe"
argument_list|)
expr_stmt|;
name|pid
operator|.
name|getPatientName
argument_list|(
literal|0
argument_list|)
operator|.
name|getGivenName
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"John"
argument_list|)
expr_stmt|;
name|pid
operator|.
name|getPatientIdentifierList
argument_list|(
literal|0
argument_list|)
operator|.
name|getID
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"123456"
argument_list|)
expr_stmt|;
return|return
name|adt
return|;
block|}
block|}
end_class

end_unit

