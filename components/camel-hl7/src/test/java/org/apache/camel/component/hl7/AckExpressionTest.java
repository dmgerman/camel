begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hl7
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
package|;
end_package

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|HL7Exception
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|v24
operator|.
name|message
operator|.
name|ACK
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|v24
operator|.
name|message
operator|.
name|ADT_A01
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|v24
operator|.
name|segment
operator|.
name|PID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
operator|.
name|HL7
operator|.
name|ack
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
operator|.
name|HL7
operator|.
name|terser
import|;
end_import

begin_class
DECL|class|AckExpressionTest
specifier|public
class|class
name|AckExpressionTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testAckExpression ()
specifier|public
name|void
name|testAckExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|ADT_A01
name|a01
init|=
name|createADT01Message
argument_list|()
decl_stmt|;
name|ACK
name|ack
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:test1"
argument_list|,
name|a01
argument_list|,
name|ACK
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AA"
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getAcknowledgementCode
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a01
operator|.
name|getMSH
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAckExpressionWithCode ()
specifier|public
name|void
name|testAckExpressionWithCode
parameter_list|()
throws|throws
name|Exception
block|{
name|ADT_A01
name|a01
init|=
name|createADT01Message
argument_list|()
decl_stmt|;
name|ACK
name|ack
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:test2"
argument_list|,
name|a01
argument_list|,
name|ACK
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CA"
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getAcknowledgementCode
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a01
operator|.
name|getMSH
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNakExpression ()
specifier|public
name|void
name|testNakExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|ADT_A01
name|a01
init|=
name|createADT01Message
argument_list|()
decl_stmt|;
name|ACK
name|ack
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:test3"
argument_list|,
name|a01
argument_list|,
name|ACK
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AE"
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getAcknowledgementCode
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a01
operator|.
name|getMSH
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HL7Exception
operator|.
name|APPLICATION_INTERNAL_ERROR
argument_list|)
argument_list|,
name|ack
operator|.
name|getERR
argument_list|()
operator|.
name|getErrorCodeAndLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getCodeIdentifyingError
argument_list|()
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNakExpressionWithParameters ()
specifier|public
name|void
name|testNakExpressionWithParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|ADT_A01
name|a01
init|=
name|createADT01Message
argument_list|()
decl_stmt|;
name|ACK
name|ack
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:test4"
argument_list|,
name|a01
argument_list|,
name|ACK
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AR"
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getAcknowledgementCode
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a01
operator|.
name|getMSH
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HL7Exception
operator|.
name|APPLICATION_INTERNAL_ERROR
argument_list|)
argument_list|,
name|ack
operator|.
name|getERR
argument_list|()
operator|.
name|getErrorCodeAndLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getCodeIdentifyingError
argument_list|()
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Problem!"
argument_list|,
name|ack
operator|.
name|getERR
argument_list|()
operator|.
name|getErrorCodeAndLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getCodeIdentifyingError
argument_list|()
operator|.
name|getAlternateText
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNakExpressionWithoutException ()
specifier|public
name|void
name|testNakExpressionWithoutException
parameter_list|()
throws|throws
name|Exception
block|{
name|ADT_A01
name|a01
init|=
name|createADT01Message
argument_list|()
decl_stmt|;
name|ACK
name|ack
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:test5"
argument_list|,
name|a01
argument_list|,
name|ACK
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AR"
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getAcknowledgementCode
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a01
operator|.
name|getMSH
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|ack
operator|.
name|getMSA
argument_list|()
operator|.
name|getMessageControlID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HL7Exception
operator|.
name|DATA_TYPE_ERROR
argument_list|)
argument_list|,
name|ack
operator|.
name|getERR
argument_list|()
operator|.
name|getErrorCodeAndLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getCodeIdentifyingError
argument_list|()
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Problem!"
argument_list|,
name|ack
operator|.
name|getERR
argument_list|()
operator|.
name|getErrorCodeAndLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getCodeIdentifyingError
argument_list|()
operator|.
name|getAlternateText
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:test1"
argument_list|)
operator|.
name|transform
argument_list|(
name|ack
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:test2"
argument_list|)
operator|.
name|transform
argument_list|(
name|ack
argument_list|(
name|AckCode
operator|.
name|CA
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:test3"
argument_list|)
operator|.
name|onException
argument_list|(
name|HL7Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|transform
argument_list|(
name|ack
argument_list|()
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|transform
argument_list|(
name|terser
argument_list|(
literal|"/.BLORG"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:test4"
argument_list|)
operator|.
name|onException
argument_list|(
name|HL7Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|transform
argument_list|(
name|ack
argument_list|(
name|AckCode
operator|.
name|AR
argument_list|,
literal|"Problem!"
argument_list|,
name|HL7Exception
operator|.
name|APPLICATION_INTERNAL_ERROR
argument_list|)
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|transform
argument_list|(
name|terser
argument_list|(
literal|"/.BLORG"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:test5"
argument_list|)
operator|.
name|transform
argument_list|(
name|ack
argument_list|(
name|AckCode
operator|.
name|AR
argument_list|,
literal|"Problem!"
argument_list|,
name|HL7Exception
operator|.
name|DATA_TYPE_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|createADT01Message ()
specifier|private
specifier|static
name|ADT_A01
name|createADT01Message
parameter_list|()
throws|throws
name|Exception
block|{
name|ADT_A01
name|adt
init|=
operator|new
name|ADT_A01
argument_list|()
decl_stmt|;
name|adt
operator|.
name|initQuickstart
argument_list|(
literal|"ADT"
argument_list|,
literal|"A01"
argument_list|,
literal|"P"
argument_list|)
expr_stmt|;
comment|// Populate the PID Segment
name|PID
name|pid
init|=
name|adt
operator|.
name|getPID
argument_list|()
decl_stmt|;
name|pid
operator|.
name|getPatientName
argument_list|(
literal|0
argument_list|)
operator|.
name|getFamilyName
argument_list|()
operator|.
name|getSurname
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"Doe"
argument_list|)
expr_stmt|;
name|pid
operator|.
name|getPatientName
argument_list|(
literal|0
argument_list|)
operator|.
name|getGivenName
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"John"
argument_list|)
expr_stmt|;
name|pid
operator|.
name|getPatientIdentifierList
argument_list|(
literal|0
argument_list|)
operator|.
name|getID
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"123456"
argument_list|)
expr_stmt|;
return|return
name|adt
return|;
block|}
block|}
end_class

end_unit

