begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hl7
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|buffer
operator|.
name|IoBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|CumulativeProtocolDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolDecoderOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * HL7MLLPDecoder that is aware that a HL7 message can span several buffers.  * In addition, it avoids rescanning packets by keeping state in the IOSession.  */
end_comment

begin_class
DECL|class|HL7MLLPDecoder
class|class
name|HL7MLLPDecoder
extends|extends
name|CumulativeProtocolDecoder
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HL7MLLPDecoder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DECODER_STATE
specifier|private
specifier|static
specifier|final
name|String
name|DECODER_STATE
init|=
name|HL7MLLPDecoder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".STATE"
decl_stmt|;
DECL|field|CHARSET_DECODER
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET_DECODER
init|=
name|HL7MLLPDecoder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".charsetdecoder"
decl_stmt|;
DECL|field|config
specifier|private
name|HL7MLLPConfig
name|config
decl_stmt|;
DECL|method|HL7MLLPDecoder (HL7MLLPConfig config)
name|HL7MLLPDecoder
parameter_list|(
name|HL7MLLPConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doDecode (IoSession session, IoBuffer in, ProtocolDecoderOutput out)
specifier|protected
name|boolean
name|doDecode
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|IoBuffer
name|in
parameter_list|,
name|ProtocolDecoderOutput
name|out
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Get the state of the current message and
comment|// Skip what we have already scanned before
name|DecoderState
name|state
init|=
name|decoderState
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|in
operator|.
name|position
argument_list|(
name|state
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received data, checking from position {} to {}"
argument_list|,
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|messageDecoded
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|previousPosition
init|=
name|in
operator|.
name|position
argument_list|()
decl_stmt|;
name|byte
name|current
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Check if we are at the end of an HL7 message
if|if
condition|(
name|current
operator|==
name|config
operator|.
name|getEndByte2
argument_list|()
operator|&&
name|state
operator|.
name|previous
argument_list|()
operator|==
name|config
operator|.
name|getEndByte1
argument_list|()
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|isStarted
argument_list|()
condition|)
block|{
comment|// Save the current buffer pointers and reset them to surround the identifier message
name|int
name|currentPosition
init|=
name|in
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|currentLimit
init|=
name|in
operator|.
name|limit
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Message ends at position {} with length {}"
argument_list|,
name|previousPosition
argument_list|,
name|previousPosition
operator|-
name|state
operator|.
name|start
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|position
argument_list|(
name|state
operator|.
name|start
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|limit
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set start to position {} and limit to {}"
argument_list|,
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now create string or byte[] from this part of the buffer and restore the buffer pointers
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|config
operator|.
name|isProduceString
argument_list|()
condition|?
name|parseMessageToString
argument_list|(
name|in
operator|.
name|slice
argument_list|()
argument_list|,
name|charsetDecoder
argument_list|(
name|session
argument_list|)
argument_list|)
else|:
name|parseMessageToByteArray
argument_list|(
name|in
operator|.
name|slice
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|messageDecoded
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resetting to position {} and limit to {}"
argument_list|,
name|currentPosition
argument_list|,
name|currentLimit
argument_list|)
expr_stmt|;
name|in
operator|.
name|position
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|in
operator|.
name|limit
argument_list|(
name|currentLimit
argument_list|)
expr_stmt|;
name|state
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring message end at position {} until start byte has been seen."
argument_list|,
name|previousPosition
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Check if we are at the start of an HL7 message
if|if
condition|(
name|current
operator|==
name|config
operator|.
name|getStartByte
argument_list|()
condition|)
block|{
name|state
operator|.
name|markStart
argument_list|(
name|previousPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remember previous byte in state object because the buffer could
comment|// be theoretically exhausted right between the two end bytes
name|state
operator|.
name|markPrevious
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|messageDecoded
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|messageDecoded
condition|)
block|{
comment|// Could not find a complete message in the buffer.
comment|// Reset to the initial position (just as nothing had been read yet)
comment|// and return false so that this method is called again with more data.
name|LOG
operator|.
name|debug
argument_list|(
literal|"No complete message yet at position {}"
argument_list|,
name|in
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|markCurrent
argument_list|(
name|in
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|messageDecoded
return|;
block|}
comment|// Make a defensive byte copy (the buffer will be reused)
comment|// and omit the start and the two end bytes of the MLLP message
comment|// returning a byte array
DECL|method|parseMessageToByteArray (IoBuffer buf)
specifier|private
name|Object
name|parseMessageToByteArray
parameter_list|(
name|IoBuffer
name|buf
parameter_list|)
throws|throws
name|CharacterCodingException
block|{
name|int
name|len
init|=
name|buf
operator|.
name|limit
argument_list|()
operator|-
literal|3
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Making byte array of length {}"
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dst
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|buf
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// skip start byte
name|buf
operator|.
name|get
argument_list|(
name|dst
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|buf
operator|.
name|skip
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// skip end bytes
comment|// Only do this if conversion is enabled
if|if
condition|(
name|config
operator|.
name|isConvertLFtoCR
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replacing LF by CR"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dst
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dst
index|[
name|i
index|]
operator|==
operator|(
name|byte
operator|)
literal|'\n'
condition|)
block|{
name|dst
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
literal|'\r'
expr_stmt|;
block|}
block|}
block|}
return|return
name|dst
return|;
block|}
comment|// Make a defensive byte copy (the buffer will be reused)
comment|// and omit the start and the two end bytes of the MLLP message
comment|// returning a String
DECL|method|parseMessageToString (IoBuffer buf, CharsetDecoder decoder)
specifier|private
name|Object
name|parseMessageToString
parameter_list|(
name|IoBuffer
name|buf
parameter_list|,
name|CharsetDecoder
name|decoder
parameter_list|)
throws|throws
name|CharacterCodingException
block|{
name|int
name|len
init|=
name|buf
operator|.
name|limit
argument_list|()
operator|-
literal|3
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Making string of length {} using charset {}"
argument_list|,
name|len
argument_list|,
name|decoder
operator|.
name|charset
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// skip start byte
name|String
name|message
init|=
name|buf
operator|.
name|getString
argument_list|(
name|len
argument_list|,
name|decoder
argument_list|)
decl_stmt|;
name|buf
operator|.
name|skip
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// skip end bytes
comment|// Only do this if conversion is enabled
if|if
condition|(
name|config
operator|.
name|isConvertLFtoCR
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replacing LF by CR"
argument_list|)
expr_stmt|;
name|message
operator|=
name|message
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|'\r'
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
annotation|@
name|Override
DECL|method|dispose (IoSession session)
specifier|public
name|void
name|dispose
parameter_list|(
name|IoSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
name|DECODER_STATE
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
name|CHARSET_DECODER
argument_list|)
expr_stmt|;
block|}
DECL|method|charsetDecoder (IoSession session)
specifier|private
name|CharsetDecoder
name|charsetDecoder
parameter_list|(
name|IoSession
name|session
parameter_list|)
block|{
synchronized|synchronized
init|(
name|session
init|)
block|{
name|CharsetDecoder
name|decoder
init|=
operator|(
name|CharsetDecoder
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|CHARSET_DECODER
argument_list|)
decl_stmt|;
if|if
condition|(
name|decoder
operator|==
literal|null
condition|)
block|{
name|decoder
operator|=
name|config
operator|.
name|getCharset
argument_list|()
operator|.
name|newDecoder
argument_list|()
operator|.
name|onMalformedInput
argument_list|(
name|config
operator|.
name|getMalformedInputErrorAction
argument_list|()
argument_list|)
operator|.
name|onUnmappableCharacter
argument_list|(
name|config
operator|.
name|getUnmappableCharacterErrorAction
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|CHARSET_DECODER
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
block|}
return|return
name|decoder
return|;
block|}
block|}
DECL|method|decoderState (IoSession session)
specifier|private
name|DecoderState
name|decoderState
parameter_list|(
name|IoSession
name|session
parameter_list|)
block|{
synchronized|synchronized
init|(
name|session
init|)
block|{
name|DecoderState
name|decoderState
init|=
operator|(
name|DecoderState
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|DECODER_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|decoderState
operator|==
literal|null
condition|)
block|{
name|decoderState
operator|=
operator|new
name|DecoderState
argument_list|()
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|DECODER_STATE
argument_list|,
name|decoderState
argument_list|)
expr_stmt|;
block|}
return|return
name|decoderState
return|;
block|}
block|}
comment|/**      * Holds the state of the decoding process      */
DECL|class|DecoderState
specifier|private
specifier|static
class|class
name|DecoderState
block|{
DECL|field|startPos
specifier|private
name|int
name|startPos
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|currentPos
specifier|private
name|int
name|currentPos
decl_stmt|;
DECL|field|previousByte
specifier|private
name|byte
name|previousByte
decl_stmt|;
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|startPos
operator|=
operator|-
literal|1
expr_stmt|;
name|currentPos
operator|=
literal|0
expr_stmt|;
name|previousByte
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|markStart (int position)
name|void
name|markStart
parameter_list|(
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
name|isStarted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring message start at position {} before previous message has ended."
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startPos
operator|=
name|position
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Message starts at position {}"
argument_list|,
name|startPos
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|markCurrent (int position)
name|void
name|markCurrent
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|currentPos
operator|=
name|position
expr_stmt|;
block|}
DECL|method|markPrevious (byte previous)
name|void
name|markPrevious
parameter_list|(
name|byte
name|previous
parameter_list|)
block|{
name|previousByte
operator|=
name|previous
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|int
name|start
parameter_list|()
block|{
return|return
name|startPos
return|;
block|}
DECL|method|current ()
specifier|public
name|int
name|current
parameter_list|()
block|{
return|return
name|currentPos
return|;
block|}
DECL|method|previous ()
specifier|public
name|byte
name|previous
parameter_list|()
block|{
return|return
name|previousByte
return|;
block|}
DECL|method|isStarted ()
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|startPos
operator|>=
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

