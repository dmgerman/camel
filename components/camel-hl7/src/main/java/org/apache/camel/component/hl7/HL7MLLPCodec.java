begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hl7
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetEncoder
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|hl7
operator|.
name|HL7Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolDecoderOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolEncoderOutput
import|;
end_import

begin_comment
comment|/**  * HL7 MLLP codec.  *<p/>  * This codec supports encoding/decoding the HL7 MLLP protocol.  * It will use the default markers for start and end combination:  *<ul>  *<li>0x0b (11 decimal) = start marker</li>  *<li>0x0d (13 decimal = the \r char) = segment terminators</li>  *<li>0x1c (28 decimal) = end 1 marker</li>  *<li>0x0d (13 decimal) = end 2 marker</li>  *</ul>  *<p/>  * The decoder is used for decoding from MLLP (bytes) to String. The String will not contain any of  * the start and end markers.  *<p/>  * The encoder is used for encoding from String to MLLP (bytes). The String should<b>not</b> contain  * any of the start and end markers, the enoder will add these, and stream the string as bytes.  * Also the enocder will convert any<tt>\n</tt> (line breaks) as segment terminators to<tt>\r</tt>.  *<p/>  * This codes supports charset encoding/decoding between bytes and String. The JVM platform default charset  * is used, but the charset can be configued on this codec using the setter method.  * The decoder will use the JVM platform default charset for decoding, but the charset can be configued on the this codec.  */
end_comment

begin_class
DECL|class|HL7MLLPCodec
specifier|public
class|class
name|HL7MLLPCodec
implements|implements
name|ProtocolCodecFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HL7MLLPCodec
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CHARSET_ENCODER
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET_ENCODER
init|=
name|HL7MLLPCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".charsetencoder"
decl_stmt|;
DECL|field|CHARSET_DECODER
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET_DECODER
init|=
name|HL7MLLPCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".charsetdecoder"
decl_stmt|;
comment|// HL7 MLLP start and end markers
DECL|field|START_MARKER
specifier|private
specifier|static
specifier|final
name|byte
name|START_MARKER
init|=
literal|0x0b
decl_stmt|;
comment|// 11 decimal
DECL|field|END_MARKER_1
specifier|private
specifier|static
specifier|final
name|byte
name|END_MARKER_1
init|=
literal|0x1c
decl_stmt|;
comment|// 28 decimal
DECL|field|END_MARKER_2
specifier|private
specifier|static
specifier|final
name|byte
name|END_MARKER_2
init|=
literal|0x0d
decl_stmt|;
comment|// 13 decimal
DECL|field|charset
specifier|private
name|Charset
name|charset
init|=
name|Charset
operator|.
name|defaultCharset
argument_list|()
decl_stmt|;
DECL|method|getEncoder ()
specifier|public
name|ProtocolEncoder
name|getEncoder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ProtocolEncoder
argument_list|()
block|{
specifier|public
name|void
name|encode
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|Object
name|message
parameter_list|,
name|ProtocolEncoderOutput
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Message to encode is null"
argument_list|)
throw|;
block|}
name|CharsetEncoder
name|encoder
init|=
operator|(
name|CharsetEncoder
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|CHARSET_ENCODER
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoder
operator|==
literal|null
condition|)
block|{
name|encoder
operator|=
name|charset
operator|.
name|newEncoder
argument_list|()
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|CHARSET_ENCODER
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
block|}
comment|// convert to string
name|String
name|body
decl_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|Message
condition|)
block|{
name|body
operator|=
name|HL7Converter
operator|.
name|toString
argument_list|(
operator|(
name|Message
operator|)
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|String
condition|)
block|{
name|body
operator|=
operator|(
name|String
operator|)
name|message
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|body
operator|=
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The message to encode is not a supported type: "
operator|+
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
comment|// replace \n with \r as HL7 uses 0x0d = \r as segment termninators
name|body
operator|=
name|body
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|'\r'
argument_list|)
expr_stmt|;
comment|// put the data into the byte buffer
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|body
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
operator|.
name|setAutoExpand
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|START_MARKER
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putString
argument_list|(
name|body
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|END_MARKER_1
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|END_MARKER_2
argument_list|)
expr_stmt|;
comment|// flip the buffer so we can use it to write to the out stream
name|bb
operator|.
name|flip
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encoding HL7 from "
operator|+
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" to byte stream"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|bb
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|(
name|IoSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
name|CHARSET_ENCODER
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getDecoder ()
specifier|public
name|ProtocolDecoder
name|getDecoder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ProtocolDecoder
argument_list|()
block|{
specifier|public
name|void
name|decode
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|ByteBuffer
name|in
parameter_list|,
name|ProtocolDecoderOutput
name|out
parameter_list|)
throws|throws
name|Exception
block|{
comment|// find position where we have the end1 end2 combination
name|int
name|posEnd
init|=
literal|0
decl_stmt|;
name|int
name|posStart
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|byte
name|b
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|==
name|START_MARKER
condition|)
block|{
name|posStart
operator|=
name|in
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|==
name|END_MARKER_1
condition|)
block|{
name|byte
name|next
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|END_MARKER_2
condition|)
block|{
name|posEnd
operator|=
name|in
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// we expected the 2nd end marker
name|LOG
operator|.
name|warn
argument_list|(
literal|"The 2nd end marker "
operator|+
name|END_MARKER_2
operator|+
literal|" was not found, but was "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// okay we have computed the start and end position of the special HL7 markers
comment|// rewind the bytebuffer so we can read from it again
name|in
operator|.
name|rewind
argument_list|()
expr_stmt|;
comment|// narrow the buffer to only include between the start and end markers
name|in
operator|.
name|skip
argument_list|(
name|posStart
argument_list|)
expr_stmt|;
if|if
condition|(
name|posEnd
operator|>
literal|0
condition|)
block|{
name|in
operator|.
name|limit
argument_list|(
name|posEnd
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// convert to string using the charset decoder
name|CharsetDecoder
name|decoder
init|=
operator|(
name|CharsetDecoder
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|CHARSET_DECODER
argument_list|)
decl_stmt|;
if|if
condition|(
name|decoder
operator|==
literal|null
condition|)
block|{
name|decoder
operator|=
name|charset
operator|.
name|newDecoder
argument_list|()
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|CHARSET_DECODER
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
block|}
name|String
name|body
init|=
name|in
operator|.
name|getString
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Decoding HL7 from byte stream to String"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clear the buffer now that we have transfered the data to the String
name|in
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|finishDecode
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|ProtocolDecoderOutput
name|out
parameter_list|)
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
specifier|public
name|void
name|dispose
parameter_list|(
name|IoSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
name|CHARSET_DECODER
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getCharset ()
specifier|public
name|Charset
name|getCharset
parameter_list|()
block|{
return|return
name|charset
return|;
block|}
DECL|method|setCharset (Charset charset)
specifier|public
name|void
name|setCharset
parameter_list|(
name|Charset
name|charset
parameter_list|)
block|{
name|this
operator|.
name|charset
operator|=
name|charset
expr_stmt|;
block|}
DECL|method|setCharset (String charsetName)
specifier|public
name|void
name|setCharset
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
name|this
operator|.
name|charset
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

