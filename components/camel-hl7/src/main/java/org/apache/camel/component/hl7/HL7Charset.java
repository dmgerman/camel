begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hl7
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|HL7Exception
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|preparser
operator|.
name|PreParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_comment
comment|/**  * This enumerates the defined charsets for HL7 as defined in Table 0211,  * mapping them to the Java charset names and back  */
end_comment

begin_enum
DECL|enum|HL7Charset
specifier|public
enum|enum
name|HL7Charset
block|{
DECL|enumConstant|ISO_8859_1
name|ISO_8859_1
argument_list|(
literal|"8859/1"
argument_list|,
literal|"ISO-8859-1"
argument_list|)
block|,
DECL|enumConstant|ISO_8859_2
name|ISO_8859_2
argument_list|(
literal|"8859/2"
argument_list|,
literal|"ISO-8859-2"
argument_list|)
block|,
DECL|enumConstant|ISO_8859_3
name|ISO_8859_3
argument_list|(
literal|"8859/3"
argument_list|,
literal|"ISO-8859-3"
argument_list|)
block|,
DECL|enumConstant|ISO_8859_4
name|ISO_8859_4
argument_list|(
literal|"8859/4"
argument_list|,
literal|"ISO-8859-4"
argument_list|)
block|,
DECL|enumConstant|ISO_8859_5
name|ISO_8859_5
argument_list|(
literal|"8859/5"
argument_list|,
literal|"ISO-8859-5"
argument_list|)
block|,
DECL|enumConstant|ISO_8859_6
name|ISO_8859_6
argument_list|(
literal|"8859/1"
argument_list|,
literal|"ISO-8859-6"
argument_list|)
block|,
DECL|enumConstant|ISO_8859_7
name|ISO_8859_7
argument_list|(
literal|"8859/1"
argument_list|,
literal|"ISO-8859-7"
argument_list|)
block|,
DECL|enumConstant|ISO_8859_8
name|ISO_8859_8
argument_list|(
literal|"8859/1"
argument_list|,
literal|"ISO-8859-8"
argument_list|)
block|,
DECL|enumConstant|ISO_8859_9
name|ISO_8859_9
argument_list|(
literal|"8859/1"
argument_list|,
literal|"ISO-8859-9"
argument_list|)
block|,
DECL|enumConstant|ASCII
name|ASCII
argument_list|(
literal|"ASCII"
argument_list|,
literal|"US-ASCII"
argument_list|)
block|,
DECL|enumConstant|BIG_5
name|BIG_5
argument_list|(
literal|"BIG-5"
argument_list|,
literal|"Big5"
argument_list|)
block|,
DECL|enumConstant|CNS
name|CNS
argument_list|(
literal|"CNS 11643-1992"
argument_list|,
literal|"ISO-2022-CN"
argument_list|)
block|,
DECL|enumConstant|GB_1830_2000
name|GB_1830_2000
argument_list|(
literal|"GB 18030-2000"
argument_list|,
literal|""
argument_list|)
block|,
DECL|enumConstant|ISO_IR14
name|ISO_IR14
argument_list|(
literal|"ISO IR14"
argument_list|,
literal|"ISO-2022-JP"
argument_list|)
block|,
DECL|enumConstant|ISO_IR159
name|ISO_IR159
argument_list|(
literal|"ISO IR159"
argument_list|,
literal|"EUC-JP"
argument_list|)
block|,
DECL|enumConstant|ISO_IR87
name|ISO_IR87
argument_list|(
literal|"ISO IR87"
argument_list|,
literal|"EUC-JP"
argument_list|)
block|,
DECL|enumConstant|KS_X_1001
name|KS_X_1001
argument_list|(
literal|"KS X 1001"
argument_list|,
literal|"EUC-KR"
argument_list|)
block|,
DECL|enumConstant|UNICODE
name|UNICODE
argument_list|(
literal|"UNICODE"
argument_list|,
literal|"UTF-8"
argument_list|)
block|,
DECL|enumConstant|UTF_16
name|UTF_16
argument_list|(
literal|"UNICODE UTF-16"
argument_list|,
literal|"UTF-16"
argument_list|)
block|,
DECL|enumConstant|UTF_32
name|UTF_32
argument_list|(
literal|"UNICODE UTF-32"
argument_list|,
literal|"UTF-32"
argument_list|)
block|,
DECL|enumConstant|UTF_8
name|UTF_8
argument_list|(
literal|"UNICODE UTF-8"
argument_list|,
literal|"UTF-8"
argument_list|)
block|;
DECL|field|hl7CharsetName
specifier|private
name|String
name|hl7CharsetName
decl_stmt|;
DECL|field|javaCharsetName
specifier|private
name|String
name|javaCharsetName
decl_stmt|;
DECL|method|HL7Charset (String hl7CharsetName, String javaCharsetName)
name|HL7Charset
parameter_list|(
name|String
name|hl7CharsetName
parameter_list|,
name|String
name|javaCharsetName
parameter_list|)
block|{
name|this
operator|.
name|hl7CharsetName
operator|=
name|hl7CharsetName
expr_stmt|;
name|this
operator|.
name|javaCharsetName
operator|=
name|javaCharsetName
expr_stmt|;
block|}
DECL|method|getHL7CharsetName ()
specifier|public
name|String
name|getHL7CharsetName
parameter_list|()
block|{
return|return
name|hl7CharsetName
return|;
block|}
DECL|method|getJavaCharsetName ()
specifier|public
name|String
name|getJavaCharsetName
parameter_list|()
block|{
return|return
name|javaCharsetName
return|;
block|}
comment|/**      * Returns the HL7Charset that matches the parameter      *      * @param s charset string      * @return HL7Charset enum      */
DECL|method|getHL7Charset (String s)
specifier|public
specifier|static
name|HL7Charset
name|getHL7Charset
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|HL7Charset
name|charset
range|:
name|HL7Charset
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|charset
operator|.
name|hl7CharsetName
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
name|charset
operator|.
name|javaCharsetName
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|charset
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the charset to be used for marshalling HL7 messages. If MSH-18 is empty,      * the charset configured in Camel's charset properties/headers is returned.      *      * @param message HL7 message      * @param exchange Exchange      * @return Java charset name      */
DECL|method|getCharsetName (Message message, Exchange exchange)
specifier|public
specifier|static
name|String
name|getCharsetName
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|HL7Exception
block|{
name|String
name|defaultCharsetName
init|=
name|ExchangeHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|String
name|msh18
init|=
operator|(
operator|(
name|Segment
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"MSH"
argument_list|)
operator|)
operator|.
name|getField
argument_list|(
literal|18
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|getCharsetName
argument_list|(
name|msh18
argument_list|,
name|defaultCharsetName
argument_list|)
return|;
block|}
comment|/**      * Returns the charset to be used for unmarshalling HL7 messages. If MSH-18 is empty,      * the temporary charset name is returned.      *      * @param bytes HL7 message as byte array      * @param guessedCharsetName the temporary charset guessed to be able to read MSH-18      * @return Java charset name      *      * @see org.apache.camel.component.hl7.HL7DataFormat#guessCharsetName(byte[], org.apache.camel.Exchange)      */
DECL|method|getCharsetName (byte[] bytes, String guessedCharsetName)
specifier|public
specifier|static
name|String
name|getCharsetName
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|String
name|guessedCharsetName
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|HL7Exception
block|{
name|String
name|tmp
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|guessedCharsetName
argument_list|)
decl_stmt|;
name|String
name|msh18
init|=
name|PreParser
operator|.
name|getFields
argument_list|(
name|tmp
argument_list|,
literal|"MSH-18"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
return|return
name|getCharsetName
argument_list|(
name|msh18
argument_list|,
name|guessedCharsetName
argument_list|)
return|;
block|}
DECL|method|getCharsetName (String msh18, String defaultCharsetName)
specifier|private
specifier|static
name|String
name|getCharsetName
parameter_list|(
name|String
name|msh18
parameter_list|,
name|String
name|defaultCharsetName
parameter_list|)
block|{
name|HL7Charset
name|charset
init|=
name|HL7Charset
operator|.
name|getHL7Charset
argument_list|(
name|msh18
argument_list|)
decl_stmt|;
return|return
name|charset
operator|!=
literal|null
condition|?
name|charset
operator|.
name|getJavaCharsetName
argument_list|()
else|:
name|defaultCharsetName
return|;
block|}
block|}
end_enum

end_unit

