begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hl7
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hl7
package|;
end_package

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|hl7v2
operator|.
name|model
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|buffer
operator|.
name|IoBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolEncoderOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * HL7 MLLP encoder  */
end_comment

begin_class
DECL|class|HL7MLLPEncoder
class|class
name|HL7MLLPEncoder
implements|implements
name|ProtocolEncoder
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HL7MLLPEncoder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|HL7MLLPConfig
name|config
decl_stmt|;
DECL|method|HL7MLLPEncoder (HL7MLLPConfig config)
name|HL7MLLPEncoder
parameter_list|(
name|HL7MLLPConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dispose (IoSession session)
specifier|public
name|void
name|dispose
parameter_list|(
name|IoSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
DECL|method|encode (IoSession session, Object message, ProtocolEncoderOutput out)
specifier|public
name|void
name|encode
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|Object
name|message
parameter_list|,
name|ProtocolEncoderOutput
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Message to be encoded is null"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|Exception
condition|)
block|{
comment|// we cannot handle exceptions
throw|throw
operator|(
name|Exception
operator|)
name|message
throw|;
block|}
name|byte
index|[]
name|body
decl_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|Message
condition|)
block|{
name|body
operator|=
operator|(
operator|(
name|Message
operator|)
name|message
operator|)
operator|.
name|encode
argument_list|()
operator|.
name|getBytes
argument_list|(
name|config
operator|.
name|getCharset
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|String
condition|)
block|{
name|body
operator|=
operator|(
operator|(
name|String
operator|)
name|message
operator|)
operator|.
name|getBytes
argument_list|(
name|config
operator|.
name|getCharset
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|body
operator|=
operator|(
name|byte
index|[]
operator|)
name|message
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The message to encode is not a supported type: "
operator|+
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
comment|// put the data into the byte buffer
name|IoBuffer
name|buf
init|=
name|IoBuffer
operator|.
name|allocate
argument_list|(
name|body
operator|.
name|length
operator|+
literal|3
argument_list|)
operator|.
name|setAutoExpand
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|config
operator|.
name|getStartByte
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|config
operator|.
name|getEndByte1
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|config
operator|.
name|getEndByte2
argument_list|()
argument_list|)
expr_stmt|;
comment|// flip the buffer so we can use it to write to the out stream
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encoded HL7 from {} to byte stream"
argument_list|,
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

