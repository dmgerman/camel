begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ribbon.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ribbon
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|client
operator|.
name|config
operator|.
name|IClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|client
operator|.
name|config
operator|.
name|IClientConfigKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|DummyPing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|IPing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|IRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|PollingServerListUpdater
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|RoundRobinRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|ServerList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|ServerListUpdater
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|ZoneAwareLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Traceable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ribbon
operator|.
name|RibbonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ribbon
operator|.
name|RibbonConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|SendDynamicProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServerListStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|AsyncProcessorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Ribbon based implementation of the the ServiceCall EIP.  */
end_comment

begin_class
DECL|class|RibbonServiceCallProcessor
specifier|public
class|class
name|RibbonServiceCallProcessor
extends|extends
name|ServiceSupport
implements|implements
name|AsyncProcessor
implements|,
name|CamelContextAware
implements|,
name|Traceable
implements|,
name|IdAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RibbonServiceCallProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|scheme
specifier|private
specifier|final
name|String
name|scheme
decl_stmt|;
DECL|field|contextPath
specifier|private
specifier|final
name|String
name|contextPath
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
DECL|field|exchangePattern
specifier|private
specifier|final
name|ExchangePattern
name|exchangePattern
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|RibbonConfiguration
name|configuration
decl_stmt|;
DECL|field|serverListStrategy
specifier|private
name|ServiceCallServerListStrategy
argument_list|<
name|RibbonServer
argument_list|>
name|serverListStrategy
decl_stmt|;
DECL|field|ribbonLoadBalancer
specifier|private
name|ZoneAwareLoadBalancer
argument_list|<
name|RibbonServer
argument_list|>
name|ribbonLoadBalancer
decl_stmt|;
DECL|field|rule
specifier|private
name|IRule
name|rule
decl_stmt|;
DECL|field|ping
specifier|private
name|IPing
name|ping
decl_stmt|;
DECL|field|serviceCallExpression
specifier|private
specifier|final
name|RibbonServiceCallExpression
name|serviceCallExpression
decl_stmt|;
DECL|field|ribbonClientConfig
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ribbonClientConfig
decl_stmt|;
DECL|field|processor
specifier|private
name|SendDynamicProcessor
name|processor
decl_stmt|;
DECL|method|RibbonServiceCallProcessor (String name, String uri, String scheme, ExchangePattern exchangePattern, RibbonConfiguration configuration)
specifier|public
name|RibbonServiceCallProcessor
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|scheme
parameter_list|,
name|ExchangePattern
name|exchangePattern
parameter_list|,
name|RibbonConfiguration
name|configuration
parameter_list|)
block|{
comment|// setup from the provided name which can contain scheme and context-path information as well
name|String
name|serviceName
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|serviceName
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|name
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|this
operator|.
name|contextPath
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|name
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|serviceName
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|name
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
name|this
operator|.
name|contextPath
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|name
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceName
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|contextPath
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|serviceName
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|this
operator|.
name|scheme
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|serviceName
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|serviceName
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|serviceName
expr_stmt|;
block|}
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|exchangePattern
operator|=
name|exchangePattern
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|rule
operator|=
name|configuration
operator|.
name|getRule
argument_list|()
expr_stmt|;
name|this
operator|.
name|ping
operator|=
name|configuration
operator|.
name|getPing
argument_list|()
expr_stmt|;
name|this
operator|.
name|serviceCallExpression
operator|=
operator|new
name|RibbonServiceCallExpression
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|this
operator|.
name|scheme
argument_list|,
name|this
operator|.
name|contextPath
argument_list|,
name|this
operator|.
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|AsyncProcessorHelper
operator|.
name|process
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|Server
name|server
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// let the client load balancer chose which server to use
name|server
operator|=
name|ribbonLoadBalancer
operator|.
name|chooseServer
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|(
literal|"No active services with name "
operator|+
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|String
name|ip
init|=
name|server
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|server
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Service {} active at server: {}:{}"
argument_list|,
name|name
argument_list|,
name|ip
argument_list|,
name|port
argument_list|)
expr_stmt|;
comment|// set selected server as header
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|RibbonConstants
operator|.
name|RIBBON_SERVER_IP
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|RibbonConstants
operator|.
name|RIBBON_SERVER_PORT
argument_list|,
name|port
argument_list|)
expr_stmt|;
comment|// use the dynamic send processor to call the service
return|return
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|setId (String id)
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTraceLabel ()
specifier|public
name|String
name|getTraceLabel
parameter_list|()
block|{
return|return
literal|"kubernetes"
return|;
block|}
DECL|method|getServerListStrategy ()
specifier|public
name|ServiceCallServerListStrategy
name|getServerListStrategy
parameter_list|()
block|{
return|return
name|serverListStrategy
return|;
block|}
DECL|method|setServerListStrategy (ServiceCallServerListStrategy serverListStrategy)
specifier|public
name|void
name|setServerListStrategy
parameter_list|(
name|ServiceCallServerListStrategy
name|serverListStrategy
parameter_list|)
block|{
name|this
operator|.
name|serverListStrategy
operator|=
name|serverListStrategy
expr_stmt|;
block|}
DECL|method|getRule ()
specifier|public
name|IRule
name|getRule
parameter_list|()
block|{
return|return
name|rule
return|;
block|}
DECL|method|setRule (IRule rule)
specifier|public
name|void
name|setRule
parameter_list|(
name|IRule
name|rule
parameter_list|)
block|{
name|this
operator|.
name|rule
operator|=
name|rule
expr_stmt|;
block|}
DECL|method|getPing ()
specifier|public
name|IPing
name|getPing
parameter_list|()
block|{
return|return
name|ping
return|;
block|}
DECL|method|setPing (IPing ping)
specifier|public
name|void
name|setPing
parameter_list|(
name|IPing
name|ping
parameter_list|)
block|{
name|this
operator|.
name|ping
operator|=
name|ping
expr_stmt|;
block|}
DECL|method|getRibbonClientConfig ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getRibbonClientConfig
parameter_list|()
block|{
return|return
name|ribbonClientConfig
return|;
block|}
DECL|method|setRibbonClientConfig (Map<String, String> ribbonClientConfig)
specifier|public
name|void
name|setRibbonClientConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ribbonClientConfig
parameter_list|)
block|{
name|this
operator|.
name|ribbonClientConfig
operator|=
name|ribbonClientConfig
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverListStrategy
operator|==
literal|null
condition|)
block|{
name|serverListStrategy
operator|=
operator|new
name|RibbonServiceCallStaticServerListStrategy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|serverListStrategy
operator|instanceof
name|ServerList
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ServerListStrategy must be instanceof com.netflix.loadbalancer.ServerList but is of type: "
operator|+
name|serverListStrategy
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|rule
operator|==
literal|null
condition|)
block|{
comment|// use round robin rule by default
name|rule
operator|=
operator|new
name|RoundRobinRule
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ping
operator|==
literal|null
condition|)
block|{
comment|// use dummy ping by default
name|ping
operator|=
operator|new
name|DummyPing
argument_list|()
expr_stmt|;
block|}
comment|// setup client config
name|IClientConfig
name|config
init|=
name|IClientConfig
operator|.
name|Builder
operator|.
name|newBuilder
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|ribbonClientConfig
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|ribbonClientConfig
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|IClientConfigKey
name|key
init|=
name|IClientConfigKey
operator|.
name|Keys
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"RibbonClientConfig: {}={}"
argument_list|,
name|key
operator|.
name|key
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ServerListUpdater
name|updater
init|=
operator|new
name|PollingServerListUpdater
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ribbonLoadBalancer
operator|=
operator|new
name|ZoneAwareLoadBalancer
argument_list|<>
argument_list|(
name|config
argument_list|,
name|rule
argument_list|,
name|ping
argument_list|,
operator|(
name|ServerList
argument_list|<
name|RibbonServer
argument_list|>
operator|)
name|serverListStrategy
argument_list|,
literal|null
argument_list|,
name|updater
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RibbonServiceCall with service name: {} is using load balancer: {} and server list: {}"
argument_list|,
name|name
argument_list|,
name|ribbonLoadBalancer
argument_list|,
name|serverListStrategy
argument_list|)
expr_stmt|;
name|processor
operator|=
operator|new
name|SendDynamicProcessor
argument_list|(
name|uri
argument_list|,
name|serviceCallExpression
argument_list|)
expr_stmt|;
name|processor
operator|.
name|setCamelContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchangePattern
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|setPattern
argument_list|(
name|exchangePattern
argument_list|)
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|serverListStrategy
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|processor
argument_list|,
name|serverListStrategy
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

