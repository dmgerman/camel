begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ribbon.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ribbon
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Navigate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceCallProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|CamelSpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_class
annotation|@
name|DirtiesContext
DECL|class|SpringRibbonServiceCallRouteTest
specifier|public
specifier|abstract
class|class
name|SpringRibbonServiceCallRouteTest
extends|extends
name|CamelSpringTestSupport
block|{
annotation|@
name|PropertyInject
argument_list|(
literal|"firstPort"
argument_list|)
DECL|field|firstPort
specifier|private
name|String
name|firstPort
decl_stmt|;
annotation|@
name|PropertyInject
argument_list|(
literal|"secondPort"
argument_list|)
DECL|field|secondPort
specifier|private
name|String
name|secondPort
decl_stmt|;
annotation|@
name|Test
DECL|method|testServiceCall ()
specifier|public
name|void
name|testServiceCall
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:{{firstPort}}"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:{{secondPort}}"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|out2
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|secondPort
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|firstPort
argument_list|,
name|out2
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|// ************************************
comment|// Helpers
comment|// ************************************
DECL|method|findServiceCallProcessor ()
specifier|protected
name|DefaultServiceCallProcessor
name|findServiceCallProcessor
parameter_list|()
block|{
name|Route
name|route
init|=
name|context
argument_list|()
operator|.
name|getRoute
argument_list|(
literal|"scall"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"ServiceCall Route should be present"
argument_list|,
name|route
argument_list|)
expr_stmt|;
return|return
name|findServiceCallProcessor
argument_list|(
name|route
operator|.
name|navigate
argument_list|()
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find a ServiceCallProcessor"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|findServiceCallProcessor (Navigate<Processor> navigate)
specifier|protected
name|Optional
argument_list|<
name|DefaultServiceCallProcessor
argument_list|>
name|findServiceCallProcessor
parameter_list|(
name|Navigate
argument_list|<
name|Processor
argument_list|>
name|navigate
parameter_list|)
block|{
for|for
control|(
name|Processor
name|processor
range|:
name|navigate
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
name|processor
operator|instanceof
name|DefaultServiceCallProcessor
condition|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
operator|(
name|DefaultServiceCallProcessor
operator|)
name|processor
argument_list|)
return|;
block|}
if|if
condition|(
name|processor
operator|instanceof
name|Navigate
condition|)
block|{
return|return
name|findServiceCallProcessor
argument_list|(
operator|(
name|Navigate
argument_list|<
name|Processor
argument_list|>
operator|)
name|processor
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

