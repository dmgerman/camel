begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ribbon.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ribbon
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|LoadBalancerBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|RoundRobinRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|ZoneAwareLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|PassThroughServiceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|StaticServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|RibbonServerListTest
specifier|public
class|class
name|RibbonServerListTest
block|{
annotation|@
name|Test
DECL|method|testFixedServerList ()
specifier|public
name|void
name|testFixedServerList
parameter_list|()
throws|throws
name|Exception
block|{
name|ZoneAwareLoadBalancer
argument_list|<
name|RibbonServiceDefinition
argument_list|>
name|lb
init|=
name|LoadBalancerBuilder
operator|.
expr|<
name|RibbonServiceDefinition
operator|>
name|newBuilder
argument_list|()
operator|.
name|withDynamicServerList
argument_list|(
operator|new
name|RibbonServiceLoadBalancer
operator|.
name|RibbonServerList
argument_list|(
literal|"unknown"
argument_list|,
name|StaticServiceDiscovery
operator|.
name|forServices
argument_list|(
operator|new
name|RibbonServiceDefinition
argument_list|(
literal|"unknown"
argument_list|,
literal|"localhost"
argument_list|,
literal|9090
argument_list|)
argument_list|,
operator|new
name|RibbonServiceDefinition
argument_list|(
literal|"unknown"
argument_list|,
literal|"localhost"
argument_list|,
literal|9091
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PassThroughServiceFilter
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withRule
argument_list|(
operator|new
name|RoundRobinRule
argument_list|()
argument_list|)
operator|.
name|buildDynamicServerListLoadBalancer
argument_list|()
decl_stmt|;
name|Server
name|server
init|=
name|lb
operator|.
name|chooseServer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|server
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9091
argument_list|,
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
name|lb
operator|.
name|chooseServer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|server
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9090
argument_list|,
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

