begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.velocity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|velocity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|loader
operator|.
name|ClasspathResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|util
operator|.
name|ExtProperties
import|;
end_import

begin_comment
comment|/**  * Camel specific {@link ClasspathResourceLoader} that loads resources using the  * Camel {@link ClassResolver} used by the Velocity.  */
end_comment

begin_class
DECL|class|CamelVelocityClasspathResourceLoader
specifier|public
class|class
name|CamelVelocityClasspathResourceLoader
extends|extends
name|ClasspathResourceLoader
block|{
DECL|field|resolver
specifier|private
name|ClassResolver
name|resolver
decl_stmt|;
annotation|@
name|Override
DECL|method|init (ExtProperties configuration)
specifier|public
name|void
name|init
parameter_list|(
name|ExtProperties
name|configuration
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|resolver
operator|=
operator|(
name|ClassResolver
operator|)
name|this
operator|.
name|rsvc
operator|.
name|getProperty
argument_list|(
literal|"CamelClassResolver"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|resolver
argument_list|,
literal|"ClassResolver"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResourceReader (String name, String encoding)
specifier|public
name|Reader
name|getResourceReader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|ResourceNotFoundException
block|{
name|InputStream
name|is
init|=
name|resolver
operator|.
name|loadResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getResourceReader
argument_list|(
name|name
argument_list|,
name|encoding
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

