begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|SSLContextParametersAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|CamelServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpCommonComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpCommonEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpRestHeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpRestServletResolveConsumerStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|UrlRewrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestApiConsumerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConsumerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestProducerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestProducerFactoryHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|HostUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClientTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|http
operator|.
name|HttpClientTransportOverHTTP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|jmx
operator|.
name|MBeanContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|AbstractConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlets
operator|.
name|CrossOriginFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlets
operator|.
name|MultiPartFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|component
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An HttpComponent which starts an embedded Jetty for to handle consuming from  * the http endpoints.  *  * @version  */
end_comment

begin_class
DECL|class|JettyHttpComponent
specifier|public
specifier|abstract
class|class
name|JettyHttpComponent
extends|extends
name|HttpCommonComponent
implements|implements
name|RestConsumerFactory
implements|,
name|RestApiConsumerFactory
implements|,
name|RestProducerFactory
implements|,
name|SSLContextParametersAware
block|{
DECL|field|TMP_DIR
specifier|public
specifier|static
specifier|final
name|String
name|TMP_DIR
init|=
literal|"CamelJettyTempDir"
decl_stmt|;
DECL|field|CONNECTORS
specifier|protected
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
name|CONNECTORS
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JettyHttpComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|JETTY_SSL_KEYSTORE
specifier|private
specifier|static
specifier|final
name|String
name|JETTY_SSL_KEYSTORE
init|=
literal|"org.eclipse.jetty.ssl.keystore"
decl_stmt|;
DECL|field|JETTY_SSL_KEYPASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|JETTY_SSL_KEYPASSWORD
init|=
literal|"org.eclipse.jetty.ssl.keypassword"
decl_stmt|;
DECL|field|JETTY_SSL_PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|JETTY_SSL_PASSWORD
init|=
literal|"org.eclipse.jetty.ssl.password"
decl_stmt|;
DECL|field|sslKeyPassword
specifier|protected
name|String
name|sslKeyPassword
decl_stmt|;
DECL|field|sslPassword
specifier|protected
name|String
name|sslPassword
decl_stmt|;
DECL|field|sslKeystore
specifier|protected
name|String
name|sslKeystore
decl_stmt|;
DECL|field|sslSocketConnectors
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|Connector
argument_list|>
name|sslSocketConnectors
decl_stmt|;
DECL|field|socketConnectors
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|Connector
argument_list|>
name|socketConnectors
decl_stmt|;
DECL|field|sslSocketConnectorProperties
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sslSocketConnectorProperties
decl_stmt|;
DECL|field|socketConnectorProperties
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|socketConnectorProperties
decl_stmt|;
DECL|field|httpClientMinThreads
specifier|protected
name|Integer
name|httpClientMinThreads
decl_stmt|;
DECL|field|httpClientMaxThreads
specifier|protected
name|Integer
name|httpClientMaxThreads
decl_stmt|;
DECL|field|minThreads
specifier|protected
name|Integer
name|minThreads
decl_stmt|;
DECL|field|maxThreads
specifier|protected
name|Integer
name|maxThreads
decl_stmt|;
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|mbContainer
specifier|protected
name|MBeanContainer
name|mbContainer
decl_stmt|;
DECL|field|enableJmx
specifier|protected
name|boolean
name|enableJmx
decl_stmt|;
DECL|field|jettyHttpBinding
specifier|protected
name|JettyHttpBinding
name|jettyHttpBinding
decl_stmt|;
DECL|field|continuationTimeout
specifier|protected
name|Long
name|continuationTimeout
decl_stmt|;
DECL|field|useContinuation
specifier|protected
name|boolean
name|useContinuation
init|=
literal|true
decl_stmt|;
DECL|field|sslContextParameters
specifier|protected
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
DECL|field|useGlobalSslContextParameters
specifier|protected
name|boolean
name|useGlobalSslContextParameters
decl_stmt|;
DECL|field|requestBufferSize
specifier|protected
name|Integer
name|requestBufferSize
decl_stmt|;
DECL|field|requestHeaderSize
specifier|protected
name|Integer
name|requestHeaderSize
decl_stmt|;
DECL|field|responseBufferSize
specifier|protected
name|Integer
name|responseBufferSize
decl_stmt|;
DECL|field|responseHeaderSize
specifier|protected
name|Integer
name|responseHeaderSize
decl_stmt|;
DECL|field|proxyHost
specifier|protected
name|String
name|proxyHost
decl_stmt|;
DECL|field|errorHandler
specifier|protected
name|ErrorHandler
name|errorHandler
decl_stmt|;
DECL|field|useXForwardedForHeader
specifier|protected
name|boolean
name|useXForwardedForHeader
decl_stmt|;
DECL|field|proxyPort
specifier|private
name|Integer
name|proxyPort
decl_stmt|;
DECL|field|sendServerVersion
specifier|private
name|boolean
name|sendServerVersion
init|=
literal|true
decl_stmt|;
DECL|method|JettyHttpComponent ()
specifier|public
name|JettyHttpComponent
parameter_list|()
block|{     }
DECL|class|ConnectorRef
class|class
name|ConnectorRef
block|{
DECL|field|server
name|Server
name|server
decl_stmt|;
DECL|field|connector
name|Connector
name|connector
decl_stmt|;
DECL|field|servlet
name|CamelServlet
name|servlet
decl_stmt|;
DECL|field|refCount
name|int
name|refCount
decl_stmt|;
DECL|method|ConnectorRef (Server server, Connector connector, CamelServlet servlet)
name|ConnectorRef
parameter_list|(
name|Server
name|server
parameter_list|,
name|Connector
name|connector
parameter_list|,
name|CamelServlet
name|servlet
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|servlet
operator|=
name|servlet
expr_stmt|;
name|increment
argument_list|()
expr_stmt|;
block|}
DECL|method|increment ()
specifier|public
name|int
name|increment
parameter_list|()
block|{
return|return
operator|++
name|refCount
return|;
block|}
DECL|method|decrement ()
specifier|public
name|int
name|decrement
parameter_list|()
block|{
return|return
operator|--
name|refCount
return|;
block|}
DECL|method|getRefCount ()
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// must extract well known parameters before we create the endpoint
name|List
argument_list|<
name|Handler
argument_list|>
name|handlerList
init|=
name|resolveAndRemoveReferenceListParameter
argument_list|(
name|parameters
argument_list|,
literal|"handlers"
argument_list|,
name|Handler
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpBinding
name|binding
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpBindingRef"
argument_list|,
name|HttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|JettyHttpBinding
name|jettyBinding
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"jettyHttpBindingRef"
argument_list|,
name|JettyHttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|enableJmx
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"enableJmx"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|enableMultipartFilter
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"enableMultipartFilter"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Filter
name|multipartFilter
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"multipartFilterRef"
argument_list|,
name|Filter
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
name|resolveAndRemoveReferenceListParameter
argument_list|(
name|parameters
argument_list|,
literal|"filtersRef"
argument_list|,
name|Filter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|enableCors
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"enableCORS"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HeaderFilterStrategy
name|headerFilterStrategy
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"headerFilterStrategy"
argument_list|,
name|HeaderFilterStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
name|UrlRewrite
name|urlRewrite
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"urlRewrite"
argument_list|,
name|UrlRewrite
operator|.
name|class
argument_list|)
decl_stmt|;
name|SSLContextParameters
name|sslContextParameters
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"sslContextParameters"
argument_list|,
name|SSLContextParameters
operator|.
name|class
argument_list|)
decl_stmt|;
name|SSLContextParameters
name|ssl
init|=
name|sslContextParameters
operator|!=
literal|null
condition|?
name|sslContextParameters
else|:
name|this
operator|.
name|sslContextParameters
decl_stmt|;
name|ssl
operator|=
name|ssl
operator|!=
literal|null
condition|?
name|ssl
else|:
name|retrieveGlobalSslContextParameters
argument_list|()
expr_stmt|;
name|String
name|proxyHost
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"proxyHost"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|getProxyHost
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|proxyPort
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"proxyPort"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|getProxyPort
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|httpClientMinThreads
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpClientMinThreads"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|this
operator|.
name|httpClientMinThreads
argument_list|)
decl_stmt|;
name|Integer
name|httpClientMaxThreads
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpClientMaxThreads"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|this
operator|.
name|httpClientMaxThreads
argument_list|)
decl_stmt|;
name|HttpClient
name|httpClient
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpClient"
argument_list|,
name|HttpClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|async
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"async"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// extract httpClient. parameters
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientParameters
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
literal|"httpClient."
argument_list|)
decl_stmt|;
comment|// extract filterInit. parameters
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterInitParameters
init|=
name|IntrospectionSupport
operator|.
name|extractStringProperties
argument_list|(
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
literal|"filterInit."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|remaining
decl_stmt|;
name|URI
name|addressUri
init|=
operator|new
name|URI
argument_list|(
name|UnsafeUriCharactersEncoder
operator|.
name|encodeHttpURI
argument_list|(
name|address
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|endpointUri
init|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
name|addressUri
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|// need to keep the httpMethodRestrict parameter for the endpointUri
name|String
name|httpMethodRestrict
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpMethodRestrict"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// restructure uri to be based on the parameters left as we dont want to include the Camel internal options
name|URI
name|httpUri
init|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
name|addressUri
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|// create endpoint after all known parameters have been extracted from parameters
comment|// include component scheme in the uri
name|String
name|scheme
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|uri
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|endpointUri
operator|=
operator|new
name|URI
argument_list|(
name|scheme
operator|+
literal|":"
operator|+
name|endpointUri
argument_list|)
expr_stmt|;
name|JettyHttpEndpoint
name|endpoint
init|=
name|createEndpoint
argument_list|(
name|endpointUri
argument_list|,
name|httpUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setAsync
argument_list|(
name|async
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|headerFilterStrategy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setEndpointHeaderFilterStrategy
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|// setup the proxy host and proxy port
if|if
condition|(
name|proxyHost
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setProxyHost
argument_list|(
name|proxyHost
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setProxyPort
argument_list|(
name|proxyPort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|urlRewrite
operator|!=
literal|null
condition|)
block|{
comment|// let CamelContext deal with the lifecycle of the url rewrite
comment|// this ensures its being shutdown when Camel shutdown etc.
name|getCamelContext
argument_list|()
operator|.
name|addService
argument_list|(
name|urlRewrite
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setUrlRewrite
argument_list|(
name|urlRewrite
argument_list|)
expr_stmt|;
block|}
comment|// setup the proxy host and proxy port
if|if
condition|(
name|httpClientParameters
operator|!=
literal|null
operator|&&
operator|!
name|httpClientParameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|endpoint
operator|.
name|setHttpClientParameters
argument_list|(
name|httpClientParameters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterInitParameters
operator|!=
literal|null
operator|&&
operator|!
name|filterInitParameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|endpoint
operator|.
name|setFilterInitParameters
argument_list|(
name|filterInitParameters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handlerList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|endpoint
operator|.
name|setHandlers
argument_list|(
name|handlerList
argument_list|)
expr_stmt|;
block|}
comment|// prefer to use endpoint configured over component configured
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
comment|// fallback to component configured
name|binding
operator|=
name|getHttpBinding
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setBinding
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
comment|// prefer to use endpoint configured over component configured
if|if
condition|(
name|jettyBinding
operator|==
literal|null
condition|)
block|{
comment|// fallback to component configured
name|jettyBinding
operator|=
name|getJettyHttpBinding
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jettyBinding
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setJettyBinding
argument_list|(
name|jettyBinding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableJmx
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setEnableJmx
argument_list|(
name|enableJmx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set this option based on setting of JettyHttpComponent
name|endpoint
operator|.
name|setEnableJmx
argument_list|(
name|isEnableJmx
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setEnableMultipartFilter
argument_list|(
name|enableMultipartFilter
argument_list|)
expr_stmt|;
if|if
condition|(
name|multipartFilter
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setMultipartFilter
argument_list|(
name|multipartFilter
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setEnableMultipartFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableCors
condition|)
block|{
name|endpoint
operator|.
name|setEnableCORS
argument_list|(
name|enableCors
argument_list|)
expr_stmt|;
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
name|filters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|filters
operator|.
name|add
argument_list|(
operator|new
name|CrossOriginFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filters
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpMethodRestrict
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setHttpMethodRestrict
argument_list|(
name|httpMethodRestrict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ssl
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setSslContextParameters
argument_list|(
name|ssl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpClientMinThreads
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setHttpClientMinThreads
argument_list|(
name|httpClientMinThreads
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpClientMaxThreads
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setHttpClientMaxThreads
argument_list|(
name|httpClientMaxThreads
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpClient
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setSendServerVersion
argument_list|(
name|isSendServerVersion
argument_list|()
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// re-create http uri after all parameters has been set on the endpoint, as the remainders are for http uri
name|httpUri
operator|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
name|addressUri
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setHttpUri
argument_list|(
name|httpUri
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|createEndpoint (URI endpointUri, URI httpUri)
specifier|protected
specifier|abstract
name|JettyHttpEndpoint
name|createEndpoint
parameter_list|(
name|URI
name|endpointUri
parameter_list|,
name|URI
name|httpUri
parameter_list|)
throws|throws
name|URISyntaxException
function_decl|;
comment|/**      * Connects the URL specified on the endpoint to the specified processor.      */
annotation|@
name|Override
DECL|method|connect (HttpConsumer consumer)
specifier|public
name|void
name|connect
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure that there is a connector for the requested endpoint.
name|JettyHttpEndpoint
name|endpoint
init|=
operator|(
name|JettyHttpEndpoint
operator|)
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
name|getConnectorKey
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|CONNECTORS
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|==
literal|null
condition|)
block|{
name|Server
name|server
init|=
name|createServer
argument_list|()
decl_stmt|;
name|Connector
name|connector
init|=
name|getConnector
argument_list|(
name|server
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"localhost"
operator|.
name|equalsIgnoreCase
argument_list|(
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"You use localhost interface! It means that no external connections will be available."
operator|+
literal|" Don't you want to use 0.0.0.0 instead (all network interfaces)? "
operator|+
name|endpoint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isEnableJmx
argument_list|()
condition|)
block|{
name|enableJmx
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|=
operator|new
name|ConnectorRef
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|createServletForConnector
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|endpoint
operator|.
name|getHandlers
argument_list|()
argument_list|,
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
comment|// must enable session before we start
if|if
condition|(
name|endpoint
operator|.
name|isSessionSupport
argument_list|()
condition|)
block|{
name|enableSessionSupport
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
name|connectorRef
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|CONNECTORS
operator|.
name|put
argument_list|(
name|connectorKey
argument_list|,
name|connectorRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// check if there are any new handlers, and if so then we need to re-start the server
if|if
condition|(
name|endpoint
operator|.
name|getHandlers
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|endpoint
operator|.
name|getHandlers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Handler
argument_list|>
name|existingHandlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|.
name|server
operator|.
name|getHandlers
argument_list|()
operator|!=
literal|null
operator|&&
name|connectorRef
operator|.
name|server
operator|.
name|getHandlers
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|existingHandlers
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|connectorRef
operator|.
name|server
operator|.
name|getHandlers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Handler
argument_list|>
name|newHandlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|endpoint
operator|.
name|getHandlers
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
operator|!
name|existingHandlers
operator|.
name|containsAll
argument_list|(
name|newHandlers
argument_list|)
operator|&&
operator|!
name|newHandlers
operator|.
name|containsAll
argument_list|(
name|existingHandlers
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restarting Jetty server due to adding new Jetty Handlers: {}"
argument_list|,
name|newHandlers
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|addJettyHandlers
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|,
name|endpoint
operator|.
name|getHandlers
argument_list|()
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ref track the connector
name|connectorRef
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
comment|// check the session support
if|if
condition|(
name|endpoint
operator|.
name|isSessionSupport
argument_list|()
condition|)
block|{
name|enableSessionSupport
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isEnableMultipartFilter
argument_list|()
condition|)
block|{
name|enableMultipartFilter
argument_list|(
name|endpoint
argument_list|,
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|endpoint
operator|.
name|getFilters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|setFilters
argument_list|(
name|endpoint
argument_list|,
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
name|connectorRef
operator|.
name|servlet
operator|.
name|connect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|enableJmx (Server server)
specifier|private
name|void
name|enableJmx
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|MBeanContainer
name|containerToRegister
init|=
name|getMbContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerToRegister
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Jetty JMX Extensions is enabled"
argument_list|)
expr_stmt|;
name|addServerMBean
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// Since we may have many Servers running, don't tie the MBeanContainer
comment|// to a Server lifecycle or we end up closing it while it is still in use.
comment|//server.addBean(mbContainer);
block|}
block|}
DECL|method|enableSessionSupport (Server server, String connectorKey)
specifier|private
name|void
name|enableSessionSupport
parameter_list|(
name|Server
name|server
parameter_list|,
name|String
name|connectorKey
parameter_list|)
throws|throws
name|Exception
block|{
name|ServletContextHandler
name|context
init|=
name|server
operator|.
name|getChildHandlerByClass
argument_list|(
name|ServletContextHandler
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getSessionHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SessionHandler
name|sessionHandler
init|=
operator|new
name|SessionHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isStarted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Server has already been started. Cannot enabled sessionSupport on "
operator|+
name|connectorKey
argument_list|)
throw|;
block|}
else|else
block|{
name|context
operator|.
name|setSessionHandler
argument_list|(
name|sessionHandler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setFilters (JettyHttpEndpoint endpoint, Server server, String connectorKey)
specifier|private
name|void
name|setFilters
parameter_list|(
name|JettyHttpEndpoint
name|endpoint
parameter_list|,
name|Server
name|server
parameter_list|,
name|String
name|connectorKey
parameter_list|)
block|{
name|ServletContextHandler
name|context
init|=
name|server
operator|.
name|getChildHandlerByClass
argument_list|(
name|ServletContextHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
name|endpoint
operator|.
name|getFilters
argument_list|()
decl_stmt|;
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
name|FilterHolder
name|filterHolder
init|=
operator|new
name|FilterHolder
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getFilterInitParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filterHolder
operator|.
name|setInitParameters
argument_list|(
name|endpoint
operator|.
name|getFilterInitParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|filterHolder
operator|.
name|setFilter
argument_list|(
operator|new
name|CamelFilterWrapper
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pathSpec
init|=
name|endpoint
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathSpec
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|pathSpec
argument_list|)
condition|)
block|{
name|pathSpec
operator|=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isMatchOnUriPrefix
argument_list|()
condition|)
block|{
name|pathSpec
operator|=
name|pathSpec
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|pathSpec
operator|+
literal|"*"
else|:
name|pathSpec
operator|+
literal|"/*"
expr_stmt|;
block|}
name|addFilter
argument_list|(
name|context
argument_list|,
name|filterHolder
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addFilter (ServletContextHandler context, FilterHolder filterHolder, String pathSpec)
specifier|private
name|void
name|addFilter
parameter_list|(
name|ServletContextHandler
name|context
parameter_list|,
name|FilterHolder
name|filterHolder
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
name|context
operator|.
name|getServletHandler
argument_list|()
operator|.
name|addFilterWithMapping
argument_list|(
name|filterHolder
argument_list|,
name|pathSpec
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|enableMultipartFilter (HttpCommonEndpoint endpoint, Server server, String connectorKey)
specifier|private
name|void
name|enableMultipartFilter
parameter_list|(
name|HttpCommonEndpoint
name|endpoint
parameter_list|,
name|Server
name|server
parameter_list|,
name|String
name|connectorKey
parameter_list|)
throws|throws
name|Exception
block|{
name|ServletContextHandler
name|context
init|=
name|server
operator|.
name|getChildHandlerByClass
argument_list|(
name|ServletContextHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|CamelContext
name|camelContext
init|=
name|this
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
name|FilterHolder
name|filterHolder
init|=
operator|new
name|FilterHolder
argument_list|()
decl_stmt|;
name|filterHolder
operator|.
name|setInitParameter
argument_list|(
literal|"deleteFiles"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|camelContext
operator|.
name|getGlobalOption
argument_list|(
name|TMP_DIR
argument_list|)
argument_list|)
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|camelContext
operator|.
name|getGlobalOption
argument_list|(
name|TMP_DIR
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"The temp file directory of camel-jetty is not exists, please recheck it with directory name :"
operator|+
name|camelContext
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|TMP_DIR
argument_list|)
argument_list|)
throw|;
block|}
name|context
operator|.
name|setAttribute
argument_list|(
literal|"javax.servlet.context.tempdir"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|// if a filter ref was provided, use it.
name|Filter
name|filter
init|=
operator|(
operator|(
name|JettyHttpEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getMultipartFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
comment|// if no filter ref was provided, use the default filter
name|filter
operator|=
operator|new
name|MultiPartFilter
argument_list|()
expr_stmt|;
block|}
name|filterHolder
operator|.
name|setFilter
argument_list|(
operator|new
name|CamelFilterWrapper
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pathSpec
init|=
name|endpoint
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathSpec
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|pathSpec
argument_list|)
condition|)
block|{
name|pathSpec
operator|=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isMatchOnUriPrefix
argument_list|()
condition|)
block|{
name|pathSpec
operator|=
name|pathSpec
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|pathSpec
operator|+
literal|"*"
else|:
name|pathSpec
operator|+
literal|"/*"
expr_stmt|;
block|}
name|addFilter
argument_list|(
name|context
argument_list|,
name|filterHolder
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"using multipart filter implementation "
operator|+
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for path "
operator|+
name|pathSpec
argument_list|)
expr_stmt|;
block|}
comment|/**      * Disconnects the URL specified on the endpoint from the specified processor.      */
annotation|@
name|Override
DECL|method|disconnect (HttpConsumer consumer)
specifier|public
name|void
name|disconnect
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
comment|// If the connector is not needed anymore then stop it
name|HttpCommonEndpoint
name|endpoint
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
name|getConnectorKey
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|CONNECTORS
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|!=
literal|null
condition|)
block|{
name|connectorRef
operator|.
name|servlet
operator|.
name|disconnect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectorRef
operator|.
name|decrement
argument_list|()
operator|==
literal|0
condition|)
block|{
name|connectorRef
operator|.
name|server
operator|.
name|removeConnector
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|CONNECTORS
operator|.
name|remove
argument_list|(
name|connectorKey
argument_list|)
expr_stmt|;
comment|// Camel controls the lifecycle of these entities so remove the
comment|// registered MBeans when Camel is done with the managed objects.
if|if
condition|(
name|mbContainer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|removeServerMBean
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|)
expr_stmt|;
comment|//mbContainer.removeBean(connectorRef.connector);
block|}
block|}
block|}
block|}
block|}
DECL|method|getConnectorKey (HttpCommonEndpoint endpoint)
specifier|private
name|String
name|getConnectorKey
parameter_list|(
name|HttpCommonEndpoint
name|endpoint
parameter_list|)
block|{
return|return
name|endpoint
operator|.
name|getProtocol
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getSslKeyPassword ()
specifier|public
name|String
name|getSslKeyPassword
parameter_list|()
block|{
return|return
name|sslKeyPassword
return|;
block|}
comment|/**      * The key password, which is used to access the certificate's key entry in the keystore (this is the same password that is supplied to the keystore command's -keypass option).      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"The key password, which is used to access the certificate's key entry in the keystore "
operator|+
literal|"(this is the same password that is supplied to the keystore command's -keypass option)."
argument_list|,
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|method|setSslKeyPassword (String sslKeyPassword)
specifier|public
name|void
name|setSslKeyPassword
parameter_list|(
name|String
name|sslKeyPassword
parameter_list|)
block|{
name|this
operator|.
name|sslKeyPassword
operator|=
name|sslKeyPassword
expr_stmt|;
block|}
DECL|method|getSslPassword ()
specifier|public
name|String
name|getSslPassword
parameter_list|()
block|{
return|return
name|sslPassword
return|;
block|}
comment|/**      * The ssl password, which is required to access the keystore file (this is the same password that is supplied to the keystore command's -storepass option).      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"The ssl password, which is required to access the keystore file (this is the same password that is supplied to the keystore command's -storepass option)."
argument_list|,
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|method|setSslPassword (String sslPassword)
specifier|public
name|void
name|setSslPassword
parameter_list|(
name|String
name|sslPassword
parameter_list|)
block|{
name|this
operator|.
name|sslPassword
operator|=
name|sslPassword
expr_stmt|;
block|}
comment|/**      * Specifies the location of the Java keystore file, which contains the Jetty server's own X.509 certificate in a key entry.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Specifies the location of the Java keystore file, which contains the Jetty server's own X.509 certificate in a key entry."
argument_list|,
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|method|setKeystore (String sslKeystore)
specifier|public
name|void
name|setKeystore
parameter_list|(
name|String
name|sslKeystore
parameter_list|)
block|{
name|this
operator|.
name|sslKeystore
operator|=
name|sslKeystore
expr_stmt|;
block|}
DECL|method|getKeystore ()
specifier|public
name|String
name|getKeystore
parameter_list|()
block|{
return|return
name|sslKeystore
return|;
block|}
DECL|method|getErrorHandler ()
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
comment|/**      * This option is used to set the ErrorHandler that Jetty server uses.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"This option is used to set the ErrorHandler that Jetty server uses."
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|method|setErrorHandler (ErrorHandler errorHandler)
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
block|}
DECL|method|getConnector (Server server, JettyHttpEndpoint endpoint)
specifier|protected
name|Connector
name|getConnector
parameter_list|(
name|Server
name|server
parameter_list|,
name|JettyHttpEndpoint
name|endpoint
parameter_list|)
block|{
name|Connector
name|connector
decl_stmt|;
if|if
condition|(
literal|"https"
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|connector
operator|=
name|getSslSocketConnector
argument_list|(
name|server
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|=
name|getSocketConnector
argument_list|(
name|server
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|connector
return|;
block|}
DECL|method|getSocketConnector (Server server, JettyHttpEndpoint endpoint)
specifier|protected
name|Connector
name|getSocketConnector
parameter_list|(
name|Server
name|server
parameter_list|,
name|JettyHttpEndpoint
name|endpoint
parameter_list|)
block|{
name|Connector
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|socketConnectors
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|socketConnectors
operator|.
name|get
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|createConnector
argument_list|(
name|server
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getSslSocketConnector (Server server, JettyHttpEndpoint endpoint)
specifier|protected
name|Connector
name|getSslSocketConnector
parameter_list|(
name|Server
name|server
parameter_list|,
name|JettyHttpEndpoint
name|endpoint
parameter_list|)
block|{
name|Connector
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sslSocketConnectors
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|sslSocketConnectors
operator|.
name|get
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|createConnector
argument_list|(
name|server
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createConnector (Server server, JettyHttpEndpoint endpoint)
specifier|protected
name|Connector
name|createConnector
parameter_list|(
name|Server
name|server
parameter_list|,
name|JettyHttpEndpoint
name|endpoint
parameter_list|)
block|{
comment|// now we just use the SelectChannelConnector as the default connector
name|SslContextFactory
name|sslcf
init|=
literal|null
decl_stmt|;
comment|// Note that this was set on the endpoint when it was constructed.  It was
comment|// either explicitly set at the component or on the endpoint, but either way,
comment|// the value is already set.  We therefore do not need to look at the component
comment|// level SSLContextParameters again in this method.
name|SSLContextParameters
name|endpointSslContextParameters
init|=
name|endpoint
operator|.
name|getSslContextParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpointSslContextParameters
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sslcf
operator|=
name|createSslContextFactory
argument_list|(
name|endpointSslContextParameters
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"https"
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|sslcf
operator|=
operator|new
name|SslContextFactory
argument_list|()
expr_stmt|;
name|String
name|keystoreProperty
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_SSL_KEYSTORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystoreProperty
operator|!=
literal|null
condition|)
block|{
name|sslcf
operator|.
name|setKeyStorePath
argument_list|(
name|keystoreProperty
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sslKeystore
operator|!=
literal|null
condition|)
block|{
name|sslcf
operator|.
name|setKeyStorePath
argument_list|(
name|sslKeystore
argument_list|)
expr_stmt|;
block|}
name|String
name|keystorePassword
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_SSL_KEYPASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystorePassword
operator|!=
literal|null
condition|)
block|{
name|sslcf
operator|.
name|setKeyManagerPassword
argument_list|(
name|keystorePassword
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sslKeyPassword
operator|!=
literal|null
condition|)
block|{
name|sslcf
operator|.
name|setKeyManagerPassword
argument_list|(
name|sslKeyPassword
argument_list|)
expr_stmt|;
block|}
name|String
name|password
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_SSL_PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|sslcf
operator|.
name|setKeyStorePassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sslPassword
operator|!=
literal|null
condition|)
block|{
name|sslcf
operator|.
name|setKeyStorePassword
argument_list|(
name|sslPassword
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|createConnectorJettyInternal
argument_list|(
name|server
argument_list|,
name|endpoint
argument_list|,
name|sslcf
argument_list|)
return|;
block|}
DECL|method|createConnectorJettyInternal (Server server, JettyHttpEndpoint endpoint, SslContextFactory sslcf)
specifier|protected
specifier|abstract
name|AbstractConnector
name|createConnectorJettyInternal
parameter_list|(
name|Server
name|server
parameter_list|,
name|JettyHttpEndpoint
name|endpoint
parameter_list|,
name|SslContextFactory
name|sslcf
parameter_list|)
function_decl|;
DECL|method|createSslContextFactory (SSLContextParameters ssl)
specifier|private
name|SslContextFactory
name|createSslContextFactory
parameter_list|(
name|SSLContextParameters
name|ssl
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|SslContextFactory
name|answer
init|=
operator|new
name|SslContextFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|ssl
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setSslContext
argument_list|(
name|ssl
operator|.
name|createSSLContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// jetty default is
comment|// addExcludeProtocols("SSL", "SSLv2", "SSLv2Hello", "SSLv3");
comment|// setExcludeCipherSuites("^.*_(MD5|SHA|SHA1)$");
comment|// configure include/exclude ciphers and protocols
if|if
condition|(
name|ssl
operator|!=
literal|null
operator|&&
name|ssl
operator|.
name|getCipherSuitesFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|includeCiphers
init|=
name|ssl
operator|.
name|getCipherSuitesFilter
argument_list|()
operator|.
name|getInclude
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeCiphers
operator|!=
literal|null
operator|&&
operator|!
name|includeCiphers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|includeCiphers
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|includeCiphers
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setIncludeCipherSuites
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setIncludeCipherSuites
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|excludeCiphers
init|=
name|ssl
operator|.
name|getCipherSuitesFilter
argument_list|()
operator|.
name|getExclude
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeCiphers
operator|!=
literal|null
operator|&&
operator|!
name|excludeCiphers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|excludeCiphers
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|excludeCiphers
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExcludeCipherSuites
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ssl
operator|!=
literal|null
operator|&&
name|ssl
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|includeProtocols
init|=
name|ssl
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
operator|.
name|getInclude
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeProtocols
operator|!=
literal|null
operator|&&
operator|!
name|includeProtocols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|includeProtocols
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|includeProtocols
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setIncludeProtocols
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setIncludeProtocols
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|excludeProtocols
init|=
name|ssl
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
operator|.
name|getExclude
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeProtocols
operator|!=
literal|null
operator|&&
operator|!
name|excludeProtocols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|excludeProtocols
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|excludeProtocols
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExcludeProtocols
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|checkSSLContextFactoryConfig (Object instance)
specifier|protected
name|boolean
name|checkSSLContextFactoryConfig
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"checkConfig"
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|false
return|;
block|}
DECL|method|getSslSocketConnectors ()
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Connector
argument_list|>
name|getSslSocketConnectors
parameter_list|()
block|{
return|return
name|sslSocketConnectors
return|;
block|}
comment|/**      * A map which contains per port number specific SSL connectors.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"A map which contains per port number specific SSL connectors."
argument_list|,
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setSslSocketConnectors (Map <Integer, Connector> connectors)
specifier|public
name|void
name|setSslSocketConnectors
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Connector
argument_list|>
name|connectors
parameter_list|)
block|{
name|sslSocketConnectors
operator|=
name|connectors
expr_stmt|;
block|}
comment|/**      * A map which contains per port number specific HTTP connectors. Uses the same principle as sslSocketConnectors.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"A map which contains per port number specific HTTP connectors. Uses the same principle as sslSocketConnectors."
argument_list|,
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setSocketConnectors (Map<Integer, Connector> socketConnectors)
specifier|public
name|void
name|setSocketConnectors
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Connector
argument_list|>
name|socketConnectors
parameter_list|)
block|{
name|this
operator|.
name|socketConnectors
operator|=
name|socketConnectors
expr_stmt|;
block|}
comment|/**      * Creates a new {@link HttpClient} and configures its proxy/thread pool and SSL based on this      * component settings.      *      * @param endpoint   the instance of JettyHttpEndpoint      * @param minThreads optional minimum number of threads in client thread pool      * @param maxThreads optional maximum number of threads in client thread pool      * @param ssl        option SSL parameters      */
DECL|method|createHttpClient (JettyHttpEndpoint endpoint, Integer minThreads, Integer maxThreads, SSLContextParameters ssl)
specifier|public
name|CamelHttpClient
name|createHttpClient
parameter_list|(
name|JettyHttpEndpoint
name|endpoint
parameter_list|,
name|Integer
name|minThreads
parameter_list|,
name|Integer
name|maxThreads
parameter_list|,
name|SSLContextParameters
name|ssl
parameter_list|)
throws|throws
name|Exception
block|{
name|SslContextFactory
name|sslContextFactory
init|=
name|createSslContextFactory
argument_list|(
name|ssl
argument_list|)
decl_stmt|;
name|HttpClientTransport
name|transport
init|=
name|createHttpClientTransport
argument_list|(
name|maxThreads
argument_list|)
decl_stmt|;
name|CamelHttpClient
name|httpClient
init|=
name|createCamelHttpClient
argument_list|(
name|transport
argument_list|,
name|sslContextFactory
argument_list|)
decl_stmt|;
name|CamelContext
name|context
init|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|context
operator|.
name|getGlobalOption
argument_list|(
literal|"http.proxyHost"
argument_list|)
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|context
operator|.
name|getGlobalOption
argument_list|(
literal|"http.proxyPort"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|host
init|=
name|context
operator|.
name|getGlobalOption
argument_list|(
literal|"http.proxyHost"
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|context
operator|.
name|getGlobalOption
argument_list|(
literal|"http.proxyPort"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CamelContext properties http.proxyHost and http.proxyPort detected. Using http proxy host: {} port: {}"
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|setProxy
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getProxyHost
argument_list|()
argument_list|)
operator|&&
name|endpoint
operator|.
name|getProxyPort
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|host
init|=
name|endpoint
operator|.
name|getProxyHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|endpoint
operator|.
name|getProxyPort
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"proxyHost and proxyPort options detected. Using http proxy host: {} port: {}"
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|setProxy
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
comment|// must have both min and max
if|if
condition|(
name|minThreads
operator|!=
literal|null
operator|||
name|maxThreads
operator|!=
literal|null
condition|)
block|{
comment|// must have both options
if|if
condition|(
name|minThreads
operator|==
literal|null
operator|||
name|maxThreads
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Both min and max thread pool sizes must be provided."
argument_list|)
throw|;
block|}
comment|// use QueueThreadPool as the default bounded is deprecated (see SMXCOMP-157)
name|QueuedThreadPool
name|qtp
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
name|qtp
operator|.
name|setMinThreads
argument_list|(
name|minThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|qtp
operator|.
name|setMaxThreads
argument_list|(
name|maxThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// and we want to use daemon threads
name|qtp
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// let the thread names indicate they are from the client
name|qtp
operator|.
name|setName
argument_list|(
literal|"CamelJettyClient("
operator|+
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|httpClient
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|setThreadPoolOrExecutor
argument_list|(
name|qtp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|minThreads
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created HttpClient with thread pool {}-{} -> {}"
argument_list|,
name|minThreads
argument_list|,
name|maxThreads
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created HttpClient with default thread pool size -> {}"
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|httpClient
return|;
block|}
DECL|method|createHttpClientTransport (Integer maxThreads)
specifier|private
name|HttpClientTransport
name|createHttpClientTransport
parameter_list|(
name|Integer
name|maxThreads
parameter_list|)
block|{
if|if
condition|(
name|maxThreads
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HttpClientTransportOverHTTP
argument_list|()
return|;
block|}
name|int
name|selectors
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectors
operator|>=
name|maxThreads
condition|)
block|{
name|selectors
operator|=
name|maxThreads
operator|-
literal|1
expr_stmt|;
block|}
return|return
operator|new
name|HttpClientTransportOverHTTP
argument_list|(
name|selectors
argument_list|)
return|;
block|}
DECL|method|createCamelHttpClient (HttpClientTransport transport, SslContextFactory sslContextFactory)
specifier|protected
specifier|abstract
name|CamelHttpClient
name|createCamelHttpClient
parameter_list|(
name|HttpClientTransport
name|transport
parameter_list|,
name|SslContextFactory
name|sslContextFactory
parameter_list|)
function_decl|;
DECL|method|getHttpClientMinThreads ()
specifier|public
name|Integer
name|getHttpClientMinThreads
parameter_list|()
block|{
return|return
name|httpClientMinThreads
return|;
block|}
comment|/**      * To set a value for minimum number of threads in HttpClient thread pool. Notice that both a min and max size must be configured.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To set a value for minimum number of threads in HttpClient thread pool. Notice that both a min and max size must be configured."
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|)
DECL|method|setHttpClientMinThreads (Integer httpClientMinThreads)
specifier|public
name|void
name|setHttpClientMinThreads
parameter_list|(
name|Integer
name|httpClientMinThreads
parameter_list|)
block|{
name|this
operator|.
name|httpClientMinThreads
operator|=
name|httpClientMinThreads
expr_stmt|;
block|}
DECL|method|getHttpClientMaxThreads ()
specifier|public
name|Integer
name|getHttpClientMaxThreads
parameter_list|()
block|{
return|return
name|httpClientMaxThreads
return|;
block|}
comment|/**      * To set a value for maximum number of threads in HttpClient thread pool. Notice that both a min and max size must be configured.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To set a value for maximum number of threads in HttpClient thread pool. Notice that both a min and max size must be configured."
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|)
DECL|method|setHttpClientMaxThreads (Integer httpClientMaxThreads)
specifier|public
name|void
name|setHttpClientMaxThreads
parameter_list|(
name|Integer
name|httpClientMaxThreads
parameter_list|)
block|{
name|this
operator|.
name|httpClientMaxThreads
operator|=
name|httpClientMaxThreads
expr_stmt|;
block|}
DECL|method|getMinThreads ()
specifier|public
name|Integer
name|getMinThreads
parameter_list|()
block|{
return|return
name|minThreads
return|;
block|}
comment|/**      * To set a value for minimum number of threads in server thread pool. Notice that both a min and max size must be configured.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To set a value for minimum number of threads in server thread pool. Notice that both a min and max size must be configured."
argument_list|,
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|method|setMinThreads (Integer minThreads)
specifier|public
name|void
name|setMinThreads
parameter_list|(
name|Integer
name|minThreads
parameter_list|)
block|{
name|this
operator|.
name|minThreads
operator|=
name|minThreads
expr_stmt|;
block|}
DECL|method|getMaxThreads ()
specifier|public
name|Integer
name|getMaxThreads
parameter_list|()
block|{
return|return
name|maxThreads
return|;
block|}
comment|/**      * To set a value for maximum number of threads in server thread pool. Notice that both a min and max size must be configured.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To set a value for maximum number of threads in server thread pool. Notice that both a min and max size must be configured."
argument_list|,
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|method|setMaxThreads (Integer maxThreads)
specifier|public
name|void
name|setMaxThreads
parameter_list|(
name|Integer
name|maxThreads
parameter_list|)
block|{
name|this
operator|.
name|maxThreads
operator|=
name|maxThreads
expr_stmt|;
block|}
DECL|method|getThreadPool ()
specifier|public
name|ThreadPool
name|getThreadPool
parameter_list|()
block|{
return|return
name|threadPool
return|;
block|}
comment|/**      * To use a custom thread pool for the server. This option should only be used in special circumstances.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To use a custom thread pool for the server. This option should only be used in special circumstances."
argument_list|,
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|method|setThreadPool (ThreadPool threadPool)
specifier|public
name|void
name|setThreadPool
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
DECL|method|isEnableJmx ()
specifier|public
name|boolean
name|isEnableJmx
parameter_list|()
block|{
return|return
name|enableJmx
return|;
block|}
comment|/**      * If this option is true, Jetty JMX support will be enabled for this endpoint.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"If this option is true, Jetty JMX support will be enabled for this endpoint."
argument_list|)
DECL|method|setEnableJmx (boolean enableJmx)
specifier|public
name|void
name|setEnableJmx
parameter_list|(
name|boolean
name|enableJmx
parameter_list|)
block|{
name|this
operator|.
name|enableJmx
operator|=
name|enableJmx
expr_stmt|;
block|}
DECL|method|getJettyHttpBinding ()
specifier|public
name|JettyHttpBinding
name|getJettyHttpBinding
parameter_list|()
block|{
return|return
name|jettyHttpBinding
return|;
block|}
comment|/**      * To use a custom org.apache.camel.component.jetty.JettyHttpBinding, which are used to customize how a response should be written for the producer.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To use a custom org.apache.camel.component.jetty.JettyHttpBinding, which are used to customize how a response should be written for the producer."
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|method|setJettyHttpBinding (JettyHttpBinding jettyHttpBinding)
specifier|public
name|void
name|setJettyHttpBinding
parameter_list|(
name|JettyHttpBinding
name|jettyHttpBinding
parameter_list|)
block|{
name|this
operator|.
name|jettyHttpBinding
operator|=
name|jettyHttpBinding
expr_stmt|;
block|}
comment|/**      * Not to be used - use JettyHttpBinding instead.      */
annotation|@
name|Override
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Not to be used - use JettyHttpBinding instead."
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|method|setHttpBinding (HttpBinding httpBinding)
specifier|public
name|void
name|setHttpBinding
parameter_list|(
name|HttpBinding
name|httpBinding
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not to be used - use JettyHttpBinding instead."
argument_list|)
throw|;
block|}
comment|/**      * Jetty component does not use HttpConfiguration.      */
annotation|@
name|Override
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Jetty component does not use HttpConfiguration."
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|method|setHttpConfiguration (HttpConfiguration httpConfiguration)
specifier|public
name|void
name|setHttpConfiguration
parameter_list|(
name|HttpConfiguration
name|httpConfiguration
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Jetty component does not use HttpConfiguration."
argument_list|)
throw|;
block|}
DECL|method|getMbContainer ()
specifier|public
specifier|synchronized
name|MBeanContainer
name|getMbContainer
parameter_list|()
block|{
comment|// If null, provide the default implementation.
if|if
condition|(
name|mbContainer
operator|==
literal|null
condition|)
block|{
name|MBeanServer
name|mbs
init|=
literal|null
decl_stmt|;
specifier|final
name|ManagementStrategy
name|mStrategy
init|=
name|this
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
specifier|final
name|ManagementAgent
name|mAgent
init|=
name|mStrategy
operator|.
name|getManagementAgent
argument_list|()
decl_stmt|;
if|if
condition|(
name|mAgent
operator|!=
literal|null
condition|)
block|{
name|mbs
operator|=
name|mAgent
operator|.
name|getMBeanServer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mbs
operator|!=
literal|null
condition|)
block|{
name|mbContainer
operator|=
operator|new
name|MBeanContainer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|startMbContainer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"JMX disabled in CamelContext. Jetty JMX extensions will remain disabled."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|mbContainer
return|;
block|}
comment|/**      * To use a existing configured org.eclipse.jetty.jmx.MBeanContainer if JMX is enabled that Jetty uses for registering mbeans.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To use a existing configured org.eclipse.jetty.jmx.MBeanContainer if JMX is enabled that Jetty uses for registering mbeans."
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|method|setMbContainer (MBeanContainer mbContainer)
specifier|public
name|void
name|setMbContainer
parameter_list|(
name|MBeanContainer
name|mbContainer
parameter_list|)
block|{
name|this
operator|.
name|mbContainer
operator|=
name|mbContainer
expr_stmt|;
block|}
DECL|method|getSslSocketConnectorProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSslSocketConnectorProperties
parameter_list|()
block|{
return|return
name|sslSocketConnectorProperties
return|;
block|}
comment|/**      * A map which contains general SSL connector properties.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"A map which contains general SSL connector properties."
argument_list|,
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setSslSocketConnectorProperties (Map<String, Object> sslSocketConnectorProperties)
specifier|public
name|void
name|setSslSocketConnectorProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sslSocketConnectorProperties
parameter_list|)
block|{
name|this
operator|.
name|sslSocketConnectorProperties
operator|=
name|sslSocketConnectorProperties
expr_stmt|;
block|}
DECL|method|getSocketConnectorProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSocketConnectorProperties
parameter_list|()
block|{
return|return
name|socketConnectorProperties
return|;
block|}
comment|/**      * A map which contains general HTTP connector properties. Uses the same principle as sslSocketConnectorProperties.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"A map which contains general HTTP connector properties. Uses the same principle as sslSocketConnectorProperties."
argument_list|,
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setSocketConnectorProperties (Map<String, Object> socketConnectorProperties)
specifier|public
name|void
name|setSocketConnectorProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|socketConnectorProperties
parameter_list|)
block|{
name|this
operator|.
name|socketConnectorProperties
operator|=
name|socketConnectorProperties
expr_stmt|;
block|}
DECL|method|addSocketConnectorProperty (String key, Object value)
specifier|public
name|void
name|addSocketConnectorProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|socketConnectorProperties
operator|==
literal|null
condition|)
block|{
name|socketConnectorProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|socketConnectorProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|addSslSocketConnectorProperty (String key, Object value)
specifier|public
name|void
name|addSslSocketConnectorProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|sslSocketConnectorProperties
operator|==
literal|null
condition|)
block|{
name|sslSocketConnectorProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|sslSocketConnectorProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getContinuationTimeout ()
specifier|public
name|Long
name|getContinuationTimeout
parameter_list|()
block|{
return|return
name|continuationTimeout
return|;
block|}
comment|/**      * Allows to set a timeout in millis when using Jetty as consumer (server).      * By default Jetty uses 30000. You can use a value of<= 0 to never expire.      * If a timeout occurs then the request will be expired and Jetty will return back a http error 503 to the client.      * This option is only in use when using Jetty with the Asynchronous Routing Engine.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Allows to set a timeout in millis when using Jetty as consumer (server)."
operator|+
literal|" By default Jetty uses 30000. You can use a value of<= 0 to never expire."
operator|+
literal|" If a timeout occurs then the request will be expired and Jetty will return back a http error 503 to the client."
operator|+
literal|" This option is only in use when using Jetty with the Asynchronous Routing Engine."
argument_list|,
name|defaultValue
operator|=
literal|"30000"
argument_list|,
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|method|setContinuationTimeout (Long continuationTimeout)
specifier|public
name|void
name|setContinuationTimeout
parameter_list|(
name|Long
name|continuationTimeout
parameter_list|)
block|{
name|this
operator|.
name|continuationTimeout
operator|=
name|continuationTimeout
expr_stmt|;
block|}
DECL|method|isUseContinuation ()
specifier|public
name|boolean
name|isUseContinuation
parameter_list|()
block|{
return|return
name|useContinuation
return|;
block|}
comment|/**      * Whether or not to use Jetty continuations for the Jetty Server.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Whether or not to use Jetty continuations for the Jetty Server."
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|method|setUseContinuation (boolean useContinuation)
specifier|public
name|void
name|setUseContinuation
parameter_list|(
name|boolean
name|useContinuation
parameter_list|)
block|{
name|this
operator|.
name|useContinuation
operator|=
name|useContinuation
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
comment|/**      * To configure security using SSLContextParameters      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To configure security using SSLContextParameters"
argument_list|,
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isUseGlobalSslContextParameters ()
specifier|public
name|boolean
name|isUseGlobalSslContextParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|useGlobalSslContextParameters
return|;
block|}
comment|/**      * Enable usage of global SSL context parameters      */
annotation|@
name|Override
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Enable usage of global SSL context parameters"
argument_list|,
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|method|setUseGlobalSslContextParameters (boolean useGlobalSslContextParameters)
specifier|public
name|void
name|setUseGlobalSslContextParameters
parameter_list|(
name|boolean
name|useGlobalSslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|useGlobalSslContextParameters
operator|=
name|useGlobalSslContextParameters
expr_stmt|;
block|}
DECL|method|getResponseBufferSize ()
specifier|public
name|Integer
name|getResponseBufferSize
parameter_list|()
block|{
return|return
name|responseBufferSize
return|;
block|}
comment|/**      * Allows to configure a custom value of the response buffer size on the Jetty connectors.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Allows to configure a custom value of the response buffer size on the Jetty connectors."
argument_list|)
DECL|method|setResponseBufferSize (Integer responseBufferSize)
specifier|public
name|void
name|setResponseBufferSize
parameter_list|(
name|Integer
name|responseBufferSize
parameter_list|)
block|{
name|this
operator|.
name|responseBufferSize
operator|=
name|responseBufferSize
expr_stmt|;
block|}
DECL|method|getRequestBufferSize ()
specifier|public
name|Integer
name|getRequestBufferSize
parameter_list|()
block|{
return|return
name|requestBufferSize
return|;
block|}
comment|/**      * Allows to configure a custom value of the request buffer size on the Jetty connectors.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Allows to configure a custom value of the request buffer size on the Jetty connectors."
argument_list|)
DECL|method|setRequestBufferSize (Integer requestBufferSize)
specifier|public
name|void
name|setRequestBufferSize
parameter_list|(
name|Integer
name|requestBufferSize
parameter_list|)
block|{
name|this
operator|.
name|requestBufferSize
operator|=
name|requestBufferSize
expr_stmt|;
block|}
DECL|method|getRequestHeaderSize ()
specifier|public
name|Integer
name|getRequestHeaderSize
parameter_list|()
block|{
return|return
name|requestHeaderSize
return|;
block|}
comment|/**      * Allows to configure a custom value of the request header size on the Jetty connectors.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Allows to configure a custom value of the request header size on the Jetty connectors."
argument_list|)
DECL|method|setRequestHeaderSize (Integer requestHeaderSize)
specifier|public
name|void
name|setRequestHeaderSize
parameter_list|(
name|Integer
name|requestHeaderSize
parameter_list|)
block|{
name|this
operator|.
name|requestHeaderSize
operator|=
name|requestHeaderSize
expr_stmt|;
block|}
DECL|method|getResponseHeaderSize ()
specifier|public
name|Integer
name|getResponseHeaderSize
parameter_list|()
block|{
return|return
name|responseHeaderSize
return|;
block|}
comment|/**      * Allows to configure a custom value of the response header size on the Jetty connectors.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Allows to configure a custom value of the response header size on the Jetty connectors."
argument_list|)
DECL|method|setResponseHeaderSize (Integer responseHeaderSize)
specifier|public
name|void
name|setResponseHeaderSize
parameter_list|(
name|Integer
name|responseHeaderSize
parameter_list|)
block|{
name|this
operator|.
name|responseHeaderSize
operator|=
name|responseHeaderSize
expr_stmt|;
block|}
DECL|method|getProxyHost ()
specifier|public
name|String
name|getProxyHost
parameter_list|()
block|{
return|return
name|proxyHost
return|;
block|}
comment|/**      * To use a http proxy to configure the hostname.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To use a http proxy to configure the hostname."
argument_list|,
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|method|setProxyHost (String proxyHost)
specifier|public
name|void
name|setProxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|this
operator|.
name|proxyHost
operator|=
name|proxyHost
expr_stmt|;
block|}
DECL|method|getProxyPort ()
specifier|public
name|Integer
name|getProxyPort
parameter_list|()
block|{
return|return
name|proxyPort
return|;
block|}
comment|/**      * To use a http proxy to configure the port number.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To use a http proxy to configure the port number."
argument_list|,
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|method|setProxyPort (Integer proxyPort)
specifier|public
name|void
name|setProxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|this
operator|.
name|proxyPort
operator|=
name|proxyPort
expr_stmt|;
block|}
DECL|method|isUseXForwardedForHeader ()
specifier|public
name|boolean
name|isUseXForwardedForHeader
parameter_list|()
block|{
return|return
name|useXForwardedForHeader
return|;
block|}
comment|/**      * To use the X-Forwarded-For header in HttpServletRequest.getRemoteAddr.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To use the X-Forwarded-For header in HttpServletRequest.getRemoteAddr."
argument_list|)
DECL|method|setUseXForwardedForHeader (boolean useXForwardedForHeader)
specifier|public
name|void
name|setUseXForwardedForHeader
parameter_list|(
name|boolean
name|useXForwardedForHeader
parameter_list|)
block|{
name|this
operator|.
name|useXForwardedForHeader
operator|=
name|useXForwardedForHeader
expr_stmt|;
block|}
DECL|method|isSendServerVersion ()
specifier|public
name|boolean
name|isSendServerVersion
parameter_list|()
block|{
return|return
name|sendServerVersion
return|;
block|}
comment|/**      * If the option is true, jetty will send the server header with the jetty version information to the client which sends the request.      * NOTE please make sure there is no any other camel-jetty endpoint is share the same port, otherwise this option may not work as expected.      */
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"If the option is true, jetty server will send the date header to the client which sends the request."
operator|+
literal|" NOTE please make sure there is no any other camel-jetty endpoint is share the same port, otherwise this option may not work as expected."
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|method|setSendServerVersion (boolean sendServerVersion)
specifier|public
name|void
name|setSendServerVersion
parameter_list|(
name|boolean
name|sendServerVersion
parameter_list|)
block|{
name|this
operator|.
name|sendServerVersion
operator|=
name|sendServerVersion
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|createConsumer (CamelContext camelContext, Processor processor, String verb, String basePath, String uriTemplate, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|basePath
parameter_list|,
name|String
name|uriTemplate
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doCreateConsumer
argument_list|(
name|camelContext
argument_list|,
name|processor
argument_list|,
name|verb
argument_list|,
name|basePath
argument_list|,
name|uriTemplate
argument_list|,
name|consumes
argument_list|,
name|produces
argument_list|,
name|configuration
argument_list|,
name|parameters
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createApiConsumer (CamelContext camelContext, Processor processor, String contextPath, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Consumer
name|createApiConsumer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// reuse the createConsumer method we already have. The api need to use GET and match on uri prefix
return|return
name|doCreateConsumer
argument_list|(
name|camelContext
argument_list|,
name|processor
argument_list|,
literal|"GET"
argument_list|,
name|contextPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|configuration
argument_list|,
name|parameters
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|doCreateConsumer (CamelContext camelContext, Processor processor, String verb, String basePath, String uriTemplate, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters, boolean api)
name|Consumer
name|doCreateConsumer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|basePath
parameter_list|,
name|String
name|uriTemplate
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|boolean
name|api
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|basePath
decl_stmt|;
if|if
condition|(
name|uriTemplate
operator|!=
literal|null
condition|)
block|{
comment|// make sure to avoid double slashes
if|if
condition|(
name|uriTemplate
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|+
name|uriTemplate
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|path
operator|+
literal|"/"
operator|+
name|uriTemplate
expr_stmt|;
block|}
block|}
name|path
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|scheme
init|=
literal|"http"
decl_stmt|;
name|String
name|host
init|=
literal|""
decl_stmt|;
name|int
name|port
init|=
literal|0
decl_stmt|;
comment|// if no explicit port/host configured, then use port from rest configuration
name|RestConfiguration
name|config
init|=
name|configuration
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
literal|"jetty"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scheme
operator|=
name|config
operator|.
name|getScheme
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|config
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
name|int
name|num
init|=
name|config
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|port
operator|=
name|num
expr_stmt|;
block|}
comment|// prefix path with context-path if configured in rest-dsl configuration
name|String
name|contextPath
init|=
name|config
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|contextPath
argument_list|)
condition|)
block|{
name|contextPath
operator|=
name|FileUtil
operator|.
name|stripTrailingSeparator
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
name|contextPath
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|contextPath
argument_list|)
condition|)
block|{
name|path
operator|=
name|contextPath
operator|+
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
block|}
comment|// if no explicit hostname set then resolve the hostname
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|host
argument_list|)
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|allLocalIp
condition|)
block|{
name|host
operator|=
literal|"0.0.0.0"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localHostName
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localIp
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalIp
argument_list|()
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// build query string, and append any endpoint configuration properties
if|if
condition|(
name|config
operator|.
name|getComponent
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getComponent
argument_list|()
operator|.
name|equals
argument_list|(
literal|"jetty"
argument_list|)
condition|)
block|{
comment|// setup endpoint options
if|if
condition|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|cors
init|=
name|config
operator|.
name|isEnableCORS
argument_list|()
decl_stmt|;
if|if
condition|(
name|cors
condition|)
block|{
comment|// allow HTTP Options as we want to handle CORS in rest-dsl
name|map
operator|.
name|put
argument_list|(
literal|"optionsEnabled"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|String
name|url
decl_stmt|;
if|if
condition|(
name|api
condition|)
block|{
name|url
operator|=
literal|"jetty:%s://%s:%s/%s?matchOnUriPrefix=true&httpMethodRestrict=%s"
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
literal|"jetty:%s://%s:%s/%s?httpMethodRestrict=%s"
expr_stmt|;
block|}
comment|// must use upper case for restrict
name|String
name|restrict
init|=
name|verb
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
if|if
condition|(
name|cors
condition|)
block|{
name|restrict
operator|+=
literal|",OPTIONS"
expr_stmt|;
block|}
comment|// get the endpoint
name|url
operator|=
name|String
operator|.
name|format
argument_list|(
name|url
argument_list|,
name|scheme
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|path
argument_list|,
name|restrict
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&"
operator|+
name|query
expr_stmt|;
block|}
name|JettyHttpEndpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|url
argument_list|,
name|JettyHttpEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|camelContext
argument_list|,
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
literal|"httpBindingRef"
argument_list|)
condition|)
block|{
comment|// use the rest binding, if not using a custom http binding
name|endpoint
operator|.
name|setHttpBinding
argument_list|(
operator|new
name|JettyRestHttpBinding
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
comment|// disable this filter as we want to use ours
name|endpoint
operator|.
name|setEnableMultipartFilter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// configure consumer properties
name|Consumer
name|consumer
init|=
name|endpoint
operator|.
name|createConsumer
argument_list|(
name|processor
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getConsumerProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getConsumerProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setProperties
argument_list|(
name|camelContext
argument_list|,
name|consumer
argument_list|,
name|config
operator|.
name|getConsumerProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the endpoint must be started before creating the producer
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer (CamelContext camelContext, String host, String verb, String basePath, String uriTemplate, String queryParameters, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Producer
name|createProducer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|basePath
parameter_list|,
name|String
name|uriTemplate
parameter_list|,
name|String
name|queryParameters
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// avoid leading slash
name|basePath
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
name|uriTemplate
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|uriTemplate
argument_list|)
expr_stmt|;
comment|// get the endpoint
name|String
name|url
init|=
literal|"jetty:"
operator|+
name|host
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|url
operator|+=
literal|"/"
operator|+
name|basePath
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|uriTemplate
argument_list|)
condition|)
block|{
name|url
operator|+=
literal|"/"
operator|+
name|uriTemplate
expr_stmt|;
block|}
name|RestConfiguration
name|config
init|=
name|configuration
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
literal|"jetty"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// build query string, and append any endpoint configuration properties
if|if
condition|(
name|config
operator|.
name|getComponent
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getComponent
argument_list|()
operator|.
name|equals
argument_list|(
literal|"jetty"
argument_list|)
condition|)
block|{
comment|// setup endpoint options
if|if
condition|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// get the endpoint
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
comment|// there are cases where we might end up here without component being created beforehand
comment|// we need to abide by the component properties specified in the parameters when creating
comment|// the component
name|RestProducerFactoryHelper
operator|.
name|setupComponentFor
argument_list|(
name|url
argument_list|,
name|camelContext
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"component"
argument_list|)
argument_list|)
expr_stmt|;
name|JettyHttpEndpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|url
argument_list|,
name|JettyHttpEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
operator|&&
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setProperties
argument_list|(
name|camelContext
argument_list|,
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
name|String
name|path
init|=
name|uriTemplate
operator|!=
literal|null
condition|?
name|uriTemplate
else|:
name|basePath
decl_stmt|;
name|endpoint
operator|.
name|setHeaderFilterStrategy
argument_list|(
operator|new
name|HttpRestHeaderFilterStrategy
argument_list|(
name|path
argument_list|,
name|queryParameters
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|endpoint
operator|.
name|createProducer
argument_list|()
return|;
block|}
DECL|method|createServletForConnector (Server server, Connector connector, List<Handler> handlers, JettyHttpEndpoint endpoint)
specifier|protected
name|CamelServlet
name|createServletForConnector
parameter_list|(
name|Server
name|server
parameter_list|,
name|Connector
name|connector
parameter_list|,
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
parameter_list|,
name|JettyHttpEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|server
argument_list|,
literal|"/"
argument_list|,
name|ServletContextHandler
operator|.
name|NO_SECURITY
operator||
name|ServletContextHandler
operator|.
name|NO_SESSIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
name|context
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setConnectorNames"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
index|[]
operator|.
expr|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|context
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|String
index|[]
block|{
name|connector
operator|.
name|getName
argument_list|()
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|addJettyHandlers
argument_list|(
name|server
argument_list|,
name|handlers
argument_list|)
expr_stmt|;
name|CamelServlet
name|camelServlet
init|=
operator|new
name|CamelContinuationServlet
argument_list|()
decl_stmt|;
name|ServletHolder
name|holder
init|=
operator|new
name|ServletHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|setServlet
argument_list|(
name|camelServlet
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setAsyncSupported
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setInitParameter
argument_list|(
name|CamelServlet
operator|.
name|ASYNC_PARAM
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|endpoint
operator|.
name|isAsync
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|holder
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
comment|// use rest enabled resolver in case we use rest
name|camelServlet
operator|.
name|setServletResolveConsumerStrategy
argument_list|(
operator|new
name|HttpRestServletResolveConsumerStrategy
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|camelServlet
return|;
block|}
DECL|method|addJettyHandlers (Server server, List<Handler> handlers)
specifier|protected
name|void
name|addJettyHandlers
parameter_list|(
name|Server
name|server
parameter_list|,
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
parameter_list|)
block|{
if|if
condition|(
name|handlers
operator|!=
literal|null
operator|&&
operator|!
name|handlers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Handler
name|handler
range|:
name|handlers
control|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|HandlerWrapper
condition|)
block|{
comment|// avoid setting a handler more than once
if|if
condition|(
operator|!
name|isHandlerInChain
argument_list|(
name|server
operator|.
name|getHandler
argument_list|()
argument_list|,
name|handler
argument_list|)
condition|)
block|{
operator|(
operator|(
name|HandlerWrapper
operator|)
name|handler
operator|)
operator|.
name|setHandler
argument_list|(
name|server
operator|.
name|getHandler
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|HandlerCollection
name|handlerCollection
init|=
operator|new
name|HandlerCollection
argument_list|()
decl_stmt|;
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|server
operator|.
name|getHandler
argument_list|()
argument_list|)
expr_stmt|;
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|handlerCollection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|isHandlerInChain (Handler current, Handler handler)
specifier|protected
name|boolean
name|isHandlerInChain
parameter_list|(
name|Handler
name|current
parameter_list|,
name|Handler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
block|{
comment|//Found a match in the chain
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|current
operator|instanceof
name|HandlerWrapper
condition|)
block|{
comment|//Inspect the next handler in the chain
return|return
name|isHandlerInChain
argument_list|(
operator|(
operator|(
name|HandlerWrapper
operator|)
name|current
operator|)
operator|.
name|getHandler
argument_list|()
argument_list|,
name|handler
argument_list|)
return|;
block|}
else|else
block|{
comment|//End of chain
return|return
literal|false
return|;
block|}
block|}
DECL|method|createServer ()
specifier|protected
name|Server
name|createServer
parameter_list|()
block|{
name|Server
name|s
init|=
literal|null
decl_stmt|;
name|ThreadPool
name|tp
init|=
name|threadPool
decl_stmt|;
name|QueuedThreadPool
name|qtp
init|=
literal|null
decl_stmt|;
comment|// configure thread pool if min/max given
if|if
condition|(
name|minThreads
operator|!=
literal|null
operator|||
name|maxThreads
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getThreadPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You cannot configure both minThreads/maxThreads and a custom threadPool on JettyHttpComponent: "
operator|+
name|this
argument_list|)
throw|;
block|}
name|qtp
operator|=
operator|new
name|QueuedThreadPool
argument_list|()
expr_stmt|;
if|if
condition|(
name|minThreads
operator|!=
literal|null
condition|)
block|{
name|qtp
operator|.
name|setMinThreads
argument_list|(
name|minThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxThreads
operator|!=
literal|null
condition|)
block|{
name|qtp
operator|.
name|setMaxThreads
argument_list|(
name|maxThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tp
operator|=
name|qtp
expr_stmt|;
block|}
if|if
condition|(
name|tp
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
name|s
operator|=
name|Server
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEnableJmx
argument_list|()
condition|)
block|{
name|enableJmx
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|Server
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setThreadPool"
argument_list|,
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|s
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qtp
operator|!=
literal|null
condition|)
block|{
comment|// let the thread names indicate they are from the server
name|qtp
operator|.
name|setName
argument_list|(
literal|"CamelJettyServer("
operator|+
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|s
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
name|qtp
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Error starting JettyServer thread pool: "
operator|+
name|qtp
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|ContextHandlerCollection
name|collection
init|=
operator|new
name|ContextHandlerCollection
argument_list|()
decl_stmt|;
name|s
operator|.
name|setHandler
argument_list|(
name|collection
argument_list|)
expr_stmt|;
comment|// setup the error handler if it set to Jetty component
if|if
condition|(
name|getErrorHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|addBean
argument_list|(
name|getErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
comment|//need an error handler that won't leak information about the exception
comment|//back to the client.
name|ErrorHandler
name|eh
init|=
operator|new
name|ErrorHandler
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|String
name|target
parameter_list|,
name|Request
name|baseRequest
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|msg
init|=
name|HttpStatus
operator|.
name|getMessage
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|RequestDispatcher
operator|.
name|ERROR_MESSAGE
argument_list|,
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|instanceof
name|Response
condition|)
block|{
comment|//need to use the deprecated method to support compiling with Jetty 8
operator|(
operator|(
name|Response
operator|)
name|response
operator|)
operator|.
name|setStatus
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|handle
argument_list|(
name|target
argument_list|,
name|baseRequest
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeErrorPage
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|,
name|boolean
name|showStacks
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeErrorPage
argument_list|(
name|request
argument_list|,
name|writer
argument_list|,
name|code
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|s
operator|.
name|addBean
argument_list|(
name|eh
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/**      * Starts {@link #mbContainer} and registers the container with itself as a managed bean      * logging an error if there is a problem starting the container.      * Does nothing if {@link #mbContainer} is {@code null}.      */
DECL|method|startMbContainer ()
specifier|protected
name|void
name|startMbContainer
parameter_list|()
block|{
if|if
condition|(
name|mbContainer
operator|!=
literal|null
operator|&&
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
comment|//JETTY8 only
try|try
block|{
name|boolean
name|b
init|=
operator|(
name|Boolean
operator|)
name|mbContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"isStarted"
argument_list|)
operator|.
name|invoke
argument_list|(
name|mbContainer
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|mbContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"start"
argument_list|)
operator|.
name|invoke
argument_list|(
name|mbContainer
argument_list|)
expr_stmt|;
comment|// Publish the container itself for consistency with
comment|// traditional embedded Jetty configurations.
name|mbContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"addBean"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|mbContainer
argument_list|,
name|mbContainer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not start Jetty MBeanContainer. Jetty JMX extensions will remain disabled."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|RestConfiguration
name|config
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRestConfiguration
argument_list|(
literal|"jetty"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// configure additional options on jetty configuration
if|if
condition|(
name|config
operator|.
name|getComponentProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getComponentProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setProperties
argument_list|(
name|this
argument_list|,
name|config
operator|.
name|getComponentProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startMbContainer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|CONNECTORS
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|connectorKey
range|:
name|CONNECTORS
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|!=
literal|null
operator|&&
name|connectorRef
operator|.
name|getRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|connectorRef
operator|.
name|server
operator|.
name|removeConnector
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Camel controls the lifecycle of these entities so remove the
comment|// registered MBeans when Camel is done with the managed objects.
name|removeServerMBean
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//removeServerMBean(connectorRef.connector);
name|CONNECTORS
operator|.
name|remove
argument_list|(
name|connectorKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|mbContainer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|//JETTY8
name|mbContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"stop"
argument_list|)
operator|.
name|invoke
argument_list|(
name|mbContainer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//JETTY9
name|mbContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"destroy"
argument_list|)
operator|.
name|invoke
argument_list|(
name|mbContainer
argument_list|)
expr_stmt|;
block|}
name|mbContainer
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|addServerMBean (Server server)
specifier|private
name|void
name|addServerMBean
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
if|if
condition|(
name|mbContainer
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Object
name|o
init|=
name|getContainer
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"addEventListener"
argument_list|,
name|Container
operator|.
name|Listener
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|mbContainer
argument_list|)
expr_stmt|;
if|if
condition|(
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
return|return;
block|}
name|mbContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"beanAdded"
argument_list|,
name|Container
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|mbContainer
argument_list|,
literal|null
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|r
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|r
argument_list|)
throw|;
block|}
block|}
DECL|method|removeServerMBean (Server server)
specifier|private
name|void
name|removeServerMBean
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
try|try
block|{
name|mbContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"beanRemoved"
argument_list|,
name|Container
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|mbContainer
argument_list|,
literal|null
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|r
parameter_list|)
block|{
try|try
block|{
name|mbContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"removeBean"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|mbContainer
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|r2
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|r
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getContainer (Object server)
specifier|private
specifier|static
name|Container
name|getContainer
parameter_list|(
name|Object
name|server
parameter_list|)
block|{
if|if
condition|(
name|server
operator|instanceof
name|Container
condition|)
block|{
return|return
operator|(
name|Container
operator|)
name|server
return|;
block|}
try|try
block|{
return|return
operator|(
name|Container
operator|)
name|server
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getContainer"
argument_list|)
operator|.
name|invoke
argument_list|(
name|server
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|t
parameter_list|)
block|{
throw|throw
name|t
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

