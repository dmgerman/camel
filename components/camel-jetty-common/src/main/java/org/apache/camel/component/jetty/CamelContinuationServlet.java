begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|CamelServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpCommonEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|continuation
operator|.
name|Continuation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|continuation
operator|.
name|ContinuationSupport
import|;
end_import

begin_comment
comment|/**  * Servlet which leverage<a href="http://wiki.eclipse.org/Jetty/Feature/Continuations">Jetty Continuations</a>.  */
end_comment

begin_class
DECL|class|CamelContinuationServlet
specifier|public
class|class
name|CamelContinuationServlet
extends|extends
name|CamelServlet
block|{
DECL|field|EXCHANGE_ATTRIBUTE_NAME
specifier|static
specifier|final
name|String
name|EXCHANGE_ATTRIBUTE_NAME
init|=
literal|"CamelExchange"
decl_stmt|;
DECL|field|EXCHANGE_ATTRIBUTE_ID
specifier|static
specifier|final
name|String
name|EXCHANGE_ATTRIBUTE_ID
init|=
literal|"CamelExchangeId"
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|// we must remember expired exchanges as Jetty will initiate a new continuation when we send
comment|// back the error when timeout occurred, and thus in the async callback we cannot check the
comment|// continuation if it was previously expired. So that's why we have our own map for that
DECL|field|expiredExchanges
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expiredExchanges
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|doService (final HttpServletRequest request, final HttpServletResponse response)
specifier|protected
name|void
name|doService
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// is there a consumer registered for the request.
name|HttpConsumer
name|consumer
init|=
name|getServletResolveConsumerStrategy
argument_list|()
operator|.
name|resolve
argument_list|(
name|request
argument_list|,
name|getConsumers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumer
operator|==
literal|null
condition|)
block|{
comment|// okay we cannot process this requires so return either 404 or 405.
comment|// to know if its 405 then we need to check if any other HTTP method would have a consumer for the "same" request
name|boolean
name|hasAnyMethod
init|=
name|METHODS
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|m
lambda|->
name|getServletResolveConsumerStrategy
argument_list|()
operator|.
name|isHttpMethodAllowed
argument_list|(
name|request
argument_list|,
name|m
argument_list|,
name|getConsumers
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasAnyMethod
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No consumer to service request {} as method {} is not allowed"
argument_list|,
name|request
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No consumer to service request {} as resource is not found"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// figure out if continuation is enabled and what timeout to use
name|boolean
name|useContinuation
init|=
literal|false
decl_stmt|;
name|Long
name|continuationTimeout
init|=
literal|null
decl_stmt|;
name|HttpCommonEndpoint
name|endpoint
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|JettyHttpEndpoint
condition|)
block|{
name|JettyHttpEndpoint
name|jettyEndpoint
init|=
operator|(
name|JettyHttpEndpoint
operator|)
name|endpoint
decl_stmt|;
name|Boolean
name|epUseContinuation
init|=
name|jettyEndpoint
operator|.
name|getUseContinuation
argument_list|()
decl_stmt|;
name|Long
name|epContinuationTimeout
init|=
name|jettyEndpoint
operator|.
name|getContinuationTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|epUseContinuation
operator|!=
literal|null
condition|)
block|{
name|useContinuation
operator|=
name|epUseContinuation
expr_stmt|;
block|}
else|else
block|{
name|useContinuation
operator|=
name|jettyEndpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|isUseContinuation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|epContinuationTimeout
operator|!=
literal|null
condition|)
block|{
name|continuationTimeout
operator|=
name|epContinuationTimeout
expr_stmt|;
block|}
else|else
block|{
name|continuationTimeout
operator|=
name|jettyEndpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getContinuationTimeout
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useContinuation
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Start request with continuation timeout of {}"
argument_list|,
name|continuationTimeout
operator|!=
literal|null
condition|?
name|continuationTimeout
else|:
literal|"jetty default"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Usage of continuation is disabled, either by component or endpoint configuration, fallback to normal servlet processing instead"
argument_list|)
expr_stmt|;
name|super
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if its an OPTIONS request then return which method is allowed
if|if
condition|(
literal|"OPTIONS"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|&&
operator|!
name|consumer
operator|.
name|isOptionsEnabled
argument_list|()
condition|)
block|{
name|String
name|allowedMethods
init|=
name|METHODS
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|getServletResolveConsumerStrategy
argument_list|()
operator|.
name|isHttpMethodAllowed
argument_list|(
name|request
argument_list|,
name|m
argument_list|,
name|getConsumers
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedMethods
operator|==
literal|null
operator|&&
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getHttpMethodRestrict
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|allowedMethods
operator|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getHttpMethodRestrict
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|allowedMethods
operator|==
literal|null
condition|)
block|{
comment|// allow them all
name|allowedMethods
operator|=
literal|"GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allowedMethods
operator|.
name|contains
argument_list|(
literal|"OPTIONS"
argument_list|)
condition|)
block|{
name|allowedMethods
operator|=
name|allowedMethods
operator|+
literal|",OPTIONS"
expr_stmt|;
block|}
name|response
operator|.
name|addHeader
argument_list|(
literal|"Allow"
argument_list|,
name|allowedMethods
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getHttpMethodRestrict
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterable
argument_list|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getHttpMethodRestrict
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|method
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
literal|"TRACE"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|&&
operator|!
name|consumer
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// we do not support java serialized objects unless explicit enabled
name|String
name|contentType
init|=
name|request
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpConstants
operator|.
name|CONTENT_TYPE_JAVA_SERIALIZED_OBJECT
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
operator|&&
operator|!
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getComponent
argument_list|()
operator|.
name|isAllowJavaSerializedObject
argument_list|()
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNSUPPORTED_MEDIA_TYPE
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Exchange
name|result
init|=
operator|(
name|Exchange
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|EXCHANGE_ATTRIBUTE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|// no asynchronous result so leverage continuation
specifier|final
name|Continuation
name|continuation
init|=
name|ContinuationSupport
operator|.
name|getContinuation
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|continuation
operator|.
name|isInitial
argument_list|()
operator|&&
name|continuationTimeout
operator|!=
literal|null
condition|)
block|{
comment|// set timeout on initial
name|continuation
operator|.
name|setTimeout
argument_list|(
name|continuationTimeout
argument_list|)
expr_stmt|;
block|}
comment|// are we suspended and a request is dispatched initially?
if|if
condition|(
name|consumer
operator|.
name|isSuspended
argument_list|()
operator|&&
name|continuation
operator|.
name|isInitial
argument_list|()
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_SERVICE_UNAVAILABLE
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|continuation
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|continuation
operator|.
name|getAttribute
argument_list|(
name|EXCHANGE_ATTRIBUTE_ID
argument_list|)
decl_stmt|;
comment|// remember this id as expired
name|expiredExchanges
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Continuation expired of exchangeId: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|getBinding
argument_list|()
operator|.
name|doWriteExceptionResponse
argument_list|(
operator|new
name|TimeoutException
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// a new request so create an exchange
specifier|final
name|Exchange
name|exchange
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|isBridgeEndpoint
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|SKIP_GZIP_ENCODING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|SKIP_WWW_FORM_URLENCODED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|isDisableStreamCache
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|DISABLE_HTTP_STREAM_CACHE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|HttpHelper
operator|.
name|setCharsetFromContentType
argument_list|(
name|request
operator|.
name|getContentType
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
operator|new
name|HttpMessage
argument_list|(
name|exchange
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
comment|// set context path as header
name|String
name|contextPath
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelServletContextPath"
argument_list|,
name|contextPath
argument_list|)
expr_stmt|;
name|updateHttpPath
argument_list|(
name|exchange
argument_list|,
name|contextPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Suspending continuation of exchangeId: {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|continuation
operator|.
name|setAttribute
argument_list|(
name|EXCHANGE_ATTRIBUTE_ID
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// we want to handle the UoW
try|try
block|{
name|consumer
operator|.
name|createUoW
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error processing request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// must suspend before we process the exchange
name|continuation
operator|.
name|suspend
argument_list|()
expr_stmt|;
name|ClassLoader
name|oldTccl
init|=
name|overrideTccl
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Processing request for exchangeId: {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// use the asynchronous API to process the exchange
name|consumer
operator|.
name|getAsyncProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
comment|// check if the exchange id is already expired
name|boolean
name|expired
init|=
name|expiredExchanges
operator|.
name|remove
argument_list|(
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|expired
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Resuming continuation of exchangeId: {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// resume processing after both, sync and async callbacks
name|continuation
operator|.
name|setAttribute
argument_list|(
name|EXCHANGE_ATTRIBUTE_NAME
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|continuation
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot resume expired continuation of exchangeId: {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldTccl
operator|!=
literal|null
condition|)
block|{
name|restoreTccl
argument_list|(
name|exchange
argument_list|,
name|oldTccl
argument_list|)
expr_stmt|;
block|}
comment|// return to let Jetty continuation to work as it will resubmit and invoke the service
comment|// method again when its resumed
return|return;
block|}
try|try
block|{
comment|// now lets output to the response
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Resumed continuation and writing response for exchangeId: {}"
argument_list|,
name|result
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Integer
name|bs
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getResponseBufferSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Using response buffer size: {}"
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|response
operator|.
name|setBufferSize
argument_list|(
name|bs
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|getBinding
argument_list|()
operator|.
name|writeResponse
argument_list|(
name|result
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error processing request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error processing request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|consumer
operator|.
name|doneUoW
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateHttpPath (Exchange exchange, String contextPath)
specifier|private
name|void
name|updateHttpPath
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|contextPath
parameter_list|)
block|{
name|String
name|httpPath
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|)
decl_stmt|;
comment|// encode context path in case it contains unsafe chars, because HTTP_PATH isn't decoded at this moment
name|String
name|encodedContextPath
init|=
name|UnsafeUriCharactersEncoder
operator|.
name|encodeHttpURI
argument_list|(
name|contextPath
argument_list|)
decl_stmt|;
comment|// here we just remove the CamelServletContextPath part from the HTTP_PATH
if|if
condition|(
name|contextPath
operator|!=
literal|null
operator|&&
name|httpPath
operator|.
name|startsWith
argument_list|(
name|encodedContextPath
argument_list|)
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
name|httpPath
operator|.
name|substring
argument_list|(
name|encodedContextPath
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|expiredExchanges
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

