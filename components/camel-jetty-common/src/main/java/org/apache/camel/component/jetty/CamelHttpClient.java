begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClientTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_class
DECL|class|CamelHttpClient
specifier|public
specifier|abstract
class|class
name|CamelHttpClient
extends|extends
name|HttpClient
block|{
DECL|field|supportRedirect
specifier|private
name|boolean
name|supportRedirect
decl_stmt|;
DECL|method|CamelHttpClient (SslContextFactory sslContextFactory)
specifier|public
name|CamelHttpClient
parameter_list|(
name|SslContextFactory
name|sslContextFactory
parameter_list|)
block|{
name|super
argument_list|(
name|sslContextFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|CamelHttpClient (HttpClientTransport transport, SslContextFactory sslContextFactory)
specifier|public
name|CamelHttpClient
parameter_list|(
name|HttpClientTransport
name|transport
parameter_list|,
name|SslContextFactory
name|sslContextFactory
parameter_list|)
block|{
name|super
argument_list|(
name|transport
argument_list|,
name|sslContextFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|hasThreadPool
argument_list|()
condition|)
block|{
comment|// if there is no thread pool then create a default thread pool using daemon threads with default size (200)
name|QueuedThreadPool
name|qtp
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
name|qtp
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// let the thread names indicate they are from the client
name|qtp
operator|.
name|setName
argument_list|(
literal|"CamelJettyClient("
operator|+
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|this
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|setThreadPoolOrExecutor
argument_list|(
name|qtp
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
DECL|method|hasThreadPool ()
specifier|protected
specifier|abstract
name|boolean
name|hasThreadPool
parameter_list|()
function_decl|;
DECL|method|setThreadPoolOrExecutor (Executor pool)
specifier|protected
specifier|abstract
name|void
name|setThreadPoolOrExecutor
parameter_list|(
name|Executor
name|pool
parameter_list|)
function_decl|;
DECL|method|setProxy (String host, int port)
specifier|public
specifier|abstract
name|void
name|setProxy
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
DECL|method|isSupportRedirect ()
specifier|public
name|boolean
name|isSupportRedirect
parameter_list|()
block|{
return|return
name|supportRedirect
return|;
block|}
DECL|method|setSupportRedirect (boolean supportRedirect)
specifier|public
name|void
name|setSupportRedirect
parameter_list|(
name|boolean
name|supportRedirect
parameter_list|)
block|{
name|this
operator|.
name|supportRedirect
operator|=
name|supportRedirect
expr_stmt|;
block|}
DECL|method|getProxyHost ()
specifier|public
specifier|abstract
name|String
name|getProxyHost
parameter_list|()
function_decl|;
DECL|method|getProxyPort ()
specifier|public
specifier|abstract
name|int
name|getProxyPort
parameter_list|()
function_decl|;
block|}
end_class

end_unit

