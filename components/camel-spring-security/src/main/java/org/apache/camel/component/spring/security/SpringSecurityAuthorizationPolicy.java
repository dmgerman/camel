begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.security
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|security
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelAuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|security
operator|.
name|converter
operator|.
name|AuthenticationConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|security
operator|.
name|converter
operator|.
name|DefaultAuthenticationConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DelegateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationEventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationEventPublisherAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|AccessDecisionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|AuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|ConfigAttributeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|SpringSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|context
operator|.
name|SecurityContextHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|event
operator|.
name|authorization
operator|.
name|AuthorizationFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|event
operator|.
name|authorization
operator|.
name|AuthorizedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|SpringSecurityAuthorizationPolicy
specifier|public
class|class
name|SpringSecurityAuthorizationPolicy
implements|implements
name|AuthorizationPolicy
implements|,
name|InitializingBean
implements|,
name|ApplicationEventPublisherAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SpringSecurityAuthorizationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|accessDecisionManager
specifier|private
name|AccessDecisionManager
name|accessDecisionManager
decl_stmt|;
DECL|field|authenticationManager
specifier|private
name|AuthenticationManager
name|authenticationManager
decl_stmt|;
DECL|field|authenticationConverter
specifier|private
name|AuthenticationConverter
name|authenticationConverter
decl_stmt|;
DECL|field|eventPublisher
specifier|private
name|ApplicationEventPublisher
name|eventPublisher
decl_stmt|;
DECL|field|accessPolicy
specifier|private
name|SpringSecurityAccessPolicy
name|accessPolicy
decl_stmt|;
DECL|field|alwaysReauthenticate
specifier|private
name|boolean
name|alwaysReauthenticate
decl_stmt|;
DECL|field|useThreadSecurityContext
specifier|private
name|boolean
name|useThreadSecurityContext
init|=
literal|true
decl_stmt|;
DECL|method|wrap (RouteContext routeContext, Processor processor)
specifier|public
name|Processor
name|wrap
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
comment|// wrap the processor with authorizeDelegateProcessor
return|return
operator|new
name|AuthorizeDelegateProcess
argument_list|(
name|processor
argument_list|)
return|;
block|}
DECL|method|beforeProcess (Exchange exchange)
specifier|protected
name|void
name|beforeProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|ConfigAttributeDefinition
name|attributes
init|=
name|accessPolicy
operator|.
name|getConfigAttributeDefinition
argument_list|()
decl_stmt|;
try|try
block|{
name|Authentication
name|authToken
init|=
name|getAuthentication
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|authToken
operator|==
literal|null
condition|)
block|{
name|CamelAuthorizationException
name|authorizationException
init|=
operator|new
name|CamelAuthorizationException
argument_list|(
literal|"Cannot find the Authentication instance."
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
throw|throw
name|authorizationException
throw|;
block|}
name|Authentication
name|authenticated
init|=
name|authenticateIfRequired
argument_list|(
name|authToken
argument_list|)
decl_stmt|;
comment|// Attempt authorization with exchange
try|try
block|{
name|this
operator|.
name|accessDecisionManager
operator|.
name|decide
argument_list|(
name|authenticated
argument_list|,
name|exchange
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|accessDeniedException
parameter_list|)
block|{
name|AuthorizationFailureEvent
name|event
init|=
operator|new
name|AuthorizationFailureEvent
argument_list|(
name|exchange
argument_list|,
name|attributes
argument_list|,
name|authenticated
argument_list|,
name|accessDeniedException
argument_list|)
decl_stmt|;
name|publishEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
throw|throw
name|accessDeniedException
throw|;
block|}
name|publishEvent
argument_list|(
operator|new
name|AuthorizedEvent
argument_list|(
name|exchange
argument_list|,
name|attributes
argument_list|,
name|authenticated
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SpringSecurityException
name|exception
parameter_list|)
block|{
name|CamelAuthorizationException
name|authorizationException
init|=
operator|new
name|CamelAuthorizationException
argument_list|(
literal|"Cannot access the processor which has been protected."
argument_list|,
name|exchange
argument_list|,
name|exception
argument_list|)
decl_stmt|;
throw|throw
name|authorizationException
throw|;
block|}
block|}
DECL|method|getAuthentication (Message message)
specifier|protected
name|Authentication
name|getAuthentication
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Subject
name|subject
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|AUTHENTICATION
argument_list|,
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Authentication
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|getAuthenticationConverter
argument_list|()
operator|.
name|toAuthentication
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
comment|// try to get it from thread context as a fallback
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|useThreadSecurityContext
condition|)
block|{
name|answer
operator|=
name|SecurityContextHolder
operator|.
name|getContext
argument_list|()
operator|.
name|getAuthentication
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get the authentication from SecurityContextHolder"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|class|AuthorizeDelegateProcess
specifier|private
class|class
name|AuthorizeDelegateProcess
extends|extends
name|DelegateProcessor
block|{
DECL|method|AuthorizeDelegateProcess (Processor processor)
name|AuthorizeDelegateProcess
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|beforeProcess
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|processNext
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|afterPropertiesSet ()
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|authenticationManager
argument_list|,
literal|"An AuthenticationManager is required"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|accessDecisionManager
argument_list|,
literal|"An AccessDecisionManager is required"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|accessPolicy
argument_list|,
literal|"The accessPolicy is required"
argument_list|)
expr_stmt|;
block|}
DECL|method|authenticateIfRequired (Authentication authentication)
specifier|private
name|Authentication
name|authenticateIfRequired
parameter_list|(
name|Authentication
name|authentication
parameter_list|)
block|{
if|if
condition|(
name|authentication
operator|.
name|isAuthenticated
argument_list|()
operator|&&
operator|!
name|alwaysReauthenticate
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Previously Authenticated: "
operator|+
name|authentication
argument_list|)
expr_stmt|;
block|}
return|return
name|authentication
return|;
block|}
name|authentication
operator|=
name|authenticationManager
operator|.
name|authenticate
argument_list|(
name|authentication
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The authenitcation is "
operator|+
name|authentication
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully Authenticated: "
operator|+
name|authentication
argument_list|)
expr_stmt|;
block|}
return|return
name|authentication
return|;
block|}
DECL|method|publishEvent (ApplicationEvent event)
specifier|private
name|void
name|publishEvent
parameter_list|(
name|ApplicationEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|eventPublisher
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|eventPublisher
operator|.
name|publishEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAuthenticationConverter ()
specifier|public
name|AuthenticationConverter
name|getAuthenticationConverter
parameter_list|()
block|{
if|if
condition|(
name|authenticationConverter
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|authenticationConverter
operator|!=
literal|null
condition|)
block|{
return|return
name|authenticationConverter
return|;
block|}
else|else
block|{
name|authenticationConverter
operator|=
operator|new
name|DefaultAuthenticationConverter
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|authenticationConverter
return|;
block|}
DECL|method|setAuthenticationConverter (AuthenticationConverter converter)
specifier|public
name|void
name|setAuthenticationConverter
parameter_list|(
name|AuthenticationConverter
name|converter
parameter_list|)
block|{
name|this
operator|.
name|authenticationConverter
operator|=
name|converter
expr_stmt|;
block|}
DECL|method|getAccessDecisionManager ()
specifier|public
name|AccessDecisionManager
name|getAccessDecisionManager
parameter_list|()
block|{
return|return
name|accessDecisionManager
return|;
block|}
DECL|method|getAuthenticationManager ()
specifier|public
name|AuthenticationManager
name|getAuthenticationManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|authenticationManager
return|;
block|}
DECL|method|setApplicationEventPublisher (ApplicationEventPublisher applicationEventPublisher)
specifier|public
name|void
name|setApplicationEventPublisher
parameter_list|(
name|ApplicationEventPublisher
name|applicationEventPublisher
parameter_list|)
block|{
name|this
operator|.
name|eventPublisher
operator|=
name|applicationEventPublisher
expr_stmt|;
block|}
DECL|method|setSpringSecurityAccessPolicy (SpringSecurityAccessPolicy policy)
specifier|public
name|void
name|setSpringSecurityAccessPolicy
parameter_list|(
name|SpringSecurityAccessPolicy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|accessPolicy
operator|=
name|policy
expr_stmt|;
block|}
DECL|method|getSpringSecurityAccessPolicy ()
specifier|public
name|SpringSecurityAccessPolicy
name|getSpringSecurityAccessPolicy
parameter_list|()
block|{
return|return
name|accessPolicy
return|;
block|}
DECL|method|isAlwaysReauthenticate ()
specifier|public
name|boolean
name|isAlwaysReauthenticate
parameter_list|()
block|{
return|return
name|alwaysReauthenticate
return|;
block|}
DECL|method|setAlwaysReauthenticate (boolean alwaysReauthenticate)
specifier|public
name|void
name|setAlwaysReauthenticate
parameter_list|(
name|boolean
name|alwaysReauthenticate
parameter_list|)
block|{
name|this
operator|.
name|alwaysReauthenticate
operator|=
name|alwaysReauthenticate
expr_stmt|;
block|}
DECL|method|isUseThreadSecurityContext ()
specifier|public
name|boolean
name|isUseThreadSecurityContext
parameter_list|()
block|{
return|return
name|useThreadSecurityContext
return|;
block|}
DECL|method|setUseThreadSecurityContext (boolean useThreadSecurityContext)
specifier|public
name|void
name|setUseThreadSecurityContext
parameter_list|(
name|boolean
name|useThreadSecurityContext
parameter_list|)
block|{
name|this
operator|.
name|useThreadSecurityContext
operator|=
name|useThreadSecurityContext
expr_stmt|;
block|}
DECL|method|setAuthenticationManager (AuthenticationManager newManager)
specifier|public
name|void
name|setAuthenticationManager
parameter_list|(
name|AuthenticationManager
name|newManager
parameter_list|)
block|{
name|this
operator|.
name|authenticationManager
operator|=
name|newManager
expr_stmt|;
block|}
DECL|method|setAccessDecisionManager (AccessDecisionManager accessDecisionManager)
specifier|public
name|void
name|setAccessDecisionManager
parameter_list|(
name|AccessDecisionManager
name|accessDecisionManager
parameter_list|)
block|{
name|this
operator|.
name|accessDecisionManager
operator|=
name|accessDecisionManager
expr_stmt|;
block|}
block|}
end_class

end_unit

