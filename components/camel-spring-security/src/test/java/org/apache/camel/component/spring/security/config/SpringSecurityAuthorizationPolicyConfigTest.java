begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.security.config
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|security
operator|.
name|config
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|security
operator|.
name|SpringSecurityAuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
DECL|class|SpringSecurityAuthorizationPolicyConfigTest
specifier|public
class|class
name|SpringSecurityAuthorizationPolicyConfigTest
extends|extends
name|Assert
block|{
DECL|field|context
specifier|private
name|AbstractXmlApplicationContext
name|context
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|context
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/org/apache/camel/component/spring/security/config/SpringSecurityAuthorizationPolicy.xml"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuthorizationPolicy ()
specifier|public
name|void
name|testAuthorizationPolicy
parameter_list|()
block|{
name|SpringSecurityAuthorizationPolicy
name|adminPolicy
init|=
name|context
operator|.
name|getBean
argument_list|(
literal|"admin"
argument_list|,
name|SpringSecurityAuthorizationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should get admin policy"
argument_list|,
name|adminPolicy
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"The accessDecisionManager should not be null"
argument_list|,
name|adminPolicy
operator|.
name|getAccessDecisionManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"The authenticationManager should not be null"
argument_list|,
name|adminPolicy
operator|.
name|getAuthenticationManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"The springSecurityAccessPolicy should not be null"
argument_list|,
name|adminPolicy
operator|.
name|getSpringSecurityAccessPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|SpringSecurityAuthorizationPolicy
name|userPolicy
init|=
name|context
operator|.
name|getBean
argument_list|(
literal|"user"
argument_list|,
name|SpringSecurityAuthorizationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should get user policy"
argument_list|,
name|userPolicy
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"The accessDecisionManager should not be null"
argument_list|,
name|userPolicy
operator|.
name|getAccessDecisionManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"The authenticationManager should not be null"
argument_list|,
name|userPolicy
operator|.
name|getAuthenticationManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"The springSecurityAccessPolicy should not be null"
argument_list|,
name|userPolicy
operator|.
name|getSpringSecurityAccessPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user policy and admin policy should have same accessDecisionManager"
argument_list|,
name|adminPolicy
operator|.
name|getAccessDecisionManager
argument_list|()
argument_list|,
name|userPolicy
operator|.
name|getAccessDecisionManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user policy and admin policy should have same authenticationManager"
argument_list|,
name|adminPolicy
operator|.
name|getAuthenticationManager
argument_list|()
argument_list|,
name|userPolicy
operator|.
name|getAuthenticationManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

