begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.groovy.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|groovy
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|GString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|ObjectConverter
import|;
end_import

begin_comment
comment|/**  * TypeConverter for Groovy GStrings.  */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|TypeConverter
specifier|public
specifier|final
class|class
name|TypeConverter
block|{
DECL|method|TypeConverter ()
specifier|private
name|TypeConverter
parameter_list|()
block|{      }
annotation|@
name|Converter
DECL|method|toInputStream (GString value, Exchange exchange)
specifier|public
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|GString
name|value
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|IOConverter
operator|.
name|toInputStream
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toByteArray (GString value, Exchange exchange)
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|GString
name|value
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|IOConverter
operator|.
name|toByteArray
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toReader (GString value)
specifier|public
specifier|static
name|StringReader
name|toReader
parameter_list|(
name|GString
name|value
parameter_list|)
block|{
return|return
name|IOConverter
operator|.
name|toReader
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toChar (GString value)
specifier|public
specifier|static
name|char
name|toChar
parameter_list|(
name|GString
name|value
parameter_list|)
block|{
return|return
name|ObjectConverter
operator|.
name|toChar
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toInteger (GString value)
specifier|public
specifier|static
name|Integer
name|toInteger
parameter_list|(
name|GString
name|value
parameter_list|)
block|{
return|return
name|ObjectConverter
operator|.
name|toInteger
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toLong (GString value)
specifier|public
specifier|static
name|Long
name|toLong
parameter_list|(
name|GString
name|value
parameter_list|)
block|{
return|return
name|ObjectConverter
operator|.
name|toLong
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toFloat (GString value)
specifier|public
specifier|static
name|Float
name|toFloat
parameter_list|(
name|GString
name|value
parameter_list|)
block|{
return|return
name|ObjectConverter
operator|.
name|toFloat
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toDouble (GString value)
specifier|public
specifier|static
name|Double
name|toDouble
parameter_list|(
name|GString
name|value
parameter_list|)
block|{
return|return
name|ObjectConverter
operator|.
name|toDouble
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toBoolean (GString value)
specifier|public
specifier|static
name|Boolean
name|toBoolean
parameter_list|(
name|GString
name|value
parameter_list|)
block|{
return|return
name|ObjectConverter
operator|.
name|toBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

