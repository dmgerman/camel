begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.groovy.extend
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|groovy
operator|.
name|extend
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|Closure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DataFormatClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|groovy
operator|.
name|dataformat
operator|.
name|XmlParserDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|groovy
operator|.
name|dataformat
operator|.
name|XmlSlurperDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|AggregateDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|CatchDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ChoiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DelayDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DynamicRouterDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FilterDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|IdempotentConsumerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptSendToEndpointDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|LoopDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|MulticastDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnCompletionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RecipientListDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ResequenceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutingSlipDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SplitDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ThrottleDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TryDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|WireTapDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExpressionSupport
import|;
end_import

begin_comment
comment|/**  * Extension class containing static methods that mainly allow to use Closures  * instead of Predicates, Expressions, Processors, or AggregationStrategies  */
end_comment

begin_class
DECL|class|CamelGroovyMethods
specifier|public
specifier|final
class|class
name|CamelGroovyMethods
block|{
DECL|method|CamelGroovyMethods ()
specifier|private
name|CamelGroovyMethods
parameter_list|()
block|{
comment|// Utility Class
block|}
comment|// Extension Methods that use Closures to encapsulate logic
DECL|method|process (ProcessorDefinition<?> self, Closure<?> processorLogic)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|process
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|processorLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|process
argument_list|(
name|toProcessor
argument_list|(
name|processorLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newExchange (WireTapDefinition<?> self, Closure<?> processorLogic)
specifier|public
name|WireTapDefinition
argument_list|<
name|?
argument_list|>
name|newExchange
parameter_list|(
name|WireTapDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|processorLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|newExchange
argument_list|(
name|toProcessor
argument_list|(
name|processorLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onRedelivery (OnExceptionDefinition self, Closure<Exchange> processorLogic)
specifier|public
specifier|static
name|OnExceptionDefinition
name|onRedelivery
parameter_list|(
name|OnExceptionDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|processorLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|onRedelivery
argument_list|(
name|toProcessor
argument_list|(
name|processorLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|enrich (ProcessorDefinition<?> self, String resourceUri, Closure<Exchange> aggregationLogic)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|enrich
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|String
name|resourceUri
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|aggregationLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|enrich
argument_list|(
name|resourceUri
argument_list|,
name|toAggregationStrategy
argument_list|(
name|aggregationLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|pollEnrich (ProcessorDefinition<?> self, String resourceUri, Closure<Exchange> aggregationLogic)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|pollEnrich
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|String
name|resourceUri
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|aggregationLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
name|toAggregationStrategy
argument_list|(
name|aggregationLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|pollEnrich (ProcessorDefinition<?> self, String resourceUri, long timeout, Closure<Exchange> aggregationLogic)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|pollEnrich
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|aggregationLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
name|timeout
argument_list|,
name|toAggregationStrategy
argument_list|(
name|aggregationLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|aggregationStrategy (MulticastDefinition self, Closure<Exchange> aggregationLogic)
specifier|public
specifier|static
name|MulticastDefinition
name|aggregationStrategy
parameter_list|(
name|MulticastDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|aggregationLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|aggregationStrategy
argument_list|(
name|toAggregationStrategy
argument_list|(
name|aggregationLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|aggregationStrategy (RecipientListDefinition<?> self, Closure<Exchange> aggregationLogic)
specifier|public
specifier|static
name|RecipientListDefinition
argument_list|<
name|?
argument_list|>
name|aggregationStrategy
parameter_list|(
name|RecipientListDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|aggregationLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|aggregationStrategy
argument_list|(
name|toAggregationStrategy
argument_list|(
name|aggregationLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|aggregationStrategy (SplitDefinition self, Closure<Exchange> aggregationLogic)
specifier|public
specifier|static
name|SplitDefinition
name|aggregationStrategy
parameter_list|(
name|SplitDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|aggregationLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|aggregationStrategy
argument_list|(
name|toAggregationStrategy
argument_list|(
name|aggregationLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|aggregationStrategy (AggregateDefinition self, Closure<Exchange> aggregationLogic)
specifier|public
specifier|static
name|AggregateDefinition
name|aggregationStrategy
parameter_list|(
name|AggregateDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|aggregationLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|aggregationStrategy
argument_list|(
name|toAggregationStrategy
argument_list|(
name|aggregationLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onPrepare (MulticastDefinition self, Closure<Exchange> processorLogic)
specifier|public
specifier|static
name|MulticastDefinition
name|onPrepare
parameter_list|(
name|MulticastDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|processorLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|onPrepare
argument_list|(
name|toProcessor
argument_list|(
name|processorLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onPrepare (RecipientListDefinition<?> self, Closure<Exchange> processorLogic)
specifier|public
specifier|static
name|RecipientListDefinition
argument_list|<
name|?
argument_list|>
name|onPrepare
parameter_list|(
name|RecipientListDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|processorLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|onPrepare
argument_list|(
name|toProcessor
argument_list|(
name|processorLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onPrepare (SplitDefinition self, Closure<Exchange> processorLogic)
specifier|public
specifier|static
name|SplitDefinition
name|onPrepare
parameter_list|(
name|SplitDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|processorLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|onPrepare
argument_list|(
name|toProcessor
argument_list|(
name|processorLogic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onPrepare (WireTapDefinition<?> self, Closure<Exchange> processorLogic)
specifier|public
specifier|static
name|WireTapDefinition
argument_list|<
name|?
argument_list|>
name|onPrepare
parameter_list|(
name|WireTapDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|processorLogic
parameter_list|)
block|{
return|return
name|self
operator|.
name|onPrepare
argument_list|(
name|toProcessor
argument_list|(
name|processorLogic
argument_list|)
argument_list|)
return|;
block|}
comment|// Extension Methods that use Closures as expressions
DECL|method|script (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|script
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|script
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|transform (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|transform
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|transform
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setProperty (ProcessorDefinition<?> self, String name, Closure<?> expression)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|setProperty
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|String
name|name
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setHeader (ProcessorDefinition<?> self, String name, Closure<?> expression)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|setHeader
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|String
name|name
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setBody (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|setBody
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|setBody
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setFaultBody (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|setFaultBody
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|setFaultBody
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|sort (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|sort
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|sort
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|idempotentConsumer (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|IdempotentConsumerDefinition
name|idempotentConsumer
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|idempotentConsumer
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|idempotentConsumer (ProcessorDefinition<?> self, IdempotentRepository<?> rep, Closure<?> expression)
specifier|public
specifier|static
name|IdempotentConsumerDefinition
name|idempotentConsumer
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|IdempotentRepository
argument_list|<
name|?
argument_list|>
name|rep
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|idempotentConsumer
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|,
name|rep
argument_list|)
return|;
block|}
DECL|method|recipientList (ProcessorDefinition<?> self, Closure<?> recipients)
specifier|public
specifier|static
name|RecipientListDefinition
argument_list|<
name|?
argument_list|>
name|recipientList
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|recipients
parameter_list|)
block|{
return|return
name|self
operator|.
name|recipientList
argument_list|(
name|toExpression
argument_list|(
name|recipients
argument_list|)
argument_list|)
return|;
block|}
DECL|method|recipientList (ProcessorDefinition<?> self, String delimiter, Closure<?> recipients)
specifier|public
specifier|static
name|RecipientListDefinition
argument_list|<
name|?
argument_list|>
name|recipientList
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|recipients
parameter_list|)
block|{
return|return
name|self
operator|.
name|recipientList
argument_list|(
name|toExpression
argument_list|(
name|recipients
argument_list|)
argument_list|,
name|delimiter
argument_list|)
return|;
block|}
DECL|method|routingSlip (ProcessorDefinition<?> self, Closure<?> recipients)
specifier|public
specifier|static
name|RoutingSlipDefinition
argument_list|<
name|?
argument_list|>
name|routingSlip
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|recipients
parameter_list|)
block|{
return|return
name|self
operator|.
name|routingSlip
argument_list|(
name|toExpression
argument_list|(
name|recipients
argument_list|)
argument_list|)
return|;
block|}
DECL|method|routingSlip (ProcessorDefinition<?> self, String delimiter, Closure<?> recipients)
specifier|public
specifier|static
name|RoutingSlipDefinition
argument_list|<
name|?
argument_list|>
name|routingSlip
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|recipients
parameter_list|)
block|{
return|return
name|self
operator|.
name|routingSlip
argument_list|(
name|toExpression
argument_list|(
name|recipients
argument_list|)
argument_list|,
name|delimiter
argument_list|)
return|;
block|}
DECL|method|dynamicRouter (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|DynamicRouterDefinition
argument_list|<
name|?
argument_list|>
name|dynamicRouter
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|dynamicRouter
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|split (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|SplitDefinition
name|split
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|split
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|resequence (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|ResequenceDefinition
name|resequence
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|resequence
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|aggregate (ProcessorDefinition<?> self, Closure<?> correlationExpression)
specifier|public
specifier|static
name|AggregateDefinition
name|aggregate
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|correlationExpression
parameter_list|)
block|{
return|return
name|self
operator|.
name|aggregate
argument_list|(
name|toExpression
argument_list|(
name|correlationExpression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|completionSize (AggregateDefinition self, Closure<?> expression)
specifier|public
specifier|static
name|AggregateDefinition
name|completionSize
parameter_list|(
name|AggregateDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|completionSize
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|completionTimeout (AggregateDefinition self, Closure<?> expression)
specifier|public
specifier|static
name|AggregateDefinition
name|completionTimeout
parameter_list|(
name|AggregateDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|completionTimeout
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|delay (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|DelayDefinition
name|delay
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|delay
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|throttle (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|ThrottleDefinition
name|throttle
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|throttle
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|loop (ProcessorDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|LoopDefinition
name|loop
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|loop
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newExchangeBody (WireTapDefinition<?> self, Closure<?> expression)
specifier|public
specifier|static
name|WireTapDefinition
argument_list|<
name|?
argument_list|>
name|newExchangeBody
parameter_list|(
name|WireTapDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|newExchangeBody
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newExchangeHeader (WireTapDefinition<?> self, String header, Closure<?> expression)
specifier|public
specifier|static
name|WireTapDefinition
argument_list|<
name|?
argument_list|>
name|newExchangeHeader
parameter_list|(
name|WireTapDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|String
name|header
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|newExchangeHeader
argument_list|(
name|header
argument_list|,
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|// Extension Methods that use Closures as predicates
DECL|method|filter (ProcessorDefinition<?> self, Closure<?> predicate)
specifier|public
specifier|static
name|FilterDefinition
name|filter
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|filter
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|validate (ProcessorDefinition<?> self, Closure<?> predicate)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|validate
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|validate
argument_list|(
operator|(
name|Predicate
operator|)
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|when (ChoiceDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|ChoiceDefinition
name|when
parameter_list|(
name|ChoiceDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|when
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onWhen (TryDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|TryDefinition
name|onWhen
parameter_list|(
name|TryDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|onWhen
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onWhen (OnExceptionDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|OnExceptionDefinition
name|onWhen
parameter_list|(
name|OnExceptionDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|onWhen
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|handled (OnExceptionDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|OnExceptionDefinition
name|handled
parameter_list|(
name|OnExceptionDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|handled
argument_list|(
operator|(
name|Predicate
operator|)
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|continued (OnExceptionDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|OnExceptionDefinition
name|continued
parameter_list|(
name|OnExceptionDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|continued
argument_list|(
operator|(
name|Predicate
operator|)
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|retryWhile (OnExceptionDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|OnExceptionDefinition
name|retryWhile
parameter_list|(
name|OnExceptionDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|retryWhile
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onWhen (OnCompletionDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|OnCompletionDefinition
name|onWhen
parameter_list|(
name|OnCompletionDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|onWhen
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onWhen (CatchDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|CatchDefinition
name|onWhen
parameter_list|(
name|CatchDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|onWhen
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|completionPredicate (AggregateDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|AggregateDefinition
name|completionPredicate
parameter_list|(
name|AggregateDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|completionPredicate
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|when (InterceptDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|InterceptDefinition
name|when
parameter_list|(
name|InterceptDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|when
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
DECL|method|when (InterceptSendToEndpointDefinition self, Closure<?> predicate)
specifier|public
specifier|static
name|InterceptSendToEndpointDefinition
name|when
parameter_list|(
name|InterceptSendToEndpointDefinition
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|self
operator|.
name|when
argument_list|(
name|toExpression
argument_list|(
name|predicate
argument_list|)
argument_list|)
return|;
block|}
comment|// Bridging generic attribution of expressions, predicates etc.
DECL|method|aggregator (RouteBuilder self, Closure<Exchange> aggregationLogic)
specifier|public
specifier|static
name|AggregationStrategy
name|aggregator
parameter_list|(
name|RouteBuilder
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|aggregationLogic
parameter_list|)
block|{
return|return
name|toAggregationStrategy
argument_list|(
name|aggregationLogic
argument_list|)
return|;
block|}
DECL|method|expression (RouteBuilder self, Closure<?> expression)
specifier|public
specifier|static
name|Expression
name|expression
parameter_list|(
name|RouteBuilder
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|toExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
DECL|method|predicate (RouteBuilder self, Closure<?> predicate)
specifier|public
specifier|static
name|Predicate
name|predicate
parameter_list|(
name|RouteBuilder
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|toExpression
argument_list|(
name|predicate
argument_list|)
return|;
block|}
DECL|method|processor (RouteBuilder self, Closure<Exchange> processor)
specifier|public
specifier|static
name|Processor
name|processor
parameter_list|(
name|RouteBuilder
name|self
parameter_list|,
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|processor
parameter_list|)
block|{
return|return
name|toProcessor
argument_list|(
name|processor
argument_list|)
return|;
block|}
DECL|method|expression (ExpressionClause<T> self, Closure<?> expression)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|expression
parameter_list|(
name|ExpressionClause
argument_list|<
name|T
argument_list|>
name|self
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|self
operator|.
name|expression
argument_list|(
name|toExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|// Private Helpers
DECL|method|toExpression (final Closure<?> closure)
specifier|static
name|ExpressionSupport
name|toExpression
parameter_list|(
specifier|final
name|Closure
argument_list|<
name|?
argument_list|>
name|closure
parameter_list|)
block|{
return|return
operator|new
name|ClosureExpression
argument_list|(
name|closure
argument_list|)
return|;
block|}
DECL|method|toProcessor (final Closure<?> closure)
specifier|static
name|Processor
name|toProcessor
parameter_list|(
specifier|final
name|Closure
argument_list|<
name|?
argument_list|>
name|closure
parameter_list|)
block|{
return|return
operator|new
name|ClosureProcessor
argument_list|(
name|closure
argument_list|)
return|;
block|}
DECL|method|toAggregationStrategy (final Closure<Exchange> closure)
specifier|static
name|AggregationStrategy
name|toAggregationStrategy
parameter_list|(
specifier|final
name|Closure
argument_list|<
name|Exchange
argument_list|>
name|closure
parameter_list|)
block|{
return|return
operator|new
name|ClosureAggregationStrategy
argument_list|(
name|closure
argument_list|)
return|;
block|}
comment|// Groovy-specific data formats
DECL|method|gnode (DataFormatClause<?> self, boolean namespaceAware)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|gnode
parameter_list|(
name|DataFormatClause
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|boolean
name|namespaceAware
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
name|self
argument_list|,
name|parser
argument_list|(
name|namespaceAware
argument_list|)
argument_list|)
return|;
block|}
DECL|method|gnode (DataFormatClause<?> self)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|gnode
parameter_list|(
name|DataFormatClause
argument_list|<
name|?
argument_list|>
name|self
parameter_list|)
block|{
return|return
name|gnode
argument_list|(
name|self
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|gpath (DataFormatClause<?> self, boolean namespaceAware)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|gpath
parameter_list|(
name|DataFormatClause
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|boolean
name|namespaceAware
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
name|self
argument_list|,
name|slurper
argument_list|(
name|namespaceAware
argument_list|)
argument_list|)
return|;
block|}
DECL|method|gpath (DataFormatClause<?> self)
specifier|public
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|gpath
parameter_list|(
name|DataFormatClause
argument_list|<
name|?
argument_list|>
name|self
parameter_list|)
block|{
return|return
name|gpath
argument_list|(
name|self
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|slurper (boolean namespaceAware)
specifier|private
specifier|static
name|DataFormatDefinition
name|slurper
parameter_list|(
name|boolean
name|namespaceAware
parameter_list|)
block|{
return|return
operator|new
name|DataFormatDefinition
argument_list|(
operator|new
name|XmlSlurperDataFormat
argument_list|(
name|namespaceAware
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parser (boolean namespaceAware)
specifier|private
specifier|static
name|DataFormatDefinition
name|parser
parameter_list|(
name|boolean
name|namespaceAware
parameter_list|)
block|{
return|return
operator|new
name|DataFormatDefinition
argument_list|(
operator|new
name|XmlParserDataFormat
argument_list|(
name|namespaceAware
argument_list|)
argument_list|)
return|;
block|}
comment|// DataFormatClause.dataFormat(DataFormatDefinition) is private...
DECL|method|dataFormat (DataFormatClause<?> self, DataFormatDefinition format)
specifier|private
specifier|static
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|dataFormat
parameter_list|(
name|DataFormatClause
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|DataFormatDefinition
name|format
parameter_list|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|self
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"dataFormat"
argument_list|,
name|DataFormatDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|self
argument_list|,
name|format
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown DataFormat operation"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

