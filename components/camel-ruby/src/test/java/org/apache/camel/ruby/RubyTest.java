begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.ruby
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ruby
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jruby
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|RubyTest
specifier|public
class|class
name|RubyTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|expected
specifier|protected
name|String
name|expected
init|=
literal|"<hello>world!</hello>"
decl_stmt|;
DECL|field|scriptName
specifier|protected
name|String
name|scriptName
init|=
literal|"src/test/java/org/apache/camel/ruby/example.rb"
decl_stmt|;
annotation|@
name|Test
DECL|method|testSendMatchingMessage ()
specifier|public
name|void
name|testSendMatchingMessage
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isPlatform
argument_list|(
literal|"windows"
argument_list|)
condition|)
block|{
return|return;
block|}
name|MockEndpoint
name|resultEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:results"
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:a"
argument_list|,
name|expected
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendNotMatchingMessage ()
specifier|public
name|void
name|testSendNotMatchingMessage
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isPlatform
argument_list|(
literal|"windows"
argument_list|)
condition|)
block|{
return|return;
block|}
name|MockEndpoint
name|resultEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:results"
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:a"
argument_list|,
name|expected
argument_list|,
literal|"foo"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
comment|// appears to cause issue on some windows with loading jruby
if|if
condition|(
name|isPlatform
argument_list|(
literal|"windows"
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|createCamelContext
argument_list|()
return|;
block|}
name|CamelContext
name|answer
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|RubyCamel
operator|.
name|setCamelContext
argument_list|(
name|answer
argument_list|)
expr_stmt|;
comment|// TODO make a better way to load ruby based route definitions!
comment|// must clear before running script
name|RubyCamel
operator|.
name|clearRoutes
argument_list|()
expr_stmt|;
comment|// now lets run the script
name|runScript
argument_list|(
name|scriptName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|list
init|=
name|RubyCamel
operator|.
name|getRoutes
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Found route builders: "
operator|+
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|RouteBuilder
name|routeBuilder
range|:
name|list
control|)
block|{
name|answer
operator|.
name|addRoutes
argument_list|(
name|routeBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|runScript (String name)
specifier|public
specifier|static
name|void
name|runScript
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|args
init|=
block|{
name|name
block|}
decl_stmt|;
name|Main
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

