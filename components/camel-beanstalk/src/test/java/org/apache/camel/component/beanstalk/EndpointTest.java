begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.beanstalk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
DECL|class|EndpointTest
specifier|public
class|class
name|EndpointTest
block|{
DECL|field|context
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
operator|new
name|DefaultCamelContext
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|context
operator|.
name|disableJMX
argument_list|()
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPriority ()
specifier|public
name|void
name|testPriority
parameter_list|()
block|{
name|BeanstalkEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"beanstalk:default?jobPriority=1000"
argument_list|,
name|BeanstalkEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Beanstalk endpoint"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Priority"
argument_list|,
literal|1000
argument_list|,
name|endpoint
operator|.
name|getJobPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeToRun ()
specifier|public
name|void
name|testTimeToRun
parameter_list|()
block|{
name|BeanstalkEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"beanstalk:default?jobTimeToRun=10"
argument_list|,
name|BeanstalkEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Beanstalk endpoint"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Time to run"
argument_list|,
literal|10
argument_list|,
name|endpoint
operator|.
name|getJobTimeToRun
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelay ()
specifier|public
name|void
name|testDelay
parameter_list|()
block|{
name|BeanstalkEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"beanstalk:default?jobDelay=10"
argument_list|,
name|BeanstalkEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Beanstalk endpoint"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Delay"
argument_list|,
literal|10
argument_list|,
name|endpoint
operator|.
name|getJobDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommand ()
specifier|public
name|void
name|testCommand
parameter_list|()
block|{
name|BeanstalkEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"beanstalk:default?command=release"
argument_list|,
name|BeanstalkEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Beanstalk endpoint"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Command"
argument_list|,
name|BeanstalkComponent
operator|.
name|COMMAND_RELEASE
argument_list|,
name|endpoint
operator|.
name|getCommand
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTubes ()
specifier|public
name|void
name|testTubes
parameter_list|()
block|{
name|BeanstalkEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"beanstalk:host:11303/tube1+tube%2B+tube%3F?command=kick"
argument_list|,
name|BeanstalkEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Beanstalk endpoint"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Command"
argument_list|,
name|BeanstalkComponent
operator|.
name|COMMAND_KICK
argument_list|,
name|endpoint
operator|.
name|getCommand
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Host"
argument_list|,
literal|"host"
argument_list|,
name|endpoint
operator|.
name|conn
operator|.
name|host
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Tubes"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tube1"
block|,
literal|"tube+"
block|,
literal|"tube?"
block|}
argument_list|,
name|endpoint
operator|.
name|conn
operator|.
name|tubes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

