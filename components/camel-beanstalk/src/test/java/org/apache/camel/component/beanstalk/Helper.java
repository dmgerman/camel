begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.beanstalk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|surftools
operator|.
name|BeanstalkClient
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_class
DECL|class|Helper
specifier|public
specifier|final
class|class
name|Helper
block|{
DECL|method|Helper ()
specifier|private
name|Helper
parameter_list|()
block|{     }
DECL|method|mockConn (final Client client)
specifier|public
specifier|static
name|ConnectionSettings
name|mockConn
parameter_list|(
specifier|final
name|Client
name|client
parameter_list|)
block|{
return|return
operator|new
name|MockConnectionSettings
argument_list|(
name|client
argument_list|)
return|;
block|}
DECL|method|mockComponent (final Client client)
specifier|public
specifier|static
name|void
name|mockComponent
parameter_list|(
specifier|final
name|Client
name|client
parameter_list|)
block|{
name|BeanstalkComponent
operator|.
name|setConnectionSettingsFactory
argument_list|(
operator|new
name|ConnectionSettingsFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ConnectionSettings
name|parseUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|MockConnectionSettings
argument_list|(
name|client
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|revertComponent ()
specifier|public
specifier|static
name|void
name|revertComponent
parameter_list|()
block|{
name|BeanstalkComponent
operator|.
name|setConnectionSettingsFactory
argument_list|(
name|ConnectionSettingsFactory
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|getEndpoint (String uri, CamelContext context, Client client)
specifier|public
specifier|static
name|BeanstalkEndpoint
name|getEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|CamelContext
name|context
parameter_list|,
name|Client
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|BeanstalkEndpoint
name|endpoint
init|=
operator|new
name|BeanstalkEndpoint
argument_list|(
name|uri
argument_list|,
name|context
operator|.
name|getComponent
argument_list|(
literal|"beanstalk"
argument_list|)
argument_list|,
name|mockConn
argument_list|(
name|client
argument_list|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|context
operator|.
name|addEndpoint
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|stringToBytes (final String s)
specifier|public
specifier|static
name|byte
index|[]
name|stringToBytes
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ByteArrayOutputStream
name|byteOS
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputStream
name|dataStream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteOS
argument_list|)
decl_stmt|;
try|try
block|{
name|dataStream
operator|.
name|writeBytes
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|dataStream
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|byteOS
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|dataStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|byteOS
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|MockConnectionSettings
class|class
name|MockConnectionSettings
extends|extends
name|ConnectionSettings
block|{
DECL|field|client
specifier|final
name|Client
name|client
decl_stmt|;
DECL|method|MockConnectionSettings (Client client)
specifier|public
name|MockConnectionSettings
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
literal|"tube"
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newReadingClient (boolean useBlockIO)
specifier|public
name|Client
name|newReadingClient
parameter_list|(
name|boolean
name|useBlockIO
parameter_list|)
block|{
return|return
name|client
return|;
block|}
annotation|@
name|Override
DECL|method|newWritingClient ()
specifier|public
name|Client
name|newWritingClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
block|}
end_class

end_unit

