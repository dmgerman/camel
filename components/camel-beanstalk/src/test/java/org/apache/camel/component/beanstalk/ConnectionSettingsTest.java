begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.beanstalk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
package|;
end_package

begin_import
import|import
name|com
operator|.
name|surftools
operator|.
name|BeanstalkClient
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|ConnectionSettingsTest
specifier|public
class|class
name|ConnectionSettingsTest
block|{
annotation|@
name|Test
DECL|method|parseUriTest ()
specifier|public
name|void
name|parseUriTest
parameter_list|()
block|{
specifier|final
name|ConnectionSettingsFactory
name|factory
init|=
name|BeanstalkComponent
operator|.
name|getConnectionSettingsFactory
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Full URI"
argument_list|,
operator|new
name|ConnectionSettings
argument_list|(
literal|"host.domain.tld"
argument_list|,
literal|11300
argument_list|,
literal|"someTube"
argument_list|)
argument_list|,
name|factory
operator|.
name|parseUri
argument_list|(
literal|"host.domain.tld:11300/someTube"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No port"
argument_list|,
operator|new
name|ConnectionSettings
argument_list|(
literal|"host.domain.tld"
argument_list|,
name|Client
operator|.
name|DEFAULT_PORT
argument_list|,
literal|"someTube"
argument_list|)
argument_list|,
name|factory
operator|.
name|parseUri
argument_list|(
literal|"host.domain.tld/someTube"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Only tube"
argument_list|,
operator|new
name|ConnectionSettings
argument_list|(
name|Client
operator|.
name|DEFAULT_HOST
argument_list|,
name|Client
operator|.
name|DEFAULT_PORT
argument_list|,
literal|"someTube"
argument_list|)
argument_list|,
name|factory
operator|.
name|parseUri
argument_list|(
literal|"someTube"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseTubesTest ()
specifier|public
name|void
name|parseTubesTest
parameter_list|()
block|{
specifier|final
name|ConnectionSettingsFactory
name|factory
init|=
name|BeanstalkComponent
operator|.
name|getConnectionSettingsFactory
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Full URI"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tube1"
block|,
literal|"tube2"
block|}
argument_list|,
name|factory
operator|.
name|parseUri
argument_list|(
literal|"host:90/tube1+tube2"
argument_list|)
operator|.
name|tubes
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"No port"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tube1"
block|,
literal|"tube2"
block|}
argument_list|,
name|factory
operator|.
name|parseUri
argument_list|(
literal|"host/tube1+tube2"
argument_list|)
operator|.
name|tubes
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Only tubes"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tube1"
block|,
literal|"tube2"
block|}
argument_list|,
name|factory
operator|.
name|parseUri
argument_list|(
literal|"tube1+tube2"
argument_list|)
operator|.
name|tubes
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Empty URI"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|factory
operator|.
name|parseUri
argument_list|(
literal|""
argument_list|)
operator|.
name|tubes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|notValidHost ()
specifier|public
name|void
name|notValidHost
parameter_list|()
block|{
specifier|final
name|ConnectionSettingsFactory
name|factory
init|=
name|BeanstalkComponent
operator|.
name|getConnectionSettingsFactory
argument_list|()
decl_stmt|;
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Calling on not valid URI must raise exception, but got result %s"
argument_list|,
name|factory
operator|.
name|parseUri
argument_list|(
literal|"not_valid?host/tube?"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|BeanstalkComponent
operator|.
name|setConnectionSettingsFactory
argument_list|(
operator|new
name|ConnectionSettingsFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

