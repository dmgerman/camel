begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.beanstalk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
package|;
end_package

begin_import
import|import
name|com
operator|.
name|surftools
operator|.
name|BeanstalkClient
operator|.
name|BeanstalkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
operator|.
name|processors
operator|.
name|BuryCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
operator|.
name|processors
operator|.
name|DeleteCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
operator|.
name|processors
operator|.
name|PutCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
operator|.
name|processors
operator|.
name|ReleaseCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
operator|.
name|processors
operator|.
name|TouchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|ProducerTest
specifier|public
class|class
name|ProducerTest
extends|extends
name|BeanstalkMockTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"beanstalk:tube"
argument_list|)
DECL|field|endpoint
specifier|protected
name|BeanstalkEndpoint
name|endpoint
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|resultEndpoint
specifier|protected
name|MockEndpoint
name|resultEndpoint
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:start"
argument_list|)
DECL|field|direct
specifier|protected
name|ProducerTemplate
name|direct
decl_stmt|;
DECL|field|testMessage
specifier|private
name|String
name|testMessage
init|=
literal|"hello, world"
decl_stmt|;
annotation|@
name|Test
DECL|method|testPut ()
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|priority
init|=
name|BeanstalkComponent
operator|.
name|DEFAULT_PRIORITY
decl_stmt|;
specifier|final
name|int
name|delay
init|=
name|BeanstalkComponent
operator|.
name|DEFAULT_DELAY
decl_stmt|;
specifier|final
name|int
name|timeToRun
init|=
name|BeanstalkComponent
operator|.
name|DEFAULT_TIME_TO_RUN
decl_stmt|;
specifier|final
name|byte
index|[]
name|payload
init|=
name|Helper
operator|.
name|stringToBytes
argument_list|(
name|testMessage
argument_list|)
decl_stmt|;
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
specifier|final
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|PutCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
comment|// TODO: SetBodyProcessor(?)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|testMessage
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Job ID in exchange"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutOut ()
specifier|public
name|void
name|testPutOut
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|priority
init|=
name|BeanstalkComponent
operator|.
name|DEFAULT_PRIORITY
decl_stmt|;
specifier|final
name|int
name|delay
init|=
name|BeanstalkComponent
operator|.
name|DEFAULT_DELAY
decl_stmt|;
specifier|final
name|int
name|timeToRun
init|=
name|BeanstalkComponent
operator|.
name|DEFAULT_TIME_TO_RUN
decl_stmt|;
specifier|final
name|byte
index|[]
name|payload
init|=
name|Helper
operator|.
name|stringToBytes
argument_list|(
name|testMessage
argument_list|)
decl_stmt|;
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|PutCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
comment|// TODO: SetBodyProcessor(?)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|testMessage
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Job ID in exchange"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutWithHeaders ()
specifier|public
name|void
name|testPutWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|priority
init|=
literal|111
decl_stmt|;
specifier|final
name|int
name|delay
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|timeToRun
init|=
literal|65
decl_stmt|;
specifier|final
name|byte
index|[]
name|payload
init|=
name|Helper
operator|.
name|stringToBytes
argument_list|(
name|testMessage
argument_list|)
decl_stmt|;
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|PutCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
comment|// TODO: SetBodyProcessor(?)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|PRIORITY
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|DELAY
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|TIME_TO_RUN
argument_list|,
name|timeToRun
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|testMessage
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Job ID in exchange"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBury ()
specifier|public
name|void
name|testBury
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|priority
init|=
name|BeanstalkComponent
operator|.
name|DEFAULT_PRIORITY
decl_stmt|;
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_BURY
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|BuryCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|bury
argument_list|(
name|jobId
argument_list|,
name|priority
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Op result"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|RESULT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job ID in exchange"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|bury
argument_list|(
name|jobId
argument_list|,
name|priority
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuryNoJobId ()
specifier|public
name|void
name|testBuryNoJobId
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_BURY
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|BuryCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{             }
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exchange failed"
argument_list|,
name|exchange
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|bury
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuryWithHeaders ()
specifier|public
name|void
name|testBuryWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|priority
init|=
literal|1000
decl_stmt|;
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_BURY
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|BuryCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|bury
argument_list|(
name|jobId
argument_list|,
name|priority
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|PRIORITY
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Op result"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|RESULT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job ID in exchange"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|bury
argument_list|(
name|jobId
argument_list|,
name|priority
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_DELETE
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DeleteCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|delete
argument_list|(
name|jobId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Op result"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|RESULT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job ID in exchange"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|delete
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteNoJobId ()
specifier|public
name|void
name|testDeleteNoJobId
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_DELETE
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DeleteCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{             }
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exchange failed"
argument_list|,
name|exchange
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelease ()
specifier|public
name|void
name|testRelease
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|priority
init|=
name|BeanstalkComponent
operator|.
name|DEFAULT_PRIORITY
decl_stmt|;
specifier|final
name|int
name|delay
init|=
name|BeanstalkComponent
operator|.
name|DEFAULT_DELAY
decl_stmt|;
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_RELEASE
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ReleaseCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|release
argument_list|(
name|jobId
argument_list|,
name|priority
argument_list|,
name|delay
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Op result"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|RESULT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job ID in exchange"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|release
argument_list|(
name|jobId
argument_list|,
name|priority
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReleaseNoJobId ()
specifier|public
name|void
name|testReleaseNoJobId
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_RELEASE
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ReleaseCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{             }
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exchange failed"
argument_list|,
name|exchange
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|release
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReleaseWithHeaders ()
specifier|public
name|void
name|testReleaseWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|priority
init|=
literal|1001
decl_stmt|;
specifier|final
name|int
name|delay
init|=
literal|124
decl_stmt|;
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_RELEASE
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ReleaseCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|release
argument_list|(
name|jobId
argument_list|,
name|priority
argument_list|,
name|delay
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|PRIORITY
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|DELAY
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Op result"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|RESULT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job ID in exchange"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|release
argument_list|(
name|jobId
argument_list|,
name|priority
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTouch ()
specifier|public
name|void
name|testTouch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_TOUCH
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TouchCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|touch
argument_list|(
name|jobId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Op result"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|RESULT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job ID in exchange"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|touch
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTouchNoJobId ()
specifier|public
name|void
name|testTouchNoJobId
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_TOUCH
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Producer"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Producer class"
argument_list|,
name|producer
argument_list|,
name|instanceOf
argument_list|(
name|BeanstalkProducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Processor class"
argument_list|,
operator|(
operator|(
name|BeanstalkProducer
operator|)
name|producer
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TouchCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{             }
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exchange failed"
argument_list|,
name|exchange
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|touch
argument_list|(
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHeaderOverride ()
specifier|public
name|void
name|testHeaderOverride
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|priority
init|=
literal|1020
decl_stmt|;
specifier|final
name|int
name|delay
init|=
literal|50
decl_stmt|;
specifier|final
name|int
name|timeToRun
init|=
literal|75
decl_stmt|;
specifier|final
name|byte
index|[]
name|payload
init|=
name|Helper
operator|.
name|stringToBytes
argument_list|(
name|testMessage
argument_list|)
decl_stmt|;
specifier|final
name|long
name|jobId
init|=
literal|113
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|allMessages
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|testMessage
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|allMessages
argument_list|()
operator|.
name|header
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|direct
operator|.
name|sendBodyAndHeader
argument_list|(
name|testMessage
argument_list|,
name|Headers
operator|.
name|TIME_TO_RUN
argument_list|,
name|timeToRun
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
specifier|final
name|Long
name|jobIdIn
init|=
name|resultEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Job ID in 'In' message"
argument_list|,
name|jobIdIn
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test1BeanstalkException ()
specifier|public
name|void
name|test1BeanstalkException
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|priority
init|=
literal|1020
decl_stmt|;
specifier|final
name|int
name|delay
init|=
literal|50
decl_stmt|;
specifier|final
name|int
name|timeToRun
init|=
literal|75
decl_stmt|;
specifier|final
name|byte
index|[]
name|payload
init|=
name|Helper
operator|.
name|stringToBytes
argument_list|(
name|testMessage
argument_list|)
decl_stmt|;
specifier|final
name|long
name|jobId
init|=
literal|113
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|BeanstalkException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|allMessages
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|testMessage
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|allMessages
argument_list|()
operator|.
name|header
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|direct
operator|.
name|sendBodyAndHeader
argument_list|(
name|testMessage
argument_list|,
name|Headers
operator|.
name|TIME_TO_RUN
argument_list|,
name|timeToRun
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
specifier|final
name|Long
name|jobIdIn
init|=
name|resultEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Job ID in 'In' message"
argument_list|,
name|jobIdIn
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|delay
argument_list|,
name|timeToRun
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test2BeanstalkException ()
specifier|public
name|void
name|test2BeanstalkException
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|jobId
init|=
literal|111
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|touch
argument_list|(
name|jobId
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|BeanstalkException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setCommand
argument_list|(
name|BeanstalkComponent
operator|.
name|COMMAND_TOUCH
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|JOB_ID
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exchange failed"
argument_list|,
name|exchange
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|touch
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"beanstalk:tube?jobPriority=1020&jobDelay=50&jobTimeToRun=65"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

