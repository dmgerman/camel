begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.beanstalk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|beanstalk
package|;
end_package

begin_import
import|import
name|com
operator|.
name|surftools
operator|.
name|BeanstalkClient
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  *  * @author<a href="mailto:azarov@osinka.com">Alexander Azarov</a>  */
end_comment

begin_class
DECL|class|ConnectionSettingsFactory
specifier|public
class|class
name|ConnectionSettingsFactory
block|{
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|ConnectionSettingsFactory
name|DEFAULT
init|=
operator|new
name|ConnectionSettingsFactory
argument_list|()
decl_stmt|;
DECL|field|HostPortTubeRE
specifier|final
name|Pattern
name|HostPortTubeRE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(([\\w.-]+)(:([\\d]+))?/)?([\\w%+]*)$"
argument_list|)
decl_stmt|;
DECL|method|parseUri (final String remaining)
specifier|public
name|ConnectionSettings
name|parseUri
parameter_list|(
specifier|final
name|String
name|remaining
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
specifier|final
name|Matcher
name|m
init|=
name|HostPortTubeRE
operator|.
name|matcher
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid path format: %s - should be [<hostName>[:<port>]/][<tubes>]"
argument_list|,
name|remaining
argument_list|)
argument_list|)
throw|;
specifier|final
name|String
name|host
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|!=
literal|null
condition|?
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
else|:
name|Client
operator|.
name|DEFAULT_HOST
decl_stmt|;
specifier|final
name|int
name|port
init|=
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
else|:
name|Client
operator|.
name|DEFAULT_PORT
decl_stmt|;
specifier|final
name|String
name|tubes
init|=
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
operator|!=
literal|null
condition|?
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
else|:
literal|""
decl_stmt|;
return|return
operator|new
name|ConnectionSettings
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|tubes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

