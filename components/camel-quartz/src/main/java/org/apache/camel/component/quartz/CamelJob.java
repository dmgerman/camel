begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quartz
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quartz
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SchedulerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SchedulerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|CamelJob
specifier|public
class|class
name|CamelJob
implements|implements
name|Job
implements|,
name|Serializable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelJob
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|27L
decl_stmt|;
DECL|method|execute (JobExecutionContext context)
specifier|public
name|void
name|execute
parameter_list|(
name|JobExecutionContext
name|context
parameter_list|)
throws|throws
name|JobExecutionException
block|{
name|String
name|camelContextName
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
operator|.
name|get
argument_list|(
name|QuartzConstants
operator|.
name|QUARTZ_CAMEL_CONTEXT_NAME
argument_list|)
decl_stmt|;
name|String
name|endpointUri
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
operator|.
name|get
argument_list|(
name|QuartzConstants
operator|.
name|QUARTZ_ENDPOINT_URI
argument_list|)
decl_stmt|;
name|SchedulerContext
name|schedulerContext
decl_stmt|;
try|try
block|{
name|schedulerContext
operator|=
name|context
operator|.
name|getScheduler
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JobExecutionException
argument_list|(
literal|"Failed to obtain scheduler context for job "
operator|+
name|context
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|CamelContext
name|camelContext
init|=
operator|(
name|CamelContext
operator|)
name|schedulerContext
operator|.
name|get
argument_list|(
name|QuartzConstants
operator|.
name|QUARTZ_CAMEL_CONTEXT
operator|+
literal|"-"
operator|+
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JobExecutionException
argument_list|(
literal|"No CamelContext could be found with name: "
operator|+
name|camelContextName
argument_list|)
throw|;
block|}
name|Trigger
name|trigger
init|=
name|context
operator|.
name|getTrigger
argument_list|()
decl_stmt|;
name|QuartzEndpoint
name|endpoint
init|=
name|lookupQuartzEndpoint
argument_list|(
name|camelContext
argument_list|,
name|endpointUri
argument_list|,
name|trigger
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JobExecutionException
argument_list|(
literal|"No QuartzEndpoint could be found with endpointUri: "
operator|+
name|endpointUri
argument_list|)
throw|;
block|}
name|endpoint
operator|.
name|onJobExecute
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|lookupQuartzEndpoint (CamelContext camelContext, String endpointUri, Trigger trigger)
specifier|private
name|QuartzEndpoint
name|lookupQuartzEndpoint
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|endpointUri
parameter_list|,
name|Trigger
name|trigger
parameter_list|)
throws|throws
name|JobExecutionException
block|{
name|String
name|targetTriggerName
init|=
name|trigger
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|targetTriggerGroup
init|=
name|trigger
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up existing QuartzEndpoint with trigger {}.{}"
argument_list|,
name|targetTriggerName
argument_list|,
name|targetTriggerGroup
argument_list|)
expr_stmt|;
try|try
block|{
comment|// check all active routes for the quartz endpoint this task matches
comment|// as we prefer to use the existing endpoint from the routes
for|for
control|(
name|Route
name|route
range|:
name|camelContext
operator|.
name|getRoutes
argument_list|()
control|)
block|{
if|if
condition|(
name|route
operator|.
name|getEndpoint
argument_list|()
operator|instanceof
name|QuartzEndpoint
condition|)
block|{
name|QuartzEndpoint
name|quartzEndpoint
init|=
operator|(
name|QuartzEndpoint
operator|)
name|route
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|triggerName
init|=
name|quartzEndpoint
operator|.
name|getTrigger
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|triggerGroup
init|=
name|quartzEndpoint
operator|.
name|getTrigger
argument_list|()
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Checking route trigger {}.{}"
argument_list|,
name|triggerName
argument_list|,
name|triggerGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|triggerName
operator|.
name|equals
argument_list|(
name|targetTriggerName
argument_list|)
operator|&&
name|triggerGroup
operator|.
name|equals
argument_list|(
name|targetTriggerGroup
argument_list|)
condition|)
block|{
return|return
operator|(
name|QuartzEndpoint
operator|)
name|route
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JobExecutionException
argument_list|(
literal|"Error lookup up existing QuartzEndpoint with trigger: "
operator|+
name|trigger
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// fallback and lookup existing from registry (eg maybe a @Consume POJO with a quartz endpoint, and thus not from a route)
if|if
condition|(
name|camelContext
operator|.
name|hasEndpoint
argument_list|(
name|endpointUri
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|endpointUri
argument_list|,
name|QuartzEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot find existing QuartzEndpoint with uri: {}. Creating new endpoint instance."
argument_list|,
name|endpointUri
argument_list|)
expr_stmt|;
return|return
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|endpointUri
argument_list|,
name|QuartzEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

