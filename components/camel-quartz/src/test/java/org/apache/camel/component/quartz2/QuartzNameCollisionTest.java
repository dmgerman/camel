begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quartz2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quartz2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToCreateRouteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|TriggerKey
import|;
end_import

begin_comment
comment|/**  * Check for duplicate name/group collision.  */
end_comment

begin_class
DECL|class|QuartzNameCollisionTest
specifier|public
class|class
name|QuartzNameCollisionTest
block|{
DECL|field|camel1
specifier|private
name|DefaultCamelContext
name|camel1
decl_stmt|;
DECL|field|camel2
specifier|private
name|DefaultCamelContext
name|camel2
decl_stmt|;
annotation|@
name|Test
DECL|method|testDupeName ()
specifier|public
name|void
name|testDupeName
parameter_list|()
throws|throws
name|Exception
block|{
name|camel1
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|camel1
operator|.
name|setName
argument_list|(
literal|"camel-1"
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"quartz://myGroup/myTimerName?cron=0/1+*+*+*+*+?"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:one"
argument_list|,
literal|"mock:one"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|camel1
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"quartz://myGroup/myTimerName?cron=0/2+*+*+*+*+?"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:two"
argument_list|,
literal|"mock:two"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedToCreateRouteException
name|e
parameter_list|)
block|{
name|String
name|reason
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reason
operator|.
name|indexOf
argument_list|(
literal|"Trigger key myGroup.myTimerName is already in use"
argument_list|)
operator|>=
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDupeNameMultiContext ()
specifier|public
name|void
name|testDupeNameMultiContext
parameter_list|()
throws|throws
name|Exception
block|{
name|camel1
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|camel1
operator|.
name|setName
argument_list|(
literal|"camel-1"
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"quartz://myGroup/myTimerName?cron=0/1+*+*+*+*+?"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:one"
argument_list|,
literal|"mock:one"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|start
argument_list|()
expr_stmt|;
name|camel2
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|camel2
operator|.
name|setName
argument_list|(
literal|"camel-2"
argument_list|)
expr_stmt|;
name|camel2
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"quartz://myGroup/myTimerName=0/2+*+*+*+*+?"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:two"
argument_list|,
literal|"mock:two"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|camel2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Don't check for a name collision if the job is stateful.      */
annotation|@
name|Test
DECL|method|testNoStatefulCollisionError ()
specifier|public
name|void
name|testNoStatefulCollisionError
parameter_list|()
throws|throws
name|Exception
block|{
name|camel1
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|camel1
operator|.
name|setName
argument_list|(
literal|"camel-1"
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:one"
argument_list|,
literal|"mock:one"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|start
argument_list|()
expr_stmt|;
name|camel2
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|camel2
operator|.
name|setName
argument_list|(
literal|"camel-2"
argument_list|)
expr_stmt|;
name|camel2
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"quartz://myGroup/myTimerName?stateful=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:two"
argument_list|,
literal|"mock:two"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|camel2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// if no exception is thrown then this test passed.
block|}
comment|/**      * Make sure a resume doesn't trigger a dupe name error.      */
annotation|@
name|Test
DECL|method|testRestart ()
specifier|public
name|void
name|testRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|camel
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|camel
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"quartz://myGroup/myTimerName?cron=0/1+*+*+*+*+?"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:one"
argument_list|,
literal|"mock:one"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// traverse a litany of states
name|camel
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|camel
operator|.
name|suspend
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|camel
operator|.
name|resume
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|camel
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|camel
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|camel
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Confirm the quartz trigger is removed on route stop.      */
annotation|@
name|Test
DECL|method|testRemoveJob ()
specifier|public
name|void
name|testRemoveJob
parameter_list|()
throws|throws
name|Exception
block|{
name|camel1
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|camel1
operator|.
name|setName
argument_list|(
literal|"camel-1"
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"quartz://myGroup/myTimerName?cron=0/1+*+*+*+*+?"
argument_list|)
operator|.
name|id
argument_list|(
literal|"route-1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:one"
argument_list|,
literal|"mock:one"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"quartz://myGroup2/myTimerName?cron=0/1+*+*+*+*+?"
argument_list|)
operator|.
name|id
argument_list|(
literal|"route-2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:one"
argument_list|,
literal|"mock:one"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|start
argument_list|()
expr_stmt|;
name|QuartzComponent
name|component
init|=
operator|(
name|QuartzComponent
operator|)
name|camel1
operator|.
name|getComponent
argument_list|(
literal|"quartz"
argument_list|)
decl_stmt|;
name|Scheduler
name|scheduler
init|=
name|component
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|TriggerKey
name|triggerKey
init|=
name|TriggerKey
operator|.
name|triggerKey
argument_list|(
literal|"myTimerName"
argument_list|,
literal|"myGroup"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
name|scheduler
operator|.
name|getTrigger
argument_list|(
name|triggerKey
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
literal|"route-1"
argument_list|)
expr_stmt|;
name|Trigger
operator|.
name|TriggerState
name|triggerState
init|=
name|component
operator|.
name|getScheduler
argument_list|()
operator|.
name|getTriggerState
argument_list|(
name|triggerKey
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Trigger
operator|.
name|TriggerState
operator|.
name|PAUSED
argument_list|,
name|triggerState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|camel1
operator|!=
literal|null
condition|)
block|{
name|camel1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|camel1
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|camel2
operator|!=
literal|null
condition|)
block|{
name|camel2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|camel2
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

