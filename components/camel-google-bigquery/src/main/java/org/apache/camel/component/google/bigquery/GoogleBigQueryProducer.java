begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.bigquery
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|bigquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|Bigquery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|model
operator|.
name|TableDataInsertAllRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|model
operator|.
name|TableDataInsertAllResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|model
operator|.
name|TableRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_comment
comment|/**  * Generic BigQuery Producer  */
end_comment

begin_class
DECL|class|GoogleBigQueryProducer
specifier|public
class|class
name|GoogleBigQueryProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|configuration
specifier|private
specifier|final
name|GoogleBigQueryConfiguration
name|configuration
decl_stmt|;
DECL|field|bigquery
specifier|private
name|Bigquery
name|bigquery
decl_stmt|;
DECL|method|GoogleBigQueryProducer (Bigquery bigquery, GoogleBigQueryEndpoint endpoint, GoogleBigQueryConfiguration configuration)
specifier|public
name|GoogleBigQueryProducer
parameter_list|(
name|Bigquery
name|bigquery
parameter_list|,
name|GoogleBigQueryEndpoint
name|endpoint
parameter_list|,
name|GoogleBigQueryConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|bigquery
operator|=
name|bigquery
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
comment|/**      * The method converts a single incoming message into a List      */
DECL|method|prepareExchangeList (Exchange exchange)
specifier|private
specifier|static
name|List
argument_list|<
name|Exchange
argument_list|>
name|prepareExchangeList
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|entryList
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|GROUPED_EXCHANGE
argument_list|)
condition|)
block|{
name|entryList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|entryList
operator|.
name|add
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entryList
operator|=
operator|(
name|List
argument_list|<
name|Exchange
argument_list|>
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|GROUPED_EXCHANGE
argument_list|)
expr_stmt|;
block|}
return|return
name|entryList
return|;
block|}
comment|/**      * Process the exchange      *      * The incoming exchange can be a grouped exchange in which case all the exchanges will be combined.      *      * The incoming can be      *<ul>      *<li>A map where all map keys will map to field records. One map object maps to one bigquery row</li>      *<li>A list of maps. Each entry in the list will map to one bigquery row</li>      *</ul>      * The incoming message is expected to be a List of Maps      * The assumptions:      * - All incoming records go into the same table      * - Incoming records sorted by the timestamp      */
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|prepareExchangeList
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|processGroup
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|partitionDecorator
init|=
literal|""
decl_stmt|;
name|String
name|suffix
init|=
literal|""
decl_stmt|;
name|String
name|tableId
init|=
name|configuration
operator|.
name|getTableId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|configuration
operator|.
name|getTableId
argument_list|()
decl_stmt|;
name|int
name|totalProcessed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Exchange
name|ex
range|:
name|exchanges
control|)
block|{
name|String
name|tmpPartitionDecorator
init|=
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GoogleBigQueryConstants
operator|.
name|PARTITION_DECORATOR
argument_list|,
literal|""
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|tmpSuffix
init|=
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GoogleBigQueryConstants
operator|.
name|TABLE_SUFFIX
argument_list|,
literal|""
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|tmpTableId
init|=
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GoogleBigQueryConstants
operator|.
name|TABLE_ID
argument_list|,
name|tableId
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpTableId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"tableId need to be specified in one of endpoint configuration or exchange header"
argument_list|)
throw|;
block|}
comment|// Ensure all rows of same request goes to same table and suffix
if|if
condition|(
operator|!
name|tmpPartitionDecorator
operator|.
name|equals
argument_list|(
name|partitionDecorator
argument_list|)
operator|||
operator|!
name|tmpSuffix
operator|.
name|equals
argument_list|(
name|suffix
argument_list|)
operator|||
operator|!
name|tmpTableId
operator|.
name|equals
argument_list|(
name|tableId
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|processGroup
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|totalProcessed
operator|+=
name|process
argument_list|(
name|tableId
argument_list|,
name|partitionDecorator
argument_list|,
name|suffix
argument_list|,
name|processGroup
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|processGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
name|partitionDecorator
operator|=
name|tmpPartitionDecorator
expr_stmt|;
name|suffix
operator|=
name|tmpSuffix
expr_stmt|;
name|tableId
operator|=
name|tmpTableId
expr_stmt|;
block|}
name|processGroup
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|processGroup
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|totalProcessed
operator|+=
name|process
argument_list|(
name|tableId
argument_list|,
name|partitionDecorator
argument_list|,
name|suffix
argument_list|,
name|processGroup
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalProcessed
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The incoming message is either null or empty for exchange {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|process (String tableId, String partitionDecorator, String suffix, List<Exchange> exchanges, String exchangeId)
specifier|private
name|int
name|process
parameter_list|(
name|String
name|tableId
parameter_list|,
name|String
name|partitionDecorator
parameter_list|,
name|String
name|suffix
parameter_list|,
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
parameter_list|,
name|String
name|exchangeId
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|tableIdWithPartition
init|=
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|partitionDecorator
argument_list|)
condition|?
name|tableId
else|:
operator|(
name|tableId
operator|+
literal|"$"
operator|+
name|partitionDecorator
operator|)
decl_stmt|;
name|List
argument_list|<
name|TableDataInsertAllRequest
operator|.
name|Rows
argument_list|>
name|apiRequestRows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exchange
name|ex
range|:
name|exchanges
control|)
block|{
name|Object
name|entryObject
init|=
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|entryObject
operator|instanceof
name|List
condition|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|entryObject
control|)
block|{
name|apiRequestRows
operator|.
name|add
argument_list|(
name|createRowRequest
argument_list|(
literal|null
argument_list|,
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|entryObject
operator|instanceof
name|Map
condition|)
block|{
name|apiRequestRows
operator|.
name|add
argument_list|(
name|createRowRequest
argument_list|(
name|ex
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|entryObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ex
operator|.
name|setException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot handle body type "
operator|+
name|entryObject
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|apiRequestRows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|TableDataInsertAllRequest
name|apiRequestData
init|=
operator|new
name|TableDataInsertAllRequest
argument_list|()
operator|.
name|setRows
argument_list|(
name|apiRequestRows
argument_list|)
decl_stmt|;
name|Bigquery
operator|.
name|Tabledata
operator|.
name|InsertAll
name|apiRequest
init|=
name|bigquery
operator|.
name|tabledata
argument_list|()
operator|.
name|insertAll
argument_list|(
name|configuration
operator|.
name|getProjectId
argument_list|()
argument_list|,
name|configuration
operator|.
name|getDatasetId
argument_list|()
argument_list|,
name|tableIdWithPartition
argument_list|,
name|apiRequestData
argument_list|)
decl_stmt|;
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
block|{
name|apiRequest
operator|.
name|set
argument_list|(
literal|"template_suffix"
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Sending {} messages to bigquery table {}, suffix {}, partition {}"
argument_list|,
name|apiRequestRows
operator|.
name|size
argument_list|()
argument_list|,
name|tableId
argument_list|,
name|suffix
argument_list|,
name|partitionDecorator
argument_list|)
expr_stmt|;
block|}
name|TableDataInsertAllResponse
name|apiResponse
init|=
name|apiRequest
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiResponse
operator|.
name|getInsertErrors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|apiResponse
operator|.
name|getInsertErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"InsertAll into "
operator|+
name|tableId
operator|+
literal|" failed: "
operator|+
name|apiResponse
operator|.
name|getInsertErrors
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Sent {} messages to bigquery table {}, suffix {}, partition {}"
argument_list|,
name|apiRequestRows
operator|.
name|size
argument_list|()
argument_list|,
name|tableId
argument_list|,
name|suffix
argument_list|,
name|partitionDecorator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"uploader thread/id: {} / {} . api call completed."
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|exchangeId
argument_list|)
expr_stmt|;
block|}
return|return
name|apiRequestData
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|createRowRequest (Exchange exchange, Map<String, Object> object)
specifier|private
name|TableDataInsertAllRequest
operator|.
name|Rows
name|createRowRequest
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|object
parameter_list|)
block|{
name|TableRow
name|tableRow
init|=
operator|new
name|TableRow
argument_list|()
decl_stmt|;
name|tableRow
operator|.
name|putAll
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|String
name|insertId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getUseAsInsertId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|insertId
operator|=
call|(
name|String
call|)
argument_list|(
name|object
operator|.
name|get
argument_list|(
name|configuration
operator|.
name|getUseAsInsertId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|insertId
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GoogleBigQueryConstants
operator|.
name|INSERT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
name|TableDataInsertAllRequest
operator|.
name|Rows
name|rows
init|=
operator|new
name|TableDataInsertAllRequest
operator|.
name|Rows
argument_list|()
decl_stmt|;
name|rows
operator|.
name|setInsertId
argument_list|(
name|insertId
argument_list|)
expr_stmt|;
name|rows
operator|.
name|setJson
argument_list|(
name|tableRow
argument_list|)
expr_stmt|;
return|return
name|rows
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|GoogleBigQueryEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|GoogleBigQueryEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
block|}
end_class

end_unit

