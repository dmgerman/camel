begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.bigquery.sql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|bigquery
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|Bigquery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|model
operator|.
name|QueryParameter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|model
operator|.
name|QueryParameterType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|model
operator|.
name|QueryParameterValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|model
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|model
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|bigquery
operator|.
name|GoogleBigQueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_comment
comment|/**  * Generic BigQuery Producer  */
end_comment

begin_class
DECL|class|GoogleBigQuerySQLProducer
specifier|public
class|class
name|GoogleBigQuerySQLProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|configuration
specifier|private
specifier|final
name|GoogleBigQuerySQLConfiguration
name|configuration
decl_stmt|;
DECL|field|bigquery
specifier|private
name|Bigquery
name|bigquery
decl_stmt|;
DECL|field|query
specifier|private
name|String
name|query
decl_stmt|;
DECL|field|queryParameterNames
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|queryParameterNames
decl_stmt|;
DECL|method|GoogleBigQuerySQLProducer (Bigquery bigquery, GoogleBigQuerySQLEndpoint endpoint, GoogleBigQuerySQLConfiguration configuration)
specifier|public
name|GoogleBigQuerySQLProducer
parameter_list|(
name|Bigquery
name|bigquery
parameter_list|,
name|GoogleBigQuerySQLEndpoint
name|endpoint
parameter_list|,
name|GoogleBigQuerySQLConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|bigquery
operator|=
name|bigquery
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
comment|/**      * Process the exchange The incoming exchange can be a grouped exchange in      * which case all the exchanges will be combined. The incoming can be      *<ul>      *<li>A map where all map keys will map to field records. One map object      * maps to one bigquery row</li>      *<li>A list of maps. Each entry in the list will map to one bigquery      * row</li>      *</ul>      * The incoming message is expected to be a List of Maps The assumptions: -      * All incoming records go into the same table - Incoming records sorted by      * the timestamp      */
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|translatedQuery
init|=
name|SqlHelper
operator|.
name|translateQuery
argument_list|(
name|query
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryParameters
init|=
name|extractParameters
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GoogleBigQueryConstants
operator|.
name|TRANSLATED_QUERY
argument_list|,
name|translatedQuery
argument_list|)
expr_stmt|;
name|Long
name|affectedRows
init|=
name|executeSQL
argument_list|(
name|translatedQuery
argument_list|,
name|queryParameters
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"The query {} affected {} rows"
argument_list|,
name|query
argument_list|,
name|affectedRows
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setBody
argument_list|(
name|affectedRows
argument_list|)
expr_stmt|;
block|}
DECL|method|executeSQL (String translatedQuery, Map<String, Object> queryParameters)
specifier|private
name|Long
name|executeSQL
parameter_list|(
name|String
name|translatedQuery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryParameters
parameter_list|)
throws|throws
name|Exception
block|{
name|QueryRequest
name|apiQueryRequest
init|=
operator|new
name|QueryRequest
argument_list|()
operator|.
name|setQuery
argument_list|(
name|translatedQuery
argument_list|)
operator|.
name|setUseLegacySql
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Bigquery
operator|.
name|Jobs
operator|.
name|Query
name|apiQuery
init|=
name|bigquery
operator|.
name|jobs
argument_list|()
operator|.
name|query
argument_list|(
name|configuration
operator|.
name|getProjectId
argument_list|()
argument_list|,
name|apiQueryRequest
argument_list|)
decl_stmt|;
name|setQueryParameters
argument_list|(
name|queryParameters
argument_list|,
name|apiQueryRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Sending query to bigquery standard sql: {}"
argument_list|,
name|translatedQuery
argument_list|)
expr_stmt|;
block|}
name|QueryResponse
name|apiResponse
init|=
name|apiQuery
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiResponse
operator|.
name|getErrors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|apiResponse
operator|.
name|getErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Query "
operator|+
name|translatedQuery
operator|+
literal|" failed: "
operator|+
name|apiResponse
operator|.
name|getErrors
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Result of query {} is {}"
argument_list|,
name|translatedQuery
argument_list|,
name|apiResponse
operator|.
name|toPrettyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|apiResponse
operator|.
name|getNumDmlAffectedRows
argument_list|()
return|;
block|}
DECL|method|extractParameters (Exchange exchange)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractParameters
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|queryParameterNames
operator|==
literal|null
operator|||
name|queryParameterNames
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Message
name|message
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|message
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
try|try
block|{
name|headers
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getBody
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|queryParameterNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|queryParameterNames
operator|.
name|forEach
argument_list|(
name|s
lambda|->
block|{
name|Object
name|value
init|=
name|headers
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"SQL parameter with name '"
operator|+
name|s
operator|+
literal|"' not found in the message headers"
argument_list|,
name|exchange
argument_list|)
throw|;
block|}
name|result
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|headers
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|setQueryParameters (Map<String, Object> params, QueryRequest apiQueryRequest)
specifier|private
name|void
name|setQueryParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|QueryRequest
name|apiQueryRequest
parameter_list|)
block|{
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|QueryParameter
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|QueryParameter
name|param
init|=
operator|new
name|QueryParameter
argument_list|()
decl_stmt|;
name|param
operator|.
name|setName
argument_list|(
name|key
argument_list|)
operator|.
name|setParameterType
argument_list|(
operator|new
name|QueryParameterType
argument_list|()
operator|.
name|setType
argument_list|(
literal|"STRING"
argument_list|)
argument_list|)
operator|.
name|setParameterValue
argument_list|(
operator|new
name|QueryParameterValue
argument_list|()
operator|.
name|setValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|apiQueryRequest
operator|.
name|setQueryParameters
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|GoogleBigQuerySQLEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|GoogleBigQuerySQLEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|String
name|placeholder
init|=
literal|":#"
decl_stmt|;
comment|// TODO
name|query
operator|=
name|SqlHelper
operator|.
name|resolveQuery
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|configuration
operator|.
name|getQuery
argument_list|()
argument_list|,
name|placeholder
argument_list|)
expr_stmt|;
name|queryParameterNames
operator|=
name|SqlHelper
operator|.
name|extractParameterNames
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

