begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.bigquery.unit.sql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|bigquery
operator|.
name|unit
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|bigquery
operator|.
name|sql
operator|.
name|SqlHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|SqlHelperTest
specifier|public
class|class
name|SqlHelperTest
block|{
DECL|field|query
name|String
name|query
init|=
literal|"INSERT INTO ${report}.test( -- TODO \n"
operator|+
literal|"  id,\n"
operator|+
literal|"  region\n"
operator|+
literal|")\n"
operator|+
literal|"SELECT\n"
operator|+
literal|"  id,\n"
operator|+
literal|"  region\n"
operator|+
literal|"FROM\n"
operator|+
literal|"  ${import}.test\n"
operator|+
literal|"WHERE\n"
operator|+
literal|"  rec_date = @date AND id = @id\n"
decl_stmt|;
DECL|field|expected
name|String
name|expected
init|=
literal|"INSERT INTO report_data.test( -- TODO \n"
operator|+
literal|"  id,\n"
operator|+
literal|"  region\n"
operator|+
literal|")\n"
operator|+
literal|"SELECT\n"
operator|+
literal|"  id,\n"
operator|+
literal|"  region\n"
operator|+
literal|"FROM\n"
operator|+
literal|"  import_data.test\n"
operator|+
literal|"WHERE\n"
operator|+
literal|"  rec_date = @date AND id = @id\n"
decl_stmt|;
DECL|field|exchange
name|Exchange
name|exchange
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|message
name|Message
name|message
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testResolveQuery ()
specifier|public
name|void
name|testResolveQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|answer
init|=
name|SqlHelper
operator|.
name|resolveQuery
argument_list|(
name|context
argument_list|,
literal|"delete from test.test_sql_table where id = 1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"delete from test.test_sql_table where id = 1"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testResolveClasspathQuery ()
specifier|public
name|void
name|testResolveClasspathQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|answer
init|=
name|SqlHelper
operator|.
name|resolveQuery
argument_list|(
name|context
argument_list|,
literal|"classpath:sql/delete.sql"
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"delete from test.test_sql_table where id = @id"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTranslateQuery ()
specifier|public
name|void
name|testTranslateQuery
parameter_list|()
block|{
name|when
argument_list|(
name|exchange
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|eq
argument_list|(
literal|"report"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"report_data"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|eq
argument_list|(
literal|"import"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"import_data"
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|SqlHelper
operator|.
name|translateQuery
argument_list|(
name|query
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTranslateQueryProperties ()
specifier|public
name|void
name|testTranslateQueryProperties
parameter_list|()
block|{
name|when
argument_list|(
name|exchange
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|eq
argument_list|(
literal|"report"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"report_data"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|eq
argument_list|(
literal|"import"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"import_data"
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|SqlHelper
operator|.
name|translateQuery
argument_list|(
name|query
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RuntimeExchangeException
operator|.
name|class
argument_list|)
DECL|method|testTranslateQueryWithoutParam ()
specifier|public
name|void
name|testTranslateQueryWithoutParam
parameter_list|()
block|{
name|when
argument_list|(
name|exchange
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|eq
argument_list|(
literal|"report"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"report_data"
argument_list|)
expr_stmt|;
name|SqlHelper
operator|.
name|translateQuery
argument_list|(
name|query
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExtractParameterNames ()
specifier|public
name|void
name|testExtractParameterNames
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|answer
init|=
name|SqlHelper
operator|.
name|extractParameterNames
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|answer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parameter 'date' not found"
argument_list|,
name|answer
operator|.
name|contains
argument_list|(
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parameter 'id' not found"
argument_list|,
name|answer
operator|.
name|contains
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

