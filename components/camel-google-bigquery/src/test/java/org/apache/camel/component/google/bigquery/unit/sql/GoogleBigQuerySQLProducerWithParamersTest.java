begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.bigquery.unit.sql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|bigquery
operator|.
name|unit
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|bigquery
operator|.
name|model
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|GoogleBigQuerySQLProducerWithParamersTest
specifier|public
class|class
name|GoogleBigQuerySQLProducerWithParamersTest
extends|extends
name|GoogleBigQuerySQLProducerBaseTest
block|{
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|sql
operator|=
literal|"insert into testDatasetId.testTableId(id, data) values(@id, @data)"
expr_stmt|;
name|setupBigqueryMock
argument_list|()
expr_stmt|;
name|producer
operator|=
name|createAndStartProducer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendMessageWithParametersInBody ()
specifier|public
name|void
name|sendMessageWithParametersInBody
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|body
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|body
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|body
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
literal|"some data"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|createExchangeWithBody
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|QueryRequest
argument_list|>
name|dataCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|QueryRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|bigquery
operator|.
name|jobs
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|eq
argument_list|(
name|projectId
argument_list|)
argument_list|,
name|dataCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
name|dataCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sql
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"100"
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getParameterValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"data"
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some data"
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParameterValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendMessageWithParametersInBodyAndHeaders ()
specifier|public
name|void
name|sendMessageWithParametersInBodyAndHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|body
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|body
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|createExchangeWithBody
argument_list|(
name|body
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
literal|"some data"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|QueryRequest
argument_list|>
name|dataCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|QueryRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|bigquery
operator|.
name|jobs
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|eq
argument_list|(
name|projectId
argument_list|)
argument_list|,
name|dataCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
name|dataCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sql
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Body data must have higher priority"
argument_list|,
literal|"100"
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getParameterValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"data"
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some data"
argument_list|,
name|request
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParameterValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RuntimeExchangeException
operator|.
name|class
argument_list|)
DECL|method|sendMessageWithoutParameters ()
specifier|public
name|void
name|sendMessageWithoutParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|producer
operator|.
name|process
argument_list|(
name|createExchangeWithBody
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

