begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|config
operator|.
name|CommonConnectorConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|config
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|config
operator|.
name|ConfigDef
import|;
end_import

begin_class
DECL|class|ConnectorConfigFieldFactory
specifier|public
class|class
name|ConnectorConfigFieldFactory
block|{
DECL|method|ConnectorConfigFieldFactory ()
specifier|private
name|ConnectorConfigFieldFactory
parameter_list|()
block|{     }
DECL|method|createConnectorFieldsAsMap (final ConfigDef configDef, final Class<?> configClass, final Set<String> requiredFields, final Map<String, Object> overridenDefaultValues)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectorConfigField
argument_list|>
name|createConnectorFieldsAsMap
parameter_list|(
specifier|final
name|ConfigDef
name|configDef
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|configClass
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|requiredFields
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|overridenDefaultValues
parameter_list|)
block|{
comment|// first we extract deprecated fields
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|deprecatedFields
init|=
name|getDeprecatedFieldsFromConfigClass
argument_list|(
name|configClass
argument_list|)
decl_stmt|;
return|return
name|createConnectorFieldsAsMap
argument_list|(
name|configDef
argument_list|,
name|deprecatedFields
argument_list|,
name|requiredFields
argument_list|,
name|overridenDefaultValues
argument_list|)
return|;
block|}
DECL|method|createConnectorFieldsAsMap (final ConfigDef configDef, final Set<String> deprecatedFields, final Set<String> requiredFields, final Map<String, Object> overridenDefaultValues)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectorConfigField
argument_list|>
name|createConnectorFieldsAsMap
parameter_list|(
specifier|final
name|ConfigDef
name|configDef
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|deprecatedFields
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|requiredFields
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|overridenDefaultValues
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configDef
argument_list|,
literal|"configDef"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|deprecatedFields
argument_list|,
literal|"deprecatedFields"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|requiredFields
argument_list|,
literal|"requiredFields"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|overridenDefaultValues
argument_list|,
literal|"overridenDefaultValues"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectorConfigField
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create our map for fields
name|configDef
operator|.
name|configKeys
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|name
parameter_list|,
name|configKey
parameter_list|)
lambda|->
block|{
name|results
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ConnectorConfigField
argument_list|(
name|configKey
argument_list|,
name|deprecatedFields
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|,
name|requiredFields
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|,
name|overridenDefaultValues
operator|.
name|getOrDefault
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
DECL|method|getDeprecatedFieldsFromConfigClass (final Class<?> configClass)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getDeprecatedFieldsFromConfigClass
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|configClass
parameter_list|)
block|{
if|if
condition|(
name|isConfigClassValid
argument_list|(
name|configClass
argument_list|)
condition|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|configClass
operator|.
name|getDeclaredFields
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|field
lambda|->
name|field
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|ConnectorConfigFieldFactory
operator|::
name|retrieveDbzFieldWithReflection
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Class '%s' is not valid Debezium configuration class"
argument_list|,
name|configClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|isConfigClassValid (final Class<?> configClass)
specifier|private
specifier|static
name|boolean
name|isConfigClassValid
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|configClass
parameter_list|)
block|{
comment|// config class should be a subtype of CommonConnectorConfig
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|configClass
decl_stmt|;
while|while
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clazz
operator|==
name|CommonConnectorConfig
operator|.
name|class
condition|)
block|{
return|return
literal|true
return|;
block|}
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|retrieveDbzFieldWithReflection (final java.lang.reflect.Field reflectionField)
specifier|private
specifier|static
name|String
name|retrieveDbzFieldWithReflection
parameter_list|(
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|reflectionField
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
operator|(
name|Field
operator|)
name|reflectionField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|name
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error occurred in field : "
operator|+
name|reflectionField
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

