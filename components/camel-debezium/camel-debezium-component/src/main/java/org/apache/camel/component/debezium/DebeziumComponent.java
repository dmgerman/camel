begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|ConfigurationValidation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|EmbeddedDebeziumConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|MySqlConnectorEmbeddedDebeziumConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link DebeziumEndpoint}.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
literal|"debezium"
argument_list|)
DECL|class|DebeziumComponent
specifier|public
class|class
name|DebeziumComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|configuration
specifier|private
name|EmbeddedDebeziumConfiguration
name|configuration
decl_stmt|;
DECL|method|DebeziumComponent ()
specifier|public
name|DebeziumComponent
parameter_list|()
block|{     }
DECL|method|DebeziumComponent (CamelContext context)
specifier|public
name|DebeziumComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|DebeziumEndpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check for type when configurations are not set explicitly
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|remaining
argument_list|)
operator|&&
name|configuration
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Connector type must be configured on endpoint using syntax debezium:type"
argument_list|)
throw|;
block|}
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
comment|// we will change to factory strategy in order to create the configurations once
comment|// we have more than one connector supported
specifier|final
name|DebeziumConnectorTypes
name|connectorTypes
init|=
name|DebeziumConnectorTypes
operator|.
name|fromString
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorTypes
operator|==
name|DebeziumConnectorTypes
operator|.
name|MYSQL
condition|)
block|{
name|configuration
operator|=
operator|new
name|MySqlConnectorEmbeddedDebeziumConfiguration
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Connector of type '%s' is not supported yet."
argument_list|,
name|connectorTypes
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|setProperties
argument_list|(
name|configuration
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// validate configurations
specifier|final
name|ConfigurationValidation
name|configurationValidation
init|=
name|configuration
operator|.
name|validateConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|configurationValidation
operator|.
name|isValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|configurationValidation
operator|.
name|getReason
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|DebeziumEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|configuration
argument_list|)
return|;
block|}
comment|/**      * Allow pre-configured Configurations to be set, you will need to extend      * {@link EmbeddedDebeziumConfiguration} in order to create the configuration      * for the component      *      * @return {@link EmbeddedDebeziumConfiguration}      */
DECL|method|getConfiguration ()
specifier|public
name|EmbeddedDebeziumConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (EmbeddedDebeziumConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|EmbeddedDebeziumConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|configuration
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

