begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium.configuration
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|config
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|embedded
operator|.
name|EmbeddedEngine
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|embedded
operator|.
name|spi
operator|.
name|OffsetCommitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|DebeziumConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|json
operator|.
name|JsonConverter
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|EmbeddedDebeziumConfiguration
specifier|public
specifier|abstract
class|class
name|EmbeddedDebeziumConfiguration
block|{
DECL|field|LABEL_NAME
specifier|private
specifier|static
specifier|final
name|String
name|LABEL_NAME
init|=
literal|"consumer"
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|connectorType
specifier|private
name|String
name|connectorType
decl_stmt|;
DECL|field|connectorClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|connectorClass
decl_stmt|;
comment|// name
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|// offset.storage
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|,
name|defaultValue
operator|=
literal|"org.apache.kafka.connect.storage.FileOffsetBackingStore"
argument_list|)
DECL|field|offsetStorage
specifier|private
name|String
name|offsetStorage
init|=
name|DebeziumConstants
operator|.
name|DEFAULT_OFFSET_STORAGE
decl_stmt|;
comment|// offset.storage.file.filename
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|)
DECL|field|offsetStorageFileName
specifier|private
name|String
name|offsetStorageFileName
decl_stmt|;
comment|// offset.storage.topic
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|)
DECL|field|offsetStorageTopic
specifier|private
name|String
name|offsetStorageTopic
decl_stmt|;
comment|// offset.storage.partitions
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|)
DECL|field|offsetStoragePartitions
specifier|private
name|int
name|offsetStoragePartitions
decl_stmt|;
comment|// offset.storage.replication.factor
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|)
DECL|field|offsetStorageReplicationFactor
specifier|private
name|int
name|offsetStorageReplicationFactor
decl_stmt|;
comment|// offset.commit.policy
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|,
name|defaultValue
operator|=
literal|"io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy"
argument_list|)
DECL|field|offsetCommitPolicy
specifier|private
name|String
name|offsetCommitPolicy
init|=
name|OffsetCommitPolicy
operator|.
name|PeriodicCommitOffsetPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// offset.flush.interval.ms
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|,
name|defaultValue
operator|=
literal|"60000"
argument_list|)
DECL|field|offsetFlushIntervalMs
specifier|private
name|long
name|offsetFlushIntervalMs
init|=
literal|60000
decl_stmt|;
comment|// offset.commit.timeout.ms
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|,
name|defaultValue
operator|=
literal|"5000"
argument_list|)
DECL|field|offsetCommitTimeoutMs
specifier|private
name|long
name|offsetCommitTimeoutMs
init|=
literal|5000
decl_stmt|;
comment|// internal.key.converter
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|,
name|defaultValue
operator|=
literal|"org.apache.kafka.connect.json.JsonConverter"
argument_list|)
DECL|field|internalKeyConverter
specifier|private
name|String
name|internalKeyConverter
init|=
name|JsonConverter
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// internal.value.converter
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
name|LABEL_NAME
argument_list|,
name|defaultValue
operator|=
literal|"org.apache.kafka.connect.json.JsonConverter"
argument_list|)
DECL|field|internalValueConverter
specifier|private
name|String
name|internalValueConverter
init|=
name|JsonConverter
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|method|EmbeddedDebeziumConfiguration ()
specifier|public
name|EmbeddedDebeziumConfiguration
parameter_list|()
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configureConnectorClass
argument_list|()
argument_list|,
literal|"connectorClass"
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectorClass
operator|=
name|configureConnectorClass
argument_list|()
expr_stmt|;
block|}
comment|/**      * Configure the Debezium connector class that is supported by Debezium      *      * @return {@link Class}      */
DECL|method|configureConnectorClass ()
specifier|protected
specifier|abstract
name|Class
argument_list|<
name|?
argument_list|>
name|configureConnectorClass
parameter_list|()
function_decl|;
comment|/**      * Create a specific {@link Configuration} for a concrete configuration      *      * @return {@link Configuration}      */
DECL|method|createConnectorConfiguration ()
specifier|protected
specifier|abstract
name|Configuration
name|createConnectorConfiguration
parameter_list|()
function_decl|;
comment|/**      * Validate a concrete configuration      *      * @return {@link ConfigurationValidation}      */
DECL|method|validateConnectorConfiguration ()
specifier|protected
specifier|abstract
name|ConfigurationValidation
name|validateConnectorConfiguration
parameter_list|()
function_decl|;
comment|/**      * Creates a Debezium configuration of type {@link Configuration} in order to be      * used in the engine.      *      * @return {@link Configuration}      */
DECL|method|createDebeziumConfiguration ()
specifier|public
name|Configuration
name|createDebeziumConfiguration
parameter_list|()
block|{
specifier|final
name|Configuration
name|connectorConfiguration
init|=
name|createConnectorConfiguration
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|connectorConfiguration
argument_list|,
literal|"createConnectorConfiguration"
argument_list|)
expr_stmt|;
return|return
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|with
argument_list|(
name|createDebeziumEmbeddedEngineConfiguration
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|createConnectorConfiguration
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createDebeziumEmbeddedEngineConfiguration ()
specifier|private
name|Configuration
name|createDebeziumEmbeddedEngineConfiguration
parameter_list|()
block|{
specifier|final
name|Configuration
operator|.
name|Builder
name|configBuilder
init|=
name|Configuration
operator|.
name|create
argument_list|()
decl_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|ENGINE_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|CONNECTOR_CLASS
argument_list|,
name|connectorClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|OFFSET_STORAGE
argument_list|,
name|offsetStorage
argument_list|)
expr_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|OFFSET_STORAGE_FILE_FILENAME
argument_list|,
name|offsetStorageFileName
argument_list|)
expr_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|OFFSET_STORAGE_KAFKA_TOPIC
argument_list|,
name|offsetStorageTopic
argument_list|)
expr_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|OFFSET_STORAGE_KAFKA_PARTITIONS
argument_list|,
name|offsetStoragePartitions
argument_list|)
expr_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|OFFSET_STORAGE_KAFKA_REPLICATION_FACTOR
argument_list|,
name|offsetStorageReplicationFactor
argument_list|)
expr_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|OFFSET_COMMIT_POLICY
argument_list|,
name|offsetCommitPolicy
argument_list|)
expr_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|OFFSET_FLUSH_INTERVAL_MS
argument_list|,
name|offsetFlushIntervalMs
argument_list|)
expr_stmt|;
name|addPropertyIfNotNull
argument_list|(
name|configBuilder
argument_list|,
name|EmbeddedEngine
operator|.
name|OFFSET_COMMIT_TIMEOUT_MS
argument_list|,
name|offsetCommitTimeoutMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|internalKeyConverter
operator|!=
literal|null
operator|&&
name|internalValueConverter
operator|!=
literal|null
condition|)
block|{
name|configBuilder
operator|.
name|with
argument_list|(
literal|"internal.key.converter"
argument_list|,
name|internalKeyConverter
argument_list|)
expr_stmt|;
name|configBuilder
operator|.
name|with
argument_list|(
literal|"internal.value.converter"
argument_list|,
name|internalValueConverter
argument_list|)
expr_stmt|;
block|}
return|return
name|configBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|addPropertyIfNotNull (final Configuration.Builder configBuilder, final Field field, final T value)
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|addPropertyIfNotNull
parameter_list|(
specifier|final
name|Configuration
operator|.
name|Builder
name|configBuilder
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|,
specifier|final
name|T
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|configBuilder
operator|.
name|with
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addPropertyIfNotNull (final Configuration.Builder configBuilder, final String key, final T value)
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|addPropertyIfNotNull
parameter_list|(
specifier|final
name|Configuration
operator|.
name|Builder
name|configBuilder
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|T
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|configBuilder
operator|.
name|with
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Validate all configurations defined and return      * {@link ConfigurationValidation} instance which contains the validation      * results      *      * @return {@link ConfigurationValidation}      */
DECL|method|validateConfiguration ()
specifier|public
name|ConfigurationValidation
name|validateConfiguration
parameter_list|()
block|{
specifier|final
name|ConfigurationValidation
name|embeddedEngineValidation
init|=
name|validateDebeziumEmbeddedEngineConfiguration
argument_list|()
decl_stmt|;
comment|// only if embeddedEngineValidation is true, we check the connector validation
if|if
condition|(
name|embeddedEngineValidation
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|final
name|ConfigurationValidation
name|connectorValidation
init|=
name|validateConnectorConfiguration
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|connectorValidation
argument_list|,
literal|"validateConnectorConfiguration"
argument_list|)
expr_stmt|;
return|return
name|connectorValidation
return|;
block|}
return|return
name|embeddedEngineValidation
return|;
block|}
DECL|method|validateDebeziumEmbeddedEngineConfiguration ()
specifier|private
name|ConfigurationValidation
name|validateDebeziumEmbeddedEngineConfiguration
parameter_list|()
block|{
if|if
condition|(
name|isFieldValueNotSet
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|ConfigurationValidation
operator|.
name|notValid
argument_list|(
literal|"Required field 'name' must be set."
argument_list|)
return|;
block|}
comment|// check for offsetStorageFileName
if|if
condition|(
name|offsetStorage
operator|.
name|equals
argument_list|(
name|DebeziumConstants
operator|.
name|DEFAULT_OFFSET_STORAGE
argument_list|)
operator|&&
name|isFieldValueNotSet
argument_list|(
name|offsetStorageFileName
argument_list|)
condition|)
block|{
return|return
name|ConfigurationValidation
operator|.
name|notValid
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Required field 'offsetStorageFileName' must be set since 'offsetStorage' is set to '%s'"
argument_list|,
name|DebeziumConstants
operator|.
name|DEFAULT_OFFSET_STORAGE
argument_list|)
argument_list|)
return|;
block|}
return|return
name|ConfigurationValidation
operator|.
name|valid
argument_list|()
return|;
block|}
DECL|method|isFieldValueNotSet (final Object field)
specifier|protected
specifier|static
name|boolean
name|isFieldValueNotSet
parameter_list|(
specifier|final
name|Object
name|field
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/**      * The Debezium connector type that is supported by Camel Debezium component.      */
DECL|method|getConnectorType ()
specifier|public
name|String
name|getConnectorType
parameter_list|()
block|{
return|return
name|connectorType
return|;
block|}
DECL|method|setConnectorType (String connectorType)
specifier|public
name|void
name|setConnectorType
parameter_list|(
name|String
name|connectorType
parameter_list|)
block|{
name|this
operator|.
name|connectorType
operator|=
name|connectorType
expr_stmt|;
block|}
comment|/**      * The name of the Java class for the connector      */
DECL|method|getConnectorClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getConnectorClass
parameter_list|()
block|{
return|return
name|connectorClass
return|;
block|}
DECL|method|setConnectorClass (Class<?> connectorClass)
specifier|public
name|void
name|setConnectorClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|connectorClass
parameter_list|)
block|{
name|this
operator|.
name|connectorClass
operator|=
name|connectorClass
expr_stmt|;
block|}
comment|/**      * Unique name for the connector. Attempting to register again with the same      * name will fail.      */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * The name of the Java class that is responsible for persistence of connector      * offsets.      */
DECL|method|getOffsetStorage ()
specifier|public
name|String
name|getOffsetStorage
parameter_list|()
block|{
return|return
name|offsetStorage
return|;
block|}
DECL|method|setOffsetStorage (String offsetStorage)
specifier|public
name|void
name|setOffsetStorage
parameter_list|(
name|String
name|offsetStorage
parameter_list|)
block|{
name|this
operator|.
name|offsetStorage
operator|=
name|offsetStorage
expr_stmt|;
block|}
comment|/**      * Path to file where offsets are to be stored. Required when offset.storage is      * set to the FileOffsetBackingStore      */
DECL|method|getOffsetStorageFileName ()
specifier|public
name|String
name|getOffsetStorageFileName
parameter_list|()
block|{
return|return
name|offsetStorageFileName
return|;
block|}
DECL|method|setOffsetStorageFileName (String offsetStorageFileName)
specifier|public
name|void
name|setOffsetStorageFileName
parameter_list|(
name|String
name|offsetStorageFileName
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageFileName
operator|=
name|offsetStorageFileName
expr_stmt|;
block|}
comment|/**      * The name of the Kafka topic where offsets are to be stored. Required when      * offset.storage is set to the KafkaOffsetBackingStore.      */
DECL|method|getOffsetStorageTopic ()
specifier|public
name|String
name|getOffsetStorageTopic
parameter_list|()
block|{
return|return
name|offsetStorageTopic
return|;
block|}
DECL|method|setOffsetStorageTopic (String offsetStorageTopic)
specifier|public
name|void
name|setOffsetStorageTopic
parameter_list|(
name|String
name|offsetStorageTopic
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageTopic
operator|=
name|offsetStorageTopic
expr_stmt|;
block|}
comment|/**      * Replication factor used when creating the offset storage topic. Required when      * offset.storage is set to the KafkaOffsetBackingStore      */
DECL|method|getOffsetStorageReplicationFactor ()
specifier|public
name|int
name|getOffsetStorageReplicationFactor
parameter_list|()
block|{
return|return
name|offsetStorageReplicationFactor
return|;
block|}
DECL|method|setOffsetStorageReplicationFactor (int offsetStorageReplicationFactor)
specifier|public
name|void
name|setOffsetStorageReplicationFactor
parameter_list|(
name|int
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageReplicationFactor
operator|=
name|offsetStorageReplicationFactor
expr_stmt|;
block|}
comment|/**      * The name of the Java class of the commit policy. It defines when offsets      * commit has to be triggered based on the number of events processed and the      * time elapsed since the last commit. This class must implement the interface      *<â¦â>.OffsetCommitPolicy. The default is a periodic commit policy based upon      * time intervals.      */
DECL|method|getOffsetCommitPolicy ()
specifier|public
name|String
name|getOffsetCommitPolicy
parameter_list|()
block|{
return|return
name|offsetCommitPolicy
return|;
block|}
DECL|method|setOffsetCommitPolicy (String offsetCommitPolicy)
specifier|public
name|void
name|setOffsetCommitPolicy
parameter_list|(
name|String
name|offsetCommitPolicy
parameter_list|)
block|{
name|this
operator|.
name|offsetCommitPolicy
operator|=
name|offsetCommitPolicy
expr_stmt|;
block|}
comment|/**      * Interval at which to try committing offsets. The default is 1 minute.      */
DECL|method|getOffsetFlushIntervalMs ()
specifier|public
name|long
name|getOffsetFlushIntervalMs
parameter_list|()
block|{
return|return
name|offsetFlushIntervalMs
return|;
block|}
DECL|method|setOffsetFlushIntervalMs (long offsetFlushIntervalMs)
specifier|public
name|void
name|setOffsetFlushIntervalMs
parameter_list|(
name|long
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|offsetFlushIntervalMs
operator|=
name|offsetFlushIntervalMs
expr_stmt|;
block|}
comment|/**      * Maximum number of milliseconds to wait for records to flush and partition      * offset data to be committed to offset storage before cancelling the process      * and restoring the offset data to be committed in a future attempt. The      * default is 5 seconds.      */
DECL|method|getOffsetCommitTimeoutMs ()
specifier|public
name|long
name|getOffsetCommitTimeoutMs
parameter_list|()
block|{
return|return
name|offsetCommitTimeoutMs
return|;
block|}
DECL|method|setOffsetCommitTimeoutMs (long offsetCommitTimeoutMs)
specifier|public
name|void
name|setOffsetCommitTimeoutMs
parameter_list|(
name|long
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|offsetCommitTimeoutMs
operator|=
name|offsetCommitTimeoutMs
expr_stmt|;
block|}
comment|/**      * The number of partitions used when creating the offset storage topic.      * Required when offset.storage is set to the<â¦â>.KafkaOffsetBackingStore.      */
DECL|method|getOffsetStoragePartitions ()
specifier|public
name|int
name|getOffsetStoragePartitions
parameter_list|()
block|{
return|return
name|offsetStoragePartitions
return|;
block|}
DECL|method|setOffsetStoragePartitions (int offsetStoragePartitions)
specifier|public
name|void
name|setOffsetStoragePartitions
parameter_list|(
name|int
name|offsetStoragePartitions
parameter_list|)
block|{
name|this
operator|.
name|offsetStoragePartitions
operator|=
name|offsetStoragePartitions
expr_stmt|;
block|}
comment|/**      * The Converter class that should be used to serialize and deserialize key data      * for offsets. The default is JSON converter.      */
DECL|method|getInternalKeyConverter ()
specifier|public
name|String
name|getInternalKeyConverter
parameter_list|()
block|{
return|return
name|internalKeyConverter
return|;
block|}
DECL|method|setInternalKeyConverter (String internalKeyConverter)
specifier|public
name|void
name|setInternalKeyConverter
parameter_list|(
name|String
name|internalKeyConverter
parameter_list|)
block|{
name|this
operator|.
name|internalKeyConverter
operator|=
name|internalKeyConverter
expr_stmt|;
block|}
comment|/**      * The Converter class that should be used to serialize and deserialize value      * data for offsets. The default is JSON converter.      */
DECL|method|getInternalValueConverter ()
specifier|public
name|String
name|getInternalValueConverter
parameter_list|()
block|{
return|return
name|internalValueConverter
return|;
block|}
DECL|method|setInternalValueConverter (String internalValueConverter)
specifier|public
name|void
name|setInternalValueConverter
parameter_list|(
name|String
name|internalValueConverter
parameter_list|)
block|{
name|this
operator|.
name|internalValueConverter
operator|=
name|internalValueConverter
expr_stmt|;
block|}
block|}
end_class

end_unit

