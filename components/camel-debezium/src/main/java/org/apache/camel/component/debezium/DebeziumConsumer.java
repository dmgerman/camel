begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|embedded
operator|.
name|EmbeddedEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|EmbeddedDebeziumConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|source
operator|.
name|SourceRecord
import|;
end_import

begin_class
DECL|class|DebeziumConsumer
specifier|public
class|class
name|DebeziumConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|DebeziumEndpoint
name|endpoint
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|EmbeddedDebeziumConfiguration
name|configuration
decl_stmt|;
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|dbzEngine
specifier|private
name|EmbeddedEngine
name|dbzEngine
decl_stmt|;
DECL|method|DebeziumConsumer (DebeziumEndpoint endpoint, Processor processor)
specifier|public
name|DebeziumConsumer
parameter_list|(
name|DebeziumEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// start a single threaded pool to monitor events
name|executorService
operator|=
name|endpoint
operator|.
name|createExecutor
argument_list|()
expr_stmt|;
comment|// create engine
name|dbzEngine
operator|=
name|createDbzEngine
argument_list|()
expr_stmt|;
comment|// submit task to the thread pool
name|executorService
operator|.
name|submit
argument_list|(
name|dbzEngine
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|dbzEngine
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// shutdown the thread pool gracefully
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownGraceful
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
comment|// shutdown camel consumer
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|createDbzEngine ()
specifier|private
name|EmbeddedEngine
name|createDbzEngine
parameter_list|()
block|{
return|return
name|EmbeddedEngine
operator|.
name|create
argument_list|()
operator|.
name|using
argument_list|(
name|configuration
operator|.
name|createDebeziumConfiguration
argument_list|()
argument_list|)
operator|.
name|notifying
argument_list|(
name|this
operator|::
name|onEventListener
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|onEventListener (final SourceRecord event)
specifier|private
name|void
name|onEventListener
parameter_list|(
specifier|final
name|SourceRecord
name|event
parameter_list|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createDbzExchange
argument_list|(
name|event
argument_list|)
decl_stmt|;
try|try
block|{
comment|// send message to next processor in the route
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// log exception if an exception occurred and was not handled
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

