begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|io
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|HttpFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|HttpFields
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|HttpMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|HttpURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpExchange
operator|.
name|ContentExchange
import|;
end_import

begin_class
DECL|class|JettyHttpProducer
specifier|public
class|class
name|JettyHttpProducer
extends|extends
name|DefaultProducer
argument_list|<
name|HttpExchange
argument_list|>
implements|implements
name|Producer
argument_list|<
name|HttpExchange
argument_list|>
implements|,
name|AsyncProcessor
block|{
DECL|class|CamelContentExchange
specifier|private
specifier|final
class|class
name|CamelContentExchange
extends|extends
name|ContentExchange
block|{
DECL|field|callback
specifier|private
specifier|final
name|AsyncCallback
name|callback
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|responseFields
specifier|private
name|HttpFields
name|responseFields
decl_stmt|;
DECL|method|CamelContentExchange (Exchange exchange, AsyncCallback callback)
specifier|private
name|CamelContentExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|responseFields
operator|=
operator|new
name|HttpFields
argument_list|()
expr_stmt|;
block|}
DECL|method|onResponseComplete ()
specifier|protected
name|void
name|onResponseComplete
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|onRequestComplete
argument_list|()
expr_stmt|;
try|try
block|{
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|out
operator|.
name|setBody
argument_list|(
name|getResponseContent
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|responseFields
operator|.
name|getFields
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Field
name|field
init|=
operator|(
name|Field
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|setHeader
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getResponseFields ()
specifier|public
name|HttpFields
name|getResponseFields
parameter_list|()
block|{
return|return
name|responseFields
return|;
block|}
DECL|method|onResponsetHeader (Buffer name, Buffer value)
specifier|protected
name|void
name|onResponsetHeader
parameter_list|(
name|Buffer
name|name
parameter_list|,
name|Buffer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|responseFields
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|httpClient
specifier|private
name|HttpClient
name|httpClient
decl_stmt|;
DECL|field|address
specifier|private
name|String
name|address
decl_stmt|;
DECL|method|JettyHttpProducer (HttpEndpoint endpoint)
specifier|public
name|JettyHttpProducer
parameter_list|(
name|HttpEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|httpClient
operator|=
operator|(
operator|(
name|JettyHttpComponent
operator|)
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|)
operator|.
name|getHttpClient
argument_list|()
expr_stmt|;
name|address
operator|=
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// A workaround where the Jetty client does not like to see
comment|// urls like http://google.com but does like http://google.com/
name|HttpURI
name|uri
init|=
operator|new
name|HttpURI
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getCompletePath
argument_list|()
operator|==
literal|null
condition|)
block|{
name|address
operator|+=
literal|"/"
expr_stmt|;
block|}
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|ContentExchange
name|jettyExchange
init|=
operator|new
name|CamelContentExchange
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|jettyExchange
operator|.
name|setURL
argument_list|(
name|address
argument_list|)
expr_stmt|;
comment|// If a in body can be converted to an InputStream or a Buffer
comment|// then do a POST otherwise, do a GET
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|in
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|jettyExchange
operator|.
name|setMethod
argument_list|(
name|HttpMethods
operator|.
name|POST
argument_list|)
expr_stmt|;
name|jettyExchange
operator|.
name|setRequestContentSource
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Buffer
name|buffer
init|=
name|in
operator|.
name|getBody
argument_list|(
name|Buffer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|jettyExchange
operator|.
name|setMethod
argument_list|(
name|HttpMethods
operator|.
name|POST
argument_list|)
expr_stmt|;
name|jettyExchange
operator|.
name|setRequestContent
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jettyExchange
operator|.
name|setMethod
argument_list|(
name|HttpMethods
operator|.
name|GET
argument_list|)
expr_stmt|;
block|}
block|}
name|HttpBinding
name|binding
init|=
operator|(
operator|(
name|HttpEndpoint
operator|)
name|getEndpoint
argument_list|()
operator|)
operator|.
name|getBinding
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|name
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Content-Type"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|jettyExchange
operator|.
name|setRequestContentType
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|binding
operator|.
name|shouldHeaderBePropagated
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|jettyExchange
operator|.
name|addRequestHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|httpClient
operator|.
name|send
argument_list|(
name|jettyExchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

