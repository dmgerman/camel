begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|RedirectListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|io
operator|.
name|Buffer
import|;
end_import

begin_class
DECL|class|CamelRedirectListener
specifier|public
class|class
name|CamelRedirectListener
extends|extends
name|RedirectListener
block|{
DECL|field|exchange
specifier|private
specifier|final
name|HttpExchange
name|exchange
decl_stmt|;
DECL|method|CamelRedirectListener (HttpDestination destination, HttpExchange ex)
specifier|public
name|CamelRedirectListener
parameter_list|(
name|HttpDestination
name|destination
parameter_list|,
name|HttpExchange
name|ex
parameter_list|)
block|{
name|super
argument_list|(
name|destination
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|exchange
operator|=
name|ex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponseStatus (Buffer version, int status, Buffer reason)
specifier|public
name|void
name|onResponseStatus
parameter_list|(
name|Buffer
name|version
parameter_list|,
name|int
name|status
parameter_list|,
name|Buffer
name|reason
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Update the exchange method to get to support the Post/Redirect/Get
comment|// http://en.wikipedia.org/wiki/Post/Redirect/Get
if|if
condition|(
name|exchange
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
operator|&&
operator|(
name|status
operator|==
name|HttpStatus
operator|.
name|SEE_OTHER_303
operator|||
name|status
operator|==
name|HttpStatus
operator|.
name|MOVED_TEMPORARILY_302
operator|)
condition|)
block|{
name|exchange
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// Since the default RedirectListener only cares about http
comment|// response codes 301 and 302, we override this method and
comment|// trick the super class into handling this case for us.
if|if
condition|(
name|status
operator|==
name|HttpStatus
operator|.
name|SEE_OTHER_303
condition|)
block|{
name|status
operator|=
name|HttpStatus
operator|.
name|MOVED_TEMPORARILY_302
expr_stmt|;
block|}
name|super
operator|.
name|onResponseStatus
argument_list|(
name|version
argument_list|,
name|status
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

