begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty8
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty8
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
operator|.
name|CamelHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|ThreadPool
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|CamelHttpClient8
specifier|public
class|class
name|CamelHttpClient8
extends|extends
name|CamelHttpClient
block|{
DECL|method|CamelHttpClient8 (SslContextFactory sslContextFactory)
specifier|public
name|CamelHttpClient8
parameter_list|(
name|SslContextFactory
name|sslContextFactory
parameter_list|)
block|{
name|super
argument_list|(
name|sslContextFactory
argument_list|)
expr_stmt|;
name|setConnectorType
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isSupportRedirect
argument_list|()
condition|)
block|{
name|setupRedirectListener
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
DECL|method|setConnectorType ()
specifier|private
name|void
name|setConnectorType
parameter_list|()
block|{
try|try
block|{
name|HttpClient
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setConnectorType"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
DECL|method|hasThreadPool ()
specifier|protected
name|boolean
name|hasThreadPool
parameter_list|()
block|{
try|try
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getThreadPool"
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|setThreadPoolOrExecutor (Executor pool)
specifier|protected
name|void
name|setThreadPoolOrExecutor
parameter_list|(
name|Executor
name|pool
parameter_list|)
block|{
try|try
block|{
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setThreadPool"
argument_list|,
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|setProxy (String host, int port)
specifier|public
name|void
name|setProxy
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
try|try
block|{
comment|// setProxy(new org.eclipse.jetty.client.Address(host, port));
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.eclipse.jetty.client.Address"
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|c
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|newInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setProxy"
argument_list|,
name|c
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
DECL|method|setupRedirectListener ()
specifier|private
name|void
name|setupRedirectListener
parameter_list|()
block|{
comment|// setup the listener for it
try|try
block|{
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"registerListener"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|CamelRedirectListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

