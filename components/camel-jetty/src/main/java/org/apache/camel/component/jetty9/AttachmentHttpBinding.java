begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty9
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty9
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|attachment
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|attachment
operator|.
name|AttachmentMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|attachment
operator|.
name|DefaultAttachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|DefaultHttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|MultiPartInputStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * To handle attachments with Jetty 9.  *<p/>  * This implementation is needed to deal with attachments when using Jetty 9.  */
end_comment

begin_class
DECL|class|AttachmentHttpBinding
specifier|final
class|class
name|AttachmentHttpBinding
extends|extends
name|DefaultHttpBinding
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AttachmentHttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AttachmentHttpBinding ()
name|AttachmentHttpBinding
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|populateAttachments (HttpServletRequest request, HttpMessage message)
specifier|protected
name|void
name|populateAttachments
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
block|{
name|Object
name|object
init|=
name|request
operator|.
name|getAttribute
argument_list|(
literal|"org.eclipse.jetty.servlet.MultiPartFile.multiPartInputStream"
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|MultiPartInputStreamParser
condition|)
block|{
name|MultiPartInputStreamParser
name|parser
init|=
operator|(
name|MultiPartInputStreamParser
operator|)
name|object
decl_stmt|;
name|Collection
argument_list|<
name|Part
argument_list|>
name|parts
decl_stmt|;
try|try
block|{
name|parts
operator|=
name|parser
operator|.
name|getParts
argument_list|()
expr_stmt|;
for|for
control|(
name|Part
name|part
range|:
name|parts
control|)
block|{
name|DataSource
name|ds
init|=
operator|new
name|PartDataSource
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|Attachment
name|attachment
init|=
operator|new
name|DefaultAttachment
argument_list|(
name|ds
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|headerName
range|:
name|part
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|headerValue
range|:
name|part
operator|.
name|getHeaders
argument_list|(
name|headerName
argument_list|)
control|)
block|{
name|attachment
operator|.
name|addHeader
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
name|AttachmentMessage
name|am
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getMessage
argument_list|(
name|AttachmentMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|am
operator|.
name|addAttachmentObject
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|attachment
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot populate attachments"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|populateRequestParameters (HttpServletRequest request, HttpMessage message)
specifier|protected
name|void
name|populateRequestParameters
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
throws|throws
name|Exception
block|{
comment|//we populate the http request parameters without checking the request method
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
comment|//remove Content-Encoding from request
if|if
condition|(
name|request
operator|instanceof
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
condition|)
block|{
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
name|jettyRequest
init|=
operator|(
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
operator|)
name|request
decl_stmt|;
name|jettyRequest
operator|.
name|getHttpFields
argument_list|()
operator|.
name|remove
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|)
expr_stmt|;
block|}
name|AttachmentMessage
name|am
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getMessage
argument_list|(
name|AttachmentMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|am
operator|.
name|getAttachment
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|DataHandler
name|dh
init|=
name|am
operator|.
name|getAttachment
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|dh
decl_stmt|;
if|if
condition|(
name|dh
operator|.
name|getContentType
argument_list|()
operator|==
literal|null
operator|||
name|dh
operator|.
name|getContentType
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
name|value
operator|=
name|request
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getHeaderFilterStrategy
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getHeaderFilterStrategy
argument_list|()
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|HttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// there may be multiple values for the same name
name|String
index|[]
name|values
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP parameter {} = {}"
argument_list|,
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|getHeaderFilterStrategy
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getHeaderFilterStrategy
argument_list|()
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|HttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|PartDataSource
specifier|final
class|class
name|PartDataSource
implements|implements
name|DataSource
block|{
DECL|field|part
specifier|private
specifier|final
name|Part
name|part
decl_stmt|;
DECL|method|PartDataSource (Part part)
name|PartDataSource
parameter_list|(
name|Part
name|part
parameter_list|)
block|{
name|this
operator|.
name|part
operator|=
name|part
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOutputStream ()
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|part
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|part
operator|.
name|getInputStream
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|part
operator|.
name|getContentType
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

