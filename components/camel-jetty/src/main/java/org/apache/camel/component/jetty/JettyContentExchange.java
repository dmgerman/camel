begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|io
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|client
operator|.
name|ContentExchange
import|;
end_import

begin_comment
comment|/**  * Jetty specific exchange which keeps track of the the request and response.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|JettyContentExchange
specifier|public
class|class
name|JettyContentExchange
extends|extends
name|ContentExchange
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JettyContentExchange
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|headersComplete
specifier|private
name|CountDownLatch
name|headersComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|bodyComplete
specifier|private
name|CountDownLatch
name|bodyComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|failed
specifier|private
specifier|volatile
name|boolean
name|failed
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|volatile
name|Exchange
name|exchange
decl_stmt|;
DECL|field|callback
specifier|private
specifier|volatile
name|AsyncCallback
name|callback
decl_stmt|;
DECL|method|JettyContentExchange ()
specifier|public
name|JettyContentExchange
parameter_list|()
block|{
comment|// keep headers by default
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|setExchange (Exchange exchange)
specifier|public
name|void
name|setExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
block|}
DECL|method|setCallback (AsyncCallback callback)
specifier|public
name|void
name|setCallback
parameter_list|(
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponseHeader (Buffer name, Buffer value)
specifier|protected
name|void
name|onResponseHeader
parameter_list|(
name|Buffer
name|name
parameter_list|,
name|Buffer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|onResponseHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponseHeaderComplete ()
specifier|protected
name|void
name|onResponseHeaderComplete
parameter_list|()
throws|throws
name|IOException
block|{
name|headersComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onResponseHeader for "
operator|+
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onResponseComplete ()
specifier|protected
name|void
name|onResponseComplete
parameter_list|()
throws|throws
name|IOException
block|{
name|bodyComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onResponseComplete for "
operator|+
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
operator|&&
name|exchange
operator|!=
literal|null
condition|)
block|{
comment|// signal we are complete
name|callback
operator|.
name|onTaskCompleted
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onResponseStatus (Buffer version, int status, Buffer reason)
specifier|protected
name|void
name|onResponseStatus
parameter_list|(
name|Buffer
name|version
parameter_list|,
name|int
name|status
parameter_list|,
name|Buffer
name|reason
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|onResponseStatus
argument_list|(
name|version
argument_list|,
name|status
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|failed
operator|=
name|status
operator|!=
literal|200
expr_stmt|;
block|}
DECL|method|isHeadersComplete ()
specifier|public
name|boolean
name|isHeadersComplete
parameter_list|()
block|{
return|return
name|headersComplete
operator|.
name|getCount
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|isBodyComplete ()
specifier|public
name|boolean
name|isBodyComplete
parameter_list|()
block|{
return|return
name|bodyComplete
operator|.
name|getCount
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|getHeaders ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
DECL|method|getBody ()
specifier|public
name|String
name|getBody
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
return|return
name|super
operator|.
name|getResponseContent
argument_list|()
return|;
block|}
DECL|method|waitForHeadersToComplete ()
specifier|public
name|void
name|waitForHeadersToComplete
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Waiting for headers to complete for "
operator|+
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|headersComplete
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForBodyToComplete ()
specifier|public
name|void
name|waitForBodyToComplete
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Waiting for body to complete for "
operator|+
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bodyComplete
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForBodyToComplete (long timeout, TimeUnit timeUnit)
specifier|public
name|boolean
name|waitForBodyToComplete
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Waiting for body to complete for "
operator|+
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bodyComplete
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
DECL|method|isFailed ()
specifier|public
name|boolean
name|isFailed
parameter_list|()
block|{
return|return
name|failed
return|;
block|}
DECL|method|getUrl ()
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
name|String
name|params
init|=
name|getRequestFields
argument_list|()
operator|.
name|getStringField
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_ENCODING
argument_list|)
decl_stmt|;
return|return
name|getScheme
argument_list|()
operator|+
literal|"//"
operator|+
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|getURI
argument_list|()
operator|+
operator|(
name|params
operator|!=
literal|null
condition|?
literal|"?"
operator|+
name|params
else|:
literal|""
operator|)
return|;
block|}
block|}
end_class

end_unit

