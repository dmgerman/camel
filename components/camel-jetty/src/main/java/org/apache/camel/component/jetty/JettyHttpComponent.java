begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|CamelServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|jmx
operator|.
name|MBeanContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlets
operator|.
name|MultiPartFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|component
operator|.
name|LifeCycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An HttpComponent which starts an embedded Jetty for to handle consuming from  * the http endpoints.  *  * @version   */
end_comment

begin_class
DECL|class|JettyHttpComponent
specifier|public
class|class
name|JettyHttpComponent
extends|extends
name|HttpComponent
block|{
DECL|field|TMP_DIR
specifier|public
specifier|static
specifier|final
name|String
name|TMP_DIR
init|=
literal|"CamelJettyTempDir"
decl_stmt|;
DECL|field|CONNECTORS
specifier|protected
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
name|CONNECTORS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JettyHttpComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|JETTY_SSL_KEYSTORE
specifier|private
specifier|static
specifier|final
name|String
name|JETTY_SSL_KEYSTORE
init|=
literal|"org.eclipse.jetty.ssl.keystore"
decl_stmt|;
DECL|field|JETTY_SSL_KEYPASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|JETTY_SSL_KEYPASSWORD
init|=
literal|"org.eclipse.jetty.ssl.keypassword"
decl_stmt|;
DECL|field|JETTY_SSL_PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|JETTY_SSL_PASSWORD
init|=
literal|"org.eclipse.jetty.ssl.password"
decl_stmt|;
DECL|field|sslKeyPassword
specifier|protected
name|String
name|sslKeyPassword
decl_stmt|;
DECL|field|sslPassword
specifier|protected
name|String
name|sslPassword
decl_stmt|;
DECL|field|sslKeystore
specifier|protected
name|String
name|sslKeystore
decl_stmt|;
DECL|field|sslSocketConnectors
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|SslSelectChannelConnector
argument_list|>
name|sslSocketConnectors
decl_stmt|;
DECL|field|socketConnectors
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|SelectChannelConnector
argument_list|>
name|socketConnectors
decl_stmt|;
DECL|field|sslSocketConnectorProperties
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sslSocketConnectorProperties
decl_stmt|;
DECL|field|socketConnectorProperties
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|socketConnectorProperties
decl_stmt|;
DECL|field|httpClient
specifier|protected
name|HttpClient
name|httpClient
decl_stmt|;
DECL|field|httpClientThreadPool
specifier|protected
name|ThreadPool
name|httpClientThreadPool
decl_stmt|;
DECL|field|httpClientMinThreads
specifier|protected
name|Integer
name|httpClientMinThreads
decl_stmt|;
DECL|field|httpClientMaxThreads
specifier|protected
name|Integer
name|httpClientMaxThreads
decl_stmt|;
DECL|field|minThreads
specifier|protected
name|Integer
name|minThreads
decl_stmt|;
DECL|field|maxThreads
specifier|protected
name|Integer
name|maxThreads
decl_stmt|;
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|mbContainer
specifier|protected
name|MBeanContainer
name|mbContainer
decl_stmt|;
DECL|field|enableJmx
specifier|protected
name|boolean
name|enableJmx
decl_stmt|;
DECL|field|jettyHttpBinding
specifier|protected
name|JettyHttpBinding
name|jettyHttpBinding
decl_stmt|;
DECL|field|continuationTimeout
specifier|protected
name|Long
name|continuationTimeout
decl_stmt|;
DECL|field|useContinuation
specifier|protected
name|boolean
name|useContinuation
init|=
literal|true
decl_stmt|;
DECL|field|sslContextParameters
specifier|protected
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
DECL|field|isExplicitHttpClient
specifier|protected
name|boolean
name|isExplicitHttpClient
decl_stmt|;
DECL|class|ConnectorRef
class|class
name|ConnectorRef
block|{
DECL|field|server
name|Server
name|server
decl_stmt|;
DECL|field|connector
name|Connector
name|connector
decl_stmt|;
DECL|field|servlet
name|CamelServlet
name|servlet
decl_stmt|;
DECL|field|refCount
name|int
name|refCount
decl_stmt|;
DECL|method|ConnectorRef (Server server, Connector connector, CamelServlet servlet)
specifier|public
name|ConnectorRef
parameter_list|(
name|Server
name|server
parameter_list|,
name|Connector
name|connector
parameter_list|,
name|CamelServlet
name|servlet
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|servlet
operator|=
name|servlet
expr_stmt|;
name|increment
argument_list|()
expr_stmt|;
block|}
DECL|method|increment ()
specifier|public
name|int
name|increment
parameter_list|()
block|{
return|return
operator|++
name|refCount
return|;
block|}
DECL|method|decrement ()
specifier|public
name|int
name|decrement
parameter_list|()
block|{
return|return
operator|--
name|refCount
return|;
block|}
DECL|method|getRefCount ()
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
comment|// must extract well known parameters before we create the endpoint
name|List
argument_list|<
name|Handler
argument_list|>
name|handlerList
init|=
name|resolveAndRemoveReferenceListParameter
argument_list|(
name|parameters
argument_list|,
literal|"handlers"
argument_list|,
name|Handler
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpBinding
name|binding
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpBindingRef"
argument_list|,
name|HttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|JettyHttpBinding
name|jettyBinding
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"jettyHttpBindingRef"
argument_list|,
name|JettyHttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|throwExceptionOnFailure
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"throwExceptionOnFailure"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|transferException
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"transferException"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|bridgeEndpoint
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"bridgeEndpoint"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|matchOnUriPrefix
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"matchOnUriPrefix"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|enableJmx
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"enableJmx"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|enableMultipartFilter
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"enableMultipartFilter"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Filter
name|multipartFilter
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"multipartFilterRef"
argument_list|,
name|Filter
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
name|resolveAndRemoveReferenceListParameter
argument_list|(
name|parameters
argument_list|,
literal|"filtersRef"
argument_list|,
name|Filter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|continuationTimeout
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"continuationTimeout"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|useContinuation
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"useContinuation"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|SSLContextParameters
name|sslContextParameters
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"sslContextParametersRef"
argument_list|,
name|SSLContextParameters
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// configure http client if we have url configuration for it
comment|// http client is only used for jetty http producer (hence not very commonly used)
name|HttpClient
name|client
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|IntrospectionSupport
operator|.
name|hasProperties
argument_list|(
name|parameters
argument_list|,
literal|"httpClient."
argument_list|)
operator|||
name|sslContextParameters
operator|!=
literal|null
condition|)
block|{
name|client
operator|=
name|getNewHttpClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|IntrospectionSupport
operator|.
name|hasProperties
argument_list|(
name|parameters
argument_list|,
literal|"httpClient."
argument_list|)
condition|)
block|{
if|if
condition|(
name|isExplicitHttpClient
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The user explicitly set an HttpClient instance on the component, "
operator|+
literal|"but this endpoint provides HttpClient configuration.  Are you sure that "
operator|+
literal|"this is what was intended?  Applying endpoint configuration to a new HttpClient instance "
operator|+
literal|"to avoid altering existing HttpClient instances."
argument_list|)
expr_stmt|;
block|}
comment|// set additional parameters on http client
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|client
argument_list|,
name|parameters
argument_list|,
literal|"httpClient."
argument_list|)
expr_stmt|;
comment|// validate that we could resolve all httpClient. parameters as this component is lenient
name|validateParameters
argument_list|(
name|uri
argument_list|,
name|parameters
argument_list|,
literal|"httpClient."
argument_list|)
expr_stmt|;
block|}
comment|// Note that the component level instance is already configured in getNewHttpClient.
comment|// We replace it here for endpoint level config.
if|if
condition|(
name|sslContextParameters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isExplicitHttpClient
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The user explicitly set an HttpClient instance on the component, "
operator|+
literal|"but this endpoint provides SSLContextParameters configuration.  Are you sure that "
operator|+
literal|"this is what was intended?  Applying endpoint configuration to a new HttpClient instance "
operator|+
literal|"to avoid altering existing HttpClient instances."
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|CamelHttpClient
operator|)
name|client
operator|)
operator|.
name|setSSLContext
argument_list|(
name|sslContextParameters
operator|.
name|createSSLContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Either we use the default one created by the component or we are using
comment|// one explicitly set by the end user, either way, we just use it as is.
name|client
operator|=
name|getHttpClient
argument_list|()
expr_stmt|;
block|}
comment|// keep the configure parameters for the http client
for|for
control|(
name|String
name|key
range|:
name|parameters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|httpClientParameters
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|String
name|address
init|=
name|uri
operator|.
name|startsWith
argument_list|(
literal|"jetty:"
argument_list|)
condition|?
name|remaining
else|:
name|uri
decl_stmt|;
name|URI
name|addressUri
init|=
operator|new
name|URI
argument_list|(
name|UnsafeUriCharactersEncoder
operator|.
name|encode
argument_list|(
name|address
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|endpointUri
init|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
name|addressUri
argument_list|,
name|httpClientParameters
argument_list|)
decl_stmt|;
comment|// restructure uri to be based on the parameters left as we dont want to include the Camel internal options
name|URI
name|httpUri
init|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
name|addressUri
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|// create endpoint after all known parameters have been extracted from parameters
name|JettyHttpEndpoint
name|endpoint
init|=
operator|new
name|JettyHttpEndpoint
argument_list|(
name|this
argument_list|,
name|endpointUri
operator|.
name|toString
argument_list|()
argument_list|,
name|httpUri
argument_list|)
decl_stmt|;
name|setEndpointHeaderFilterStrategy
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handlerList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|endpoint
operator|.
name|setHandlers
argument_list|(
name|handlerList
argument_list|)
expr_stmt|;
block|}
comment|// prefer to use endpoint configured over component configured
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
comment|// fallback to component configured
name|binding
operator|=
name|getHttpBinding
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setBinding
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
comment|// prefer to use endpoint configured over component configured
if|if
condition|(
name|jettyBinding
operator|==
literal|null
condition|)
block|{
comment|// fallback to component configured
name|jettyBinding
operator|=
name|getJettyHttpBinding
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jettyBinding
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setJettyBinding
argument_list|(
name|jettyBinding
argument_list|)
expr_stmt|;
block|}
comment|// should we use an exception for failed error codes?
if|if
condition|(
name|throwExceptionOnFailure
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setThrowExceptionOnFailure
argument_list|(
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
block|}
comment|// should we transfer exception as serialized object
if|if
condition|(
name|transferException
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setTransferException
argument_list|(
name|transferException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bridgeEndpoint
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setBridgeEndpoint
argument_list|(
name|bridgeEndpoint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matchOnUriPrefix
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setMatchOnUriPrefix
argument_list|(
name|matchOnUriPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableJmx
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setEnableJmx
argument_list|(
name|enableJmx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set this option based on setting of JettyHttpComponent
name|endpoint
operator|.
name|setEnableJmx
argument_list|(
name|isEnableJmx
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setEnableMultipartFilter
argument_list|(
name|enableMultipartFilter
argument_list|)
expr_stmt|;
if|if
condition|(
name|multipartFilter
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setMultipartFilter
argument_list|(
name|multipartFilter
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setEnableMultipartFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filters
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|continuationTimeout
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setContinuationTimeout
argument_list|(
name|continuationTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useContinuation
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setUseContinuation
argument_list|(
name|useContinuation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sslContextParameters
operator|==
literal|null
condition|)
block|{
name|sslContextParameters
operator|=
name|this
operator|.
name|sslContextParameters
expr_stmt|;
block|}
name|endpoint
operator|.
name|setSslContextParameters
argument_list|(
name|sslContextParameters
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
comment|/**      * Connects the URL specified on the endpoint to the specified processor.      */
annotation|@
name|Override
DECL|method|connect (HttpConsumer consumer)
specifier|public
name|void
name|connect
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure that there is a connector for the requested endpoint.
name|JettyHttpEndpoint
name|endpoint
init|=
operator|(
name|JettyHttpEndpoint
operator|)
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
name|getConnectorKey
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|CONNECTORS
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|==
literal|null
condition|)
block|{
name|Connector
name|connector
decl_stmt|;
if|if
condition|(
literal|"https"
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|connector
operator|=
name|getSslSocketConnector
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|=
name|getSocketConnector
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setPort
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setHost
argument_list|(
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"localhost"
operator|.
name|equalsIgnoreCase
argument_list|(
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"You use localhost interface! It means that no external connections will be available."
operator|+
literal|" Don't you want to use 0.0.0.0 instead (all network interfaces)? "
operator|+
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|Server
name|server
init|=
name|createServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|isEnableJmx
argument_list|()
condition|)
block|{
name|enableJmx
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|=
operator|new
name|ConnectorRef
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|createServletForConnector
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|endpoint
operator|.
name|getHandlers
argument_list|()
argument_list|,
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
comment|// must enable session before we start
if|if
condition|(
name|endpoint
operator|.
name|isSessionSupport
argument_list|()
condition|)
block|{
name|enableSessionSupport
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
name|connectorRef
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|CONNECTORS
operator|.
name|put
argument_list|(
name|connectorKey
argument_list|,
name|connectorRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ref track the connector
name|connectorRef
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
comment|// check the session support
if|if
condition|(
name|endpoint
operator|.
name|isSessionSupport
argument_list|()
condition|)
block|{
name|enableSessionSupport
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isEnableMultipartFilter
argument_list|()
condition|)
block|{
name|enableMultipartFilter
argument_list|(
name|endpoint
argument_list|,
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|endpoint
operator|.
name|getFilters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|setFilters
argument_list|(
name|endpoint
argument_list|,
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
name|connectorRef
operator|.
name|servlet
operator|.
name|connect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|enableJmx (Server server)
specifier|private
name|void
name|enableJmx
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|MBeanContainer
name|containerToRegister
init|=
name|getMbContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerToRegister
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Jetty JMX Extensions is enabled"
argument_list|)
expr_stmt|;
name|server
operator|.
name|getContainer
argument_list|()
operator|.
name|addEventListener
argument_list|(
name|containerToRegister
argument_list|)
expr_stmt|;
comment|// Since we may have many Servers running, don't tie the MBeanContainer
comment|// to a Server lifecycle or we end up closing it while it is still in use.
comment|//server.addBean(mbContainer);
block|}
block|}
DECL|method|enableSessionSupport (Server server, String connectorKey)
specifier|private
name|void
name|enableSessionSupport
parameter_list|(
name|Server
name|server
parameter_list|,
name|String
name|connectorKey
parameter_list|)
throws|throws
name|Exception
block|{
name|ServletContextHandler
name|context
init|=
name|server
operator|.
name|getChildHandlerByClass
argument_list|(
name|ServletContextHandler
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getSessionHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SessionHandler
name|sessionHandler
init|=
operator|new
name|SessionHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isStarted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Server has already been started. Cannot enabled sessionSupport on "
operator|+
name|connectorKey
argument_list|)
throw|;
block|}
else|else
block|{
name|context
operator|.
name|setSessionHandler
argument_list|(
name|sessionHandler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setFilters (JettyHttpEndpoint endpoint, Server server, String connectorKey)
specifier|private
name|void
name|setFilters
parameter_list|(
name|JettyHttpEndpoint
name|endpoint
parameter_list|,
name|Server
name|server
parameter_list|,
name|String
name|connectorKey
parameter_list|)
block|{
name|ServletContextHandler
name|context
init|=
name|server
operator|.
name|getChildHandlerByClass
argument_list|(
name|ServletContextHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
name|endpoint
operator|.
name|getFilters
argument_list|()
decl_stmt|;
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
name|FilterHolder
name|filterHolder
init|=
operator|new
name|FilterHolder
argument_list|()
decl_stmt|;
name|filterHolder
operator|.
name|setFilter
argument_list|(
operator|new
name|CamelFilterWrapper
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pathSpec
init|=
name|endpoint
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathSpec
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|pathSpec
argument_list|)
condition|)
block|{
name|pathSpec
operator|=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isMatchOnUriPrefix
argument_list|()
condition|)
block|{
name|pathSpec
operator|=
name|pathSpec
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|pathSpec
operator|+
literal|"*"
else|:
name|pathSpec
operator|+
literal|"/*"
expr_stmt|;
block|}
name|addFilter
argument_list|(
name|context
argument_list|,
name|filterHolder
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addFilter (ServletContextHandler context, FilterHolder filterHolder, String pathSpec)
specifier|private
name|void
name|addFilter
parameter_list|(
name|ServletContextHandler
name|context
parameter_list|,
name|FilterHolder
name|filterHolder
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
name|context
operator|.
name|getServletHandler
argument_list|()
operator|.
name|addFilterWithMapping
argument_list|(
name|filterHolder
argument_list|,
name|pathSpec
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|enableMultipartFilter (HttpEndpoint endpoint, Server server, String connectorKey)
specifier|private
name|void
name|enableMultipartFilter
parameter_list|(
name|HttpEndpoint
name|endpoint
parameter_list|,
name|Server
name|server
parameter_list|,
name|String
name|connectorKey
parameter_list|)
throws|throws
name|Exception
block|{
name|ServletContextHandler
name|context
init|=
name|server
operator|.
name|getChildHandlerByClass
argument_list|(
name|ServletContextHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|CamelContext
name|camelContext
init|=
name|this
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
name|FilterHolder
name|filterHolder
init|=
operator|new
name|FilterHolder
argument_list|()
decl_stmt|;
name|filterHolder
operator|.
name|setInitParameter
argument_list|(
literal|"deleteFiles"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|camelContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|TMP_DIR
argument_list|)
argument_list|)
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|camelContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|TMP_DIR
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"The temp file directory of camel-jetty is not exists, please recheck it with directory name :"
operator|+
name|camelContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|TMP_DIR
argument_list|)
argument_list|)
throw|;
block|}
name|context
operator|.
name|setAttribute
argument_list|(
literal|"javax.servlet.context.tempdir"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|// if a filter ref was provided, use it.
name|Filter
name|filter
init|=
operator|(
operator|(
name|JettyHttpEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getMultipartFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
comment|// if no filter ref was provided, use the default filter
name|filter
operator|=
operator|new
name|MultiPartFilter
argument_list|()
expr_stmt|;
block|}
name|filterHolder
operator|.
name|setFilter
argument_list|(
operator|new
name|CamelFilterWrapper
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pathSpec
init|=
name|endpoint
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathSpec
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|pathSpec
argument_list|)
condition|)
block|{
name|pathSpec
operator|=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isMatchOnUriPrefix
argument_list|()
condition|)
block|{
name|pathSpec
operator|=
name|pathSpec
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|pathSpec
operator|+
literal|"*"
else|:
name|pathSpec
operator|+
literal|"/*"
expr_stmt|;
block|}
name|addFilter
argument_list|(
name|context
argument_list|,
name|filterHolder
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"using multipart filter implementation "
operator|+
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for path "
operator|+
name|pathSpec
argument_list|)
expr_stmt|;
block|}
comment|/**      * Disconnects the URL specified on the endpoint from the specified processor.      */
annotation|@
name|Override
DECL|method|disconnect (HttpConsumer consumer)
specifier|public
name|void
name|disconnect
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
comment|// If the connector is not needed anymore then stop it
name|HttpEndpoint
name|endpoint
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
name|getConnectorKey
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|CONNECTORS
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|!=
literal|null
condition|)
block|{
name|connectorRef
operator|.
name|servlet
operator|.
name|disconnect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectorRef
operator|.
name|decrement
argument_list|()
operator|==
literal|0
condition|)
block|{
name|connectorRef
operator|.
name|server
operator|.
name|removeConnector
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|CONNECTORS
operator|.
name|remove
argument_list|(
name|connectorKey
argument_list|)
expr_stmt|;
comment|// Camel controls the lifecycle of these entities so remove the
comment|// registered MBeans when Camel is done with the managed objects.
if|if
condition|(
name|mbContainer
operator|!=
literal|null
condition|)
block|{
name|mbContainer
operator|.
name|removeBean
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|)
expr_stmt|;
name|mbContainer
operator|.
name|removeBean
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|getConnectorKey (HttpEndpoint endpoint)
specifier|private
name|String
name|getConnectorKey
parameter_list|(
name|HttpEndpoint
name|endpoint
parameter_list|)
block|{
return|return
name|endpoint
operator|.
name|getProtocol
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getSslKeyPassword ()
specifier|public
name|String
name|getSslKeyPassword
parameter_list|()
block|{
return|return
name|sslKeyPassword
return|;
block|}
DECL|method|setSslKeyPassword (String sslKeyPassword)
specifier|public
name|void
name|setSslKeyPassword
parameter_list|(
name|String
name|sslKeyPassword
parameter_list|)
block|{
name|this
operator|.
name|sslKeyPassword
operator|=
name|sslKeyPassword
expr_stmt|;
block|}
DECL|method|getSslPassword ()
specifier|public
name|String
name|getSslPassword
parameter_list|()
block|{
return|return
name|sslPassword
return|;
block|}
DECL|method|setSslPassword (String sslPassword)
specifier|public
name|void
name|setSslPassword
parameter_list|(
name|String
name|sslPassword
parameter_list|)
block|{
name|this
operator|.
name|sslPassword
operator|=
name|sslPassword
expr_stmt|;
block|}
DECL|method|setKeystore (String sslKeystore)
specifier|public
name|void
name|setKeystore
parameter_list|(
name|String
name|sslKeystore
parameter_list|)
block|{
name|this
operator|.
name|sslKeystore
operator|=
name|sslKeystore
expr_stmt|;
block|}
DECL|method|getKeystore ()
specifier|public
name|String
name|getKeystore
parameter_list|()
block|{
return|return
name|sslKeystore
return|;
block|}
DECL|method|getSslSocketConnector (JettyHttpEndpoint endpoint)
specifier|protected
name|SslSelectChannelConnector
name|getSslSocketConnector
parameter_list|(
name|JettyHttpEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|SslSelectChannelConnector
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sslSocketConnectors
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|sslSocketConnectors
operator|.
name|get
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|createSslSocketConnector
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createSslSocketConnector (JettyHttpEndpoint endpoint)
specifier|protected
name|SslSelectChannelConnector
name|createSslSocketConnector
parameter_list|(
name|JettyHttpEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|SslSelectChannelConnector
name|answer
init|=
literal|null
decl_stmt|;
comment|// Note that this was set on the endpoint when it was constructed.  It was
comment|// either explicitly set at the component or on the endpoint, but either way,
comment|// the value is already set.  We therefore do not need to look at the component
comment|// level SSLContextParameters again in this method.
name|SSLContextParameters
name|endpointSslContextParameters
init|=
name|endpoint
operator|.
name|getSslContextParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpointSslContextParameters
operator|!=
literal|null
condition|)
block|{
name|SslContextFactory
name|contextFact
init|=
operator|new
name|SslContextFactory
argument_list|()
block|{
comment|// This method is for Jetty 7.0.x ~ 7.4.x
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|boolean
name|checkConfig
parameter_list|()
block|{
if|if
condition|(
name|getSslContext
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|checkSSLContextFactoryConfig
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// This method is for Jetty 7.5.x
specifier|public
name|void
name|checkKeyStore
parameter_list|()
block|{
comment|// here we don't check the SslContext as it is already created
block|}
block|}
decl_stmt|;
name|contextFact
operator|.
name|setSslContext
argument_list|(
name|endpointSslContextParameters
operator|.
name|createSSLContext
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
range|:
name|SslSelectChannelConnector
operator|.
name|class
operator|.
name|getConstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|c
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|isInstance
argument_list|(
name|contextFact
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|(
name|SslSelectChannelConnector
operator|)
name|c
operator|.
name|newInstance
argument_list|(
name|contextFact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|SslSelectChannelConnector
argument_list|()
expr_stmt|;
comment|// with default null values, jetty ssl system properties
comment|// and console will be read by jetty implementation
name|String
name|keystoreProperty
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_SSL_KEYSTORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystoreProperty
operator|!=
literal|null
condition|)
block|{
name|setKeyStorePath
argument_list|(
name|answer
argument_list|,
name|keystoreProperty
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sslKeystore
operator|!=
literal|null
condition|)
block|{
name|setKeyStorePath
argument_list|(
name|answer
argument_list|,
name|sslKeystore
argument_list|)
expr_stmt|;
block|}
name|String
name|keystorePassword
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_SSL_KEYPASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystorePassword
operator|!=
literal|null
condition|)
block|{
name|setKeyManagerPassword
argument_list|(
name|answer
argument_list|,
name|keystorePassword
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sslKeyPassword
operator|!=
literal|null
condition|)
block|{
name|setKeyManagerPassword
argument_list|(
name|answer
argument_list|,
name|sslKeyPassword
argument_list|)
expr_stmt|;
block|}
name|String
name|password
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_SSL_PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|setKeyStorePassword
argument_list|(
name|answer
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sslPassword
operator|!=
literal|null
condition|)
block|{
name|setKeyStorePassword
argument_list|(
name|answer
argument_list|,
name|sslPassword
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getSslSocketConnectorProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|endpointSslContextParameters
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An SSLContextParameters instance is configured "
operator|+
literal|"in addition to SslSocketConnectorProperties.  Any SslSocketConnector properties"
operator|+
literal|"related to the SSLContext will be ignored in favor of the settings provided through"
operator|+
literal|"SSLContextParameters."
argument_list|)
expr_stmt|;
block|}
comment|// must copy the map otherwise it will be deleted
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|getSslSocketConnectorProperties
argument_list|()
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|answer
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There are "
operator|+
name|properties
operator|.
name|size
argument_list|()
operator|+
literal|" parameters that couldn't be set on the SslSocketConnector."
operator|+
literal|" Check the uri if the parameters are spelt correctly and that they are properties of the SslSocketConnector."
operator|+
literal|" Unknown parameters=["
operator|+
name|properties
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|invokeSslContextFactoryMethod (Object connector, String method, String value)
specifier|private
name|void
name|invokeSslContextFactoryMethod
parameter_list|(
name|Object
name|connector
parameter_list|,
name|String
name|method
parameter_list|,
name|String
name|value
parameter_list|)
block|{
try|try
block|{
name|Object
name|factory
init|=
name|connector
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getSslContextFactory"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connector
argument_list|)
decl_stmt|;
name|factory
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|method
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|factory
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Problem setting "
operator|+
name|method
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setKeyStorePassword (SslSelectChannelConnector answer, String password)
specifier|private
name|void
name|setKeyStorePassword
parameter_list|(
name|SslSelectChannelConnector
name|answer
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|invokeSslContextFactoryMethod
argument_list|(
name|answer
argument_list|,
literal|"setKeyStorePassword"
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
DECL|method|setKeyManagerPassword (SslSelectChannelConnector answer, String keystorePassword)
specifier|private
name|void
name|setKeyManagerPassword
parameter_list|(
name|SslSelectChannelConnector
name|answer
parameter_list|,
name|String
name|keystorePassword
parameter_list|)
block|{
name|invokeSslContextFactoryMethod
argument_list|(
name|answer
argument_list|,
literal|"setKeyManagerPassword"
argument_list|,
name|keystorePassword
argument_list|)
expr_stmt|;
block|}
DECL|method|setKeyStorePath (SslSelectChannelConnector answer, String keystoreProperty)
specifier|private
name|void
name|setKeyStorePath
parameter_list|(
name|SslSelectChannelConnector
name|answer
parameter_list|,
name|String
name|keystoreProperty
parameter_list|)
block|{
name|invokeSslContextFactoryMethod
argument_list|(
name|answer
argument_list|,
literal|"setKeyStorePath"
argument_list|,
name|keystoreProperty
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSSLContextFactoryConfig (Object instance)
specifier|protected
name|boolean
name|checkSSLContextFactoryConfig
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"checkConfig"
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|false
return|;
block|}
DECL|method|getSslSocketConnectors ()
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|SslSelectChannelConnector
argument_list|>
name|getSslSocketConnectors
parameter_list|()
block|{
return|return
name|sslSocketConnectors
return|;
block|}
DECL|method|setSslSocketConnectors (Map <Integer, SslSelectChannelConnector> connectors)
specifier|public
name|void
name|setSslSocketConnectors
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|SslSelectChannelConnector
argument_list|>
name|connectors
parameter_list|)
block|{
name|sslSocketConnectors
operator|=
name|connectors
expr_stmt|;
block|}
DECL|method|getSocketConnector (int port)
specifier|public
name|SelectChannelConnector
name|getSocketConnector
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|SelectChannelConnector
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|socketConnectors
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|socketConnectors
operator|.
name|get
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|createSocketConnector
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createSocketConnector ()
specifier|protected
name|SelectChannelConnector
name|createSocketConnector
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectChannelConnector
name|answer
init|=
operator|new
name|SelectChannelConnector
argument_list|()
decl_stmt|;
if|if
condition|(
name|getSocketConnectorProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// must copy the map otherwise it will be deleted
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|getSocketConnectorProperties
argument_list|()
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|answer
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There are "
operator|+
name|properties
operator|.
name|size
argument_list|()
operator|+
literal|" parameters that couldn't be set on the SocketConnector."
operator|+
literal|" Check the uri if the parameters are spelt correctly and that they are properties of the SelectChannelConnector."
operator|+
literal|" Unknown parameters=["
operator|+
name|properties
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|setSocketConnectors (Map<Integer, SelectChannelConnector> socketConnectors)
specifier|public
name|void
name|setSocketConnectors
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|SelectChannelConnector
argument_list|>
name|socketConnectors
parameter_list|)
block|{
name|this
operator|.
name|socketConnectors
operator|=
name|socketConnectors
expr_stmt|;
block|}
DECL|method|getHttpClient ()
specifier|public
specifier|synchronized
name|HttpClient
name|getHttpClient
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|httpClient
operator|==
literal|null
condition|)
block|{
name|httpClient
operator|=
name|this
operator|.
name|getNewHttpClient
argument_list|()
expr_stmt|;
block|}
return|return
name|httpClient
return|;
block|}
DECL|method|getNewHttpClient ()
specifier|public
name|CamelHttpClient
name|getNewHttpClient
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelHttpClient
name|httpClient
init|=
operator|new
name|CamelHttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|setConnectorType
argument_list|(
name|HttpClient
operator|.
name|CONNECTOR_SELECT_CHANNEL
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyHost"
argument_list|)
operator|!=
literal|null
operator|&&
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyPort"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|host
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyHost"
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyPort"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Java System Property http.proxyHost and http.proxyPort detected. Using http proxy host: {} port: {}"
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|httpClient
operator|.
name|setProxy
argument_list|(
operator|new
name|Address
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// use QueueThreadPool as the default bounded is deprecated (see SMXCOMP-157)
if|if
condition|(
name|getHttpClientThreadPool
argument_list|()
operator|==
literal|null
condition|)
block|{
name|QueuedThreadPool
name|qtp
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
if|if
condition|(
name|httpClientMinThreads
operator|!=
literal|null
condition|)
block|{
name|qtp
operator|.
name|setMinThreads
argument_list|(
name|httpClientMinThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpClientMaxThreads
operator|!=
literal|null
condition|)
block|{
name|qtp
operator|.
name|setMaxThreads
argument_list|(
name|httpClientMaxThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// let the thread names indicate they are from the client
name|qtp
operator|.
name|setName
argument_list|(
literal|"CamelJettyClient("
operator|+
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|httpClient
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
name|qtp
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Error starting JettyHttpClient thread pool: "
operator|+
name|qtp
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|setHttpClientThreadPool
argument_list|(
name|qtp
argument_list|)
expr_stmt|;
block|}
name|httpClient
operator|.
name|setThreadPool
argument_list|(
name|getHttpClientThreadPool
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sslContextParameters
operator|!=
literal|null
condition|)
block|{
name|httpClient
operator|.
name|setSSLContext
argument_list|(
name|this
operator|.
name|sslContextParameters
operator|.
name|createSSLContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|httpClient
return|;
block|}
DECL|method|setHttpClient (HttpClient httpClient)
specifier|public
name|void
name|setHttpClient
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|)
block|{
if|if
condition|(
name|httpClient
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|isExplicitHttpClient
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|isExplicitHttpClient
operator|=
literal|false
expr_stmt|;
block|}
name|this
operator|.
name|httpClient
operator|=
name|httpClient
expr_stmt|;
block|}
DECL|method|getHttpClientThreadPool ()
specifier|public
name|ThreadPool
name|getHttpClientThreadPool
parameter_list|()
block|{
return|return
name|httpClientThreadPool
return|;
block|}
DECL|method|setHttpClientThreadPool (ThreadPool httpClientThreadPool)
specifier|public
name|void
name|setHttpClientThreadPool
parameter_list|(
name|ThreadPool
name|httpClientThreadPool
parameter_list|)
block|{
name|this
operator|.
name|httpClientThreadPool
operator|=
name|httpClientThreadPool
expr_stmt|;
block|}
DECL|method|getHttpClientMinThreads ()
specifier|public
name|Integer
name|getHttpClientMinThreads
parameter_list|()
block|{
return|return
name|httpClientMinThreads
return|;
block|}
DECL|method|setHttpClientMinThreads (Integer httpClientMinThreads)
specifier|public
name|void
name|setHttpClientMinThreads
parameter_list|(
name|Integer
name|httpClientMinThreads
parameter_list|)
block|{
name|this
operator|.
name|httpClientMinThreads
operator|=
name|httpClientMinThreads
expr_stmt|;
block|}
DECL|method|getHttpClientMaxThreads ()
specifier|public
name|Integer
name|getHttpClientMaxThreads
parameter_list|()
block|{
return|return
name|httpClientMaxThreads
return|;
block|}
DECL|method|setHttpClientMaxThreads (Integer httpClientMaxThreads)
specifier|public
name|void
name|setHttpClientMaxThreads
parameter_list|(
name|Integer
name|httpClientMaxThreads
parameter_list|)
block|{
name|this
operator|.
name|httpClientMaxThreads
operator|=
name|httpClientMaxThreads
expr_stmt|;
block|}
DECL|method|getMinThreads ()
specifier|public
name|Integer
name|getMinThreads
parameter_list|()
block|{
return|return
name|minThreads
return|;
block|}
DECL|method|setMinThreads (Integer minThreads)
specifier|public
name|void
name|setMinThreads
parameter_list|(
name|Integer
name|minThreads
parameter_list|)
block|{
name|this
operator|.
name|minThreads
operator|=
name|minThreads
expr_stmt|;
block|}
DECL|method|getMaxThreads ()
specifier|public
name|Integer
name|getMaxThreads
parameter_list|()
block|{
return|return
name|maxThreads
return|;
block|}
DECL|method|setMaxThreads (Integer maxThreads)
specifier|public
name|void
name|setMaxThreads
parameter_list|(
name|Integer
name|maxThreads
parameter_list|)
block|{
name|this
operator|.
name|maxThreads
operator|=
name|maxThreads
expr_stmt|;
block|}
DECL|method|getThreadPool ()
specifier|public
name|ThreadPool
name|getThreadPool
parameter_list|()
block|{
return|return
name|threadPool
return|;
block|}
DECL|method|setThreadPool (ThreadPool threadPool)
specifier|public
name|void
name|setThreadPool
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
DECL|method|setEnableJmx (boolean enableJmx)
specifier|public
name|void
name|setEnableJmx
parameter_list|(
name|boolean
name|enableJmx
parameter_list|)
block|{
name|this
operator|.
name|enableJmx
operator|=
name|enableJmx
expr_stmt|;
block|}
DECL|method|isEnableJmx ()
specifier|public
name|boolean
name|isEnableJmx
parameter_list|()
block|{
return|return
name|enableJmx
return|;
block|}
DECL|method|getJettyHttpBinding ()
specifier|public
name|JettyHttpBinding
name|getJettyHttpBinding
parameter_list|()
block|{
return|return
name|jettyHttpBinding
return|;
block|}
DECL|method|setJettyHttpBinding (JettyHttpBinding jettyHttpBinding)
specifier|public
name|void
name|setJettyHttpBinding
parameter_list|(
name|JettyHttpBinding
name|jettyHttpBinding
parameter_list|)
block|{
name|this
operator|.
name|jettyHttpBinding
operator|=
name|jettyHttpBinding
expr_stmt|;
block|}
DECL|method|getMbContainer ()
specifier|public
specifier|synchronized
name|MBeanContainer
name|getMbContainer
parameter_list|()
block|{
comment|// If null, provide the default implementation.
if|if
condition|(
name|mbContainer
operator|==
literal|null
condition|)
block|{
name|MBeanServer
name|mbs
init|=
literal|null
decl_stmt|;
specifier|final
name|ManagementStrategy
name|mStrategy
init|=
name|this
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
specifier|final
name|ManagementAgent
name|mAgent
init|=
name|mStrategy
operator|.
name|getManagementAgent
argument_list|()
decl_stmt|;
if|if
condition|(
name|mAgent
operator|!=
literal|null
condition|)
block|{
name|mbs
operator|=
name|mAgent
operator|.
name|getMBeanServer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mbs
operator|!=
literal|null
condition|)
block|{
name|mbContainer
operator|=
operator|new
name|MBeanContainer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|startMbContainer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"JMX disabled in CamelContext. Jetty JMX extensions will remain disabled."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|mbContainer
return|;
block|}
DECL|method|setMbContainer (MBeanContainer mbContainer)
specifier|public
name|void
name|setMbContainer
parameter_list|(
name|MBeanContainer
name|mbContainer
parameter_list|)
block|{
name|this
operator|.
name|mbContainer
operator|=
name|mbContainer
expr_stmt|;
block|}
DECL|method|getSslSocketConnectorProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSslSocketConnectorProperties
parameter_list|()
block|{
return|return
name|sslSocketConnectorProperties
return|;
block|}
DECL|method|setSslSocketConnectorProperties (Map<String, Object> sslSocketConnectorProperties)
specifier|public
name|void
name|setSslSocketConnectorProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sslSocketConnectorProperties
parameter_list|)
block|{
name|this
operator|.
name|sslSocketConnectorProperties
operator|=
name|sslSocketConnectorProperties
expr_stmt|;
block|}
DECL|method|getSocketConnectorProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSocketConnectorProperties
parameter_list|()
block|{
return|return
name|socketConnectorProperties
return|;
block|}
DECL|method|setSocketConnectorProperties (Map<String, Object> socketConnectorProperties)
specifier|public
name|void
name|setSocketConnectorProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|socketConnectorProperties
parameter_list|)
block|{
name|this
operator|.
name|socketConnectorProperties
operator|=
name|socketConnectorProperties
expr_stmt|;
block|}
DECL|method|addSocketConnectorProperty (String key, Object value)
specifier|public
name|void
name|addSocketConnectorProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|socketConnectorProperties
operator|==
literal|null
condition|)
block|{
name|socketConnectorProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|socketConnectorProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|addSslSocketConnectorProperty (String key, Object value)
specifier|public
name|void
name|addSslSocketConnectorProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|sslSocketConnectorProperties
operator|==
literal|null
condition|)
block|{
name|sslSocketConnectorProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|sslSocketConnectorProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getContinuationTimeout ()
specifier|public
name|Long
name|getContinuationTimeout
parameter_list|()
block|{
return|return
name|continuationTimeout
return|;
block|}
DECL|method|setContinuationTimeout (Long continuationTimeout)
specifier|public
name|void
name|setContinuationTimeout
parameter_list|(
name|Long
name|continuationTimeout
parameter_list|)
block|{
name|this
operator|.
name|continuationTimeout
operator|=
name|continuationTimeout
expr_stmt|;
block|}
DECL|method|isUseContinuation ()
specifier|public
name|boolean
name|isUseContinuation
parameter_list|()
block|{
return|return
name|useContinuation
return|;
block|}
DECL|method|setUseContinuation (boolean useContinuation)
specifier|public
name|void
name|setUseContinuation
parameter_list|(
name|boolean
name|useContinuation
parameter_list|)
block|{
name|this
operator|.
name|useContinuation
operator|=
name|useContinuation
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
DECL|method|createServletForConnector (Server server, Connector connector, List<Handler> handlers, JettyHttpEndpoint endpoint)
specifier|protected
name|CamelServlet
name|createServletForConnector
parameter_list|(
name|Server
name|server
parameter_list|,
name|Connector
name|connector
parameter_list|,
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
parameter_list|,
name|JettyHttpEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|server
argument_list|,
literal|"/"
argument_list|,
name|ServletContextHandler
operator|.
name|NO_SECURITY
operator||
name|ServletContextHandler
operator|.
name|NO_SESSIONS
argument_list|)
decl_stmt|;
name|context
operator|.
name|setConnectorNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|connector
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|handlers
operator|!=
literal|null
operator|&&
operator|!
name|handlers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Handler
name|handler
range|:
name|handlers
control|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|HandlerWrapper
condition|)
block|{
operator|(
operator|(
name|HandlerWrapper
operator|)
name|handler
operator|)
operator|.
name|setHandler
argument_list|(
name|server
operator|.
name|getHandler
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HandlerCollection
name|handlerCollection
init|=
operator|new
name|HandlerCollection
argument_list|()
decl_stmt|;
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|server
operator|.
name|getHandler
argument_list|()
argument_list|)
expr_stmt|;
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|handlerCollection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|CamelServlet
name|camelServlet
decl_stmt|;
name|boolean
name|jetty
init|=
name|endpoint
operator|.
name|getUseContinuation
argument_list|()
operator|!=
literal|null
condition|?
name|endpoint
operator|.
name|getUseContinuation
argument_list|()
else|:
name|isUseContinuation
argument_list|()
decl_stmt|;
if|if
condition|(
name|jetty
condition|)
block|{
comment|// use Jetty continuations
name|CamelContinuationServlet
name|jettyServlet
init|=
operator|new
name|CamelContinuationServlet
argument_list|()
decl_stmt|;
comment|// configure timeout and log it so end user know what we are using
name|Long
name|timeout
init|=
name|endpoint
operator|.
name|getContinuationTimeout
argument_list|()
operator|!=
literal|null
condition|?
name|endpoint
operator|.
name|getContinuationTimeout
argument_list|()
else|:
name|getContinuationTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using Jetty continuation timeout: "
operator|+
name|timeout
operator|+
literal|" millis for: "
operator|+
name|endpoint
argument_list|)
expr_stmt|;
name|jettyServlet
operator|.
name|setContinuationTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using default Jetty continuation timeout for: "
operator|+
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|// use the jetty servlet
name|camelServlet
operator|=
name|jettyServlet
expr_stmt|;
block|}
else|else
block|{
comment|// do not use jetty so use a plain servlet
name|camelServlet
operator|=
operator|new
name|CamelServlet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Jetty continuation is disabled for: "
operator|+
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|ServletHolder
name|holder
init|=
operator|new
name|ServletHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|setServlet
argument_list|(
name|camelServlet
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|holder
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
return|return
name|camelServlet
return|;
block|}
DECL|method|createServer ()
specifier|protected
name|Server
name|createServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
name|ContextHandlerCollection
name|collection
init|=
operator|new
name|ContextHandlerCollection
argument_list|()
decl_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|collection
argument_list|)
expr_stmt|;
comment|// configure thread pool if min/max given
if|if
condition|(
name|minThreads
operator|!=
literal|null
operator|||
name|maxThreads
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getThreadPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You cannot configure both minThreads/maxThreads and a custom threadPool on JettyHttpComponent: "
operator|+
name|this
argument_list|)
throw|;
block|}
name|QueuedThreadPool
name|qtp
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
if|if
condition|(
name|minThreads
operator|!=
literal|null
condition|)
block|{
name|qtp
operator|.
name|setMinThreads
argument_list|(
name|minThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxThreads
operator|!=
literal|null
condition|)
block|{
name|qtp
operator|.
name|setMaxThreads
argument_list|(
name|maxThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// let the thread names indicate they are from the server
name|qtp
operator|.
name|setName
argument_list|(
literal|"CamelJettyServer("
operator|+
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|server
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
name|qtp
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Error starting JettyServer thread pool: "
operator|+
name|qtp
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|server
operator|.
name|setThreadPool
argument_list|(
name|qtp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getThreadPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|setThreadPool
argument_list|(
name|getThreadPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
comment|/**      * Starts {@link #mbContainer} and registers the container with itself as a managed bean      * logging an error if there is a problem starting the container.      * Does nothing if {@link #mbContainer} is {@code null}.      */
DECL|method|startMbContainer ()
specifier|protected
name|void
name|startMbContainer
parameter_list|()
block|{
if|if
condition|(
name|mbContainer
operator|!=
literal|null
operator|&&
operator|!
name|mbContainer
operator|.
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|mbContainer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Publish the container itself for consistency with
comment|// traditional embedded Jetty configurations.
name|mbContainer
operator|.
name|addBean
argument_list|(
name|mbContainer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not start Jetty MBeanContainer. Jetty JMX extensions will remain disabled."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|httpClientThreadPool
operator|!=
literal|null
operator|&&
name|httpClientThreadPool
operator|instanceof
name|LifeCycle
condition|)
block|{
name|LifeCycle
name|lc
init|=
operator|(
name|LifeCycle
operator|)
name|httpClientThreadPool
decl_stmt|;
name|lc
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|httpClient
operator|!=
literal|null
operator|&&
operator|!
name|httpClient
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|startMbContainer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|CONNECTORS
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|connectorKey
range|:
name|CONNECTORS
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|!=
literal|null
operator|&&
name|connectorRef
operator|.
name|getRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|connectorRef
operator|.
name|server
operator|.
name|removeConnector
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Camel controls the lifecycle of these entities so remove the
comment|// registered MBeans when Camel is done with the managed objects.
if|if
condition|(
name|mbContainer
operator|!=
literal|null
condition|)
block|{
name|mbContainer
operator|.
name|removeBean
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|)
expr_stmt|;
name|mbContainer
operator|.
name|removeBean
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
block|}
name|CONNECTORS
operator|.
name|remove
argument_list|(
name|connectorKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|httpClient
operator|!=
literal|null
condition|)
block|{
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|httpClientThreadPool
operator|!=
literal|null
operator|&&
name|httpClientThreadPool
operator|instanceof
name|LifeCycle
condition|)
block|{
name|LifeCycle
name|lc
init|=
operator|(
name|LifeCycle
operator|)
name|httpClientThreadPool
decl_stmt|;
name|lc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mbContainer
operator|!=
literal|null
condition|)
block|{
name|mbContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

