begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|JettyHttpMessage
specifier|public
class|class
name|JettyHttpMessage
extends|extends
name|DefaultMessage
block|{
DECL|field|httpExchange
specifier|private
specifier|final
name|JettyContentExchange
name|httpExchange
decl_stmt|;
DECL|field|throwExceptionOnFailure
specifier|private
specifier|final
name|boolean
name|throwExceptionOnFailure
decl_stmt|;
DECL|method|JettyHttpMessage (Exchange exchange, JettyContentExchange httpExchange, boolean throwExceptionOnFailure)
specifier|public
name|JettyHttpMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|JettyContentExchange
name|httpExchange
parameter_list|,
name|boolean
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpExchange
operator|=
name|httpExchange
expr_stmt|;
name|this
operator|.
name|throwExceptionOnFailure
operator|=
name|throwExceptionOnFailure
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|populateInitialHeaders (Map<String, Object> map)
specifier|protected
name|void
name|populateInitialHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|httpExchange
operator|.
name|isHeadersComplete
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|httpExchange
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// wait for headers to be done
try|try
block|{
name|httpExchange
operator|.
name|waitForHeadersToComplete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// ignore
block|}
name|map
operator|.
name|putAll
argument_list|(
name|httpExchange
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createBody ()
specifier|protected
name|Object
name|createBody
parameter_list|()
block|{
comment|// return a Future which by end user can use to obtain the response later
return|return
operator|new
name|JettyFutureGetBody
argument_list|(
name|getExchange
argument_list|()
argument_list|,
name|httpExchange
argument_list|,
name|throwExceptionOnFailure
argument_list|)
return|;
block|}
block|}
end_class

end_unit

