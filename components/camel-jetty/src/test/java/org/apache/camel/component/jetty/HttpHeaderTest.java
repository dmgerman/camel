begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HttpHeaderTest
specifier|public
class|class
name|HttpHeaderTest
extends|extends
name|BaseJettyTest
block|{
annotation|@
name|Test
DECL|method|testHttpHeaders ()
specifier|public
name|void
name|testHttpHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"hello"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should send a right http header to the server."
argument_list|,
literal|"Find the key!"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServerHeader ()
specifier|public
name|void
name|testServerHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|ex
init|=
name|template
operator|.
name|request
argument_list|(
literal|"http://localhost:{{port}}/server/mytest"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Do nothing here
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Server"
argument_list|)
argument_list|)
expr_stmt|;
name|ex
operator|=
name|template
operator|.
name|request
argument_list|(
literal|"http://localhost:{{port2}}/server/mytest"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Do nothing here
block|}
block|}
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Server"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"SOAPAction"
argument_list|,
name|constant
argument_list|(
literal|"http://xxx.com/interfaces/ticket"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|constant
argument_list|(
literal|"text/xml; charset=utf-8"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PROTOCOL_VERSION
argument_list|,
name|constant
argument_list|(
literal|"HTTP/1.0"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"http://localhost:{{port}}/myapp/mytest"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:{{port}}/myapp/mytest"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|ServletRequest
name|request
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_SERVLET_REQUEST
argument_list|,
name|ServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wong http protocol version"
argument_list|,
name|request
operator|.
name|getProtocol
argument_list|()
argument_list|,
literal|"HTTP/1.0"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|"SOAPAction"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
literal|"http://xxx.com/interfaces/ticket"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Find the key!"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Cannot find the key!"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:{{port}}/server/mytest"
argument_list|)
operator|.
name|transform
argument_list|(
name|constant
argument_list|(
literal|"Response!"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:{{port2}}/server/mytest?sendServerVersion=false"
argument_list|)
operator|.
name|transform
argument_list|(
name|constant
argument_list|(
literal|"Response!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

