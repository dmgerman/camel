begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|StatisticsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HandlerTest
specifier|public
class|class
name|HandlerTest
extends|extends
name|BaseJettyTest
block|{
annotation|@
name|BindToRegistry
argument_list|(
literal|"statisticsHandler1"
argument_list|)
DECL|field|statisticsHandler1
specifier|private
name|StatisticsHandler
name|statisticsHandler1
init|=
operator|new
name|StatisticsHandler
argument_list|()
decl_stmt|;
annotation|@
name|BindToRegistry
argument_list|(
literal|"statisticsHandler2"
argument_list|)
DECL|field|statisticsHandler2
specifier|private
name|StatisticsHandler
name|statisticsHandler2
init|=
operator|new
name|StatisticsHandler
argument_list|()
decl_stmt|;
annotation|@
name|BindToRegistry
argument_list|(
literal|"statisticsHandler3"
argument_list|)
DECL|field|statisticsHandler3
specifier|private
name|StatisticsHandler
name|statisticsHandler3
init|=
operator|new
name|StatisticsHandler
argument_list|()
decl_stmt|;
DECL|field|htmlResponse
specifier|private
name|String
name|htmlResponse
init|=
literal|"<html><body>Book 123 is Camel in Action</body></html>"
decl_stmt|;
DECL|field|port1
specifier|private
name|int
name|port1
decl_stmt|;
DECL|field|port2
specifier|private
name|int
name|port2
decl_stmt|;
annotation|@
name|Test
DECL|method|testWithOneHandler ()
specifier|public
name|void
name|testWithOneHandler
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First test the situation where one should invoke the handler once
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler1
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler2
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler3
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|html
init|=
operator|(
name|InputStream
operator|)
name|template
operator|.
name|requestBody
argument_list|(
literal|"http://localhost:"
operator|+
name|port1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|html
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|htmlResponse
argument_list|,
name|br
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statisticsHandler1
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler2
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler3
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithTwoHandlers ()
specifier|public
name|void
name|testWithTwoHandlers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First test the situation where one should invoke the handler once
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler1
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler2
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler3
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|html
init|=
operator|(
name|InputStream
operator|)
name|template
operator|.
name|requestBody
argument_list|(
literal|"http://localhost:"
operator|+
name|port2
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|html
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|htmlResponse
argument_list|,
name|br
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler1
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statisticsHandler2
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statisticsHandler3
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithTwoHandlersTwoEndpointsOnSamePort ()
specifier|public
name|void
name|testWithTwoHandlersTwoEndpointsOnSamePort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First test the situation where one should invoke the handler once
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler1
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler2
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler3
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|html1
init|=
operator|(
name|InputStream
operator|)
name|template
operator|.
name|requestBody
argument_list|(
literal|"http://localhost:"
operator|+
name|port2
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|BufferedReader
name|br1
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|html1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|htmlResponse
argument_list|,
name|br1
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|html2
init|=
operator|(
name|InputStream
operator|)
name|template
operator|.
name|requestBody
argument_list|(
literal|"http://localhost:"
operator|+
name|port2
operator|+
literal|"/endpoint2"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|BufferedReader
name|br2
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|html2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|htmlResponse
argument_list|,
name|br2
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statisticsHandler1
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statisticsHandler2
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statisticsHandler3
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|port1
operator|=
name|getPort
argument_list|()
expr_stmt|;
name|port2
operator|=
name|getNextPort
argument_list|()
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|port1
operator|+
literal|"/?handlers=#statisticsHandler1"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|htmlResponse
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|port2
operator|+
literal|"/?handlers=#statisticsHandler2,#statisticsHandler3"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|htmlResponse
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|port2
operator|+
literal|"/endpoint2?handlers=#statisticsHandler2,#statisticsHandler3"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|htmlResponse
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
return|;
block|}
block|}
end_class

end_unit

