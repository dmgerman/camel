begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
operator|.
name|BaseJettyTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JettyFileConsumerTest
specifier|public
class|class
name|JettyFileConsumerTest
extends|extends
name|BaseJettyTest
block|{
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/binary"
argument_list|)
expr_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/test"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|testingSendingFile (File src)
specifier|private
name|void
name|testingSendingFile
parameter_list|(
name|File
name|src
parameter_list|)
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/test"
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"http://localhost:{{port}}/myapp/myservice"
argument_list|,
name|fis
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response should be OK "
argument_list|,
literal|"OK"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|File
name|des
init|=
operator|new
name|File
argument_list|(
literal|"target/test/temp.xml"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The uploaded file should exists"
argument_list|,
name|des
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This two file should have same size"
argument_list|,
name|src
operator|.
name|length
argument_list|()
argument_list|,
name|des
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSending4K ()
specifier|public
name|void
name|testSending4K
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|src
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/log4j2.properties"
argument_list|)
decl_stmt|;
name|testingSendingFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testSending18k ()
specifier|public
name|void
name|testSending18k
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|src
init|=
operator|new
name|File
argument_list|(
literal|"src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java"
argument_list|)
decl_stmt|;
name|testingSendingFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendBinaryFile ()
specifier|public
name|void
name|testSendBinaryFile
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/test"
argument_list|)
expr_stmt|;
name|File
name|jpg
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/java.jpg"
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"http://localhost:{{port}}/myapp/myservice2"
argument_list|,
name|jpg
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response should be OK "
argument_list|,
literal|"OK"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|File
name|des
init|=
operator|new
name|File
argument_list|(
literal|"target/test/java.jpg"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The uploaded file should exists"
argument_list|,
name|des
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This two file should have same size"
argument_list|,
name|jpg
operator|.
name|length
argument_list|()
argument_list|,
name|des
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendBinaryFileUsingCamelRoute ()
specifier|public
name|void
name|testSendBinaryFileUsingCamelRoute
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|File
name|jpg
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/java.jpg"
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file://target/binary"
argument_list|,
name|jpg
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"java.jpg"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|File
name|des
init|=
operator|new
name|File
argument_list|(
literal|"target/test/java.jpg"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The uploaded file should exists"
argument_list|,
name|des
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This two file should have same size"
argument_list|,
name|jpg
operator|.
name|length
argument_list|()
argument_list|,
name|des
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"jetty:http://localhost:{{port}}/myapp/myservice"
argument_list|)
operator|.
name|to
argument_list|(
literal|"file://target/test?fileName=temp.xml"
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:{{port}}/myapp/myservice2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:foo?showAll=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"file://target/test?fileName=java.jpg"
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file://target/binary?noop=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"http://localhost:{{port}}/myapp/myservice2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

