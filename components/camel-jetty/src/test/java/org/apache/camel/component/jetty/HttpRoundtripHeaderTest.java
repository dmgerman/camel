begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultHeaderFilterStrategy
import|;
end_import

begin_class
DECL|class|HttpRoundtripHeaderTest
specifier|public
class|class
name|HttpRoundtripHeaderTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|uri
specifier|protected
specifier|final
name|String
name|uri
init|=
literal|"http://localhost:8088/WhichWillGetCloseException"
decl_stmt|;
DECL|field|jettyUri
specifier|protected
specifier|final
name|String
name|jettyUri
init|=
literal|"jetty:"
operator|+
name|uri
decl_stmt|;
DECL|field|outputText
specifier|protected
specifier|final
name|String
name|outputText
init|=
literal|":output"
decl_stmt|;
DECL|field|inputText
specifier|protected
name|String
name|inputText
init|=
literal|"input"
decl_stmt|;
DECL|field|expectedText
specifier|protected
name|String
name|expectedText
init|=
name|inputText
operator|+
name|outputText
decl_stmt|;
comment|// http://issues.apache.org/activemq/browse/CAMEL-324
DECL|method|testHttpRoundTripHeaders ()
specifier|public
name|void
name|testHttpRoundTripHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:results"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|InputStream
name|answer
init|=
operator|(
name|InputStream
operator|)
name|template
operator|.
name|sendBody
argument_list|(
name|uri
argument_list|,
name|inputText
argument_list|)
decl_stmt|;
name|verifyMockGotExpectedText
argument_list|(
name|mockEndpoint
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
comment|// read the response data
name|String
name|lastLine
init|=
name|readLastLine
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"last response line"
argument_list|,
name|lastLine
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"response matches: "
operator|+
name|expectedText
argument_list|,
name|expectedText
argument_list|,
name|lastLine
argument_list|)
expr_stmt|;
block|}
DECL|method|testHttpRoundTripHeadersWithNoIngoredHeaders ()
specifier|public
name|void
name|testHttpRoundTripHeadersWithNoIngoredHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:results"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JettyHttpEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|jettyUri
argument_list|,
name|JettyHttpEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// override the default set of ignored headers which includes Content-Length
operator|(
operator|(
name|DefaultHeaderFilterStrategy
operator|)
name|endpoint
operator|.
name|getHeaderFilterStrategy
argument_list|()
operator|)
operator|.
name|setOutFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|InputStream
name|answer
init|=
operator|(
name|InputStream
operator|)
name|template
operator|.
name|sendBody
argument_list|(
name|uri
argument_list|,
name|inputText
argument_list|)
decl_stmt|;
name|verifyMockGotExpectedText
argument_list|(
name|mockEndpoint
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
comment|// read the response data
name|String
name|lastLine
init|=
name|readLastLine
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"last response line"
argument_list|,
name|lastLine
argument_list|)
expr_stmt|;
comment|// Content-Length from request will truncate the output to just the
comment|// inputText
name|assertEquals
argument_list|(
literal|"response matches: "
operator|+
name|inputText
argument_list|,
name|inputText
argument_list|,
name|lastLine
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|Processor
name|processor
init|=
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|input
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
comment|// append some text to invalidate Context-Length
comment|// for the http reply
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|input
operator|+
name|outputText
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// the unmarshaller does a copy from in message to out
comment|// including all headers
name|from
argument_list|(
name|jettyUri
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|string
argument_list|()
operator|.
name|process
argument_list|(
name|processor
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:results"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|verifyMockGotExpectedText (MockEndpoint mockEndpoint, String expected)
specifier|private
name|void
name|verifyMockGotExpectedText
parameter_list|(
name|MockEndpoint
name|mockEndpoint
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|list
init|=
name|mockEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"exchange"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"in"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|in
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"no headers are propagated"
argument_list|,
name|headers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"body has expectedText:"
operator|+
name|expected
argument_list|,
name|expected
argument_list|,
name|in
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readLastLine (InputStream answer)
specifier|private
name|String
name|readLastLine
parameter_list|(
name|InputStream
name|answer
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|lastLine
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|answer
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|lastLine
operator|=
name|line
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Read: "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|lastLine
return|;
block|}
block|}
end_class

end_unit

