begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty.jettyproducer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
operator|.
name|jettyproducer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|JettyHttpProducerHeaderBasedCBRTestTest
specifier|public
class|class
name|JettyHttpProducerHeaderBasedCBRTestTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|url
specifier|private
name|String
name|url
init|=
literal|"jetty://http://0.0.0.0:9123/foo"
decl_stmt|;
DECL|field|step
specifier|private
specifier|static
name|String
name|step
decl_stmt|;
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSlowReplyCBRRoutedOnHeader ()
specifier|public
name|void
name|testSlowReplyCBRRoutedOnHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|step
operator|=
literal|""
expr_stmt|;
name|MockEndpoint
name|gold
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:gold"
argument_list|)
decl_stmt|;
name|gold
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|gold
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// add the step when we received the message
name|step
operator|+=
literal|"C"
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// let it wait for the body now using the future handle
comment|// Note: we could just use getBody(String.class) and Camel will then automatic wait for you
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|(
name|Future
argument_list|<
name|String
argument_list|>
operator|)
name|gold
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bye World"
argument_list|,
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// and ensure the we could CBR on the header before we got the reply body
name|assertEquals
argument_list|(
literal|"ACB"
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
name|url
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"customer"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"gold"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:gold"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:unknown"
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|url
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpServletResponse
name|res
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|res
operator|.
name|setStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"customer"
argument_list|,
literal|"gold"
argument_list|)
expr_stmt|;
name|step
operator|+=
literal|"A"
expr_stmt|;
comment|// write empty string to force flushing
name|res
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|res
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|res
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"Bye World"
argument_list|)
expr_stmt|;
name|res
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
name|step
operator|+=
literal|"B"
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

