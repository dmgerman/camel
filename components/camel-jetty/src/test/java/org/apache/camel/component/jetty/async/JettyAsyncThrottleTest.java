begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty.async
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
operator|.
name|async
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
operator|.
name|BaseJettyTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * CAMEL-4795, there should be no exceptions in the logs (before the fix there was a NPE)  */
end_comment

begin_class
DECL|class|JettyAsyncThrottleTest
specifier|public
class|class
name|JettyAsyncThrottleTest
extends|extends
name|BaseJettyTest
block|{
annotation|@
name|Test
DECL|method|testJettyAsync ()
specifier|public
name|void
name|testJettyAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"jetty:http://localhost:{{port}}/myservice"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"jetty:http://localhost:{{port}}/myservice"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"jetty:http://localhost:{{port}}/myservice"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"jetty:http://localhost:{{port}}/myservice"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"jetty:http://localhost:{{port}}/myservice"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Exchange
name|exchange
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reply "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port2
init|=
name|getNextPort
argument_list|()
decl_stmt|;
name|int
name|port3
init|=
name|getNextPort
argument_list|()
decl_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:{{port}}/myservice"
argument_list|)
operator|.
name|removeHeaders
argument_list|(
literal|"*"
argument_list|)
operator|.
name|throttle
argument_list|(
literal|2
argument_list|)
operator|.
name|asyncDelayed
argument_list|()
operator|.
name|loadBalance
argument_list|()
operator|.
name|failover
argument_list|()
operator|.
name|to
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|port2
operator|+
literal|"/foo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|port3
operator|+
literal|"/bar"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|port2
operator|+
literal|"/foo"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:foo"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|port3
operator|+
literal|"/bar"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:bar"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

