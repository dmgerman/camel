begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.springframework.ws.soap.addressing.server
package|package
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|Ordered
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|context
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|server
operator|.
name|EndpointInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|server
operator|.
name|EndpointInvocationChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|server
operator|.
name|EndpointMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|SoapHeaderElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|core
operator|.
name|MessageAddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|messageid
operator|.
name|MessageIdStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|messageid
operator|.
name|UuidMessageIdStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|version
operator|.
name|Addressing10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|version
operator|.
name|Addressing200408
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|version
operator|.
name|AddressingVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|server
operator|.
name|SoapEndpointInvocationChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|server
operator|.
name|SoapEndpointMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|transport
operator|.
name|WebServiceMessageSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerObjectSupport
import|;
end_import

begin_comment
comment|/**  * THIS CLASS WILL BE REMOVED, WHEN THE FOLLOWING ISSUE WILL BE SOLVED:   * https://jira.springsource.org/browse/SWS-817  *   * Abstract base class for {@link EndpointMapping} implementations that handle WS-Addressing. Besides the normal {@link  * SoapEndpointMapping} properties, this mapping has a {@link #setVersions(org.springframework.ws.soap.addressing.version.AddressingVersion[])  * versions} property, which defines the WS-Addressing specifications supported. By default, these are {@link  * org.springframework.ws.soap.addressing.version.Addressing200408} and {@link org.springframework.ws.soap.addressing.version.Addressing10}.  *<p/>  * The {@link #setMessageIdStrategy(MessageIdStrategy) messageIdStrategy} property defines the strategy to use for  * creating reply<code>MessageIDs</code>. By default, this is the {@link UuidMessageIdStrategy}.  *<p/>  * The {@link #setMessageSenders(WebServiceMessageSender[]) messageSenders} are used to send out-of-band reply messages.  * If a request messages defines a non-anonymous reply address, these senders will be used to send the message.  *<p/>  * This mapping (and all subclasses) uses an implicit WS-Addressing {@link EndpointInterceptor}, which is added in every  * {@link EndpointInvocationChain} produced. As such, this mapping does not have the standard<code>interceptors</code>  * property, but rather a {@link #setPreInterceptors(EndpointInterceptor[]) preInterceptors} and {@link  * #setPostInterceptors(EndpointInterceptor[]) postInterceptors} property, which are added before and after the implicit  * WS-Addressing interceptor, respectively.  *  * @author Arjen Poutsma, Andrej Zachar  * @since 1.5.0  */
end_comment

begin_class
DECL|class|AbstractAddressingEndpointMappingHacked
specifier|public
specifier|abstract
class|class
name|AbstractAddressingEndpointMappingHacked
extends|extends
name|TransformerObjectSupport
implements|implements
name|SoapEndpointMapping
implements|,
name|InitializingBean
implements|,
name|Ordered
block|{
DECL|field|actorsOrRoles
specifier|private
name|String
index|[]
name|actorsOrRoles
decl_stmt|;
DECL|field|isUltimateReceiver
specifier|private
name|boolean
name|isUltimateReceiver
init|=
literal|true
decl_stmt|;
DECL|field|messageIdStrategy
specifier|private
name|MessageIdStrategy
name|messageIdStrategy
decl_stmt|;
DECL|field|messageSenders
specifier|private
name|WebServiceMessageSender
index|[]
name|messageSenders
init|=
operator|new
name|WebServiceMessageSender
index|[
literal|0
index|]
decl_stmt|;
DECL|field|versions
specifier|private
name|AddressingVersion
index|[]
name|versions
decl_stmt|;
DECL|field|preInterceptors
specifier|private
name|EndpointInterceptor
index|[]
name|preInterceptors
init|=
operator|new
name|EndpointInterceptor
index|[
literal|0
index|]
decl_stmt|;
DECL|field|postInterceptors
specifier|private
name|EndpointInterceptor
index|[]
name|postInterceptors
init|=
operator|new
name|EndpointInterceptor
index|[
literal|0
index|]
decl_stmt|;
DECL|field|order
specifier|private
name|int
name|order
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// default: same as non-Ordered
comment|/** Protected constructor. Initializes the default settings. */
DECL|method|AbstractAddressingEndpointMappingHacked ()
specifier|protected
name|AbstractAddressingEndpointMappingHacked
parameter_list|()
block|{
name|initDefaultStrategies
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initializes the default implementation for this mapping's strategies: the {@link      * org.springframework.ws.soap.addressing.version.Addressing200408} and {@link org.springframework.ws.soap.addressing.version.Addressing10}      * versions of the specification, and the {@link UuidMessageIdStrategy}.      */
DECL|method|initDefaultStrategies ()
specifier|protected
name|void
name|initDefaultStrategies
parameter_list|()
block|{
name|this
operator|.
name|versions
operator|=
operator|new
name|AddressingVersion
index|[]
block|{
operator|new
name|Addressing200408
argument_list|()
block|,
operator|new
name|Addressing10
argument_list|()
block|}
expr_stmt|;
name|messageIdStrategy
operator|=
operator|new
name|UuidMessageIdStrategy
argument_list|()
expr_stmt|;
block|}
DECL|method|setActorOrRole (String actorOrRole)
specifier|public
specifier|final
name|void
name|setActorOrRole
parameter_list|(
name|String
name|actorOrRole
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|actorOrRole
argument_list|,
literal|"actorOrRole must not be null"
argument_list|)
expr_stmt|;
name|actorsOrRoles
operator|=
operator|new
name|String
index|[]
block|{
name|actorOrRole
block|}
expr_stmt|;
block|}
DECL|method|setActorsOrRoles (String[] actorsOrRoles)
specifier|public
specifier|final
name|void
name|setActorsOrRoles
parameter_list|(
name|String
index|[]
name|actorsOrRoles
parameter_list|)
block|{
name|Assert
operator|.
name|notEmpty
argument_list|(
name|actorsOrRoles
argument_list|,
literal|"actorsOrRoles must not be empty"
argument_list|)
expr_stmt|;
name|this
operator|.
name|actorsOrRoles
operator|=
name|actorsOrRoles
expr_stmt|;
block|}
DECL|method|setUltimateReceiver (boolean ultimateReceiver)
specifier|public
specifier|final
name|void
name|setUltimateReceiver
parameter_list|(
name|boolean
name|ultimateReceiver
parameter_list|)
block|{
name|this
operator|.
name|isUltimateReceiver
operator|=
name|ultimateReceiver
expr_stmt|;
block|}
DECL|method|getOrder ()
specifier|public
specifier|final
name|int
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
comment|/**      * Specify the order value for this mapping.      *<p/>      * Default value is {@link Integer#MAX_VALUE}, meaning that it's non-ordered.      *      * @see org.springframework.core.Ordered#getOrder()      */
DECL|method|setOrder (int order)
specifier|public
specifier|final
name|void
name|setOrder
parameter_list|(
name|int
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
comment|/**      * Set additional interceptors to be applied before the implicit WS-Addressing interceptor, e.g.      *<code>XwsSecurityInterceptor</code>.      */
DECL|method|setPreInterceptors (EndpointInterceptor[] preInterceptors)
specifier|public
specifier|final
name|void
name|setPreInterceptors
parameter_list|(
name|EndpointInterceptor
index|[]
name|preInterceptors
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|preInterceptors
argument_list|,
literal|"'preInterceptors' must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|preInterceptors
operator|=
name|preInterceptors
expr_stmt|;
block|}
comment|/**      * Set additional interceptors to be applied after the implicit WS-Addressing interceptor, e.g.      *<code>PayloadLoggingInterceptor</code>.      */
DECL|method|setPostInterceptors (EndpointInterceptor[] postInterceptors)
specifier|public
specifier|final
name|void
name|setPostInterceptors
parameter_list|(
name|EndpointInterceptor
index|[]
name|postInterceptors
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|postInterceptors
argument_list|,
literal|"'postInterceptors' must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|postInterceptors
operator|=
name|postInterceptors
expr_stmt|;
block|}
comment|/**      * Sets the message id strategy used for creating WS-Addressing MessageIds.      *<p/>      * By default, the {@link UuidMessageIdStrategy} is used.      */
DECL|method|setMessageIdStrategy (MessageIdStrategy messageIdStrategy)
specifier|public
specifier|final
name|void
name|setMessageIdStrategy
parameter_list|(
name|MessageIdStrategy
name|messageIdStrategy
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|messageIdStrategy
argument_list|,
literal|"'messageIdStrategy' must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageIdStrategy
operator|=
name|messageIdStrategy
expr_stmt|;
block|}
comment|/**      * Sets the single message sender used for sending messages.      *<p/>      * This message sender will be used to resolve an URI to a      * {@link WebServiceConnection}.      *       * @see #createConnection(URI)      */
DECL|method|setMessageSender (WebServiceMessageSender messageSender)
specifier|public
name|void
name|setMessageSender
parameter_list|(
name|WebServiceMessageSender
name|messageSender
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|messageSender
argument_list|,
literal|"'messageSender' must not be null"
argument_list|)
expr_stmt|;
name|setMessageSenders
argument_list|(
operator|new
name|WebServiceMessageSender
index|[]
block|{
name|messageSender
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setMessageSenders (WebServiceMessageSender[] messageSenders)
specifier|public
specifier|final
name|void
name|setMessageSenders
parameter_list|(
name|WebServiceMessageSender
index|[]
name|messageSenders
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|messageSenders
argument_list|,
literal|"'messageSenders' must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageSenders
operator|=
name|messageSenders
expr_stmt|;
block|}
DECL|method|getMessageSenders ()
specifier|public
specifier|final
name|WebServiceMessageSender
index|[]
name|getMessageSenders
parameter_list|()
block|{
return|return
name|this
operator|.
name|messageSenders
return|;
block|}
comment|/**      * Sets the WS-Addressing versions to be supported by this mapping.      *<p/>      * By default, this array is set to support {@link org.springframework.ws.soap.addressing.version.Addressing200408      * the August 2004} and the {@link org.springframework.ws.soap.addressing.version.Addressing10 May 2006} versions of      * the specification.      */
DECL|method|setVersions (AddressingVersion[] versions)
specifier|public
specifier|final
name|void
name|setVersions
parameter_list|(
name|AddressingVersion
index|[]
name|versions
parameter_list|)
block|{
name|this
operator|.
name|versions
operator|=
name|versions
expr_stmt|;
block|}
DECL|method|afterPropertiesSet ()
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Supporting "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|versions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEndpoint (MessageContext messageContext)
specifier|public
specifier|final
name|EndpointInvocationChain
name|getEndpoint
parameter_list|(
name|MessageContext
name|messageContext
parameter_list|)
throws|throws
name|TransformerException
block|{
name|Assert
operator|.
name|isInstanceOf
argument_list|(
name|SoapMessage
operator|.
name|class
argument_list|,
name|messageContext
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|SoapMessage
name|request
init|=
operator|(
name|SoapMessage
operator|)
name|messageContext
operator|.
name|getRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|AddressingVersion
name|version
range|:
name|versions
control|)
block|{
if|if
condition|(
name|supports
argument_list|(
name|version
argument_list|,
name|request
argument_list|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Request ["
operator|+
name|request
operator|+
literal|"] uses ["
operator|+
name|version
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|MessageAddressingProperties
name|requestMap
init|=
name|version
operator|.
name|getMessageAddressingProperties
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestMap
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|endpoint
init|=
name|getEndpointInternal
argument_list|(
name|requestMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getEndpointInvocationChain
argument_list|(
name|endpoint
argument_list|,
name|version
argument_list|,
name|requestMap
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Creates a {@link SoapEndpointInvocationChain} based on the given endpoint and {@link      * org.springframework.ws.soap.addressing.version.AddressingVersion}.      */
DECL|method|getEndpointInvocationChain (Object endpoint, AddressingVersion version, MessageAddressingProperties requestMap)
specifier|private
name|EndpointInvocationChain
name|getEndpointInvocationChain
parameter_list|(
name|Object
name|endpoint
parameter_list|,
name|AddressingVersion
name|version
parameter_list|,
name|MessageAddressingProperties
name|requestMap
parameter_list|)
block|{
name|URI
name|responseAction
init|=
name|getResponseAction
argument_list|(
name|endpoint
argument_list|,
name|requestMap
argument_list|)
decl_stmt|;
name|URI
name|faultAction
init|=
name|getFaultAction
argument_list|(
name|endpoint
argument_list|,
name|requestMap
argument_list|)
decl_stmt|;
name|WebServiceMessageSender
index|[]
name|messageSenders
init|=
name|getMessageSenders
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|MessageIdStrategy
name|messageIdStrategy
init|=
name|getMessageStrategy
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|EndpointInterceptor
index|[]
name|interceptors
init|=
operator|new
name|EndpointInterceptor
index|[
name|preInterceptors
operator|.
name|length
operator|+
name|postInterceptors
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|preInterceptors
argument_list|,
literal|0
argument_list|,
name|interceptors
argument_list|,
literal|0
argument_list|,
name|preInterceptors
operator|.
name|length
argument_list|)
expr_stmt|;
name|AddressingEndpointInterceptor
name|interceptor
init|=
operator|new
name|AddressingEndpointInterceptor
argument_list|(
name|version
argument_list|,
name|messageIdStrategy
argument_list|,
name|messageSenders
argument_list|,
name|responseAction
argument_list|,
name|faultAction
argument_list|)
decl_stmt|;
name|interceptors
index|[
name|preInterceptors
operator|.
name|length
index|]
operator|=
name|interceptor
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|postInterceptors
argument_list|,
literal|0
argument_list|,
name|interceptors
argument_list|,
name|preInterceptors
operator|.
name|length
operator|+
literal|1
argument_list|,
name|postInterceptors
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|SoapEndpointInvocationChain
argument_list|(
name|endpoint
argument_list|,
name|interceptors
argument_list|,
name|actorsOrRoles
argument_list|,
name|isUltimateReceiver
argument_list|)
return|;
block|}
DECL|method|supports (AddressingVersion version, SoapMessage request)
specifier|private
name|boolean
name|supports
parameter_list|(
name|AddressingVersion
name|version
parameter_list|,
name|SoapMessage
name|request
parameter_list|)
block|{
name|SoapHeader
name|header
init|=
name|request
operator|.
name|getSoapHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|SoapHeaderElement
argument_list|>
name|iterator
init|=
name|header
operator|.
name|examineAllHeaderElements
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SoapHeaderElement
name|headerElement
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|understands
argument_list|(
name|headerElement
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Default implementation      *       * @param endpoint specific message strategy      * @return      */
DECL|method|getMessageStrategy (Object endpoint)
specifier|protected
name|MessageIdStrategy
name|getMessageStrategy
parameter_list|(
name|Object
name|endpoint
parameter_list|)
block|{
return|return
name|this
operator|.
name|messageIdStrategy
return|;
block|}
comment|/**      * Default implementation      *       * @param endpoint      * @return endpoint specific message senders      */
DECL|method|getMessageSenders (Object endpoint)
specifier|protected
name|WebServiceMessageSender
index|[]
name|getMessageSenders
parameter_list|(
name|Object
name|endpoint
parameter_list|)
block|{
return|return
name|this
operator|.
name|messageSenders
return|;
block|}
comment|/**      * Lookup an endpoint for the given  {@link MessageAddressingProperties}, returning<code>null</code> if no specific      * one is found. This template method is called by {@link #getEndpoint(MessageContext)}.      *      * @param map the message addressing properties      * @return the endpoint, or<code>null</code>      */
DECL|method|getEndpointInternal (MessageAddressingProperties map)
specifier|protected
specifier|abstract
name|Object
name|getEndpointInternal
parameter_list|(
name|MessageAddressingProperties
name|map
parameter_list|)
function_decl|;
comment|/**      * Provides the WS-Addressing Action for response messages, given the endpoint, and request Message Addressing      * Properties.      *      * @param endpoint   the mapped endpoint      * @param requestMap the MAP for the request      * @return the response Action      */
DECL|method|getResponseAction (Object endpoint, MessageAddressingProperties requestMap)
specifier|protected
specifier|abstract
name|URI
name|getResponseAction
parameter_list|(
name|Object
name|endpoint
parameter_list|,
name|MessageAddressingProperties
name|requestMap
parameter_list|)
function_decl|;
comment|/**      * Provides the WS-Addressing Action for response fault messages, given the endpoint, and request Message Addressing      * Properties.      *      * @param endpoint   the mapped endpoint      * @param requestMap the MAP for the request      * @return the response Action      */
DECL|method|getFaultAction (Object endpoint, MessageAddressingProperties requestMap)
specifier|protected
specifier|abstract
name|URI
name|getFaultAction
parameter_list|(
name|Object
name|endpoint
parameter_list|,
name|MessageAddressingProperties
name|requestMap
parameter_list|)
function_decl|;
block|}
end_class

end_unit

