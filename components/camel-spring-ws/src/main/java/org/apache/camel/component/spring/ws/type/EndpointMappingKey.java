begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.ws.type
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|EndpointMappingKey
specifier|public
class|class
name|EndpointMappingKey
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|type
specifier|private
name|EndpointMappingType
name|type
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|lookupKey
specifier|private
name|String
name|lookupKey
decl_stmt|;
comment|/* expression in case type is 'xpath' */
DECL|field|expression
specifier|private
name|XPathExpression
name|expression
decl_stmt|;
DECL|method|EndpointMappingKey (EndpointMappingType type, String lookupKey, XPathExpression expression)
specifier|public
name|EndpointMappingKey
parameter_list|(
name|EndpointMappingType
name|type
parameter_list|,
name|String
name|lookupKey
parameter_list|,
name|XPathExpression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|lookupKey
operator|=
name|lookupKey
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|EndpointMappingType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType (EndpointMappingType type)
specifier|public
name|void
name|setType
parameter_list|(
name|EndpointMappingType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getLookupKey ()
specifier|public
name|String
name|getLookupKey
parameter_list|()
block|{
return|return
name|lookupKey
return|;
block|}
DECL|method|setLookupKey (String lookupKey)
specifier|public
name|void
name|setLookupKey
parameter_list|(
name|String
name|lookupKey
parameter_list|)
block|{
name|this
operator|.
name|lookupKey
operator|=
name|lookupKey
expr_stmt|;
block|}
DECL|method|getExpression ()
specifier|public
name|XPathExpression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
DECL|method|setExpression (XPathExpression expression)
specifier|public
name|void
name|setExpression
parameter_list|(
name|XPathExpression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|lookupKey
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|lookupKey
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|EndpointMappingKey
name|other
init|=
operator|(
name|EndpointMappingKey
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|lookupKey
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|lookupKey
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|lookupKey
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lookupKey
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

