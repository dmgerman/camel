begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.ws
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|WebServiceMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|client
operator|.
name|core
operator|.
name|SourceExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|client
operator|.
name|core
operator|.
name|WebServiceMessageCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|client
operator|.
name|core
operator|.
name|WebServiceTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|client
operator|.
name|ActionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|client
operator|.
name|core
operator|.
name|SoapActionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|transport
operator|.
name|WebServiceMessageSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|transport
operator|.
name|http
operator|.
name|CommonsHttpMessageSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|transport
operator|.
name|http
operator|.
name|HttpUrlConnectionMessageSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|transport
operator|.
name|http
operator|.
name|HttpsUrlConnectionMessageSender
import|;
end_import

begin_class
DECL|class|SpringWebserviceProducer
specifier|public
class|class
name|SpringWebserviceProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SpringWebserviceProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SOURCE_EXTRACTOR
specifier|private
specifier|static
specifier|final
name|SourceExtractor
argument_list|<
name|Object
argument_list|>
name|SOURCE_EXTRACTOR
init|=
operator|new
name|NoopSourceExtractor
argument_list|()
decl_stmt|;
DECL|method|SpringWebserviceProducer (Endpoint endpoint)
specifier|public
name|SpringWebserviceProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|SpringWebserviceEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|SpringWebserviceEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Let Camel TypeConverter hierarchy handle the conversion of XML messages to Source objects
name|Source
name|sourcePayload
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Extract optional headers
name|String
name|endpointUri
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_ENDPOINT_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|soapAction
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_SOAP_ACTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|URI
name|wsAddressingAction
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_ADDRESSING_ACTION
argument_list|,
name|URI
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Populate the given (read) timeout if any
name|populateTimeout
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|WebServiceMessageCallback
name|callback
init|=
operator|new
name|DefaultWebserviceMessageCallback
argument_list|(
name|soapAction
argument_list|,
name|wsAddressingAction
argument_list|,
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|body
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|endpointUri
operator|!=
literal|null
condition|)
block|{
name|body
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getWebServiceTemplate
argument_list|()
operator|.
name|sendSourceAndReceive
argument_list|(
name|endpointUri
argument_list|,
name|sourcePayload
argument_list|,
name|callback
argument_list|,
name|SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|body
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getWebServiceTemplate
argument_list|()
operator|.
name|sendSourceAndReceive
argument_list|(
name|sourcePayload
argument_list|,
name|callback
argument_list|,
name|SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateTimeout (SpringWebserviceConfiguration configuration)
specifier|private
specifier|static
name|void
name|populateTimeout
parameter_list|(
name|SpringWebserviceConfiguration
name|configuration
parameter_list|)
block|{
name|WebServiceTemplate
name|webServiceTemplate
init|=
name|configuration
operator|.
name|getWebServiceTemplate
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WebServiceMessageSender
argument_list|>
name|webServiceMessageSenders
init|=
operator|new
name|ArrayList
argument_list|<
name|WebServiceMessageSender
argument_list|>
argument_list|(
name|webServiceTemplate
operator|.
name|getMessageSenders
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|webServiceMessageSenders
argument_list|,
name|webServiceTemplate
operator|.
name|getMessageSenders
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|WebServiceMessageSender
name|webServiceMessageSender
range|:
name|webServiceMessageSenders
control|)
block|{
if|if
condition|(
name|webServiceMessageSender
operator|instanceof
name|CommonsHttpMessageSender
condition|)
block|{
name|CommonsHttpMessageSender
name|commonsHttpMessageSender
init|=
operator|(
name|CommonsHttpMessageSender
operator|)
name|webServiceMessageSender
decl_stmt|;
name|setTimeOut
argument_list|(
name|commonsHttpMessageSender
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|webServiceMessageSender
operator|instanceof
name|HttpsUrlConnectionMessageSender
condition|)
block|{
comment|// Should check HttpsUrlConnectionMessageSender first as it extends HttpUrlConnectionMessageSender
if|if
condition|(
name|shouldConsiderTimeoutConfiguration
argument_list|(
name|configuration
argument_list|)
condition|)
block|{
name|webServiceMessageSenders
operator|.
name|remove
argument_list|(
name|webServiceMessageSender
argument_list|)
expr_stmt|;
name|webServiceMessageSenders
operator|.
name|add
argument_list|(
operator|new
name|CamelHttpsUrlConnectionMessageSender
argument_list|(
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|webServiceMessageSender
operator|instanceof
name|HttpUrlConnectionMessageSender
condition|)
block|{
if|if
condition|(
name|shouldConsiderTimeoutConfiguration
argument_list|(
name|configuration
argument_list|)
condition|)
block|{
name|webServiceMessageSenders
operator|.
name|remove
argument_list|(
name|webServiceMessageSender
argument_list|)
expr_stmt|;
name|webServiceMessageSenders
operator|.
name|add
argument_list|(
operator|new
name|CamelHttpUrlConnectionMessageSender
argument_list|(
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Warn only if the timeout option has been explicitly specified
if|if
condition|(
name|shouldConsiderTimeoutConfiguration
argument_list|(
name|configuration
argument_list|)
condition|)
block|{
comment|// For example this will be the case during unit-testing with the net.javacrumbs.spring-ws-test API
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring the timeout option for {} as there's no provided API available to populate it!"
argument_list|,
name|webServiceMessageSender
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|webServiceTemplate
operator|.
name|setMessageSenders
argument_list|(
name|webServiceMessageSenders
operator|.
name|toArray
argument_list|(
operator|new
name|WebServiceMessageSender
index|[
name|webServiceMessageSenders
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldConsiderTimeoutConfiguration (SpringWebserviceConfiguration configuration)
specifier|private
specifier|static
name|boolean
name|shouldConsiderTimeoutConfiguration
parameter_list|(
name|SpringWebserviceConfiguration
name|configuration
parameter_list|)
block|{
return|return
name|configuration
operator|.
name|getTimeout
argument_list|()
operator|>
operator|-
literal|1
return|;
block|}
DECL|method|setTimeOut (HttpURLConnection connection, SpringWebserviceConfiguration configuration)
specifier|private
specifier|static
name|void
name|setTimeOut
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|,
name|SpringWebserviceConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getTimeout
argument_list|()
operator|>
operator|-
literal|1
condition|)
block|{
name|connection
operator|.
name|setReadTimeout
argument_list|(
name|configuration
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setTimeOut (CommonsHttpMessageSender commonsHttpMessageSender, SpringWebserviceConfiguration configuration)
specifier|private
specifier|static
name|void
name|setTimeOut
parameter_list|(
name|CommonsHttpMessageSender
name|commonsHttpMessageSender
parameter_list|,
name|SpringWebserviceConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getTimeout
argument_list|()
operator|>
operator|-
literal|1
condition|)
block|{
name|commonsHttpMessageSender
operator|.
name|setReadTimeout
argument_list|(
name|configuration
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CamelHttpUrlConnectionMessageSender
specifier|private
specifier|static
class|class
name|CamelHttpUrlConnectionMessageSender
extends|extends
name|HttpUrlConnectionMessageSender
block|{
DECL|field|configuration
specifier|private
specifier|final
name|SpringWebserviceConfiguration
name|configuration
decl_stmt|;
DECL|method|CamelHttpUrlConnectionMessageSender (SpringWebserviceConfiguration configuration)
name|CamelHttpUrlConnectionMessageSender
parameter_list|(
name|SpringWebserviceConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareConnection (HttpURLConnection connection)
specifier|protected
name|void
name|prepareConnection
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|prepareConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|setTimeOut
argument_list|(
name|connection
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CamelHttpsUrlConnectionMessageSender
specifier|private
specifier|static
class|class
name|CamelHttpsUrlConnectionMessageSender
extends|extends
name|HttpsUrlConnectionMessageSender
block|{
DECL|field|configuration
specifier|private
specifier|final
name|SpringWebserviceConfiguration
name|configuration
decl_stmt|;
DECL|method|CamelHttpsUrlConnectionMessageSender (SpringWebserviceConfiguration configuration)
name|CamelHttpsUrlConnectionMessageSender
parameter_list|(
name|SpringWebserviceConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareConnection (HttpURLConnection connection)
specifier|protected
name|void
name|prepareConnection
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|prepareConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|setTimeOut
argument_list|(
name|connection
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DefaultWebserviceMessageCallback
specifier|private
specifier|static
class|class
name|DefaultWebserviceMessageCallback
implements|implements
name|WebServiceMessageCallback
block|{
DECL|field|soapActionHeader
specifier|private
specifier|final
name|String
name|soapActionHeader
decl_stmt|;
DECL|field|wsAddressingActionHeader
specifier|private
specifier|final
name|URI
name|wsAddressingActionHeader
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|SpringWebserviceConfiguration
name|configuration
decl_stmt|;
DECL|method|DefaultWebserviceMessageCallback (String soapAction, URI wsAddressingAction, SpringWebserviceConfiguration configuration)
specifier|public
name|DefaultWebserviceMessageCallback
parameter_list|(
name|String
name|soapAction
parameter_list|,
name|URI
name|wsAddressingAction
parameter_list|,
name|SpringWebserviceConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|soapActionHeader
operator|=
name|soapAction
expr_stmt|;
name|this
operator|.
name|wsAddressingActionHeader
operator|=
name|wsAddressingAction
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|doWithMessage (WebServiceMessage message)
specifier|public
name|void
name|doWithMessage
parameter_list|(
name|WebServiceMessage
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
comment|// Add SoapAction to webservice request. Note that exchange header
comment|// takes precedence over endpoint option
name|String
name|soapAction
init|=
name|soapActionHeader
operator|!=
literal|null
condition|?
name|soapActionHeader
else|:
name|configuration
operator|.
name|getSoapAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|soapAction
operator|!=
literal|null
condition|)
block|{
operator|new
name|SoapActionCallback
argument_list|(
name|soapAction
argument_list|)
operator|.
name|doWithMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Add WS-Addressing Action to webservice request (the WS-Addressing
comment|// 'to' header will default to the URL of the connection).
comment|// Note that exchange header takes precedence over endpoint option
name|URI
name|wsAddressingAction
init|=
name|wsAddressingActionHeader
operator|!=
literal|null
condition|?
name|wsAddressingActionHeader
else|:
name|configuration
operator|.
name|getWsAddressingAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|wsAddressingAction
operator|!=
literal|null
condition|)
block|{
operator|new
name|ActionCallback
argument_list|(
name|wsAddressingAction
argument_list|)
operator|.
name|doWithMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * A {@link SourceExtractor} that performs no conversion, instead conversion      * is handled by Camel's {@link TypeConverter} hierarchy.      */
DECL|class|NoopSourceExtractor
specifier|private
specifier|static
class|class
name|NoopSourceExtractor
implements|implements
name|SourceExtractor
argument_list|<
name|Object
argument_list|>
block|{
DECL|method|extractData (Source source)
specifier|public
name|Object
name|extractData
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
return|return
name|source
return|;
block|}
block|}
block|}
end_class

end_unit

