begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.ws
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|bean
operator|.
name|CamelEndpointDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|bean
operator|.
name|CamelEndpointMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|type
operator|.
name|EndpointMappingKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|client
operator|.
name|core
operator|.
name|WebServiceTemplate
import|;
end_import

begin_class
DECL|class|SpringWebserviceConfiguration
specifier|public
class|class
name|SpringWebserviceConfiguration
block|{
comment|/* Producer configuration */
DECL|field|webServiceTemplate
specifier|private
name|WebServiceTemplate
name|webServiceTemplate
decl_stmt|;
DECL|field|soapAction
specifier|private
name|String
name|soapAction
decl_stmt|;
DECL|field|wsAddressingAction
specifier|private
name|URI
name|wsAddressingAction
decl_stmt|;
comment|/* Consumer configuration */
DECL|field|endpointMapping
specifier|private
name|CamelEndpointMapping
name|endpointMapping
decl_stmt|;
DECL|field|endpointDispatcher
specifier|private
name|CamelEndpointDispatcher
name|endpointDispatcher
decl_stmt|;
DECL|field|endpointMappingKey
specifier|private
name|EndpointMappingKey
name|endpointMappingKey
decl_stmt|;
DECL|field|xmlConverter
specifier|private
name|XmlConverter
name|xmlConverter
decl_stmt|;
DECL|method|getWebServiceTemplate ()
specifier|public
name|WebServiceTemplate
name|getWebServiceTemplate
parameter_list|()
block|{
return|return
name|webServiceTemplate
return|;
block|}
DECL|method|setWebServiceTemplate (WebServiceTemplate webServiceTemplate)
specifier|public
name|void
name|setWebServiceTemplate
parameter_list|(
name|WebServiceTemplate
name|webServiceTemplate
parameter_list|)
block|{
name|this
operator|.
name|webServiceTemplate
operator|=
name|webServiceTemplate
expr_stmt|;
block|}
DECL|method|getSoapAction ()
specifier|public
name|String
name|getSoapAction
parameter_list|()
block|{
return|return
name|soapAction
return|;
block|}
DECL|method|setSoapAction (String soapAction)
specifier|public
name|void
name|setSoapAction
parameter_list|(
name|String
name|soapAction
parameter_list|)
block|{
name|this
operator|.
name|soapAction
operator|=
name|soapAction
expr_stmt|;
block|}
DECL|method|getEndpointUri ()
specifier|public
name|String
name|getEndpointUri
parameter_list|()
block|{
if|if
condition|(
name|endpointMappingKey
operator|!=
literal|null
condition|)
block|{
comment|// only for consumers, use lookup key as endpoint uri/key
return|return
name|encode
argument_list|(
name|endpointMappingKey
operator|.
name|getLookupKey
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|webServiceTemplate
operator|!=
literal|null
condition|)
block|{
return|return
name|webServiceTemplate
operator|.
name|getDefaultUri
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getWsAddressingAction ()
specifier|public
name|URI
name|getWsAddressingAction
parameter_list|()
block|{
return|return
name|wsAddressingAction
return|;
block|}
DECL|method|setWsAddressingAction (URI wsAddressingAction)
specifier|public
name|void
name|setWsAddressingAction
parameter_list|(
name|URI
name|wsAddressingAction
parameter_list|)
block|{
name|this
operator|.
name|wsAddressingAction
operator|=
name|wsAddressingAction
expr_stmt|;
block|}
DECL|method|setWsAddressingAction (String wsAddressingAction)
specifier|public
name|void
name|setWsAddressingAction
parameter_list|(
name|String
name|wsAddressingAction
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|this
operator|.
name|wsAddressingAction
operator|=
operator|new
name|URI
argument_list|(
name|wsAddressingAction
argument_list|)
expr_stmt|;
block|}
DECL|method|getEndpointMapping ()
specifier|public
name|CamelEndpointMapping
name|getEndpointMapping
parameter_list|()
block|{
return|return
name|endpointMapping
return|;
block|}
DECL|method|setEndpointMapping (CamelEndpointMapping endpointMapping)
specifier|public
name|void
name|setEndpointMapping
parameter_list|(
name|CamelEndpointMapping
name|endpointMapping
parameter_list|)
block|{
name|this
operator|.
name|endpointMapping
operator|=
name|endpointMapping
expr_stmt|;
block|}
DECL|method|getEndpointMappingKey ()
specifier|public
name|EndpointMappingKey
name|getEndpointMappingKey
parameter_list|()
block|{
return|return
name|endpointMappingKey
return|;
block|}
DECL|method|setEndpointMappingKey (EndpointMappingKey endpointMappingKey)
specifier|public
name|void
name|setEndpointMappingKey
parameter_list|(
name|EndpointMappingKey
name|endpointMappingKey
parameter_list|)
block|{
name|this
operator|.
name|endpointMappingKey
operator|=
name|endpointMappingKey
expr_stmt|;
block|}
DECL|method|getEndpointDispatcher ()
specifier|public
name|CamelEndpointDispatcher
name|getEndpointDispatcher
parameter_list|()
block|{
return|return
name|endpointDispatcher
return|;
block|}
DECL|method|setEndpointDispatcher (CamelEndpointDispatcher endpointDispatcher)
specifier|public
name|void
name|setEndpointDispatcher
parameter_list|(
name|CamelEndpointDispatcher
name|endpointDispatcher
parameter_list|)
block|{
name|this
operator|.
name|endpointDispatcher
operator|=
name|endpointDispatcher
expr_stmt|;
block|}
DECL|method|getXmlConverter ()
specifier|public
name|XmlConverter
name|getXmlConverter
parameter_list|()
block|{
return|return
name|xmlConverter
return|;
block|}
DECL|method|setXmlConverter (XmlConverter xmlConverter)
specifier|public
name|void
name|setXmlConverter
parameter_list|(
name|XmlConverter
name|xmlConverter
parameter_list|)
block|{
name|this
operator|.
name|xmlConverter
operator|=
name|xmlConverter
expr_stmt|;
block|}
DECL|method|encode (String uri)
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|int
name|i
init|=
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'}'
argument_list|)
decl_stmt|;
return|return
name|i
operator|==
operator|-
literal|1
condition|?
name|uri
else|:
operator|(
name|uri
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|+
literal|")"
operator|+
name|uri
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|)
operator|.
name|replaceFirst
argument_list|(
literal|"\\{"
argument_list|,
literal|"("
argument_list|)
return|;
block|}
DECL|method|decode (String uri)
specifier|public
specifier|static
name|String
name|decode
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|int
name|i
init|=
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|')'
argument_list|)
decl_stmt|;
return|return
name|i
operator|==
operator|-
literal|1
condition|?
name|uri
else|:
operator|(
name|uri
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|+
literal|"}"
operator|+
name|uri
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|)
operator|.
name|replaceFirst
argument_list|(
literal|"\\("
argument_list|,
literal|"{"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

