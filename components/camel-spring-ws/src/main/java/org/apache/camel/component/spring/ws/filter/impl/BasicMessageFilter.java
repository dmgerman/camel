begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.ws.filter.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|filter
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|attachment
operator|.
name|AttachmentMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|SpringWebserviceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|filter
operator|.
name|MessageFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|WebServiceMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_comment
comment|/**  * This class populates a SOAP header and attachments in the WebServiceMessage  * instance.  */
end_comment

begin_class
DECL|class|BasicMessageFilter
specifier|public
class|class
name|BasicMessageFilter
implements|implements
name|MessageFilter
block|{
annotation|@
name|Override
DECL|method|filterProducer (Exchange exchange, WebServiceMessage response)
specifier|public
name|void
name|filterProducer
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|WebServiceMessage
name|response
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|processHeaderAndAttachments
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|(
name|AttachmentMessage
operator|.
name|class
argument_list|)
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|filterConsumer (Exchange exchange, WebServiceMessage response)
specifier|public
name|void
name|filterConsumer
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|WebServiceMessage
name|response
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|AttachmentMessage
name|responseMessage
init|=
name|exchange
operator|.
name|getMessage
argument_list|(
name|AttachmentMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|processHeaderAndAttachments
argument_list|(
name|responseMessage
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If applicable this method adds a SOAP headers and attachments.      *       * @param inOrOut      * @param response      */
DECL|method|processHeaderAndAttachments (AttachmentMessage inOrOut, WebServiceMessage response)
specifier|protected
name|void
name|processHeaderAndAttachments
parameter_list|(
name|AttachmentMessage
name|inOrOut
parameter_list|,
name|WebServiceMessage
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|instanceof
name|SoapMessage
condition|)
block|{
name|SoapMessage
name|soapMessage
init|=
operator|(
name|SoapMessage
operator|)
name|response
decl_stmt|;
name|processSoapHeader
argument_list|(
name|inOrOut
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
name|doProcessSoapAttachments
argument_list|(
name|inOrOut
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If applicable this method adds a SOAP header.      *       * @param inOrOut      * @param soapMessage      */
DECL|method|processSoapHeader (AttachmentMessage inOrOut, SoapMessage soapMessage)
specifier|protected
name|void
name|processSoapHeader
parameter_list|(
name|AttachmentMessage
name|inOrOut
parameter_list|,
name|SoapMessage
name|soapMessage
parameter_list|)
block|{
name|boolean
name|isHeaderAvailable
init|=
name|inOrOut
operator|!=
literal|null
operator|&&
name|inOrOut
operator|.
name|getHeaders
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|inOrOut
operator|.
name|getHeaders
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|isHeaderAvailable
condition|)
block|{
name|doProcessSoapHeader
argument_list|(
name|inOrOut
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The SOAP header is populated from exchange.getOut().getHeaders() if this      * class is used by the consumer or exchange.getIn().getHeaders() if this      * class is used by the producer. If .getHeaders() contains under a certain      * key a value with the QName object, it is directly added as a new header      * element. If it contains only a String value, it is transformed into a      * header attribute. Following headers are excluded:      */
DECL|method|doProcessSoapHeader (AttachmentMessage inOrOut, SoapMessage soapMessage)
specifier|protected
name|void
name|doProcessSoapHeader
parameter_list|(
name|AttachmentMessage
name|inOrOut
parameter_list|,
name|SoapMessage
name|soapMessage
parameter_list|)
block|{
name|SoapHeader
name|soapHeader
init|=
name|soapMessage
operator|.
name|getSoapHeader
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|inOrOut
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|headerKeySet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|headers
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|headerKeySet
operator|.
name|remove
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_SOAP_ACTION
argument_list|)
expr_stmt|;
name|headerKeySet
operator|.
name|remove
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_ENDPOINT_URI
argument_list|)
expr_stmt|;
name|headerKeySet
operator|.
name|remove
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_ADDRESSING_ACTION
argument_list|)
expr_stmt|;
name|headerKeySet
operator|.
name|remove
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_ADDRESSING_PRODUCER_FAULT_TO
argument_list|)
expr_stmt|;
name|headerKeySet
operator|.
name|remove
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_ADDRESSING_PRODUCER_REPLY_TO
argument_list|)
expr_stmt|;
name|headerKeySet
operator|.
name|remove
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_ADDRESSING_CONSUMER_FAULT_ACTION
argument_list|)
expr_stmt|;
name|headerKeySet
operator|.
name|remove
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_ADDRESSING_CONSUMER_OUTPUT_ACTION
argument_list|)
expr_stmt|;
comment|// This gets repeated again in the below 'for loop' and gets added as attribute to soapenv:header.
comment|// This would have already been processed in SpringWebserviceProducer/Consumer instance.
name|headerKeySet
operator|.
name|remove
argument_list|(
name|SpringWebserviceConstants
operator|.
name|SPRING_WS_SOAP_HEADER
argument_list|)
expr_stmt|;
comment|// Replaced local constant 'BreadcrumbId' with the actual constant key in header 'breadcrumbId'
comment|// from org.apache.camel.Exchange.BREADCRUMB_ID. Because of this case mismatch, this key never
comment|// gets removed from header rather gets added to soapHeader all the time.
name|headerKeySet
operator|.
name|remove
argument_list|(
name|Exchange
operator|.
name|BREADCRUMB_ID
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|headerKeySet
control|)
block|{
name|Object
name|value
init|=
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|QName
condition|)
block|{
name|soapHeader
operator|.
name|addHeaderElement
argument_list|(
operator|(
name|QName
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|soapHeader
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Populate SOAP attachments from in or out exchange message. This the      * convenient method for overriding.      *       * @param inOrOut      * @param response      */
DECL|method|doProcessSoapAttachments (AttachmentMessage inOrOut, SoapMessage response)
specifier|protected
name|void
name|doProcessSoapAttachments
parameter_list|(
name|AttachmentMessage
name|inOrOut
parameter_list|,
name|SoapMessage
name|response
parameter_list|)
block|{
if|if
condition|(
name|inOrOut
operator|.
name|hasAttachments
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|attachments
init|=
name|inOrOut
operator|.
name|getAttachments
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|attachments
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keySet
control|)
block|{
name|response
operator|.
name|addAttachment
argument_list|(
name|key
argument_list|,
name|attachments
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

