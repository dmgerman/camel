begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.ws.addressing
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|utils
operator|.
name|OutputChannelReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|utils
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|CamelSpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|client
operator|.
name|core
operator|.
name|WebServiceTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|client
operator|.
name|ActionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|core
operator|.
name|EndpointReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|core
operator|.
name|MessageAddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|version
operator|.
name|Addressing10
import|;
end_import

begin_comment
comment|/**  * Provides abstract test for WS-Addressing  */
end_comment

begin_class
DECL|class|AbstractWSATests
specifier|public
specifier|abstract
class|class
name|AbstractWSATests
extends|extends
name|CamelSpringTestSupport
block|{
DECL|field|webServiceTemplate
specifier|protected
name|WebServiceTemplate
name|webServiceTemplate
decl_stmt|;
DECL|field|response
specifier|protected
name|OutputChannelReceiver
name|response
decl_stmt|;
DECL|field|newReply
specifier|protected
name|OutputChannelReceiver
name|newReply
decl_stmt|;
DECL|field|source
specifier|protected
name|StreamSource
name|source
decl_stmt|;
DECL|field|result
specifier|protected
name|StreamResult
name|result
decl_stmt|;
DECL|field|xmlBody
specifier|private
specifier|final
name|String
name|xmlBody
init|=
literal|"<GetQuote xmlns=\"http://www.webserviceX.NET/\"><symbol>GOOG</symbol></GetQuote>"
decl_stmt|;
DECL|field|requestInputAction
specifier|private
name|String
name|requestInputAction
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// initialize beans for catching results
name|webServiceTemplate
operator|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"webServiceTemplate"
argument_list|,
name|WebServiceTemplate
operator|.
name|class
argument_list|)
expr_stmt|;
name|newReply
operator|=
name|getMandatoryBean
argument_list|(
name|OutputChannelReceiver
operator|.
name|class
argument_list|,
literal|"replyReceiver"
argument_list|)
expr_stmt|;
name|response
operator|=
name|getMandatoryBean
argument_list|(
name|OutputChannelReceiver
operator|.
name|class
argument_list|,
literal|"responseReceiver"
argument_list|)
expr_stmt|;
comment|// sample data
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|StreamResult
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset from previous test
name|response
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newReply
operator|.
name|clear
argument_list|()
expr_stmt|;
name|requestInputAction
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates WS-Addressing Action and ReplyTo param for request      *       * @param action      * @param replyTo      * @return      * @throws URISyntaxException      */
DECL|method|actionAndReplyTo (String action, String replyTo)
specifier|protected
specifier|final
name|ActionCallback
name|actionAndReplyTo
parameter_list|(
name|String
name|action
parameter_list|,
name|String
name|replyTo
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|requestInputAction
operator|=
name|action
expr_stmt|;
name|ActionCallback
name|requestCallback
init|=
operator|new
name|ActionCallback
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|replyTo
operator|!=
literal|null
condition|)
block|{
name|requestCallback
operator|.
name|setReplyTo
argument_list|(
operator|new
name|EndpointReference
argument_list|(
operator|new
name|URI
argument_list|(
name|replyTo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|requestCallback
return|;
block|}
comment|/**      * Creates WS-Addressing Action param for request      *       * @param action      * @param replyTo      * @return      * @throws URISyntaxException      */
DECL|method|action (String action)
specifier|protected
specifier|final
name|ActionCallback
name|action
parameter_list|(
name|String
name|action
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
name|actionAndReplyTo
argument_list|(
name|action
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates WS-Addressing To and ReplyTo param for request      *       * @param action      * @param replyTo      * @return      * @throws URISyntaxException      */
DECL|method|toAndReplyTo (String to, String replyTo)
specifier|protected
specifier|final
name|ActionCallback
name|toAndReplyTo
parameter_list|(
name|String
name|to
parameter_list|,
name|String
name|replyTo
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|requestInputAction
operator|=
literal|"http://doesn-not-matter.com"
expr_stmt|;
name|ActionCallback
name|requestCallback
init|=
operator|new
name|ActionCallback
argument_list|(
operator|new
name|URI
argument_list|(
name|requestInputAction
argument_list|)
argument_list|,
operator|new
name|Addressing10
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
name|to
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|replyTo
operator|!=
literal|null
condition|)
block|{
name|requestCallback
operator|.
name|setReplyTo
argument_list|(
operator|new
name|EndpointReference
argument_list|(
operator|new
name|URI
argument_list|(
name|replyTo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|requestCallback
return|;
block|}
comment|/**      * Creates WS-Addressing To param for request      *       * @param action      * @param replyTo      * @return      * @throws URISyntaxException      */
DECL|method|to (String to)
specifier|protected
specifier|final
name|ActionCallback
name|to
parameter_list|(
name|String
name|to
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
name|toAndReplyTo
argument_list|(
name|to
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Construct a default action for the response message from the input      * message using the default response action suffix.      *       * @return      * @throws URISyntaxException      */
DECL|method|getDefaultResponseAction ()
specifier|protected
name|URI
name|getDefaultResponseAction
parameter_list|()
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|URI
argument_list|(
name|requestInputAction
operator|+
literal|"Response"
argument_list|)
return|;
block|}
comment|/**      * Only response is allow using a brand new channel      *       * @return      */
DECL|method|newChannelParams ()
specifier|protected
specifier|final
name|MessageAddressingProperties
name|newChannelParams
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|newReply
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|newReply
operator|.
name|getMessageContext
argument_list|()
argument_list|)
expr_stmt|;
name|SoapMessage
name|request
init|=
operator|(
name|SoapMessage
operator|)
name|newReply
operator|.
name|getMessageContext
argument_list|()
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|MessageAddressingProperties
name|wsaProperties
init|=
name|TestUtil
operator|.
name|getWSAProperties
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsaProperties
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|wsaProperties
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|wsaProperties
return|;
block|}
comment|/**      * Only response is allow using same channel      *       * @return      */
DECL|method|sameChannelParams ()
specifier|protected
specifier|final
name|MessageAddressingProperties
name|sameChannelParams
parameter_list|()
block|{
comment|// we expect the same channel reply
name|assertNull
argument_list|(
name|newReply
operator|.
name|getMessageContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|getMessageContext
argument_list|()
argument_list|)
expr_stmt|;
name|SoapMessage
name|soapResponse
init|=
operator|(
name|SoapMessage
operator|)
name|response
operator|.
name|getMessageContext
argument_list|()
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|soapResponse
argument_list|)
expr_stmt|;
name|MessageAddressingProperties
name|wsaProperties
init|=
name|TestUtil
operator|.
name|getWSAProperties
argument_list|(
name|soapResponse
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsaProperties
argument_list|)
expr_stmt|;
return|return
name|wsaProperties
return|;
block|}
comment|/**      * Provides such an ActionCallback that sets the WS-Addressing param replyTo      * or doesn't set WS-Addressing param replyTo. In other words it cause      * response to be return using new or same channel as the request.      *       * @param action      * @return      * @throws URISyntaxException      */
DECL|method|channelIn (String action)
specifier|abstract
name|ActionCallback
name|channelIn
parameter_list|(
name|String
name|action
parameter_list|)
throws|throws
name|URISyntaxException
function_decl|;
comment|/**      * Provide corresponding results based on channel input. These two abstract      * methods (channelIn and channelOut)are bind together tighly.      *       * @return      */
DECL|method|channelOut ()
specifier|abstract
name|MessageAddressingProperties
name|channelOut
parameter_list|()
function_decl|;
block|}
end_class

end_unit

