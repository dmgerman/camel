begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.ws.addressing
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fest
operator|.
name|assertions
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|client
operator|.
name|ActionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|client
operator|.
name|SoapFaultClientException
import|;
end_import

begin_comment
comment|/**  * Provides abstract test for fault and output params for spring-ws:to: and  * spring-ws:action: endpoints  */
end_comment

begin_class
DECL|class|AbstractConsumerTests
specifier|public
specifier|abstract
class|class
name|AbstractConsumerTests
extends|extends
name|AbstractWSATests
block|{
annotation|@
name|Test
DECL|method|defaultAction4ouput ()
specifier|public
name|void
name|defaultAction4ouput
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://default-ok.com/"
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getDefaultResponseAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultAction4fault ()
specifier|public
name|void
name|defaultAction4fault
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://default-fault.com/"
argument_list|)
decl_stmt|;
try|try
block|{
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SoapFaultClientException
name|e
parameter_list|)
block|{
comment|// ok - cause fault response
block|}
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getDefaultResponseAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|customAction4output ()
specifier|public
name|void
name|customAction4output
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://uri-ok.com"
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://customURIOutputAction"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|customAction4fault ()
specifier|public
name|void
name|customAction4fault
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://uri-fault.com"
argument_list|)
decl_stmt|;
try|try
block|{
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SoapFaultClientException
name|e
parameter_list|)
block|{
comment|// ok - cause fault response
block|}
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://customURIFaultAction"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
name|value
operator|=
literal|"Not implemented yet"
argument_list|)
DECL|method|overrideHeaderAction4output ()
specifier|public
name|void
name|overrideHeaderAction4output
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://override-ok.com"
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://outputHeader.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
name|value
operator|=
literal|"Not implemented yet"
argument_list|)
DECL|method|overrideHeaderAction4fault ()
specifier|public
name|void
name|overrideHeaderAction4fault
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://override-fault.com"
argument_list|)
decl_stmt|;
try|try
block|{
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SoapFaultClientException
name|e
parameter_list|)
block|{
comment|// ok - cause fault response
block|}
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://faultHeader.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
name|value
operator|=
literal|"Not implemented yet"
argument_list|)
DECL|method|headerAction4output ()
specifier|public
name|void
name|headerAction4output
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://headerOnly-ok.com"
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://outputHeader.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
name|value
operator|=
literal|"Not implemented yet"
argument_list|)
DECL|method|headerAction4fault ()
specifier|public
name|void
name|headerAction4fault
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://headerOnly-fault.com"
argument_list|)
decl_stmt|;
try|try
block|{
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SoapFaultClientException
name|e
parameter_list|)
block|{
comment|// ok - cause fault response
block|}
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://faultHeader.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyCustomOutputSpecified4output ()
specifier|public
name|void
name|onlyCustomOutputSpecified4output
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://uriOutputOnly-ok.com/"
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://customURIOutputAction"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyCustomOutputSpecified4fault ()
specifier|public
name|void
name|onlyCustomOutputSpecified4fault
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://uriOutputOnly-fault.com/"
argument_list|)
decl_stmt|;
try|try
block|{
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SoapFaultClientException
name|e
parameter_list|)
block|{
comment|// ok - cause fault response
block|}
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getDefaultResponseAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyCustomFaultSpecified4output ()
specifier|public
name|void
name|onlyCustomFaultSpecified4output
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://uriFaultOnly-ok.com/"
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getDefaultResponseAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyCustomFaultSpecified4fault ()
specifier|public
name|void
name|onlyCustomFaultSpecified4fault
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionCallback
name|requestCallback
init|=
name|channelIn
argument_list|(
literal|"http://uriFaultOnly-fault.com/"
argument_list|)
decl_stmt|;
try|try
block|{
name|webServiceTemplate
operator|.
name|sendSourceAndReceiveToResult
argument_list|(
name|source
argument_list|,
name|requestCallback
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SoapFaultClientException
name|e
parameter_list|)
block|{
comment|// ok - cause fault response
block|}
name|Assertions
operator|.
name|assertThat
argument_list|(
name|channelOut
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://customURIFaultAction"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

