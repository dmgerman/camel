begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.ws.addressing
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|ws
operator|.
name|utils
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelSpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|client
operator|.
name|WebServiceIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|client
operator|.
name|core
operator|.
name|WebServiceTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|client
operator|.
name|ActionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|addressing
operator|.
name|version
operator|.
name|Addressing10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ws
operator|.
name|soap
operator|.
name|client
operator|.
name|core
operator|.
name|SoapActionCallback
import|;
end_import

begin_class
DECL|class|ConsumerWSAEndpointMappingRouteTest
specifier|public
class|class
name|ConsumerWSAEndpointMappingRouteTest
extends|extends
name|CamelSpringTestSupport
block|{
DECL|field|xmlBody
specifier|private
specifier|final
name|String
name|xmlBody
init|=
literal|"<GetQuote xmlns=\"http://www.stockquotes.edu/\"><symbol>GOOG</symbol></GetQuote>"
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testDefault"
argument_list|)
DECL|field|resultEndpointActionDefault
specifier|private
name|MockEndpoint
name|resultEndpointActionDefault
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testAction"
argument_list|)
DECL|field|resultEndpointAction
specifier|private
name|MockEndpoint
name|resultEndpointAction
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testTo"
argument_list|)
DECL|field|resultEndpointTo
specifier|private
name|MockEndpoint
name|resultEndpointTo
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testActionAndTo"
argument_list|)
DECL|field|resultEndpointActionAndTo
specifier|private
name|MockEndpoint
name|resultEndpointActionAndTo
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testToAndAction"
argument_list|)
DECL|field|resultEndpointToAndAction
specifier|private
name|MockEndpoint
name|resultEndpointToAndAction
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testToMoreSpecific"
argument_list|)
DECL|field|resultEndpointToMoreSpecific
specifier|private
name|MockEndpoint
name|resultEndpointToMoreSpecific
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testActionMoreSpecific"
argument_list|)
DECL|field|resultEndpointActionMoreSpecific
specifier|private
name|MockEndpoint
name|resultEndpointActionMoreSpecific
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testOutputAndFault"
argument_list|)
DECL|field|resultOutputAndFault
specifier|private
name|MockEndpoint
name|resultOutputAndFault
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testOutputAndFault2"
argument_list|)
DECL|field|resultOutputAndFault2
specifier|private
name|MockEndpoint
name|resultOutputAndFault2
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testSoapAction"
argument_list|)
DECL|field|resultSoapAction
specifier|private
name|MockEndpoint
name|resultSoapAction
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:testReplyTo"
argument_list|)
DECL|field|resultReplyTo
specifier|private
name|MockEndpoint
name|resultReplyTo
decl_stmt|;
DECL|field|webServiceTemplate
specifier|private
name|WebServiceTemplate
name|webServiceTemplate
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|webServiceTemplate
operator|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"webServiceTemplate"
argument_list|,
name|WebServiceTemplate
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWSAddressingAction ()
specifier|public
name|void
name|testWSAddressingAction
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|ActionCallback
argument_list|(
literal|"http://www.stockquotes.edu/myUniqueAction"
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
comment|// here is localhost as to by default
name|resultEndpointAction
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpointAction
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWSAddressingTo ()
specifier|public
name|void
name|testWSAddressingTo
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|ActionCallback
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://www.stockquotes.edu/does-not-matter"
argument_list|)
argument_list|,
operator|new
name|Addressing10
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://myUniqueToUrl"
argument_list|)
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
name|resultEndpointTo
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpointTo
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWSAddressingActionAndTo ()
specifier|public
name|void
name|testWSAddressingActionAndTo
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|ActionCallback
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://actionAndTo"
argument_list|)
argument_list|,
operator|new
name|Addressing10
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://url4.to"
argument_list|)
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
name|resultEndpointActionAndTo
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpointActionAndTo
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWSAddressingToAndAction ()
specifier|public
name|void
name|testWSAddressingToAndAction
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|ActionCallback
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://toAndAction"
argument_list|)
argument_list|,
operator|new
name|Addressing10
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://url3.to"
argument_list|)
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
name|resultEndpointToAndAction
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpointToAndAction
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWSAddressingResolveToMoreSpecif ()
specifier|public
name|void
name|testWSAddressingResolveToMoreSpecif
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|ActionCallback
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://action1"
argument_list|)
argument_list|,
operator|new
name|Addressing10
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://url1.to"
argument_list|)
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
name|resultEndpointToMoreSpecific
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpointToMoreSpecific
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|resultEndpointActionMoreSpecific
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|resultEndpointActionMoreSpecific
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWSAddressingResolveActionMoreSpecif ()
specifier|public
name|void
name|testWSAddressingResolveActionMoreSpecif
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|ActionCallback
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://action2"
argument_list|)
argument_list|,
operator|new
name|Addressing10
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://url2.to"
argument_list|)
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
name|resultEndpointToMoreSpecific
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|resultEndpointToMoreSpecific
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|resultEndpointActionMoreSpecific
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpointActionMoreSpecific
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWSAddressingActionResponseActions ()
specifier|public
name|void
name|testWSAddressingActionResponseActions
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|ActionCallback
argument_list|(
literal|"http://www.stockquotes.edu/WSAddresingActionReply"
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
name|resultOutputAndFault
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultOutputAndFault
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWSAddressingToResponseActions ()
specifier|public
name|void
name|testWSAddressingToResponseActions
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|ActionCallback
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://doesn-not-matter.com"
argument_list|)
argument_list|,
operator|new
name|Addressing10
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://urlOutputAndFault2.to"
argument_list|)
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
name|resultOutputAndFault2
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultOutputAndFault2
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|WebServiceIOException
operator|.
name|class
argument_list|)
DECL|method|testWrongWSAddressingAction ()
specifier|public
name|void
name|testWrongWSAddressingAction
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|ActionCallback
argument_list|(
literal|"http://this-is-a-wrong-ws-addressing-action"
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
name|resultEndpointAction
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClassicalSoapHttpHeaderInterference ()
specifier|public
name|void
name|testClassicalSoapHttpHeaderInterference
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlBody
argument_list|)
argument_list|)
decl_stmt|;
name|webServiceTemplate
operator|.
name|sendSourceAndReceive
argument_list|(
name|source
argument_list|,
operator|new
name|SoapActionCallback
argument_list|(
literal|"http://www.stockquotes.edu/soapHttpHeaderAction"
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|NOOP_SOURCE_EXTRACTOR
argument_list|)
expr_stmt|;
name|resultSoapAction
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultSoapAction
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractXmlApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"org/apache/camel/component/spring/ws/addresing/ConsumerWSAEndpointMappingRouteTest-context.xml"
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

