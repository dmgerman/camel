begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.robotframework
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|robotframework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|RobotFrameworkCamelUtils
specifier|public
specifier|final
class|class
name|RobotFrameworkCamelUtils
block|{
DECL|field|ROBOT_CAMEL_EXCHANGE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ROBOT_CAMEL_EXCHANGE_NAME
init|=
literal|"exchange"
decl_stmt|;
DECL|field|ROBOT_VAR_CAMEL_BODY
specifier|private
specifier|static
specifier|final
name|String
name|ROBOT_VAR_CAMEL_BODY
init|=
literal|"body"
decl_stmt|;
DECL|field|ROBOT_VAR_CAMEL_HEADERS
specifier|private
specifier|static
specifier|final
name|String
name|ROBOT_VAR_CAMEL_HEADERS
init|=
literal|"headers"
decl_stmt|;
DECL|field|ROBOT_VAR_CAMEL_PROPERTIES
specifier|private
specifier|static
specifier|final
name|String
name|ROBOT_VAR_CAMEL_PROPERTIES
init|=
literal|"properties"
decl_stmt|;
DECL|field|ROBOT_VAR_FIELD_SEPERATOR
specifier|private
specifier|static
specifier|final
name|String
name|ROBOT_VAR_FIELD_SEPERATOR
init|=
literal|":"
decl_stmt|;
DECL|field|ROBOT_VAR_NESTING_SEPERATOR
specifier|private
specifier|static
specifier|final
name|String
name|ROBOT_VAR_NESTING_SEPERATOR
init|=
literal|"."
decl_stmt|;
comment|/**      * Utility classes should not have a public constructor.      */
DECL|method|RobotFrameworkCamelUtils ()
specifier|private
name|RobotFrameworkCamelUtils
parameter_list|()
block|{     }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createRobotVariablesFromCamelExchange (Exchange exchange)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createRobotVariablesFromCamelExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TypeConversionException
throws|,
name|NoTypeConversionAvailableException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variablesMap
init|=
name|ExchangeHelper
operator|.
name|createVariableMap
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|variableKeyValuePairList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variableEntry
range|:
name|variablesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ROBOT_VAR_CAMEL_BODY
operator|.
name|equals
argument_list|(
name|variableEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|bodyVariable
init|=
name|variableEntry
operator|.
name|getKey
argument_list|()
operator|+
name|ROBOT_VAR_FIELD_SEPERATOR
operator|+
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|variableEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|variableKeyValuePairList
operator|.
name|add
argument_list|(
name|bodyVariable
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ROBOT_VAR_CAMEL_HEADERS
operator|.
name|equals
argument_list|(
name|variableEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// here the param is the headers map
name|createStringValueOfVariablesFromMap
argument_list|(
name|variableKeyValuePairList
argument_list|,
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|variableEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|exchange
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|,
name|ROBOT_VAR_CAMEL_HEADERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ROBOT_CAMEL_EXCHANGE_NAME
operator|.
name|equals
argument_list|(
name|variableEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// here the param is camel exchange
name|createStringValueOfVariablesFromMap
argument_list|(
name|variableKeyValuePairList
argument_list|,
name|exchange
operator|.
name|getProperties
argument_list|()
argument_list|,
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|Exchange
operator|.
name|class
argument_list|,
name|variableEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|,
name|ROBOT_VAR_CAMEL_PROPERTIES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|variableKeyValuePairList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createStringValueOfVariablesFromMap (List<String> list, Map<String, Object> headersMap, Exchange exchange, StringBuilder headerVariableName, String baseName, boolean includeBaseName)
specifier|private
specifier|static
name|void
name|createStringValueOfVariablesFromMap
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headersMap
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|StringBuilder
name|headerVariableName
parameter_list|,
name|String
name|baseName
parameter_list|,
name|boolean
name|includeBaseName
parameter_list|)
throws|throws
name|TypeConversionException
throws|,
name|NoTypeConversionAvailableException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|headersMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|includeBaseName
condition|)
block|{
name|headerVariableName
operator|.
name|append
argument_list|(
name|baseName
argument_list|)
expr_stmt|;
block|}
name|headerVariableName
operator|.
name|append
argument_list|(
name|ROBOT_VAR_NESTING_SEPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
name|createStringValueOfVariablesFromMap
argument_list|(
name|list
argument_list|,
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|exchange
argument_list|,
name|headerVariableName
argument_list|,
name|headerVariableName
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|headerVariableName
operator|.
name|append
argument_list|(
name|ROBOT_VAR_FIELD_SEPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|headerVariableName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeBaseName
condition|)
block|{
name|headerVariableName
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|headerVariableName
operator|=
operator|new
name|StringBuilder
argument_list|(
name|baseName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

