begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.robotframework
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|robotframework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|RobotFrameworkCamelConfiguration
specifier|public
class|class
name|RobotFrameworkCamelConfiguration
implements|implements
name|Cloneable
block|{
annotation|@
name|UriParam
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
annotation|@
name|UriParam
DECL|field|document
specifier|private
name|String
name|document
decl_stmt|;
annotation|@
name|UriParam
DECL|field|metadata
specifier|private
name|String
name|metadata
decl_stmt|;
annotation|@
name|UriParam
DECL|field|tags
specifier|private
name|String
name|tags
decl_stmt|;
annotation|@
name|UriParam
DECL|field|tests
specifier|private
name|String
name|tests
decl_stmt|;
annotation|@
name|UriParam
DECL|field|suites
specifier|private
name|String
name|suites
decl_stmt|;
annotation|@
name|UriParam
DECL|field|includes
specifier|private
name|String
name|includes
decl_stmt|;
annotation|@
name|UriParam
DECL|field|excludes
specifier|private
name|String
name|excludes
decl_stmt|;
annotation|@
name|UriParam
DECL|field|criticalTags
specifier|private
name|String
name|criticalTags
decl_stmt|;
annotation|@
name|UriParam
DECL|field|nonCriticalTags
specifier|private
name|String
name|nonCriticalTags
decl_stmt|;
annotation|@
name|UriParam
DECL|field|runMode
specifier|private
name|String
name|runMode
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|dryrun
specifier|private
name|boolean
name|dryrun
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|skipTeardownOnExit
specifier|private
name|boolean
name|skipTeardownOnExit
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|exitOnFailure
specifier|private
name|boolean
name|exitOnFailure
decl_stmt|;
annotation|@
name|UriParam
DECL|field|randomize
specifier|private
name|String
name|randomize
decl_stmt|;
annotation|@
name|UriParam
DECL|field|variables
specifier|private
name|String
name|variables
decl_stmt|;
annotation|@
name|UriParam
DECL|field|variableFiles
specifier|private
name|String
name|variableFiles
decl_stmt|;
annotation|@
name|UriParam
DECL|field|outputDirectory
specifier|private
name|File
name|outputDirectory
decl_stmt|;
annotation|@
name|UriParam
DECL|field|output
specifier|private
name|File
name|output
decl_stmt|;
annotation|@
name|UriParam
DECL|field|log
specifier|private
name|File
name|log
decl_stmt|;
annotation|@
name|UriParam
DECL|field|report
specifier|private
name|File
name|report
decl_stmt|;
annotation|@
name|UriParam
DECL|field|xunitFile
specifier|private
name|File
name|xunitFile
decl_stmt|;
annotation|@
name|UriParam
DECL|field|debugFile
specifier|private
name|File
name|debugFile
decl_stmt|;
annotation|@
name|UriParam
DECL|field|timestampOutputs
specifier|private
name|boolean
name|timestampOutputs
decl_stmt|;
annotation|@
name|UriParam
DECL|field|splitOutputs
specifier|private
name|String
name|splitOutputs
decl_stmt|;
annotation|@
name|UriParam
DECL|field|logTitle
specifier|private
name|String
name|logTitle
decl_stmt|;
annotation|@
name|UriParam
DECL|field|reportTitle
specifier|private
name|String
name|reportTitle
decl_stmt|;
annotation|@
name|UriParam
DECL|field|summaryTitle
specifier|private
name|String
name|summaryTitle
decl_stmt|;
annotation|@
name|UriParam
DECL|field|reportBackground
specifier|private
name|String
name|reportBackground
decl_stmt|;
annotation|@
name|UriParam
DECL|field|logLevel
specifier|private
name|String
name|logLevel
decl_stmt|;
annotation|@
name|UriParam
DECL|field|suiteStatLevel
specifier|private
name|String
name|suiteStatLevel
decl_stmt|;
annotation|@
name|UriParam
DECL|field|tagStatIncludes
specifier|private
name|String
name|tagStatIncludes
decl_stmt|;
annotation|@
name|UriParam
DECL|field|tagStatExcludes
specifier|private
name|String
name|tagStatExcludes
decl_stmt|;
annotation|@
name|UriParam
DECL|field|combinedTagStats
specifier|private
name|String
name|combinedTagStats
decl_stmt|;
annotation|@
name|UriParam
DECL|field|tagDocs
specifier|private
name|String
name|tagDocs
decl_stmt|;
annotation|@
name|UriParam
DECL|field|tagStatLinks
specifier|private
name|String
name|tagStatLinks
decl_stmt|;
annotation|@
name|UriParam
DECL|field|listeners
specifier|private
name|String
name|listeners
decl_stmt|;
annotation|@
name|UriParam
DECL|field|listener
specifier|private
name|String
name|listener
decl_stmt|;
annotation|@
name|UriParam
DECL|field|warnOnSkippedFiles
specifier|private
name|boolean
name|warnOnSkippedFiles
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"78"
argument_list|)
DECL|field|monitorWidth
specifier|private
name|String
name|monitorWidth
decl_stmt|;
annotation|@
name|UriParam
DECL|field|monitorColors
specifier|private
name|String
name|monitorColors
decl_stmt|;
annotation|@
name|UriParam
DECL|field|argumentFile
specifier|private
name|File
name|argumentFile
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|runEmptySuite
specifier|private
name|boolean
name|runEmptySuite
decl_stmt|;
annotation|@
name|UriParam
DECL|field|runFailed
specifier|private
name|File
name|runFailed
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|noStatusReturnCode
specifier|private
name|boolean
name|noStatusReturnCode
decl_stmt|;
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getDocument ()
specifier|public
name|String
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
DECL|method|getMetadata ()
specifier|public
name|String
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
DECL|method|getTags ()
specifier|public
name|String
name|getTags
parameter_list|()
block|{
return|return
name|tags
return|;
block|}
DECL|method|getTests ()
specifier|public
name|String
name|getTests
parameter_list|()
block|{
return|return
name|tests
return|;
block|}
DECL|method|getSuites ()
specifier|public
name|String
name|getSuites
parameter_list|()
block|{
return|return
name|suites
return|;
block|}
DECL|method|getIncludes ()
specifier|public
name|String
name|getIncludes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
DECL|method|getExcludes ()
specifier|public
name|String
name|getExcludes
parameter_list|()
block|{
return|return
name|excludes
return|;
block|}
DECL|method|getCriticalTags ()
specifier|public
name|String
name|getCriticalTags
parameter_list|()
block|{
return|return
name|criticalTags
return|;
block|}
DECL|method|getNonCriticalTags ()
specifier|public
name|String
name|getNonCriticalTags
parameter_list|()
block|{
return|return
name|nonCriticalTags
return|;
block|}
DECL|method|getRunMode ()
specifier|public
name|String
name|getRunMode
parameter_list|()
block|{
return|return
name|runMode
return|;
block|}
DECL|method|isDryrun ()
specifier|public
name|boolean
name|isDryrun
parameter_list|()
block|{
return|return
name|dryrun
return|;
block|}
DECL|method|isSkipTeardownOnExit ()
specifier|public
name|boolean
name|isSkipTeardownOnExit
parameter_list|()
block|{
return|return
name|skipTeardownOnExit
return|;
block|}
DECL|method|isExitOnFailure ()
specifier|public
name|boolean
name|isExitOnFailure
parameter_list|()
block|{
return|return
name|exitOnFailure
return|;
block|}
DECL|method|getRandomize ()
specifier|public
name|String
name|getRandomize
parameter_list|()
block|{
return|return
name|randomize
return|;
block|}
DECL|method|getVariables ()
specifier|public
name|String
name|getVariables
parameter_list|()
block|{
return|return
name|variables
return|;
block|}
DECL|method|getVariableFiles ()
specifier|public
name|String
name|getVariableFiles
parameter_list|()
block|{
return|return
name|variableFiles
return|;
block|}
DECL|method|getOutputDirectory ()
specifier|public
name|File
name|getOutputDirectory
parameter_list|()
block|{
return|return
name|outputDirectory
return|;
block|}
DECL|method|getOutput ()
specifier|public
name|File
name|getOutput
parameter_list|()
block|{
return|return
name|output
return|;
block|}
DECL|method|getLog ()
specifier|public
name|File
name|getLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
DECL|method|getReport ()
specifier|public
name|File
name|getReport
parameter_list|()
block|{
return|return
name|report
return|;
block|}
DECL|method|getXunitFile ()
specifier|public
name|File
name|getXunitFile
parameter_list|()
block|{
return|return
name|xunitFile
return|;
block|}
DECL|method|getDebugFile ()
specifier|public
name|File
name|getDebugFile
parameter_list|()
block|{
return|return
name|debugFile
return|;
block|}
DECL|method|isTimestampOutputs ()
specifier|public
name|boolean
name|isTimestampOutputs
parameter_list|()
block|{
return|return
name|timestampOutputs
return|;
block|}
DECL|method|getSplitOutputs ()
specifier|public
name|String
name|getSplitOutputs
parameter_list|()
block|{
return|return
name|splitOutputs
return|;
block|}
DECL|method|getLogTitle ()
specifier|public
name|String
name|getLogTitle
parameter_list|()
block|{
return|return
name|logTitle
return|;
block|}
DECL|method|getReportTitle ()
specifier|public
name|String
name|getReportTitle
parameter_list|()
block|{
return|return
name|reportTitle
return|;
block|}
DECL|method|getSummaryTitle ()
specifier|public
name|String
name|getSummaryTitle
parameter_list|()
block|{
return|return
name|summaryTitle
return|;
block|}
DECL|method|getReportBackground ()
specifier|public
name|String
name|getReportBackground
parameter_list|()
block|{
return|return
name|reportBackground
return|;
block|}
DECL|method|getLogLevel ()
specifier|public
name|String
name|getLogLevel
parameter_list|()
block|{
return|return
name|logLevel
return|;
block|}
DECL|method|getSuiteStatLevel ()
specifier|public
name|String
name|getSuiteStatLevel
parameter_list|()
block|{
return|return
name|suiteStatLevel
return|;
block|}
DECL|method|getTagStatIncludes ()
specifier|public
name|String
name|getTagStatIncludes
parameter_list|()
block|{
return|return
name|tagStatIncludes
return|;
block|}
DECL|method|getTagStatExcludes ()
specifier|public
name|String
name|getTagStatExcludes
parameter_list|()
block|{
return|return
name|tagStatExcludes
return|;
block|}
DECL|method|getCombinedTagStats ()
specifier|public
name|String
name|getCombinedTagStats
parameter_list|()
block|{
return|return
name|combinedTagStats
return|;
block|}
DECL|method|getTagDocs ()
specifier|public
name|String
name|getTagDocs
parameter_list|()
block|{
return|return
name|tagDocs
return|;
block|}
DECL|method|getTagStatLinks ()
specifier|public
name|String
name|getTagStatLinks
parameter_list|()
block|{
return|return
name|tagStatLinks
return|;
block|}
DECL|method|getListeners ()
specifier|public
name|String
name|getListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
DECL|method|getListener ()
specifier|public
name|String
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
DECL|method|isWarnOnSkippedFiles ()
specifier|public
name|boolean
name|isWarnOnSkippedFiles
parameter_list|()
block|{
return|return
name|warnOnSkippedFiles
return|;
block|}
DECL|method|getMonitorWidth ()
specifier|public
name|String
name|getMonitorWidth
parameter_list|()
block|{
return|return
name|monitorWidth
return|;
block|}
DECL|method|getMonitorColors ()
specifier|public
name|String
name|getMonitorColors
parameter_list|()
block|{
return|return
name|monitorColors
return|;
block|}
DECL|method|getArgumentFile ()
specifier|public
name|File
name|getArgumentFile
parameter_list|()
block|{
return|return
name|argumentFile
return|;
block|}
DECL|method|isRunEmptySuite ()
specifier|public
name|boolean
name|isRunEmptySuite
parameter_list|()
block|{
return|return
name|runEmptySuite
return|;
block|}
DECL|method|getRunFailed ()
specifier|public
name|File
name|getRunFailed
parameter_list|()
block|{
return|return
name|runFailed
return|;
block|}
DECL|method|isNoStatusReturnCode ()
specifier|public
name|boolean
name|isNoStatusReturnCode
parameter_list|()
block|{
return|return
name|noStatusReturnCode
return|;
block|}
comment|/**      * Sets the name of the top-level tests suites.      */
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Sets the documentation of the top-level tests suites.      */
DECL|method|setDocument (String document)
specifier|public
name|void
name|setDocument
parameter_list|(
name|String
name|document
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
block|}
comment|/**      * Sets free metadata for the top level tests suites.      * comma seperated list of string resulting as List<String>      */
DECL|method|setMetadata (String metadata)
specifier|public
name|void
name|setMetadata
parameter_list|(
name|String
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
comment|/**      * Sets the tags(s) to all executed tests cases.      * List<String>      */
DECL|method|setTags (String tags)
specifier|public
name|void
name|setTags
parameter_list|(
name|String
name|tags
parameter_list|)
block|{
name|this
operator|.
name|tags
operator|=
name|tags
expr_stmt|;
block|}
comment|/**      * Selects the tests cases by name.      * List<String>      */
DECL|method|setTests (String tests)
specifier|public
name|void
name|setTests
parameter_list|(
name|String
name|tests
parameter_list|)
block|{
name|this
operator|.
name|tests
operator|=
name|tests
expr_stmt|;
block|}
comment|/**      * Selects the tests suites by name.      * List<String>      */
DECL|method|setSuites (String suites)
specifier|public
name|void
name|setSuites
parameter_list|(
name|String
name|suites
parameter_list|)
block|{
name|this
operator|.
name|suites
operator|=
name|suites
expr_stmt|;
block|}
comment|/**      * Selects the tests cases by tags.      * List<String>      */
DECL|method|setIncludes (String includes)
specifier|public
name|void
name|setIncludes
parameter_list|(
name|String
name|includes
parameter_list|)
block|{
name|this
operator|.
name|includes
operator|=
name|includes
expr_stmt|;
block|}
comment|/**      * Selects the tests cases by tags.      * List<String>      */
DECL|method|setExcludes (String excludes)
specifier|public
name|void
name|setExcludes
parameter_list|(
name|String
name|excludes
parameter_list|)
block|{
name|this
operator|.
name|excludes
operator|=
name|excludes
expr_stmt|;
block|}
comment|/**      * Tests that have the given tags are considered critical.      * List<String>      */
DECL|method|setCriticalTags (String criticalTags)
specifier|public
name|void
name|setCriticalTags
parameter_list|(
name|String
name|criticalTags
parameter_list|)
block|{
name|this
operator|.
name|criticalTags
operator|=
name|criticalTags
expr_stmt|;
block|}
comment|/**      * Tests that have the given tags are not critical.      * List<String>      */
DECL|method|setNonCriticalTags (String nonCriticalTags)
specifier|public
name|void
name|setNonCriticalTags
parameter_list|(
name|String
name|nonCriticalTags
parameter_list|)
block|{
name|this
operator|.
name|nonCriticalTags
operator|=
name|nonCriticalTags
expr_stmt|;
block|}
comment|/**      * Sets the execution mode for this tests run. Note that this setting has      * been deprecated in Robot Framework 2.8. Use separate dryryn,      * skipTeardownOnExit, exitOnFailure, and randomize settings instead.      */
DECL|method|setRunMode (String runMode)
specifier|public
name|void
name|setRunMode
parameter_list|(
name|String
name|runMode
parameter_list|)
block|{
name|this
operator|.
name|runMode
operator|=
name|runMode
expr_stmt|;
block|}
comment|/**      * Sets dryrun mode on use. In the dry run mode tests are run without      * executing keywords originating from test libraries. Useful for      * validating test data syntax.      */
DECL|method|setDryrun (boolean dryrun)
specifier|public
name|void
name|setDryrun
parameter_list|(
name|boolean
name|dryrun
parameter_list|)
block|{
name|this
operator|.
name|dryrun
operator|=
name|dryrun
expr_stmt|;
block|}
comment|/**      * Sets whether the teardowns are skipped if the test      * execution is prematurely stopped.      */
DECL|method|setSkipTeardownOnExit (boolean skipTeardownOnExit)
specifier|public
name|void
name|setSkipTeardownOnExit
parameter_list|(
name|boolean
name|skipTeardownOnExit
parameter_list|)
block|{
name|this
operator|.
name|skipTeardownOnExit
operator|=
name|skipTeardownOnExit
expr_stmt|;
block|}
comment|/**      * Sets robot to stop execution immediately if a critical test fails.      */
DECL|method|setExitOnFailure (boolean exitOnFailure)
specifier|public
name|void
name|setExitOnFailure
parameter_list|(
name|boolean
name|exitOnFailure
parameter_list|)
block|{
name|this
operator|.
name|exitOnFailure
operator|=
name|exitOnFailure
expr_stmt|;
block|}
comment|/**      * Sets the test execution order to be randomized. Valid values are all,      * suite, and test      */
DECL|method|setRandomize (String randomize)
specifier|public
name|void
name|setRandomize
parameter_list|(
name|String
name|randomize
parameter_list|)
block|{
name|this
operator|.
name|randomize
operator|=
name|randomize
expr_stmt|;
block|}
comment|/**      * Sets individual variables. Use the format "name:value"      * List<String>      */
DECL|method|setVariables (String variables)
specifier|public
name|void
name|setVariables
parameter_list|(
name|String
name|variables
parameter_list|)
block|{
name|this
operator|.
name|variables
operator|=
name|variables
expr_stmt|;
block|}
comment|/**      * Sets variables using variables files. Use the format "path:args"      * List<String>      */
DECL|method|setVariableFiles (String variableFiles)
specifier|public
name|void
name|setVariableFiles
parameter_list|(
name|String
name|variableFiles
parameter_list|)
block|{
name|this
operator|.
name|variableFiles
operator|=
name|variableFiles
expr_stmt|;
block|}
comment|/**      * Configures where generated reports are to be placed.      */
DECL|method|setOutputDirectory (File outputDirectory)
specifier|public
name|void
name|setOutputDirectory
parameter_list|(
name|File
name|outputDirectory
parameter_list|)
block|{
name|this
operator|.
name|outputDirectory
operator|=
name|outputDirectory
expr_stmt|;
block|}
comment|/**      * Sets the path to the generated output file.      */
DECL|method|setOutput (File output)
specifier|public
name|void
name|setOutput
parameter_list|(
name|File
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
comment|/**      * Sets the path to the generated log file.      */
DECL|method|setLog (File log)
specifier|public
name|void
name|setLog
parameter_list|(
name|File
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
comment|/**      * Sets the path to the generated report file.      */
DECL|method|setReport (File report)
specifier|public
name|void
name|setReport
parameter_list|(
name|File
name|report
parameter_list|)
block|{
name|this
operator|.
name|report
operator|=
name|report
expr_stmt|;
block|}
comment|/**      * Sets the path to the generated XUnit compatible result file, relative to outputDirectory. The      * file is in xml format. By default, the file name is derived from the testCasesDirectory      * parameter, replacing blanks in the directory name by underscores.      */
DECL|method|setXunitFile (File xunitFile)
specifier|public
name|void
name|setXunitFile
parameter_list|(
name|File
name|xunitFile
parameter_list|)
block|{
name|this
operator|.
name|xunitFile
operator|=
name|xunitFile
expr_stmt|;
block|}
comment|/**      * A debug file that is written during execution.      */
DECL|method|setDebugFile (File debugFile)
specifier|public
name|void
name|setDebugFile
parameter_list|(
name|File
name|debugFile
parameter_list|)
block|{
name|this
operator|.
name|debugFile
operator|=
name|debugFile
expr_stmt|;
block|}
comment|/**      * Adds a timestamp to all output files.      */
DECL|method|setTimestampOutputs (boolean timestampOutputs)
specifier|public
name|void
name|setTimestampOutputs
parameter_list|(
name|boolean
name|timestampOutputs
parameter_list|)
block|{
name|this
operator|.
name|timestampOutputs
operator|=
name|timestampOutputs
expr_stmt|;
block|}
comment|/**      * Splits output and log files.      */
DECL|method|setSplitOutputs (String splitOutputs)
specifier|public
name|void
name|setSplitOutputs
parameter_list|(
name|String
name|splitOutputs
parameter_list|)
block|{
name|this
operator|.
name|splitOutputs
operator|=
name|splitOutputs
expr_stmt|;
block|}
comment|/**      * Sets a title for the generated tests log.      */
DECL|method|setLogTitle (String logTitle)
specifier|public
name|void
name|setLogTitle
parameter_list|(
name|String
name|logTitle
parameter_list|)
block|{
name|this
operator|.
name|logTitle
operator|=
name|logTitle
expr_stmt|;
block|}
comment|/**      * Sets a title for the generated tests report.      */
DECL|method|setReportTitle (String reportTitle)
specifier|public
name|void
name|setReportTitle
parameter_list|(
name|String
name|reportTitle
parameter_list|)
block|{
name|this
operator|.
name|reportTitle
operator|=
name|reportTitle
expr_stmt|;
block|}
comment|/**      * Sets a title for the generated summary report.      */
DECL|method|setSummaryTitle (String summaryTitle)
specifier|public
name|void
name|setSummaryTitle
parameter_list|(
name|String
name|summaryTitle
parameter_list|)
block|{
name|this
operator|.
name|summaryTitle
operator|=
name|summaryTitle
expr_stmt|;
block|}
comment|/**      * Sets background colors for the generated report and summary.      */
DECL|method|setReportBackground (String reportBackground)
specifier|public
name|void
name|setReportBackground
parameter_list|(
name|String
name|reportBackground
parameter_list|)
block|{
name|this
operator|.
name|reportBackground
operator|=
name|reportBackground
expr_stmt|;
block|}
comment|/**      * Sets the threshold level for logging.      */
DECL|method|setLogLevel (String logLevel)
specifier|public
name|void
name|setLogLevel
parameter_list|(
name|String
name|logLevel
parameter_list|)
block|{
name|this
operator|.
name|logLevel
operator|=
name|logLevel
expr_stmt|;
block|}
comment|/**      * Defines how many levels to show in the Statistics by Suite table in outputs.      */
DECL|method|setSuiteStatLevel (String suiteStatLevel)
specifier|public
name|void
name|setSuiteStatLevel
parameter_list|(
name|String
name|suiteStatLevel
parameter_list|)
block|{
name|this
operator|.
name|suiteStatLevel
operator|=
name|suiteStatLevel
expr_stmt|;
block|}
comment|/**      * Includes only these tags in the Statistics by Tag and Test Details by Tag tables in outputs.      * List<String>      */
DECL|method|setTagStatIncludes (String tagStatIncludes)
specifier|public
name|void
name|setTagStatIncludes
parameter_list|(
name|String
name|tagStatIncludes
parameter_list|)
block|{
name|this
operator|.
name|tagStatIncludes
operator|=
name|tagStatIncludes
expr_stmt|;
block|}
comment|/**      * Excludes these tags from the Statistics by Tag and Test Details by Tag tables in outputs.      * List<String>      */
DECL|method|setTagStatExcludes (String tagStatExcludes)
specifier|public
name|void
name|setTagStatExcludes
parameter_list|(
name|String
name|tagStatExcludes
parameter_list|)
block|{
name|this
operator|.
name|tagStatExcludes
operator|=
name|tagStatExcludes
expr_stmt|;
block|}
comment|/**      * Creates combined statistics based on tags. Use the format "tags:title"      * List<String>      */
DECL|method|setCombinedTagStats (String combinedTagStats)
specifier|public
name|void
name|setCombinedTagStats
parameter_list|(
name|String
name|combinedTagStats
parameter_list|)
block|{
name|this
operator|.
name|combinedTagStats
operator|=
name|combinedTagStats
expr_stmt|;
block|}
comment|/**      * Adds documentation to the specified tags.      * List<String>      */
DECL|method|setTagDocs (String tagDocs)
specifier|public
name|void
name|setTagDocs
parameter_list|(
name|String
name|tagDocs
parameter_list|)
block|{
name|this
operator|.
name|tagDocs
operator|=
name|tagDocs
expr_stmt|;
block|}
comment|/**      * Adds external links to the Statistics by Tag table in outputs. Use the format      * "pattern:link:title"      * List<String>      */
DECL|method|setTagStatLinks (String tagStatLinks)
specifier|public
name|void
name|setTagStatLinks
parameter_list|(
name|String
name|tagStatLinks
parameter_list|)
block|{
name|this
operator|.
name|tagStatLinks
operator|=
name|tagStatLinks
expr_stmt|;
block|}
comment|/**      * Sets multiple listeners for monitoring tests execution. Use the format "ListenerWithArgs:arg1:arg2" or      * simply "ListenerWithoutArgs"      * List<String>      */
DECL|method|setListeners (String listeners)
specifier|public
name|void
name|setListeners
parameter_list|(
name|String
name|listeners
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|=
name|listeners
expr_stmt|;
block|}
comment|/**      * Sets a single listener for monitoring tests execution      */
DECL|method|setListener (String listener)
specifier|public
name|void
name|setListener
parameter_list|(
name|String
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
comment|/**      * Show a warning when an invalid file is skipped.      */
DECL|method|setWarnOnSkippedFiles (boolean warnOnSkippedFiles)
specifier|public
name|void
name|setWarnOnSkippedFiles
parameter_list|(
name|boolean
name|warnOnSkippedFiles
parameter_list|)
block|{
name|this
operator|.
name|warnOnSkippedFiles
operator|=
name|warnOnSkippedFiles
expr_stmt|;
block|}
comment|/**      * Width of the monitor output. Default is 78.      */
DECL|method|setMonitorWidth (String monitorWidth)
specifier|public
name|void
name|setMonitorWidth
parameter_list|(
name|String
name|monitorWidth
parameter_list|)
block|{
name|this
operator|.
name|monitorWidth
operator|=
name|monitorWidth
expr_stmt|;
block|}
comment|/**      * Using ANSI colors in console. Normally colors work in unixes but not in Windows. Default is      * 'on'.      *<ul>      *<li>'on' - use colors in unixes but not in Windows</li>      *<li>'off' - never use colors</li>      *<li>'force' - always use colors (also in Windows)</li>      *</ul>      */
DECL|method|setMonitorColors (String monitorColors)
specifier|public
name|void
name|setMonitorColors
parameter_list|(
name|String
name|monitorColors
parameter_list|)
block|{
name|this
operator|.
name|monitorColors
operator|=
name|monitorColors
expr_stmt|;
block|}
comment|/**      * A text file to read more arguments from.      */
DECL|method|setArgumentFile (File argumentFile)
specifier|public
name|void
name|setArgumentFile
parameter_list|(
name|File
name|argumentFile
parameter_list|)
block|{
name|this
operator|.
name|argumentFile
operator|=
name|argumentFile
expr_stmt|;
block|}
comment|/**      * Executes tests also if the top level test suite is empty. Useful e.g. with      * --include/--exclude when it is not an error that no test matches the condition.      */
DECL|method|setRunEmptySuite (boolean runEmptySuite)
specifier|public
name|void
name|setRunEmptySuite
parameter_list|(
name|boolean
name|runEmptySuite
parameter_list|)
block|{
name|this
operator|.
name|runEmptySuite
operator|=
name|runEmptySuite
expr_stmt|;
block|}
comment|/**      * Re-run failed tests, based on output.xml file.      */
DECL|method|setRunFailed (File runFailed)
specifier|public
name|void
name|setRunFailed
parameter_list|(
name|File
name|runFailed
parameter_list|)
block|{
name|this
operator|.
name|runFailed
operator|=
name|runFailed
expr_stmt|;
block|}
comment|/**      * If true, sets the return code to zero regardless of failures in test cases. Error codes are      * returned normally.      */
DECL|method|setNoStatusReturnCode (boolean noStatusReturnCode)
specifier|public
name|void
name|setNoStatusReturnCode
parameter_list|(
name|boolean
name|noStatusReturnCode
parameter_list|)
block|{
name|this
operator|.
name|noStatusReturnCode
operator|=
name|noStatusReturnCode
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|RobotFrameworkCamelConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|RobotFrameworkCamelConfiguration
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

