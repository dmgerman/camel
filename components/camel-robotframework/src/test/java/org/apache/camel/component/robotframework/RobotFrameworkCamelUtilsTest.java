begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.robotframework
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|robotframework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RobotFrameworkCamelUtilsTest
specifier|public
class|class
name|RobotFrameworkCamelUtilsTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
annotation|@
name|Override
DECL|method|doPostSetup ()
specifier|protected
name|void
name|doPostSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doPostSetup
argument_list|()
expr_stmt|;
name|exchange
operator|=
name|createExchangeWithBody
argument_list|(
literal|"Hello Robot"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testCreateRobotVariablesFromCamelExchange ()
specifier|public
name|void
name|testCreateRobotVariablesFromCamelExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"stringKey"
argument_list|,
literal|"str1"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"numericIntKey"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"numericBigDecimalKey"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inner1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|inner1
operator|.
name|put
argument_list|(
literal|"innerStringKey"
argument_list|,
literal|"str1"
argument_list|)
expr_stmt|;
name|inner1
operator|.
name|put
argument_list|(
literal|"innerNumericIntKey"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inner1
operator|.
name|put
argument_list|(
literal|"innerNumericBigDecimalKey"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"inner"
argument_list|,
name|inner1
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"stringKey"
argument_list|,
literal|"str1"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"numericIntKey"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"numericBigDecimalKey"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"inner"
argument_list|,
name|inner1
argument_list|)
expr_stmt|;
name|Exchange
name|responseExchange
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:setVariableCamelExchange"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|camelRobotVariables
init|=
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|responseExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RobotFrameworkCamelConstants
operator|.
name|CAMEL_ROBOT_VARIABLES
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|camelRobotVariable
range|:
name|camelRobotVariables
control|)
block|{
if|if
condition|(
operator|!
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"headers"
argument_list|)
operator|&&
operator|!
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"properties"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Body variable content should be [body:<body_value>]"
argument_list|,
literal|"body:Hello Robot"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"headers"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"stringKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [headers.stringKey:<header_value>]"
argument_list|,
literal|"headers.stringKey:str1"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"headers"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"numericIntKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [headers.numericIntKey:<header_value>]"
argument_list|,
literal|"headers.numericIntKey:1"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"headers"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"numericBigDecimalKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [headers.numericIntKey:<header_value>]"
argument_list|,
literal|"headers.numericBigDecimalKey:2"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"headers"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"innerStringKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [headers.stringKey:<header_value>]"
argument_list|,
literal|"headers.inner.innerStringKey:str1"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"headers"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"innerNumericIntKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [headers.numericIntKey:<header_value>]"
argument_list|,
literal|"headers.inner.innerNumericIntKey:1"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"headers"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"innerNumericBigDecimalKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [headers.numericIntKey:<header_value>]"
argument_list|,
literal|"headers.inner.innerNumericBigDecimalKey:2"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"properties"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"stringKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [properties.stringKey:<header_value>]"
argument_list|,
literal|"properties.stringKey:str1"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"properties"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"numericIntKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [properties.numericIntKey:<header_value>]"
argument_list|,
literal|"properties.numericIntKey:1"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"properties"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"numericBigDecimalKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [properties.numericIntKey:<header_value>]"
argument_list|,
literal|"properties.numericBigDecimalKey:2"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"properties"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"innerStringKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [properties.stringKey:<header_value>]"
argument_list|,
literal|"properties.inner.innerStringKey:str1"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"properties"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"innerNumericIntKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [properties.numericIntKey:<header_value>]"
argument_list|,
literal|"properties.inner.innerNumericIntKey:1"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"properties"
argument_list|)
operator|&&
name|camelRobotVariable
operator|.
name|contains
argument_list|(
literal|"innerNumericBigDecimalKey"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Header variable content should be [properties.numericIntKey:<header_value>]"
argument_list|,
literal|"properties.inner.innerNumericBigDecimalKey:2"
argument_list|,
name|camelRobotVariable
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RobotFrameworkCamelConstants
operator|.
name|CAMEL_ROBOT_RETURN_CODE
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:setVariableCamelExchange"
argument_list|)
operator|.
name|to
argument_list|(
literal|"robotframework:src/test/resources/org/apache/camel/component/robotframework/set_variable_camel_exchange.robot?xunitFile=target/out.xml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

