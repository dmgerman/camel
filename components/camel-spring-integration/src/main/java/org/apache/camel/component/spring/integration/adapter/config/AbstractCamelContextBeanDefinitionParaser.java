begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.integration.adapter.config
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|integration
operator|.
name|adapter
operator|.
name|config
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|BeanDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|AbstractSingleBeanDefinitionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * This BeanDefinition parser help to inject the camel context into the beans  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|AbstractCamelContextBeanDefinitionParaser
specifier|public
class|class
name|AbstractCamelContextBeanDefinitionParaser
extends|extends
name|AbstractSingleBeanDefinitionParser
block|{
DECL|field|DEFAULT_CAMEL_CONTEXT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CAMEL_CONTEXT_NAME
init|=
literal|"camelContext"
decl_stmt|;
DECL|method|getContextId (String contextId)
specifier|private
name|String
name|getContextId
parameter_list|(
name|String
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|contextId
argument_list|)
condition|)
block|{
comment|//Set the contextId default value here
return|return
name|DEFAULT_CAMEL_CONTEXT_NAME
return|;
block|}
else|else
block|{
return|return
name|contextId
return|;
block|}
block|}
DECL|method|mapToProperty (BeanDefinitionBuilder bean, String propertyName, String val)
specifier|protected
name|void
name|mapToProperty
parameter_list|(
name|BeanDefinitionBuilder
name|bean
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|ID_ATTRIBUTE
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|hasText
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|bean
operator|.
name|addPropertyReference
argument_list|(
name|propertyName
argument_list|,
name|val
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bean
operator|.
name|addPropertyValue
argument_list|(
name|propertyName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|wireCamelContext (BeanDefinitionBuilder bean, String camelContextId)
specifier|protected
name|void
name|wireCamelContext
parameter_list|(
name|BeanDefinitionBuilder
name|bean
parameter_list|,
name|String
name|camelContextId
parameter_list|)
block|{
name|bean
operator|.
name|addPropertyReference
argument_list|(
literal|"camelContext"
argument_list|,
name|camelContextId
argument_list|)
expr_stmt|;
block|}
DECL|method|parseAttributes (Element element, ParserContext ctx, BeanDefinitionBuilder bean)
specifier|protected
name|void
name|parseAttributes
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|ctx
parameter_list|,
name|BeanDefinitionBuilder
name|bean
parameter_list|)
block|{
name|NamedNodeMap
name|atts
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|node
init|=
operator|(
name|Attr
operator|)
name|atts
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|node
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"requestChannel"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"replyChannel"
argument_list|)
condition|)
block|{
name|bean
operator|.
name|addPropertyReference
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapToProperty
argument_list|(
name|bean
argument_list|,
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseCamelContext (Element element, ParserContext ctx, BeanDefinitionBuilder bean)
specifier|protected
name|void
name|parseCamelContext
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|ctx
parameter_list|,
name|BeanDefinitionBuilder
name|bean
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|String
name|name
init|=
name|n
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"camelContext"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// Parser the camel context
name|BeanDefinition
name|bd
init|=
name|ctx
operator|.
name|getDelegate
argument_list|()
operator|.
name|parseCustomElement
argument_list|(
operator|(
name|Element
operator|)
name|n
argument_list|)
decl_stmt|;
comment|// Get the inner camel context id
name|String
name|contextId
init|=
operator|(
name|String
operator|)
name|bd
operator|.
name|getPropertyValues
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|wireCamelContext
argument_list|(
name|bean
argument_list|,
name|getContextId
argument_list|(
name|contextId
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"camelContextRef"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|contextId
init|=
name|n
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|wireCamelContext
argument_list|(
name|bean
argument_list|,
name|getContextId
argument_list|(
name|contextId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|doParse (Element element, ParserContext ctx, BeanDefinitionBuilder bean)
specifier|protected
name|void
name|doParse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|ctx
parameter_list|,
name|BeanDefinitionBuilder
name|bean
parameter_list|)
block|{
name|parseAttributes
argument_list|(
name|element
argument_list|,
name|ctx
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|parseCamelContext
argument_list|(
name|element
argument_list|,
name|ctx
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

