begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.integration.adapter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|integration
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|integration
operator|.
name|SpringIntegrationBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|integration
operator|.
name|SpringIntegrationExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * CamelTargeAdapter will redirect the Spring Integration message to the Camel context.  * When we inject the camel context into it, we need also specify the Camel endpoint url  * we will route the Spring Integration message to the Camel context  * @author Willem Jiang  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|CamelTargetAdapter
specifier|public
class|class
name|CamelTargetAdapter
extends|extends
name|AbstractCamelAdapter
block|{
DECL|field|logger
specifier|private
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|camelTemplate
specifier|private
name|CamelTemplate
argument_list|<
name|Exchange
argument_list|>
name|camelTemplate
decl_stmt|;
DECL|field|camelEndpoint
specifier|private
name|Endpoint
name|camelEndpoint
decl_stmt|;
DECL|method|getCamelTemplate ()
specifier|public
name|CamelTemplate
argument_list|<
name|Exchange
argument_list|>
name|getCamelTemplate
parameter_list|()
block|{
if|if
condition|(
name|camelTemplate
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getCamelContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|camelTemplate
operator|=
operator|new
name|CamelTemplate
argument_list|<
name|Exchange
argument_list|>
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|camelTemplate
operator|=
operator|new
name|CamelTemplate
argument_list|<
name|Exchange
argument_list|>
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|camelTemplate
return|;
block|}
DECL|method|handle (Message<?> request)
specifier|public
name|Message
argument_list|<
name|?
argument_list|>
name|handle
parameter_list|(
name|Message
argument_list|<
name|?
argument_list|>
name|request
parameter_list|)
block|{
name|ExchangePattern
name|pattern
decl_stmt|;
if|if
condition|(
name|isExpectReply
argument_list|()
condition|)
block|{
name|pattern
operator|=
name|ExchangePattern
operator|.
name|InOut
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
name|ExchangePattern
operator|.
name|InOnly
expr_stmt|;
block|}
name|Exchange
name|inExchange
init|=
operator|new
name|SpringIntegrationExchange
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|SpringIntegrationBinding
operator|.
name|storeToCamelMessage
argument_list|(
name|request
argument_list|,
name|inExchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|outExchange
init|=
name|getCamelTemplate
argument_list|()
operator|.
name|send
argument_list|(
name|getCamelEndpointUri
argument_list|()
argument_list|,
name|inExchange
argument_list|)
decl_stmt|;
name|Message
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isExpectReply
argument_list|()
condition|)
block|{
name|response
operator|=
name|SpringIntegrationBinding
operator|.
name|storeToSpringIntegrationMessage
argument_list|(
name|outExchange
operator|.
name|getOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

