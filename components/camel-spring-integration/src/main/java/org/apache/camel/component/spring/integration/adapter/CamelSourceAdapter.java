begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.integration.adapter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|integration
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|integration
operator|.
name|SpringIntegrationBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|bus
operator|.
name|MessageBus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|bus
operator|.
name|MessageBusAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|channel
operator|.
name|MessageChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|channel
operator|.
name|PollableChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|gateway
operator|.
name|SimpleMessagingGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|handler
operator|.
name|MessageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * A CamelContext will be injected into CameSourceAdapter which will  * let Spring Integration channel talk to the CamelContext certain endpoint  *  * @author Willem Jiang  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|CamelSourceAdapter
specifier|public
class|class
name|CamelSourceAdapter
extends|extends
name|AbstractCamelAdapter
implements|implements
name|MessageHandler
implements|,
name|InitializingBean
implements|,
name|MessageBusAware
block|{
DECL|field|lifecycleMonitor
specifier|protected
specifier|final
name|Object
name|lifecycleMonitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|consumer
specifier|private
name|Consumer
name|consumer
decl_stmt|;
DECL|field|camelEndpoint
specifier|private
name|Endpoint
name|camelEndpoint
decl_stmt|;
DECL|field|requestChannel
specifier|private
name|MessageChannel
name|requestChannel
decl_stmt|;
DECL|field|messageGateway
specifier|private
name|SimpleMessagingGateway
name|messageGateway
init|=
operator|new
name|SimpleMessagingGateway
argument_list|()
decl_stmt|;
DECL|field|initialized
specifier|private
specifier|volatile
name|boolean
name|initialized
decl_stmt|;
DECL|method|setRequestChannel (MessageChannel channel)
specifier|public
name|void
name|setRequestChannel
parameter_list|(
name|MessageChannel
name|channel
parameter_list|)
block|{
name|requestChannel
operator|=
name|channel
expr_stmt|;
name|messageGateway
operator|.
name|setRequestChannel
argument_list|(
name|requestChannel
argument_list|)
expr_stmt|;
block|}
DECL|method|getChannel ()
specifier|public
name|MessageChannel
name|getChannel
parameter_list|()
block|{
return|return
name|requestChannel
return|;
block|}
DECL|method|setReplyChannel (PollableChannel channel)
specifier|public
name|void
name|setReplyChannel
parameter_list|(
name|PollableChannel
name|channel
parameter_list|)
block|{
name|messageGateway
operator|.
name|setReplyChannel
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
DECL|method|setRequestTimeout (long requestTimeout)
specifier|public
name|void
name|setRequestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|this
operator|.
name|messageGateway
operator|.
name|setRequestTimeout
argument_list|(
name|requestTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|setReplyTimeout (long replyTimeout)
specifier|public
name|void
name|setReplyTimeout
parameter_list|(
name|long
name|replyTimeout
parameter_list|)
block|{
name|this
operator|.
name|messageGateway
operator|.
name|setReplyTimeout
argument_list|(
name|replyTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|incoming (Exchange exchange)
specifier|private
name|void
name|incoming
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|message
operator|.
name|Message
name|request
init|=
name|SpringIntegrationBinding
operator|.
name|createSpringIntegrationMessage
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|message
operator|.
name|Message
name|response
init|=
name|handle
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
comment|// TODO How to deal with the fault message
name|SpringIntegrationBinding
operator|.
name|storeToCamelMessage
argument_list|(
name|response
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ConsumerProcessor
specifier|protected
class|class
name|ConsumerProcessor
implements|implements
name|Processor
block|{
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
name|incoming
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to process incoming message : "
operator|+
name|ex
argument_list|)
expr_stmt|;
comment|//TODO Maybe we should set the exception as the fault message
block|}
block|}
block|}
DECL|method|afterPropertiesSet ()
specifier|public
specifier|final
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|lifecycleMonitor
init|)
block|{
if|if
condition|(
name|this
operator|.
name|initialized
condition|)
block|{
return|return;
block|}
block|}
name|this
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|initialize ()
specifier|protected
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start the service here
name|camelEndpoint
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|getCamelEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|camelEndpoint
operator|.
name|createConsumer
argument_list|(
operator|new
name|ConsumerProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|handle (Message<?> message)
specifier|public
specifier|final
name|Message
argument_list|<
name|?
argument_list|>
name|handle
parameter_list|(
name|Message
argument_list|<
name|?
argument_list|>
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|initialized
condition|)
block|{
try|try
block|{
name|this
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"unable to initialize "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|isExpectReply
argument_list|()
condition|)
block|{
name|messageGateway
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|messageGateway
operator|.
name|sendAndReceiveMessage
argument_list|(
name|message
argument_list|)
return|;
block|}
DECL|method|setMessageBus (MessageBus bus)
specifier|public
name|void
name|setMessageBus
parameter_list|(
name|MessageBus
name|bus
parameter_list|)
block|{
name|messageGateway
operator|.
name|setMessageBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

