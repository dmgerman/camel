begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.integration.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|integration
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|integration
operator|.
name|SpringIntegrationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|integration
operator|.
name|SpringIntegrationMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|MessageChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|MessageHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|message
operator|.
name|GenericMessage
import|;
end_import

begin_comment
comment|/**  * The<a href="http://camel.apache.org/type-converter.html">Type Converters</a>  * for turning the Spring Integration types into Camel native type.  *  * @version   */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|SpringIntegrationConverter
specifier|public
specifier|final
class|class
name|SpringIntegrationConverter
block|{
DECL|method|SpringIntegrationConverter ()
specifier|private
name|SpringIntegrationConverter
parameter_list|()
block|{
comment|// Helper class
block|}
annotation|@
name|Converter
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|toEndpoint (final MessageChannel channel)
specifier|public
specifier|static
name|Endpoint
name|toEndpoint
parameter_list|(
specifier|final
name|MessageChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|Endpoint
name|answer
init|=
operator|new
name|SpringIntegrationEndpoint
argument_list|(
literal|"spring-integration://"
operator|+
name|channel
operator|.
name|toString
argument_list|()
argument_list|,
name|channel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Converter
DECL|method|toSpringMessage (final org.apache.camel.Message camelMessage)
specifier|public
specifier|static
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|Message
name|toSpringMessage
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|camelMessage
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|camelMessage
operator|instanceof
name|SpringIntegrationMessage
condition|)
block|{
name|SpringIntegrationMessage
name|siMessage
init|=
operator|(
name|SpringIntegrationMessage
operator|)
name|camelMessage
decl_stmt|;
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|Message
name|message
init|=
name|siMessage
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
return|return
name|message
return|;
block|}
block|}
comment|// Create a new spring message and copy the attributes and body from the camel message
name|MessageHeaders
name|messageHeaders
init|=
operator|new
name|MessageHeaders
argument_list|(
name|camelMessage
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|GenericMessage
argument_list|(
name|camelMessage
operator|.
name|getBody
argument_list|()
argument_list|,
name|messageHeaders
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toCamelMessage (final org.springframework.integration.Message springMessage)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|toCamelMessage
parameter_list|(
specifier|final
name|org
operator|.
name|springframework
operator|.
name|integration
operator|.
name|Message
name|springMessage
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|SpringIntegrationMessage
argument_list|(
name|springMessage
argument_list|)
return|;
block|}
block|}
end_class

end_unit

