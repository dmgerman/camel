begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.testng
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|testng
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|DataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_comment
comment|/**  * A helper base class for running Camel based test cases using TestNG which makes it easy to overload  * system properties before the spring application context is initialised; to allow a single spring XML to be reused  * with some properties being overloaded.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|SpringRunner
specifier|public
class|class
name|SpringRunner
block|{
DECL|field|oldSystemProperties
specifier|private
name|Properties
name|oldSystemProperties
decl_stmt|;
DECL|field|applicationContext
specifier|private
name|AbstractXmlApplicationContext
name|applicationContext
decl_stmt|;
DECL|field|camelContext
specifier|private
name|SpringCamelContext
name|camelContext
decl_stmt|;
DECL|method|assertApplicationContextStarts (String applicationContextLocations, Properties properties)
specifier|protected
name|void
name|assertApplicationContextStarts
parameter_list|(
name|String
name|applicationContextLocations
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
comment|// lets overload the system properties
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
init|=
name|properties
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now lets load the context
name|applicationContext
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
name|applicationContextLocations
argument_list|)
expr_stmt|;
name|applicationContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|camelContext
operator|=
name|SpringCamelContext
operator|.
name|springCamelContext
argument_list|(
name|applicationContext
argument_list|)
expr_stmt|;
block|}
DECL|method|getCamelContext ()
specifier|protected
name|SpringCamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
comment|/**      * Creates a properties object with the given key and value       */
DECL|method|createProperties (String name, String value)
specifier|protected
name|Properties
name|createProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
annotation|@
name|BeforeTest
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|oldSystemProperties
operator|=
operator|new
name|Properties
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setup!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterTest
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|applicationContext
operator|!=
literal|null
condition|)
block|{
name|applicationContext
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|setProperties
argument_list|(
name|oldSystemProperties
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Tearning down!"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

