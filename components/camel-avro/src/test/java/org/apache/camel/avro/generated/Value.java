begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|// CHECKSTYLE:OFF
end_comment

begin_comment
comment|/**  * Autogenerated by Avro  *   * DO NOT EDIT DIRECTLY  */
end_comment

begin_package
DECL|package|org.apache.camel.avro.generated
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
package|;
end_package

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
DECL|class|Value
specifier|public
class|class
name|Value
extends|extends
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecordBase
implements|implements
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecord
block|{
DECL|field|SCHEMA$
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|SCHEMA$
init|=
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
operator|.
name|parse
argument_list|(
literal|"{\"type\":\"record\",\"name\":\"Value\",\"namespace\":\"org.apache.camel.avro.generated\",\"fields\":[{\"name\":\"value\",\"type\":\"string\"}]}"
argument_list|)
decl_stmt|;
DECL|field|value
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
decl_stmt|;
DECL|method|getSchema ()
specifier|public
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|SCHEMA$
return|;
block|}
comment|// Used by DatumWriter.  Applications should not call.
DECL|method|get (int field$)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|get
parameter_list|(
name|int
name|field$
parameter_list|)
block|{
switch|switch
condition|(
name|field$
condition|)
block|{
case|case
literal|0
case|:
return|return
name|value
return|;
default|default:
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
literal|"Bad index"
argument_list|)
throw|;
block|}
block|}
comment|// Used by DatumReader.  Applications should not call.
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"unchecked"
argument_list|)
DECL|method|put (int field$, java.lang.Object value$)
specifier|public
name|void
name|put
parameter_list|(
name|int
name|field$
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value$
parameter_list|)
block|{
switch|switch
condition|(
name|field$
condition|)
block|{
case|case
literal|0
case|:
name|value
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
operator|)
name|value$
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
literal|"Bad index"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Gets the value of the 'value' field.    */
DECL|method|getValue ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**    * Sets the value of the 'value' field.    * @param value the value to set.    */
DECL|method|setValue (java.lang.CharSequence value)
specifier|public
name|void
name|setValue
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/** Creates a new Value RecordBuilder */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
argument_list|()
return|;
block|}
comment|/** Creates a new Value RecordBuilder by copying an existing Builder */
DECL|method|newBuilder (org.apache.camel.avro.generated.Value.Builder other)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
name|other
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/** Creates a new Value RecordBuilder by copying an existing Value instance */
DECL|method|newBuilder (org.apache.camel.avro.generated.Value other)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
name|other
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/**    * RecordBuilder for Value instances.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecordBuilderBase
argument_list|<
name|Value
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|data
operator|.
name|RecordBuilder
argument_list|<
name|Value
argument_list|>
block|{
DECL|field|value
specifier|private
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
decl_stmt|;
comment|/** Creates a new Builder */
DECL|method|Builder ()
specifier|private
name|Builder
parameter_list|()
block|{
name|super
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|SCHEMA$
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a Builder by copying an existing Builder */
DECL|method|Builder (org.apache.camel.avro.generated.Value.Builder other)
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a Builder by copying an existing Value instance */
DECL|method|Builder (org.apache.camel.avro.generated.Value other)
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|SCHEMA$
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|other
operator|.
name|value
argument_list|)
condition|)
block|{
name|this
operator|.
name|value
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
operator|)
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|value
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** Gets the value of the 'value' field */
DECL|method|getValue ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/** Sets the value of the 'value' field */
DECL|method|setValue (java.lang.CharSequence value)
specifier|public
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
name|setValue
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks whether the 'value' field has been set */
DECL|method|hasValue ()
specifier|public
name|boolean
name|hasValue
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
return|;
block|}
comment|/** Clears the value of the 'value' field */
DECL|method|clearValue ()
specifier|public
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|avro
operator|.
name|generated
operator|.
name|Value
operator|.
name|Builder
name|clearValue
parameter_list|()
block|{
name|value
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|Value
name|build
parameter_list|()
block|{
try|try
block|{
name|Value
name|record
init|=
operator|new
name|Value
argument_list|()
decl_stmt|;
name|record
operator|.
name|value
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
condition|?
name|this
operator|.
name|value
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

