begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.avro
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|avro
operator|.
name|AvroConstants
operator|.
name|AVRO_MESSAGE_NAME_SEPARATOR
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|AvroConfiguration
specifier|public
class|class
name|AvroConfiguration
implements|implements
name|Cloneable
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|transport
specifier|private
name|AvroTransport
name|transport
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
annotation|@
name|UriPath
DECL|field|messageName
specifier|private
name|String
name|messageName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|protocolLocation
specifier|private
name|String
name|protocolLocation
decl_stmt|;
annotation|@
name|UriParam
DECL|field|protocol
specifier|private
name|Protocol
name|protocol
decl_stmt|;
annotation|@
name|UriParam
DECL|field|protocolClassName
specifier|private
name|String
name|protocolClassName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|uriAuthority
specifier|private
name|String
name|uriAuthority
decl_stmt|;
annotation|@
name|UriParam
DECL|field|reflectionProtocol
specifier|private
name|boolean
name|reflectionProtocol
decl_stmt|;
annotation|@
name|UriParam
DECL|field|singleParameter
specifier|private
name|boolean
name|singleParameter
decl_stmt|;
DECL|method|copy ()
specifier|public
name|AvroConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
name|AvroConfiguration
name|answer
init|=
operator|(
name|AvroConfiguration
operator|)
name|clone
argument_list|()
decl_stmt|;
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseURI (URI uri, Map<String, Object> parameters, AvroComponent component)
specifier|public
name|void
name|parseURI
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|AvroComponent
name|component
parameter_list|)
throws|throws
name|Exception
block|{
name|transport
operator|=
name|AvroTransport
operator|.
name|valueOf
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|setHost
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|setPort
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|uri
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|StringUtils
operator|.
name|indexOf
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|AVRO_MESSAGE_NAME_SEPARATOR
argument_list|)
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
name|String
name|path
init|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|AVRO_MESSAGE_NAME_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|contains
argument_list|(
name|AVRO_MESSAGE_NAME_SEPARATOR
argument_list|)
condition|)
block|{
name|setMessageName
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized Avro message name: "
operator|+
name|path
operator|+
literal|" for uri: "
operator|+
name|uri
argument_list|)
throw|;
block|}
block|}
name|setUriAuthority
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * Hostname to use      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * Port number to use      */
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getProtocol ()
specifier|public
name|Protocol
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
comment|/**      * Avro protocol to use      */
DECL|method|setProtocol (Protocol protocol)
specifier|public
name|void
name|setProtocol
parameter_list|(
name|Protocol
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
DECL|method|getTransport ()
specifier|public
name|AvroTransport
name|getTransport
parameter_list|()
block|{
return|return
name|transport
return|;
block|}
comment|/**      * Transport to use, can be either http or netty      */
DECL|method|setTransport (String transport)
specifier|public
name|void
name|setTransport
parameter_list|(
name|String
name|transport
parameter_list|)
block|{
name|this
operator|.
name|transport
operator|=
name|AvroTransport
operator|.
name|valueOf
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
comment|/**      * Transport to use, can be either http or netty      */
DECL|method|setTransport (AvroTransport transport)
specifier|public
name|void
name|setTransport
parameter_list|(
name|AvroTransport
name|transport
parameter_list|)
block|{
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
block|}
DECL|method|getProtocolLocation ()
specifier|public
name|String
name|getProtocolLocation
parameter_list|()
block|{
return|return
name|protocolLocation
return|;
block|}
comment|/**      * Avro protocol location      */
DECL|method|setProtocolLocation (String protocolLocation)
specifier|public
name|void
name|setProtocolLocation
parameter_list|(
name|String
name|protocolLocation
parameter_list|)
block|{
name|this
operator|.
name|protocolLocation
operator|=
name|protocolLocation
expr_stmt|;
block|}
DECL|method|getProtocolClassName ()
specifier|public
name|String
name|getProtocolClassName
parameter_list|()
block|{
return|return
name|protocolClassName
return|;
block|}
comment|/**      * Avro protocol to use defined by the FQN class name      */
DECL|method|setProtocolClassName (String protocolClassName)
specifier|public
name|void
name|setProtocolClassName
parameter_list|(
name|String
name|protocolClassName
parameter_list|)
block|{
name|this
operator|.
name|protocolClassName
operator|=
name|protocolClassName
expr_stmt|;
block|}
DECL|method|getMessageName ()
specifier|public
name|String
name|getMessageName
parameter_list|()
block|{
return|return
name|messageName
return|;
block|}
comment|/**      * The name of the message to send.      */
DECL|method|setMessageName (String messageName)
specifier|public
name|void
name|setMessageName
parameter_list|(
name|String
name|messageName
parameter_list|)
block|{
name|this
operator|.
name|messageName
operator|=
name|messageName
expr_stmt|;
block|}
DECL|method|getUriAuthority ()
specifier|public
name|String
name|getUriAuthority
parameter_list|()
block|{
return|return
name|uriAuthority
return|;
block|}
comment|/**      * Authority to use (username and password)      */
DECL|method|setUriAuthority (String uriAuthority)
specifier|public
name|void
name|setUriAuthority
parameter_list|(
name|String
name|uriAuthority
parameter_list|)
block|{
name|this
operator|.
name|uriAuthority
operator|=
name|uriAuthority
expr_stmt|;
block|}
DECL|method|isReflectionProtocol ()
specifier|public
name|boolean
name|isReflectionProtocol
parameter_list|()
block|{
return|return
name|reflectionProtocol
return|;
block|}
comment|/**      * If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected      */
DECL|method|setReflectionProtocol (boolean isReflectionProtocol)
specifier|public
name|void
name|setReflectionProtocol
parameter_list|(
name|boolean
name|isReflectionProtocol
parameter_list|)
block|{
name|this
operator|.
name|reflectionProtocol
operator|=
name|isReflectionProtocol
expr_stmt|;
block|}
DECL|method|isSingleParameter ()
specifier|public
name|boolean
name|isSingleParameter
parameter_list|()
block|{
return|return
name|singleParameter
return|;
block|}
comment|/**      * If true, consumer parameter won't be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message      */
DECL|method|setSingleParameter (boolean singleParameter)
specifier|public
name|void
name|setSingleParameter
parameter_list|(
name|boolean
name|singleParameter
parameter_list|)
block|{
name|this
operator|.
name|singleParameter
operator|=
name|singleParameter
expr_stmt|;
block|}
block|}
end_class

end_unit

