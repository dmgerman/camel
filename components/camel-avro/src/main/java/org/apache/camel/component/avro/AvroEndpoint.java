begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.avro
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|ReflectData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_comment
comment|/**  * Working with Apache Avro for data serialization.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.10.0"
argument_list|,
name|scheme
operator|=
literal|"avro"
argument_list|,
name|title
operator|=
literal|"Avro"
argument_list|,
name|syntax
operator|=
literal|"avro:transport:host:port/messageName"
argument_list|,
name|label
operator|=
literal|"messaging,transformation"
argument_list|)
DECL|class|AvroEndpoint
specifier|public
specifier|abstract
class|class
name|AvroEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|AsyncEndpoint
block|{
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|AvroConfiguration
name|configuration
decl_stmt|;
DECL|method|AvroEndpoint (String endpointUri, Component component, AvroConfiguration configuration)
specifier|public
name|AvroEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|AvroConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|createExchange (Protocol.Message message, Object request)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|Protocol
operator|.
name|Message
name|message
parameter_list|,
name|Object
name|request
parameter_list|)
block|{
name|ExchangePattern
name|pattern
init|=
name|ExchangePattern
operator|.
name|InOut
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getResponse
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|pattern
operator|=
name|ExchangePattern
operator|.
name|InOnly
expr_stmt|;
block|}
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|AvroConstants
operator|.
name|AVRO_MESSAGE_NAME
argument_list|,
name|message
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|AvroConsumer
name|consumer
init|=
operator|new
name|AvroConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|AvroConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|validateConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validates configuration      */
DECL|method|validateConfiguration (AvroConfiguration config)
specifier|private
name|void
name|validateConfiguration
parameter_list|(
name|AvroConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|config
operator|.
name|getProtocol
argument_list|()
operator|==
literal|null
operator|&&
name|config
operator|.
name|getProtocolClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|protocolClass
init|=
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|config
operator|.
name|getProtocolClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocolClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Field
name|f
init|=
name|protocolClass
operator|.
name|getField
argument_list|(
literal|"PROTOCOL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|Protocol
name|protocol
init|=
operator|(
name|Protocol
operator|)
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|config
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
name|ReflectData
name|reflectData
init|=
name|ReflectData
operator|.
name|get
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProtocol
argument_list|(
name|reflectData
operator|.
name|getProtocol
argument_list|(
name|protocolClass
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setReflectionProtocol
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|config
operator|.
name|getProtocol
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Avro configuration does not contain protocol"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getMessageName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getProtocol
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|containsKey
argument_list|(
name|config
operator|.
name|getMessageName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Message "
operator|+
name|config
operator|.
name|getMessageName
argument_list|()
operator|+
literal|" is not defined in protocol"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|isSingleParameter
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Protocol
operator|.
name|Message
argument_list|>
name|messageMap
init|=
name|config
operator|.
name|getProtocol
argument_list|()
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Protocol
operator|.
name|Message
argument_list|>
name|messagesToCheck
init|=
name|config
operator|.
name|getMessageName
argument_list|()
operator|==
literal|null
condition|?
name|messageMap
operator|.
name|values
argument_list|()
else|:
name|Collections
operator|.
name|singleton
argument_list|(
name|messageMap
operator|.
name|get
argument_list|(
name|config
operator|.
name|getMessageName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Protocol
operator|.
name|Message
name|message
range|:
name|messagesToCheck
control|)
block|{
if|if
condition|(
name|message
operator|.
name|getRequest
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Single parameter option can't be used with message "
operator|+
name|message
operator|.
name|getName
argument_list|()
operator|+
literal|" because it has "
operator|+
name|message
operator|.
name|getRequest
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" parameters defined"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

