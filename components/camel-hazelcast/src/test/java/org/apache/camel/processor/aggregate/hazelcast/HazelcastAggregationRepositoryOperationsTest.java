begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregate.hazelcast
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|hazelcast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HazelcastAggregationRepositoryOperationsTest
specifier|public
class|class
name|HazelcastAggregationRepositoryOperationsTest
extends|extends
name|HazelcastAggregationRepositoryCamelTestSupport
block|{
DECL|field|THREAD_SAFE_REPO
specifier|private
specifier|static
specifier|final
name|String
name|THREAD_SAFE_REPO
init|=
literal|"threadSafeRepo"
decl_stmt|;
DECL|field|OPTIMISTIC_REPO
specifier|private
specifier|static
specifier|final
name|String
name|OPTIMISTIC_REPO
init|=
literal|"optimisticRepo"
decl_stmt|;
annotation|@
name|Test
DECL|method|checkOptimisticAddOfNewExchange ()
specifier|public
name|void
name|checkOptimisticAddOfNewExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|HazelcastAggregationRepository
name|repoOne
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|OPTIMISTIC_REPO
argument_list|,
literal|true
argument_list|,
name|getFirstInstance
argument_list|()
argument_list|)
decl_stmt|;
name|HazelcastAggregationRepository
name|repoTwo
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|OPTIMISTIC_REPO
argument_list|,
literal|true
argument_list|,
name|getSecondInstance
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|repoOne
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|doStart
argument_list|()
expr_stmt|;
specifier|final
name|String
name|testBody
init|=
literal|"This is an optimistic test body. Sincerely yours, Captain Obvious."
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"optimisticKey"
decl_stmt|;
name|Exchange
name|newEx
init|=
name|createExchangeWithBody
argument_list|(
name|testBody
argument_list|)
decl_stmt|;
name|Exchange
name|oldEx
init|=
name|repoOne
operator|.
name|add
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|,
literal|null
argument_list|,
name|newEx
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Old exchange should be null."
argument_list|,
name|oldEx
argument_list|)
expr_stmt|;
specifier|final
name|String
name|theNewestBody
init|=
literal|"This is the newest test body."
decl_stmt|;
name|Exchange
name|theNewestEx
init|=
name|createExchangeWithBody
argument_list|(
name|theNewestBody
argument_list|)
decl_stmt|;
name|oldEx
operator|=
name|repoTwo
operator|.
name|add
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|,
name|newEx
argument_list|,
name|theNewestEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"oldEx is null"
argument_list|,
name|oldEx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newEx
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|,
name|oldEx
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repoOne
operator|.
name|stop
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|checkThreadSafeAddOfNewExchange ()
specifier|public
name|void
name|checkThreadSafeAddOfNewExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|HazelcastAggregationRepository
name|repoOne
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|THREAD_SAFE_REPO
argument_list|,
literal|false
argument_list|,
name|getFirstInstance
argument_list|()
argument_list|)
decl_stmt|;
name|HazelcastAggregationRepository
name|repoTwo
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|THREAD_SAFE_REPO
argument_list|,
literal|false
argument_list|,
name|getSecondInstance
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|repoOne
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|doStart
argument_list|()
expr_stmt|;
specifier|final
name|String
name|testBody
init|=
literal|"This is a thread-safe test body. Sincerely yours, Captain Obvious."
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"threadSafeKey"
decl_stmt|;
name|Exchange
name|newEx
init|=
name|createExchangeWithBody
argument_list|(
name|testBody
argument_list|)
decl_stmt|;
name|Exchange
name|oldEx
init|=
name|repoOne
operator|.
name|add
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|,
name|newEx
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Old exchange should be null."
argument_list|,
name|oldEx
argument_list|)
expr_stmt|;
specifier|final
name|String
name|theNewestBody
init|=
literal|"This is the newest test body."
decl_stmt|;
name|Exchange
name|theNewestEx
init|=
name|createExchangeWithBody
argument_list|(
name|theNewestBody
argument_list|)
decl_stmt|;
name|oldEx
operator|=
name|repoTwo
operator|.
name|add
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|,
name|theNewestEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"oldEx is null"
argument_list|,
name|oldEx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newEx
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|,
name|oldEx
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repoOne
operator|.
name|stop
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|checkOptimisticGet ()
specifier|public
name|void
name|checkOptimisticGet
parameter_list|()
throws|throws
name|Exception
block|{
name|HazelcastAggregationRepository
name|repoOne
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|THREAD_SAFE_REPO
argument_list|,
literal|true
argument_list|,
name|getFirstInstance
argument_list|()
argument_list|)
decl_stmt|;
name|HazelcastAggregationRepository
name|repoTwo
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|THREAD_SAFE_REPO
argument_list|,
literal|true
argument_list|,
name|getSecondInstance
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|repoOne
operator|.
name|start
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|testBody
init|=
literal|"This is an optimistic test body. Sincerely yours, Captain Obvious."
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"optimisticKey"
decl_stmt|;
name|Exchange
name|ex
init|=
name|createExchangeWithBody
argument_list|(
name|testBody
argument_list|)
decl_stmt|;
name|repoOne
operator|.
name|add
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getFirstInstance
argument_list|()
operator|.
name|getMap
argument_list|(
name|THREAD_SAFE_REPO
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSecondInstance
argument_list|()
operator|.
name|getMap
argument_list|(
name|THREAD_SAFE_REPO
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|gotEx
init|=
name|repoTwo
operator|.
name|get
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"gotEx is null"
argument_list|,
name|gotEx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ex and gotEx should be equal"
argument_list|,
name|gotEx
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|,
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repoOne
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|checkThreadSafeGet ()
specifier|public
name|void
name|checkThreadSafeGet
parameter_list|()
throws|throws
name|Exception
block|{
name|HazelcastAggregationRepository
name|repoOne
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|OPTIMISTIC_REPO
argument_list|,
literal|false
argument_list|,
name|getFirstInstance
argument_list|()
argument_list|)
decl_stmt|;
name|HazelcastAggregationRepository
name|repoTwo
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|OPTIMISTIC_REPO
argument_list|,
literal|false
argument_list|,
name|getSecondInstance
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|repoOne
operator|.
name|start
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|testBody
init|=
literal|"This is a thread-safe test body. Sincerely yours, Captain Obvious."
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"threadSafeKey"
decl_stmt|;
name|Exchange
name|ex
init|=
name|createExchangeWithBody
argument_list|(
name|testBody
argument_list|)
decl_stmt|;
name|repoOne
operator|.
name|add
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|Exchange
name|gotEx
init|=
name|repoTwo
operator|.
name|get
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"gotEx is null"
argument_list|,
name|gotEx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ex and gotEx should be equal"
argument_list|,
name|gotEx
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|,
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repoOne
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|checkOptimisticPersistentRemove ()
specifier|public
name|void
name|checkOptimisticPersistentRemove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|persistentRepoName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s-completed"
argument_list|,
name|OPTIMISTIC_REPO
argument_list|)
decl_stmt|;
name|HazelcastAggregationRepository
name|repoOne
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|OPTIMISTIC_REPO
argument_list|,
name|persistentRepoName
argument_list|,
literal|true
argument_list|,
name|getFirstInstance
argument_list|()
argument_list|)
decl_stmt|;
name|HazelcastAggregationRepository
name|repoTwo
init|=
operator|new
name|HazelcastAggregationRepository
argument_list|(
name|OPTIMISTIC_REPO
argument_list|,
name|persistentRepoName
argument_list|,
literal|true
argument_list|,
name|getSecondInstance
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|repoOne
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|doStart
argument_list|()
expr_stmt|;
specifier|final
name|String
name|testBody
init|=
literal|"This is an optimistic test body. Sincerely yours, Captain Obvious."
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"optimisticKey"
decl_stmt|;
name|Exchange
name|ex
init|=
name|createExchangeWithBody
argument_list|(
name|testBody
argument_list|)
decl_stmt|;
name|repoOne
operator|.
name|add
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|Exchange
name|getBackEx
init|=
name|repoTwo
operator|.
name|get
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getBackEx should not be null."
argument_list|,
name|getBackEx
argument_list|)
expr_stmt|;
name|repoTwo
operator|.
name|remove
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|getBackEx
operator|=
name|repoOne
operator|.
name|get
argument_list|(
name|context
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"getBackEx should be null here."
argument_list|,
name|getBackEx
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|repoTwo
operator|.
name|scan
argument_list|(
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|assertCollectionSize
argument_list|(
name|keys
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|getBackEx
operator|=
name|repoOne
operator|.
name|recover
argument_list|(
name|context
argument_list|()
argument_list|,
name|keys
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"getBackEx got from persistent repo should not be null."
argument_list|,
name|getBackEx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repoOne
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|repoTwo
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

