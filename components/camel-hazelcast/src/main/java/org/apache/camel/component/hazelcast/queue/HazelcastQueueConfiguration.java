begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hazelcast.queue
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|queue
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_comment
comment|/**  * Hazelcast Queue Component configuration.  */
end_comment

begin_class
annotation|@
name|UriParams
DECL|class|HazelcastQueueConfiguration
specifier|public
class|class
name|HazelcastQueueConfiguration
block|{
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"10000"
argument_list|)
DECL|field|pollingTimeout
specifier|private
name|long
name|pollingTimeout
init|=
literal|10000L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"Listen"
argument_list|)
DECL|field|queueConsumerMode
specifier|private
name|HazelcastQueueConsumerMode
name|queueConsumerMode
init|=
name|HazelcastQueueConsumerMode
operator|.
name|LISTEN
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|)
DECL|field|poolSize
specifier|private
name|int
name|poolSize
init|=
literal|1
decl_stmt|;
comment|/**      * Define the polling timeout of the Queue consumer in Poll mode      */
DECL|method|getPollingTimeout ()
specifier|public
name|long
name|getPollingTimeout
parameter_list|()
block|{
return|return
name|pollingTimeout
return|;
block|}
DECL|method|setPollingTimeout (long pollingTimeout)
specifier|public
name|void
name|setPollingTimeout
parameter_list|(
name|long
name|pollingTimeout
parameter_list|)
block|{
name|this
operator|.
name|pollingTimeout
operator|=
name|pollingTimeout
expr_stmt|;
block|}
comment|/**      * Define the Queue Consumer mode: Listen or Poll       */
DECL|method|getQueueConsumerMode ()
specifier|public
name|HazelcastQueueConsumerMode
name|getQueueConsumerMode
parameter_list|()
block|{
return|return
name|queueConsumerMode
return|;
block|}
DECL|method|setQueueConsumerMode (HazelcastQueueConsumerMode queueConsumerMode)
specifier|public
name|void
name|setQueueConsumerMode
parameter_list|(
name|HazelcastQueueConsumerMode
name|queueConsumerMode
parameter_list|)
block|{
name|this
operator|.
name|queueConsumerMode
operator|=
name|queueConsumerMode
expr_stmt|;
block|}
comment|/**      * Define the Pool size for Queue Consumer Executor      */
DECL|method|getPoolSize ()
specifier|public
name|int
name|getPoolSize
parameter_list|()
block|{
return|return
name|poolSize
return|;
block|}
DECL|method|setPoolSize (int poolSize)
specifier|public
name|void
name|setPoolSize
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|this
operator|.
name|poolSize
operator|=
name|poolSize
expr_stmt|;
block|}
block|}
end_class

end_unit

