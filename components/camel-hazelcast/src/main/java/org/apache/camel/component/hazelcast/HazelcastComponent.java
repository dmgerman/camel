begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hazelcast
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hazelcast
operator|.
name|config
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hazelcast
operator|.
name|config
operator|.
name|XmlConfigBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hazelcast
operator|.
name|core
operator|.
name|Hazelcast
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hazelcast
operator|.
name|core
operator|.
name|HazelcastInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|atomicnumber
operator|.
name|HazelcastAtomicnumberEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|instance
operator|.
name|HazelcastInstanceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|list
operator|.
name|HazelcastListEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|map
operator|.
name|HazelcastMapEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|multimap
operator|.
name|HazelcastMultimapEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|queue
operator|.
name|HazelcastQueueEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|seda
operator|.
name|HazelcastSedaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|seda
operator|.
name|HazelcastSedaEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|removeStartingCharacters
import|;
end_import

begin_class
DECL|class|HazelcastComponent
specifier|public
class|class
name|HazelcastComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|hazelcastInstance
specifier|private
name|HazelcastInstance
name|hazelcastInstance
decl_stmt|;
DECL|field|createOwnInstance
specifier|private
name|Boolean
name|createOwnInstance
decl_stmt|;
DECL|method|HazelcastComponent ()
specifier|public
name|HazelcastComponent
parameter_list|()
block|{     }
DECL|method|HazelcastComponent (final CamelContext context)
specifier|public
name|HazelcastComponent
parameter_list|(
specifier|final
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|HazelcastDefaultEndpoint
name|endpoint
init|=
literal|null
decl_stmt|;
comment|// check type of endpoint
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|HazelcastConstants
operator|.
name|MAP_PREFIX
argument_list|)
condition|)
block|{
comment|// remaining is the cache name
name|remaining
operator|=
name|removeStartingCharacters
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|HazelcastConstants
operator|.
name|MAP_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|HazelcastMapEndpoint
argument_list|(
name|hazelcastInstance
argument_list|,
name|uri
argument_list|,
name|remaining
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|HazelcastConstants
operator|.
name|MULTIMAP_PREFIX
argument_list|)
condition|)
block|{
comment|// remaining is the cache name
name|remaining
operator|=
name|removeStartingCharacters
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|HazelcastConstants
operator|.
name|MULTIMAP_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|HazelcastMultimapEndpoint
argument_list|(
name|hazelcastInstance
argument_list|,
name|uri
argument_list|,
name|remaining
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|HazelcastConstants
operator|.
name|ATOMICNUMBER_PREFIX
argument_list|)
condition|)
block|{
comment|// remaining is the name of the atomic value
name|remaining
operator|=
name|removeStartingCharacters
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|HazelcastConstants
operator|.
name|INSTANCE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|HazelcastAtomicnumberEndpoint
argument_list|(
name|hazelcastInstance
argument_list|,
name|uri
argument_list|,
name|this
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|HazelcastConstants
operator|.
name|INSTANCE_PREFIX
argument_list|)
condition|)
block|{
comment|// remaining is anything (name it foo ;)
name|remaining
operator|=
name|removeStartingCharacters
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|HazelcastConstants
operator|.
name|INSTANCE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|HazelcastInstanceEndpoint
argument_list|(
name|hazelcastInstance
argument_list|,
name|uri
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|HazelcastConstants
operator|.
name|QUEUE_PREFIX
argument_list|)
condition|)
block|{
comment|// remaining is anything (name it foo ;)
name|remaining
operator|=
name|removeStartingCharacters
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|HazelcastConstants
operator|.
name|QUEUE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|HazelcastQueueEndpoint
argument_list|(
name|hazelcastInstance
argument_list|,
name|uri
argument_list|,
name|this
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|HazelcastConstants
operator|.
name|SEDA_PREFIX
argument_list|)
condition|)
block|{
specifier|final
name|HazelcastSedaConfiguration
name|config
init|=
operator|new
name|HazelcastSedaConfiguration
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|config
operator|.
name|setQueueName
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|remaining
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|1
argument_list|,
name|remaining
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|HazelcastSedaEndpoint
argument_list|(
name|hazelcastInstance
argument_list|,
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|HazelcastConstants
operator|.
name|LIST_PREFIX
argument_list|)
condition|)
block|{
comment|// remaining is anything (name it foo ;)
name|remaining
operator|=
name|removeStartingCharacters
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|HazelcastConstants
operator|.
name|LIST_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|HazelcastListEndpoint
argument_list|(
name|hazelcastInstance
argument_list|,
name|uri
argument_list|,
name|this
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Your URI does not provide a correct 'type' prefix. It should be anything like 'hazelcast:[%s|%s|%s|%s|%s|%s|%s]name' but is '%s'."
argument_list|,
name|HazelcastConstants
operator|.
name|MAP_PREFIX
argument_list|,
name|HazelcastConstants
operator|.
name|MULTIMAP_PREFIX
argument_list|,
name|HazelcastConstants
operator|.
name|ATOMICNUMBER_PREFIX
argument_list|,
name|HazelcastConstants
operator|.
name|INSTANCE_PREFIX
argument_list|,
name|HazelcastConstants
operator|.
name|QUEUE_PREFIX
argument_list|,
name|HazelcastConstants
operator|.
name|SEDA_PREFIX
argument_list|,
name|HazelcastConstants
operator|.
name|LIST_PREFIX
argument_list|,
name|uri
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|endpoint
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|public
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|hazelcastInstance
operator|==
literal|null
condition|)
block|{
name|createOwnInstance
operator|=
literal|true
expr_stmt|;
name|Config
name|config
init|=
operator|new
name|XmlConfigBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Disable the version check
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"hazelcast.version.check.enabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|hazelcastInstance
operator|=
name|Hazelcast
operator|.
name|newHazelcastInstance
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|public
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|createOwnInstance
operator|&&
name|hazelcastInstance
operator|!=
literal|null
condition|)
block|{
name|hazelcastInstance
operator|.
name|getLifecycleService
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getHazelcastInstance ()
specifier|public
name|HazelcastInstance
name|getHazelcastInstance
parameter_list|()
block|{
return|return
name|hazelcastInstance
return|;
block|}
DECL|method|setHazelcastInstance (HazelcastInstance hazelcastInstance)
specifier|public
name|void
name|setHazelcastInstance
parameter_list|(
name|HazelcastInstance
name|hazelcastInstance
parameter_list|)
block|{
name|this
operator|.
name|hazelcastInstance
operator|=
name|hazelcastInstance
expr_stmt|;
block|}
block|}
end_class

end_unit

