begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hazelcast.list
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|list
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hazelcast
operator|.
name|core
operator|.
name|Hazelcast
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hazelcast
operator|.
name|core
operator|.
name|IList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|HazelcastComponentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hazelcast
operator|.
name|HazelcastConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_comment
comment|/**  * Implementation of Hazelcast List {@link Producer}.  */
end_comment

begin_class
DECL|class|HazelcastListProducer
specifier|public
class|class
name|HazelcastListProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|list
specifier|private
specifier|final
name|IList
argument_list|<
name|Object
argument_list|>
name|list
decl_stmt|;
DECL|field|helper
specifier|private
specifier|final
name|HazelcastComponentHelper
name|helper
init|=
operator|new
name|HazelcastComponentHelper
argument_list|()
decl_stmt|;
DECL|method|HazelcastListProducer (Endpoint endpoint, String listName)
specifier|public
name|HazelcastListProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|listName
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|Hazelcast
operator|.
name|getList
argument_list|(
name|listName
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
comment|// get header parameters
name|int
name|operation
init|=
operator|-
literal|1
decl_stmt|;
name|Integer
name|pos
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|HazelcastConstants
operator|.
name|OBJECT_POS
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|headers
operator|.
name|get
argument_list|(
name|HazelcastConstants
operator|.
name|OBJECT_POS
argument_list|)
operator|instanceof
name|Integer
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OBJECT_POS Should be of type Integer"
argument_list|)
throw|;
block|}
name|pos
operator|=
operator|(
name|Integer
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HazelcastConstants
operator|.
name|OBJECT_POS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|HazelcastConstants
operator|.
name|OPERATION
argument_list|)
condition|)
block|{
if|if
condition|(
name|headers
operator|.
name|get
argument_list|(
name|HazelcastConstants
operator|.
name|OPERATION
argument_list|)
operator|instanceof
name|String
condition|)
block|{
name|operation
operator|=
name|helper
operator|.
name|lookupOperationNumber
argument_list|(
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HazelcastConstants
operator|.
name|OPERATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operation
operator|=
operator|(
name|Integer
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HazelcastConstants
operator|.
name|OPERATION
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|HazelcastConstants
operator|.
name|ADD_OPERATION
case|:
name|this
operator|.
name|add
argument_list|(
name|pos
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|HazelcastConstants
operator|.
name|GET_OPERATION
case|:
name|this
operator|.
name|get
argument_list|(
name|pos
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|HazelcastConstants
operator|.
name|SETVALUE_OPERATION
case|:
name|this
operator|.
name|set
argument_list|(
name|pos
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|HazelcastConstants
operator|.
name|REMOVEVALUE_OPERATION
case|:
name|this
operator|.
name|remove
argument_list|(
name|pos
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The value '%s' is not allowed for parameter '%s' on the LIST cache."
argument_list|,
name|operation
argument_list|,
name|HazelcastConstants
operator|.
name|OPERATION
argument_list|)
argument_list|)
throw|;
block|}
comment|// finally copy headers
name|HazelcastComponentHelper
operator|.
name|copyHeaders
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|add (Integer pos, Exchange exchange)
specifier|private
name|void
name|add
parameter_list|(
name|Integer
name|pos
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|pos
condition|)
block|{
comment|// add the specified element to the end of the list
name|list
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add the specified element at the specified position
name|list
operator|.
name|add
argument_list|(
name|pos
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|get (Integer pos, Exchange exchange)
specifier|private
name|void
name|get
parameter_list|(
name|Integer
name|pos
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// TODO: this operation is currently not supported by hazelcast
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|this
operator|.
name|list
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|set (Integer pos, Exchange exchange)
specifier|private
name|void
name|set
parameter_list|(
name|Integer
name|pos
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// TODO: this operation is currently not supported by hazelcast
if|if
condition|(
literal|null
operator|==
name|pos
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Empty position for set operation."
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
name|pos
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|remove (Integer pos, Exchange exchange)
specifier|private
name|void
name|remove
parameter_list|(
name|Integer
name|pos
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|pos
condition|)
block|{
comment|// removes the first occurrence in the list
specifier|final
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|list
operator|.
name|remove
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: this operation is currently not supported by hazelcast
comment|// removes the element at the specified position
name|int
name|position
init|=
name|pos
decl_stmt|;
name|list
operator|.
name|remove
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

