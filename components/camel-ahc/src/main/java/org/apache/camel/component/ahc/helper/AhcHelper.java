begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ahc.helper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ahc
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ahc
operator|.
name|AhcEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AhcHelper
specifier|public
specifier|final
class|class
name|AhcHelper
block|{
DECL|method|AhcHelper ()
specifier|private
name|AhcHelper
parameter_list|()
block|{
comment|// Helper class
block|}
comment|/**      * Writes the given object as response body to the output stream      *      * @param stream output stream      * @param target   object to write      * @throws java.io.IOException is thrown if error writing      */
DECL|method|writeObjectToStream (OutputStream stream, Object target)
specifier|public
specifier|static
name|void
name|writeObjectToStream
parameter_list|(
name|OutputStream
name|stream
parameter_list|,
name|Object
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|oos
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deserializes the input stream to a Java object      *      * @param is input stream for the Java object      * @return the java object, or<tt>null</tt> if input stream was<tt>null</tt>      * @throws ClassNotFoundException is thrown if class not found      * @throws IOException can be thrown      */
DECL|method|deserializeJavaObjectFromStream (InputStream is)
specifier|public
specifier|static
name|Object
name|deserializeJavaObjectFromStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|answer
init|=
literal|null
decl_stmt|;
name|ObjectInputStream
name|ois
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|ois
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|ois
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|setCharsetFromContentType (String contentType, Exchange exchange)
specifier|public
specifier|static
name|void
name|setCharsetFromContentType
parameter_list|(
name|String
name|contentType
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
comment|// find the charset and set it to the Exchange
name|int
name|index
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|"charset="
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|String
name|charset
init|=
name|contentType
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|8
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|IOHelper
operator|.
name|normalizeCharset
argument_list|(
name|charset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates the URL to invoke.      *      * @param exchange the exchange      * @param endpoint the endpoint      * @return the URL to invoke      * @throws java.net.URISyntaxException is thrown if the URL is invalid      * @throws UnsupportedEncodingException       */
DECL|method|createURL (Exchange exchange, AhcEndpoint endpoint)
specifier|public
specifier|static
name|String
name|createURL
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AhcEndpoint
name|endpoint
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|UnsupportedEncodingException
block|{
name|String
name|url
init|=
name|doCreateURL
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
return|return
name|URISupport
operator|.
name|normalizeUri
argument_list|(
name|url
argument_list|)
return|;
block|}
DECL|method|doCreateURL (Exchange exchange, AhcEndpoint endpoint)
specifier|private
specifier|static
name|String
name|doCreateURL
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AhcEndpoint
name|endpoint
parameter_list|)
block|{
name|String
name|uri
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|endpoint
operator|.
name|isBridgeEndpoint
argument_list|()
operator|)
condition|)
block|{
name|uri
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
block|}
comment|// resolve placeholders in uri
try|try
block|{
name|uri
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"Cannot resolve property placeholders with uri: "
operator|+
name|uri
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// append HTTP_PATH to HTTP_URI if it is provided in the header
name|String
name|path
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|URI
name|baseURI
decl_stmt|;
name|String
name|baseURIString
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_BASE_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|baseURIString
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|baseURIString
operator|=
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// will set a default one for it
name|baseURIString
operator|=
literal|"/"
expr_stmt|;
block|}
block|}
name|baseURI
operator|=
operator|new
name|URI
argument_list|(
name|baseURIString
argument_list|)
expr_stmt|;
name|String
name|basePath
init|=
name|baseURI
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|basePath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI"
argument_list|,
name|exchange
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"Cannot analyze the Exchange.HTTP_PATH header, due to: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// make sure that there is exactly one "/" between HTTP_URI and
comment|// HTTP_PATH
if|if
condition|(
operator|!
name|uri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|+
literal|"/"
expr_stmt|;
block|}
name|uri
operator|=
name|uri
operator|.
name|concat
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|uri
return|;
block|}
block|}
end_class

end_unit

