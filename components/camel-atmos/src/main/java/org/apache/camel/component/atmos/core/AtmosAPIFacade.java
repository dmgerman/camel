begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.atmos.core
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmos
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|emc
operator|.
name|atmos
operator|.
name|api
operator|.
name|AtmosApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|emc
operator|.
name|atmos
operator|.
name|api
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|emc
operator|.
name|atmos
operator|.
name|api
operator|.
name|ObjectPath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|emc
operator|.
name|atmos
operator|.
name|api
operator|.
name|bean
operator|.
name|DirectoryEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|emc
operator|.
name|atmos
operator|.
name|api
operator|.
name|request
operator|.
name|CreateObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|emc
operator|.
name|atmos
operator|.
name|api
operator|.
name|request
operator|.
name|ListDirectoryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmos
operator|.
name|dto
operator|.
name|AtmosDelResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmos
operator|.
name|dto
operator|.
name|AtmosFileDownloadResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmos
operator|.
name|dto
operator|.
name|AtmosFileUploadResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmos
operator|.
name|dto
operator|.
name|AtmosMoveResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmos
operator|.
name|dto
operator|.
name|AtmosResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmos
operator|.
name|util
operator|.
name|AtmosException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmos
operator|.
name|util
operator|.
name|AtmosResultCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmos
operator|.
name|util
operator|.
name|AtmosConstants
operator|.
name|ATMOS_FILE_SEPARATOR
import|;
end_import

begin_class
DECL|class|AtmosAPIFacade
specifier|public
specifier|final
class|class
name|AtmosAPIFacade
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AtmosAPIFacade
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|instance
specifier|private
specifier|static
name|AtmosAPIFacade
name|instance
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|AtmosApi
name|client
decl_stmt|;
DECL|method|AtmosAPIFacade ()
specifier|private
name|AtmosAPIFacade
parameter_list|()
block|{     }
comment|/**      * Return a singleton instance of this class      *      * @param client the AtmosClient performing atmos low level operations      * @return the singleton instance of this class      */
DECL|method|getInstance (AtmosApi client)
specifier|public
specifier|static
name|AtmosAPIFacade
name|getInstance
parameter_list|(
name|AtmosApi
name|client
parameter_list|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|AtmosAPIFacade
argument_list|()
expr_stmt|;
name|AtmosAPIFacade
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/**      * Put or upload a new file or an entire directory to atmos      *      * @param localPath the file path or the dir path on the local filesystem      * @param remotePath the remote path destination on atmos      * the file already existing with the same name      * will be overridden.      * @return a AtmosResult object reporting for each remote path the result of      * the operation.      * @throws AtmosException      */
DECL|method|put (String localPath, String remotePath)
specifier|public
name|AtmosResult
name|put
parameter_list|(
name|String
name|localPath
parameter_list|,
name|String
name|remotePath
parameter_list|)
throws|throws
name|AtmosException
block|{
name|AtmosResult
name|result
init|=
operator|new
name|AtmosFileUploadResult
argument_list|()
decl_stmt|;
comment|//a map representing for each path the result of the put operation
name|Map
argument_list|<
name|String
argument_list|,
name|AtmosResultCode
argument_list|>
name|resultEntries
init|=
literal|null
decl_stmt|;
comment|//in case the remote path is not specified, the remotePath = localPath
name|String
name|atmosPath
init|=
name|remotePath
operator|==
literal|null
condition|?
name|localPath
else|:
name|remotePath
decl_stmt|;
if|if
condition|(
operator|!
name|atmosPath
operator|.
name|endsWith
argument_list|(
name|ATMOS_FILE_SEPARATOR
argument_list|)
condition|)
block|{
name|atmosPath
operator|+=
name|ATMOS_FILE_SEPARATOR
expr_stmt|;
block|}
name|ObjectPath
name|atmosEntry
init|=
operator|new
name|ObjectPath
argument_list|(
name|atmosPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|atmosPath
operator|.
name|equals
argument_list|(
name|ATMOS_FILE_SEPARATOR
argument_list|)
condition|)
block|{
if|if
condition|(
name|AtmosAPIFacade
operator|.
name|client
operator|.
name|getSystemMetadata
argument_list|(
name|atmosEntry
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AtmosException
argument_list|(
name|atmosPath
operator|+
literal|" does not exist or can't obtain metadata"
argument_list|)
throw|;
block|}
block|}
name|File
name|fileLocalPath
init|=
operator|new
name|File
argument_list|(
name|localPath
argument_list|)
decl_stmt|;
comment|//verify uploading of a single file
if|if
condition|(
name|fileLocalPath
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|//check if atmos file exists
if|if
condition|(
name|atmosEntry
operator|!=
literal|null
operator|&&
operator|!
name|atmosEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AtmosException
argument_list|(
name|atmosPath
operator|+
literal|" exists on atmos and is not a folder!"
argument_list|)
throw|;
block|}
name|atmosPath
operator|=
name|atmosPath
operator|+
name|fileLocalPath
operator|.
name|getName
argument_list|()
expr_stmt|;
name|resultEntries
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtmosResultCode
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|ObjectId
name|uploadedFile
init|=
name|putSingleFile
argument_list|(
name|fileLocalPath
argument_list|,
name|atmosPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|uploadedFile
operator|==
literal|null
condition|)
block|{
name|resultEntries
operator|.
name|put
argument_list|(
name|atmosPath
argument_list|,
name|AtmosResultCode
operator|.
name|KO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultEntries
operator|.
name|put
argument_list|(
name|atmosPath
argument_list|,
name|AtmosResultCode
operator|.
name|OK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|resultEntries
operator|.
name|put
argument_list|(
name|atmosPath
argument_list|,
name|AtmosResultCode
operator|.
name|KO
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|result
operator|.
name|setResultEntries
argument_list|(
name|resultEntries
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
comment|//verify uploading of a list of files inside a dir
name|LOG
operator|.
name|info
argument_list|(
literal|"uploading a dir..."
argument_list|)
expr_stmt|;
comment|//check if atmos folder exists
if|if
condition|(
name|atmosEntry
operator|!=
literal|null
operator|&&
operator|!
name|atmosEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AtmosException
argument_list|(
name|atmosPath
operator|+
literal|" exists on atmos and is not a folder!"
argument_list|)
throw|;
block|}
comment|//revert to old path
name|String
name|oldAtmosPath
init|=
name|atmosPath
decl_stmt|;
comment|//list all files in a dir
name|Collection
argument_list|<
name|File
argument_list|>
name|listFiles
init|=
name|FileUtils
operator|.
name|listFiles
argument_list|(
name|fileLocalPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|listFiles
operator|==
literal|null
operator|||
name|listFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AtmosException
argument_list|(
name|localPath
operator|+
literal|" doesn't contain any files"
argument_list|)
throw|;
block|}
name|resultEntries
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtmosResultCode
argument_list|>
argument_list|(
name|listFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|listFiles
control|)
block|{
name|String
name|absPath
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|int
name|indexRemainingPath
init|=
name|localPath
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|localPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|indexRemainingPath
operator|+=
literal|1
expr_stmt|;
block|}
name|String
name|remainingPath
init|=
name|absPath
operator|.
name|substring
argument_list|(
name|indexRemainingPath
argument_list|)
decl_stmt|;
name|atmosPath
operator|=
name|atmosPath
operator|+
name|remainingPath
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"uploading:"
operator|+
name|fileLocalPath
operator|+
literal|","
operator|+
name|atmosPath
argument_list|)
expr_stmt|;
name|ObjectId
name|uploadedFile
init|=
name|putSingleFile
argument_list|(
name|file
argument_list|,
name|atmosPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|uploadedFile
operator|==
literal|null
condition|)
block|{
name|resultEntries
operator|.
name|put
argument_list|(
name|atmosPath
argument_list|,
name|AtmosResultCode
operator|.
name|KO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultEntries
operator|.
name|put
argument_list|(
name|atmosPath
argument_list|,
name|AtmosResultCode
operator|.
name|OK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|resultEntries
operator|.
name|put
argument_list|(
name|atmosPath
argument_list|,
name|AtmosResultCode
operator|.
name|KO
argument_list|)
expr_stmt|;
block|}
name|atmosPath
operator|=
name|oldAtmosPath
expr_stmt|;
block|}
name|result
operator|.
name|setResultEntries
argument_list|(
name|resultEntries
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|method|putSingleFile (File inputFile, String atmosPath)
specifier|private
name|ObjectId
name|putSingleFile
parameter_list|(
name|File
name|inputFile
parameter_list|,
name|String
name|atmosPath
parameter_list|)
throws|throws
name|Exception
block|{
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|inputFile
argument_list|)
decl_stmt|;
name|ObjectId
name|uploadedFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ObjectPath
name|op
init|=
operator|new
name|ObjectPath
argument_list|(
name|atmosPath
argument_list|)
decl_stmt|;
name|CreateObjectRequest
name|request
init|=
operator|new
name|CreateObjectRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|identifier
argument_list|(
name|op
argument_list|)
operator|.
name|content
argument_list|(
name|inputStream
argument_list|)
operator|.
name|contentLength
argument_list|(
name|inputFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|uploadedFile
operator|=
name|AtmosAPIFacade
operator|.
name|client
operator|.
name|createObject
argument_list|(
name|request
argument_list|)
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
return|return
name|uploadedFile
return|;
block|}
finally|finally
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Delete every files and subdirectories inside the remote directory. In      * case the remotePath is a file, delete the file.      *      * @param remotePath the remote location to delete      * @return a AtmosResult object with the result of the delete operation.      * @throws AtmosException      */
DECL|method|del (String remotePath)
specifier|public
name|AtmosResult
name|del
parameter_list|(
name|String
name|remotePath
parameter_list|)
throws|throws
name|AtmosException
block|{
name|AtmosResult
name|result
init|=
literal|null
decl_stmt|;
name|ObjectPath
name|op
init|=
operator|new
name|ObjectPath
argument_list|(
name|remotePath
argument_list|)
decl_stmt|;
name|AtmosAPIFacade
operator|.
name|client
operator|.
name|delete
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|AtmosDelResult
argument_list|()
expr_stmt|;
name|result
operator|.
name|setResultEntries
argument_list|(
name|remotePath
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Rename a remote path with the new path location.      *      * @param remotePath the existing remote path to be renamed      * @param newRemotePath the new remote path substituting the old one      * @return a AtmosResult object with the result of the move operation.      * @throws AtmosException      */
DECL|method|move (String remotePath, String newRemotePath)
specifier|public
name|AtmosResult
name|move
parameter_list|(
name|String
name|remotePath
parameter_list|,
name|String
name|newRemotePath
parameter_list|)
throws|throws
name|AtmosException
block|{
name|AtmosResult
name|result
init|=
literal|null
decl_stmt|;
name|AtmosAPIFacade
operator|.
name|client
operator|.
name|move
argument_list|(
operator|new
name|ObjectPath
argument_list|(
name|remotePath
argument_list|)
argument_list|,
operator|new
name|ObjectPath
argument_list|(
name|newRemotePath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|AtmosMoveResult
argument_list|()
expr_stmt|;
name|result
operator|.
name|setResultEntries
argument_list|(
name|remotePath
operator|+
literal|"-"
operator|+
name|newRemotePath
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Get the content of every file inside the remote path.      *      * @param remotePath the remote path where to download from      * @return a AtmosResult object with the content (ByteArrayOutputStream) of      * every files inside the remote path.      * @throws AtmosException      */
DECL|method|get (String remotePath)
specifier|public
name|AtmosResult
name|get
parameter_list|(
name|String
name|remotePath
parameter_list|)
throws|throws
name|AtmosException
block|{
name|AtmosResult
name|result
init|=
operator|new
name|AtmosFileDownloadResult
argument_list|()
decl_stmt|;
comment|//a map representing for each path the result of the baos
name|Map
argument_list|<
name|String
argument_list|,
name|ByteArrayOutputStream
argument_list|>
name|resultEntries
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteArrayOutputStream
argument_list|>
argument_list|()
decl_stmt|;
comment|//iterate from the remotePath
name|downloadFilesInFolder
argument_list|(
name|remotePath
argument_list|,
name|resultEntries
argument_list|)
expr_stmt|;
comment|//put the map of baos as result
name|result
operator|.
name|setResultEntries
argument_list|(
name|resultEntries
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|downloadFilesInFolder (String atmosPath, Map<String, ByteArrayOutputStream> resultEntries)
specifier|private
name|void
name|downloadFilesInFolder
parameter_list|(
name|String
name|atmosPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ByteArrayOutputStream
argument_list|>
name|resultEntries
parameter_list|)
throws|throws
name|AtmosException
block|{
name|ObjectPath
name|atmosEntry
init|=
operator|new
name|ObjectPath
argument_list|(
name|atmosPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|AtmosAPIFacade
operator|.
name|client
operator|.
name|getSystemMetadata
argument_list|(
name|atmosEntry
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AtmosException
argument_list|(
name|atmosPath
operator|+
literal|" does not exist or can't obtain metadata"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|atmosEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"downloading a single file..."
argument_list|)
expr_stmt|;
name|downloadSingleFile
argument_list|(
name|atmosPath
argument_list|,
name|resultEntries
argument_list|)
expr_stmt|;
return|return;
block|}
name|ListDirectoryRequest
name|listRequest
init|=
operator|new
name|ListDirectoryRequest
argument_list|()
operator|.
name|path
argument_list|(
name|atmosEntry
argument_list|)
decl_stmt|;
name|AtmosAPIFacade
operator|.
name|client
operator|.
name|listDirectory
argument_list|(
name|listRequest
argument_list|)
expr_stmt|;
for|for
control|(
name|DirectoryEntry
name|entry
range|:
name|AtmosAPIFacade
operator|.
name|client
operator|.
name|listDirectory
argument_list|(
name|listRequest
argument_list|)
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
try|try
block|{
comment|//get the baos of the file
name|downloadSingleFile
argument_list|(
name|atmosEntry
operator|.
name|getPath
argument_list|()
operator|.
name|concat
argument_list|(
name|entry
operator|.
name|getFilename
argument_list|()
argument_list|)
argument_list|,
name|resultEntries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AtmosException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"can't download from "
operator|+
name|entry
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//iterate on folder
name|downloadFilesInFolder
argument_list|(
name|atmosEntry
operator|.
name|getPath
argument_list|()
operator|.
name|concat
argument_list|(
name|entry
operator|.
name|getFilename
argument_list|()
argument_list|)
argument_list|,
name|resultEntries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|downloadSingleFile (String path, Map<String, ByteArrayOutputStream> resultEntries)
specifier|private
name|void
name|downloadSingleFile
parameter_list|(
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ByteArrayOutputStream
argument_list|>
name|resultEntries
parameter_list|)
throws|throws
name|AtmosException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|content
init|=
literal|null
decl_stmt|;
try|try
block|{
name|content
operator|=
name|AtmosAPIFacade
operator|.
name|client
operator|.
name|readObject
argument_list|(
operator|new
name|ObjectPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AtmosException
argument_list|(
name|path
operator|+
literal|" can't obtain a stream"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|resultEntries
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|baos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"downloaded path:"
operator|+
name|path
operator|+
literal|" - baos size:"
operator|+
name|baos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

