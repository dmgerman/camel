begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.pgevent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|pgevent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|impossibl
operator|.
name|postgres
operator|.
name|api
operator|.
name|jdbc
operator|.
name|PGConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|impossibl
operator|.
name|postgres
operator|.
name|jdbc
operator|.
name|PGDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pgevent
operator|.
name|InvalidStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pgevent
operator|.
name|PgEventEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pgevent
operator|.
name|PgEventProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|PgEventProducerTest
specifier|public
class|class
name|PgEventProducerTest
block|{
DECL|field|endpoint
specifier|private
name|PgEventEndpoint
name|endpoint
init|=
name|mock
argument_list|(
name|PgEventEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dataSource
specifier|private
name|PGDataSource
name|dataSource
init|=
name|mock
argument_list|(
name|PGDataSource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connection
specifier|private
name|PGConnection
name|connection
init|=
name|mock
argument_list|(
name|PGConnection
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|statement
specifier|private
name|PreparedStatement
name|statement
init|=
name|mock
argument_list|(
name|PreparedStatement
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
init|=
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|message
specifier|private
name|Message
name|message
init|=
name|mock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testPgEventProducerStart ()
specifier|public
name|void
name|testPgEventProducerStart
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getDatasource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|PgEventProducer
name|producer
init|=
operator|new
name|PgEventProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|producer
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPgEventProducerStop ()
specifier|public
name|void
name|testPgEventProducerStop
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getDatasource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|PgEventProducer
name|producer
init|=
operator|new
name|PgEventProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|producer
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidStateException
operator|.
name|class
argument_list|)
DECL|method|testPgEventProducerProcessDbThrowsInvalidStateException ()
specifier|public
name|void
name|testPgEventProducerProcessDbThrowsInvalidStateException
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getDatasource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SQLException
argument_list|(
literal|"DB problem occurred"
argument_list|)
argument_list|)
expr_stmt|;
name|PgEventProducer
name|producer
init|=
operator|new
name|PgEventProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPgEventProducerProcessDbConnectionClosed ()
specifier|public
name|void
name|testPgEventProducerProcessDbConnectionClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|PGConnection
name|connectionNew
init|=
name|mock
argument_list|(
name|PGConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getDatasource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|,
name|connectionNew
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"pgevent"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getChannel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"camel"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connectionNew
operator|.
name|prepareStatement
argument_list|(
literal|"NOTIFY camel, 'pgevent'"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|statement
argument_list|)
expr_stmt|;
name|PgEventProducer
name|producer
init|=
operator|new
name|PgEventProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|statement
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPgEventProducerProcessServerMinimumVersionMatched ()
specifier|public
name|void
name|testPgEventProducerProcessServerMinimumVersionMatched
parameter_list|()
throws|throws
name|Exception
block|{
name|CallableStatement
name|statement
init|=
name|mock
argument_list|(
name|CallableStatement
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getDatasource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"pgevent"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getChannel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"camel"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|isServerMinimumVersion
argument_list|(
literal|9
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|prepareCall
argument_list|(
name|ArgumentMatchers
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|statement
argument_list|)
expr_stmt|;
name|PgEventProducer
name|producer
init|=
operator|new
name|PgEventProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|statement
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPgEventProducerProcessServerMinimumVersionNotMatched ()
specifier|public
name|void
name|testPgEventProducerProcessServerMinimumVersionNotMatched
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getDatasource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"pgevent"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getChannel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"camel"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|isServerMinimumVersion
argument_list|(
literal|9
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"NOTIFY camel, 'pgevent'"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|statement
argument_list|)
expr_stmt|;
name|PgEventProducer
name|producer
init|=
operator|new
name|PgEventProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|statement
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

