begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.pgevent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pgevent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|impossibl
operator|.
name|postgres
operator|.
name|api
operator|.
name|jdbc
operator|.
name|PGConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|impossibl
operator|.
name|postgres
operator|.
name|api
operator|.
name|jdbc
operator|.
name|PGNotificationListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The PgEvent producer.  */
end_comment

begin_class
DECL|class|PgEventProducer
specifier|public
class|class
name|PgEventProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PgEventProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|PgEventEndpoint
name|endpoint
decl_stmt|;
DECL|field|dbConnection
specifier|private
name|PGConnection
name|dbConnection
decl_stmt|;
DECL|field|listener
specifier|private
name|PGNotificationListener
name|listener
decl_stmt|;
DECL|method|PgEventProducer (PgEventEndpoint endpoint)
specifier|public
name|PgEventProducer
parameter_list|(
name|PgEventEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|dbConnection
operator|=
name|endpoint
operator|.
name|initJdbc
argument_list|()
expr_stmt|;
block|}
DECL|method|initJdbc ()
specifier|protected
specifier|final
name|void
name|initJdbc
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|SQLException
block|{
if|if
condition|(
name|endpoint
operator|.
name|getDatasource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dbConnection
operator|=
operator|(
name|PGConnection
operator|)
name|endpoint
operator|.
name|getDatasource
argument_list|()
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"pgjdbc.test.user"
argument_list|,
name|endpoint
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"pgjdbc.test.password"
argument_list|,
name|endpoint
operator|.
name|getPass
argument_list|()
argument_list|)
expr_stmt|;
name|Class
operator|.
name|forName
argument_list|(
literal|"com.impossibl.postgres.jdbc.PGDriver"
argument_list|)
expr_stmt|;
name|dbConnection
operator|=
operator|(
name|PGConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:pgsql://"
operator|+
name|endpoint
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getPort
argument_list|()
operator|+
literal|"/"
operator|+
name|endpoint
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|dbConnection
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|dbConnection
operator|=
name|endpoint
operator|.
name|initJdbc
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidStateException
argument_list|(
literal|"Database connection closed "
operator|+
literal|"and could not be re-opened."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|boolean
name|retVal
decl_stmt|;
try|try
block|{
name|dbConnection
operator|.
name|createStatement
argument_list|()
operator|.
name|execute
argument_list|(
literal|"NOTIFY "
operator|+
name|endpoint
operator|.
name|getChannel
argument_list|()
operator|+
literal|", '"
operator|+
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|retVal
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|retVal
operator|=
literal|false
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
name|retVal
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doShutdown
argument_list|()
expr_stmt|;
name|dbConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

