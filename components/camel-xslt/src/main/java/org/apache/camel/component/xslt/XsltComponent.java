begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xslt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
import|;
end_import

begin_comment
comment|/**  * The<a href="http://camel.apache.org/xslt.html">XSLT Component</a> is for performing XSLT transformations of messages  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
literal|"xslt"
argument_list|)
DECL|class|XsltComponent
specifier|public
class|class
name|XsltComponent
extends|extends
name|DefaultComponent
block|{
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|uriResolver
specifier|private
name|URIResolver
name|uriResolver
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|uriResolverFactory
specifier|private
name|XsltUriResolverFactory
name|uriResolverFactory
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|contentCache
specifier|private
name|boolean
name|contentCache
init|=
literal|true
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|transformerFactoryConfigurationStrategy
specifier|private
name|TransformerFactoryConfigurationStrategy
name|transformerFactoryConfigurationStrategy
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|transformerFactoryClass
specifier|private
name|String
name|transformerFactoryClass
decl_stmt|;
DECL|method|XsltComponent ()
specifier|public
name|XsltComponent
parameter_list|()
block|{     }
DECL|method|getUriResolverFactory ()
specifier|public
name|XsltUriResolverFactory
name|getUriResolverFactory
parameter_list|()
block|{
return|return
name|uriResolverFactory
return|;
block|}
comment|/**      * To use a custom UriResolver which depends on a dynamic endpoint resource URI. Should not be used together with the option 'uriResolver'.      */
DECL|method|setUriResolverFactory (XsltUriResolverFactory uriResolverFactory)
specifier|public
name|void
name|setUriResolverFactory
parameter_list|(
name|XsltUriResolverFactory
name|uriResolverFactory
parameter_list|)
block|{
name|this
operator|.
name|uriResolverFactory
operator|=
name|uriResolverFactory
expr_stmt|;
block|}
DECL|method|getUriResolver ()
specifier|public
name|URIResolver
name|getUriResolver
parameter_list|()
block|{
return|return
name|uriResolver
return|;
block|}
comment|/**      * To use a custom UriResolver. Should not be used together with the option 'uriResolverFactory'.      */
DECL|method|setUriResolver (URIResolver uriResolver)
specifier|public
name|void
name|setUriResolver
parameter_list|(
name|URIResolver
name|uriResolver
parameter_list|)
block|{
name|this
operator|.
name|uriResolver
operator|=
name|uriResolver
expr_stmt|;
block|}
DECL|method|isContentCache ()
specifier|public
name|boolean
name|isContentCache
parameter_list|()
block|{
return|return
name|contentCache
return|;
block|}
comment|/**      * Cache for the resource content (the stylesheet file) when it is loaded.      * If set to false Camel will reload the stylesheet file on each message processing. This is good for development.      * A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation.      */
DECL|method|setContentCache (boolean contentCache)
specifier|public
name|void
name|setContentCache
parameter_list|(
name|boolean
name|contentCache
parameter_list|)
block|{
name|this
operator|.
name|contentCache
operator|=
name|contentCache
expr_stmt|;
block|}
DECL|method|getTransformerFactoryConfigurationStrategy ()
specifier|public
name|TransformerFactoryConfigurationStrategy
name|getTransformerFactoryConfigurationStrategy
parameter_list|()
block|{
return|return
name|transformerFactoryConfigurationStrategy
return|;
block|}
comment|/**      * A configuration strategy to apply on freshly created instances of TransformerFactory.      */
DECL|method|setTransformerFactoryConfigurationStrategy ( TransformerFactoryConfigurationStrategy transformerFactoryConfigurationStrategy)
specifier|public
name|void
name|setTransformerFactoryConfigurationStrategy
parameter_list|(
name|TransformerFactoryConfigurationStrategy
name|transformerFactoryConfigurationStrategy
parameter_list|)
block|{
name|this
operator|.
name|transformerFactoryConfigurationStrategy
operator|=
name|transformerFactoryConfigurationStrategy
expr_stmt|;
block|}
DECL|method|getTransformerFactoryClass ()
specifier|public
name|String
name|getTransformerFactoryClass
parameter_list|()
block|{
return|return
name|transformerFactoryClass
return|;
block|}
comment|/**      * To use a custom XSLT transformer factory, specified as a FQN class name      */
DECL|method|setTransformerFactoryClass (String transformerFactoryClass)
specifier|public
name|void
name|setTransformerFactoryClass
parameter_list|(
name|String
name|transformerFactoryClass
parameter_list|)
block|{
name|this
operator|.
name|transformerFactoryClass
operator|=
name|transformerFactoryClass
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, final String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
specifier|final
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|XsltEndpoint
name|endpoint
init|=
name|createXsltEndpoint
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|configureEndpoint
argument_list|(
name|endpoint
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|createXsltEndpoint (String uri)
specifier|protected
name|XsltEndpoint
name|createXsltEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|XsltEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|configureEndpoint (Endpoint endpoint, final String remaining, Map<String, Object> parameters)
specifier|protected
name|void
name|configureEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
specifier|final
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|XsltEndpoint
name|xslt
init|=
operator|(
name|XsltEndpoint
operator|)
name|endpoint
decl_stmt|;
name|xslt
operator|.
name|setContentCache
argument_list|(
name|isContentCache
argument_list|()
argument_list|)
expr_stmt|;
comment|// lookup custom resolver to use
name|URIResolver
name|resolver
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"uriResolver"
argument_list|,
name|URIResolver
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
comment|// not in endpoint then use component specific resolver
name|resolver
operator|=
name|getUriResolver
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
comment|// lookup custom resolver factory to use
name|XsltUriResolverFactory
name|resolverFactory
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"uriResolverFactory"
argument_list|,
name|XsltUriResolverFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolverFactory
operator|==
literal|null
condition|)
block|{
comment|// not in endpoint then use component specific resolver factory
name|resolverFactory
operator|=
name|getUriResolverFactory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resolverFactory
operator|==
literal|null
condition|)
block|{
comment|// fallback to use the Default URI resolver factory
name|resolverFactory
operator|=
operator|new
name|DefaultXsltUriResolverFactory
argument_list|()
expr_stmt|;
block|}
name|resolver
operator|=
name|resolverFactory
operator|.
name|createUriResolver
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
name|xslt
operator|.
name|setUriResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|String
name|resourceUri
init|=
name|remaining
decl_stmt|;
if|if
condition|(
name|ResourceHelper
operator|.
name|isHttpUri
argument_list|(
name|resourceUri
argument_list|)
condition|)
block|{
comment|// if its a http uri, then append additional parameters as they are part of the uri
name|resourceUri
operator|=
name|ResourceHelper
operator|.
name|appendParameters
argument_list|(
name|resourceUri
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"{} using schema resource: {}"
argument_list|,
name|this
argument_list|,
name|resourceUri
argument_list|)
expr_stmt|;
name|xslt
operator|.
name|setResourceUri
argument_list|(
name|resourceUri
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// additional parameters need to be stored on endpoint as they can be used to configure xslt builder additionally
name|xslt
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

