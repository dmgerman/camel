begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jbi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|common
operator|.
name|xbean
operator|.
name|AbstractXBeanDeployer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|common
operator|.
name|ServiceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xbean
operator|.
name|kernel
operator|.
name|Kernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xbean
operator|.
name|server
operator|.
name|spring
operator|.
name|loader
operator|.
name|PureSpringLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xbean
operator|.
name|server
operator|.
name|spring
operator|.
name|loader
operator|.
name|SpringLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|FileSystemXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|GenericApplicationContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|management
operator|.
name|DeploymentException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A deployer of the spring XML file  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|CamelSpringDeployer
specifier|public
class|class
name|CamelSpringDeployer
extends|extends
name|AbstractXBeanDeployer
block|{
DECL|field|component
specifier|private
specifier|final
name|CamelJbiComponent
name|component
decl_stmt|;
DECL|field|springLoader
specifier|private
name|PureSpringLoader
name|springLoader
init|=
operator|new
name|PureSpringLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|AbstractXmlApplicationContext
name|createXmlApplicationContext
parameter_list|(
name|String
name|configLocation
parameter_list|)
block|{
return|return
operator|new
name|FileSystemXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
name|configLocation
block|}
argument_list|,
literal|false
argument_list|,
name|createParentApplicationContext
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|activatedEndpoints
specifier|private
name|List
argument_list|<
name|CamelJbiEndpoint
argument_list|>
name|activatedEndpoints
init|=
operator|new
name|ArrayList
argument_list|<
name|CamelJbiEndpoint
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|CamelSpringDeployer (CamelJbiComponent component)
specifier|public
name|CamelSpringDeployer
parameter_list|(
name|CamelJbiComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
DECL|method|getXBeanFile ()
specifier|protected
name|String
name|getXBeanFile
parameter_list|()
block|{
return|return
literal|"camel-context"
return|;
block|}
comment|/* (non-Javadoc)     * @see org.apache.servicemix.common.Deployer#deploy(java.lang.String, java.lang.String)     */
annotation|@
name|Override
DECL|method|deploy (String serviceUnitName, String serviceUnitRootPath)
specifier|public
name|ServiceUnit
name|deploy
parameter_list|(
name|String
name|serviceUnitName
parameter_list|,
name|String
name|serviceUnitRootPath
parameter_list|)
throws|throws
name|DeploymentException
block|{
comment|// lets register the deployer so that any endpoints activated are added to this SU
name|component
operator|.
name|deployer
operator|=
name|this
expr_stmt|;
name|ServiceUnit
name|serviceUnit
init|=
name|super
operator|.
name|deploy
argument_list|(
name|serviceUnitName
argument_list|,
name|serviceUnitRootPath
argument_list|)
decl_stmt|;
return|return
name|serviceUnit
return|;
block|}
DECL|method|addService (CamelJbiEndpoint endpoint)
specifier|public
name|void
name|addService
parameter_list|(
name|CamelJbiEndpoint
name|endpoint
parameter_list|)
block|{
name|activatedEndpoints
operator|.
name|add
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|getServices (Kernel kernel)
specifier|protected
name|List
name|getServices
parameter_list|(
name|Kernel
name|kernel
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|CamelJbiEndpoint
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<
name|CamelJbiEndpoint
argument_list|>
argument_list|(
name|activatedEndpoints
argument_list|)
decl_stmt|;
name|activatedEndpoints
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ApplicationContext
name|applicationContext
init|=
name|springLoader
operator|.
name|getApplicationContext
argument_list|()
decl_stmt|;
name|SpringCamelContext
name|camelContext
init|=
name|SpringCamelContext
operator|.
name|springCamelContext
argument_list|(
name|applicationContext
argument_list|)
decl_stmt|;
comment|// now lets iterate through all the endpoints
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|camelContext
operator|.
name|getSingletonEndpoints
argument_list|()
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
if|if
condition|(
name|component
operator|.
name|isEndpointExposedOnNmr
argument_list|(
name|endpoint
argument_list|)
condition|)
block|{
name|services
operator|.
name|add
argument_list|(
name|component
operator|.
name|createJbiEndpointFromCamel
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|services
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createSpringLoader ()
specifier|protected
name|SpringLoader
name|createSpringLoader
parameter_list|()
block|{
return|return
name|springLoader
return|;
block|}
comment|/**      * Returns the parent application context which can be used to auto-wire any JBI based components      * using the jbi prefix      */
DECL|method|createParentApplicationContext ()
specifier|protected
name|ApplicationContext
name|createParentApplicationContext
parameter_list|()
block|{
name|GenericApplicationContext
name|answer
init|=
operator|new
name|GenericApplicationContext
argument_list|()
decl_stmt|;
name|answer
operator|.
name|getBeanFactory
argument_list|()
operator|.
name|registerSingleton
argument_list|(
literal|"jbi"
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
name|answer
operator|.
name|refresh
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

