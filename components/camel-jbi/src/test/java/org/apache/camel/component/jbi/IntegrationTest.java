begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jbi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbi
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|jbi
operator|.
name|container
operator|.
name|JBIContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|client
operator|.
name|ServiceMixClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|client
operator|.
name|DefaultServiceMixClient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|InOut
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|servicedesc
operator|.
name|ServiceEndpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|IntegrationTest
specifier|public
class|class
name|IntegrationTest
extends|extends
name|TestCase
block|{
DECL|field|container
specifier|protected
name|JBIContainer
name|container
init|=
operator|new
name|JBIContainer
argument_list|()
decl_stmt|;
DECL|field|tempRootDir
specifier|private
name|File
name|tempRootDir
decl_stmt|;
comment|/*      * @see TestCase#setUp()      */
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|container
operator|.
name|setCreateMBeanServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|setMonitorInstallationDirectory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tempRootDir
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"servicemix"
argument_list|,
literal|"rootDir"
argument_list|)
expr_stmt|;
name|tempRootDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|File
name|tempTemp
init|=
operator|new
name|File
argument_list|(
name|tempRootDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/temp"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tempTemp
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to create temporary working root directory ["
operator|+
name|tempTemp
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using temporary root directory ["
operator|+
name|tempRootDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|container
operator|.
name|setRootDir
argument_list|(
name|tempRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setMonitorInstallationDirectory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|setUseMBeanServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|setCreateMBeanServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|setFlowName
argument_list|(
literal|"st"
argument_list|)
expr_stmt|;
name|container
operator|.
name|init
argument_list|()
expr_stmt|;
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testComponentInstallation ()
specifier|public
name|void
name|testComponentInstallation
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelJbiComponent
name|component
init|=
operator|new
name|CamelJbiComponent
argument_list|()
decl_stmt|;
name|container
operator|.
name|activateComponent
argument_list|(
name|component
argument_list|,
literal|"#ServiceMixComponent#"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"su1-src/camel-context.xml"
argument_list|)
decl_stmt|;
name|File
name|path
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|ServiceMixClient
name|client
init|=
operator|new
name|DefaultServiceMixClient
argument_list|(
name|container
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
comment|// Deploy and start su
name|component
operator|.
name|getServiceUnitManager
argument_list|()
operator|.
name|deploy
argument_list|(
literal|"su1"
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|.
name|getServiceUnitManager
argument_list|()
operator|.
name|init
argument_list|(
literal|"su1"
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|.
name|getServiceUnitManager
argument_list|()
operator|.
name|start
argument_list|(
literal|"su1"
argument_list|)
expr_stmt|;
comment|// Send message
name|InOut
name|inout
init|=
name|client
operator|.
name|createInOutExchange
argument_list|()
decl_stmt|;
name|ServiceEndpoint
name|endpoint
init|=
name|client
operator|.
name|getContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|CamelJbiEndpoint
operator|.
name|SERVICE_NAME
argument_list|,
literal|"queue:a"
argument_list|)
decl_stmt|;
comment|//QName serviceQName = new QName("http://servicemix.apache.org/demo/", "chained");
comment|//QName serviceQName = new QName("queue:a", "endpoint");
comment|//inout.setService(serviceQName);
name|inout
operator|.
name|setEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|client
operator|.
name|send
argument_list|(
name|inout
argument_list|)
expr_stmt|;
comment|// Stop and undeploy
name|component
operator|.
name|getServiceUnitManager
argument_list|()
operator|.
name|stop
argument_list|(
literal|"su1"
argument_list|)
expr_stmt|;
name|component
operator|.
name|getServiceUnitManager
argument_list|()
operator|.
name|shutDown
argument_list|(
literal|"su1"
argument_list|)
expr_stmt|;
name|component
operator|.
name|getServiceUnitManager
argument_list|()
operator|.
name|undeploy
argument_list|(
literal|"su1"
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send message
name|inout
operator|=
name|client
operator|.
name|createInOutExchange
argument_list|()
expr_stmt|;
comment|//inout.setService(serviceQName);
name|inout
operator|.
name|setEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|send
argument_list|(
name|inout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
comment|// Ok, the lw component is undeployed
block|}
block|}
block|}
comment|/*      * @see TestCase#tearDown()      */
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|container
operator|.
name|stop
argument_list|()
expr_stmt|;
name|container
operator|.
name|shutDown
argument_list|()
expr_stmt|;
name|deleteDir
argument_list|(
name|tempRootDir
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteDir (File dir)
specifier|public
specifier|static
name|boolean
name|deleteDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting directory : "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|children
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|success
init|=
name|deleteDir
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|children
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// The directory is now empty so delete it
return|return
name|dir
operator|.
name|delete
argument_list|()
return|;
block|}
block|}
end_class

end_unit

