begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|Validation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ValidatorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|bootstrap
operator|.
name|GenericBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ValidatorFactoryTest
specifier|public
class|class
name|ValidatorFactoryTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|BindToRegistry
argument_list|(
literal|"myValidatorFactory"
argument_list|)
DECL|field|validatorFactory
specifier|private
name|ValidatorFactory
name|validatorFactory
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericBootstrap
name|bootstrap
init|=
name|Validation
operator|.
name|byDefaultProvider
argument_list|()
decl_stmt|;
name|bootstrap
operator|.
name|providerResolver
argument_list|(
operator|new
name|HibernateValidationProviderResolver
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|validatorFactory
operator|=
name|bootstrap
operator|.
name|configure
argument_list|()
operator|.
name|buildValidatorFactory
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|configureValidatorFactoryFromRegistry ()
specifier|public
name|void
name|configureValidatorFactoryFromRegistry
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isPlatform
argument_list|(
literal|"aix"
argument_list|)
condition|)
block|{
comment|// cannot run on aix
return|return;
block|}
name|BeanValidatorEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"bean-validator?validatorFactory=#myValidatorFactory"
argument_list|,
name|BeanValidatorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|BeanValidatorProducer
name|producer
init|=
operator|(
name|BeanValidatorProducer
operator|)
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|endpoint
operator|.
name|getValidatorFactory
argument_list|()
argument_list|,
name|this
operator|.
name|validatorFactory
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|producer
operator|.
name|getValidatorFactory
argument_list|()
argument_list|,
name|this
operator|.
name|validatorFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|configureValidatorFactory ()
specifier|public
name|void
name|configureValidatorFactory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isPlatform
argument_list|(
literal|"aix"
argument_list|)
condition|)
block|{
comment|// cannot run on aix
return|return;
block|}
name|BeanValidatorEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"bean-validator"
argument_list|,
name|BeanValidatorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|BeanValidatorProducer
name|producer
init|=
operator|(
name|BeanValidatorProducer
operator|)
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|endpoint
operator|.
name|getValidatorFactory
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|endpoint
operator|.
name|getValidatorFactory
argument_list|()
argument_list|,
name|this
operator|.
name|validatorFactory
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|producer
operator|.
name|getValidatorFactory
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|producer
operator|.
name|getValidatorFactory
argument_list|()
argument_list|,
name|this
operator|.
name|validatorFactory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

