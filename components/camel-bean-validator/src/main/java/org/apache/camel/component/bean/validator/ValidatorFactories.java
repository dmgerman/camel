begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintValidatorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|MessageInterpolator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|TraversableResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|Validation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ValidationProviderResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ValidatorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|bootstrap
operator|.
name|GenericBootstrap
import|;
end_import

begin_comment
comment|/**  * Utility class dedicated to create new {@code javax.validation.ValidatorFactory} instances.  */
end_comment

begin_class
DECL|class|ValidatorFactories
specifier|public
specifier|final
class|class
name|ValidatorFactories
block|{
DECL|method|ValidatorFactories ()
specifier|private
name|ValidatorFactories
parameter_list|()
block|{     }
DECL|method|buildValidatorFactory (boolean osgi, ValidationProviderResolver validationProviderResolver, MessageInterpolator messageInterpolator, TraversableResolver traversableResolver, ConstraintValidatorFactory constraintValidatorFactory)
specifier|public
specifier|static
name|ValidatorFactory
name|buildValidatorFactory
parameter_list|(
name|boolean
name|osgi
parameter_list|,
name|ValidationProviderResolver
name|validationProviderResolver
parameter_list|,
name|MessageInterpolator
name|messageInterpolator
parameter_list|,
name|TraversableResolver
name|traversableResolver
parameter_list|,
name|ConstraintValidatorFactory
name|constraintValidatorFactory
parameter_list|)
block|{
name|ValidationProviderResolver
name|resolvedValidationProviderResolver
init|=
name|resolveValidationProviderResolver
argument_list|(
name|osgi
argument_list|,
name|validationProviderResolver
argument_list|)
decl_stmt|;
name|GenericBootstrap
name|bootstrap
init|=
name|Validation
operator|.
name|byDefaultProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolvedValidationProviderResolver
operator|!=
literal|null
condition|)
block|{
name|bootstrap
operator|.
name|providerResolver
argument_list|(
name|resolvedValidationProviderResolver
argument_list|)
expr_stmt|;
block|}
name|Configuration
argument_list|<
name|?
argument_list|>
name|configuration
init|=
name|bootstrap
operator|.
name|configure
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageInterpolator
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|messageInterpolator
argument_list|(
name|messageInterpolator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|traversableResolver
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|traversableResolver
argument_list|(
name|traversableResolver
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|constraintValidatorFactory
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|constraintValidatorFactory
argument_list|(
name|constraintValidatorFactory
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
operator|.
name|buildValidatorFactory
argument_list|()
return|;
block|}
comment|/**      * Resolves optional custom {@code javax.validation.ValidationProviderResolver} to be used by the component. By      * default component tries to use resolver instance bound to the Camel registry under name      * {@code validationProviderResolver} . If there is no such resolver instance in the registry and component is      * running in the OSGi environment, {@link HibernateValidationProviderResolver} will be used. In all the other      * cases this method will return null.      *      * @param osgi specifies if validator factory should be OSGi-aware      * @param validationProviderResolver predefined provider resolver. This parameter overrides the results of the      *                                   resolution.      * @return {@code javax.validation.ValidationProviderResolver} instance or null if no custom resolver should      * be used by the component      */
DECL|method|resolveValidationProviderResolver ( boolean osgi, ValidationProviderResolver validationProviderResolver)
specifier|private
specifier|static
name|ValidationProviderResolver
name|resolveValidationProviderResolver
parameter_list|(
name|boolean
name|osgi
parameter_list|,
name|ValidationProviderResolver
name|validationProviderResolver
parameter_list|)
block|{
if|if
condition|(
name|validationProviderResolver
operator|!=
literal|null
condition|)
block|{
return|return
name|validationProviderResolver
return|;
block|}
if|if
condition|(
name|osgi
condition|)
block|{
return|return
operator|new
name|HibernateValidationProviderResolver
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

