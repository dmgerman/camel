begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintViolation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ValidationException
import|;
end_import

begin_comment
comment|/**  * A bean validation exception occurred  */
end_comment

begin_class
DECL|class|BeanValidationException
specifier|public
class|class
name|BeanValidationException
extends|extends
name|ValidationException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5767438583860347105L
decl_stmt|;
DECL|field|constraintViolations
specifier|private
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraintViolations
decl_stmt|;
DECL|method|BeanValidationException (Exchange exchange, Set<ConstraintViolation<Object>> constraintViolations, Object bean)
specifier|public
name|BeanValidationException
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraintViolations
parameter_list|,
name|Object
name|bean
parameter_list|)
block|{
name|super
argument_list|(
name|exchange
argument_list|,
name|buildMessage
argument_list|(
name|constraintViolations
argument_list|,
name|bean
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|constraintViolations
operator|=
name|constraintViolations
expr_stmt|;
block|}
DECL|method|buildMessage (Set<ConstraintViolation<Object>> constraintViolations, Object bean)
specifier|protected
specifier|static
name|String
name|buildMessage
parameter_list|(
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraintViolations
parameter_list|,
name|Object
name|bean
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Validation failed for: "
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" errors: ["
argument_list|)
expr_stmt|;
for|for
control|(
name|ConstraintViolation
argument_list|<
name|Object
argument_list|>
name|constraintViolation
range|:
name|constraintViolations
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"property: "
operator|+
name|constraintViolation
operator|.
name|getPropertyPath
argument_list|()
operator|+
literal|"; value: "
operator|+
name|constraintViolation
operator|.
name|getInvalidValue
argument_list|()
operator|+
literal|"; constraint: "
operator|+
name|constraintViolation
operator|.
name|getMessage
argument_list|()
operator|+
literal|"; "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getConstraintViolations ()
specifier|public
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getConstraintViolations
parameter_list|()
block|{
return|return
name|constraintViolations
return|;
block|}
block|}
end_class

end_unit

