begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintValidatorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintViolation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|MessageInterpolator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|TraversableResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ValidatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_comment
comment|/**  * Bean validator that uses the JSR 303 reference implementation  * (Hibernate Validator).  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|BeanValidator
specifier|public
class|class
name|BeanValidator
implements|implements
name|Processor
block|{
DECL|field|validatorFactory
specifier|private
name|ValidatorFactory
name|validatorFactory
decl_stmt|;
DECL|field|validator
specifier|private
name|Validator
name|validator
decl_stmt|;
DECL|field|group
specifier|private
name|Class
name|group
decl_stmt|;
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|bean
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraintViolations
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|group
operator|!=
literal|null
condition|)
block|{
name|constraintViolations
operator|=
name|validator
operator|.
name|validate
argument_list|(
name|bean
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constraintViolations
operator|=
name|validator
operator|.
name|validate
argument_list|(
name|bean
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|constraintViolations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BeanValidationException
argument_list|(
name|exchange
argument_list|,
name|constraintViolations
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getValidatorFactory ()
specifier|public
name|ValidatorFactory
name|getValidatorFactory
parameter_list|()
block|{
return|return
name|validatorFactory
return|;
block|}
DECL|method|setValidatorFactory (ValidatorFactory validatorFactory)
specifier|public
name|void
name|setValidatorFactory
parameter_list|(
name|ValidatorFactory
name|validatorFactory
parameter_list|)
block|{
name|this
operator|.
name|validatorFactory
operator|=
name|validatorFactory
expr_stmt|;
name|this
operator|.
name|validator
operator|=
name|this
operator|.
name|validatorFactory
operator|.
name|getValidator
argument_list|()
expr_stmt|;
block|}
DECL|method|getValidator ()
specifier|public
name|Validator
name|getValidator
parameter_list|()
block|{
return|return
name|validator
return|;
block|}
DECL|method|getGroup ()
specifier|public
name|Class
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
DECL|method|setGroup (Class group)
specifier|public
name|void
name|setGroup
parameter_list|(
name|Class
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
DECL|method|getMessageInterpolator ()
specifier|public
name|MessageInterpolator
name|getMessageInterpolator
parameter_list|()
block|{
return|return
name|this
operator|.
name|validatorFactory
operator|.
name|getMessageInterpolator
argument_list|()
return|;
block|}
DECL|method|getTraversableResolver ()
specifier|public
name|TraversableResolver
name|getTraversableResolver
parameter_list|()
block|{
return|return
name|this
operator|.
name|validatorFactory
operator|.
name|getTraversableResolver
argument_list|()
return|;
block|}
DECL|method|getConstraintValidatorFactory ()
specifier|public
name|ConstraintValidatorFactory
name|getConstraintValidatorFactory
parameter_list|()
block|{
return|return
name|this
operator|.
name|validatorFactory
operator|.
name|getConstraintValidatorFactory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

