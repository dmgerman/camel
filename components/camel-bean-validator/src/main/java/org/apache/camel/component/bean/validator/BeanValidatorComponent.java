begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintValidatorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|MessageInterpolator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|TraversableResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ValidationProviderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_comment
comment|/**  * Bean Validator Component for validating Java beans against reference implementation of JSR 303 Validator (Hibernate  * Validator).  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
literal|"bean-validator"
argument_list|)
DECL|class|BeanValidatorComponent
specifier|public
class|class
name|BeanValidatorComponent
extends|extends
name|DefaultComponent
block|{
annotation|@
name|Metadata
DECL|field|ignoreXmlConfiguration
specifier|private
name|boolean
name|ignoreXmlConfiguration
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|validationProviderResolver
specifier|private
name|ValidationProviderResolver
name|validationProviderResolver
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|messageInterpolator
specifier|private
name|MessageInterpolator
name|messageInterpolator
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|traversableResolver
specifier|private
name|TraversableResolver
name|traversableResolver
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|constraintValidatorFactory
specifier|private
name|ConstraintValidatorFactory
name|constraintValidatorFactory
decl_stmt|;
DECL|method|BeanValidatorComponent ()
specifier|public
name|BeanValidatorComponent
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|BeanValidatorEndpoint
name|endpoint
init|=
operator|new
name|BeanValidatorEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setLabel
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setIgnoreXmlConfiguration
argument_list|(
name|ignoreXmlConfiguration
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setValidationProviderResolver
argument_list|(
name|validationProviderResolver
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setMessageInterpolator
argument_list|(
name|messageInterpolator
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setTraversableResolver
argument_list|(
name|traversableResolver
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setConstraintValidatorFactory
argument_list|(
name|constraintValidatorFactory
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|isIgnoreXmlConfiguration ()
specifier|public
name|boolean
name|isIgnoreXmlConfiguration
parameter_list|()
block|{
return|return
name|ignoreXmlConfiguration
return|;
block|}
comment|/**      * Whether to ignore data from the META-INF/validation.xml file.      */
DECL|method|setIgnoreXmlConfiguration (boolean ignoreXmlConfiguration)
specifier|public
name|void
name|setIgnoreXmlConfiguration
parameter_list|(
name|boolean
name|ignoreXmlConfiguration
parameter_list|)
block|{
name|this
operator|.
name|ignoreXmlConfiguration
operator|=
name|ignoreXmlConfiguration
expr_stmt|;
block|}
DECL|method|getValidationProviderResolver ()
specifier|public
name|ValidationProviderResolver
name|getValidationProviderResolver
parameter_list|()
block|{
return|return
name|validationProviderResolver
return|;
block|}
comment|/**      * To use a a custom {@link ValidationProviderResolver}      */
DECL|method|setValidationProviderResolver (ValidationProviderResolver validationProviderResolver)
specifier|public
name|void
name|setValidationProviderResolver
parameter_list|(
name|ValidationProviderResolver
name|validationProviderResolver
parameter_list|)
block|{
name|this
operator|.
name|validationProviderResolver
operator|=
name|validationProviderResolver
expr_stmt|;
block|}
DECL|method|getMessageInterpolator ()
specifier|public
name|MessageInterpolator
name|getMessageInterpolator
parameter_list|()
block|{
return|return
name|messageInterpolator
return|;
block|}
comment|/**      * To use a custom {@link MessageInterpolator}      */
DECL|method|setMessageInterpolator (MessageInterpolator messageInterpolator)
specifier|public
name|void
name|setMessageInterpolator
parameter_list|(
name|MessageInterpolator
name|messageInterpolator
parameter_list|)
block|{
name|this
operator|.
name|messageInterpolator
operator|=
name|messageInterpolator
expr_stmt|;
block|}
DECL|method|getTraversableResolver ()
specifier|public
name|TraversableResolver
name|getTraversableResolver
parameter_list|()
block|{
return|return
name|traversableResolver
return|;
block|}
comment|/**      * To use a custom {@link TraversableResolver}      */
DECL|method|setTraversableResolver (TraversableResolver traversableResolver)
specifier|public
name|void
name|setTraversableResolver
parameter_list|(
name|TraversableResolver
name|traversableResolver
parameter_list|)
block|{
name|this
operator|.
name|traversableResolver
operator|=
name|traversableResolver
expr_stmt|;
block|}
DECL|method|getConstraintValidatorFactory ()
specifier|public
name|ConstraintValidatorFactory
name|getConstraintValidatorFactory
parameter_list|()
block|{
return|return
name|constraintValidatorFactory
return|;
block|}
comment|/**      * To use a custom {@link ConstraintValidatorFactory}      */
DECL|method|setConstraintValidatorFactory (ConstraintValidatorFactory constraintValidatorFactory)
specifier|public
name|void
name|setConstraintValidatorFactory
parameter_list|(
name|ConstraintValidatorFactory
name|constraintValidatorFactory
parameter_list|)
block|{
name|this
operator|.
name|constraintValidatorFactory
operator|=
name|constraintValidatorFactory
expr_stmt|;
block|}
block|}
end_class

end_unit

