begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirOperationApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|IdType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|IntegerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Patient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.fhir.api.FhirOperation} APIs.  */
end_comment

begin_class
DECL|class|FhirOperationIT
specifier|public
class|class
name|FhirOperationIT
extends|extends
name|AbstractFhirTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FhirOperationIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|FhirApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|FhirOperationApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testOnInstance ()
specifier|public
name|void
name|testOnInstance
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IIdType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.id"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.name"
argument_list|,
literal|"everything"
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IBaseParameters
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.parameters"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.outputParameterType"
argument_list|,
name|Parameters
operator|.
name|class
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.useHttpGet"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.returnType"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is java.util.Map
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.extraParameters"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Parameters
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ON_INSTANCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"onInstance: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"onInstance result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Bundle
name|bundle
init|=
operator|(
name|Bundle
operator|)
name|result
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"onInstance result"
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
name|IdType
name|id
init|=
name|bundle
operator|.
name|getEntry
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
operator|.
name|getIdElement
argument_list|()
operator|.
name|toUnqualifiedVersionless
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|toUnqualifiedVersionless
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnInstanceVersion ()
specifier|public
name|void
name|testOnInstanceVersion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IIdType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.id"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.name"
argument_list|,
literal|"everything"
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IBaseParameters
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.parameters"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.outputParameterType"
argument_list|,
name|Parameters
operator|.
name|class
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.useHttpGet"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.returnType"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is java.util.Map
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.extraParameters"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Parameters
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ON_INSTANCE_VERSION"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"onInstance: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"onInstance result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Bundle
name|bundle
init|=
operator|(
name|Bundle
operator|)
name|result
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"onInstance result"
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
name|IdType
name|id
init|=
name|bundle
operator|.
name|getEntry
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
operator|.
name|getIdElement
argument_list|()
operator|.
name|toUnqualifiedVersionless
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|toUnqualifiedVersionless
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnServer ()
specifier|public
name|void
name|testOnServer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.name"
argument_list|,
literal|"$get-resource-counts"
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IBaseParameters
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.parameters"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.outputParameterType"
argument_list|,
name|Parameters
operator|.
name|class
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.useHttpGet"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.returnType"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is java.util.Map
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.extraParameters"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Parameters
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ON_SERVER"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"onServer result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnType ()
specifier|public
name|void
name|testOnType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resourceType"
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.name"
argument_list|,
literal|"everything"
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IBaseParameters
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.parameters"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.outputParameterType"
argument_list|,
name|Parameters
operator|.
name|class
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.useHttpGet"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.returnType"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is java.util.Map
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.extraParameters"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ON_TYPE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"onType result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"onType: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"Not implemented yet in HAPI FHIR server side, see"
operator|+
literal|" https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoMessageHeaderDstu3.java#L33"
argument_list|)
annotation|@
name|Test
DECL|method|testProcessMessage ()
specifier|public
name|void
name|testProcessMessage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.respondToUri"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IBaseBundle
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.msgBundle"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.asynchronous"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.responseClass"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is java.util.Map
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.extraParameters"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseBundle
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://PROCESS_MESSAGE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"processMessage result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"processMessage: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for onInstance
name|from
argument_list|(
literal|"direct://ON_INSTANCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/onInstance"
argument_list|)
expr_stmt|;
comment|// test route for onInstanceVersion
name|from
argument_list|(
literal|"direct://ON_INSTANCE_VERSION"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/onInstanceVersion"
argument_list|)
expr_stmt|;
comment|// test route for onServer
name|from
argument_list|(
literal|"direct://ON_SERVER"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/onServer"
argument_list|)
expr_stmt|;
comment|// test route for onType
name|from
argument_list|(
literal|"direct://ON_TYPE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/onType"
argument_list|)
expr_stmt|;
comment|// test route for processMessage
name|from
argument_list|(
literal|"direct://PROCESS_MESSAGE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/processMessage"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

