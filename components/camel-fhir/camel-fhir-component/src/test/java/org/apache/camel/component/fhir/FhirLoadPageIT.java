begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|api
operator|.
name|EncodingEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
operator|.
name|ExtraParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirLoadPageApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|HumanName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Patient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.fhir.api.FhirLoadPage} APIs.  * The class source won't be generated again if the generator MOJO finds it under src/test/java.  */
end_comment

begin_class
DECL|class|FhirLoadPageIT
specifier|public
class|class
name|FhirLoadPageIT
extends|extends
name|AbstractFhirTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FhirLoadPageIT
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|FhirApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|FhirLoadPageApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testByUrl ()
specifier|public
name|void
name|testByUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"Patient?_count=2"
decl_stmt|;
name|Bundle
name|bundle
init|=
name|this
operator|.
name|fhirClient
operator|.
name|search
argument_list|()
operator|.
name|byUrl
argument_list|(
name|url
argument_list|)
operator|.
name|returnBundle
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|bundle
operator|.
name|getLink
argument_list|(
name|Bundle
operator|.
name|LINK_NEXT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nextPageLink
init|=
name|bundle
operator|.
name|getLink
argument_list|(
literal|"next"
argument_list|)
operator|.
name|getUrl
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.url"
argument_list|,
name|nextPageLink
argument_list|)
expr_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.returnType"
argument_list|,
name|Bundle
operator|.
name|class
argument_list|)
expr_stmt|;
name|IBaseBundle
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://BY_URL"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"byUrl: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"byUrl result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNext ()
specifier|public
name|void
name|testNext
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"Patient?_count=2"
decl_stmt|;
name|Bundle
name|bundle
init|=
name|this
operator|.
name|fhirClient
operator|.
name|search
argument_list|()
operator|.
name|byUrl
argument_list|(
name|url
argument_list|)
operator|.
name|returnBundle
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|bundle
operator|.
name|getLink
argument_list|(
name|Bundle
operator|.
name|LINK_NEXT
argument_list|)
argument_list|)
expr_stmt|;
comment|// using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter "bundle"
name|Bundle
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://NEXT"
argument_list|,
name|bundle
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"next result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrevious ()
specifier|public
name|void
name|testPrevious
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"Patient?_count=2"
decl_stmt|;
name|Bundle
name|bundle
init|=
name|this
operator|.
name|fhirClient
operator|.
name|search
argument_list|()
operator|.
name|byUrl
argument_list|(
name|url
argument_list|)
operator|.
name|returnBundle
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|bundle
operator|.
name|getLink
argument_list|(
name|Bundle
operator|.
name|LINK_NEXT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nextPageLink
init|=
name|bundle
operator|.
name|getLink
argument_list|(
literal|"next"
argument_list|)
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|bundle
operator|=
name|this
operator|.
name|fhirClient
operator|.
name|loadPage
argument_list|()
operator|.
name|byUrl
argument_list|(
name|nextPageLink
argument_list|)
operator|.
name|andReturnBundle
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|bundle
operator|.
name|getLink
argument_list|(
name|Bundle
operator|.
name|LINK_PREV
argument_list|)
argument_list|)
expr_stmt|;
comment|// using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter "bundle"
name|Bundle
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://PREVIOUS"
argument_list|,
name|bundle
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"previous: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"previous result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreviousWithEncodingEnum ()
specifier|public
name|void
name|testPreviousWithEncodingEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"Patient?_count=2"
decl_stmt|;
name|Bundle
name|bundle
init|=
name|this
operator|.
name|fhirClient
operator|.
name|search
argument_list|()
operator|.
name|byUrl
argument_list|(
name|url
argument_list|)
operator|.
name|returnBundle
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|bundle
operator|.
name|getLink
argument_list|(
name|Bundle
operator|.
name|LINK_NEXT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nextPageLink
init|=
name|bundle
operator|.
name|getLink
argument_list|(
literal|"next"
argument_list|)
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|bundle
operator|=
name|this
operator|.
name|fhirClient
operator|.
name|loadPage
argument_list|()
operator|.
name|byUrl
argument_list|(
name|nextPageLink
argument_list|)
operator|.
name|andReturnBundle
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|bundle
operator|.
name|getLink
argument_list|(
name|Bundle
operator|.
name|LINK_PREV
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ExtraParameters
operator|.
name|ENCODING_ENUM
operator|.
name|getHeaderName
argument_list|()
argument_list|,
name|EncodingEnum
operator|.
name|XML
argument_list|)
expr_stmt|;
comment|// using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter "bundle"
name|Bundle
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://PREVIOUS"
argument_list|,
name|bundle
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"previous: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"previous result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|populateServer ()
specifier|public
name|void
name|populateServer
parameter_list|()
block|{
name|List
argument_list|<
name|IBaseResource
argument_list|>
name|input
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Patient
name|p1
init|=
operator|new
name|Patient
argument_list|()
decl_stmt|;
name|p1
operator|.
name|addName
argument_list|()
operator|.
name|setFamily
argument_list|(
literal|"PATIENT1"
argument_list|)
expr_stmt|;
name|input
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|Patient
name|p2
init|=
operator|new
name|Patient
argument_list|()
decl_stmt|;
name|p2
operator|.
name|addName
argument_list|()
operator|.
name|setFamily
argument_list|(
literal|"PATIENT2"
argument_list|)
expr_stmt|;
name|input
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|input
operator|.
name|add
argument_list|(
operator|new
name|Patient
argument_list|()
operator|.
name|addName
argument_list|(
operator|new
name|HumanName
argument_list|()
operator|.
name|setFamily
argument_list|(
literal|"PATIENT3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IBaseResource
argument_list|>
name|response
init|=
name|fhirClient
operator|.
name|transaction
argument_list|()
operator|.
name|withResources
argument_list|(
name|input
argument_list|)
operator|.
name|encodedJson
argument_list|()
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|response
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for byUrl
name|from
argument_list|(
literal|"direct://BY_URL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/byUrl"
argument_list|)
expr_stmt|;
comment|// test route for next
name|from
argument_list|(
literal|"direct://NEXT"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/next?inBody=bundle"
argument_list|)
expr_stmt|;
comment|// test route for previous
name|from
argument_list|(
literal|"direct://PREVIOUS"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/previous?inBody=bundle"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

