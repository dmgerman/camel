begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|api
operator|.
name|SummaryEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
operator|.
name|ExtraParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirTransactionApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|HumanName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Patient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.fhir.api.FhirTransaction} APIs.  * The class source won't be generated again if the generator MOJO finds it under src/test/java.  */
end_comment

begin_class
DECL|class|FhirTransactionIT
specifier|public
class|class
name|FhirTransactionIT
extends|extends
name|AbstractFhirTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FhirTransactionIT
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|FhirApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|FhirTransactionApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testWithBundle ()
specifier|public
name|void
name|testWithBundle
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter "bundle"
name|Bundle
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://WITH_BUNDLE"
argument_list|,
name|createTransactionBundle
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"withBundle result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getEntry
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Created"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"withBundle: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithStringBundle ()
specifier|public
name|void
name|testWithStringBundle
parameter_list|()
throws|throws
name|Exception
block|{
name|Bundle
name|transactionBundle
init|=
name|createTransactionBundle
argument_list|()
decl_stmt|;
name|String
name|stringBundle
init|=
name|fhirContext
operator|.
name|newJsonParser
argument_list|()
operator|.
name|encodeResourceToString
argument_list|(
name|transactionBundle
argument_list|)
decl_stmt|;
comment|// using String message body for single parameter "sBundle"
specifier|final
name|String
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://WITH_STRING_BUNDLE"
argument_list|,
name|stringBundle
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"withBundle result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"Bundle"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"withBundle: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithResources ()
specifier|public
name|void
name|testWithResources
parameter_list|()
throws|throws
name|Exception
block|{
name|Patient
name|oscar
init|=
operator|new
name|Patient
argument_list|()
operator|.
name|addName
argument_list|(
operator|new
name|HumanName
argument_list|()
operator|.
name|addGiven
argument_list|(
literal|"Oscar"
argument_list|)
operator|.
name|setFamily
argument_list|(
literal|"Peterson"
argument_list|)
argument_list|)
decl_stmt|;
name|Patient
name|bobbyHebb
init|=
operator|new
name|Patient
argument_list|()
operator|.
name|addName
argument_list|(
operator|new
name|HumanName
argument_list|()
operator|.
name|addGiven
argument_list|(
literal|"Bobby"
argument_list|)
operator|.
name|setFamily
argument_list|(
literal|"Hebb"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IBaseResource
argument_list|>
name|patients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|patients
operator|.
name|add
argument_list|(
name|oscar
argument_list|)
expr_stmt|;
name|patients
operator|.
name|add
argument_list|(
name|bobbyHebb
argument_list|)
expr_stmt|;
comment|// using java.util.List message body for single parameter "resources"
name|List
argument_list|<
name|IBaseResource
argument_list|>
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://WITH_RESOURCES"
argument_list|,
name|patients
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"withResources result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"withResources: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithResourcesSummaryEnum ()
specifier|public
name|void
name|testWithResourcesSummaryEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|Patient
name|oscar
init|=
operator|new
name|Patient
argument_list|()
operator|.
name|addName
argument_list|(
operator|new
name|HumanName
argument_list|()
operator|.
name|addGiven
argument_list|(
literal|"Oscar"
argument_list|)
operator|.
name|setFamily
argument_list|(
literal|"Peterson"
argument_list|)
argument_list|)
decl_stmt|;
name|Patient
name|bobbyHebb
init|=
operator|new
name|Patient
argument_list|()
operator|.
name|addName
argument_list|(
operator|new
name|HumanName
argument_list|()
operator|.
name|addGiven
argument_list|(
literal|"Bobby"
argument_list|)
operator|.
name|setFamily
argument_list|(
literal|"Hebb"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IBaseResource
argument_list|>
name|patients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|patients
operator|.
name|add
argument_list|(
name|oscar
argument_list|)
expr_stmt|;
name|patients
operator|.
name|add
argument_list|(
name|bobbyHebb
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ExtraParameters
operator|.
name|SUMMARY_ENUM
operator|.
name|getHeaderName
argument_list|()
argument_list|,
name|SummaryEnum
operator|.
name|DATA
argument_list|)
expr_stmt|;
comment|// using java.util.List message body for single parameter "resources"
name|List
argument_list|<
name|IBaseResource
argument_list|>
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://WITH_RESOURCES"
argument_list|,
name|patients
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"withResources result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"withResources: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for withBundle
name|from
argument_list|(
literal|"direct://WITH_BUNDLE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/withBundle?inBody=bundle"
argument_list|)
expr_stmt|;
comment|// test route for withBundle
name|from
argument_list|(
literal|"direct://WITH_STRING_BUNDLE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/withBundle?inBody=stringBundle"
argument_list|)
expr_stmt|;
comment|// test route for withResources
name|from
argument_list|(
literal|"direct://WITH_RESOURCES"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/withResources?inBody=resources"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|createTransactionBundle ()
specifier|private
name|Bundle
name|createTransactionBundle
parameter_list|()
block|{
name|Bundle
name|input
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|input
operator|.
name|setType
argument_list|(
name|Bundle
operator|.
name|BundleType
operator|.
name|TRANSACTION
argument_list|)
expr_stmt|;
name|input
operator|.
name|addEntry
argument_list|()
operator|.
name|setResource
argument_list|(
operator|new
name|Patient
argument_list|()
operator|.
name|addName
argument_list|(
operator|new
name|HumanName
argument_list|()
operator|.
name|addGiven
argument_list|(
literal|"Art"
argument_list|)
operator|.
name|setFamily
argument_list|(
literal|"Tatum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getRequest
argument_list|()
operator|.
name|setMethod
argument_list|(
name|Bundle
operator|.
name|HTTPVerb
operator|.
name|POST
argument_list|)
expr_stmt|;
return|return
name|input
return|;
block|}
block|}
end_class

end_unit

