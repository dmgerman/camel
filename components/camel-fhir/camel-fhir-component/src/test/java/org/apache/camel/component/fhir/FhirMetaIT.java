begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
operator|.
name|ExtraParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirMetaApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Patient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseMetaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.fhir.api.FhirMeta} APIs.  * The class source won't be generated again if the generator MOJO finds it under src/test/java.  */
end_comment

begin_class
DECL|class|FhirMetaIT
specifier|public
class|class
name|FhirMetaIT
extends|extends
name|AbstractFhirTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FhirMetaIT
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|FhirApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|FhirMetaApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testAdd ()
specifier|public
name|void
name|testAdd
parameter_list|()
throws|throws
name|Exception
block|{
comment|//assert no meta
name|Meta
name|meta
init|=
name|fhirClient
operator|.
name|meta
argument_list|()
operator|.
name|get
argument_list|(
name|Meta
operator|.
name|class
argument_list|)
operator|.
name|fromResource
argument_list|(
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getTag
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Meta
name|inMeta
init|=
operator|new
name|Meta
argument_list|()
decl_stmt|;
name|inMeta
operator|.
name|addTag
argument_list|()
operator|.
name|setSystem
argument_list|(
literal|"urn:system1"
argument_list|)
operator|.
name|setCode
argument_list|(
literal|"urn:code1"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IBaseMetaType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.meta"
argument_list|,
name|inMeta
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IIdType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.id"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
expr_stmt|;
name|IBaseMetaType
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADD"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"add: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"add result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getTag
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
comment|//assert no meta
name|Meta
name|meta
init|=
name|fhirClient
operator|.
name|meta
argument_list|()
operator|.
name|get
argument_list|(
name|Meta
operator|.
name|class
argument_list|)
operator|.
name|fromResource
argument_list|(
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getTag
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Meta
name|inMeta
init|=
operator|new
name|Meta
argument_list|()
decl_stmt|;
name|inMeta
operator|.
name|addTag
argument_list|()
operator|.
name|setSystem
argument_list|(
literal|"urn:system1"
argument_list|)
operator|.
name|setCode
argument_list|(
literal|"urn:code1"
argument_list|)
expr_stmt|;
comment|// add meta
name|meta
operator|=
name|fhirClient
operator|.
name|meta
argument_list|()
operator|.
name|add
argument_list|()
operator|.
name|onResource
argument_list|(
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
operator|.
name|meta
argument_list|(
name|inMeta
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|meta
operator|.
name|getTag
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//delete meta
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IBaseMetaType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.meta"
argument_list|,
name|meta
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IIdType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.id"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
expr_stmt|;
name|IBaseMetaType
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DELETE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"delete result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getTag
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFromResource ()
specifier|public
name|void
name|testGetFromResource
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.metaType"
argument_list|,
name|Meta
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IIdType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.id"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
expr_stmt|;
name|IBaseMetaType
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GET_FROM_RESOURCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFromResource: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"getFromResource result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getTag
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFromServer ()
specifier|public
name|void
name|testGetFromServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using Class message body for single parameter "metaType"
name|IBaseMetaType
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://GET_FROM_SERVER"
argument_list|,
name|Meta
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFromServer result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFromServer: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFromType ()
specifier|public
name|void
name|testGetFromType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.metaType"
argument_list|,
name|Meta
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.theResourceName"
argument_list|,
literal|"Patient"
argument_list|)
expr_stmt|;
name|IBaseMetaType
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GET_FROM_TYPE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFromType: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"getFromType result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFromTypePreferResponseType ()
specifier|public
name|void
name|testGetFromTypePreferResponseType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.metaType"
argument_list|,
name|Meta
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.theResourceName"
argument_list|,
literal|"Patient"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ExtraParameters
operator|.
name|PREFER_RESPONSE_TYPE
operator|.
name|getHeaderName
argument_list|()
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
name|Meta
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GET_FROM_TYPE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFromType: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"getFromType result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for add
name|from
argument_list|(
literal|"direct://ADD"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/add"
argument_list|)
expr_stmt|;
comment|// test route for delete
name|from
argument_list|(
literal|"direct://DELETE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/delete"
argument_list|)
expr_stmt|;
comment|// test route for getFromResource
name|from
argument_list|(
literal|"direct://GET_FROM_RESOURCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFromResource"
argument_list|)
expr_stmt|;
comment|// test route for getFromServer
name|from
argument_list|(
literal|"direct://GET_FROM_SERVER"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFromServer?inBody=metaType"
argument_list|)
expr_stmt|;
comment|// test route for getFromType
name|from
argument_list|(
literal|"direct://GET_FROM_TYPE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFromType"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

