begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
operator|.
name|ExtraParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirReadApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|IdType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|dstu3
operator|.
name|model
operator|.
name|Patient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.fhir.api.FhirRead} APIs.  * The class source won't be generated again if the generator MOJO finds it under src/test/java.  */
end_comment

begin_class
DECL|class|FhirReadIT
specifier|public
class|class
name|FhirReadIT
extends|extends
name|AbstractFhirTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FhirReadIT
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|FhirApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|FhirReadApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testResourceById ()
specifier|public
name|void
name|testResourceById
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resource"
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IIdType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.id"
argument_list|,
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_ID"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByLongId ()
specifier|public
name|void
name|testResourceByLongId
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resource"
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.longId"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|getIdPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_LONG_ID"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByStringId ()
specifier|public
name|void
name|testResourceByStringId
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resource"
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.stringId"
argument_list|,
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|getIdPart
argument_list|()
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByIdAndStringResource ()
specifier|public
name|void
name|testResourceByIdAndStringResource
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resourceClass"
argument_list|,
literal|"Patient"
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IIdType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.id"
argument_list|,
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_ID_AND_STRING_RESOURCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByLongIdAndStringResource ()
specifier|public
name|void
name|testResourceByLongIdAndStringResource
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resource"
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.longId"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|getIdPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_LONG_ID_AND_STRING_RESOURCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByStringIdAndStringResource ()
specifier|public
name|void
name|testResourceByStringIdAndStringResource
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resource"
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.stringId"
argument_list|,
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|getIdPart
argument_list|()
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID_AND_STRING_RESOURCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByStringIdAndVersion ()
specifier|public
name|void
name|testResourceByStringIdAndVersion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resource"
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.stringId"
argument_list|,
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|getIdPart
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.version"
argument_list|,
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|getVersionIdPart
argument_list|()
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID_AND_VERSION"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByStringIdAndVersionWithResourceClass ()
specifier|public
name|void
name|testResourceByStringIdAndVersionWithResourceClass
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resourceClass"
argument_list|,
literal|"Patient"
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.stringId"
argument_list|,
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|getIdPart
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.version"
argument_list|,
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|getVersionIdPart
argument_list|()
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID_AND_VERSION_AND_STRING_RESOURCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByiUrl ()
specifier|public
name|void
name|testResourceByiUrl
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resource"
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IIdType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.iUrl"
argument_list|,
operator|new
name|IdType
argument_list|(
name|this
operator|.
name|patient
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_IURL"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByUrl ()
specifier|public
name|void
name|testResourceByUrl
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is Class
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resource"
argument_list|,
name|Patient
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.url"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_URL"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByStringUrlAndStringResource ()
specifier|public
name|void
name|testResourceByStringUrlAndStringResource
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resourceClass"
argument_list|,
literal|"Patient"
argument_list|)
expr_stmt|;
comment|// parameter type is org.hl7.fhir.instance.model.api.IIdType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.iUrl"
argument_list|,
operator|new
name|IdType
argument_list|(
name|this
operator|.
name|patient
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_STRING_URL_AND_STRING_RESOURCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByUrlAndStringResource ()
specifier|public
name|void
name|testResourceByUrlAndStringResource
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resourceClass"
argument_list|,
literal|"Patient"
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.url"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_URL_AND_STRING_RESOURCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceByUrlAndStringResourcePrettyPrint ()
specifier|public
name|void
name|testResourceByUrlAndStringResourcePrettyPrint
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.resourceClass"
argument_list|,
literal|"Patient"
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.url"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ExtraParameters
operator|.
name|PRETTY_PRINT
operator|.
name|getHeaderName
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Patient
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_URL_AND_STRING_RESOURCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertValidResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|assertValidResponse (Patient result)
specifier|private
name|void
name|assertValidResponse
parameter_list|(
name|Patient
name|result
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"response: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"resourceByUrl result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Freeman"
argument_list|,
name|result
operator|.
name|getName
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_ID"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById"
argument_list|)
expr_stmt|;
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_LONG_ID"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById"
argument_list|)
expr_stmt|;
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById"
argument_list|)
expr_stmt|;
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_ID_AND_STRING_RESOURCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById"
argument_list|)
expr_stmt|;
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_LONG_ID_AND_STRING_RESOURCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById"
argument_list|)
expr_stmt|;
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID_AND_STRING_RESOURCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById"
argument_list|)
expr_stmt|;
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID_AND_VERSION"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById"
argument_list|)
expr_stmt|;
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID_AND_VERSION_AND_STRING_RESOURCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById"
argument_list|)
expr_stmt|;
comment|// test route for resourceByUrl
name|from
argument_list|(
literal|"direct://RESOURCE_BY_IURL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceByUrl"
argument_list|)
expr_stmt|;
comment|// test route for resourceByUrl
name|from
argument_list|(
literal|"direct://RESOURCE_BY_URL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceByUrl"
argument_list|)
expr_stmt|;
comment|// test route for resourceByUrl
name|from
argument_list|(
literal|"direct://RESOURCE_BY_STRING_URL_AND_STRING_RESOURCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceByUrl"
argument_list|)
expr_stmt|;
comment|// test route for resourceByUrl
name|from
argument_list|(
literal|"direct://RESOURCE_BY_URL_AND_STRING_RESOURCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceByUrl"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

