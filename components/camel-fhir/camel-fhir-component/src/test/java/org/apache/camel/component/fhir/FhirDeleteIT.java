begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|api
operator|.
name|CacheControlDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
operator|.
name|ExtraParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirDeleteApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseOperationOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.fhir.api.FhirDelete} APIs.  * The class source won't be generated again if the generator MOJO finds it under src/test/java.  */
end_comment

begin_class
DECL|class|FhirDeleteIT
specifier|public
class|class
name|FhirDeleteIT
extends|extends
name|AbstractFhirTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FhirDeleteIT
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|FhirApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|FhirDeleteApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testDeleteResource ()
specifier|public
name|void
name|testDeleteResource
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
comment|// using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter "resource"
name|IBaseOperationOutcome
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://RESOURCE"
argument_list|,
name|this
operator|.
name|patient
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"resource: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"resource result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteResourceById ()
specifier|public
name|void
name|testDeleteResourceById
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
comment|// using org.hl7.fhir.instance.model.api.IIdType message body for single parameter "id"
name|IBaseOperationOutcome
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://RESOURCE_BY_ID"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"resourceById: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"resourceById result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteResourceByStringId ()
specifier|public
name|void
name|testDeleteResourceByStringId
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.type"
argument_list|,
literal|"Patient"
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelFhir.stringId"
argument_list|,
name|this
operator|.
name|patient
operator|.
name|getIdElement
argument_list|()
operator|.
name|getIdPart
argument_list|()
argument_list|)
expr_stmt|;
name|IBaseOperationOutcome
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"resourceById: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"resourceById result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteResourceConditionalByUrl ()
specifier|public
name|void
name|testDeleteResourceConditionalByUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
name|IBaseOperationOutcome
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://RESOURCE_CONDITIONAL_BY_URL"
argument_list|,
literal|"Patient?given=Vincent&family=Freeman"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"resourceConditionalByUrl: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"resourceConditionalByUrl result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteResourceConditionalByUrlCacheControlDirective ()
specifier|public
name|void
name|testDeleteResourceConditionalByUrlCacheControlDirective
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ExtraParameters
operator|.
name|CACHE_CONTROL_DIRECTIVE
operator|.
name|getHeaderName
argument_list|()
argument_list|,
operator|new
name|CacheControlDirective
argument_list|()
operator|.
name|setNoCache
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|IBaseOperationOutcome
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RESOURCE_CONDITIONAL_BY_URL"
argument_list|,
literal|"Patient?given=Vincent&family=Freeman"
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"resourceConditionalByUrl: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"resourceConditionalByUrl result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|patientExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for resource
name|from
argument_list|(
literal|"direct://RESOURCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resource?inBody=resource"
argument_list|)
expr_stmt|;
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_ID"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById?inBody=id"
argument_list|)
expr_stmt|;
comment|// test route for resourceById
name|from
argument_list|(
literal|"direct://RESOURCE_BY_STRING_ID"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceById"
argument_list|)
expr_stmt|;
comment|// test route for resourceConditionalByUrl
name|from
argument_list|(
literal|"direct://RESOURCE_CONDITIONAL_BY_URL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"fhir://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/resourceConditionalByUrl?inBody=url"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

