begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|context
operator|.
name|FhirContext
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|context
operator|.
name|FhirVersionEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
import|;
end_import

begin_class
DECL|class|FhirJsonDataFormat
specifier|public
class|class
name|FhirJsonDataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
block|{
DECL|field|fhirContext
specifier|private
name|FhirContext
name|fhirContext
decl_stmt|;
DECL|field|fhirVersion
specifier|private
name|String
name|fhirVersion
decl_stmt|;
DECL|field|contentTypeHeader
specifier|private
name|boolean
name|contentTypeHeader
init|=
literal|true
decl_stmt|;
DECL|method|getFhirContext ()
specifier|public
name|FhirContext
name|getFhirContext
parameter_list|()
block|{
return|return
name|fhirContext
return|;
block|}
DECL|method|setFhirContext (FhirContext fhirContext)
specifier|public
name|void
name|setFhirContext
parameter_list|(
name|FhirContext
name|fhirContext
parameter_list|)
block|{
name|this
operator|.
name|fhirContext
operator|=
name|fhirContext
expr_stmt|;
block|}
DECL|method|getFhirVersion ()
specifier|public
name|String
name|getFhirVersion
parameter_list|()
block|{
return|return
name|fhirVersion
return|;
block|}
DECL|method|setFhirVersion (String fhirVersion)
specifier|public
name|void
name|setFhirVersion
parameter_list|(
name|String
name|fhirVersion
parameter_list|)
block|{
name|this
operator|.
name|fhirVersion
operator|=
name|fhirVersion
expr_stmt|;
block|}
DECL|method|isContentTypeHeader ()
specifier|public
name|boolean
name|isContentTypeHeader
parameter_list|()
block|{
return|return
name|contentTypeHeader
return|;
block|}
DECL|method|setContentTypeHeader (boolean contentTypeHeader)
specifier|public
name|void
name|setContentTypeHeader
parameter_list|(
name|boolean
name|contentTypeHeader
parameter_list|)
block|{
name|this
operator|.
name|contentTypeHeader
operator|=
name|contentTypeHeader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|marshal (Exchange exchange, Object o, OutputStream outputStream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|o
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|IBaseResource
name|iBaseResource
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|IBaseResource
operator|)
condition|)
block|{
name|iBaseResource
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|IBaseResource
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iBaseResource
operator|=
operator|(
name|IBaseResource
operator|)
name|o
expr_stmt|;
block|}
name|fhirContext
operator|.
name|newJsonParser
argument_list|()
operator|.
name|encodeResourceToWriter
argument_list|(
name|iBaseResource
argument_list|,
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isContentTypeHeader
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|unmarshal (Exchange exchange, InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|fhirContext
operator|.
name|newJsonParser
argument_list|()
operator|.
name|parseResource
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"fhirJson"
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fhirContext
operator|==
literal|null
operator|&&
name|fhirVersion
operator|!=
literal|null
condition|)
block|{
name|FhirVersionEnum
name|version
init|=
name|FhirVersionEnum
operator|.
name|valueOf
argument_list|(
name|fhirVersion
argument_list|)
decl_stmt|;
name|fhirContext
operator|=
operator|new
name|FhirContext
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fhirContext
operator|==
literal|null
condition|)
block|{
name|fhirContext
operator|=
name|FhirContext
operator|.
name|forDstu3
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

