begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|context
operator|.
name|FhirContext
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|context
operator|.
name|FhirVersionEnum
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|context
operator|.
name|ParserOptions
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|parser
operator|.
name|IParser
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|parser
operator|.
name|IParserErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IIdType
import|;
end_import

begin_class
DECL|class|FhirDataFormat
specifier|public
specifier|abstract
class|class
name|FhirDataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
block|{
DECL|field|fhirContext
specifier|private
name|FhirContext
name|fhirContext
decl_stmt|;
DECL|field|fhirVersion
specifier|private
name|String
name|fhirVersion
decl_stmt|;
DECL|field|contentTypeHeader
specifier|private
name|boolean
name|contentTypeHeader
init|=
literal|true
decl_stmt|;
DECL|field|parserErrorHandler
specifier|private
name|IParserErrorHandler
name|parserErrorHandler
decl_stmt|;
DECL|field|parserOptions
specifier|private
name|ParserOptions
name|parserOptions
decl_stmt|;
DECL|field|serverBaseUrl
specifier|private
name|String
name|serverBaseUrl
decl_stmt|;
DECL|field|prettyPrint
specifier|private
name|boolean
name|prettyPrint
decl_stmt|;
DECL|field|preferTypes
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
argument_list|>
name|preferTypes
decl_stmt|;
DECL|field|omitResourceId
specifier|private
name|boolean
name|omitResourceId
decl_stmt|;
DECL|field|forceResourceId
specifier|private
name|IIdType
name|forceResourceId
decl_stmt|;
DECL|field|encodeElementsAppliesToResourceTypes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|encodeElementsAppliesToResourceTypes
decl_stmt|;
DECL|field|encodeElementsAppliesToChildResourcesOnly
specifier|private
name|boolean
name|encodeElementsAppliesToChildResourcesOnly
decl_stmt|;
DECL|field|encodeElements
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|encodeElements
decl_stmt|;
DECL|field|dontEncodeElements
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|dontEncodeElements
decl_stmt|;
DECL|field|stripVersionsFromReferences
specifier|private
name|Boolean
name|stripVersionsFromReferences
decl_stmt|;
DECL|field|overrideResourceIdWithBundleEntryFullUrl
specifier|private
name|Boolean
name|overrideResourceIdWithBundleEntryFullUrl
decl_stmt|;
DECL|field|summaryMode
specifier|private
name|boolean
name|summaryMode
decl_stmt|;
DECL|field|suppressNarratives
specifier|private
name|boolean
name|suppressNarratives
decl_stmt|;
DECL|field|dontStripVersionsFromReferencesAtPaths
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|dontStripVersionsFromReferencesAtPaths
decl_stmt|;
DECL|method|getFhirContext ()
specifier|public
name|FhirContext
name|getFhirContext
parameter_list|()
block|{
return|return
name|fhirContext
return|;
block|}
DECL|method|setFhirContext (FhirContext fhirContext)
specifier|public
name|void
name|setFhirContext
parameter_list|(
name|FhirContext
name|fhirContext
parameter_list|)
block|{
name|this
operator|.
name|fhirContext
operator|=
name|fhirContext
expr_stmt|;
block|}
DECL|method|getFhirVersion ()
specifier|public
name|String
name|getFhirVersion
parameter_list|()
block|{
return|return
name|fhirVersion
return|;
block|}
DECL|method|setFhirVersion (String fhirVersion)
specifier|public
name|void
name|setFhirVersion
parameter_list|(
name|String
name|fhirVersion
parameter_list|)
block|{
name|this
operator|.
name|fhirVersion
operator|=
name|fhirVersion
expr_stmt|;
block|}
DECL|method|isContentTypeHeader ()
specifier|public
name|boolean
name|isContentTypeHeader
parameter_list|()
block|{
return|return
name|contentTypeHeader
return|;
block|}
DECL|method|setContentTypeHeader (boolean contentTypeHeader)
specifier|public
name|void
name|setContentTypeHeader
parameter_list|(
name|boolean
name|contentTypeHeader
parameter_list|)
block|{
name|this
operator|.
name|contentTypeHeader
operator|=
name|contentTypeHeader
expr_stmt|;
block|}
DECL|method|getParserErrorHandler ()
specifier|public
name|IParserErrorHandler
name|getParserErrorHandler
parameter_list|()
block|{
return|return
name|parserErrorHandler
return|;
block|}
DECL|method|setParserErrorHandler (IParserErrorHandler parserErrorHandler)
specifier|public
name|void
name|setParserErrorHandler
parameter_list|(
name|IParserErrorHandler
name|parserErrorHandler
parameter_list|)
block|{
name|this
operator|.
name|parserErrorHandler
operator|=
name|parserErrorHandler
expr_stmt|;
block|}
DECL|method|getParserOptions ()
specifier|public
name|ParserOptions
name|getParserOptions
parameter_list|()
block|{
return|return
name|parserOptions
return|;
block|}
DECL|method|setParserOptions (ParserOptions parserOptions)
specifier|public
name|void
name|setParserOptions
parameter_list|(
name|ParserOptions
name|parserOptions
parameter_list|)
block|{
name|this
operator|.
name|parserOptions
operator|=
name|parserOptions
expr_stmt|;
block|}
DECL|method|getServerBaseUrl ()
specifier|public
name|String
name|getServerBaseUrl
parameter_list|()
block|{
return|return
name|serverBaseUrl
return|;
block|}
DECL|method|setServerBaseUrl (String serverBaseUrl)
specifier|public
name|void
name|setServerBaseUrl
parameter_list|(
name|String
name|serverBaseUrl
parameter_list|)
block|{
name|this
operator|.
name|serverBaseUrl
operator|=
name|serverBaseUrl
expr_stmt|;
block|}
DECL|method|isPrettyPrint ()
specifier|public
name|boolean
name|isPrettyPrint
parameter_list|()
block|{
return|return
name|prettyPrint
return|;
block|}
DECL|method|setPrettyPrint (boolean prettyPrint)
specifier|public
name|void
name|setPrettyPrint
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|this
operator|.
name|prettyPrint
operator|=
name|prettyPrint
expr_stmt|;
block|}
DECL|method|getPreferTypes ()
specifier|public
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
argument_list|>
name|getPreferTypes
parameter_list|()
block|{
return|return
name|preferTypes
return|;
block|}
DECL|method|setPreferTypes (List<Class<? extends IBaseResource>> preferTypes)
specifier|public
name|void
name|setPreferTypes
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
argument_list|>
name|preferTypes
parameter_list|)
block|{
name|this
operator|.
name|preferTypes
operator|=
name|preferTypes
expr_stmt|;
block|}
DECL|method|isOmitResourceId ()
specifier|public
name|boolean
name|isOmitResourceId
parameter_list|()
block|{
return|return
name|omitResourceId
return|;
block|}
DECL|method|setOmitResourceId (boolean omitResourceId)
specifier|public
name|void
name|setOmitResourceId
parameter_list|(
name|boolean
name|omitResourceId
parameter_list|)
block|{
name|this
operator|.
name|omitResourceId
operator|=
name|omitResourceId
expr_stmt|;
block|}
DECL|method|getForceResourceId ()
specifier|public
name|IIdType
name|getForceResourceId
parameter_list|()
block|{
return|return
name|forceResourceId
return|;
block|}
DECL|method|setForceResourceId (IIdType forceResourceId)
specifier|public
name|void
name|setForceResourceId
parameter_list|(
name|IIdType
name|forceResourceId
parameter_list|)
block|{
name|this
operator|.
name|forceResourceId
operator|=
name|forceResourceId
expr_stmt|;
block|}
DECL|method|getEncodeElementsAppliesToResourceTypes ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEncodeElementsAppliesToResourceTypes
parameter_list|()
block|{
return|return
name|encodeElementsAppliesToResourceTypes
return|;
block|}
DECL|method|setEncodeElementsAppliesToResourceTypes (Set<String> encodeElementsAppliesToResourceTypes)
specifier|public
name|void
name|setEncodeElementsAppliesToResourceTypes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|encodeElementsAppliesToResourceTypes
parameter_list|)
block|{
name|this
operator|.
name|encodeElementsAppliesToResourceTypes
operator|=
name|encodeElementsAppliesToResourceTypes
expr_stmt|;
block|}
DECL|method|isEncodeElementsAppliesToChildResourcesOnly ()
specifier|public
name|boolean
name|isEncodeElementsAppliesToChildResourcesOnly
parameter_list|()
block|{
return|return
name|encodeElementsAppliesToChildResourcesOnly
return|;
block|}
DECL|method|setEncodeElementsAppliesToChildResourcesOnly (boolean encodeElementsAppliesToChildResourcesOnly)
specifier|public
name|void
name|setEncodeElementsAppliesToChildResourcesOnly
parameter_list|(
name|boolean
name|encodeElementsAppliesToChildResourcesOnly
parameter_list|)
block|{
name|this
operator|.
name|encodeElementsAppliesToChildResourcesOnly
operator|=
name|encodeElementsAppliesToChildResourcesOnly
expr_stmt|;
block|}
DECL|method|getEncodeElements ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEncodeElements
parameter_list|()
block|{
return|return
name|encodeElements
return|;
block|}
DECL|method|setEncodeElements (Set<String> encodeElements)
specifier|public
name|void
name|setEncodeElements
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|encodeElements
parameter_list|)
block|{
name|this
operator|.
name|encodeElements
operator|=
name|encodeElements
expr_stmt|;
block|}
DECL|method|getDontEncodeElements ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getDontEncodeElements
parameter_list|()
block|{
return|return
name|dontEncodeElements
return|;
block|}
DECL|method|setDontEncodeElements (Set<String> dontEncodeElements)
specifier|public
name|void
name|setDontEncodeElements
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|dontEncodeElements
parameter_list|)
block|{
name|this
operator|.
name|dontEncodeElements
operator|=
name|dontEncodeElements
expr_stmt|;
block|}
DECL|method|getStripVersionsFromReferences ()
specifier|public
name|Boolean
name|getStripVersionsFromReferences
parameter_list|()
block|{
return|return
name|stripVersionsFromReferences
return|;
block|}
DECL|method|setStripVersionsFromReferences (Boolean stripVersionsFromReferences)
specifier|public
name|void
name|setStripVersionsFromReferences
parameter_list|(
name|Boolean
name|stripVersionsFromReferences
parameter_list|)
block|{
name|this
operator|.
name|stripVersionsFromReferences
operator|=
name|stripVersionsFromReferences
expr_stmt|;
block|}
DECL|method|getOverrideResourceIdWithBundleEntryFullUrl ()
specifier|public
name|Boolean
name|getOverrideResourceIdWithBundleEntryFullUrl
parameter_list|()
block|{
return|return
name|overrideResourceIdWithBundleEntryFullUrl
return|;
block|}
DECL|method|setOverrideResourceIdWithBundleEntryFullUrl (Boolean overrideResourceIdWithBundleEntryFullUrl)
specifier|public
name|void
name|setOverrideResourceIdWithBundleEntryFullUrl
parameter_list|(
name|Boolean
name|overrideResourceIdWithBundleEntryFullUrl
parameter_list|)
block|{
name|this
operator|.
name|overrideResourceIdWithBundleEntryFullUrl
operator|=
name|overrideResourceIdWithBundleEntryFullUrl
expr_stmt|;
block|}
DECL|method|isSummaryMode ()
specifier|public
name|boolean
name|isSummaryMode
parameter_list|()
block|{
return|return
name|summaryMode
return|;
block|}
DECL|method|setSummaryMode (boolean summaryMode)
specifier|public
name|void
name|setSummaryMode
parameter_list|(
name|boolean
name|summaryMode
parameter_list|)
block|{
name|this
operator|.
name|summaryMode
operator|=
name|summaryMode
expr_stmt|;
block|}
DECL|method|isSuppressNarratives ()
specifier|public
name|boolean
name|isSuppressNarratives
parameter_list|()
block|{
return|return
name|suppressNarratives
return|;
block|}
DECL|method|setSuppressNarratives (boolean suppressNarratives)
specifier|public
name|void
name|setSuppressNarratives
parameter_list|(
name|boolean
name|suppressNarratives
parameter_list|)
block|{
name|this
operator|.
name|suppressNarratives
operator|=
name|suppressNarratives
expr_stmt|;
block|}
DECL|method|getDontStripVersionsFromReferencesAtPaths ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDontStripVersionsFromReferencesAtPaths
parameter_list|()
block|{
return|return
name|dontStripVersionsFromReferencesAtPaths
return|;
block|}
DECL|method|setDontStripVersionsFromReferencesAtPaths (List<String> dontStripVersionsFromReferencesAtPaths)
specifier|public
name|void
name|setDontStripVersionsFromReferencesAtPaths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dontStripVersionsFromReferencesAtPaths
parameter_list|)
block|{
name|this
operator|.
name|dontStripVersionsFromReferencesAtPaths
operator|=
name|dontStripVersionsFromReferencesAtPaths
expr_stmt|;
block|}
DECL|method|configureParser (IParser parser)
specifier|protected
name|void
name|configureParser
parameter_list|(
name|IParser
name|parser
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getServerBaseUrl
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setServerBaseUrl
argument_list|(
name|getServerBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getDontEncodeElements
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setDontEncodeElements
argument_list|(
name|getDontEncodeElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getDontStripVersionsFromReferencesAtPaths
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setDontStripVersionsFromReferencesAtPaths
argument_list|(
name|getDontStripVersionsFromReferencesAtPaths
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getEncodeElements
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setEncodeElements
argument_list|(
name|getEncodeElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getEncodeElementsAppliesToResourceTypes
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setEncodeElementsAppliesToResourceTypes
argument_list|(
name|getEncodeElementsAppliesToResourceTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getForceResourceId
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setEncodeForceResourceId
argument_list|(
name|getForceResourceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getPreferTypes
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setPreferTypes
argument_list|(
name|getPreferTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getParserErrorHandler
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setParserErrorHandler
argument_list|(
name|getParserErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getOverrideResourceIdWithBundleEntryFullUrl
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setOverrideResourceIdWithBundleEntryFullUrl
argument_list|(
name|getOverrideResourceIdWithBundleEntryFullUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getStripVersionsFromReferences
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|setStripVersionsFromReferences
argument_list|(
name|getStripVersionsFromReferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parser
operator|.
name|setSummaryMode
argument_list|(
name|isSummaryMode
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setOmitResourceId
argument_list|(
name|isOmitResourceId
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setPrettyPrint
argument_list|(
name|isPrettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setEncodeElementsAppliesToChildResourcesOnly
argument_list|(
name|isEncodeElementsAppliesToChildResourcesOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fhirContext
operator|==
literal|null
operator|&&
name|fhirVersion
operator|!=
literal|null
condition|)
block|{
name|FhirVersionEnum
name|version
init|=
name|FhirVersionEnum
operator|.
name|valueOf
argument_list|(
name|fhirVersion
argument_list|)
decl_stmt|;
name|fhirContext
operator|=
operator|new
name|FhirContext
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fhirContext
operator|==
literal|null
condition|)
block|{
name|fhirContext
operator|=
name|FhirContext
operator|.
name|forDstu3
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|parserOptions
argument_list|)
condition|)
block|{
name|fhirContext
operator|.
name|setParserOptions
argument_list|(
name|parserOptions
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

