begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
package|;
end_package

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|context
operator|.
name|FhirContext
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|context
operator|.
name|FhirVersionEnum
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|api
operator|.
name|EncodingEnum
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|api
operator|.
name|SummaryEnum
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IGenericClient
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IRestfulClientFactory
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|ServerValidationModeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Component configuration for FHIR component.  */
end_comment

begin_class
annotation|@
name|UriParams
DECL|class|FhirConfiguration
specifier|public
class|class
name|FhirConfiguration
block|{
annotation|@
name|UriPath
argument_list|(
name|enums
operator|=
literal|"capabilities,create,delete,history,load-page,meta,patch,read,search,transaction,update,validate"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|apiName
specifier|private
name|FhirApiName
name|apiName
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|methodName
specifier|private
name|String
name|methodName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"The FHIR server base URL"
argument_list|)
DECL|field|serverUrl
specifier|private
name|String
name|serverUrl
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"The FHIR Version to use"
argument_list|,
name|defaultValue
operator|=
literal|"DSTU3"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|fhirVersion
specifier|private
name|FhirVersionEnum
name|fhirVersion
init|=
name|FhirVersionEnum
operator|.
name|DSTU3
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Pretty print all request"
argument_list|)
DECL|field|prettyPrint
specifier|private
name|boolean
name|prettyPrint
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Encoding to use for all request"
argument_list|,
name|enums
operator|=
literal|"JSON, XML"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|encoding
specifier|private
name|EncodingEnum
name|encoding
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Username to use for basic authentication"
argument_list|,
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Username to use for basic authentication"
argument_list|,
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"OAuth access token"
argument_list|,
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|accessToken
specifier|private
name|String
name|accessToken
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Will log every requests and responses"
argument_list|)
DECL|field|log
specifier|private
name|boolean
name|log
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Compresses outgoing (POST/PUT) contents to the GZIP format"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|compress
specifier|private
name|boolean
name|compress
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Request that the server modify the response using the<code>_summary</code> param"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|summary
specifier|private
name|SummaryEnum
name|summary
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"HTTP session cookie to add to every request"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|sessionCookie
specifier|private
name|String
name|sessionCookie
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"FhirContext is an expensive object to create. To avoid creating multiple instances,"
operator|+
literal|" it can be set directly."
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|fhirContext
specifier|private
name|FhirContext
name|fhirContext
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Force conformance check"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|forceConformanceCheck
specifier|private
name|boolean
name|forceConformanceCheck
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"When should Camel validate the FHIR Server's conformance statement"
argument_list|,
name|defaultValue
operator|=
literal|"ONCE"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|validationMode
specifier|private
name|ServerValidationModeEnum
name|validationMode
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"When this option is set, model classes will not be scanned for children until the"
operator|+
literal|" child list for the given type is actually accessed."
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|deferModelScanning
specifier|private
name|boolean
name|deferModelScanning
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"How long to try and establish the initial TCP connection (in ms)"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"10000"
argument_list|)
DECL|field|connectionTimeout
specifier|private
name|Integer
name|connectionTimeout
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"How long to block for individual read/write operations (in ms)"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"10000"
argument_list|)
DECL|field|socketTimeout
specifier|private
name|Integer
name|socketTimeout
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|,
name|description
operator|=
literal|"The proxy host"
argument_list|)
DECL|field|proxyHost
specifier|private
name|String
name|proxyHost
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|,
name|description
operator|=
literal|"The proxy port"
argument_list|)
DECL|field|proxyPort
specifier|private
name|Integer
name|proxyPort
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|,
name|description
operator|=
literal|"The proxy username"
argument_list|)
DECL|field|proxyUser
specifier|private
name|String
name|proxyUser
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|,
name|description
operator|=
literal|"The proxy password"
argument_list|)
DECL|field|proxyPassword
specifier|private
name|String
name|proxyPassword
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use the custom client"
argument_list|)
DECL|field|client
specifier|private
name|IGenericClient
name|client
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use the custom client factory"
argument_list|)
DECL|field|clientFactory
specifier|private
name|IRestfulClientFactory
name|clientFactory
decl_stmt|;
DECL|method|getServerUrl ()
specifier|public
name|String
name|getServerUrl
parameter_list|()
block|{
return|return
name|serverUrl
return|;
block|}
DECL|method|setServerUrl (String serverUrl)
specifier|public
name|void
name|setServerUrl
parameter_list|(
name|String
name|serverUrl
parameter_list|)
block|{
name|this
operator|.
name|serverUrl
operator|=
name|serverUrl
expr_stmt|;
block|}
DECL|method|getFhirVersion ()
specifier|public
name|FhirVersionEnum
name|getFhirVersion
parameter_list|()
block|{
return|return
name|fhirVersion
return|;
block|}
DECL|method|setFhirVersion (String fhirVersion)
specifier|public
name|void
name|setFhirVersion
parameter_list|(
name|String
name|fhirVersion
parameter_list|)
block|{
name|this
operator|.
name|fhirVersion
operator|=
name|FhirVersionEnum
operator|.
name|valueOf
argument_list|(
name|fhirVersion
argument_list|)
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|EncodingEnum
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|EncodingEnum
operator|.
name|valueOf
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
DECL|method|isPrettyPrint ()
specifier|public
name|boolean
name|isPrettyPrint
parameter_list|()
block|{
return|return
name|prettyPrint
return|;
block|}
DECL|method|setPrettyPrint (boolean prettyPrint)
specifier|public
name|void
name|setPrettyPrint
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|this
operator|.
name|prettyPrint
operator|=
name|prettyPrint
expr_stmt|;
block|}
DECL|method|getSummary ()
specifier|public
name|SummaryEnum
name|getSummary
parameter_list|()
block|{
return|return
name|summary
return|;
block|}
DECL|method|setSummary (String summary)
specifier|public
name|void
name|setSummary
parameter_list|(
name|String
name|summary
parameter_list|)
block|{
name|this
operator|.
name|summary
operator|=
name|SummaryEnum
operator|.
name|valueOf
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
DECL|method|getApiName ()
specifier|public
name|FhirApiName
name|getApiName
parameter_list|()
block|{
return|return
name|apiName
return|;
block|}
comment|/**      * What kind of operation to perform      */
DECL|method|setApiName (FhirApiName apiName)
specifier|public
name|void
name|setApiName
parameter_list|(
name|FhirApiName
name|apiName
parameter_list|)
block|{
name|this
operator|.
name|apiName
operator|=
name|apiName
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
comment|/**      * What sub operation to use for the selected operation      */
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
DECL|method|getFhirContext ()
specifier|public
name|FhirContext
name|getFhirContext
parameter_list|()
block|{
return|return
name|fhirContext
return|;
block|}
DECL|method|setFhirContext (FhirContext fhirContext)
specifier|public
name|void
name|setFhirContext
parameter_list|(
name|FhirContext
name|fhirContext
parameter_list|)
block|{
name|this
operator|.
name|fhirContext
operator|=
name|fhirContext
expr_stmt|;
block|}
DECL|method|isForceConformanceCheck ()
specifier|public
name|boolean
name|isForceConformanceCheck
parameter_list|()
block|{
return|return
name|forceConformanceCheck
return|;
block|}
DECL|method|setForceConformanceCheck (boolean forceConformanceCheck)
specifier|public
name|void
name|setForceConformanceCheck
parameter_list|(
name|boolean
name|forceConformanceCheck
parameter_list|)
block|{
name|this
operator|.
name|forceConformanceCheck
operator|=
name|forceConformanceCheck
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getAccessToken ()
specifier|public
name|String
name|getAccessToken
parameter_list|()
block|{
return|return
name|accessToken
return|;
block|}
DECL|method|setAccessToken (String accessToken)
specifier|public
name|void
name|setAccessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|this
operator|.
name|accessToken
operator|=
name|accessToken
expr_stmt|;
block|}
DECL|method|isLog ()
specifier|public
name|boolean
name|isLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
DECL|method|setLog (boolean log)
specifier|public
name|void
name|setLog
parameter_list|(
name|boolean
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
DECL|method|isCompress ()
specifier|public
name|boolean
name|isCompress
parameter_list|()
block|{
return|return
name|compress
return|;
block|}
DECL|method|setCompress (boolean compress)
specifier|public
name|void
name|setCompress
parameter_list|(
name|boolean
name|compress
parameter_list|)
block|{
name|this
operator|.
name|compress
operator|=
name|compress
expr_stmt|;
block|}
DECL|method|getSessionCookie ()
specifier|public
name|String
name|getSessionCookie
parameter_list|()
block|{
return|return
name|sessionCookie
return|;
block|}
DECL|method|setSessionCookie (String sessionCookie)
specifier|public
name|void
name|setSessionCookie
parameter_list|(
name|String
name|sessionCookie
parameter_list|)
block|{
name|this
operator|.
name|sessionCookie
operator|=
name|sessionCookie
expr_stmt|;
block|}
DECL|method|getValidationMode ()
specifier|public
name|ServerValidationModeEnum
name|getValidationMode
parameter_list|()
block|{
return|return
name|validationMode
return|;
block|}
DECL|method|setValidationMode (String validationMode)
specifier|public
name|void
name|setValidationMode
parameter_list|(
name|String
name|validationMode
parameter_list|)
block|{
name|this
operator|.
name|validationMode
operator|=
name|ServerValidationModeEnum
operator|.
name|valueOf
argument_list|(
name|validationMode
argument_list|)
expr_stmt|;
block|}
DECL|method|isDeferModelScanning ()
specifier|public
name|boolean
name|isDeferModelScanning
parameter_list|()
block|{
return|return
name|deferModelScanning
return|;
block|}
DECL|method|setDeferModelScanning (boolean deferModelScanning)
specifier|public
name|void
name|setDeferModelScanning
parameter_list|(
name|boolean
name|deferModelScanning
parameter_list|)
block|{
name|this
operator|.
name|deferModelScanning
operator|=
name|deferModelScanning
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|Integer
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
DECL|method|setConnectionTimeout (Integer connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|Integer
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
DECL|method|getSocketTimeout ()
specifier|public
name|Integer
name|getSocketTimeout
parameter_list|()
block|{
return|return
name|socketTimeout
return|;
block|}
DECL|method|setSocketTimeout (Integer socketTimeout)
specifier|public
name|void
name|setSocketTimeout
parameter_list|(
name|Integer
name|socketTimeout
parameter_list|)
block|{
name|this
operator|.
name|socketTimeout
operator|=
name|socketTimeout
expr_stmt|;
block|}
DECL|method|getProxyHost ()
specifier|public
name|String
name|getProxyHost
parameter_list|()
block|{
return|return
name|proxyHost
return|;
block|}
DECL|method|setProxyHost (String proxyHost)
specifier|public
name|void
name|setProxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|this
operator|.
name|proxyHost
operator|=
name|proxyHost
expr_stmt|;
block|}
DECL|method|getProxyPassword ()
specifier|public
name|String
name|getProxyPassword
parameter_list|()
block|{
return|return
name|proxyPassword
return|;
block|}
DECL|method|setProxyPassword (String proxyPassword)
specifier|public
name|void
name|setProxyPassword
parameter_list|(
name|String
name|proxyPassword
parameter_list|)
block|{
name|this
operator|.
name|proxyPassword
operator|=
name|proxyPassword
expr_stmt|;
block|}
DECL|method|getProxyPort ()
specifier|public
name|Integer
name|getProxyPort
parameter_list|()
block|{
return|return
name|proxyPort
return|;
block|}
DECL|method|setProxyPort (Integer proxyPort)
specifier|public
name|void
name|setProxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|this
operator|.
name|proxyPort
operator|=
name|proxyPort
expr_stmt|;
block|}
DECL|method|getProxyUser ()
specifier|public
name|String
name|getProxyUser
parameter_list|()
block|{
return|return
name|proxyUser
return|;
block|}
DECL|method|setProxyUser (String proxyUser)
specifier|public
name|void
name|setProxyUser
parameter_list|(
name|String
name|proxyUser
parameter_list|)
block|{
name|this
operator|.
name|proxyUser
operator|=
name|proxyUser
expr_stmt|;
block|}
DECL|method|getClient ()
specifier|public
name|IGenericClient
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
DECL|method|setClient (IGenericClient client)
specifier|public
name|void
name|setClient
parameter_list|(
name|IGenericClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
DECL|method|getClientFactory ()
specifier|public
name|IRestfulClientFactory
name|getClientFactory
parameter_list|()
block|{
return|return
name|clientFactory
return|;
block|}
DECL|method|setClientFactory (IRestfulClientFactory clientFactory)
specifier|public
name|void
name|setClientFactory
parameter_list|(
name|IRestfulClientFactory
name|clientFactory
parameter_list|)
block|{
name|this
operator|.
name|clientFactory
operator|=
name|clientFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|FhirConfiguration
condition|)
block|{
name|FhirConfiguration
name|otherFhirConfiguration
init|=
operator|(
name|FhirConfiguration
operator|)
name|other
decl_stmt|;
return|return
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|prettyPrint
argument_list|,
name|otherFhirConfiguration
operator|.
name|isPrettyPrint
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|log
argument_list|,
name|otherFhirConfiguration
operator|.
name|isLog
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|compress
argument_list|,
name|otherFhirConfiguration
operator|.
name|isCompress
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|forceConformanceCheck
argument_list|,
name|otherFhirConfiguration
operator|.
name|isForceConformanceCheck
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|fhirVersion
argument_list|,
name|otherFhirConfiguration
operator|.
name|getFhirVersion
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|deferModelScanning
argument_list|,
name|otherFhirConfiguration
operator|.
name|isDeferModelScanning
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|encoding
argument_list|,
name|otherFhirConfiguration
operator|.
name|getEncoding
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|username
argument_list|,
name|otherFhirConfiguration
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|password
argument_list|,
name|otherFhirConfiguration
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|accessToken
argument_list|,
name|otherFhirConfiguration
operator|.
name|getAccessToken
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|summary
argument_list|,
name|otherFhirConfiguration
operator|.
name|getSummary
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|sessionCookie
argument_list|,
name|otherFhirConfiguration
operator|.
name|getSessionCookie
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|validationMode
argument_list|,
name|otherFhirConfiguration
operator|.
name|getValidationMode
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|connectionTimeout
argument_list|,
name|otherFhirConfiguration
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|socketTimeout
argument_list|,
name|otherFhirConfiguration
operator|.
name|getSocketTimeout
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|proxyHost
argument_list|,
name|otherFhirConfiguration
operator|.
name|getProxyHost
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|proxyPort
argument_list|,
name|otherFhirConfiguration
operator|.
name|getProxyPort
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|proxyUser
argument_list|,
name|otherFhirConfiguration
operator|.
name|getProxyUser
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|proxyPassword
argument_list|,
name|otherFhirConfiguration
operator|.
name|getProxyPassword
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|client
argument_list|,
name|otherFhirConfiguration
operator|.
name|getClient
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|clientFactory
argument_list|,
name|otherFhirConfiguration
operator|.
name|getClientFactory
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|serverUrl
argument_list|,
name|otherFhirConfiguration
operator|.
name|getServerUrl
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|serverUrl
operator|!=
literal|null
condition|?
name|serverUrl
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|fhirVersion
operator|!=
literal|null
condition|?
name|fhirVersion
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|prettyPrint
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|encoding
operator|!=
literal|null
condition|?
name|encoding
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|username
operator|!=
literal|null
condition|?
name|username
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|password
operator|!=
literal|null
condition|?
name|password
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|accessToken
operator|!=
literal|null
condition|?
name|accessToken
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|log
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|compress
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|summary
operator|!=
literal|null
condition|?
name|summary
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|sessionCookie
operator|!=
literal|null
condition|?
name|sessionCookie
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|forceConformanceCheck
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|validationMode
operator|!=
literal|null
condition|?
name|validationMode
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|deferModelScanning
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|connectionTimeout
operator|!=
literal|null
condition|?
name|connectionTimeout
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|socketTimeout
operator|!=
literal|null
condition|?
name|socketTimeout
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|proxyHost
operator|!=
literal|null
condition|?
name|proxyHost
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|proxyPort
operator|!=
literal|null
condition|?
name|proxyPort
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|proxyUser
operator|!=
literal|null
condition|?
name|proxyUser
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|proxyPassword
operator|!=
literal|null
condition|?
name|proxyPassword
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

