begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IGenericClient
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IClientExecutable
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseMetaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IIdType
import|;
end_import

begin_comment
comment|/**  * API for the "meta" operations, which can be used to get, add and remove tags and other  * Meta elements from a resource or across the server.  */
end_comment

begin_class
DECL|class|FhirMeta
specifier|public
class|class
name|FhirMeta
block|{
DECL|field|client
specifier|private
specifier|final
name|IGenericClient
name|client
decl_stmt|;
DECL|method|FhirMeta (IGenericClient client)
specifier|public
name|FhirMeta
parameter_list|(
name|IGenericClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
comment|/**      * Fetch the current metadata from the whole Server      *      * @param metaType The type of the meta datatype for the given FHIR model version (should be<code>MetaDt.class</code> or<code>MetaType.class</code>)      * @param<T> extends {@link IBaseMetaType}      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @return the {@link IBaseMetaType}      */
DECL|method|getFromServer (Class<T> metaType, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseMetaType
parameter_list|>
name|T
name|getFromServer
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|metaType
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IClientExecutable
argument_list|<
name|IClientExecutable
argument_list|<
name|?
argument_list|,
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
name|clientExecutable
init|=
name|client
operator|.
name|meta
argument_list|()
operator|.
name|get
argument_list|(
name|metaType
argument_list|)
operator|.
name|fromServer
argument_list|()
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|clientExecutable
argument_list|)
expr_stmt|;
return|return
name|clientExecutable
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Fetch the current metadata from a specific resource      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @param metaType the {@link IBaseMetaType} class      * @param id the id      * @param<T> extends {@link IBaseMetaType}      * @return the {@link IBaseMetaType}      */
DECL|method|getFromResource (Class<T> metaType, IIdType id, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseMetaType
parameter_list|>
name|T
name|getFromResource
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|metaType
parameter_list|,
name|IIdType
name|id
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IClientExecutable
argument_list|<
name|IClientExecutable
argument_list|<
name|?
argument_list|,
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
name|clientExecutable
init|=
name|client
operator|.
name|meta
argument_list|()
operator|.
name|get
argument_list|(
name|metaType
argument_list|)
operator|.
name|fromResource
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|clientExecutable
argument_list|)
expr_stmt|;
return|return
name|clientExecutable
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Fetch the current metadata from a specific type      * @param<T> extends {@link IBaseMetaType}      * @param metaType the {@link IBaseMetaType} class      * @param resourceType the resource type e.g "Patient"      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @return the {@link IBaseMetaType}      */
DECL|method|getFromType (Class<T> metaType, String resourceType, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseMetaType
parameter_list|>
name|T
name|getFromType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|metaType
parameter_list|,
name|String
name|resourceType
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IClientExecutable
argument_list|<
name|IClientExecutable
argument_list|<
name|?
argument_list|,
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
name|clientExecutable
init|=
name|client
operator|.
name|meta
argument_list|()
operator|.
name|get
argument_list|(
name|metaType
argument_list|)
operator|.
name|fromType
argument_list|(
name|resourceType
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|clientExecutable
argument_list|)
expr_stmt|;
return|return
name|clientExecutable
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Add the elements in the given metadata to the already existing set (do not remove any)      * @param<T> extends {@link IBaseMetaType}      * @param id the id      * @param meta the {@link IBaseMetaType} class      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @return the {@link IBaseMetaType}      */
DECL|method|add (T meta, IIdType id, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseMetaType
parameter_list|>
name|T
name|add
parameter_list|(
name|T
name|meta
parameter_list|,
name|IIdType
name|id
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IClientExecutable
argument_list|<
name|IClientExecutable
argument_list|<
name|?
argument_list|,
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
name|clientExecutable
init|=
name|client
operator|.
name|meta
argument_list|()
operator|.
name|add
argument_list|()
operator|.
name|onResource
argument_list|(
name|id
argument_list|)
operator|.
name|meta
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|clientExecutable
argument_list|)
expr_stmt|;
return|return
name|clientExecutable
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Delete the elements in the given metadata from the given id      * @param<T> extends {@link IBaseMetaType}      * @param id the id      * @param meta the {@link IBaseMetaType} class      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @return the {@link IBaseMetaType}      */
DECL|method|delete (T meta, IIdType id, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseMetaType
parameter_list|>
name|T
name|delete
parameter_list|(
name|T
name|meta
parameter_list|,
name|IIdType
name|id
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IClientExecutable
argument_list|<
name|IClientExecutable
argument_list|<
name|?
argument_list|,
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
name|clientExecutable
init|=
name|client
operator|.
name|meta
argument_list|()
operator|.
name|delete
argument_list|()
operator|.
name|onResource
argument_list|(
name|id
argument_list|)
operator|.
name|meta
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|clientExecutable
argument_list|)
expr_stmt|;
return|return
name|clientExecutable
operator|.
name|execute
argument_list|()
return|;
block|}
block|}
end_class

end_unit

