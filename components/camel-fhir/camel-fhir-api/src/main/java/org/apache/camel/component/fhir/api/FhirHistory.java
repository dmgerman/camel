begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IGenericClient
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IHistoryTyped
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseConformance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IIdType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IPrimitiveType
import|;
end_import

begin_comment
comment|/**  * API for the "history" method  */
end_comment

begin_class
DECL|class|FhirHistory
specifier|public
class|class
name|FhirHistory
block|{
DECL|field|client
specifier|private
specifier|final
name|IGenericClient
name|client
decl_stmt|;
DECL|method|FhirHistory (IGenericClient client)
specifier|public
name|FhirHistory
parameter_list|(
name|IGenericClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
comment|/**      * Perform the operation across all versions of all resources of all types on the server      *      * @param returnType Request that the method return a Bundle resource (such as<code>ca.uhn.fhir.model.dstu2.resource.Bundle</code>).      *                Use this method if you are accessing a DSTU2+ server.      * @param count Request that the server return only up to<code>theCount</code> number of resources, may be NULL      * @param cutoff Request that the server return only resource versions that were created at or after the given time (inclusive), may be NULL      * @param iCutoff Request that the server return only resource versions that were created at or after the given time (inclusive), may be NULL      * @param<T> extends {@link IBaseBundle}      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @return the {@link IBaseBundle}      */
DECL|method|onServer (Class<T> returnType, Integer count, Date cutoff, IPrimitiveType<Date> iCutoff, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseBundle
parameter_list|>
name|T
name|onServer
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|returnType
parameter_list|,
name|Integer
name|count
parameter_list|,
name|Date
name|cutoff
parameter_list|,
name|IPrimitiveType
argument_list|<
name|Date
argument_list|>
name|iCutoff
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IHistoryTyped
argument_list|<
name|T
argument_list|>
name|tiHistoryTyped
init|=
name|client
operator|.
name|history
argument_list|()
operator|.
name|onServer
argument_list|()
operator|.
name|andReturnBundle
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|processOptionalParams
argument_list|(
name|count
argument_list|,
name|cutoff
argument_list|,
name|iCutoff
argument_list|,
name|tiHistoryTyped
argument_list|)
expr_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|tiHistoryTyped
argument_list|)
expr_stmt|;
return|return
name|tiHistoryTyped
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Perform the operation across all versions of all resources of the given type on the server      *      * @param resourceType The resource type to search for      * @param returnType Request that the method return a Bundle resource (such as<code>ca.uhn.fhir.model.dstu2.resource.Bundle</code>).      *                Use this method if you are accessing a DSTU2+ server.      * @param count Request that the server return only up to<code>theCount</code> number of resources, may be NULL      * @param cutoff Request that the server return only resource versions that were created at or after the given time (inclusive), may be NULL      * @param iCutoff Request that the server return only resource versions that were created at or after the given time (inclusive), may be NULL      * @param<T> extends {@link IBaseBundle}      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @return the {@link IBaseBundle}      */
DECL|method|onType (Class<IBaseResource> resourceType, Class<T> returnType, Integer count, Date cutoff, IPrimitiveType<Date> iCutoff, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseBundle
parameter_list|>
name|T
name|onType
parameter_list|(
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|resourceType
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|returnType
parameter_list|,
name|Integer
name|count
parameter_list|,
name|Date
name|cutoff
parameter_list|,
name|IPrimitiveType
argument_list|<
name|Date
argument_list|>
name|iCutoff
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IHistoryTyped
argument_list|<
name|T
argument_list|>
name|tiHistoryTyped
init|=
name|client
operator|.
name|history
argument_list|()
operator|.
name|onType
argument_list|(
name|resourceType
argument_list|)
operator|.
name|andReturnBundle
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|processOptionalParams
argument_list|(
name|count
argument_list|,
name|cutoff
argument_list|,
name|iCutoff
argument_list|,
name|tiHistoryTyped
argument_list|)
expr_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|tiHistoryTyped
argument_list|)
expr_stmt|;
return|return
name|tiHistoryTyped
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Perform the operation across all versions of a specific resource (by ID and type) on the server.      * Note that<code>theId</code> must be populated with both a resource type and a resource ID at      * a minimum.      * @param id the {@link IIdType} which must be populated with both a resource type and a resource ID at      * @param returnType Request that the method return a Bundle resource (such as<code>ca.uhn.fhir.model.dstu2.resource.Bundle</code>).      *                Use this method if you are accessing a DSTU2+ server.      * @param count Request that the server return only up to<code>theCount</code> number of resources, may be NULL      * @param cutoff Request that the server return only resource versions that were created at or after the given time (inclusive), may be NULL      * @param iCutoff Request that the server return only resource versions that were created at or after the given time (inclusive), may be NULL      * @param<T> extends {@link IBaseBundle}      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @throws IllegalArgumentException If<code>id</code> does not contain at least a resource type and ID      * @return the {@link IBaseBundle}      */
DECL|method|onInstance (IIdType id, Class<T> returnType, Integer count, Date cutoff, IPrimitiveType<Date> iCutoff, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseBundle
parameter_list|>
name|T
name|onInstance
parameter_list|(
name|IIdType
name|id
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|returnType
parameter_list|,
name|Integer
name|count
parameter_list|,
name|Date
name|cutoff
parameter_list|,
name|IPrimitiveType
argument_list|<
name|Date
argument_list|>
name|iCutoff
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IHistoryTyped
argument_list|<
name|T
argument_list|>
name|tiHistoryTyped
init|=
name|client
operator|.
name|history
argument_list|()
operator|.
name|onInstance
argument_list|(
name|id
argument_list|)
operator|.
name|andReturnBundle
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|processOptionalParams
argument_list|(
name|count
argument_list|,
name|cutoff
argument_list|,
name|iCutoff
argument_list|,
name|tiHistoryTyped
argument_list|)
expr_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|tiHistoryTyped
argument_list|)
expr_stmt|;
return|return
name|tiHistoryTyped
operator|.
name|execute
argument_list|()
return|;
block|}
DECL|method|processOptionalParams (Integer count, Date theCutoff, IPrimitiveType<Date> cutoff, IHistoryTyped<T> tiHistoryTyped)
specifier|private
parameter_list|<
name|T
extends|extends
name|IBaseBundle
parameter_list|>
name|void
name|processOptionalParams
parameter_list|(
name|Integer
name|count
parameter_list|,
name|Date
name|theCutoff
parameter_list|,
name|IPrimitiveType
argument_list|<
name|Date
argument_list|>
name|cutoff
parameter_list|,
name|IHistoryTyped
argument_list|<
name|T
argument_list|>
name|tiHistoryTyped
parameter_list|)
block|{
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|tiHistoryTyped
operator|.
name|count
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|theCutoff
operator|!=
literal|null
condition|)
block|{
name|tiHistoryTyped
operator|.
name|since
argument_list|(
name|theCutoff
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cutoff
operator|!=
literal|null
condition|)
block|{
name|tiHistoryTyped
operator|.
name|since
argument_list|(
name|cutoff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

