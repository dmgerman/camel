begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|api
operator|.
name|CacheControlDirective
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|api
operator|.
name|EncodingEnum
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|api
operator|.
name|SummaryEnum
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IClientExecutable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
import|;
end_import

begin_comment
comment|/**  * Encapsulates a list of extra parameters that are valid for *ALL* Camel FHIR APIs.  */
end_comment

begin_enum
DECL|enum|ExtraParameters
specifier|public
enum|enum
name|ExtraParameters
block|{
comment|/**      * Will encode the request to JSON      */
DECL|enumConstant|ENCODE_JSON
name|ENCODE_JSON
argument_list|(
literal|"encodeJson"
argument_list|)
block|,
comment|/**      * Will encode the request to XML      */
DECL|enumConstant|ENCODE_XML
name|ENCODE_XML
argument_list|(
literal|"encodeXml"
argument_list|)
block|,
comment|/**      * Sets the<code>Cache-Control</code> header value, which advises the server (or any cache in front of it)      * how to behave in terms of cached requests"      */
DECL|enumConstant|CACHE_CONTROL_DIRECTIVE
name|CACHE_CONTROL_DIRECTIVE
argument_list|(
literal|"cacheControlDirective"
argument_list|)
block|,
comment|/**      * Request that the server return subsetted resources, containing only the elements specified in the given parameters.      * For example:<code>subsetElements("name", "identifier")</code> requests that the server only return      * the "name" and "identifier" fields in the returned resource, and omit any others.      */
DECL|enumConstant|SUBSET_ELEMENTS
name|SUBSET_ELEMENTS
argument_list|(
literal|"subsetElements"
argument_list|)
block|,
DECL|enumConstant|ENCODING_ENUM
name|ENCODING_ENUM
argument_list|(
literal|"encodingEnum"
argument_list|)
block|,
comment|/**      * Explicitly specify a custom structure type to attempt to use when parsing the response. This      * is useful for invocations where the response is a Bundle/Parameters containing nested resources,      * and you want to use specific custom structures for those nested resources.      *<p>      * See<a href="https://jamesagnew.github.io/hapi-fhir/doc_extensions.html">Profiles and Extensions</a> for more information on using custom structures      *</p>      */
DECL|enumConstant|PREFER_RESPONSE_TYPE
name|PREFER_RESPONSE_TYPE
argument_list|(
literal|"preferredResponseType"
argument_list|)
block|,
comment|/**      * Explicitly specify a custom structure type to attempt to use when parsing the response. This      * is useful for invocations where the response is a Bundle/Parameters containing nested resources,      * and you want to use specific custom structures for those nested resources.      *<p>      * See<a href="https://jamesagnew.github.io/hapi-fhir/doc_extensions.html">Profiles and Extensions</a> for more information on using custom structures      *</p>      */
DECL|enumConstant|PREFER_RESPONSE_TYPES
name|PREFER_RESPONSE_TYPES
argument_list|(
literal|"preferredResponseTypes"
argument_list|)
block|,
comment|/**      * Pretty print the request      */
DECL|enumConstant|PRETTY_PRINT
name|PRETTY_PRINT
argument_list|(
literal|"prettyPrint"
argument_list|)
block|,
comment|/**      * Request that the server modify the response using the<code>_summary</code> param      */
DECL|enumConstant|SUMMARY_ENUM
name|SUMMARY_ENUM
argument_list|(
literal|"summaryEnum"
argument_list|)
block|;
DECL|field|param
specifier|private
specifier|final
name|String
name|param
decl_stmt|;
DECL|field|headerName
specifier|private
specifier|final
name|String
name|headerName
decl_stmt|;
DECL|method|ExtraParameters (String param)
name|ExtraParameters
parameter_list|(
name|String
name|param
parameter_list|)
block|{
name|this
operator|.
name|param
operator|=
name|param
expr_stmt|;
name|this
operator|.
name|headerName
operator|=
literal|"CamelFhir."
operator|+
name|param
expr_stmt|;
block|}
DECL|method|getParam ()
specifier|public
name|String
name|getParam
parameter_list|()
block|{
return|return
name|param
return|;
block|}
DECL|method|getHeaderName ()
specifier|public
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|headerName
return|;
block|}
DECL|method|process (Map<ExtraParameters, Object> extraParameters, T clientExecutable)
specifier|static
parameter_list|<
name|T
extends|extends
name|IClientExecutable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
parameter_list|>
name|void
name|process
parameter_list|(
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|,
name|T
name|clientExecutable
parameter_list|)
block|{
if|if
condition|(
name|extraParameters
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|extraParameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|entry
operator|.
name|getKey
argument_list|()
condition|)
block|{
case|case
name|ENCODE_JSON
case|:
name|Boolean
name|encode
init|=
operator|(
name|Boolean
operator|)
name|extraParameters
operator|.
name|get
argument_list|(
name|ENCODE_JSON
argument_list|)
decl_stmt|;
if|if
condition|(
name|encode
condition|)
block|{
name|clientExecutable
operator|.
name|encodedJson
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|ENCODE_XML
case|:
name|Boolean
name|encodeXml
init|=
operator|(
name|Boolean
operator|)
name|extraParameters
operator|.
name|get
argument_list|(
name|ENCODE_XML
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodeXml
condition|)
block|{
name|clientExecutable
operator|.
name|encodedXml
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|CACHE_CONTROL_DIRECTIVE
case|:
name|CacheControlDirective
name|cacheControlDirective
init|=
operator|(
name|CacheControlDirective
operator|)
name|extraParameters
operator|.
name|get
argument_list|(
name|CACHE_CONTROL_DIRECTIVE
argument_list|)
decl_stmt|;
name|clientExecutable
operator|.
name|cacheControl
argument_list|(
name|cacheControlDirective
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUBSET_ELEMENTS
case|:
name|String
index|[]
name|subsetElements
init|=
operator|(
name|String
index|[]
operator|)
name|extraParameters
operator|.
name|get
argument_list|(
name|SUBSET_ELEMENTS
argument_list|)
decl_stmt|;
name|clientExecutable
operator|.
name|elementsSubset
argument_list|(
name|subsetElements
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENCODING_ENUM
case|:
name|EncodingEnum
name|encodingEnum
init|=
operator|(
name|EncodingEnum
operator|)
name|extraParameters
operator|.
name|get
argument_list|(
name|ENCODING_ENUM
argument_list|)
decl_stmt|;
name|clientExecutable
operator|.
name|encoded
argument_list|(
name|encodingEnum
argument_list|)
expr_stmt|;
break|break;
case|case
name|PREFER_RESPONSE_TYPE
case|:
name|Class
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
name|type
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
operator|)
name|extraParameters
operator|.
name|get
argument_list|(
name|PREFER_RESPONSE_TYPE
argument_list|)
decl_stmt|;
name|clientExecutable
operator|.
name|preferResponseType
argument_list|(
name|type
argument_list|)
expr_stmt|;
break|break;
case|case
name|PREFER_RESPONSE_TYPES
case|:
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
argument_list|>
name|types
init|=
operator|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
argument_list|>
operator|)
name|extraParameters
operator|.
name|get
argument_list|(
name|PREFER_RESPONSE_TYPES
argument_list|)
decl_stmt|;
name|clientExecutable
operator|.
name|preferResponseTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRETTY_PRINT
case|:
name|Boolean
name|prettyPrint
init|=
operator|(
name|Boolean
operator|)
name|extraParameters
operator|.
name|get
argument_list|(
name|PRETTY_PRINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|prettyPrint
condition|)
block|{
name|clientExecutable
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|SUMMARY_ENUM
case|:
name|SummaryEnum
name|summary
init|=
operator|(
name|SummaryEnum
operator|)
name|extraParameters
operator|.
name|get
argument_list|(
name|SUMMARY_ENUM
argument_list|)
decl_stmt|;
name|clientExecutable
operator|.
name|summaryMode
argument_list|(
name|summary
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported FHIR extra parameter parameter: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_enum

end_unit

