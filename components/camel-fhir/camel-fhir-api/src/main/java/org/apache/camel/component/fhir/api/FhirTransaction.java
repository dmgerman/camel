begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IGenericClient
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|ITransactionTyped
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
import|;
end_import

begin_comment
comment|/**  * API for sending a transaction (collection of resources) to the server to be executed as a single unit.  */
end_comment

begin_class
DECL|class|FhirTransaction
specifier|public
class|class
name|FhirTransaction
block|{
DECL|field|client
specifier|private
specifier|final
name|IGenericClient
name|client
decl_stmt|;
DECL|method|FhirTransaction (IGenericClient client)
specifier|public
name|FhirTransaction
parameter_list|(
name|IGenericClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
comment|/**      * Use a list of resources as the transaction input      * @param resources resources to use in the transaction      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @return the {@link IBaseResource}s      */
DECL|method|withResources (List<IBaseResource> resources, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|List
argument_list|<
name|IBaseResource
argument_list|>
name|withResources
parameter_list|(
name|List
argument_list|<
name|IBaseResource
argument_list|>
name|resources
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|ITransactionTyped
argument_list|<
name|List
argument_list|<
name|IBaseResource
argument_list|>
argument_list|>
name|transactionTyped
init|=
name|client
operator|.
name|transaction
argument_list|()
operator|.
name|withResources
argument_list|(
name|resources
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|transactionTyped
argument_list|)
expr_stmt|;
return|return
name|transactionTyped
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Use the given Bundle resource as the transaction input      * @param bundle bundle to use in the transaction      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @return the {@link IBaseBundle}      */
DECL|method|withBundle (IBaseBundle bundle, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseBundle
name|withBundle
parameter_list|(
name|IBaseBundle
name|bundle
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|ITransactionTyped
argument_list|<
name|IBaseBundle
argument_list|>
name|transactionTyped
init|=
name|client
operator|.
name|transaction
argument_list|()
operator|.
name|withBundle
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|transactionTyped
argument_list|)
expr_stmt|;
return|return
name|transactionTyped
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Use the given raw text (should be a Bundle resource) as the transaction input      * @param stringBundle bundle to use in the transaction      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @return the {@link IBaseBundle} as string      */
DECL|method|withBundle (String stringBundle, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|String
name|withBundle
parameter_list|(
name|String
name|stringBundle
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|ITransactionTyped
argument_list|<
name|String
argument_list|>
name|transactionTyped
init|=
name|client
operator|.
name|transaction
argument_list|()
operator|.
name|withBundle
argument_list|(
name|stringBundle
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|transactionTyped
argument_list|)
expr_stmt|;
return|return
name|transactionTyped
operator|.
name|execute
argument_list|()
return|;
block|}
block|}
end_class

end_unit

