begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IGenericClient
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IReadExecutable
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IReadIfNoneMatch
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IReadTyped
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IIdType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * API method for "read" operations  */
end_comment

begin_class
DECL|class|FhirRead
specifier|public
class|class
name|FhirRead
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FhirRead
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|IGenericClient
name|client
decl_stmt|;
DECL|method|FhirRead (IGenericClient client)
specifier|public
name|FhirRead
parameter_list|(
name|IGenericClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
DECL|method|resourceById (Class<IBaseResource> resource, IIdType id, String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceById
parameter_list|(
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|resource
parameter_list|,
name|IIdType
name|id
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resource
argument_list|)
operator|.
name|withId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|resourceById (String resourceClass, IIdType id, String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceById
parameter_list|(
name|String
name|resourceClass
parameter_list|,
name|IIdType
name|id
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resourceClass
argument_list|)
operator|.
name|withId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|resourceById (Class<IBaseResource> resource, String stringId, String version, String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceById
parameter_list|(
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|resource
parameter_list|,
name|String
name|stringId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadTyped
argument_list|<
name|IBaseResource
argument_list|>
name|readTyped
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|readWithOptionalVersion
argument_list|(
name|stringId
argument_list|,
name|readTyped
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|resourceById (String resourceClass, String stringId, String ifVersionMatches, String version, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceById
parameter_list|(
name|String
name|resourceClass
parameter_list|,
name|String
name|stringId
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|String
name|version
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadTyped
argument_list|<
name|IBaseResource
argument_list|>
name|resource
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resourceClass
argument_list|)
decl_stmt|;
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|readWithOptionalVersion
argument_list|(
name|stringId
argument_list|,
name|resource
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|resourceById (Class<IBaseResource> resource, Long longId, String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceById
parameter_list|(
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|resource
parameter_list|,
name|Long
name|longId
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resource
argument_list|)
operator|.
name|withId
argument_list|(
name|longId
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|resourceById (String resourceClass, Long longId, String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceById
parameter_list|(
name|String
name|resourceClass
parameter_list|,
name|Long
name|longId
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resourceClass
argument_list|)
operator|.
name|withId
argument_list|(
name|longId
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|resourceByUrl (Class<IBaseResource> resource, IIdType iUrl, String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceByUrl
parameter_list|(
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|resource
parameter_list|,
name|IIdType
name|iUrl
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resource
argument_list|)
operator|.
name|withUrl
argument_list|(
name|iUrl
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|resourceByUrl (String resourceClass, IIdType iUrl, String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceByUrl
parameter_list|(
name|String
name|resourceClass
parameter_list|,
name|IIdType
name|iUrl
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resourceClass
argument_list|)
operator|.
name|withUrl
argument_list|(
name|iUrl
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|resourceByUrl (Class<IBaseResource> resource, String url, String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceByUrl
parameter_list|(
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|resource
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resource
argument_list|)
operator|.
name|withUrl
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|resourceByUrl (String resourceClass, String url, String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, Map<ExtraParameters, Object> extraParameters)
specifier|public
name|IBaseResource
name|resourceByUrl
parameter_list|(
name|String
name|resourceClass
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
init|=
name|client
operator|.
name|read
argument_list|()
operator|.
name|resource
argument_list|(
name|resourceClass
argument_list|)
operator|.
name|withUrl
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|readExecutable
argument_list|)
expr_stmt|;
return|return
name|processOptionalParams
argument_list|(
name|ifVersionMatches
argument_list|,
name|returnNull
argument_list|,
name|returnResource
argument_list|,
name|throwError
argument_list|,
name|readExecutable
argument_list|)
return|;
block|}
DECL|method|processOptionalParams (String ifVersionMatches, Boolean returnNull, IBaseResource returnResource, Boolean throwError, IReadExecutable<IBaseResource> readExecutable)
specifier|private
name|IBaseResource
name|processOptionalParams
parameter_list|(
name|String
name|ifVersionMatches
parameter_list|,
name|Boolean
name|returnNull
parameter_list|,
name|IBaseResource
name|returnResource
parameter_list|,
name|Boolean
name|throwError
parameter_list|,
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readExecutable
parameter_list|)
block|{
if|if
condition|(
name|ifVersionMatches
operator|!=
literal|null
condition|)
block|{
name|IReadIfNoneMatch
argument_list|<
name|IBaseResource
argument_list|>
name|tiReadIfNoneMatch
init|=
name|readExecutable
operator|.
name|ifVersionMatches
argument_list|(
name|ifVersionMatches
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnNull
operator|!=
literal|null
operator|&&
name|returnNull
condition|)
block|{
return|return
name|tiReadIfNoneMatch
operator|.
name|returnNull
argument_list|()
operator|.
name|execute
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|returnResource
operator|!=
literal|null
condition|)
block|{
return|return
name|tiReadIfNoneMatch
operator|.
name|returnResource
argument_list|(
name|returnResource
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|throwError
operator|!=
literal|null
condition|)
block|{
return|return
name|tiReadIfNoneMatch
operator|.
name|throwNotModifiedException
argument_list|()
operator|.
name|execute
argument_list|()
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"No operation was specified with the If-None-Match header, ignoring"
argument_list|)
expr_stmt|;
block|}
return|return
name|readExecutable
operator|.
name|execute
argument_list|()
return|;
block|}
DECL|method|readWithOptionalVersion (String stringId, IReadTyped<IBaseResource> resource, String version)
specifier|private
name|IReadExecutable
argument_list|<
name|IBaseResource
argument_list|>
name|readWithOptionalVersion
parameter_list|(
name|String
name|stringId
parameter_list|,
name|IReadTyped
argument_list|<
name|IBaseResource
argument_list|>
name|resource
parameter_list|,
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
return|return
name|resource
operator|.
name|withIdAndVersion
argument_list|(
name|stringId
argument_list|,
name|version
argument_list|)
return|;
block|}
return|return
name|resource
operator|.
name|withId
argument_list|(
name|stringId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

