begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IGenericClient
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IOperationProcessMsg
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IOperationProcessMsgMode
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IOperationUnnamed
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IOperationUntyped
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|gclient
operator|.
name|IOperationUntypedWithInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IBaseResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hl7
operator|.
name|fhir
operator|.
name|instance
operator|.
name|model
operator|.
name|api
operator|.
name|IIdType
import|;
end_import

begin_comment
comment|/**  * API for extended FHIR operations https://www.hl7.org/fhir/operations.html  */
end_comment

begin_class
DECL|class|FhirOperation
specifier|public
class|class
name|FhirOperation
block|{
DECL|field|client
specifier|private
specifier|final
name|IGenericClient
name|client
decl_stmt|;
DECL|method|FhirOperation (IGenericClient client)
specifier|public
name|FhirOperation
parameter_list|(
name|IGenericClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
comment|/**      * Perform the operation across all versions of all resources of the given type on the server      *      * @param resourceType The resource type to operate on      * @param name Operation name      * @param parameters The parameters to use as input. May also be<code>null</code> if the operation      * does not require any input parameters.      * @param outputParameterType The type to use for the output parameters (this should be set to      *<code>Parameters.class</code> drawn from the version of the FHIR structures you are using), may be NULL      * @param useHttpGet use HTTP GET verb      * @param returnType If this operation returns a single resource body as its return type instead of a<code>Parameters</code>      * resource, use this method to specify that resource type. This is useful for certain      * operations (e.g.<code>Patient/NNN/$everything</code>) which return a bundle instead of      * a Parameters resource, may be NULL      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @param<T> extends {@link IBaseParameters}      * @return the {@link IBaseResource}      */
DECL|method|onType (Class<IBaseResource> resourceType, String name, T parameters, Class<T> outputParameterType, boolean useHttpGet, Class<IBaseResource> returnType, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseParameters
parameter_list|>
name|IBaseResource
name|onType
parameter_list|(
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|resourceType
parameter_list|,
name|String
name|name
parameter_list|,
name|T
name|parameters
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|outputParameterType
parameter_list|,
name|boolean
name|useHttpGet
parameter_list|,
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|returnType
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IOperationUnnamed
name|operationUnnamed
init|=
name|client
operator|.
name|operation
argument_list|()
operator|.
name|onType
argument_list|(
name|resourceType
argument_list|)
decl_stmt|;
name|IOperationUntypedWithInput
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
name|operationUntypedWithInput
init|=
name|processNamedOperationParameters
argument_list|(
name|name
argument_list|,
name|parameters
argument_list|,
name|outputParameterType
argument_list|,
name|useHttpGet
argument_list|,
name|returnType
argument_list|,
name|extraParameters
argument_list|,
name|operationUnnamed
argument_list|)
decl_stmt|;
return|return
name|operationUntypedWithInput
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Perform the operation across all versions of all resources of all types on the server      *      * @param name Operation name      * @param parameters The parameters to use as input. May also be<code>null</code> if the operation      * does not require any input parameters.      * @param outputParameterType The type to use for the output parameters (this should be set to      *<code>Parameters.class</code> drawn from the version of the FHIR structures you are using), may be NULL      * @param useHttpGet use HTTP GET verb      * @param returnType If this operation returns a single resource body as its return type instead of a<code>Parameters</code>      * resource, use this method to specify that resource type. This is useful for certain      * operations (e.g.<code>Patient/NNN/$everything</code>) which return a bundle instead of      * a Parameters resource, may be NULL      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @param<T> extends {@link IBaseParameters}      * @return the {@link IBaseResource}      */
DECL|method|onServer ( String name, T parameters, Class<T> outputParameterType, boolean useHttpGet, Class<IBaseResource> returnType, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseParameters
parameter_list|>
name|IBaseResource
name|onServer
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|parameters
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|outputParameterType
parameter_list|,
name|boolean
name|useHttpGet
parameter_list|,
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|returnType
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IOperationUnnamed
name|operationUnnamed
init|=
name|client
operator|.
name|operation
argument_list|()
operator|.
name|onServer
argument_list|()
decl_stmt|;
name|IOperationUntypedWithInput
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
name|operationUntypedWithInput
init|=
name|processNamedOperationParameters
argument_list|(
name|name
argument_list|,
name|parameters
argument_list|,
name|outputParameterType
argument_list|,
name|useHttpGet
argument_list|,
name|returnType
argument_list|,
name|extraParameters
argument_list|,
name|operationUnnamed
argument_list|)
decl_stmt|;
return|return
name|operationUntypedWithInput
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Perform the operation across all versions of a specific resource (by ID and type) on the server.      * Note that<code>theId</code> must be populated with both a resource type and a resource ID at      * a minimum.      *      * @param id Resource (version will be stripped)      * @param name Operation name      * @param parameters The parameters to use as input. May also be<code>null</code> if the operation      * does not require any input parameters.      * @param outputParameterType The type to use for the output parameters (this should be set to      *<code>Parameters.class</code> drawn from the version of the FHIR structures you are using), may be NULL      * @param useHttpGet use HTTP GET verb      * @param returnType If this operation returns a single resource body as its return type instead of a<code>Parameters</code>      * resource, use this method to specify that resource type. This is useful for certain      * operations (e.g.<code>Patient/NNN/$everything</code>) which return a bundle instead of      * a Parameters resource, may be NULL      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @param<T> extends {@link IBaseParameters}      *      * @throws IllegalArgumentException If<code>theId</code> does not contain at least a resource type and ID      *      * @return the {@link IBaseResource}      */
DECL|method|onInstance ( IIdType id, String name, T parameters, Class<T> outputParameterType, boolean useHttpGet, Class<IBaseResource> returnType, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseParameters
parameter_list|>
name|IBaseResource
name|onInstance
parameter_list|(
name|IIdType
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|T
name|parameters
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|outputParameterType
parameter_list|,
name|boolean
name|useHttpGet
parameter_list|,
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|returnType
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IOperationUnnamed
name|operationUnnamed
init|=
name|client
operator|.
name|operation
argument_list|()
operator|.
name|onInstanceVersion
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|IOperationUntypedWithInput
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
name|operationUntypedWithInput
init|=
name|processNamedOperationParameters
argument_list|(
name|name
argument_list|,
name|parameters
argument_list|,
name|outputParameterType
argument_list|,
name|useHttpGet
argument_list|,
name|returnType
argument_list|,
name|extraParameters
argument_list|,
name|operationUnnamed
argument_list|)
decl_stmt|;
return|return
name|operationUntypedWithInput
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * This operation operates on a specific version of a resource      *      * @param id Resource version      * @param name Operation name      * @param parameters The parameters to use as input. May also be<code>null</code> if the operation      * does not require any input parameters.      * @param outputParameterType The type to use for the output parameters (this should be set to      *<code>Parameters.class</code> drawn from the version of the FHIR structures you are using), may be NULL      * @param useHttpGet use HTTP GET verb      * @param returnType If this operation returns a single resource body as its return type instead of a<code>Parameters</code>      * resource, use this method to specify that resource type. This is useful for certain      * operations (e.g.<code>Patient/NNN/$everything</code>) which return a bundle instead of      * a Parameters resource, may be NULL      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @param<T> extends {@link IBaseParameters}      * @return the {@link IBaseResource}      */
DECL|method|onInstanceVersion ( IIdType id, String name, T parameters, Class<T> outputParameterType, boolean useHttpGet, Class<IBaseResource> returnType, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseParameters
parameter_list|>
name|IBaseResource
name|onInstanceVersion
parameter_list|(
name|IIdType
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|T
name|parameters
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|outputParameterType
parameter_list|,
name|boolean
name|useHttpGet
parameter_list|,
name|Class
argument_list|<
name|IBaseResource
argument_list|>
name|returnType
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IOperationUnnamed
name|operationUnnamed
init|=
name|client
operator|.
name|operation
argument_list|()
operator|.
name|onInstanceVersion
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|IOperationUntypedWithInput
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
name|operationUntypedWithInput
init|=
name|processNamedOperationParameters
argument_list|(
name|name
argument_list|,
name|parameters
argument_list|,
name|outputParameterType
argument_list|,
name|useHttpGet
argument_list|,
name|returnType
argument_list|,
name|extraParameters
argument_list|,
name|operationUnnamed
argument_list|)
decl_stmt|;
return|return
name|operationUntypedWithInput
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * This operation is called<b><a href="https://www.hl7.org/fhir/messaging.html">$process-message</a></b> as defined by the FHIR      * specification.<br><br>      * @param respondToUri An optional query parameter indicating that responses from the receiving server should be sent to this URI, may be NULL      * @param msgBundle Set the Message Bundle to POST to the messaging server      * @param asynchronous Whether to process the message asynchronously or synchronously, defaults to synchronous.      * @param responseClass the response class      * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL      * @param<T> extends {@link IBaseBundle}      * @return the {@link IBaseBundle}      */
DECL|method|processMessage (String respondToUri, IBaseBundle msgBundle, boolean asynchronous, Class<T> responseClass, Map<ExtraParameters, Object> extraParameters)
specifier|public
parameter_list|<
name|T
extends|extends
name|IBaseBundle
parameter_list|>
name|T
name|processMessage
parameter_list|(
name|String
name|respondToUri
parameter_list|,
name|IBaseBundle
name|msgBundle
parameter_list|,
name|boolean
name|asynchronous
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|responseClass
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|)
block|{
name|IOperationProcessMsg
name|operationProcessMsg
init|=
name|client
operator|.
name|operation
argument_list|()
operator|.
name|processMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|respondToUri
argument_list|)
condition|)
block|{
name|operationProcessMsg
operator|.
name|setResponseUrlParam
argument_list|(
name|respondToUri
argument_list|)
expr_stmt|;
block|}
name|IOperationProcessMsgMode
argument_list|<
name|T
argument_list|>
name|operationProcessMsgMode
init|=
name|operationProcessMsg
operator|.
name|setMessageBundle
argument_list|(
name|msgBundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|asynchronous
condition|)
block|{
name|operationProcessMsgMode
operator|.
name|asynchronous
argument_list|(
name|responseClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operationProcessMsgMode
operator|.
name|synchronous
argument_list|(
name|responseClass
argument_list|)
expr_stmt|;
block|}
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|operationProcessMsgMode
argument_list|)
expr_stmt|;
return|return
name|operationProcessMsgMode
operator|.
name|execute
argument_list|()
return|;
block|}
DECL|method|processNamedOperationParameters (String name, T parameters, Class<T> outputParameterType, boolean useHttpGet, Class<? extends IBaseResource> returnType, Map<ExtraParameters, Object> extraParameters, IOperationUnnamed operationUnnamed)
specifier|private
parameter_list|<
name|T
extends|extends
name|IBaseParameters
parameter_list|>
name|IOperationUntypedWithInput
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
name|processNamedOperationParameters
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|parameters
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|outputParameterType
parameter_list|,
name|boolean
name|useHttpGet
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
name|returnType
parameter_list|,
name|Map
argument_list|<
name|ExtraParameters
argument_list|,
name|Object
argument_list|>
name|extraParameters
parameter_list|,
name|IOperationUnnamed
name|operationUnnamed
parameter_list|)
block|{
name|IOperationUntyped
name|named
init|=
name|operationUnnamed
operator|.
name|named
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IOperationUntypedWithInput
argument_list|<
name|?
extends|extends
name|IBaseResource
argument_list|>
name|operationUntypedWithInput
decl_stmt|;
if|if
condition|(
name|outputParameterType
operator|!=
literal|null
condition|)
block|{
name|operationUntypedWithInput
operator|=
name|named
operator|.
name|withNoParameters
argument_list|(
name|outputParameterType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operationUntypedWithInput
operator|=
name|named
operator|.
name|withParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useHttpGet
condition|)
block|{
name|operationUntypedWithInput
operator|.
name|useHttpGet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|returnType
operator|!=
literal|null
condition|)
block|{
name|operationUntypedWithInput
operator|.
name|returnResourceType
argument_list|(
name|returnType
argument_list|)
expr_stmt|;
block|}
name|ExtraParameters
operator|.
name|process
argument_list|(
name|extraParameters
argument_list|,
name|operationUntypedWithInput
argument_list|)
expr_stmt|;
return|return
name|operationUntypedWithInput
return|;
block|}
block|}
end_class

end_unit

