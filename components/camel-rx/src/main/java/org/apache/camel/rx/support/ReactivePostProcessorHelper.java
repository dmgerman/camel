begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.rx.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|rx
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|CamelPostProcessorHelper
import|;
end_import

begin_class
DECL|class|ReactivePostProcessorHelper
specifier|public
class|class
name|ReactivePostProcessorHelper
extends|extends
name|CamelPostProcessorHelper
block|{
DECL|method|ReactivePostProcessorHelper (CamelContext camelContext)
specifier|public
name|ReactivePostProcessorHelper
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInjectionValue (Class<?> type, String endpointUri, String endpointRef, String endpointProperty, String injectionPointName, Object bean, String beanName)
specifier|public
name|Object
name|getInjectionValue
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|String
name|endpointUri
parameter_list|,
name|String
name|endpointRef
parameter_list|,
name|String
name|endpointProperty
parameter_list|,
name|String
name|injectionPointName
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
return|return
name|super
operator|.
name|getInjectionValue
argument_list|(
name|type
argument_list|,
name|endpointUri
argument_list|,
name|endpointRef
argument_list|,
name|endpointProperty
argument_list|,
name|injectionPointName
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInjectionBeanValue (Class<?> type, String name)
specifier|public
name|Object
name|getInjectionBeanValue
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|super
operator|.
name|getInjectionBeanValue
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchBeanException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// lets build a proxy
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

