begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.rx.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|rx
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|functions
operator|.
name|Func1
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|subjects
operator|.
name|PublishSubject
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|subjects
operator|.
name|Subject
import|;
end_import

begin_comment
comment|/**  * A base class for implementing a {@link Processor} which provides access to an {@link Observable}  * so that the messages can be processed using the<a href="https://github.com/Netflix/RxJava/wiki">RX Java API</a>  */
end_comment

begin_class
DECL|class|ObservableProcessor
specifier|public
specifier|abstract
class|class
name|ObservableProcessor
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ServiceSupport
implements|implements
name|Processor
block|{
DECL|field|observable
specifier|private
specifier|final
name|Subject
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|observable
init|=
name|PublishSubject
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|ProcessorToObserver
argument_list|<
name|T
argument_list|>
name|processor
decl_stmt|;
DECL|method|ObservableProcessor (Func1<Exchange, T> func)
specifier|protected
name|ObservableProcessor
parameter_list|(
name|Func1
argument_list|<
name|Exchange
argument_list|,
name|T
argument_list|>
name|func
parameter_list|)
block|{
name|this
operator|.
name|processor
operator|=
operator|new
name|ProcessorToObserver
argument_list|<>
argument_list|(
name|func
argument_list|,
name|observable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the {@link Observable} for this {@link Processor} so that the messages that are received      * can be processed using the<a href="https://github.com/Netflix/RxJava/wiki">RX Java API</a>      */
DECL|method|getObservable ()
specifier|public
name|Observable
argument_list|<
name|T
argument_list|>
name|getObservable
parameter_list|()
block|{
return|return
name|observable
return|;
block|}
comment|/**      * Provides the configuration hook so that derived classes can process the observable      * to use whatever RX methods they wish to process the incoming events      */
DECL|method|configure (Observable<T> observable)
specifier|protected
specifier|abstract
name|void
name|configure
parameter_list|(
name|Observable
argument_list|<
name|T
argument_list|>
name|observable
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|configure
argument_list|(
name|getObservable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

