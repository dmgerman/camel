begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.rx.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|rx
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|CamelPostProcessorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelBeanPostProcessor
import|;
end_import

begin_class
DECL|class|ReactiveBeanPostProcessor
specifier|public
class|class
name|ReactiveBeanPostProcessor
extends|extends
name|DefaultCamelBeanPostProcessor
block|{
DECL|field|helper
specifier|private
name|ReactivePostProcessorHelper
name|helper
decl_stmt|;
DECL|method|ReactiveBeanPostProcessor (CamelContext camelContext)
specifier|public
name|ReactiveBeanPostProcessor
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postProcessBeforeInitialization (Object bean, String beanName)
specifier|public
name|Object
name|postProcessBeforeInitialization
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|super
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|postProcessAfterInitialization (Object bean, String beanName)
specifier|public
name|Object
name|postProcessAfterInitialization
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|super
operator|.
name|postProcessAfterInitialization
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPostProcessorHelper ()
specifier|public
name|CamelPostProcessorHelper
name|getPostProcessorHelper
parameter_list|()
block|{
if|if
condition|(
name|helper
operator|==
literal|null
condition|)
block|{
name|helper
operator|=
operator|new
name|ReactivePostProcessorHelper
argument_list|(
name|getOrLookupCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|helper
return|;
block|}
block|}
end_class

end_unit

