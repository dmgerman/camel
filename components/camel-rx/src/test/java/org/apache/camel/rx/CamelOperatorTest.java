begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.rx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|rx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|observables
operator|.
name|ConnectableObservable
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|jayway
operator|.
name|restassured
operator|.
name|RestAssured
operator|.
name|given
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|CamelOperatorTest
specifier|public
class|class
name|CamelOperatorTest
extends|extends
name|RxTestSupport
block|{
annotation|@
name|Test
DECL|method|testCamelOperator ()
specifier|public
name|void
name|testCamelOperator
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockEndpoint
name|mockEndpoint1
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:results1"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MockEndpoint
name|mockEndpoint2
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:results2"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MockEndpoint
name|mockEndpoint3
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:results3"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MockEndpoint
name|mockEndpoint4
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:results4"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockEndpoint1
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|mockEndpoint2
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockEndpoint3
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockEndpoint4
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Define an InOnly route
name|ConnectableObservable
argument_list|<
name|Exchange
argument_list|>
name|inOnly
init|=
name|reactiveCamel
operator|.
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|lift
argument_list|(
operator|new
name|CamelOperator
argument_list|(
name|mockEndpoint1
argument_list|)
argument_list|)
operator|.
name|lift
argument_list|(
operator|new
name|CamelOperator
argument_list|(
name|camelContext
argument_list|,
literal|"log:inOnly"
argument_list|)
argument_list|)
operator|.
name|debounce
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|lift
argument_list|(
name|reactiveCamel
operator|.
name|to
argument_list|(
name|mockEndpoint2
argument_list|)
argument_list|)
operator|.
name|lift
argument_list|(
name|reactiveCamel
operator|.
name|to
argument_list|(
literal|"mock:results3"
argument_list|)
argument_list|)
operator|.
name|publish
argument_list|()
decl_stmt|;
comment|// Start the route
name|Subscription
name|inSubscription
init|=
name|inOnly
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// Send two test messages
name|producerTemplate
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"<test1/>"
argument_list|)
expr_stmt|;
name|producerTemplate
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"<test2/>"
argument_list|)
expr_stmt|;
comment|// Define an InOut route
name|ConnectableObservable
argument_list|<
name|Exchange
argument_list|>
name|inOut
init|=
name|reactiveCamel
operator|.
name|from
argument_list|(
literal|"restlet:http://localhost:9080/test?restletMethod=POST"
argument_list|)
operator|.
name|map
argument_list|(
name|exchange
lambda|->
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
argument_list|)
operator|.
name|lift
argument_list|(
name|reactiveCamel
operator|.
name|to
argument_list|(
literal|"log:inOut"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|exchange
lambda|->
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|+
literal|" back"
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
argument_list|)
operator|.
name|lift
argument_list|(
name|reactiveCamel
operator|.
name|to
argument_list|(
name|mockEndpoint4
argument_list|)
argument_list|)
operator|.
name|publish
argument_list|()
decl_stmt|;
comment|// Start the route
name|Subscription
name|inoutSubscription
init|=
name|inOut
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// Send two messages and check the responses
name|given
argument_list|()
operator|.
name|body
argument_list|(
literal|"hello"
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|post
argument_list|(
literal|"http://localhost:9080/test"
argument_list|)
operator|.
name|then
argument_list|()
operator|.
name|assertThat
argument_list|()
operator|.
name|body
argument_list|(
name|containsString
argument_list|(
literal|"hello back"
argument_list|)
argument_list|)
expr_stmt|;
name|given
argument_list|()
operator|.
name|body
argument_list|(
literal|"holla"
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|post
argument_list|(
literal|"http://localhost:9080/test"
argument_list|)
operator|.
name|then
argument_list|()
operator|.
name|assertThat
argument_list|()
operator|.
name|body
argument_list|(
name|containsString
argument_list|(
literal|"holla back"
argument_list|)
argument_list|)
expr_stmt|;
name|mockEndpoint1
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockEndpoint2
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockEndpoint3
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockEndpoint4
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// Stop the route
name|inSubscription
operator|.
name|unsubscribe
argument_list|()
expr_stmt|;
comment|// Stop the route
name|inoutSubscription
operator|.
name|unsubscribe
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

