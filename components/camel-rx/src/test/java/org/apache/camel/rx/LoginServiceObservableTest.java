begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.rx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|rx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|Observable
import|;
end_import

begin_class
DECL|class|LoginServiceObservableTest
specifier|public
class|class
name|LoginServiceObservableTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testBeanObservable ()
specifier|public
name|void
name|testBeanObservable
parameter_list|()
throws|throws
name|Exception
block|{
name|ReactiveCamel
name|reactiveCamel
init|=
operator|new
name|ReactiveCamel
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|// consume from two endpoints and aggregate by appending the data
name|Observable
argument_list|<
name|String
argument_list|>
name|login
init|=
name|reactiveCamel
operator|.
name|toObservable
argument_list|(
literal|"seda:login"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Observable
argument_list|<
name|String
argument_list|>
name|user
init|=
name|reactiveCamel
operator|.
name|toObservable
argument_list|(
literal|"seda:user"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Observable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Observable
operator|.
name|combineLatest
argument_list|(
name|login
argument_list|,
name|user
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|a
operator|+
literal|"="
operator|+
name|b
argument_list|)
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"OK=Donald Duck"
argument_list|)
expr_stmt|;
comment|// send in data
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:login"
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:user"
argument_list|,
literal|"Donald Duck"
argument_list|)
expr_stmt|;
comment|// and send the results to the mock endpoint
name|reactiveCamel
operator|.
name|sendTo
argument_list|(
name|result
argument_list|,
literal|"mock:result"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

