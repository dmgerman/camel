begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.rx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|rx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|SynchronizationAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|rx
operator|.
name|Observable
import|;
end_import

begin_class
DECL|class|SendToUoWTest
specifier|public
class|class
name|SendToUoWTest
extends|extends
name|RxTestSupport
block|{
DECL|field|onCompletion
specifier|private
name|MyOnCompletion
name|onCompletion
init|=
operator|new
name|MyOnCompletion
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testSendObservableToEndpoint ()
specifier|public
name|void
name|testSendObservableToEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Order
index|[]
name|expectedBodies
init|=
block|{
operator|new
name|Order
argument_list|(
literal|"o1"
argument_list|,
literal|1.10
argument_list|)
block|,
operator|new
name|Order
argument_list|(
literal|"o2"
argument_list|,
literal|2.20
argument_list|)
block|,
operator|new
name|Order
argument_list|(
literal|"o3"
argument_list|,
literal|3.30
argument_list|)
block|}
decl_stmt|;
name|Observable
argument_list|<
name|Order
argument_list|>
name|someObservable
init|=
name|Observable
operator|.
name|from
argument_list|(
name|expectedBodies
argument_list|)
decl_stmt|;
specifier|final
name|MockEndpoint
name|mockEndpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:results"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|expectedBodies
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|whenAnyExchangeReceived
argument_list|(
name|exchange
lambda|->
name|exchange
operator|.
name|addOnCompletion
argument_list|(
name|onCompletion
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets send events on the observable to the camel endpoint
name|reactiveCamel
operator|.
name|sendTo
argument_list|(
name|someObservable
argument_list|,
literal|"mock:results"
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|onCompletion
operator|.
name|getDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyOnCompletion
specifier|private
specifier|static
class|class
name|MyOnCompletion
extends|extends
name|SynchronizationAdapter
block|{
DECL|field|done
specifier|private
name|int
name|done
decl_stmt|;
annotation|@
name|Override
DECL|method|onComplete (Exchange exchange)
specifier|public
name|void
name|onComplete
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|done
operator|++
expr_stmt|;
block|}
DECL|method|getDone ()
specifier|public
name|int
name|getDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
block|}
block|}
end_class

end_unit

