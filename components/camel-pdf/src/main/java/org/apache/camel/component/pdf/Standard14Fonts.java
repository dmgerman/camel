begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pdf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_comment
comment|/**  * The 14 standard fonts by name. Created here because there is no way to get a standard font by name in {@code pdfbox} 2.0  *  * @author<a href="https://github.com/ppalaga">Peter Palaga</a>  */
end_comment

begin_class
DECL|class|Standard14Fonts
specifier|public
specifier|final
class|class
name|Standard14Fonts
block|{
DECL|field|FONTS_BY_NAME
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PDType1Font
argument_list|>
name|FONTS_BY_NAME
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|TIMES_ROMAN
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|TIMES_ROMAN
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|TIMES_BOLD
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|TIMES_BOLD
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|TIMES_ITALIC
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|TIMES_ITALIC
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|TIMES_BOLD_ITALIC
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|TIMES_BOLD_ITALIC
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|HELVETICA
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|HELVETICA
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|HELVETICA_BOLD
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|HELVETICA_BOLD
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|HELVETICA_OBLIQUE
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|HELVETICA_OBLIQUE
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|HELVETICA_BOLD_OBLIQUE
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|HELVETICA_BOLD_OBLIQUE
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|COURIER
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|COURIER
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|COURIER_BOLD
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|COURIER_BOLD
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|COURIER_OBLIQUE
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|COURIER_OBLIQUE
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|COURIER_BOLD_OBLIQUE
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|COURIER_BOLD_OBLIQUE
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|SYMBOL
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|SYMBOL
argument_list|)
expr_stmt|;
name|FONTS_BY_NAME
operator|.
name|put
argument_list|(
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
argument_list|)
expr_stmt|;
block|}
DECL|method|Standard14Fonts ()
specifier|private
name|Standard14Fonts
parameter_list|()
block|{     }
comment|/**      * Get one of the 14 standard fonts by base font name.      *      * @param fontName the base font name, such as {@code "Helvetica"} or {@code "Helvetica-Bold"}      * @return the {@link PDType1Font} or null, of the {@code fontName} is not mapped to any font      */
DECL|method|getByName (String fontName)
specifier|public
specifier|static
name|PDType1Font
name|getByName
parameter_list|(
name|String
name|fontName
parameter_list|)
block|{
return|return
name|FONTS_BY_NAME
operator|.
name|get
argument_list|(
name|fontName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

