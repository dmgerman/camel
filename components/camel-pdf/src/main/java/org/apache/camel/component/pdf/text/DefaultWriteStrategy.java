begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pdf.text
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pdf
operator|.
name|text
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pdf
operator|.
name|PdfConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_comment
comment|/**  * Writes given lines to PDF document. If document already contains some text then new text will be appended  * to new page.  */
end_comment

begin_class
DECL|class|DefaultWriteStrategy
specifier|public
class|class
name|DefaultWriteStrategy
implements|implements
name|WriteStrategy
block|{
DECL|field|pdfConfiguration
specifier|private
specifier|final
name|PdfConfiguration
name|pdfConfiguration
decl_stmt|;
DECL|method|DefaultWriteStrategy (PdfConfiguration pdfConfiguration)
specifier|public
name|DefaultWriteStrategy
parameter_list|(
name|PdfConfiguration
name|pdfConfiguration
parameter_list|)
block|{
name|this
operator|.
name|pdfConfiguration
operator|=
name|pdfConfiguration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (Collection<String> lines, PDDocument document)
specifier|public
name|PDDocument
name|write
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|,
name|PDDocument
name|document
parameter_list|)
throws|throws
name|IOException
block|{
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|(
name|pdfConfiguration
operator|.
name|getPageSize
argument_list|()
argument_list|)
decl_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|pdfConfiguration
operator|.
name|getMarginLeft
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|page
operator|.
name|getMediaBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|-
name|pdfConfiguration
operator|.
name|getMarginTop
argument_list|()
decl_stmt|;
name|float
name|averageFontHeight
init|=
name|PdfUtils
operator|.
name|getAverageFontHeight
argument_list|(
name|pdfConfiguration
operator|.
name|getFont
argument_list|()
argument_list|,
name|pdfConfiguration
operator|.
name|getFontSize
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|lineSpacing
init|=
name|averageFontHeight
operator|*
literal|2
decl_stmt|;
name|PDPageContentStream
name|contentStream
init|=
name|initializeContentStream
argument_list|(
name|document
argument_list|,
name|page
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|writeLine
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|line
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
name|y
operator|-=
name|lineSpacing
expr_stmt|;
if|if
condition|(
name|goToNextPage
argument_list|(
name|y
argument_list|)
condition|)
block|{
name|contentStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|page
operator|=
operator|new
name|PDPage
argument_list|(
name|pdfConfiguration
operator|.
name|getPageSize
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|contentStream
operator|=
name|initializeContentStream
argument_list|(
name|document
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|y
operator|=
name|page
operator|.
name|getMediaBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|-
name|pdfConfiguration
operator|.
name|getMarginTop
argument_list|()
expr_stmt|;
block|}
block|}
name|contentStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|document
return|;
block|}
DECL|method|goToNextPage (float y)
specifier|private
name|boolean
name|goToNextPage
parameter_list|(
name|float
name|y
parameter_list|)
block|{
return|return
name|y
operator|<
name|pdfConfiguration
operator|.
name|getMarginBottom
argument_list|()
return|;
block|}
DECL|method|writeLine (float x, float y, String currentLine, PDPageContentStream contentStream)
specifier|private
name|void
name|writeLine
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|String
name|currentLine
parameter_list|,
name|PDPageContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|contentStream
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|moveTextPositionByAmount
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|drawString
argument_list|(
name|currentLine
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|endText
argument_list|()
expr_stmt|;
block|}
DECL|method|initializeContentStream (PDDocument document, PDPage page)
specifier|private
name|PDPageContentStream
name|initializeContentStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
name|PDPageContentStream
name|contentStream
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|document
argument_list|,
name|page
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setFont
argument_list|(
name|pdfConfiguration
operator|.
name|getFont
argument_list|()
argument_list|,
name|pdfConfiguration
operator|.
name|getFontSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|contentStream
return|;
block|}
block|}
end_class

end_unit

