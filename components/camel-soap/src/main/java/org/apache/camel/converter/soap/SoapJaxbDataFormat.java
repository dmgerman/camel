begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.soap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBIntrospector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
operator|.
name|JaxbDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|soap
operator|.
name|name
operator|.
name|ElementNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|soap
operator|.
name|name
operator|.
name|ExceptionNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|soap
operator|.
name|name
operator|.
name|TypeNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlsoap
operator|.
name|schemas
operator|.
name|soap
operator|.
name|envelope
operator|.
name|Body
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlsoap
operator|.
name|schemas
operator|.
name|soap
operator|.
name|envelope
operator|.
name|Detail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlsoap
operator|.
name|schemas
operator|.
name|soap
operator|.
name|envelope
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlsoap
operator|.
name|schemas
operator|.
name|soap
operator|.
name|envelope
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlsoap
operator|.
name|schemas
operator|.
name|soap
operator|.
name|envelope
operator|.
name|ObjectFactory
import|;
end_import

begin_comment
comment|/**  * Marshaling from Objects to SOAP and back by using JAXB. The classes to be  * processed need to have JAXB annotations. For marshaling a  * ElementNameStrategy is used to determine how the top level elements in SOAP  * are named as this can not be extracted from JAXB.  */
end_comment

begin_class
DECL|class|SoapJaxbDataFormat
specifier|public
class|class
name|SoapJaxbDataFormat
extends|extends
name|JaxbDataFormat
block|{
DECL|field|SOAP_PACKAGE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SOAP_PACKAGE_NAME
init|=
name|Envelope
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|elementNameStrategy
specifier|private
name|ElementNameStrategy
name|elementNameStrategy
decl_stmt|;
comment|/**      * Remember to set the context path when using this constructor      */
DECL|method|SoapJaxbDataFormat ()
specifier|public
name|SoapJaxbDataFormat
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initialize with JAXB context path      *       * @param contexPath      */
DECL|method|SoapJaxbDataFormat (String contexPath)
specifier|public
name|SoapJaxbDataFormat
parameter_list|(
name|String
name|contexPath
parameter_list|)
block|{
name|super
argument_list|(
name|contexPath
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialize the data format. The serviceInterface is necessary to      * determine the element name and namespace of the element inside the soap      * body when marshaling      *       * @param jaxbPackage      *            package for JAXB context      * @param serviceInterface      *            webservice interface      */
DECL|method|SoapJaxbDataFormat (String contextPath, ElementNameStrategy elementNameStrategy)
specifier|public
name|SoapJaxbDataFormat
parameter_list|(
name|String
name|contextPath
parameter_list|,
name|ElementNameStrategy
name|elementNameStrategy
parameter_list|)
block|{
name|this
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|elementNameStrategy
operator|=
name|elementNameStrategy
expr_stmt|;
block|}
comment|/**      * Marshal inputObject to SOAP xml. If the exchange or message has an EXCEPTION_CAUGTH      * property or header then instead of the object the exception is marshaled.      *       * To determine the name of the top level xml elment the elementNameStrategy is used.      */
DECL|method|marshal (Exchange exchange, final Object inputObject, OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Object
name|inputObject
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|elementNameStrategy
operator|==
literal|null
condition|)
block|{
name|elementNameStrategy
operator|=
operator|new
name|TypeNameStrategy
argument_list|()
expr_stmt|;
block|}
name|String
name|soapAction
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|SOAP_ACTION
argument_list|)
decl_stmt|;
name|Body
name|body
init|=
operator|new
name|Body
argument_list|()
decl_stmt|;
name|ClassResolver
name|classResolver
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
decl_stmt|;
name|Throwable
name|exception
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|final
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|content
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|content
operator|=
name|createFaultFromException
argument_list|(
name|exception
argument_list|,
name|soapAction
argument_list|,
name|classResolver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|content
operator|=
name|createBodyContentFromObject
argument_list|(
name|inputObject
argument_list|,
name|soapAction
argument_list|,
name|classResolver
argument_list|)
expr_stmt|;
block|}
name|body
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|Envelope
name|envelope
init|=
operator|new
name|Envelope
argument_list|()
decl_stmt|;
name|envelope
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|Envelope
argument_list|>
name|envelopeEl
init|=
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createEnvelope
argument_list|(
name|envelope
argument_list|)
decl_stmt|;
name|super
operator|.
name|marshal
argument_list|(
name|exchange
argument_list|,
name|envelopeEl
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create body content from a non Exception object. If the inputObject is a      * BeanInvocation the following should be considered: The first parameter      * will be used for the SOAP body. BeanInvocations with more than one      * parameter are not supported. So the interface should be in doc lit bare      * style.      *       * @param inputObject object to be put into the SOAP body      * @param soapAction for name resolution      * @param classResolver for name resolution      * @return JAXBElement for the body content      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createBodyContentFromObject (final Object inputObject, String soapAction, ClassResolver classResolver)
specifier|private
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|createBodyContentFromObject
parameter_list|(
specifier|final
name|Object
name|inputObject
parameter_list|,
name|String
name|soapAction
parameter_list|,
name|ClassResolver
name|classResolver
parameter_list|)
block|{
name|Object
name|graph
decl_stmt|;
if|if
condition|(
name|inputObject
operator|instanceof
name|BeanInvocation
condition|)
block|{
name|BeanInvocation
name|bi
init|=
operator|(
name|BeanInvocation
operator|)
name|inputObject
decl_stmt|;
if|if
condition|(
name|bi
operator|.
name|getArgs
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"SoapDataFormat does not work with Beaninvocations that contain more than 1 parameter"
argument_list|)
throw|;
block|}
name|graph
operator|=
operator|(
name|bi
operator|.
name|getArgs
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|)
condition|?
name|bi
operator|.
name|getArgs
argument_list|()
index|[
literal|0
index|]
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
name|graph
operator|=
name|inputObject
expr_stmt|;
block|}
name|QName
name|name
init|=
name|elementNameStrategy
operator|.
name|findQNameForSoapActionOrType
argument_list|(
name|soapAction
argument_list|,
name|graph
operator|.
name|getClass
argument_list|()
argument_list|,
name|classResolver
argument_list|)
decl_stmt|;
return|return
operator|new
name|JAXBElement
argument_list|(
name|name
argument_list|,
name|graph
operator|.
name|getClass
argument_list|()
argument_list|,
name|graph
argument_list|)
return|;
block|}
comment|/**      * Creates a SOAP fault from the exception and populates the message as well      * as the detail. The detail object is read from the method getFaultInfo of      * the throwable if present      *       * @param exception      * @param soapAction      * @param classResolver      * @return SOAP fault from given Throwable      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createFaultFromException (final Throwable exception, String soapAction, ClassResolver classResolver)
specifier|private
name|JAXBElement
argument_list|<
name|Fault
argument_list|>
name|createFaultFromException
parameter_list|(
specifier|final
name|Throwable
name|exception
parameter_list|,
name|String
name|soapAction
parameter_list|,
name|ClassResolver
name|classResolver
parameter_list|)
block|{
name|QName
name|name
init|=
operator|new
name|ExceptionNameStrategy
argument_list|()
operator|.
name|findQNameForSoapActionOrType
argument_list|(
name|soapAction
argument_list|,
name|exception
operator|.
name|getClass
argument_list|()
argument_list|,
name|classResolver
argument_list|)
decl_stmt|;
name|Object
name|faultObject
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Method
name|method
init|=
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getFaultInfo"
argument_list|)
decl_stmt|;
name|faultObject
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Exception while trying to get fault details"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Fault
name|fault
init|=
operator|new
name|Fault
argument_list|()
decl_stmt|;
name|fault
operator|.
name|setFaultcode
argument_list|(
operator|new
name|QName
argument_list|(
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultstring
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Detail
name|detailEl
init|=
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createDetail
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|faultDetailContent
init|=
operator|new
name|JAXBElement
argument_list|(
name|name
argument_list|,
name|faultObject
operator|.
name|getClass
argument_list|()
argument_list|,
name|faultObject
argument_list|)
decl_stmt|;
name|detailEl
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|faultDetailContent
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setDetail
argument_list|(
name|detailEl
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createFault
argument_list|(
name|fault
argument_list|)
return|;
block|}
comment|/**      * Unmarshal a given SOAP xml stream and return the content of the SOAP body      */
DECL|method|unmarshal (Exchange exchange, InputStream stream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|rootObject
init|=
name|JAXBIntrospector
operator|.
name|getValue
argument_list|(
name|super
operator|.
name|unmarshal
argument_list|(
name|exchange
argument_list|,
name|stream
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootObject
operator|.
name|getClass
argument_list|()
operator|!=
name|Envelope
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Expected Soap Envelope but got "
operator|+
name|rootObject
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|Envelope
name|envelope
init|=
operator|(
name|Envelope
operator|)
name|rootObject
decl_stmt|;
name|Object
name|payloadEl
init|=
name|envelope
operator|.
name|getBody
argument_list|()
operator|.
name|getAny
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
operator|(
name|isIgnoreJAXBElement
argument_list|()
operator|)
condition|?
name|JAXBIntrospector
operator|.
name|getValue
argument_list|(
name|payloadEl
argument_list|)
else|:
name|payloadEl
return|;
block|}
comment|/**      * Added the generated SOAP package to the JAXB context so Soap datatypes      * are available      */
annotation|@
name|Override
DECL|method|createContext ()
specifier|protected
name|JAXBContext
name|createContext
parameter_list|()
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|getContextPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|SOAP_PACKAGE_NAME
operator|+
literal|":"
operator|+
name|getContextPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|JAXBContext
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
DECL|method|setElementNameStrategy (ElementNameStrategy elementNameStrategy)
specifier|public
name|void
name|setElementNameStrategy
parameter_list|(
name|ElementNameStrategy
name|elementNameStrategy
parameter_list|)
block|{
name|this
operator|.
name|elementNameStrategy
operator|=
name|elementNameStrategy
expr_stmt|;
block|}
block|}
end_class

end_unit

