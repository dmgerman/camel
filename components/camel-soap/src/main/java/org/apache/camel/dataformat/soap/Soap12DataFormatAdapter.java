begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.soap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBIntrospector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3
operator|.
name|_2003
operator|.
name|_05
operator|.
name|soap_envelope
operator|.
name|Body
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3
operator|.
name|_2003
operator|.
name|_05
operator|.
name|soap_envelope
operator|.
name|Detail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3
operator|.
name|_2003
operator|.
name|_05
operator|.
name|soap_envelope
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3
operator|.
name|_2003
operator|.
name|_05
operator|.
name|soap_envelope
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3
operator|.
name|_2003
operator|.
name|_05
operator|.
name|soap_envelope
operator|.
name|Faultcode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3
operator|.
name|_2003
operator|.
name|_05
operator|.
name|soap_envelope
operator|.
name|Faultreason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3
operator|.
name|_2003
operator|.
name|_05
operator|.
name|soap_envelope
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3
operator|.
name|_2003
operator|.
name|_05
operator|.
name|soap_envelope
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3
operator|.
name|_2003
operator|.
name|_05
operator|.
name|soap_envelope
operator|.
name|Reasontext
import|;
end_import

begin_comment
comment|/**  * Marshaling from Objects to<b>SOAP 1.2</b> and back by using JAXB. The classes to be  * processed need to have JAXB annotations. For marshaling a ElementNameStrategy  * is used to determine how the top level elements in SOAP are named as this can  * not be extracted from JAXB.  */
end_comment

begin_class
DECL|class|Soap12DataFormatAdapter
specifier|public
class|class
name|Soap12DataFormatAdapter
implements|implements
name|SoapDataFormatAdapter
block|{
DECL|field|SOAP_PACKAGE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SOAP_PACKAGE_NAME
init|=
name|Envelope
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|FAULT_CODE_SERVER
specifier|private
specifier|static
specifier|final
name|QName
name|FAULT_CODE_SERVER
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2003/05/soap-envelope"
argument_list|,
literal|"Receiver"
argument_list|)
decl_stmt|;
DECL|field|dataFormat
specifier|private
specifier|final
name|SoapJaxbDataFormat
name|dataFormat
decl_stmt|;
DECL|method|Soap12DataFormatAdapter (SoapJaxbDataFormat dataFormat)
specifier|public
name|Soap12DataFormatAdapter
parameter_list|(
name|SoapJaxbDataFormat
name|dataFormat
parameter_list|)
block|{
name|this
operator|.
name|dataFormat
operator|=
name|dataFormat
expr_stmt|;
block|}
DECL|method|getDataFormat ()
specifier|public
name|SoapJaxbDataFormat
name|getDataFormat
parameter_list|()
block|{
return|return
name|dataFormat
return|;
block|}
annotation|@
name|Override
DECL|method|doMarshal (Exchange exchange, Object inputObject, OutputStream stream, String soapAction)
specifier|public
name|Object
name|doMarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|inputObject
parameter_list|,
name|OutputStream
name|stream
parameter_list|,
name|String
name|soapAction
parameter_list|)
throws|throws
name|IOException
block|{
name|Body
name|body
init|=
operator|new
name|Body
argument_list|()
decl_stmt|;
name|Header
name|header
init|=
operator|new
name|Header
argument_list|()
decl_stmt|;
name|Throwable
name|exception
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|JAXBElement
argument_list|<
name|?
argument_list|>
argument_list|>
name|bodyContent
decl_stmt|;
name|List
argument_list|<
name|JAXBElement
argument_list|<
name|?
argument_list|>
argument_list|>
name|headerContent
init|=
operator|new
name|ArrayList
argument_list|<
name|JAXBElement
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|bodyContent
operator|=
operator|new
name|ArrayList
argument_list|<
name|JAXBElement
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|bodyContent
operator|.
name|add
argument_list|(
name|createFaultFromException
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bodyContent
operator|=
name|getDataFormat
argument_list|()
operator|.
name|createContentFromObject
argument_list|(
name|inputObject
argument_list|,
name|soapAction
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|elem
range|:
name|bodyContent
control|)
block|{
name|body
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|elem
range|:
name|headerContent
control|)
block|{
name|header
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|Envelope
name|envelope
init|=
operator|new
name|Envelope
argument_list|()
decl_stmt|;
if|if
condition|(
name|headerContent
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|envelope
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
name|envelope
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|Envelope
argument_list|>
name|envelopeEl
init|=
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createEnvelope
argument_list|(
name|envelope
argument_list|)
decl_stmt|;
return|return
name|envelopeEl
return|;
block|}
comment|/**      * Creates a SOAP fault from the exception and populates the message as well      * as the detail. The detail object is read from the method getFaultInfo of      * the throwable if present      *       * @param exception the cause exception      * @return SOAP fault from given Throwable      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createFaultFromException (final Throwable exception)
specifier|private
name|JAXBElement
argument_list|<
name|Fault
argument_list|>
name|createFaultFromException
parameter_list|(
specifier|final
name|Throwable
name|exception
parameter_list|)
block|{
name|WebFault
name|webFault
init|=
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|WebFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|webFault
operator|==
literal|null
operator|||
name|webFault
operator|.
name|targetNamespace
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The exception "
operator|+
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" needs to have an WebFault annotation with name and targetNamespace"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|webFault
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|webFault
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|faultObject
decl_stmt|;
try|try
block|{
name|Method
name|method
init|=
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getFaultInfo"
argument_list|)
decl_stmt|;
name|faultObject
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Exception while trying to get fault details"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Fault
name|fault
init|=
operator|new
name|Fault
argument_list|()
decl_stmt|;
name|Faultcode
name|code
init|=
operator|new
name|Faultcode
argument_list|()
decl_stmt|;
name|code
operator|.
name|setValue
argument_list|(
name|FAULT_CODE_SERVER
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|Reasontext
name|text
init|=
operator|new
name|Reasontext
argument_list|()
decl_stmt|;
name|text
operator|.
name|setValue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLang
argument_list|(
literal|"en"
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setReason
argument_list|(
operator|new
name|Faultreason
argument_list|()
operator|.
name|withText
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|Detail
name|detailEl
init|=
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createDetail
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|faultDetailContent
init|=
operator|new
name|JAXBElement
argument_list|(
name|name
argument_list|,
name|faultObject
operator|.
name|getClass
argument_list|()
argument_list|,
name|faultObject
argument_list|)
decl_stmt|;
name|detailEl
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|faultDetailContent
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setDetail
argument_list|(
name|detailEl
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createFault
argument_list|(
name|fault
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doUnmarshal (Exchange exchange, InputStream stream, Object rootObject)
specifier|public
name|Object
name|doUnmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|,
name|Object
name|rootObject
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rootObject
operator|.
name|getClass
argument_list|()
operator|!=
name|Envelope
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Expected Soap Envelope but got "
operator|+
name|rootObject
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|Envelope
name|envelope
init|=
operator|(
name|Envelope
operator|)
name|rootObject
decl_stmt|;
name|Header
name|header
init|=
name|envelope
operator|.
name|getHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|returnHeaders
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|anyHeaderElements
init|=
name|envelope
operator|.
name|getHeader
argument_list|()
operator|.
name|getAny
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|anyHeaderElements
operator|&&
operator|!
operator|(
name|getDataFormat
argument_list|()
operator|.
name|isIgnoreUnmarshalledHeaders
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|getDataFormat
argument_list|()
operator|.
name|isIgnoreJAXBElement
argument_list|()
condition|)
block|{
name|returnHeaders
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|headerEl
range|:
name|anyHeaderElements
control|)
block|{
name|returnHeaders
operator|.
name|add
argument_list|(
name|JAXBIntrospector
operator|.
name|getValue
argument_list|(
name|headerEl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|returnHeaders
operator|=
name|anyHeaderElements
expr_stmt|;
block|}
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SoapJaxbDataFormat
operator|.
name|SOAP_UNMARSHALLED_HEADER_LIST
argument_list|,
name|returnHeaders
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|anyElement
init|=
name|envelope
operator|.
name|getBody
argument_list|()
operator|.
name|getAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|anyElement
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// No parameter so return null
return|return
literal|null
return|;
block|}
name|Object
name|payloadEl
init|=
name|anyElement
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|payload
init|=
name|JAXBIntrospector
operator|.
name|getValue
argument_list|(
name|payloadEl
argument_list|)
decl_stmt|;
if|if
condition|(
name|payload
operator|instanceof
name|Fault
condition|)
block|{
name|Exception
name|exception
init|=
name|createExceptionFromFault
argument_list|(
operator|(
name|Fault
operator|)
name|payload
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|getDataFormat
argument_list|()
operator|.
name|isIgnoreJAXBElement
argument_list|()
condition|?
name|payload
else|:
name|payloadEl
return|;
block|}
block|}
comment|/**      * Creates an exception and eventually an embedded bean that contains the      * fault detail. The exception class is determined by using the      * elementNameStrategy. The qName of the fault detail should match the      * WebFault annotation of the Exception class. If no fault detail is set the      * a RuntimeCamelException is created.      *       * @param fault      *            Soap fault      * @return created Exception      */
DECL|method|createExceptionFromFault (Fault fault)
specifier|private
name|Exception
name|createExceptionFromFault
parameter_list|(
name|Fault
name|fault
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|detailList
init|=
name|fault
operator|.
name|getDetail
argument_list|()
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Reasontext
name|text
range|:
name|fault
operator|.
name|getReason
argument_list|()
operator|.
name|getText
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|detailList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|RuntimeCamelException
argument_list|(
name|message
argument_list|)
return|;
block|}
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|detailEl
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|detailList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|exceptionClass
init|=
name|getDataFormat
argument_list|()
operator|.
name|getElementNameStrategy
argument_list|()
operator|.
name|findExceptionForFaultName
argument_list|(
name|detailEl
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|messageConstructor
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|constructor
decl_stmt|;
try|try
block|{
name|messageConstructor
operator|=
name|exceptionClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|Object
name|detail
init|=
name|JAXBIntrospector
operator|.
name|getValue
argument_list|(
name|detailEl
argument_list|)
decl_stmt|;
try|try
block|{
name|constructor
operator|=
name|exceptionClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|detail
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|message
argument_list|,
name|detail
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
name|messageConstructor
operator|.
name|newInstance
argument_list|(
name|message
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSoapPackageName ()
specifier|public
name|String
name|getSoapPackageName
parameter_list|()
block|{
return|return
name|SOAP_PACKAGE_NAME
return|;
block|}
block|}
end_class

end_unit

