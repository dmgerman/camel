begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.soap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|Company
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|Customer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|GetCustomersByName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|GetCustomersByNameResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|MultiPartCustomerService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|Product
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|SaveCustomer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|soap
operator|.
name|name
operator|.
name|ServiceInterfaceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
DECL|class|MultiPartCxfServerTest
specifier|public
class|class
name|MultiPartCxfServerTest
extends|extends
name|RouteBuilder
block|{
DECL|field|endpoint
specifier|protected
specifier|static
name|Endpoint
name|endpoint
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:start"
argument_list|)
DECL|field|producerTemplate
name|ProducerTemplate
name|producerTemplate
decl_stmt|;
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceInterfaceStrategy
name|strat
init|=
operator|new
name|ServiceInterfaceStrategy
argument_list|(
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|MultiPartCustomerService
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SoapJaxbDataFormat
name|soapDataFormat
init|=
operator|new
name|SoapJaxbDataFormat
argument_list|(
literal|"com.example.customerservice.multipart"
argument_list|,
name|strat
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|(
name|soapDataFormat
argument_list|)
operator|.
name|log
argument_list|(
literal|"marshal to: ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:cxfEndpoint"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|soapDataFormat
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendRequestWithInPart ()
specifier|public
name|void
name|testSendRequestWithInPart
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|producerTemplate
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|BeanInvocation
name|beanInvocation
init|=
operator|new
name|BeanInvocation
argument_list|()
decl_stmt|;
name|GetCustomersByName
name|getCustomersByName
init|=
operator|new
name|GetCustomersByName
argument_list|()
decl_stmt|;
name|getCustomersByName
operator|.
name|setName
argument_list|(
literal|"Dr. Multipart"
argument_list|)
expr_stmt|;
name|beanInvocation
operator|.
name|setMethod
argument_list|(
name|MultiPartCustomerService
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getCustomersByName"
argument_list|,
name|GetCustomersByName
operator|.
name|class
argument_list|,
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|Product
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Product
name|product
init|=
operator|new
name|Product
argument_list|()
decl_stmt|;
name|product
operator|.
name|setName
argument_list|(
literal|"Multipart Product"
argument_list|)
expr_stmt|;
name|product
operator|.
name|setDescription
argument_list|(
literal|"Useful for lots of things."
argument_list|)
expr_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[]
block|{
name|getCustomersByName
block|,
name|product
block|}
decl_stmt|;
name|beanInvocation
operator|.
name|setArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|beanInvocation
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exchange
operator|.
name|getException
argument_list|()
throw|;
block|}
name|Object
name|responseObj
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|responseObj
operator|instanceof
name|GetCustomersByNameResponse
argument_list|)
expr_stmt|;
name|GetCustomersByNameResponse
name|response
init|=
operator|(
name|GetCustomersByNameResponse
operator|)
name|responseObj
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getReturn
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Multipart Product"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendRequestWithInAndInOutParts ()
specifier|public
name|void
name|testSendRequestWithInAndInOutParts
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|producerTemplate
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|BeanInvocation
name|beanInvocation
init|=
operator|new
name|BeanInvocation
argument_list|()
decl_stmt|;
name|beanInvocation
operator|.
name|setMethod
argument_list|(
name|MultiPartCustomerService
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"saveCustomer"
argument_list|,
name|SaveCustomer
operator|.
name|class
argument_list|,
name|Product
operator|.
name|class
argument_list|,
name|Holder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Customer
name|customer
init|=
operator|new
name|Customer
argument_list|()
decl_stmt|;
name|customer
operator|.
name|setName
argument_list|(
literal|"TestCustomer"
argument_list|)
expr_stmt|;
name|customer
operator|.
name|setRevenue
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
name|SaveCustomer
name|saveCustomer
init|=
operator|new
name|SaveCustomer
argument_list|()
decl_stmt|;
name|saveCustomer
operator|.
name|setCustomer
argument_list|(
name|customer
argument_list|)
expr_stmt|;
name|Product
name|product
init|=
operator|new
name|Product
argument_list|()
decl_stmt|;
name|product
operator|.
name|setName
argument_list|(
literal|"Multiuse Product"
argument_list|)
expr_stmt|;
name|product
operator|.
name|setDescription
argument_list|(
literal|"Useful for lots of things."
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|Company
argument_list|>
name|holder
init|=
operator|new
name|Holder
argument_list|<
name|Company
argument_list|>
argument_list|()
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[]
block|{
name|saveCustomer
block|,
name|product
block|,
name|holder
block|}
decl_stmt|;
name|beanInvocation
operator|.
name|setArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|beanInvocation
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exchange
operator|.
name|getException
argument_list|()
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|headers
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|SoapJaxbDataFormat
operator|.
name|SOAP_UNMARSHALLED_HEADER_LIST
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|headers
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Object
name|companyHeaderObj
init|=
name|headers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|companyHeaderObj
operator|instanceof
name|Company
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Company
operator|)
name|companyHeaderObj
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MultipartSoft"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test validates the end-to-end behavior of the service interface mapping when a parameter type      * is defined with a different QName in two different Web method. It also tests the case where a       * QName and type are directly reused across methods.      */
annotation|@
name|Test
DECL|method|testSendRequestWithReusedInAndInOutParts ()
specifier|public
name|void
name|testSendRequestWithReusedInAndInOutParts
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|producerTemplate
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|BeanInvocation
name|beanInvocation
init|=
operator|new
name|BeanInvocation
argument_list|()
decl_stmt|;
name|beanInvocation
operator|.
name|setMethod
argument_list|(
name|MultiPartCustomerService
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"saveCustomerToo"
argument_list|,
name|SaveCustomer
operator|.
name|class
argument_list|,
name|Product
operator|.
name|class
argument_list|,
name|Holder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Customer
name|customer
init|=
operator|new
name|Customer
argument_list|()
decl_stmt|;
name|customer
operator|.
name|setName
argument_list|(
literal|"TestCustomerToo"
argument_list|)
expr_stmt|;
name|customer
operator|.
name|setRevenue
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
name|SaveCustomer
name|saveCustomer
init|=
operator|new
name|SaveCustomer
argument_list|()
decl_stmt|;
name|saveCustomer
operator|.
name|setCustomer
argument_list|(
name|customer
argument_list|)
expr_stmt|;
name|Product
name|product
init|=
operator|new
name|Product
argument_list|()
decl_stmt|;
name|product
operator|.
name|setName
argument_list|(
literal|"Multiuse Product"
argument_list|)
expr_stmt|;
name|product
operator|.
name|setDescription
argument_list|(
literal|"Useful for lots of things."
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|Company
argument_list|>
name|holder
init|=
operator|new
name|Holder
argument_list|<
name|Company
argument_list|>
argument_list|()
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[]
block|{
name|saveCustomer
block|,
name|product
block|,
name|holder
block|}
decl_stmt|;
name|beanInvocation
operator|.
name|setArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|beanInvocation
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exchange
operator|.
name|getException
argument_list|()
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|headers
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|SoapJaxbDataFormat
operator|.
name|SOAP_UNMARSHALLED_HEADER_LIST
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|headers
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Object
name|companyHeaderObj
init|=
name|headers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|companyHeaderObj
operator|instanceof
name|Company
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Company
operator|)
name|companyHeaderObj
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MultipartSoft"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

