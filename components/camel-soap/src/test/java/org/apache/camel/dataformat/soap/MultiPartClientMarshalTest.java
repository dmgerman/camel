begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.soap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|GetCustomersByName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|MultiPartCustomerService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|Product
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xquery
operator|.
name|XQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|soap
operator|.
name|name
operator|.
name|ServiceInterfaceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MultiPartClientMarshalTest
specifier|public
class|class
name|MultiPartClientMarshalTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceInterfaceStrategy
name|strat
init|=
operator|new
name|ServiceInterfaceStrategy
argument_list|(
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|MultiPartCustomerService
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SoapJaxbDataFormat
name|soapDataFormat
init|=
operator|new
name|SoapJaxbDataFormat
argument_list|(
literal|"com.example.customerservice.multipart"
argument_list|,
name|strat
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|(
name|soapDataFormat
argument_list|)
operator|.
name|log
argument_list|(
literal|"marshal to: ${body}"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testSendPayload ()
specifier|public
name|void
name|testSendPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|BeanInvocation
name|beanInvocation
init|=
operator|new
name|BeanInvocation
argument_list|()
decl_stmt|;
name|GetCustomersByName
name|getCustomersByName
init|=
operator|new
name|GetCustomersByName
argument_list|()
decl_stmt|;
name|getCustomersByName
operator|.
name|setName
argument_list|(
literal|"Dr. Multipart"
argument_list|)
expr_stmt|;
name|beanInvocation
operator|.
name|setMethod
argument_list|(
name|MultiPartCustomerService
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getCustomersByName"
argument_list|,
name|GetCustomersByName
operator|.
name|class
argument_list|,
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|Product
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Product
name|product
init|=
operator|new
name|Product
argument_list|()
decl_stmt|;
name|product
operator|.
name|setName
argument_list|(
literal|"Multiuse Product"
argument_list|)
expr_stmt|;
name|product
operator|.
name|setDescription
argument_list|(
literal|"Useful for lots of things."
argument_list|)
expr_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[]
block|{
name|getCustomersByName
block|,
name|product
block|}
decl_stmt|;
name|beanInvocation
operator|.
name|setArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|beanInvocation
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exchange
operator|.
name|getException
argument_list|()
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|nsMap
operator|.
name|put
argument_list|(
literal|"soap"
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/envelope/"
argument_list|)
expr_stmt|;
name|nsMap
operator|.
name|put
argument_list|(
literal|"example"
argument_list|,
literal|"http://multipart.customerservice.example.com/"
argument_list|)
expr_stmt|;
name|XQueryBuilder
name|builder
init|=
name|XQueryBuilder
operator|.
name|xquery
argument_list|(
literal|"//soap:Envelope/soap:Header/example:product/name"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setNamespaces
argument_list|(
name|nsMap
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|builder
operator|.
name|evaluateAsString
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|equals
argument_list|(
literal|"Multiuse Product"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|XQueryBuilder
operator|.
name|xquery
argument_list|(
literal|"//soap:Envelope/soap:Body/example:getCustomersByName/name"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNamespaces
argument_list|(
name|nsMap
argument_list|)
expr_stmt|;
name|result
operator|=
name|builder
operator|.
name|evaluateAsString
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|equals
argument_list|(
literal|"Dr. Multipart"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

