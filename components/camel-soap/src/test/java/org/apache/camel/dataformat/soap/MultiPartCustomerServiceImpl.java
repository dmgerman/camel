begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.soap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|Company
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|CompanyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|Customer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|GetAllCustomersResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|GetCustomersByName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|GetCustomersByNameResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|MultiPartCustomerService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|Product
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|multipart
operator|.
name|SaveCustomer
import|;
end_import

begin_class
DECL|class|MultiPartCustomerServiceImpl
specifier|public
class|class
name|MultiPartCustomerServiceImpl
implements|implements
name|MultiPartCustomerService
block|{
DECL|field|lastSavedCustomer
specifier|private
name|Customer
name|lastSavedCustomer
decl_stmt|;
annotation|@
name|Override
DECL|method|getCustomersByName (GetCustomersByName parameters, Product product)
specifier|public
name|GetCustomersByNameResponse
name|getCustomersByName
parameter_list|(
name|GetCustomersByName
name|parameters
parameter_list|,
name|Product
name|product
parameter_list|)
block|{
if|if
condition|(
name|product
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"product may not be null"
argument_list|)
throw|;
block|}
name|GetCustomersByNameResponse
name|response
init|=
operator|new
name|GetCustomersByNameResponse
argument_list|()
decl_stmt|;
name|Customer
name|customer
init|=
operator|new
name|Customer
argument_list|()
decl_stmt|;
name|customer
operator|.
name|setName
argument_list|(
name|product
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|customer
operator|.
name|setRevenue
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|response
operator|.
name|getReturn
argument_list|()
operator|.
name|add
argument_list|(
name|customer
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|saveCustomer (SaveCustomer parameters, Product product, Holder<Company> company)
specifier|public
name|void
name|saveCustomer
parameter_list|(
name|SaveCustomer
name|parameters
parameter_list|,
name|Product
name|product
parameter_list|,
name|Holder
argument_list|<
name|Company
argument_list|>
name|company
parameter_list|)
block|{
if|if
condition|(
name|product
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"product may not be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|company
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"company may not be null."
argument_list|)
throw|;
block|}
name|Company
name|returnCompany
init|=
operator|new
name|Company
argument_list|()
decl_stmt|;
name|returnCompany
operator|.
name|setName
argument_list|(
literal|"MultipartSoft"
argument_list|)
expr_stmt|;
name|returnCompany
operator|.
name|setPresident
argument_list|(
literal|"Dr. Multipart"
argument_list|)
expr_stmt|;
name|company
operator|.
name|value
operator|=
name|returnCompany
expr_stmt|;
name|lastSavedCustomer
operator|=
name|parameters
operator|.
name|getCustomer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllCustomers (Holder<GetAllCustomersResponse> parameters, Holder<CompanyType> companyType)
specifier|public
name|void
name|getAllCustomers
parameter_list|(
name|Holder
argument_list|<
name|GetAllCustomersResponse
argument_list|>
name|parameters
parameter_list|,
name|Holder
argument_list|<
name|CompanyType
argument_list|>
name|companyType
parameter_list|)
block|{
if|if
condition|(
name|companyType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"companyType may not be null"
argument_list|)
throw|;
block|}
name|GetAllCustomersResponse
name|response
init|=
operator|new
name|GetAllCustomersResponse
argument_list|()
decl_stmt|;
name|Customer
name|customer
init|=
operator|new
name|Customer
argument_list|()
decl_stmt|;
name|customer
operator|.
name|setName
argument_list|(
literal|"Smith"
argument_list|)
expr_stmt|;
name|customer
operator|.
name|setRevenue
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|response
operator|.
name|getReturn
argument_list|()
operator|.
name|add
argument_list|(
name|customer
argument_list|)
expr_stmt|;
block|}
DECL|method|getLastSavedCustomer ()
specifier|public
name|Customer
name|getLastSavedCustomer
parameter_list|()
block|{
return|return
name|lastSavedCustomer
return|;
block|}
annotation|@
name|Override
DECL|method|saveCustomerToo (SaveCustomer parameters, Product product, Holder<Company> company)
specifier|public
name|void
name|saveCustomerToo
parameter_list|(
name|SaveCustomer
name|parameters
parameter_list|,
name|Product
name|product
parameter_list|,
name|Holder
argument_list|<
name|Company
argument_list|>
name|company
parameter_list|)
block|{
if|if
condition|(
name|product
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"product may not be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|company
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"company may not be null."
argument_list|)
throw|;
block|}
name|Company
name|returnCompany
init|=
operator|new
name|Company
argument_list|()
decl_stmt|;
name|returnCompany
operator|.
name|setName
argument_list|(
literal|"MultipartSoft"
argument_list|)
expr_stmt|;
name|returnCompany
operator|.
name|setPresident
argument_list|(
literal|"Dr. Multipart"
argument_list|)
expr_stmt|;
name|company
operator|.
name|value
operator|=
name|returnCompany
expr_stmt|;
name|lastSavedCustomer
operator|=
name|parameters
operator|.
name|getCustomer
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

