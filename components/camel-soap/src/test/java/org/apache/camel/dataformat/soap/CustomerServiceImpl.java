begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.soap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|Customer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|CustomerService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|GetAllAmericanCustomersResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|GetAllCustomersResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|GetCustomersByName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|GetCustomersByNameResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|NoSuchCustomer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|NoSuchCustomerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|SaveCustomer
import|;
end_import

begin_comment
comment|/**  * Simple implementation of CustomerService that supports returning a customer  * or a NoSuchCustomerException depending on input  */
end_comment

begin_class
DECL|class|CustomerServiceImpl
specifier|public
class|class
name|CustomerServiceImpl
implements|implements
name|CustomerService
block|{
DECL|field|lastSavedCustomer
specifier|private
name|Customer
name|lastSavedCustomer
decl_stmt|;
DECL|method|getLastSavedCustomer ()
specifier|public
name|Customer
name|getLastSavedCustomer
parameter_list|()
block|{
return|return
name|lastSavedCustomer
return|;
block|}
DECL|method|setLastSavedCustomer (Customer lastSavedCustomer)
specifier|public
name|void
name|setLastSavedCustomer
parameter_list|(
name|Customer
name|lastSavedCustomer
parameter_list|)
block|{
name|this
operator|.
name|lastSavedCustomer
operator|=
name|lastSavedCustomer
expr_stmt|;
block|}
comment|/**      * If the request.name is "none" a NoSuchCustomerException is thrown in any      * other case a dummy customer is returned that has the same name as the      * request      */
DECL|method|getCustomersByName (GetCustomersByName request)
specifier|public
name|GetCustomersByNameResponse
name|getCustomersByName
parameter_list|(
name|GetCustomersByName
name|request
parameter_list|)
throws|throws
name|NoSuchCustomerException
block|{
if|if
condition|(
literal|"none"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|NoSuchCustomer
name|noSuchCustomer
init|=
operator|new
name|NoSuchCustomer
argument_list|()
decl_stmt|;
name|noSuchCustomer
operator|.
name|setCustomerId
argument_list|(
name|request
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchCustomerException
argument_list|(
literal|"Customer not found"
argument_list|,
name|noSuchCustomer
argument_list|)
throw|;
block|}
name|GetCustomersByNameResponse
name|response
init|=
operator|new
name|GetCustomersByNameResponse
argument_list|()
decl_stmt|;
name|Customer
name|customer
init|=
operator|new
name|Customer
argument_list|()
decl_stmt|;
name|customer
operator|.
name|setName
argument_list|(
name|request
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|customer
operator|.
name|setRevenue
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|response
operator|.
name|getReturn
argument_list|()
operator|.
name|add
argument_list|(
name|customer
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**      * This method is to test a call without input parameter      */
DECL|method|getAllCustomers ()
specifier|public
name|GetAllCustomersResponse
name|getAllCustomers
parameter_list|()
block|{
name|GetAllCustomersResponse
name|response
init|=
operator|new
name|GetAllCustomersResponse
argument_list|()
decl_stmt|;
name|Customer
name|customer
init|=
operator|new
name|Customer
argument_list|()
decl_stmt|;
name|customer
operator|.
name|setName
argument_list|(
literal|"Smith"
argument_list|)
expr_stmt|;
name|customer
operator|.
name|setRevenue
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|response
operator|.
name|getReturn
argument_list|()
operator|.
name|add
argument_list|(
name|customer
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**      * This method is to test a call without input parameter      */
DECL|method|getAllAmericanCustomers ()
specifier|public
name|GetAllAmericanCustomersResponse
name|getAllAmericanCustomers
parameter_list|()
block|{
name|GetAllAmericanCustomersResponse
name|response
init|=
operator|new
name|GetAllAmericanCustomersResponse
argument_list|()
decl_stmt|;
name|Customer
name|customer
init|=
operator|new
name|Customer
argument_list|()
decl_stmt|;
name|customer
operator|.
name|setName
argument_list|(
literal|"Schmitz"
argument_list|)
expr_stmt|;
name|customer
operator|.
name|setRevenue
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|response
operator|.
name|getReturn
argument_list|()
operator|.
name|add
argument_list|(
name|customer
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|saveCustomer (SaveCustomer request)
specifier|public
name|void
name|saveCustomer
parameter_list|(
name|SaveCustomer
name|request
parameter_list|)
block|{
name|lastSavedCustomer
operator|=
name|request
operator|.
name|getCustomer
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

