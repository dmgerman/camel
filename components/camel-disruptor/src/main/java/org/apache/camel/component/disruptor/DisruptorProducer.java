begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.disruptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|disruptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lmax
operator|.
name|disruptor
operator|.
name|InsufficientCapacityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangeTimedOutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|WaitForTaskToComplete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|SynchronizationAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_comment
comment|/**  * A Producer for the Disruptor component.  */
end_comment

begin_class
DECL|class|DisruptorProducer
specifier|public
class|class
name|DisruptorProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|field|waitForTaskToComplete
specifier|private
specifier|final
name|WaitForTaskToComplete
name|waitForTaskToComplete
decl_stmt|;
DECL|field|timeout
specifier|private
specifier|final
name|long
name|timeout
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|DisruptorEndpoint
name|endpoint
decl_stmt|;
DECL|field|blockWhenFull
specifier|private
name|boolean
name|blockWhenFull
decl_stmt|;
DECL|method|DisruptorProducer (final DisruptorEndpoint endpoint, final WaitForTaskToComplete waitForTaskToComplete, final long timeout, boolean blockWhenFull)
specifier|public
name|DisruptorProducer
parameter_list|(
specifier|final
name|DisruptorEndpoint
name|endpoint
parameter_list|,
specifier|final
name|WaitForTaskToComplete
name|waitForTaskToComplete
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|,
name|boolean
name|blockWhenFull
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitForTaskToComplete
operator|=
name|waitForTaskToComplete
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|blockWhenFull
operator|=
name|blockWhenFull
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|DisruptorEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|getEndpoint
argument_list|()
operator|.
name|onStarted
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|getEndpoint
argument_list|()
operator|.
name|onStopped
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|WaitForTaskToComplete
name|wait
init|=
name|waitForTaskToComplete
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|ASYNC_WAIT
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|wait
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|ASYNC_WAIT
argument_list|,
name|WaitForTaskToComplete
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wait
operator|==
name|WaitForTaskToComplete
operator|.
name|Always
operator|||
operator|(
name|wait
operator|==
name|WaitForTaskToComplete
operator|.
name|IfReplyExpected
operator|&&
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
operator|)
condition|)
block|{
comment|// do not handover the completion as we wait for the copy to complete, and copy its result back when it done
specifier|final
name|Exchange
name|copy
init|=
name|prepareCopy
argument_list|(
name|exchange
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// latch that waits until we are complete
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// we should wait for the reply so install a on completion so we know when its complete
name|copy
operator|.
name|addOnCompletion
argument_list|(
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
specifier|final
name|Exchange
name|response
parameter_list|)
block|{
comment|// check for timeout, which then already would have invoked the latch
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{}. Timeout occurred so response will be ignored: {}"
argument_list|,
name|this
argument_list|,
name|response
operator|.
name|hasOut
argument_list|()
condition|?
name|response
operator|.
name|getOut
argument_list|()
else|:
name|response
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} with response: {}"
argument_list|,
name|this
argument_list|,
name|response
operator|.
name|hasOut
argument_list|()
condition|?
name|response
operator|.
name|getOut
argument_list|()
else|:
name|response
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ExchangeHelper
operator|.
name|copyResults
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// always ensure latch is triggered
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowHandover
parameter_list|()
block|{
comment|// do not allow handover as we want to seda producer to have its completion triggered
comment|// at this point in the routing (at this leg), instead of at the very last (this ensure timeout is honored)
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"onDone at endpoint: "
operator|+
name|endpoint
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doPublish
argument_list|(
name|copy
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Waiting for task to complete using timeout (ms): {} at [{}]"
argument_list|,
name|timeout
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// lets see if we can get the task done before the timeout
name|boolean
name|done
init|=
literal|false
decl_stmt|;
try|try
block|{
name|done
operator|=
name|latch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
comment|// Remove timed out Exchange from disruptor endpoint.
comment|// We can't actually remove a published exchange from an active Disruptor.
comment|// Instead we prevent processing of the exchange by setting a Property on the exchange and the value
comment|// would be an AtomicBoolean. This is set by the Producer and the Consumer would look up that Property and
comment|// check the AtomicBoolean. If the AtomicBoolean says that we are good to proceed, it will process the
comment|// exchange. If false, it will simply disregard the exchange.
comment|// But since the Property map is a Concurrent one, maybe we don't need the AtomicBoolean. Check with Simon.
comment|// Also check the TimeoutHandler of the new Disruptor 3.0.0, consider making the switch to the latest version.
name|exchange
operator|.
name|setProperty
argument_list|(
name|DisruptorEndpoint
operator|.
name|DISRUPTOR_IGNORE_EXCHANGE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|ExchangeTimedOutException
argument_list|(
name|exchange
argument_list|,
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
comment|// count down to indicate timeout
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Waiting for task to complete (blocking) at [{}]"
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// no timeout then wait until its done
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
else|else
block|{
comment|// no wait, eg its a InOnly then just publish to the ringbuffer and return
comment|// handover the completion so its the copy which performs that, as we do not wait
specifier|final
name|Exchange
name|copy
init|=
name|prepareCopy
argument_list|(
name|exchange
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doPublish
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
comment|// we use OnCompletion on the Exchange to callback and wait for the Exchange to be done
comment|// so we should just signal the callback we are done synchronously
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|doPublish (Exchange exchange)
specifier|private
name|void
name|doPublish
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Publishing Exchange to disruptor ringbuffer: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|blockWhenFull
condition|)
block|{
name|endpoint
operator|.
name|publish
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|.
name|tryPublish
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DisruptorNotStartedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Disruptor was not started"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InsufficientCapacityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Disruptors ringbuffer was full"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|prepareCopy (final Exchange exchange, final boolean handover)
specifier|private
name|Exchange
name|prepareCopy
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|boolean
name|handover
parameter_list|)
block|{
comment|// use a new copy of the exchange to route async
specifier|final
name|Exchange
name|copy
init|=
name|ExchangeHelper
operator|.
name|createCorrelatedCopy
argument_list|(
name|exchange
argument_list|,
name|handover
argument_list|)
decl_stmt|;
comment|// set a new from endpoint to be the disruptor
name|copy
operator|.
name|setFromEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
block|}
end_class

end_unit

