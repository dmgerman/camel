begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.disruptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|disruptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This abstract base class is used to implement the {@link LifecycleAwareExchangeEventHandler} interface with added  * support to await starting/stopping by the Disruptor framework.  */
end_comment

begin_class
DECL|class|AbstractLifecycleAwareExchangeEventHandler
specifier|abstract
class|class
name|AbstractLifecycleAwareExchangeEventHandler
implements|implements
name|LifecycleAwareExchangeEventHandler
block|{
DECL|field|started
specifier|private
specifier|volatile
name|boolean
name|started
decl_stmt|;
DECL|field|startedLatch
specifier|private
specifier|volatile
name|CountDownLatch
name|startedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|stoppedLatch
specifier|private
specifier|volatile
name|CountDownLatch
name|stoppedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|onEvent (ExchangeEvent event, long sequence, boolean endOfBatch)
specifier|public
specifier|abstract
name|void
name|onEvent
parameter_list|(
name|ExchangeEvent
name|event
parameter_list|,
name|long
name|sequence
parameter_list|,
name|boolean
name|endOfBatch
parameter_list|)
throws|throws
name|Exception
function_decl|;
annotation|@
name|Override
DECL|method|awaitStarted ()
specifier|public
name|void
name|awaitStarted
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|started
condition|)
block|{
name|startedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|awaitStarted (final long timeout, final TimeUnit unit)
specifier|public
name|boolean
name|awaitStarted
parameter_list|(
specifier|final
name|long
name|timeout
parameter_list|,
specifier|final
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|started
operator|||
name|startedLatch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|awaitStopped ()
specifier|public
name|void
name|awaitStopped
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|started
condition|)
block|{
name|stoppedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|awaitStopped (final long timeout, final TimeUnit unit)
specifier|public
name|boolean
name|awaitStopped
parameter_list|(
specifier|final
name|long
name|timeout
parameter_list|,
specifier|final
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
operator|!
name|started
operator|||
name|stoppedLatch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onStart ()
specifier|public
name|void
name|onStart
parameter_list|()
block|{
name|stoppedLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onShutdown ()
specifier|public
name|void
name|onShutdown
parameter_list|()
block|{
name|startedLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stoppedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|started
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

