begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.disruptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|disruptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnitOfWorkHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is a mutable reference to an {@link Exchange}, used as contents of the Disruptors ringbuffer  */
end_comment

begin_class
DECL|class|ExchangeEvent
specifier|public
class|class
name|ExchangeEvent
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExchangeEvent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|expectedConsumers
specifier|private
specifier|volatile
name|int
name|expectedConsumers
decl_stmt|;
DECL|field|processedConsumers
specifier|private
specifier|final
name|AtomicInteger
name|processedConsumers
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|results
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|List
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|AtomicReference
argument_list|<
name|List
argument_list|<
name|Exchange
argument_list|>
argument_list|>
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Exchange
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|getExchange ()
specifier|public
name|Exchange
name|getExchange
parameter_list|()
block|{
return|return
name|exchange
return|;
block|}
DECL|method|setExchange (final Exchange exchange, int expectedConsumers)
specifier|public
name|void
name|setExchange
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
name|int
name|expectedConsumers
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|expectedConsumers
operator|=
name|expectedConsumers
expr_stmt|;
name|processedConsumers
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|consumed (Exchange result)
specifier|public
name|void
name|consumed
parameter_list|(
name|Exchange
name|result
parameter_list|)
block|{
if|if
condition|(
name|expectedConsumers
operator|>
literal|1
condition|)
block|{
name|results
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processedConsumers
operator|.
name|incrementAndGet
argument_list|()
operator|==
name|expectedConsumers
condition|)
block|{
comment|// all consumers are done processing
if|if
condition|(
name|expectedConsumers
operator|==
literal|1
condition|)
block|{
comment|// this was the only consumer, call synchronizations with this result
name|UnitOfWorkHelper
operator|.
name|doneSynchronizations
argument_list|(
name|result
argument_list|,
name|exchange
operator|.
name|handoverCompletions
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this was the last consumer but we had more
comment|// set the list of results as GROUPED_EXCHANGE property on the original exchange instead
name|List
argument_list|<
name|Exchange
argument_list|>
name|localResults
init|=
name|results
operator|.
name|getAndSet
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Exchange
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|GROUPED_EXCHANGE
argument_list|,
name|localResults
argument_list|)
expr_stmt|;
name|UnitOfWorkHelper
operator|.
name|doneSynchronizations
argument_list|(
name|exchange
argument_list|,
name|exchange
operator|.
name|handoverCompletions
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ExchangeEvent{"
operator|+
literal|"exchange="
operator|+
name|exchange
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

