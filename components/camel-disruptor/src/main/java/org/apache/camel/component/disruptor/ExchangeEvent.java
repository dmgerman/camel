begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.disruptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|disruptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_comment
comment|/**  * This is a mutable reference to an {@link Exchange}, used as contents of the Disruptors ringbuffer  */
end_comment

begin_class
DECL|class|ExchangeEvent
specifier|public
class|class
name|ExchangeEvent
block|{
DECL|field|synchronizedExchange
specifier|private
name|SynchronizedExchange
name|synchronizedExchange
decl_stmt|;
DECL|method|getSynchronizedExchange ()
specifier|public
name|SynchronizedExchange
name|getSynchronizedExchange
parameter_list|()
block|{
return|return
name|synchronizedExchange
return|;
block|}
DECL|method|setExchange (final Exchange exchange, int expectedConsumers)
specifier|public
name|void
name|setExchange
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
name|int
name|expectedConsumers
parameter_list|)
block|{
name|synchronizedExchange
operator|=
name|createSynchronizedExchange
argument_list|(
name|exchange
argument_list|,
name|expectedConsumers
argument_list|)
expr_stmt|;
block|}
DECL|method|createSynchronizedExchange (Exchange exchange, int expectedConsumers)
specifier|private
name|SynchronizedExchange
name|createSynchronizedExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|int
name|expectedConsumers
parameter_list|)
block|{
if|if
condition|(
name|expectedConsumers
operator|>
literal|1
condition|)
block|{
return|return
operator|new
name|MultipleConsumerSynchronizedExchange
argument_list|(
name|exchange
argument_list|,
name|expectedConsumers
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SingleConsumerSynchronizedExchange
argument_list|(
name|exchange
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ExchangeEvent{"
operator|+
literal|"exchange="
operator|+
name|synchronizedExchange
operator|.
name|getExchange
argument_list|()
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

