begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.disruptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|disruptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests some of the basic disruptor functionality  */
end_comment

begin_class
DECL|class|BasicDisruptorComponentTest
specifier|public
class|class
name|BasicDisruptorComponentTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|VALUE
specifier|private
specifier|static
specifier|final
name|Integer
name|VALUE
init|=
literal|42
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|resultEndpoint
specifier|private
name|MockEndpoint
name|resultEndpoint
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"disruptor:test"
argument_list|)
DECL|field|template
specifier|private
name|ProducerTemplate
name|template
decl_stmt|;
DECL|field|threadCounter
specifier|private
specifier|final
name|ThreadCounter
name|threadCounter
init|=
operator|new
name|ThreadCounter
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testProduce ()
specifier|public
name|void
name|testProduce
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|resultEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|VALUE
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"disruptor:test"
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleConsumers ()
specifier|public
name|void
name|testMultipleConsumers
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|threadCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|int
name|messagesSent
init|=
literal|1000
decl_stmt|;
name|resultEndpoint
operator|.
name|setExpectedMessageCount
argument_list|(
name|messagesSent
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesSent
condition|;
operator|++
name|i
control|)
block|{
name|template
operator|.
name|asyncSendBody
argument_list|(
literal|"disruptor:testMultipleConsumers"
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
name|resultEndpoint
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|//sleep for another second to check for duplicate messages in transit
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|int
name|count
init|=
name|threadCounter
operator|.
name|getThreadIdCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should be "
operator|+
name|count
operator|+
literal|">= 4"
argument_list|,
name|count
operator|>=
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"disruptor:test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"disruptor:testMultipleConsumers?concurrentConsumers=4"
argument_list|)
operator|.
name|process
argument_list|(
name|threadCounter
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|ThreadCounter
specifier|private
specifier|static
specifier|final
class|class
name|ThreadCounter
implements|implements
name|Processor
block|{
DECL|field|threadIds
specifier|private
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|threadIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|threadIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|threadIds
operator|.
name|add
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getThreadIds ()
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getThreadIds
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|threadIds
argument_list|)
return|;
block|}
DECL|method|getThreadIdCount ()
specifier|public
name|int
name|getThreadIdCount
parameter_list|()
block|{
return|return
name|threadIds
operator|.
name|size
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

