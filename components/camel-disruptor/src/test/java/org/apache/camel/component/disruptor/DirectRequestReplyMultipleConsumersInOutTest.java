begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.disruptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|disruptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version  */
end_comment

begin_class
DECL|class|DirectRequestReplyMultipleConsumersInOutTest
specifier|public
class|class
name|DirectRequestReplyMultipleConsumersInOutTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testInOut ()
specifier|public
name|void
name|testInOut
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedBodies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Bye World-1"
argument_list|,
literal|"Bye World-2"
argument_list|)
argument_list|)
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:log"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
name|expectedBodies
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|out
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bye World"
argument_list|,
name|getOutBody
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Exchange
argument_list|>
name|groupedExchange
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|out
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|GROUPED_EXCHANGE
argument_list|,
name|List
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected a grouped exchange property, found none"
argument_list|,
name|groupedExchange
argument_list|)
expr_stmt|;
for|for
control|(
name|Exchange
name|exchange
range|:
name|groupedExchange
control|)
block|{
name|assertTrue
argument_list|(
literal|"Body of grouped exchange property '"
operator|+
name|getOutBody
argument_list|(
name|exchange
argument_list|)
operator|+
literal|"' did not match any expected body"
argument_list|,
name|expectedBodies
operator|.
name|remove
argument_list|(
name|getOutBody
argument_list|(
name|exchange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Got reply "
operator|+
name|out
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|getOutBody (Exchange exchange)
specifier|private
name|Object
name|getOutBody
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
operator|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
operator|)
operator|.
name|getBody
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// send the message as InOnly to DISRUPTOR as we want to continue routing
comment|// (as we don't want to do request/reply over DISRUPTOR)
comment|// In EIP patterns the WireTap pattern is what this would be
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|transform
argument_list|(
name|constant
argument_list|(
literal|"Bye World"
argument_list|)
argument_list|)
operator|.
name|inOut
argument_list|(
literal|"disruptor:log?multipleConsumers=true"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"disruptor:log?multipleConsumers=true"
argument_list|)
operator|.
name|delay
argument_list|(
literal|100
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|append
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:log"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"disruptor:log?multipleConsumers=true"
argument_list|)
operator|.
name|delay
argument_list|(
literal|1000
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|append
argument_list|(
literal|"-2"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:log"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

