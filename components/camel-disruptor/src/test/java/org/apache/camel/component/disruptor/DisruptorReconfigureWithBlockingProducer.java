begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.disruptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|disruptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DisruptorReconfigureWithBlockingProducer
specifier|public
class|class
name|DisruptorReconfigureWithBlockingProducer
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testDisruptorReconfigureWithBlockingProducer ()
specifier|public
name|void
name|testDisruptorReconfigureWithBlockingProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|long
name|beforeStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ProducerThread
name|producerThread
init|=
operator|new
name|ProducerThread
argument_list|()
decl_stmt|;
name|producerThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//synchronize with the producer to the point that the buffer is full
name|assertTrue
argument_list|(
name|producerThread
operator|.
name|awaitFullBufferProduced
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"disruptor:foo?multipleConsumers=true&size=8"
argument_list|)
operator|.
name|id
argument_list|(
literal|"testRoute"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:b"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// adding the consumer may take place after the current buffer is flushed
comment|// which will take approximately 8*200=1600 ms because of delay on route.
comment|// If the reconfigure does not correctly hold back the producer thread on this request,
comment|// it will take approximately 20*200=4000 ms.
comment|// be on the safe side and check that it was at least faster than 2 seconds.
name|assertTrue
argument_list|(
literal|"Reconfigure of Disruptor blocked"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|beforeStart
operator|)
operator|<
literal|2000
argument_list|)
expr_stmt|;
comment|//Wait and check that the producer has produced all messages without throwing an exception
name|assertTrue
argument_list|(
name|producerThread
operator|.
name|checkResult
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"disruptor:foo?multipleConsumers=true&size=8"
argument_list|)
operator|.
name|delay
argument_list|(
literal|200
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:a"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|ProducerThread
specifier|private
class|class
name|ProducerThread
extends|extends
name|Thread
block|{
DECL|field|startedLatch
specifier|private
specifier|final
name|CountDownLatch
name|startedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|resultLatch
specifier|private
specifier|final
name|CountDownLatch
name|resultLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|exception
specifier|private
name|Exception
name|exception
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"disruptor:foo"
argument_list|,
literal|"Message"
argument_list|)
expr_stmt|;
block|}
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"disruptor:foo"
argument_list|,
literal|"Message"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|resultLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|awaitFullBufferProduced ()
specifier|public
name|boolean
name|awaitFullBufferProduced
parameter_list|()
throws|throws
name|InterruptedException
block|{
return|return
name|startedLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|checkResult ()
specifier|public
name|boolean
name|checkResult
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
name|boolean
name|result
init|=
name|resultLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

