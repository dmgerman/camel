begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.disruptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|disruptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|WaitForTaskToComplete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version  */
end_comment

begin_class
DECL|class|DisruptorConfigureTest
specifier|public
class|class
name|DisruptorConfigureTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testSizeConfigured ()
specifier|public
name|void
name|testSizeConfigured
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo?size=2000"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|2048
argument_list|,
name|endpoint
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRemainingCapacity"
argument_list|,
literal|2048
argument_list|,
name|endpoint
operator|.
name|getRemainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIllegalSizeZeroConfigured ()
specifier|public
name|void
name|testIllegalSizeZeroConfigured
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo?size=0"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResolveEndpointFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to resolve endpoint: disruptor://foo?size=0 due to: size found to be 0, must be greater than 0"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSizeThroughBufferSizeComponentProperty ()
specifier|public
name|void
name|testSizeThroughBufferSizeComponentProperty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DisruptorComponent
name|disruptor
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"disruptor"
argument_list|,
name|DisruptorComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|disruptor
operator|.
name|setBufferSize
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|disruptor
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|2048
argument_list|,
name|endpoint
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRemainingCapacity"
argument_list|,
literal|2048
argument_list|,
name|endpoint
operator|.
name|getRemainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSizeThroughQueueSizeComponentProperty ()
specifier|public
name|void
name|testSizeThroughQueueSizeComponentProperty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DisruptorComponent
name|disruptor
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"disruptor"
argument_list|,
name|DisruptorComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|disruptor
operator|.
name|setQueueSize
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|disruptor
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|2048
argument_list|,
name|endpoint
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRemainingCapacity"
argument_list|,
literal|2048
argument_list|,
name|endpoint
operator|.
name|getRemainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleConsumersConfigured ()
specifier|public
name|void
name|testMultipleConsumersConfigured
parameter_list|()
block|{
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo?multipleConsumers=true"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"multipleConsumers"
argument_list|,
literal|true
argument_list|,
name|endpoint
operator|.
name|isMultipleConsumers
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultMultipleConsumersComponentProperty ()
specifier|public
name|void
name|testDefaultMultipleConsumersComponentProperty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DisruptorComponent
name|disruptor
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"disruptor"
argument_list|,
name|DisruptorComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|disruptor
operator|.
name|setDefaultMultipleConsumers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|disruptor
operator|.
name|isDefaultMultipleConsumers
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"multipleConsumers"
argument_list|,
literal|true
argument_list|,
name|endpoint
operator|.
name|isMultipleConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multipleConsumers"
argument_list|,
literal|true
argument_list|,
name|endpoint
operator|.
name|isMultipleConsumersSupported
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducerTypeConfigured ()
specifier|public
name|void
name|testProducerTypeConfigured
parameter_list|()
block|{
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo?producerType=Single"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"producerType"
argument_list|,
name|DisruptorProducerType
operator|.
name|Single
argument_list|,
name|endpoint
operator|.
name|getDisruptor
argument_list|()
operator|.
name|getProducerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultProducerTypeComponentProperty ()
specifier|public
name|void
name|testDefaultProducerTypeComponentProperty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DisruptorComponent
name|disruptor
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"disruptor"
argument_list|,
name|DisruptorComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|disruptor
operator|.
name|setDefaultProducerType
argument_list|(
name|DisruptorProducerType
operator|.
name|Single
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DisruptorProducerType
operator|.
name|Single
argument_list|,
name|disruptor
operator|.
name|getDefaultProducerType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"producerType"
argument_list|,
name|DisruptorProducerType
operator|.
name|Single
argument_list|,
name|endpoint
operator|.
name|getDisruptor
argument_list|()
operator|.
name|getProducerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWaitStrategyConfigured ()
specifier|public
name|void
name|testWaitStrategyConfigured
parameter_list|()
block|{
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo?waitStrategy=BusySpin"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"waitStrategy"
argument_list|,
name|DisruptorWaitStrategy
operator|.
name|BusySpin
argument_list|,
name|endpoint
operator|.
name|getDisruptor
argument_list|()
operator|.
name|getWaitStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultWaitStrategyComponentProperty ()
specifier|public
name|void
name|testDefaultWaitStrategyComponentProperty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DisruptorComponent
name|disruptor
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"disruptor"
argument_list|,
name|DisruptorComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|disruptor
operator|.
name|setDefaultWaitStrategy
argument_list|(
name|DisruptorWaitStrategy
operator|.
name|BusySpin
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DisruptorWaitStrategy
operator|.
name|BusySpin
argument_list|,
name|disruptor
operator|.
name|getDefaultWaitStrategy
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"waitStrategy"
argument_list|,
name|DisruptorWaitStrategy
operator|.
name|BusySpin
argument_list|,
name|endpoint
operator|.
name|getDisruptor
argument_list|()
operator|.
name|getWaitStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcurrentConsumersConfigured ()
specifier|public
name|void
name|testConcurrentConsumersConfigured
parameter_list|()
block|{
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo?concurrentConsumers=5"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|5
argument_list|,
name|endpoint
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultConcurrentConsumersComponentProperty ()
specifier|public
name|void
name|testDefaultConcurrentConsumersComponentProperty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DisruptorComponent
name|disruptor
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"disruptor"
argument_list|,
name|DisruptorComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|disruptor
operator|.
name|setDefaultConcurrentConsumers
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|disruptor
operator|.
name|getDefaultConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|5
argument_list|,
name|endpoint
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWaitForTaskToCompleteConfigured ()
specifier|public
name|void
name|testWaitForTaskToCompleteConfigured
parameter_list|()
block|{
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo?waitForTaskToComplete=Never"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"waitForTaskToComplete"
argument_list|,
name|WaitForTaskToComplete
operator|.
name|Never
argument_list|,
name|endpoint
operator|.
name|getWaitForTaskToComplete
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaults ()
specifier|public
name|void
name|testDefaults
parameter_list|()
block|{
specifier|final
name|DisruptorEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"disruptor:foo"
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumers: wrong default"
argument_list|,
literal|1
argument_list|,
name|endpoint
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bufferSize: wrong default"
argument_list|,
name|DisruptorComponent
operator|.
name|DEFAULT_BUFFER_SIZE
argument_list|,
name|endpoint
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"timeout: wrong default"
argument_list|,
literal|30000L
argument_list|,
name|endpoint
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"waitForTaskToComplete: wrong default"
argument_list|,
name|WaitForTaskToComplete
operator|.
name|IfReplyExpected
argument_list|,
name|endpoint
operator|.
name|getWaitForTaskToComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DisruptorWaitStrategy: wrong default"
argument_list|,
name|DisruptorWaitStrategy
operator|.
name|Blocking
argument_list|,
name|endpoint
operator|.
name|getDisruptor
argument_list|()
operator|.
name|getWaitStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multipleConsumers: wrong default"
argument_list|,
literal|false
argument_list|,
name|endpoint
operator|.
name|isMultipleConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multipleConsumersSupported"
argument_list|,
literal|false
argument_list|,
name|endpoint
operator|.
name|isMultipleConsumersSupported
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"producerType"
argument_list|,
name|DisruptorProducerType
operator|.
name|Multi
argument_list|,
name|endpoint
operator|.
name|getDisruptor
argument_list|()
operator|.
name|getProducerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

