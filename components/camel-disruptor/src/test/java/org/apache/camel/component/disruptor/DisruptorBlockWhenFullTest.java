begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.disruptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|disruptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests that a Disruptor producer blocks when a message is sent while the ring buffer is full.  */
end_comment

begin_class
DECL|class|DisruptorBlockWhenFullTest
specifier|public
class|class
name|DisruptorBlockWhenFullTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|QUEUE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|QUEUE_SIZE
init|=
literal|8
decl_stmt|;
DECL|field|DELAY
specifier|private
specifier|static
specifier|final
name|int
name|DELAY
init|=
literal|100
decl_stmt|;
DECL|field|MOCK_URI
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_URI
init|=
literal|"mock:blockWhenFullOutput"
decl_stmt|;
DECL|field|DEFAULT_URI
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_URI
init|=
literal|"disruptor:foo?size="
operator|+
name|QUEUE_SIZE
decl_stmt|;
DECL|field|EXCEPTION_WHEN_FULL_URI
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_WHEN_FULL_URI
init|=
literal|"disruptor:foo?blockWhenFull=false&size="
operator|+
name|QUEUE_SIZE
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|DEFAULT_URI
argument_list|)
operator|.
name|delay
argument_list|(
name|DELAY
argument_list|)
operator|.
name|to
argument_list|(
name|MOCK_URI
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testDisruptorBlockingWhenFull ()
specifier|public
name|void
name|testDisruptorBlockingWhenFull
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_URI
argument_list|)
operator|.
name|setExpectedMessageCount
argument_list|(
name|QUEUE_SIZE
operator|+
literal|20
argument_list|)
expr_stmt|;
specifier|final
name|DisruptorEndpoint
name|disruptor
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|DEFAULT_URI
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|QUEUE_SIZE
argument_list|,
name|disruptor
operator|.
name|getRemainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|sendSoManyOverCapacity
argument_list|(
name|DEFAULT_URI
argument_list|,
name|QUEUE_SIZE
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CamelExecutionException
operator|.
name|class
argument_list|)
DECL|method|testDisruptorExceptionWhenFull ()
specifier|public
name|void
name|testDisruptorExceptionWhenFull
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_URI
argument_list|)
operator|.
name|setExpectedMessageCount
argument_list|(
name|QUEUE_SIZE
operator|+
literal|20
argument_list|)
expr_stmt|;
specifier|final
name|DisruptorEndpoint
name|disruptor
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|DEFAULT_URI
argument_list|,
name|DisruptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|QUEUE_SIZE
argument_list|,
name|disruptor
operator|.
name|getRemainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|sendSoManyOverCapacity
argument_list|(
name|EXCEPTION_WHEN_FULL_URI
argument_list|,
name|QUEUE_SIZE
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method make sure that we hit the limit by sending 'soMany' messages over the given capacity which allows the      * delayer to kick in.      */
DECL|method|sendSoManyOverCapacity (final String uri, final int capacity, final int soMany)
specifier|private
name|void
name|sendSoManyOverCapacity
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|int
name|capacity
parameter_list|,
specifier|final
name|int
name|soMany
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|capacity
operator|+
name|soMany
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|uri
argument_list|,
literal|"Message "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

