begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|ArmoredOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|CompressionAlgorithmTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPCompressedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPCompressedDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPEncryptedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPEncryptedDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPEncryptedDataList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPLiteralData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPLiteralDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPrivateKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyEncryptedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_comment
comment|/**  *<code>PGPDataFormat</code> uses the bouncy castle libraries to enable  * encryption and decryption in the PGP format I have also tested decrypting the  * files produced using GnuPG Linux command line program gpg (GnuPG) 1.4.11  *<ul>  *<li>http://www.bouncycastle.org/java.html</li>  *<ul>  *<p/>  */
end_comment

begin_class
DECL|class|PGPDataFormat
specifier|public
class|class
name|PGPDataFormat
implements|implements
name|DataFormat
block|{
DECL|field|KEY_PUB
specifier|public
specifier|static
specifier|final
name|String
name|KEY_PUB
init|=
literal|"CamelCryptoKeyPub"
decl_stmt|;
DECL|field|KEY_PRI
specifier|public
specifier|static
specifier|final
name|String
name|KEY_PRI
init|=
literal|"CamelCryptoKeyPri"
decl_stmt|;
DECL|field|configuredKey
specifier|private
name|PGPPublicKey
name|configuredKey
decl_stmt|;
DECL|field|configuredPrivateKey
specifier|private
name|PGPPrivateKey
name|configuredPrivateKey
decl_stmt|;
DECL|field|armor
specifier|private
name|boolean
name|armor
decl_stmt|;
DECL|field|integrity
specifier|private
name|boolean
name|integrity
init|=
literal|true
decl_stmt|;
DECL|method|PGPDataFormat ()
specifier|public
name|PGPDataFormat
parameter_list|()
block|{
if|if
condition|(
name|Security
operator|.
name|getProvider
argument_list|(
literal|"BC"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setArmored (boolean armor)
specifier|public
name|void
name|setArmored
parameter_list|(
name|boolean
name|armor
parameter_list|)
block|{
name|this
operator|.
name|armor
operator|=
name|armor
expr_stmt|;
block|}
DECL|method|setIntegrity (boolean integrity)
specifier|public
name|void
name|setIntegrity
parameter_list|(
name|boolean
name|integrity
parameter_list|)
block|{
name|this
operator|.
name|integrity
operator|=
name|integrity
expr_stmt|;
block|}
comment|/**      * Set the key that should be used to encrypt or decrypt incoming encrypted exchanges.      */
DECL|method|setPublicKey (PGPPublicKey key)
specifier|public
name|void
name|setPublicKey
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|)
block|{
name|this
operator|.
name|configuredKey
operator|=
name|key
expr_stmt|;
block|}
DECL|method|setPrivateKey (PGPPrivateKey key)
specifier|public
name|void
name|setPrivateKey
parameter_list|(
name|PGPPrivateKey
name|key
parameter_list|)
block|{
name|this
operator|.
name|configuredPrivateKey
operator|=
name|key
expr_stmt|;
block|}
DECL|method|marshal (Exchange exchange, Object graph, OutputStream outputStream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|graph
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|PGPPublicKey
name|key
init|=
name|getPublicKey
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Public key is null, cannot proceed"
argument_list|)
throw|;
block|}
name|InputStream
name|plaintextStream
init|=
name|ExchangeHelper
operator|.
name|convertToMandatoryType
argument_list|(
name|exchange
argument_list|,
name|InputStream
operator|.
name|class
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|byte
index|[]
name|compressedData
init|=
name|compress
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|plaintextStream
argument_list|)
argument_list|,
name|PGPLiteralData
operator|.
name|CONSOLE
argument_list|,
name|CompressionAlgorithmTags
operator|.
name|ZIP
argument_list|)
decl_stmt|;
if|if
condition|(
name|armor
condition|)
block|{
name|outputStream
operator|=
operator|new
name|ArmoredOutputStream
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
block|}
name|PGPEncryptedDataGenerator
name|encGen
init|=
operator|new
name|PGPEncryptedDataGenerator
argument_list|(
name|PGPEncryptedData
operator|.
name|CAST5
argument_list|,
name|integrity
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|,
literal|"BC"
argument_list|)
decl_stmt|;
name|encGen
operator|.
name|addMethod
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|OutputStream
name|encOut
init|=
name|encGen
operator|.
name|open
argument_list|(
name|outputStream
argument_list|,
name|compressedData
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
block|{
name|encOut
operator|.
name|write
argument_list|(
name|compressedData
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|encOut
argument_list|)
expr_stmt|;
if|if
condition|(
name|armor
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|unmarshal (Exchange exchange, InputStream encryptedStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|encryptedStream
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|encryptedStream
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PGPPrivateKey
name|key
init|=
name|getPrivateKey
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Private key is null, cannot proceed"
argument_list|)
throw|;
block|}
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|encryptedStream
argument_list|)
argument_list|)
decl_stmt|;
name|in
operator|=
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|PGPObjectFactory
name|pgpF
init|=
operator|new
name|PGPObjectFactory
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|PGPEncryptedDataList
name|enc
decl_stmt|;
name|Object
name|o
init|=
name|pgpF
operator|.
name|nextObject
argument_list|()
decl_stmt|;
comment|// the first object might be a PGP marker packet.
if|if
condition|(
name|o
operator|instanceof
name|PGPEncryptedDataList
condition|)
block|{
name|enc
operator|=
operator|(
name|PGPEncryptedDataList
operator|)
name|o
expr_stmt|;
block|}
else|else
block|{
name|enc
operator|=
operator|(
name|PGPEncryptedDataList
operator|)
name|pgpF
operator|.
name|nextObject
argument_list|()
expr_stmt|;
block|}
name|PGPPublicKeyEncryptedData
name|pbe
init|=
operator|(
name|PGPPublicKeyEncryptedData
operator|)
name|enc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InputStream
name|clear
init|=
name|pbe
operator|.
name|getDataStream
argument_list|(
name|key
argument_list|,
literal|"BC"
argument_list|)
decl_stmt|;
name|PGPObjectFactory
name|pgpFact
init|=
operator|new
name|PGPObjectFactory
argument_list|(
name|clear
argument_list|)
decl_stmt|;
name|PGPCompressedData
name|cData
init|=
operator|(
name|PGPCompressedData
operator|)
name|pgpFact
operator|.
name|nextObject
argument_list|()
decl_stmt|;
name|pgpFact
operator|=
operator|new
name|PGPObjectFactory
argument_list|(
name|cData
operator|.
name|getDataStream
argument_list|()
argument_list|)
expr_stmt|;
name|PGPLiteralData
name|ld
init|=
operator|(
name|PGPLiteralData
operator|)
name|pgpFact
operator|.
name|nextObject
argument_list|()
decl_stmt|;
return|return
name|Streams
operator|.
name|readAll
argument_list|(
name|ld
operator|.
name|getInputStream
argument_list|()
argument_list|)
return|;
block|}
DECL|method|compress (byte[] clearData, String fileName, int algorithm)
specifier|private
specifier|static
name|byte
index|[]
name|compress
parameter_list|(
name|byte
index|[]
name|clearData
parameter_list|,
name|String
name|fileName
parameter_list|,
name|int
name|algorithm
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PGPCompressedDataGenerator
name|comData
init|=
operator|new
name|PGPCompressedDataGenerator
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
name|OutputStream
name|cos
init|=
name|comData
operator|.
name|open
argument_list|(
name|bOut
argument_list|)
decl_stmt|;
comment|// open it with the final destination
name|PGPLiteralDataGenerator
name|lData
init|=
operator|new
name|PGPLiteralDataGenerator
argument_list|()
decl_stmt|;
name|OutputStream
name|pOut
init|=
name|lData
operator|.
name|open
argument_list|(
name|cos
argument_list|,
comment|// the compressed output stream
name|PGPLiteralData
operator|.
name|BINARY
argument_list|,
name|fileName
argument_list|,
comment|// "filename" to store
name|clearData
operator|.
name|length
argument_list|,
comment|// length of clear data
operator|new
name|Date
argument_list|()
comment|// current time
argument_list|)
decl_stmt|;
try|try
block|{
name|pOut
operator|.
name|write
argument_list|(
name|clearData
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|pOut
argument_list|)
expr_stmt|;
name|comData
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|bOut
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|getPublicKey (Exchange exchange)
specifier|private
name|PGPPublicKey
name|getPublicKey
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|PGPPublicKey
name|key
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|KEY_PUB
argument_list|,
name|PGPPublicKey
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
name|configuredKey
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
DECL|method|getPrivateKey (Exchange exchange)
specifier|private
name|PGPPrivateKey
name|getPrivateKey
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|PGPPrivateKey
name|key
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|KEY_PRI
argument_list|,
name|PGPPrivateKey
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
name|configuredPrivateKey
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
block|}
end_class

end_unit

