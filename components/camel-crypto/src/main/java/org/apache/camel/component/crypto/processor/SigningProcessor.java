begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|DigitalSignatureConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|DigitalSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_class
DECL|class|SigningProcessor
specifier|public
class|class
name|SigningProcessor
extends|extends
name|DigitalSignatureProcessor
block|{
DECL|method|SigningProcessor (DigitalSignatureConfiguration configuration)
specifier|public
name|SigningProcessor
parameter_list|(
name|DigitalSignatureConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Signature
name|service
init|=
name|initSignatureService
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|calculateSignature
argument_list|(
name|exchange
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|byte
index|[]
name|signature
init|=
name|service
operator|.
name|sign
argument_list|()
decl_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|clearMessageHeaders
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|out
operator|.
name|copyFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|out
operator|.
name|setHeader
argument_list|(
name|config
operator|.
name|getSignatureHeaderName
argument_list|()
argument_list|,
operator|new
name|Base64
argument_list|()
operator|.
name|encode
argument_list|(
name|signature
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initSignatureService (Exchange exchange)
specifier|protected
name|Signature
name|initSignatureService
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|PrivateKey
name|pk
init|=
name|getPrivateKeyFromKeystoreOrExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|SecureRandom
name|random
init|=
name|config
operator|.
name|getSecureRandom
argument_list|()
decl_stmt|;
name|Signature
name|service
init|=
name|createSignatureService
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|initSign
argument_list|(
name|pk
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|service
operator|.
name|initSign
argument_list|(
name|pk
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
DECL|method|getPrivateKeyFromKeystoreOrExchange (Exchange exchange)
specifier|private
name|PrivateKey
name|getPrivateKeyFromKeystoreOrExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|PrivateKey
name|pk
init|=
name|config
operator|.
name|getPrivateKey
argument_list|(
name|getAlias
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getKeyPassword
argument_list|(
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pk
operator|==
literal|null
condition|)
block|{
name|pk
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalSignatureConstants
operator|.
name|SIGNATURE_PRIVATE_KEY
argument_list|,
name|PrivateKey
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|pk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|format
argument_list|(
literal|"Cannot sign message as no Private Key has been supplied. "
operator|+
literal|"Either supply one in the route definition sign(keystore, alias) or sign(privateKey) "
operator|+
literal|"or via the message header '%s'"
argument_list|,
name|DigitalSignatureConstants
operator|.
name|SIGNATURE_PRIVATE_KEY
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|pk
return|;
block|}
DECL|method|getKeyPassword (Exchange exchange)
specifier|protected
name|char
index|[]
name|getKeyPassword
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStore
name|keystore
init|=
name|config
operator|.
name|getKeystore
argument_list|()
decl_stmt|;
name|char
index|[]
name|password
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keystore
operator|!=
literal|null
condition|)
block|{
name|password
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalSignatureConstants
operator|.
name|KEYSTORE_PASSWORD
argument_list|,
name|char
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
name|config
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|password
return|;
block|}
block|}
end_class

end_unit

