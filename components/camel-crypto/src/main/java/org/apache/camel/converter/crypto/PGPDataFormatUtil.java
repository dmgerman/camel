begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|sig
operator|.
name|KeyFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPrivateKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignatureSubpacketVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcKeyFingerprintCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcePBESecretKeyDecryptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|PublicKeyAlgorithmTags
operator|.
name|DSA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|PublicKeyAlgorithmTags
operator|.
name|ECDSA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|PublicKeyAlgorithmTags
operator|.
name|ELGAMAL_GENERAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|PublicKeyAlgorithmTags
operator|.
name|RSA_GENERAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|PublicKeyAlgorithmTags
operator|.
name|RSA_SIGN
import|;
end_import

begin_class
DECL|class|PGPDataFormatUtil
specifier|public
specifier|final
class|class
name|PGPDataFormatUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PGPDataFormatUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|PGPDataFormatUtil ()
specifier|private
name|PGPDataFormatUtil
parameter_list|()
block|{     }
DECL|method|findPublicKeys (CamelContext context, String filename, byte[] keyRing, List<String> userids, boolean forEncryption)
specifier|public
specifier|static
name|List
argument_list|<
name|PGPPublicKey
argument_list|>
name|findPublicKeys
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|filename
parameter_list|,
name|byte
index|[]
name|keyRing
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|userids
parameter_list|,
name|boolean
name|forEncryption
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
throws|,
name|NoSuchProviderException
block|{
name|InputStream
name|is
init|=
name|determineKeyRingInputStream
argument_list|(
name|context
argument_list|,
name|filename
argument_list|,
name|keyRing
argument_list|,
name|forEncryption
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|findPublicKeys
argument_list|(
name|is
argument_list|,
name|userids
argument_list|,
name|forEncryption
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPublicKeyRingCollection (CamelContext context, String filename, byte[] keyRing, boolean forEncryption)
specifier|public
specifier|static
name|PGPPublicKeyRingCollection
name|getPublicKeyRingCollection
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|filename
parameter_list|,
name|byte
index|[]
name|keyRing
parameter_list|,
name|boolean
name|forEncryption
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
block|{
name|InputStream
name|is
init|=
name|determineKeyRingInputStream
argument_list|(
name|context
argument_list|,
name|filename
argument_list|,
name|keyRing
argument_list|,
name|forEncryption
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|PGPPublicKeyRingCollection
argument_list|(
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|is
argument_list|)
argument_list|,
operator|new
name|BcKeyFingerprintCalculator
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findPrivateKeyWithKeyId (CamelContext context, String filename, byte[] secretKeyRing, long keyid, String passphrase, PGPPassphraseAccessor passpraseAccessor, String provider)
specifier|public
specifier|static
name|PGPPrivateKey
name|findPrivateKeyWithKeyId
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|filename
parameter_list|,
name|byte
index|[]
name|secretKeyRing
parameter_list|,
name|long
name|keyid
parameter_list|,
name|String
name|passphrase
parameter_list|,
name|PGPPassphraseAccessor
name|passpraseAccessor
parameter_list|,
name|String
name|provider
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
throws|,
name|NoSuchProviderException
block|{
name|InputStream
name|is
init|=
name|determineKeyRingInputStream
argument_list|(
name|context
argument_list|,
name|filename
argument_list|,
name|secretKeyRing
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|findPrivateKeyWithKeyId
argument_list|(
name|is
argument_list|,
name|keyid
argument_list|,
name|passphrase
argument_list|,
name|passpraseAccessor
argument_list|,
name|provider
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findPrivateKeyWithKeyId (InputStream keyringInput, long keyid, String passphrase, PGPPassphraseAccessor passphraseAccessor, String provider)
specifier|private
specifier|static
name|PGPPrivateKey
name|findPrivateKeyWithKeyId
parameter_list|(
name|InputStream
name|keyringInput
parameter_list|,
name|long
name|keyid
parameter_list|,
name|String
name|passphrase
parameter_list|,
name|PGPPassphraseAccessor
name|passphraseAccessor
parameter_list|,
name|String
name|provider
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
block|{
name|PGPSecretKeyRingCollection
name|pgpSec
init|=
operator|new
name|PGPSecretKeyRingCollection
argument_list|(
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|keyringInput
argument_list|)
argument_list|,
operator|new
name|BcKeyFingerprintCalculator
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|findPrivateKeyWithkeyId
argument_list|(
name|keyid
argument_list|,
name|passphrase
argument_list|,
name|passphraseAccessor
argument_list|,
name|provider
argument_list|,
name|pgpSec
argument_list|)
return|;
block|}
DECL|method|findPrivateKeyWithkeyId (long keyid, String passphrase, PGPPassphraseAccessor passphraseAccessor, String provider, PGPSecretKeyRingCollection pgpSec)
specifier|public
specifier|static
name|PGPPrivateKey
name|findPrivateKeyWithkeyId
parameter_list|(
name|long
name|keyid
parameter_list|,
name|String
name|passphrase
parameter_list|,
name|PGPPassphraseAccessor
name|passphraseAccessor
parameter_list|,
name|String
name|provider
parameter_list|,
name|PGPSecretKeyRingCollection
name|pgpSec
parameter_list|)
throws|throws
name|PGPException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|pgpSec
operator|.
name|getKeyRings
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|data
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|instanceof
name|PGPSecretKeyRing
condition|)
block|{
name|PGPSecretKeyRing
name|keyring
init|=
operator|(
name|PGPSecretKeyRing
operator|)
name|data
decl_stmt|;
name|PGPSecretKey
name|secKey
init|=
name|keyring
operator|.
name|getSecretKey
argument_list|(
name|keyid
argument_list|)
decl_stmt|;
if|if
condition|(
name|secKey
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|passphrase
operator|==
literal|null
operator|&&
name|passphraseAccessor
operator|!=
literal|null
condition|)
block|{
comment|// get passphrase from accessor // only primary/master key has user IDS
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|String
argument_list|>
name|userIDs
init|=
name|keyring
operator|.
name|getSecretKey
argument_list|()
operator|.
name|getUserIDs
argument_list|()
decl_stmt|;
while|while
condition|(
name|passphrase
operator|==
literal|null
operator|&&
name|userIDs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|passphrase
operator|=
name|passphraseAccessor
operator|.
name|getPassphrase
argument_list|(
name|userIDs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|passphrase
operator|!=
literal|null
condition|)
block|{
name|PGPPrivateKey
name|privateKey
init|=
name|secKey
operator|.
name|extractPrivateKey
argument_list|(
operator|new
name|JcePBESecretKeyDecryptorBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|provider
argument_list|)
operator|.
name|build
argument_list|(
name|passphrase
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|privateKey
operator|!=
literal|null
condition|)
block|{
return|return
name|privateKey
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|determineKeyRingInputStream (CamelContext context, String filename, byte[] keyRing, boolean forEncryption)
specifier|private
specifier|static
name|InputStream
name|determineKeyRingInputStream
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|filename
parameter_list|,
name|byte
index|[]
name|keyRing
parameter_list|,
name|boolean
name|forEncryption
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filename
operator|!=
literal|null
operator|&&
name|keyRing
operator|!=
literal|null
condition|)
block|{
name|String
name|encryptionOrSignature
decl_stmt|;
if|if
condition|(
name|forEncryption
condition|)
block|{
name|encryptionOrSignature
operator|=
literal|"encryption"
expr_stmt|;
block|}
else|else
block|{
name|encryptionOrSignature
operator|=
literal|"signature"
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Either specify %s file name or key ring byte array. You can not specify both."
argument_list|,
name|encryptionOrSignature
argument_list|)
argument_list|)
throw|;
block|}
name|InputStream
name|is
decl_stmt|;
if|if
condition|(
name|keyRing
operator|!=
literal|null
condition|)
block|{
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|keyRing
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|is
operator|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|context
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
return|return
name|is
return|;
block|}
DECL|method|findPublicKeys (InputStream input, List<String> userids, boolean forEncryption)
specifier|private
specifier|static
name|List
argument_list|<
name|PGPPublicKey
argument_list|>
name|findPublicKeys
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|userids
parameter_list|,
name|boolean
name|forEncryption
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
throws|,
name|NoSuchProviderException
block|{
name|PGPPublicKeyRingCollection
name|pgpSec
init|=
operator|new
name|PGPPublicKeyRingCollection
argument_list|(
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|input
argument_list|)
argument_list|,
operator|new
name|BcKeyFingerprintCalculator
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|findPublicKeys
argument_list|(
name|userids
argument_list|,
name|forEncryption
argument_list|,
name|pgpSec
argument_list|)
return|;
block|}
DECL|method|findPublicKeys (List<String> useridParts, boolean forEncryption, PGPPublicKeyRingCollection pgpPublicKeyringCollection)
specifier|public
specifier|static
name|List
argument_list|<
name|PGPPublicKey
argument_list|>
name|findPublicKeys
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|useridParts
parameter_list|,
name|boolean
name|forEncryption
parameter_list|,
name|PGPPublicKeyRingCollection
name|pgpPublicKeyringCollection
parameter_list|)
block|{
name|List
argument_list|<
name|PGPPublicKey
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|useridParts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PGPPublicKeyRing
argument_list|>
name|keyRingIter
init|=
name|pgpPublicKeyringCollection
operator|.
name|getKeyRings
argument_list|()
init|;
name|keyRingIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PGPPublicKeyRing
name|keyRing
init|=
name|keyRingIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PGPPublicKey
name|primaryKey
init|=
name|keyRing
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|String
index|[]
name|foundKeyUserIdForUserIdPart
init|=
name|findFirstKeyUserIdContainingOneOfTheParts
argument_list|(
name|useridParts
argument_list|,
name|primaryKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundKeyUserIdForUserIdPart
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No User ID found in primary key with key ID {} containing one of the parts {}"
argument_list|,
name|primaryKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|useridParts
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"User ID {} found in primary key with key ID {} containing one of the parts {}"
argument_list|,
name|foundKeyUserIdForUserIdPart
index|[
literal|0
index|]
argument_list|,
name|primaryKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|useridParts
argument_list|)
expr_stmt|;
comment|// add adequate keys to the result
for|for
control|(
name|Iterator
argument_list|<
name|PGPPublicKey
argument_list|>
name|keyIter
init|=
name|keyRing
operator|.
name|getPublicKeys
argument_list|()
init|;
name|keyIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PGPPublicKey
name|key
init|=
name|keyIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|forEncryption
condition|)
block|{
if|if
condition|(
name|isEncryptionKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Public encryption key with key user ID {} and key ID {} added to the encryption keys"
argument_list|,
name|foundKeyUserIdForUserIdPart
index|[
literal|0
index|]
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|forEncryption
operator|&&
name|isSignatureKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// not used!
name|result
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Public key with key user ID {} and key ID {} added to the signing keys"
argument_list|,
name|foundKeyUserIdForUserIdPart
index|[
literal|0
index|]
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|isEncryptionKey (PGPPublicKey key)
specifier|private
specifier|static
name|boolean
name|isEncryptionKey
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|isEncryptionKey
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//check keyflags
name|Boolean
name|hasEncryptionKeyFlags
init|=
name|hasOneOfExpectedKeyFlags
argument_list|(
name|key
argument_list|,
operator|new
name|int
index|[]
block|{
name|KeyFlags
operator|.
name|ENCRYPT_COMMS
block|,
name|KeyFlags
operator|.
name|ENCRYPT_STORAGE
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasEncryptionKeyFlags
operator|!=
literal|null
operator|&&
operator|!
name|hasEncryptionKeyFlags
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Public key with key key ID {} found for specified user ID. But this key will not be used for the encryption, because its key flags are not encryption key flags."
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// also without keyflags (hasEncryptionKeyFlags = null), true is returned!
return|return
literal|true
return|;
block|}
block|}
comment|// Within a public keyring, the master / primary key has the user ID(s); the subkeys don't
comment|// have user IDs associated directly to them, but the subkeys are implicitly associated with
comment|// the user IDs of the master / primary key. The master / primary key is the first key in
comment|// the keyring, and the rest of the keys are subkeys.
comment|// http://bouncy-castle.1462172.n4.nabble.com/How-to-find-PGP-subkeys-td1465289.html
DECL|method|findFirstKeyUserIdContainingOneOfTheParts (List<String> useridParts, PGPPublicKey primaryKey)
specifier|private
specifier|static
name|String
index|[]
name|findFirstKeyUserIdContainingOneOfTheParts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|useridParts
parameter_list|,
name|PGPPublicKey
name|primaryKey
parameter_list|)
block|{
name|String
index|[]
name|foundKeyUserIdForUserIdPart
init|=
literal|null
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|primaryKey
operator|.
name|getUserIDs
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|keyUserId
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|userIdPart
range|:
name|useridParts
control|)
block|{
if|if
condition|(
name|keyUserId
operator|.
name|contains
argument_list|(
name|userIdPart
argument_list|)
condition|)
block|{
name|foundKeyUserIdForUserIdPart
operator|=
operator|new
name|String
index|[]
block|{
name|keyUserId
block|,
name|userIdPart
block|}
expr_stmt|;
block|}
block|}
block|}
return|return
name|foundKeyUserIdForUserIdPart
return|;
block|}
DECL|method|isSignatureKey (PGPPublicKey key)
specifier|private
specifier|static
name|boolean
name|isSignatureKey
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|)
block|{
name|int
name|algorithm
init|=
name|key
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
return|return
name|algorithm
operator|==
name|RSA_GENERAL
operator|||
name|algorithm
operator|==
name|RSA_SIGN
operator|||
name|algorithm
operator|==
name|DSA
operator|||
name|algorithm
operator|==
name|ECDSA
operator|||
name|algorithm
operator|==
name|ELGAMAL_GENERAL
return|;
block|}
DECL|method|findSecretKeysWithPrivateKeyAndUserId (CamelContext context, String keychainFilename, byte[] secKeyRing, Map<String, String> sigKeyUserId2Password, String provider)
specifier|public
specifier|static
name|List
argument_list|<
name|PGPSecretKeyAndPrivateKeyAndUserId
argument_list|>
name|findSecretKeysWithPrivateKeyAndUserId
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|keychainFilename
parameter_list|,
name|byte
index|[]
name|secKeyRing
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sigKeyUserId2Password
parameter_list|,
name|String
name|provider
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
throws|,
name|NoSuchProviderException
block|{
name|InputStream
name|keyChainInputStream
init|=
name|determineKeyRingInputStream
argument_list|(
name|context
argument_list|,
name|keychainFilename
argument_list|,
name|secKeyRing
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|findSecretKeysWithPrivateKeyAndUserId
argument_list|(
name|keyChainInputStream
argument_list|,
name|sigKeyUserId2Password
argument_list|,
name|provider
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|keyChainInputStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findSecretKeysWithPrivateKeyAndUserId (InputStream keyringInput, Map<String, String> sigKeyUserId2Password, String provider)
specifier|private
specifier|static
name|List
argument_list|<
name|PGPSecretKeyAndPrivateKeyAndUserId
argument_list|>
name|findSecretKeysWithPrivateKeyAndUserId
parameter_list|(
name|InputStream
name|keyringInput
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sigKeyUserId2Password
parameter_list|,
name|String
name|provider
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
throws|,
name|NoSuchProviderException
block|{
name|PGPSecretKeyRingCollection
name|pgpSec
init|=
operator|new
name|PGPSecretKeyRingCollection
argument_list|(
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|keyringInput
argument_list|)
argument_list|,
operator|new
name|BcKeyFingerprintCalculator
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|findSecretKeysWithPrivateKeyAndUserId
argument_list|(
name|sigKeyUserId2Password
argument_list|,
name|provider
argument_list|,
name|pgpSec
argument_list|)
return|;
block|}
DECL|method|findSecretKeysWithPrivateKeyAndUserId (Map<String, String> sigKeyUserId2Password, String provider, PGPSecretKeyRingCollection pgpSec)
specifier|public
specifier|static
name|List
argument_list|<
name|PGPSecretKeyAndPrivateKeyAndUserId
argument_list|>
name|findSecretKeysWithPrivateKeyAndUserId
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sigKeyUserId2Password
parameter_list|,
name|String
name|provider
parameter_list|,
name|PGPSecretKeyRingCollection
name|pgpSec
parameter_list|)
throws|throws
name|PGPException
block|{
name|List
argument_list|<
name|PGPSecretKeyAndPrivateKeyAndUserId
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sigKeyUserId2Password
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|pgpSec
operator|.
name|getKeyRings
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|data
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|instanceof
name|PGPSecretKeyRing
condition|)
block|{
name|PGPSecretKeyRing
name|keyring
init|=
operator|(
name|PGPSecretKeyRing
operator|)
name|data
decl_stmt|;
name|PGPSecretKey
name|primaryKey
init|=
name|keyring
operator|.
name|getSecretKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|useridParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sigKeyUserId2Password
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|foundKeyUserIdForUserIdPart
init|=
name|findFirstKeyUserIdContainingOneOfTheParts
argument_list|(
name|useridParts
argument_list|,
name|primaryKey
operator|.
name|getPublicKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundKeyUserIdForUserIdPart
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No User ID found in primary key with key ID {} containing one of the parts {}"
argument_list|,
name|primaryKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|useridParts
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"User ID {} found in primary key with key ID {} containing one of the parts {}"
argument_list|,
name|foundKeyUserIdForUserIdPart
index|[
literal|0
index|]
argument_list|,
name|primaryKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|useridParts
argument_list|)
expr_stmt|;
comment|// add all signing keys
for|for
control|(
name|Iterator
argument_list|<
name|PGPSecretKey
argument_list|>
name|iterKey
init|=
name|keyring
operator|.
name|getSecretKeys
argument_list|()
init|;
name|iterKey
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PGPSecretKey
name|secKey
init|=
name|iterKey
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSigningKey
argument_list|(
name|secKey
argument_list|)
condition|)
block|{
name|PGPPrivateKey
name|privateKey
init|=
name|secKey
operator|.
name|extractPrivateKey
argument_list|(
operator|new
name|JcePBESecretKeyDecryptorBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|provider
argument_list|)
operator|.
name|build
argument_list|(
name|sigKeyUserId2Password
operator|.
name|get
argument_list|(
name|foundKeyUserIdForUserIdPart
index|[
literal|1
index|]
argument_list|)
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|privateKey
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|PGPSecretKeyAndPrivateKeyAndUserId
argument_list|(
name|secKey
argument_list|,
name|privateKey
argument_list|,
name|foundKeyUserIdForUserIdPart
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Private key with user ID {} and key ID {} added to the signing keys"
argument_list|,
name|foundKeyUserIdForUserIdPart
index|[
literal|0
index|]
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|privateKey
operator|.
name|getKeyID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|isSigningKey (PGPSecretKey secKey)
specifier|private
specifier|static
name|boolean
name|isSigningKey
parameter_list|(
name|PGPSecretKey
name|secKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|secKey
operator|.
name|isSigningKey
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Boolean
name|hasSigningKeyFlag
init|=
name|hasOneOfExpectedKeyFlags
argument_list|(
name|secKey
operator|.
name|getPublicKey
argument_list|()
argument_list|,
operator|new
name|int
index|[]
block|{
name|KeyFlags
operator|.
name|SIGN_DATA
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasSigningKeyFlag
operator|!=
literal|null
operator|&&
operator|!
name|hasSigningKeyFlag
condition|)
block|{
comment|// not a signing key --> ignore
name|LOG
operator|.
name|debug
argument_list|(
literal|"Secret key with key ID {} found for specified user ID part. But this key will not be used for signing because of its key flags."
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|secKey
operator|.
name|getKeyID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// also if there are not any keyflags (hasSigningKeyFlag=null),  true is returned!
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Checks whether one of the signatures of the key has one of the expected      * key flags      *       * @param key      * @return {@link Boolean#TRUE} if key has one of the expected flag,      *<code>null</code> if the key does not have any key flags,      *         {@link Boolean#FALSE} if the key has none of the expected flags      */
DECL|method|hasOneOfExpectedKeyFlags (PGPPublicKey key, int[] expectedKeyFlags)
specifier|private
specifier|static
name|Boolean
name|hasOneOfExpectedKeyFlags
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|,
name|int
index|[]
name|expectedKeyFlags
parameter_list|)
block|{
name|boolean
name|containsKeyFlags
init|=
literal|false
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|PGPSignature
argument_list|>
name|itsig
init|=
name|key
operator|.
name|getSignatures
argument_list|()
init|;
name|itsig
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PGPSignature
name|sig
init|=
name|itsig
operator|.
name|next
argument_list|()
decl_stmt|;
name|PGPSignatureSubpacketVector
name|subPacks
init|=
name|sig
operator|.
name|getHashedSubPackets
argument_list|()
decl_stmt|;
if|if
condition|(
name|subPacks
operator|!=
literal|null
condition|)
block|{
name|int
name|keyFlag
init|=
name|subPacks
operator|.
name|getKeyFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyFlag
operator|>
literal|0
operator|&&
operator|!
name|containsKeyFlags
condition|)
block|{
name|containsKeyFlags
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|expectdKeyFlag
range|:
name|expectedKeyFlags
control|)
block|{
name|int
name|result
init|=
name|keyFlag
operator|&
name|expectdKeyFlag
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|expectdKeyFlag
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|containsKeyFlags
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
return|return
literal|null
return|;
comment|// no key flag
block|}
comment|/**      * Determines a public key from the keyring collection which has a certain      * key ID and which has a User ID which contains at least one of the User ID      * parts.      *       * @param keyId      *            key ID      * @param userIdParts      *            user ID parts, can be empty, than no filter on the User ID is      *            executed      * @param publicKeyringCollection      *            keyring collection      * @return public key or<code>null</code> if no fitting key is found      * @throws PGPException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getPublicKeyWithKeyIdAndUserID (long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)
specifier|public
specifier|static
name|PGPPublicKey
name|getPublicKeyWithKeyIdAndUserID
parameter_list|(
name|long
name|keyId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|userIdParts
parameter_list|,
name|PGPPublicKeyRingCollection
name|publicKeyringCollection
parameter_list|)
throws|throws
name|PGPException
block|{
name|PGPPublicKeyRing
name|publicKeyring
init|=
name|publicKeyringCollection
operator|.
name|getPublicKeyRing
argument_list|(
name|keyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|publicKeyring
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No public key found for key ID {}."
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|keyId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// publicKey can be a subkey the user IDs must therefore be provided by the primary/master key
if|if
condition|(
name|isAllowedKey
argument_list|(
name|userIdParts
argument_list|,
name|publicKeyring
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getUserIDs
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|publicKeyring
operator|.
name|getPublicKey
argument_list|(
name|keyId
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|isAllowedKey (List<String> allowedUserIds, Iterator<String> verifyingPublicKeyUserIds)
specifier|private
specifier|static
name|boolean
name|isAllowedKey
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|allowedUserIds
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|verifyingPublicKeyUserIds
parameter_list|)
block|{
if|if
condition|(
name|allowedUserIds
operator|==
literal|null
operator|||
name|allowedUserIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no restrictions specified
return|return
literal|true
return|;
block|}
name|String
name|keyUserId
init|=
literal|null
decl_stmt|;
for|for
control|(
init|;
name|verifyingPublicKeyUserIds
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|keyUserId
operator|=
name|verifyingPublicKeyUserIds
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|userid
range|:
name|allowedUserIds
control|)
block|{
if|if
condition|(
name|keyUserId
operator|!=
literal|null
operator|&&
name|keyUserId
operator|.
name|contains
argument_list|(
name|userid
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Public key with  user ID {} fulfills the User ID restriction."
argument_list|,
name|keyUserId
argument_list|,
name|allowedUserIds
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Public key with User ID {} does not fulfill the User ID restriction."
argument_list|,
name|keyUserId
argument_list|,
name|allowedUserIds
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

