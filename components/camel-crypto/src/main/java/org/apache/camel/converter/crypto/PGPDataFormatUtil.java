begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPrivateKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPUtil
import|;
end_import

begin_class
DECL|class|PGPDataFormatUtil
specifier|public
specifier|final
class|class
name|PGPDataFormatUtil
block|{
DECL|method|PGPDataFormatUtil ()
specifier|private
name|PGPDataFormatUtil
parameter_list|()
block|{     }
DECL|method|findPublicKey (String filename, String userid)
specifier|public
specifier|static
name|PGPPublicKey
name|findPublicKey
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|userid
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
throws|,
name|NoSuchProviderException
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|PGPPublicKey
name|privKey
decl_stmt|;
try|try
block|{
name|privKey
operator|=
name|findPublicKey
argument_list|(
name|fis
argument_list|,
name|userid
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
return|return
name|privKey
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findPublicKey (InputStream input, String userid)
specifier|public
specifier|static
name|PGPPublicKey
name|findPublicKey
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|userid
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
throws|,
name|NoSuchProviderException
block|{
name|PGPPublicKeyRingCollection
name|pgpSec
init|=
operator|new
name|PGPPublicKeyRingCollection
argument_list|(
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|PGPPublicKeyRing
argument_list|>
name|keyRingIter
init|=
operator|(
name|Iterator
argument_list|<
name|PGPPublicKeyRing
argument_list|>
operator|)
name|pgpSec
operator|.
name|getKeyRings
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyRingIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPPublicKeyRing
name|keyRing
init|=
name|keyRingIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PGPPublicKey
argument_list|>
name|keyIter
init|=
operator|(
name|Iterator
argument_list|<
name|PGPPublicKey
argument_list|>
operator|)
name|keyRing
operator|.
name|getPublicKeys
argument_list|()
decl_stmt|;
name|String
name|keyUserId
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|keyIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPPublicKey
name|key
init|=
name|keyIter
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
operator|(
name|Iterator
argument_list|<
name|String
argument_list|>
operator|)
name|key
operator|.
name|getUserIDs
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|keyUserId
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|.
name|isEncryptionKey
argument_list|()
operator|&&
name|keyUserId
operator|!=
literal|null
operator|&&
name|keyUserId
operator|.
name|contains
argument_list|(
name|userid
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|findPrivateKey (String filename, String userid, String passphrase)
specifier|public
specifier|static
name|PGPPrivateKey
name|findPrivateKey
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|userid
parameter_list|,
name|String
name|passphrase
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
throws|,
name|NoSuchProviderException
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|PGPPrivateKey
name|privKey
decl_stmt|;
try|try
block|{
name|privKey
operator|=
name|findPrivateKey
argument_list|(
name|fis
argument_list|,
name|userid
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
return|return
name|privKey
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findPrivateKey (InputStream input, String userid, String passphrase)
specifier|public
specifier|static
name|PGPPrivateKey
name|findPrivateKey
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|userid
parameter_list|,
name|String
name|passphrase
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
throws|,
name|NoSuchProviderException
block|{
name|PGPSecretKeyRingCollection
name|pgpSec
init|=
operator|new
name|PGPSecretKeyRingCollection
argument_list|(
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|PGPSecretKeyRing
argument_list|>
name|keyRingIter
init|=
operator|(
name|Iterator
argument_list|<
name|PGPSecretKeyRing
argument_list|>
operator|)
name|pgpSec
operator|.
name|getKeyRings
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyRingIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSecretKeyRing
name|keyRing
init|=
name|keyRingIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PGPSecretKey
argument_list|>
name|keyIter
init|=
operator|(
name|Iterator
argument_list|<
name|PGPSecretKey
argument_list|>
operator|)
name|keyRing
operator|.
name|getSecretKeys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSecretKey
name|key
init|=
name|keyIter
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
operator|(
name|Iterator
argument_list|<
name|String
argument_list|>
operator|)
name|key
operator|.
name|getUserIDs
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|userId
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|isSigningKey
argument_list|()
operator|&&
name|userId
operator|.
name|contains
argument_list|(
name|userid
argument_list|)
condition|)
block|{
return|return
name|key
operator|.
name|extractPrivateKey
argument_list|(
name|passphrase
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|"BC"
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

