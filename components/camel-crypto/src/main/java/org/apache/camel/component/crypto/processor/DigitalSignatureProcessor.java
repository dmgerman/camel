begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|DigitalSignatureConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|DigitalSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|DigitalSignatureProcessor
specifier|public
specifier|abstract
class|class
name|DigitalSignatureProcessor
implements|implements
name|Processor
block|{
DECL|field|config
specifier|protected
name|DigitalSignatureConfiguration
name|config
decl_stmt|;
DECL|method|DigitalSignatureProcessor (DigitalSignatureConfiguration configuration)
specifier|public
name|DigitalSignatureProcessor
parameter_list|(
name|DigitalSignatureConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|calculateSignature (Exchange exchange, Signature signer)
specifier|public
name|void
name|calculateSignature
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Signature
name|signer
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|payload
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|payloadStream
init|=
name|ExchangeHelper
operator|.
name|convertToMandatoryType
argument_list|(
name|exchange
argument_list|,
name|InputStream
operator|.
name|class
argument_list|,
name|payload
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|config
operator|.
name|getBufferSize
argument_list|()
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|payloadStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|signer
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|payloadStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getAlias (Exchange exchange)
specifier|protected
name|String
name|getAlias
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStore
name|keystore
init|=
name|config
operator|.
name|getKeystore
argument_list|()
decl_stmt|;
if|if
condition|(
name|keystore
operator|!=
literal|null
condition|)
block|{
name|String
name|alias
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalSignatureConstants
operator|.
name|KEYSTORE_ALIAS
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
name|alias
operator|=
name|config
operator|.
name|getAlias
argument_list|()
expr_stmt|;
block|}
comment|// if there is only one entry then use it. Document this well
if|if
condition|(
name|alias
operator|==
literal|null
operator|&&
name|keystore
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|alias
operator|=
name|keystore
operator|.
name|aliases
argument_list|()
operator|.
name|nextElement
argument_list|()
expr_stmt|;
block|}
return|return
name|alias
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|setConfig (DigitalSignatureConfiguration config)
specifier|public
name|void
name|setConfig
parameter_list|(
name|DigitalSignatureConfiguration
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|createSignatureService ()
specifier|protected
name|Signature
name|createSignatureService
parameter_list|()
throws|throws
name|NoSuchAlgorithmException
throws|,
name|NoSuchProviderException
block|{
name|String
name|algorithm
init|=
name|config
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|String
name|provider
init|=
name|config
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|Signature
name|signer
init|=
name|provider
operator|==
literal|null
condition|?
name|Signature
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
else|:
name|Signature
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|,
name|provider
argument_list|)
decl_stmt|;
return|return
name|signer
return|;
block|}
DECL|method|clearMessageHeaders (Message in)
specifier|protected
name|void
name|clearMessageHeaders
parameter_list|(
name|Message
name|in
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|isClearHeaders
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|in
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|DigitalSignatureConstants
operator|.
name|class
operator|.
name|getFields
argument_list|()
control|)
block|{
name|headers
operator|.
name|remove
argument_list|(
name|ObjectHelper
operator|.
name|lookupConstantFieldValue
argument_list|(
name|DigitalSignatureConstants
operator|.
name|class
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

