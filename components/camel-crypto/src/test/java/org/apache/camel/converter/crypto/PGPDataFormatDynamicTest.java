begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PGPDataFormatDynamicTest
specifier|public
class|class
name|PGPDataFormatDynamicTest
extends|extends
name|PGPDataFormatTest
block|{
comment|// setup a wrong userid
DECL|method|getKeyUserId ()
specifier|protected
name|String
name|getKeyUserId
parameter_list|()
block|{
return|return
literal|"wrong"
return|;
block|}
comment|// setup a wrong password
DECL|method|getKeyPassword ()
specifier|protected
name|String
name|getKeyPassword
parameter_list|()
block|{
return|return
literal|"wrong"
return|;
block|}
DECL|method|getHeaders ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getHeaders
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|,
literal|"sdude@nowhere.net"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_PASSWORD
argument_list|,
literal|"sdude"
argument_list|)
expr_stmt|;
return|return
name|headers
return|;
block|}
annotation|@
name|Test
DECL|method|testEncryption ()
specifier|public
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline"
argument_list|,
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryption2 ()
specifier|public
name|void
name|testEncryption2
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline2"
argument_list|,
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionArmor ()
specifier|public
name|void
name|testEncryptionArmor
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline-armor"
argument_list|,
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

