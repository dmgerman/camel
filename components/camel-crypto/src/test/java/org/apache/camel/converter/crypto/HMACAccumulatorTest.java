begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
operator|.
name|HMACAccumulator
operator|.
name|CircularBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|HMACAccumulatorTest
specifier|public
class|class
name|HMACAccumulatorTest
block|{
DECL|field|payload
specifier|private
name|byte
index|[]
name|payload
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0x11
block|,
literal|0x22
block|,
literal|0x22
block|,
literal|0x33
block|,
literal|0x33
block|,
literal|0x44
block|,
literal|0x44
block|,
literal|0x55
block|,
literal|0x55
block|,
literal|0x66
block|,
literal|0x66
block|,
literal|0x77
block|,
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x99
block|,
operator|(
name|byte
operator|)
literal|0x99
block|}
decl_stmt|;
DECL|field|expected
specifier|private
name|byte
index|[]
name|expected
decl_stmt|;
DECL|field|key
specifier|private
name|Key
name|key
decl_stmt|;
annotation|@
name|Before
DECL|method|setupKeyAndExpectedMac ()
specifier|public
name|void
name|setupKeyAndExpectedMac
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyGenerator
name|generator
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
literal|"DES"
argument_list|)
decl_stmt|;
name|key
operator|=
name|generator
operator|.
name|generateKey
argument_list|()
expr_stmt|;
name|createExpectedMac
argument_list|()
expr_stmt|;
block|}
DECL|method|createExpectedMac ()
specifier|private
name|void
name|createExpectedMac
parameter_list|()
throws|throws
name|NoSuchAlgorithmException
throws|,
name|InvalidKeyException
block|{
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacSHA1"
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|expected
operator|=
name|mac
operator|.
name|doFinal
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionPhaseCalculation ()
specifier|public
name|void
name|testEncryptionPhaseCalculation
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|buffersize
init|=
literal|256
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|buffersize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|HMACAccumulator
name|builder
init|=
operator|new
name|HMACAccumulator
argument_list|(
name|key
argument_list|,
literal|"HmacSHA1"
argument_list|,
literal|null
argument_list|,
name|buffersize
argument_list|)
decl_stmt|;
name|builder
operator|.
name|encryptUpdate
argument_list|(
name|buffer
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertMacs
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|getCalculatedMac
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecryptionWhereBufferSizeIsGreaterThanDataSize ()
specifier|public
name|void
name|testDecryptionWhereBufferSizeIsGreaterThanDataSize
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|buffersize
init|=
literal|256
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|initializeBuffer
argument_list|(
name|buffersize
argument_list|)
decl_stmt|;
name|HMACAccumulator
name|builder
init|=
operator|new
name|HMACAccumulator
argument_list|(
name|key
argument_list|,
literal|"HmacSHA1"
argument_list|,
literal|null
argument_list|,
name|buffersize
argument_list|)
decl_stmt|;
name|builder
operator|.
name|decryptUpdate
argument_list|(
name|buffer
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecryptionWhereMacOverlaps ()
specifier|public
name|void
name|testDecryptionWhereMacOverlaps
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|buffersize
init|=
literal|32
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|buffersize
index|]
decl_stmt|;
name|int
name|overlap
init|=
name|buffersize
operator|-
name|payload
operator|.
name|length
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
name|payload
operator|.
name|length
argument_list|,
name|overlap
argument_list|)
expr_stmt|;
name|HMACAccumulator
name|builder
init|=
operator|new
name|HMACAccumulator
argument_list|(
name|key
argument_list|,
literal|"HmacSHA1"
argument_list|,
literal|null
argument_list|,
name|buffersize
argument_list|)
decl_stmt|;
name|builder
operator|.
name|decryptUpdate
argument_list|(
name|buffer
argument_list|,
name|buffersize
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|expected
argument_list|,
name|overlap
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
literal|20
operator|-
name|overlap
argument_list|)
expr_stmt|;
name|builder
operator|.
name|decryptUpdate
argument_list|(
name|buffer
argument_list|,
literal|20
operator|-
name|overlap
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecryptionWhereDataIsMultipleOfBufferLength ()
specifier|public
name|void
name|testDecryptionWhereDataIsMultipleOfBufferLength
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|buffersize
init|=
literal|20
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|buffersize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|HMACAccumulator
name|builder
init|=
operator|new
name|HMACAccumulator
argument_list|(
name|key
argument_list|,
literal|"HmacSHA1"
argument_list|,
literal|null
argument_list|,
name|buffersize
argument_list|)
decl_stmt|;
name|builder
operator|.
name|decryptUpdate
argument_list|(
name|buffer
argument_list|,
name|buffersize
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|decryptUpdate
argument_list|(
name|buffer
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecryptionWhereThereIsNoPayloadData ()
specifier|public
name|void
name|testDecryptionWhereThereIsNoPayloadData
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|buffersize
init|=
literal|20
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|buffersize
index|]
decl_stmt|;
name|payload
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|createExpectedMac
argument_list|()
expr_stmt|;
name|HMACAccumulator
name|builder
init|=
operator|new
name|HMACAccumulator
argument_list|(
name|key
argument_list|,
literal|"HmacSHA1"
argument_list|,
literal|null
argument_list|,
name|buffersize
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|decryptUpdate
argument_list|(
name|buffer
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecryptionMultipleReadsSmallerThanBufferSize ()
specifier|public
name|void
name|testDecryptionMultipleReadsSmallerThanBufferSize
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|buffersize
init|=
literal|256
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|buffersize
index|]
decl_stmt|;
name|HMACAccumulator
name|builder
init|=
operator|new
name|HMACAccumulator
argument_list|(
name|key
argument_list|,
literal|"HmacSHA1"
argument_list|,
literal|null
argument_list|,
name|buffersize
argument_list|)
decl_stmt|;
name|int
name|read
init|=
name|payload
operator|.
name|length
operator|/
literal|2
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|builder
operator|.
name|decryptUpdate
argument_list|(
name|buffer
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|payload
argument_list|,
name|read
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|builder
operator|.
name|decryptUpdate
argument_list|(
name|buffer
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|decryptUpdate
argument_list|(
name|buffer
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
DECL|method|validate (HMACAccumulator builder)
specifier|private
name|void
name|validate
parameter_list|(
name|HMACAccumulator
name|builder
parameter_list|)
block|{
name|assertMacs
argument_list|(
name|builder
operator|.
name|getCalculatedMac
argument_list|()
argument_list|,
name|builder
operator|.
name|getCalculatedMac
argument_list|()
argument_list|)
expr_stmt|;
name|assertMacs
argument_list|(
name|builder
operator|.
name|getAppendedMac
argument_list|()
argument_list|,
name|builder
operator|.
name|getAppendedMac
argument_list|()
argument_list|)
expr_stmt|;
name|assertMacs
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|getCalculatedMac
argument_list|()
argument_list|)
expr_stmt|;
name|assertMacs
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|getAppendedMac
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|assertMacs (byte[] expected, byte[] actual)
specifier|private
name|void
name|assertMacs
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|HexUtils
operator|.
name|byteArrayToHexString
argument_list|(
name|expected
argument_list|)
argument_list|,
name|HexUtils
operator|.
name|byteArrayToHexString
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBufferAdd ()
specifier|public
name|void
name|testBufferAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|CircularBuffer
name|buffer
init|=
operator|new
name|CircularBuffer
argument_list|(
name|payload
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
operator|.
name|length
argument_list|,
name|buffer
operator|.
name|availableForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|availableForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|availableForWrite
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBufferDrain ()
specifier|public
name|void
name|testBufferDrain
parameter_list|()
throws|throws
name|Exception
block|{
name|CircularBuffer
name|buffer
init|=
operator|new
name|CircularBuffer
argument_list|(
name|payload
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|payload
operator|.
name|length
operator|>>
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|buffer
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|buffer
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBufferCompare ()
specifier|public
name|void
name|testBufferCompare
parameter_list|()
throws|throws
name|Exception
block|{
name|CircularBuffer
name|buffer
init|=
operator|new
name|CircularBuffer
argument_list|(
name|payload
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|payload
operator|.
name|length
operator|>>
literal|1
index|]
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
operator|>>
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|compareTo
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeBuffer (int buffersize)
specifier|private
name|byte
index|[]
name|initializeBuffer
parameter_list|(
name|int
name|buffersize
parameter_list|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|buffersize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
name|payload
operator|.
name|length
argument_list|,
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
block|}
end_class

end_unit

