begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
operator|.
name|HexUtils
operator|.
name|byteArrayToHexString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
operator|.
name|HexUtils
operator|.
name|hexToByteArray
import|;
end_import

begin_class
DECL|class|HexUtilsTest
specifier|public
class|class
name|HexUtilsTest
extends|extends
name|TestSupport
block|{
DECL|field|array
name|byte
index|[]
name|array
init|=
block|{
operator|(
name|byte
operator|)
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x23
block|,
operator|(
name|byte
operator|)
literal|0x45
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x89
block|,
operator|(
name|byte
operator|)
literal|0xAB
block|,
operator|(
name|byte
operator|)
literal|0xCD
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testByteArrayToHex ()
specifier|public
name|void
name|testByteArrayToHex
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"0123456789abcdef"
argument_list|,
name|byteArrayToHexString
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripArray ()
specifier|public
name|void
name|roundtripArray
parameter_list|()
block|{
name|assertArrayEquals
argument_list|(
name|array
argument_list|,
name|hexToByteArray
argument_list|(
name|byteArrayToHexString
argument_list|(
name|array
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtrip ()
specifier|public
name|void
name|roundtrip
parameter_list|()
block|{
name|String
name|hexchars
init|=
literal|"01234567890abcdefABCDEF"
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|100000
condition|;
name|x
operator|++
control|)
block|{
name|int
name|r
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|50
argument_list|)
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|r
condition|;
name|y
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|hexchars
operator|.
name|charAt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|hexchars
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|hexString
init|=
name|b
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|length
argument_list|()
operator|%
literal|2
operator|>
literal|0
condition|)
block|{
comment|// add the padded byte if odd
name|assertEquals
argument_list|(
name|hexString
operator|+
literal|'0'
argument_list|,
name|byteArrayToHexString
argument_list|(
name|hexToByteArray
argument_list|(
name|hexString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|hexString
argument_list|,
name|byteArrayToHexString
argument_list|(
name|hexToByteArray
argument_list|(
name|hexString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

