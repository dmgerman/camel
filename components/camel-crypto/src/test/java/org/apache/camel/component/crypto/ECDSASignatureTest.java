begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ECDSASignatureTest
specifier|public
class|class
name|ECDSASignatureTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|payload
specifier|private
name|String
name|payload
init|=
literal|"Dear Alice, Rest assured it's me, signed Bob"
decl_stmt|;
DECL|field|ibmJDK
specifier|private
name|boolean
name|ibmJDK
decl_stmt|;
DECL|field|privateKey
specifier|private
name|PrivateKey
name|privateKey
decl_stmt|;
DECL|field|x509
specifier|private
name|X509Certificate
name|x509
decl_stmt|;
DECL|field|canRun
specifier|private
name|boolean
name|canRun
init|=
literal|true
decl_stmt|;
DECL|method|ECDSASignatureTest ()
specifier|public
name|ECDSASignatureTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// BouncyCastle is required for ECDSA support for JDK 1.6
if|if
condition|(
name|isJava16
argument_list|()
operator|&&
name|Security
operator|.
name|getProvider
argument_list|(
literal|"BC"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|cons
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.bouncycastle.jce.provider.BouncyCastleProvider"
argument_list|)
decl_stmt|;
name|cons
operator|=
name|c
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Provider
name|provider
init|=
operator|(
name|java
operator|.
name|security
operator|.
name|Provider
operator|)
name|cons
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Security
operator|.
name|insertProviderAt
argument_list|(
name|provider
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// This test fails with the IBM JDK
if|if
condition|(
name|isJavaVendor
argument_list|(
literal|"IBM"
argument_list|)
condition|)
block|{
name|ibmJDK
operator|=
literal|true
expr_stmt|;
block|}
comment|// see if we can load the keystore et all
try|try
block|{
name|KeyStore
name|keyStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|ECDSASignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/crypto/ecdsa.jks"
argument_list|)
decl_stmt|;
name|keyStore
operator|.
name|load
argument_list|(
name|in
argument_list|,
literal|"security"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|privateKey
operator|=
operator|(
name|PrivateKey
operator|)
name|keyStore
operator|.
name|getKey
argument_list|(
literal|"ECDSA"
argument_list|,
literal|"security"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|keyStore
operator|.
name|getCertificate
argument_list|(
literal|"ECDSA"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot setup keystore for running this test due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This test is skipped."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|canRun
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilders ()
specifier|protected
name|RouteBuilder
index|[]
name|createRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ibmJDK
operator|||
operator|!
name|canRun
condition|)
block|{
return|return
operator|new
name|RouteBuilder
index|[]
block|{}
return|;
block|}
return|return
operator|new
name|RouteBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: ecdsa-sha1
comment|// we can set the keys explicitly on the endpoint instances.
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"crypto:sign://ecdsa-sha1?algorithm=SHA1withECDSA"
argument_list|,
name|DigitalSignatureEndpoint
operator|.
name|class
argument_list|)
operator|.
name|setPrivateKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"crypto:verify://ecdsa-sha1?algorithm=SHA1withECDSA"
argument_list|,
name|DigitalSignatureEndpoint
operator|.
name|class
argument_list|)
operator|.
name|setPublicKey
argument_list|(
name|x509
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:ecdsa-sha1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"crypto:sign://ecdsa-sha1?algorithm=SHA1withECDSA"
argument_list|)
operator|.
name|to
argument_list|(
literal|"crypto:verify://ecdsa-sha1?algorithm=SHA1withECDSA"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: ecdsa-sha1
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Test
DECL|method|testECDSASHA1 ()
specifier|public
name|void
name|testECDSASHA1
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ibmJDK
operator|||
operator|!
name|canRun
condition|)
block|{
return|return;
block|}
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:ecdsa-sha1"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setupMock ()
specifier|private
name|MockEndpoint
name|setupMock
parameter_list|()
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|payload
argument_list|)
expr_stmt|;
return|return
name|mock
return|;
block|}
end_function

begin_function
DECL|method|doTestSignatureRoute (RouteBuilder builder)
specifier|public
name|Exchange
name|doTestSignatureRoute
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doSignatureRouteTest
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|doSignatureRouteTest (RouteBuilder builder, Exchange e, Map<String, Object> headers)
specifier|public
name|Exchange
name|doSignatureRouteTest
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|,
name|Exchange
name|e
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
try|try
block|{
name|context
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ProducerTemplate
name|template
init|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|send
argument_list|(
literal|"direct:in"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:in"
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
return|return
name|mock
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|disableJMX
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

