begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPrivateKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PGPDataFormatTest
specifier|public
class|class
name|PGPDataFormatTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|keyFileName
specifier|static
name|String
name|keyFileName
init|=
literal|"src/test/resources/org/apache/camel/component/crypto/pubring.gpg"
decl_stmt|;
DECL|field|keyFileNameSec
specifier|static
name|String
name|keyFileNameSec
init|=
literal|"src/test/resources/org/apache/camel/component/crypto/secring.gpg"
decl_stmt|;
DECL|field|keyUserid
specifier|static
name|String
name|keyUserid
init|=
literal|"sdude@nowhere.net"
decl_stmt|;
DECL|field|keyPassword
specifier|static
name|String
name|keyPassword
init|=
literal|"sdude"
decl_stmt|;
annotation|@
name|Test
DECL|method|testEncryption ()
specifier|public
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionHeaders ()
specifier|public
name|void
name|testEncryptionHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inlineHeaders"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doRoundTripEncryptionTests (String endpoint, Map<String, Object> headers)
specifier|private
name|void
name|doRoundTripEncryptionTests
parameter_list|(
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
throws|throws
name|Exception
block|{
name|MockEndpoint
name|encrypted
init|=
name|setupExpectations
argument_list|(
name|context
argument_list|,
literal|3
argument_list|,
literal|"mock:encrypted"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|unencrypted
init|=
name|setupExpectations
argument_list|(
name|context
argument_list|,
literal|3
argument_list|,
literal|"mock:unencrypted"
argument_list|)
decl_stmt|;
name|String
name|payload
init|=
literal|"Hi Alice, Be careful Eve is listening, signed Bob"
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
name|endpoint
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
name|endpoint
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
name|endpoint
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMocksSatisfied
argument_list|(
name|encrypted
argument_list|,
name|unencrypted
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMocksSatisfied (MockEndpoint encrypted, MockEndpoint unencrypted, String payload)
specifier|private
name|void
name|assertMocksSatisfied
parameter_list|(
name|MockEndpoint
name|encrypted
parameter_list|,
name|MockEndpoint
name|unencrypted
parameter_list|,
name|String
name|payload
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitAndAssert
argument_list|(
name|unencrypted
argument_list|)
expr_stmt|;
name|awaitAndAssert
argument_list|(
name|encrypted
argument_list|)
expr_stmt|;
for|for
control|(
name|Exchange
name|e
range|:
name|unencrypted
operator|.
name|getReceivedExchanges
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|payload
argument_list|,
name|ExchangeHelper
operator|.
name|getMandatoryInBody
argument_list|(
name|e
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Exchange
name|e
range|:
name|encrypted
operator|.
name|getReceivedExchanges
argument_list|()
control|)
block|{
name|byte
index|[]
name|ciphertext
init|=
name|ExchangeHelper
operator|.
name|getMandatoryInBody
argument_list|(
name|e
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|ciphertext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: pgp-format
name|PGPDataFormat
name|pgpDataFormat
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|PGPPublicKey
name|pKey
init|=
name|PGPDataFormatUtil
operator|.
name|findPublicKey
argument_list|(
name|keyFileName
argument_list|,
name|keyUserid
argument_list|)
decl_stmt|;
name|PGPPrivateKey
name|sKey
init|=
name|PGPDataFormatUtil
operator|.
name|findPrivateKey
argument_list|(
name|keyFileNameSec
argument_list|,
name|keyUserid
argument_list|,
name|keyPassword
argument_list|)
decl_stmt|;
name|pgpDataFormat
operator|.
name|setPublicKey
argument_list|(
name|pKey
argument_list|)
expr_stmt|;
name|pgpDataFormat
operator|.
name|setPrivateKey
argument_list|(
name|sKey
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:inline"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpDataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpDataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format
comment|// START SNIPPET: pgp-format-header
name|PGPDataFormat
name|pgpDataFormatNoKey
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpDataFormat
operator|.
name|setPublicKey
argument_list|(
name|pKey
argument_list|)
expr_stmt|;
name|pgpDataFormat
operator|.
name|setPrivateKey
argument_list|(
name|sKey
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:inlineHeaders"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_PUB
argument_list|)
operator|.
name|constant
argument_list|(
name|pKey
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_PRI
argument_list|)
operator|.
name|constant
argument_list|(
name|sKey
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpDataFormatNoKey
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpDataFormatNoKey
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-header
block|}
block|}
return|;
block|}
DECL|method|awaitAndAssert (MockEndpoint mock)
specifier|private
name|void
name|awaitAndAssert
parameter_list|(
name|MockEndpoint
name|mock
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|setupExpectations (CamelContext context, int expected, String mock)
specifier|public
name|MockEndpoint
name|setupExpectations
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|int
name|expected
parameter_list|,
name|String
name|mock
parameter_list|)
block|{
name|MockEndpoint
name|mockEp
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|mock
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockEp
operator|.
name|expectedMessageCount
argument_list|(
name|expected
argument_list|)
expr_stmt|;
return|return
name|mockEp
return|;
block|}
block|}
end_class

end_unit

