begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PGPDataFormatTest
specifier|public
class|class
name|PGPDataFormatTest
extends|extends
name|AbstractPGPDataFormatTest
block|{
DECL|method|getKeyFileName ()
specifier|protected
name|String
name|getKeyFileName
parameter_list|()
block|{
return|return
literal|"org/apache/camel/component/crypto/pubring.gpg"
return|;
block|}
DECL|method|getKeyFileNameSec ()
specifier|protected
name|String
name|getKeyFileNameSec
parameter_list|()
block|{
return|return
literal|"org/apache/camel/component/crypto/secring.gpg"
return|;
block|}
DECL|method|getKeyUserId ()
specifier|protected
name|String
name|getKeyUserId
parameter_list|()
block|{
return|return
literal|"sdude@nowhere.net"
return|;
block|}
DECL|method|getKeyPassword ()
specifier|protected
name|String
name|getKeyPassword
parameter_list|()
block|{
return|return
literal|"sdude"
return|;
block|}
annotation|@
name|Test
DECL|method|testEncryption ()
specifier|public
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryption2 ()
specifier|public
name|void
name|testEncryption2
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionArmor ()
specifier|public
name|void
name|testEncryptionArmor
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline-armor"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionSigned ()
specifier|public
name|void
name|testEncryptionSigned
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline-sign"
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: pgp-format
comment|// Public Key FileName
name|String
name|keyFileName
init|=
name|getKeyFileName
argument_list|()
decl_stmt|;
comment|// Private Key FileName
name|String
name|keyFileNameSec
init|=
name|getKeyFileNameSec
argument_list|()
decl_stmt|;
comment|// Keyring Userid Used to Encrypt
name|String
name|keyUserid
init|=
name|getKeyUserId
argument_list|()
decl_stmt|;
comment|// Private key password
name|String
name|keyPassword
init|=
name|getKeyPassword
argument_list|()
decl_stmt|;
name|from
argument_list|(
literal|"direct:inline"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileName
argument_list|,
name|keyUserid
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileNameSec
argument_list|,
name|keyUserid
argument_list|,
name|keyPassword
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format
comment|// START SNIPPET: pgp-format-header
name|PGPDataFormat
name|pgpEncrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpEncrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgpEncrypt
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpDecrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpDecrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileNameSec
argument_list|)
expr_stmt|;
name|pgpDecrypt
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpDecrypt
operator|.
name|setPassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:inline2"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpEncrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpDecrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:inline-armor"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileName
argument_list|,
name|keyUserid
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileNameSec
argument_list|,
name|keyUserid
argument_list|,
name|keyPassword
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-header
name|PGPDataFormat
name|pgpSignAndEncrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setSignatureKeyFileName
argument_list|(
name|keyFileNameSec
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setSignatureKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setSignaturePassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpVerifyAndDecrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileNameSec
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setPassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setSignatureKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setSignatureKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:inline-sign"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

