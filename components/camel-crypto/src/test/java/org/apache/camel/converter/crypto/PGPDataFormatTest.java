begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|CompressionAlgorithmTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|HashAlgorithmTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|SymmetricKeyAlgorithmTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|sig
operator|.
name|KeyFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PGPDataFormatTest
specifier|public
class|class
name|PGPDataFormatTest
extends|extends
name|AbstractPGPDataFormatTest
block|{
DECL|field|SEC_KEY_RING_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SEC_KEY_RING_FILE_NAME
init|=
literal|"org/apache/camel/component/crypto/secring.gpg"
decl_stmt|;
DECL|field|PUB_KEY_RING_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PUB_KEY_RING_FILE_NAME
init|=
literal|"org/apache/camel/component/crypto/pubring.gpg"
decl_stmt|;
DECL|method|getKeyFileName ()
specifier|protected
name|String
name|getKeyFileName
parameter_list|()
block|{
return|return
name|PUB_KEY_RING_FILE_NAME
return|;
block|}
DECL|method|getKeyFileNameSec ()
specifier|protected
name|String
name|getKeyFileNameSec
parameter_list|()
block|{
return|return
name|SEC_KEY_RING_FILE_NAME
return|;
block|}
DECL|method|getKeyUserId ()
specifier|protected
name|String
name|getKeyUserId
parameter_list|()
block|{
return|return
literal|"sdude@nowhere.net"
return|;
block|}
DECL|method|getKeyUserIds ()
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getKeyUserIds
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|userids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|userids
operator|.
name|add
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|userids
operator|.
name|add
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|userids
return|;
block|}
DECL|method|getSignatureKeyUserIds ()
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getSignatureKeyUserIds
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|userids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|userids
operator|.
name|add
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|userids
operator|.
name|add
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|userids
return|;
block|}
DECL|method|getKeyPassword ()
specifier|protected
name|String
name|getKeyPassword
parameter_list|()
block|{
return|return
literal|"sdude"
return|;
block|}
DECL|method|getProvider ()
specifier|protected
name|String
name|getProvider
parameter_list|()
block|{
return|return
literal|"BC"
return|;
block|}
DECL|method|getAlgorithm ()
specifier|protected
name|int
name|getAlgorithm
parameter_list|()
block|{
return|return
name|SymmetricKeyAlgorithmTags
operator|.
name|TRIPLE_DES
return|;
block|}
DECL|method|getHashAlgorithm ()
specifier|protected
name|int
name|getHashAlgorithm
parameter_list|()
block|{
return|return
name|HashAlgorithmTags
operator|.
name|SHA256
return|;
block|}
DECL|method|getCompressionAlgorithm ()
specifier|protected
name|int
name|getCompressionAlgorithm
parameter_list|()
block|{
return|return
name|CompressionAlgorithmTags
operator|.
name|BZIP2
return|;
block|}
annotation|@
name|Test
DECL|method|testEncryption ()
specifier|public
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryption2 ()
specifier|public
name|void
name|testEncryption2
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionArmor ()
specifier|public
name|void
name|testEncryptionArmor
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline-armor"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionSigned ()
specifier|public
name|void
name|testEncryptionSigned
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline-sign"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionKeyRingByteArray ()
specifier|public
name|void
name|testEncryptionKeyRingByteArray
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:key-ring-byte-array"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionSignedKeyRingByteArray ()
specifier|public
name|void
name|testEncryptionSignedKeyRingByteArray
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:sign-key-ring-byte-array"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeveralSignerKeys ()
specifier|public
name|void
name|testSeveralSignerKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:several-signer-keys"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneUserIdWithServeralKeys ()
specifier|public
name|void
name|testOneUserIdWithServeralKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:one-userid-several-keys"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyAccess ()
specifier|public
name|void
name|testKeyAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:key_access"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyExceptionNoPublicKeyFoundCorrespondingToSignatureUserIds ()
specifier|public
name|void
name|testVerifyExceptionNoPublicKeyFoundCorrespondingToSignatureUserIds
parameter_list|()
throws|throws
name|Exception
block|{
name|setupExpectations
argument_list|(
name|context
argument_list|,
literal|1
argument_list|,
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|exception
init|=
name|setupExpectations
argument_list|(
name|context
argument_list|,
literal|1
argument_list|,
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|String
name|payload
init|=
literal|"Hi Alice, Be careful Eve is listening, signed Bob"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|getHeaders
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:verify_exception_sig_userids"
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|//check exception text
name|Exception
name|e
init|=
operator|(
name|Exception
operator|)
name|exception
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected excpetion  missing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No public key found fitting to the signature key Id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyExceptionNoPassphraseSpecifiedForSignatureKeyUserId ()
specifier|public
name|void
name|testVerifyExceptionNoPassphraseSpecifiedForSignatureKeyUserId
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|exception
init|=
name|setupExpectations
argument_list|(
name|context
argument_list|,
literal|1
argument_list|,
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|String
name|payload
init|=
literal|"Hi Alice, Be careful Eve is listening, signed Bob"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// add signature user id which does not have a passphrase
name|headers
operator|.
name|put
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|,
literal|"userIDWithNoPassphrase"
argument_list|)
expr_stmt|;
comment|// the following entry is necessary for the dynamic test
name|headers
operator|.
name|put
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|,
literal|"second"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:several-signer-keys"
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|//check exception text
name|Exception
name|e
init|=
operator|(
name|Exception
operator|)
name|exception
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected excpetion  missing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No passphrase specified for signature key user ID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * You get three keys with the UserId "keyflag", a primary key and its two      * sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be      * used for signing and the sub-key with KeyFlag      * {@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or      * {@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testKeyFlagSelectsCorrectKey ()
specifier|public
name|void
name|testKeyFlagSelectsCorrectKey
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockKeyFlag
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:encrypted_keyflag"
argument_list|)
decl_stmt|;
name|mockKeyFlag
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:keyflag"
argument_list|,
literal|"Test Message"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|mockKeyFlag
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exchanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|exchanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Message
name|inMess
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|inMess
argument_list|)
expr_stmt|;
comment|// must contain exactly one encryption key and one signature
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|inMess
operator|.
name|getHeader
argument_list|(
name|PGPDataFormat
operator|.
name|NUMBER_OF_ENCRYPTION_KEYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|inMess
operator|.
name|getHeader
argument_list|(
name|PGPDataFormat
operator|.
name|NUMBER_OF_SIGNING_KEYS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilders ()
specifier|protected
name|RouteBuilder
index|[]
name|createRouteBuilders
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
comment|// START SNIPPET: pgp-format
comment|// Public Key FileName
name|String
name|keyFileName
init|=
name|getKeyFileName
argument_list|()
decl_stmt|;
comment|// Private Key FileName
name|String
name|keyFileNameSec
init|=
name|getKeyFileNameSec
argument_list|()
decl_stmt|;
comment|// Keyring Userid Used to Encrypt
name|String
name|keyUserid
init|=
name|getKeyUserId
argument_list|()
decl_stmt|;
comment|// Private key password
name|String
name|keyPassword
init|=
name|getKeyPassword
argument_list|()
decl_stmt|;
name|from
argument_list|(
literal|"direct:inline"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileName
argument_list|,
name|keyUserid
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileNameSec
argument_list|,
literal|null
argument_list|,
name|keyPassword
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format
comment|// START SNIPPET: pgp-format-header
name|PGPDataFormat
name|pgpEncrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpEncrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgpEncrypt
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpEncrypt
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncrypt
operator|.
name|setAlgorithm
argument_list|(
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncrypt
operator|.
name|setCompressionAlgorithm
argument_list|(
name|getCompressionAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpDecrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpDecrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileNameSec
argument_list|)
expr_stmt|;
name|pgpDecrypt
operator|.
name|setPassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|pgpDecrypt
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:inline2"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpEncrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpDecrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:inline-armor"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileName
argument_list|,
name|keyUserid
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileNameSec
argument_list|,
literal|null
argument_list|,
name|keyPassword
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-header
comment|// START SNIPPET: pgp-format-signature
name|PGPDataFormat
name|pgpSignAndEncrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setSignatureKeyFileName
argument_list|(
name|keyFileNameSec
argument_list|)
expr_stmt|;
name|PGPPassphraseAccessor
name|passphraseAccessor
init|=
name|getPassphraseAccessor
argument_list|()
decl_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setSignatureKeyUserid
argument_list|(
literal|"Super<sdude@nowhere.net>"
argument_list|)
expr_stmt|;
comment|// must be the exact user Id because passphrase is searched in accessor
name|pgpSignAndEncrypt
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessor
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setAlgorithm
argument_list|(
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setHashAlgorithm
argument_list|(
name|getHashAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setCompressionAlgorithm
argument_list|(
name|getCompressionAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpVerifyAndDecrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileNameSec
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setPassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setSignatureKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setSignatureKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
comment|// restrict verification to public keys with certain User ID
name|from
argument_list|(
literal|"direct:inline-sign"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-signature
comment|// test verifying exception, no public key found corresponding to signature key userIds
name|from
argument_list|(
literal|"direct:verify_exception_sig_userids"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERIDS
argument_list|)
operator|.
name|constant
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"wrong1"
block|,
literal|"wrong2"
block|}
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"wrongUserID"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|/* ---- key ring as byte array -- */
comment|// START SNIPPET: pgp-format-key-ring-byte-array
name|PGPDataFormat
name|pgpEncryptByteArray
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpEncryptByteArray
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncryptByteArray
operator|.
name|setKeyUserids
argument_list|(
name|getKeyUserIds
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncryptByteArray
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncryptByteArray
operator|.
name|setAlgorithm
argument_list|(
name|SymmetricKeyAlgorithmTags
operator|.
name|DES
argument_list|)
expr_stmt|;
name|pgpEncryptByteArray
operator|.
name|setCompressionAlgorithm
argument_list|(
name|CompressionAlgorithmTags
operator|.
name|UNCOMPRESSED
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpDecryptByteArray
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpDecryptByteArray
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpDecryptByteArray
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessor
argument_list|)
expr_stmt|;
name|pgpDecryptByteArray
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:key-ring-byte-array"
argument_list|)
operator|.
name|streamCaching
argument_list|()
operator|.
name|marshal
argument_list|(
name|pgpEncryptByteArray
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpDecryptByteArray
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-key-ring-byte-array
comment|// START SNIPPET: pgp-format-signature-key-ring-byte-array
name|PGPDataFormat
name|pgpSignAndEncryptByteArray
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setSignatureKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setSignatureKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setSignaturePassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setAlgorithm
argument_list|(
name|SymmetricKeyAlgorithmTags
operator|.
name|BLOWFISH
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setHashAlgorithm
argument_list|(
name|HashAlgorithmTags
operator|.
name|RIPEMD160
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setCompressionAlgorithm
argument_list|(
name|CompressionAlgorithmTags
operator|.
name|ZLIB
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpVerifyAndDecryptByteArray
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpVerifyAndDecryptByteArray
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessor
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptByteArray
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptByteArray
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|// restrict verification to public keys with certain User ID
name|pgpVerifyAndDecryptByteArray
operator|.
name|setSignatureKeyUserids
argument_list|(
name|getSignatureKeyUserIds
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:sign-key-ring-byte-array"
argument_list|)
operator|.
name|streamCaching
argument_list|()
comment|// encryption key ring can also be set as header
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|ENCRYPTION_KEY_RING
argument_list|)
operator|.
name|constant
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncryptByteArray
argument_list|)
comment|// it is recommended to remove the header immediately when it is no longer needed
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|ENCRYPTION_KEY_RING
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
comment|// signature key ring can also be set as header
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_RING
argument_list|)
operator|.
name|constant
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecryptByteArray
argument_list|)
comment|// it is recommended to remove the header immediately when it is no longer needed
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_RING
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-signature-key-ring-byte-array
comment|// START SNIPPET: pgp-format-several-signer-keys
name|PGPDataFormat
name|pgpSignAndEncryptSeveralSignerKeys
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setSignatureKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|signerUserIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|signerUserIds
operator|.
name|add
argument_list|(
literal|"Third (comment third)<email@third.com>"
argument_list|)
expr_stmt|;
name|signerUserIds
operator|.
name|add
argument_list|(
literal|"Second<email@second.com>"
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setSignatureKeyUserids
argument_list|(
name|signerUserIds
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userId2Passphrase
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|userId2Passphrase
operator|.
name|put
argument_list|(
literal|"Third (comment third)<email@third.com>"
argument_list|,
literal|"sdude"
argument_list|)
expr_stmt|;
name|userId2Passphrase
operator|.
name|put
argument_list|(
literal|"Second<email@second.com>"
argument_list|,
literal|"sdude"
argument_list|)
expr_stmt|;
name|PGPPassphraseAccessor
name|passphraseAccessorSeveralKeys
init|=
operator|new
name|DefaultPGPPassphraseAccessor
argument_list|(
name|userId2Passphrase
argument_list|)
decl_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessorSeveralKeys
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpVerifyAndDecryptSeveralSignerKeys
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessor
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setSignatureKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|// only specify one expected signature
name|List
argument_list|<
name|String
argument_list|>
name|expectedSigUserIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedSigUserIds
operator|.
name|add
argument_list|(
literal|"Second<email@second.com>"
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setSignatureKeyUserids
argument_list|(
name|expectedSigUserIds
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:several-signer-keys"
argument_list|)
operator|.
name|streamCaching
argument_list|()
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncryptSeveralSignerKeys
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecryptSeveralSignerKeys
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-several-signer-keys
comment|// test encryption by several key and signing by serveral keys where the keys are specified by one User ID part
name|PGPDataFormat
name|pgpSignAndEncryptOneUserIdWithServeralKeys
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpSignAndEncryptOneUserIdWithServeralKeys
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptOneUserIdWithServeralKeys
operator|.
name|setSignatureKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
comment|// the two private keys have the same password therefore we do not need a passphrase accessor
name|pgpSignAndEncryptOneUserIdWithServeralKeys
operator|.
name|setPassword
argument_list|(
name|getKeyPassword
argument_list|()
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setPassword
argument_list|(
name|getKeyPassword
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setSignatureKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setSignatureKeyUserids
argument_list|(
name|expectedSigUserIds
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:one-userid-several-keys"
argument_list|)
comment|// there are two keys which have a User ID which contains the string "econd"
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"econd"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"econd"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncryptOneUserIdWithServeralKeys
argument_list|)
comment|// it is recommended to remove the header immediately when it is no longer needed
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|)
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
comment|// only specify one expected signature key, to check the first signature
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"Second<email@second.com>"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
argument_list|)
comment|// do it again but now check the second signature key
comment|// there are two keys which have a User ID which contains the string "econd"
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"econd"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"econd"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncryptOneUserIdWithServeralKeys
argument_list|)
comment|// it is recommended to remove the header immediately when it is no longer needed
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|)
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
comment|// only specify one expected signature key, to check the second signature
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"Third (comment third)<email@third.com>"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// keyflag test
name|PGPDataFormat
name|pgpKeyFlag
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
comment|// the following keyring contains a primary key with KeyFlag "Certify" and a subkey for signing and a subkey for encryption
name|pgpKeyFlag
operator|.
name|setKeyFileName
argument_list|(
literal|"org/apache/camel/component/crypto/pubringSubKeys.gpg"
argument_list|)
expr_stmt|;
name|pgpKeyFlag
operator|.
name|setSignatureKeyFileName
argument_list|(
literal|"org/apache/camel/component/crypto/secringSubKeys.gpg"
argument_list|)
expr_stmt|;
name|pgpKeyFlag
operator|.
name|setSignaturePassword
argument_list|(
literal|"Abcd1234"
argument_list|)
expr_stmt|;
name|pgpKeyFlag
operator|.
name|setKeyUserid
argument_list|(
literal|"keyflag"
argument_list|)
expr_stmt|;
name|pgpKeyFlag
operator|.
name|setSignatureKeyUserid
argument_list|(
literal|"keyflag"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:keyflag"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpKeyFlag
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted_keyflag"
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|PGPPublicKeyAccess
name|publicKeyAccess
init|=
operator|new
name|DefaultPGPPublicKeyAccess
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
decl_stmt|;
comment|//password cannot be set dynamically!
name|PGPSecretKeyAccess
name|secretKeyAccess
init|=
operator|new
name|DefaultPGPSecretKeyAccess
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|,
literal|"sdude"
argument_list|,
name|getProvider
argument_list|()
argument_list|)
decl_stmt|;
name|PGPKeyAccessDataFormat
name|dfEncryptSignKeyAccess
init|=
operator|new
name|PGPKeyAccessDataFormat
argument_list|()
decl_stmt|;
name|dfEncryptSignKeyAccess
operator|.
name|setPublicKeyAccess
argument_list|(
name|publicKeyAccess
argument_list|)
expr_stmt|;
name|dfEncryptSignKeyAccess
operator|.
name|setSecretKeyAccess
argument_list|(
name|secretKeyAccess
argument_list|)
expr_stmt|;
name|dfEncryptSignKeyAccess
operator|.
name|setKeyUserid
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
name|dfEncryptSignKeyAccess
operator|.
name|setSignatureKeyUserid
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
name|PGPKeyAccessDataFormat
name|dfDecryptVerifyKeyAccess
init|=
operator|new
name|PGPKeyAccessDataFormat
argument_list|()
decl_stmt|;
name|dfDecryptVerifyKeyAccess
operator|.
name|setPublicKeyAccess
argument_list|(
name|publicKeyAccess
argument_list|)
expr_stmt|;
name|dfDecryptVerifyKeyAccess
operator|.
name|setSecretKeyAccess
argument_list|(
name|secretKeyAccess
argument_list|)
expr_stmt|;
name|dfDecryptVerifyKeyAccess
operator|.
name|setSignatureKeyUserid
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:key_access"
argument_list|)
operator|.
name|marshal
argument_list|(
name|dfEncryptSignKeyAccess
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|dfDecryptVerifyKeyAccess
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
DECL|method|getPublicKeyRing ()
specifier|static
name|byte
index|[]
name|getPublicKeyRing
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getKeyRing
argument_list|(
name|PUB_KEY_RING_FILE_NAME
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getSecKeyRing ()
specifier|public
specifier|static
name|byte
index|[]
name|getSecKeyRing
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getKeyRing
argument_list|(
name|SEC_KEY_RING_FILE_NAME
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getKeyRing (String fileName)
specifier|private
specifier|static
name|byte
index|[]
name|getKeyRing
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|PGPDataFormatTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getPassphraseAccessor ()
specifier|public
specifier|static
name|PGPPassphraseAccessor
name|getPassphraseAccessor
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userId2Passphrase
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"Super<sdude@nowhere.net>"
argument_list|,
literal|"sdude"
argument_list|)
decl_stmt|;
name|PGPPassphraseAccessor
name|passphraseAccessor
init|=
operator|new
name|DefaultPGPPassphraseAccessor
argument_list|(
name|userId2Passphrase
argument_list|)
decl_stmt|;
return|return
name|passphraseAccessor
return|;
block|}
end_function

unit|}
end_unit

