begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|BCPGOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|CompressionAlgorithmTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|HashAlgorithmTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|SymmetricKeyAlgorithmTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|sig
operator|.
name|KeyFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPCompressedDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPEncryptedDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPLiteralData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPLiteralDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPrivateKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignatureGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcaPGPContentSignerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcePBEKeyEncryptionMethodGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcePBESecretKeyDecryptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcePGPDataEncryptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcePublicKeyKeyEncryptionMethodGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PGPDataFormatTest
specifier|public
class|class
name|PGPDataFormatTest
extends|extends
name|AbstractPGPDataFormatTest
block|{
DECL|field|PUB_KEY_RING_SUBKEYS_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PUB_KEY_RING_SUBKEYS_FILE_NAME
init|=
literal|"org/apache/camel/component/crypto/pubringSubKeys.gpg"
decl_stmt|;
DECL|field|SEC_KEY_RING_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SEC_KEY_RING_FILE_NAME
init|=
literal|"org/apache/camel/component/crypto/secring.gpg"
decl_stmt|;
DECL|field|PUB_KEY_RING_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PUB_KEY_RING_FILE_NAME
init|=
literal|"org/apache/camel/component/crypto/pubring.gpg"
decl_stmt|;
DECL|field|encryptor
name|PGPDataFormat
name|encryptor
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
DECL|field|decryptor
name|PGPDataFormat
name|decryptor
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpEncryptorAndDecryptor ()
specifier|public
name|void
name|setUpEncryptorAndDecryptor
parameter_list|()
block|{
comment|// the following keyring contains a primary key with KeyFlag "Certify" and a subkey for signing and a subkey for encryption
name|encryptor
operator|.
name|setKeyFileName
argument_list|(
name|PUB_KEY_RING_SUBKEYS_FILE_NAME
argument_list|)
expr_stmt|;
name|encryptor
operator|.
name|setSignatureKeyFileName
argument_list|(
literal|"org/apache/camel/component/crypto/secringSubKeys.gpg"
argument_list|)
expr_stmt|;
name|encryptor
operator|.
name|setSignaturePassword
argument_list|(
literal|"Abcd1234"
argument_list|)
expr_stmt|;
name|encryptor
operator|.
name|setKeyUserid
argument_list|(
literal|"keyflag"
argument_list|)
expr_stmt|;
name|encryptor
operator|.
name|setSignatureKeyUserid
argument_list|(
literal|"keyflag"
argument_list|)
expr_stmt|;
name|encryptor
operator|.
name|setIntegrity
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// the following keyring contains a primary key with KeyFlag "Certify" and a subkey for signing and a subkey for encryption
name|decryptor
operator|.
name|setKeyFileName
argument_list|(
literal|"org/apache/camel/component/crypto/secringSubKeys.gpg"
argument_list|)
expr_stmt|;
name|decryptor
operator|.
name|setSignatureKeyFileName
argument_list|(
name|PUB_KEY_RING_SUBKEYS_FILE_NAME
argument_list|)
expr_stmt|;
name|decryptor
operator|.
name|setPassword
argument_list|(
literal|"Abcd1234"
argument_list|)
expr_stmt|;
name|decryptor
operator|.
name|setSignatureKeyUserid
argument_list|(
literal|"keyflag"
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyFileName ()
specifier|protected
name|String
name|getKeyFileName
parameter_list|()
block|{
return|return
name|PUB_KEY_RING_FILE_NAME
return|;
block|}
DECL|method|getKeyFileNameSec ()
specifier|protected
name|String
name|getKeyFileNameSec
parameter_list|()
block|{
return|return
name|SEC_KEY_RING_FILE_NAME
return|;
block|}
DECL|method|getKeyUserId ()
specifier|protected
name|String
name|getKeyUserId
parameter_list|()
block|{
return|return
literal|"sdude@nowhere.net"
return|;
block|}
DECL|method|getKeyUserIds ()
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getKeyUserIds
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|userids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|userids
operator|.
name|add
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|userids
operator|.
name|add
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|userids
return|;
block|}
DECL|method|getSignatureKeyUserIds ()
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getSignatureKeyUserIds
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|userids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|userids
operator|.
name|add
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|userids
operator|.
name|add
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|userids
return|;
block|}
DECL|method|getKeyPassword ()
specifier|protected
name|String
name|getKeyPassword
parameter_list|()
block|{
return|return
literal|"sdude"
return|;
block|}
DECL|method|getProvider ()
specifier|protected
name|String
name|getProvider
parameter_list|()
block|{
return|return
literal|"BC"
return|;
block|}
DECL|method|getAlgorithm ()
specifier|protected
name|int
name|getAlgorithm
parameter_list|()
block|{
return|return
name|SymmetricKeyAlgorithmTags
operator|.
name|TRIPLE_DES
return|;
block|}
DECL|method|getHashAlgorithm ()
specifier|protected
name|int
name|getHashAlgorithm
parameter_list|()
block|{
return|return
name|HashAlgorithmTags
operator|.
name|SHA256
return|;
block|}
DECL|method|getCompressionAlgorithm ()
specifier|protected
name|int
name|getCompressionAlgorithm
parameter_list|()
block|{
return|return
name|CompressionAlgorithmTags
operator|.
name|BZIP2
return|;
block|}
annotation|@
name|Test
DECL|method|testEncryption ()
specifier|public
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryption2 ()
specifier|public
name|void
name|testEncryption2
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionArmor ()
specifier|public
name|void
name|testEncryptionArmor
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline-armor"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionSigned ()
specifier|public
name|void
name|testEncryptionSigned
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:inline-sign"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionKeyRingByteArray ()
specifier|public
name|void
name|testEncryptionKeyRingByteArray
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:key-ring-byte-array"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionSignedKeyRingByteArray ()
specifier|public
name|void
name|testEncryptionSignedKeyRingByteArray
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:sign-key-ring-byte-array"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeveralSignerKeys ()
specifier|public
name|void
name|testSeveralSignerKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:several-signer-keys"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneUserIdWithServeralKeys ()
specifier|public
name|void
name|testOneUserIdWithServeralKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:one-userid-several-keys"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyAccess ()
specifier|public
name|void
name|testKeyAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|doRoundTripEncryptionTests
argument_list|(
literal|"direct:key_access"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyExceptionNoPublicKeyFoundCorrespondingToSignatureUserIds ()
specifier|public
name|void
name|testVerifyExceptionNoPublicKeyFoundCorrespondingToSignatureUserIds
parameter_list|()
throws|throws
name|Exception
block|{
name|setupExpectations
argument_list|(
name|context
argument_list|,
literal|1
argument_list|,
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|exception
init|=
name|setupExpectations
argument_list|(
name|context
argument_list|,
literal|1
argument_list|,
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|String
name|payload
init|=
literal|"Hi Alice, Be careful Eve is listening, signed Bob"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|getHeaders
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:verify_exception_sig_userids"
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|exception
argument_list|,
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"No public key found for the key ID(s)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyExceptionNoPassphraseSpecifiedForSignatureKeyUserId ()
specifier|public
name|void
name|testVerifyExceptionNoPassphraseSpecifiedForSignatureKeyUserId
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|exception
init|=
name|setupExpectations
argument_list|(
name|context
argument_list|,
literal|1
argument_list|,
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|String
name|payload
init|=
literal|"Hi Alice, Be careful Eve is listening, signed Bob"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// add signature user id which does not have a passphrase
name|headers
operator|.
name|put
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|,
literal|"userIDWithNoPassphrase"
argument_list|)
expr_stmt|;
comment|// the following entry is necessary for the dynamic test
name|headers
operator|.
name|put
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|,
literal|"second"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:several-signer-keys"
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|exception
argument_list|,
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"No passphrase specified for signature key user ID"
argument_list|)
expr_stmt|;
block|}
comment|/**      * You get three keys with the UserId "keyflag", a primary key and its two      * sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be      * used for signing and the sub-key with KeyFlag      * {@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or      * {@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testKeyFlagSelectsCorrectKey ()
specifier|public
name|void
name|testKeyFlagSelectsCorrectKey
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockKeyFlag
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:encrypted_keyflag"
argument_list|)
decl_stmt|;
name|mockKeyFlag
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:keyflag"
argument_list|,
literal|"Test Message"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|mockKeyFlag
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exchanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|exchanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Message
name|inMess
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|inMess
argument_list|)
expr_stmt|;
comment|// must contain exactly one encryption key and one signature
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|inMess
operator|.
name|getHeader
argument_list|(
name|PGPDataFormat
operator|.
name|NUMBER_OF_ENCRYPTION_KEYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|inMess
operator|.
name|getHeader
argument_list|(
name|PGPDataFormat
operator|.
name|NUMBER_OF_SIGNING_KEYS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * You get three keys with the UserId "keyflag", a primary key and its two      * sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be      * used for signing and the sub-key with KeyFlag      * {@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or      * {@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.      *<p>      * Tests also the decryption and verifying part with the subkeys.      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testDecryptVerifyWithSubkey ()
specifier|public
name|void
name|testDecryptVerifyWithSubkey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do not use doRoundTripEncryptionTests("direct:subkey"); because otherwise you get an error in the dynamic test
name|String
name|payload
init|=
literal|"Test Message"
decl_stmt|;
name|MockEndpoint
name|mockSubkey
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:unencrypted"
argument_list|)
decl_stmt|;
name|mockSubkey
operator|.
name|expectedBodiesReceived
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkey"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyBody ()
specifier|public
name|void
name|testEmptyBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|payload
init|=
literal|""
decl_stmt|;
name|MockEndpoint
name|mockSubkey
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:unencrypted"
argument_list|)
decl_stmt|;
name|mockSubkey
operator|.
name|expectedBodiesReceived
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkey"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionDecryptorIncorrectInputFormatNoPGPMessage ()
specifier|public
name|void
name|testExceptionDecryptorIncorrectInputFormatNoPGPMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|payload
init|=
literal|"Not Correct Format"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkeyUnmarshal"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"The input message body has an invalid format."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionDecryptorIncorrectInputFormatPGPSignedData ()
specifier|public
name|void
name|testExceptionDecryptorIncorrectInputFormatPGPSignedData
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|createSignature
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkeyUnmarshal"
argument_list|,
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"The input message body has an invalid format."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionDecryptorIncorrectInputNoCompression ()
specifier|public
name|void
name|testExceptionDecryptorIncorrectInputNoCompression
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|createEncryptedNonCompressedData
argument_list|(
name|bos
argument_list|,
name|PUB_KEY_RING_SUBKEYS_FILE_NAME
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkeyUnmarshal"
argument_list|,
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"The input message body has an invalid format."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionDecryptorNoKeyFound ()
specifier|public
name|void
name|testExceptionDecryptorNoKeyFound
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|createEncryptedNonCompressedData
argument_list|(
name|bos
argument_list|,
name|PUB_KEY_RING_FILE_NAME
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkeyUnmarshal"
argument_list|,
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|PGPException
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"PGP message is encrypted with a key which could not be found in the Secret Keyring"
argument_list|)
expr_stmt|;
block|}
DECL|method|createEncryptedNonCompressedData (ByteArrayOutputStream bos, String keyringPath)
name|void
name|createEncryptedNonCompressedData
parameter_list|(
name|ByteArrayOutputStream
name|bos
parameter_list|,
name|String
name|keyringPath
parameter_list|)
throws|throws
name|Exception
throws|,
name|IOException
throws|,
name|PGPException
throws|,
name|UnsupportedEncodingException
block|{
name|PGPEncryptedDataGenerator
name|encGen
init|=
operator|new
name|PGPEncryptedDataGenerator
argument_list|(
operator|new
name|JcePGPDataEncryptorBuilder
argument_list|(
name|SymmetricKeyAlgorithmTags
operator|.
name|CAST5
argument_list|)
operator|.
name|setSecureRandom
argument_list|(
operator|new
name|SecureRandom
argument_list|()
argument_list|)
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|encGen
operator|.
name|addMethod
argument_list|(
operator|new
name|JcePublicKeyKeyEncryptionMethodGenerator
argument_list|(
name|readPublicKey
argument_list|(
name|keyringPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|encOut
init|=
name|encGen
operator|.
name|open
argument_list|(
name|bos
argument_list|,
operator|new
name|byte
index|[
literal|512
index|]
argument_list|)
decl_stmt|;
name|PGPLiteralDataGenerator
name|litData
init|=
operator|new
name|PGPLiteralDataGenerator
argument_list|()
decl_stmt|;
name|OutputStream
name|litOut
init|=
name|litData
operator|.
name|open
argument_list|(
name|encOut
argument_list|,
name|PGPLiteralData
operator|.
name|BINARY
argument_list|,
name|PGPLiteralData
operator|.
name|CONSOLE
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|512
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|litOut
operator|.
name|write
argument_list|(
literal|"Test Message Without Compression"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|litOut
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|litOut
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|encOut
argument_list|,
name|bos
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSignature (OutputStream out)
specifier|private
name|void
name|createSignature
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|PGPSecretKey
name|pgpSec
init|=
name|readSecretKey
argument_list|()
decl_stmt|;
name|PGPPrivateKey
name|pgpPrivKey
init|=
name|pgpSec
operator|.
name|extractPrivateKey
argument_list|(
operator|new
name|JcePBESecretKeyDecryptorBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
literal|"sdude"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PGPSignatureGenerator
name|sGen
init|=
operator|new
name|PGPSignatureGenerator
argument_list|(
operator|new
name|JcaPGPContentSignerBuilder
argument_list|(
name|pgpSec
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|PGPUtil
operator|.
name|SHA1
argument_list|)
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sGen
operator|.
name|init
argument_list|(
name|PGPSignature
operator|.
name|BINARY_DOCUMENT
argument_list|,
name|pgpPrivKey
argument_list|)
expr_stmt|;
name|BCPGOutputStream
name|bOut
init|=
operator|new
name|BCPGOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|InputStream
name|fIn
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Test Signature"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ch
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|fIn
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|sGen
operator|.
name|update
argument_list|(
operator|(
name|byte
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|fIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|sGen
operator|.
name|generate
argument_list|()
operator|.
name|encode
argument_list|(
name|bOut
argument_list|)
expr_stmt|;
block|}
DECL|method|readSecretKey ()
specifier|static
name|PGPSecretKey
name|readSecretKey
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
decl_stmt|;
name|PGPSecretKeyRingCollection
name|pgpSec
init|=
operator|new
name|PGPSecretKeyRingCollection
argument_list|(
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Iterator
name|keyRingIter
init|=
name|pgpSec
operator|.
name|getKeyRings
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyRingIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSecretKeyRing
name|keyRing
init|=
operator|(
name|PGPSecretKeyRing
operator|)
name|keyRingIter
operator|.
name|next
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Iterator
name|keyIter
init|=
name|keyRing
operator|.
name|getSecretKeys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSecretKey
name|key
init|=
operator|(
name|PGPSecretKey
operator|)
name|keyIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|isSigningKey
argument_list|()
condition|)
block|{
return|return
name|key
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find signing key in key ring."
argument_list|)
throw|;
block|}
DECL|method|readPublicKey (String keyringPath)
specifier|static
name|PGPPublicKey
name|readPublicKey
parameter_list|(
name|String
name|keyringPath
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|getKeyRing
argument_list|(
name|keyringPath
argument_list|)
argument_list|)
decl_stmt|;
name|PGPPublicKeyRingCollection
name|pgpPub
init|=
operator|new
name|PGPPublicKeyRingCollection
argument_list|(
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Iterator
name|keyRingIter
init|=
name|pgpPub
operator|.
name|getKeyRings
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyRingIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPPublicKeyRing
name|keyRing
init|=
operator|(
name|PGPPublicKeyRing
operator|)
name|keyRingIter
operator|.
name|next
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Iterator
name|keyIter
init|=
name|keyRing
operator|.
name|getPublicKeys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPPublicKey
name|key
init|=
operator|(
name|PGPPublicKey
operator|)
name|keyIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|isEncryptionKey
argument_list|()
condition|)
block|{
return|return
name|key
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find encryption key in key ring."
argument_list|)
throw|;
block|}
annotation|@
name|Test
DECL|method|testExceptionDecryptorIncorrectInputFormatSymmetricEncryptedData ()
specifier|public
name|void
name|testExceptionDecryptorIncorrectInputFormatSymmetricEncryptedData
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
literal|"Not Correct Format"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PGPEncryptedDataGenerator
name|encGen
init|=
operator|new
name|PGPEncryptedDataGenerator
argument_list|(
operator|new
name|JcePGPDataEncryptorBuilder
argument_list|(
name|SymmetricKeyAlgorithmTags
operator|.
name|CAST5
argument_list|)
operator|.
name|setSecureRandom
argument_list|(
operator|new
name|SecureRandom
argument_list|()
argument_list|)
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|encGen
operator|.
name|addMethod
argument_list|(
operator|new
name|JcePBEKeyEncryptionMethodGenerator
argument_list|(
literal|"pw"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|encOut
init|=
name|encGen
operator|.
name|open
argument_list|(
name|bos
argument_list|,
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
decl_stmt|;
name|PGPCompressedDataGenerator
name|comData
init|=
operator|new
name|PGPCompressedDataGenerator
argument_list|(
name|CompressionAlgorithmTags
operator|.
name|ZIP
argument_list|)
decl_stmt|;
name|OutputStream
name|comOut
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|comData
operator|.
name|open
argument_list|(
name|encOut
argument_list|)
argument_list|)
decl_stmt|;
name|PGPLiteralDataGenerator
name|litData
init|=
operator|new
name|PGPLiteralDataGenerator
argument_list|()
decl_stmt|;
name|OutputStream
name|litOut
init|=
name|litData
operator|.
name|open
argument_list|(
name|comOut
argument_list|,
name|PGPLiteralData
operator|.
name|BINARY
argument_list|,
name|PGPLiteralData
operator|.
name|CONSOLE
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
decl_stmt|;
name|litOut
operator|.
name|write
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|litOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|litOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|comOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|encOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkeyUnmarshal"
argument_list|,
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"The input message body has an invalid format."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionForSignatureVerificationOptionNoSignatureAllowed ()
specifier|public
name|void
name|testExceptionForSignatureVerificationOptionNoSignatureAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|decryptor
operator|.
name|setSignatureVerificationOption
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkey"
argument_list|,
literal|"Test Message"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|PGPException
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"PGP message contains a signature although a signature is not expected"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionForSignatureVerificationOptionRequired ()
specifier|public
name|void
name|testExceptionForSignatureVerificationOptionRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|encryptor
operator|.
name|setSignatureKeyUserid
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// no signature
name|decryptor
operator|.
name|setSignatureVerificationOption
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_VERIFICATION_OPTION_REQUIRED
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkey"
argument_list|,
literal|"Test Message"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|PGPException
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"PGP message does not contain any signatures although a signature is expected"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSignatureVerificationOptionIgnore ()
specifier|public
name|void
name|testSignatureVerificationOptionIgnore
parameter_list|()
throws|throws
name|Exception
block|{
comment|// encryptor is sending a PGP message with signature! Decryptor is ignoreing the signature
name|decryptor
operator|.
name|setSignatureVerificationOption
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_VERIFICATION_OPTION_IGNORE
argument_list|)
expr_stmt|;
name|decryptor
operator|.
name|setSignatureKeyUserids
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|decryptor
operator|.
name|setSignatureKeyFileName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// no public keyring! --> no signature validation possible
name|String
name|payload
init|=
literal|"Test Message"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:unencrypted"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:subkey"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|createRouteBuilders ()
specifier|protected
name|RouteBuilder
index|[]
name|createRouteBuilders
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
comment|// START SNIPPET: pgp-format
comment|// Public Key FileName
name|String
name|keyFileName
init|=
name|getKeyFileName
argument_list|()
decl_stmt|;
comment|// Private Key FileName
name|String
name|keyFileNameSec
init|=
name|getKeyFileNameSec
argument_list|()
decl_stmt|;
comment|// Keyring Userid Used to Encrypt
name|String
name|keyUserid
init|=
name|getKeyUserId
argument_list|()
decl_stmt|;
comment|// Private key password
name|String
name|keyPassword
init|=
name|getKeyPassword
argument_list|()
decl_stmt|;
name|from
argument_list|(
literal|"direct:inline"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileName
argument_list|,
name|keyUserid
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileNameSec
argument_list|,
literal|null
argument_list|,
name|keyPassword
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format
comment|// START SNIPPET: pgp-format-header
name|PGPDataFormat
name|pgpEncrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpEncrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgpEncrypt
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpEncrypt
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncrypt
operator|.
name|setAlgorithm
argument_list|(
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncrypt
operator|.
name|setCompressionAlgorithm
argument_list|(
name|getCompressionAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpDecrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpDecrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileNameSec
argument_list|)
expr_stmt|;
name|pgpDecrypt
operator|.
name|setPassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|pgpDecrypt
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpDecrypt
operator|.
name|setSignatureVerificationOption
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:inline2"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpEncrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpDecrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:inline-armor"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileName
argument_list|,
name|keyUserid
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|pgp
argument_list|(
name|keyFileNameSec
argument_list|,
literal|null
argument_list|,
name|keyPassword
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-header
comment|// START SNIPPET: pgp-format-signature
name|PGPDataFormat
name|pgpSignAndEncrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setSignatureKeyFileName
argument_list|(
name|keyFileNameSec
argument_list|)
expr_stmt|;
name|PGPPassphraseAccessor
name|passphraseAccessor
init|=
name|getPassphraseAccessor
argument_list|()
decl_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setSignatureKeyUserid
argument_list|(
literal|"Super<sdude@nowhere.net>"
argument_list|)
expr_stmt|;
comment|// must be the exact user Id because passphrase is searched in accessor
name|pgpSignAndEncrypt
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessor
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setAlgorithm
argument_list|(
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setHashAlgorithm
argument_list|(
name|getHashAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncrypt
operator|.
name|setCompressionAlgorithm
argument_list|(
name|getCompressionAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpVerifyAndDecrypt
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setKeyFileName
argument_list|(
name|keyFileNameSec
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setPassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setSignatureKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecrypt
operator|.
name|setSignatureKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
comment|// restrict verification to public keys with certain User ID
name|from
argument_list|(
literal|"direct:inline-sign"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-signature
comment|// test verifying exception, no public key found corresponding to signature key userIds
name|from
argument_list|(
literal|"direct:verify_exception_sig_userids"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERIDS
argument_list|)
operator|.
name|constant
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"wrong1"
block|,
literal|"wrong2"
block|}
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"wrongUserID"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecrypt
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|/* ---- key ring as byte array -- */
comment|// START SNIPPET: pgp-format-key-ring-byte-array
name|PGPDataFormat
name|pgpEncryptByteArray
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpEncryptByteArray
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncryptByteArray
operator|.
name|setKeyUserids
argument_list|(
name|getKeyUserIds
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncryptByteArray
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpEncryptByteArray
operator|.
name|setAlgorithm
argument_list|(
name|SymmetricKeyAlgorithmTags
operator|.
name|DES
argument_list|)
expr_stmt|;
name|pgpEncryptByteArray
operator|.
name|setCompressionAlgorithm
argument_list|(
name|CompressionAlgorithmTags
operator|.
name|UNCOMPRESSED
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpDecryptByteArray
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpDecryptByteArray
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpDecryptByteArray
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessor
argument_list|)
expr_stmt|;
name|pgpDecryptByteArray
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:key-ring-byte-array"
argument_list|)
operator|.
name|streamCaching
argument_list|()
operator|.
name|marshal
argument_list|(
name|pgpEncryptByteArray
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpDecryptByteArray
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-key-ring-byte-array
comment|// START SNIPPET: pgp-format-signature-key-ring-byte-array
name|PGPDataFormat
name|pgpSignAndEncryptByteArray
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setSignatureKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setSignatureKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setSignaturePassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setAlgorithm
argument_list|(
name|SymmetricKeyAlgorithmTags
operator|.
name|BLOWFISH
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setHashAlgorithm
argument_list|(
name|HashAlgorithmTags
operator|.
name|RIPEMD160
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptByteArray
operator|.
name|setCompressionAlgorithm
argument_list|(
name|CompressionAlgorithmTags
operator|.
name|ZLIB
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpVerifyAndDecryptByteArray
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpVerifyAndDecryptByteArray
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessor
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptByteArray
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptByteArray
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|// restrict verification to public keys with certain User ID
name|pgpVerifyAndDecryptByteArray
operator|.
name|setSignatureKeyUserids
argument_list|(
name|getSignatureKeyUserIds
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptByteArray
operator|.
name|setSignatureVerificationOption
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_VERIFICATION_OPTION_REQUIRED
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:sign-key-ring-byte-array"
argument_list|)
operator|.
name|streamCaching
argument_list|()
comment|// encryption key ring can also be set as header
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|ENCRYPTION_KEY_RING
argument_list|)
operator|.
name|constant
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncryptByteArray
argument_list|)
comment|// it is recommended to remove the header immediately when it is no longer needed
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|ENCRYPTION_KEY_RING
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
comment|// signature key ring can also be set as header
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_RING
argument_list|)
operator|.
name|constant
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecryptByteArray
argument_list|)
comment|// it is recommended to remove the header immediately when it is no longer needed
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_RING
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-signature-key-ring-byte-array
comment|// START SNIPPET: pgp-format-several-signer-keys
name|PGPDataFormat
name|pgpSignAndEncryptSeveralSignerKeys
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setSignatureKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|signerUserIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|signerUserIds
operator|.
name|add
argument_list|(
literal|"Third (comment third)<email@third.com>"
argument_list|)
expr_stmt|;
name|signerUserIds
operator|.
name|add
argument_list|(
literal|"Second<email@second.com>"
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setSignatureKeyUserids
argument_list|(
name|signerUserIds
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userId2Passphrase
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|userId2Passphrase
operator|.
name|put
argument_list|(
literal|"Third (comment third)<email@third.com>"
argument_list|,
literal|"sdude"
argument_list|)
expr_stmt|;
name|userId2Passphrase
operator|.
name|put
argument_list|(
literal|"Second<email@second.com>"
argument_list|,
literal|"sdude"
argument_list|)
expr_stmt|;
name|PGPPassphraseAccessor
name|passphraseAccessorSeveralKeys
init|=
operator|new
name|DefaultPGPPassphraseAccessor
argument_list|(
name|userId2Passphrase
argument_list|)
decl_stmt|;
name|pgpSignAndEncryptSeveralSignerKeys
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessorSeveralKeys
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpVerifyAndDecryptSeveralSignerKeys
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setPassphraseAccessor
argument_list|(
name|passphraseAccessor
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setSignatureKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|// only specify one expected signature
name|List
argument_list|<
name|String
argument_list|>
name|expectedSigUserIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedSigUserIds
operator|.
name|add
argument_list|(
literal|"Second<email@second.com>"
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptSeveralSignerKeys
operator|.
name|setSignatureKeyUserids
argument_list|(
name|expectedSigUserIds
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:several-signer-keys"
argument_list|)
operator|.
name|streamCaching
argument_list|()
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncryptSeveralSignerKeys
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecryptSeveralSignerKeys
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: pgp-format-several-signer-keys
comment|// test encryption by several key and signing by serveral keys where the keys are specified by one User ID part
name|PGPDataFormat
name|pgpSignAndEncryptOneUserIdWithServeralKeys
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpSignAndEncryptOneUserIdWithServeralKeys
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpSignAndEncryptOneUserIdWithServeralKeys
operator|.
name|setSignatureKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
comment|// the two private keys have the same password therefore we do not need a passphrase accessor
name|pgpSignAndEncryptOneUserIdWithServeralKeys
operator|.
name|setPassword
argument_list|(
name|getKeyPassword
argument_list|()
argument_list|)
expr_stmt|;
name|PGPDataFormat
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setPassword
argument_list|(
name|getKeyPassword
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setEncryptionKeyRing
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setSignatureKeyRing
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setProvider
argument_list|(
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
operator|.
name|setSignatureKeyUserids
argument_list|(
name|expectedSigUserIds
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:one-userid-several-keys"
argument_list|)
comment|// there are two keys which have a User ID which contains the string "econd"
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"econd"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"econd"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncryptOneUserIdWithServeralKeys
argument_list|)
comment|// it is recommended to remove the header immediately when it is no longer needed
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|)
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
comment|// only specify one expected signature key, to check the first signature
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"Second<email@second.com>"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
argument_list|)
comment|// do it again but now check the second signature key
comment|// there are two keys which have a User ID which contains the string "econd"
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"econd"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"econd"
argument_list|)
operator|.
name|marshal
argument_list|(
name|pgpSignAndEncryptOneUserIdWithServeralKeys
argument_list|)
comment|// it is recommended to remove the header immediately when it is no longer needed
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|KEY_USERID
argument_list|)
operator|.
name|removeHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
comment|// only specify one expected signature key, to check the second signature
operator|.
name|setHeader
argument_list|(
name|PGPDataFormat
operator|.
name|SIGNATURE_KEY_USERID
argument_list|)
operator|.
name|constant
argument_list|(
literal|"Third (comment third)<email@third.com>"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|pgpVerifyAndDecryptOneUserIdWithServeralKeys
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:keyflag"
argument_list|)
operator|.
name|marshal
argument_list|(
name|encryptor
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted_keyflag"
argument_list|)
expr_stmt|;
comment|// test that the correct subkey is selected during decrypt and verify
name|from
argument_list|(
literal|"direct:subkey"
argument_list|)
operator|.
name|marshal
argument_list|(
name|encryptor
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|decryptor
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:subkeyUnmarshal"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|decryptor
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|PGPPublicKeyAccessor
name|publicKeyAccessor
init|=
operator|new
name|DefaultPGPPublicKeyAccessor
argument_list|(
name|getPublicKeyRing
argument_list|()
argument_list|)
decl_stmt|;
comment|//password cannot be set dynamically!
name|PGPSecretKeyAccessor
name|secretKeyAccessor
init|=
operator|new
name|DefaultPGPSecretKeyAccessor
argument_list|(
name|getSecKeyRing
argument_list|()
argument_list|,
literal|"sdude"
argument_list|,
name|getProvider
argument_list|()
argument_list|)
decl_stmt|;
name|PGPKeyAccessDataFormat
name|dfEncryptSignKeyAccess
init|=
operator|new
name|PGPKeyAccessDataFormat
argument_list|()
decl_stmt|;
name|dfEncryptSignKeyAccess
operator|.
name|setPublicKeyAccessor
argument_list|(
name|publicKeyAccessor
argument_list|)
expr_stmt|;
name|dfEncryptSignKeyAccess
operator|.
name|setSecretKeyAccessor
argument_list|(
name|secretKeyAccessor
argument_list|)
expr_stmt|;
name|dfEncryptSignKeyAccess
operator|.
name|setKeyUserid
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
name|dfEncryptSignKeyAccess
operator|.
name|setSignatureKeyUserid
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
name|PGPKeyAccessDataFormat
name|dfDecryptVerifyKeyAccess
init|=
operator|new
name|PGPKeyAccessDataFormat
argument_list|()
decl_stmt|;
name|dfDecryptVerifyKeyAccess
operator|.
name|setPublicKeyAccessor
argument_list|(
name|publicKeyAccessor
argument_list|)
expr_stmt|;
name|dfDecryptVerifyKeyAccess
operator|.
name|setSecretKeyAccessor
argument_list|(
name|secretKeyAccessor
argument_list|)
expr_stmt|;
name|dfDecryptVerifyKeyAccess
operator|.
name|setSignatureKeyUserid
argument_list|(
name|getKeyUserId
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:key_access"
argument_list|)
operator|.
name|marshal
argument_list|(
name|dfEncryptSignKeyAccess
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|dfDecryptVerifyKeyAccess
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unencrypted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
DECL|method|getPublicKeyRing ()
specifier|static
name|byte
index|[]
name|getPublicKeyRing
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getKeyRing
argument_list|(
name|PUB_KEY_RING_FILE_NAME
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getSecKeyRing ()
specifier|public
specifier|static
name|byte
index|[]
name|getSecKeyRing
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getKeyRing
argument_list|(
name|SEC_KEY_RING_FILE_NAME
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getKeyRing (String fileName)
specifier|private
specifier|static
name|byte
index|[]
name|getKeyRing
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|PGPDataFormatTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getPassphraseAccessor ()
specifier|public
specifier|static
name|PGPPassphraseAccessor
name|getPassphraseAccessor
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userId2Passphrase
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"Super<sdude@nowhere.net>"
argument_list|,
literal|"sdude"
argument_list|)
decl_stmt|;
name|PGPPassphraseAccessor
name|passphraseAccessor
init|=
operator|new
name|DefaultPGPPassphraseAccessor
argument_list|(
name|userId2Passphrase
argument_list|)
decl_stmt|;
return|return
name|passphraseAccessor
return|;
block|}
end_function

begin_function
DECL|method|checkThrownException (MockEndpoint mock, Class<? extends Exception> cl, Class<? extends Exception> expectedCauseClass, String expectedMessagePart)
specifier|public
specifier|static
name|void
name|checkThrownException
parameter_list|(
name|MockEndpoint
name|mock
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|cl
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|expectedCauseClass
parameter_list|,
name|String
name|expectedMessagePart
parameter_list|)
throws|throws
name|Exception
block|{
name|Exception
name|e
init|=
operator|(
name|Exception
operator|)
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected excpetion "
operator|+
name|cl
operator|.
name|getName
argument_list|()
operator|+
literal|" missing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|!=
name|cl
condition|)
block|{
name|String
name|stackTrace
init|=
name|getStrackTrace
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Exception  "
operator|+
name|cl
operator|.
name|getName
argument_list|()
operator|+
literal|" excpected, but was "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|stackTrace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedMessagePart
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Expected excption does not contain a message. Stack trace: "
operator|+
name|getStrackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessagePart
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Expected excption message does not contain a expected message part "
operator|+
name|expectedMessagePart
operator|+
literal|".  Stack trace: "
operator|+
name|getStrackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|expectedCauseClass
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected cause exception"
operator|+
name|expectedCauseClass
operator|.
name|getName
argument_list|()
operator|+
literal|" missing"
argument_list|,
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedCauseClass
operator|!=
name|cause
operator|.
name|getClass
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Cause exception "
operator|+
name|expectedCauseClass
operator|.
name|getName
argument_list|()
operator|+
literal|" expected, but was "
operator|+
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|getStrackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|getStrackTrace (Exception e)
specifier|public
specifier|static
name|String
name|getStrackTrace
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|w
init|=
operator|new
name|PrintWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|stackTrace
init|=
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|stackTrace
return|;
block|}
end_function

unit|}
end_unit

