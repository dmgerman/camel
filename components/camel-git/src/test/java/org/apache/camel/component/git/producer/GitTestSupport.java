begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.git.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|git
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|GitAPIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileRepositoryBuilder
import|;
end_import

begin_class
DECL|class|GitTestSupport
specifier|public
class|class
name|GitTestSupport
extends|extends
name|CamelTestSupport
block|{
DECL|field|GIT_LOCAL_REPO
specifier|public
specifier|final
specifier|static
name|String
name|GIT_LOCAL_REPO
init|=
literal|"testRepo"
decl_stmt|;
DECL|field|FILENAME_TO_ADD
specifier|public
specifier|final
specifier|static
name|String
name|FILENAME_TO_ADD
init|=
literal|"filetest.txt"
decl_stmt|;
DECL|field|FILENAME_BRANCH_TO_ADD
specifier|public
specifier|final
specifier|static
name|String
name|FILENAME_BRANCH_TO_ADD
init|=
literal|"filetest1.txt"
decl_stmt|;
DECL|field|COMMIT_MESSAGE
specifier|public
specifier|final
specifier|static
name|String
name|COMMIT_MESSAGE
init|=
literal|"Test commit"
decl_stmt|;
DECL|field|COMMIT_MESSAGE_ALL
specifier|public
specifier|final
specifier|static
name|String
name|COMMIT_MESSAGE_ALL
init|=
literal|"Test commit all"
decl_stmt|;
DECL|field|COMMIT_MESSAGE_BRANCH
specifier|public
specifier|final
specifier|static
name|String
name|COMMIT_MESSAGE_BRANCH
init|=
literal|"Test commit on a branch"
decl_stmt|;
DECL|field|BRANCH_TEST
specifier|public
specifier|final
specifier|static
name|String
name|BRANCH_TEST
init|=
literal|"testBranch"
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|File
name|localPath
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|localPath
operator|.
name|delete
argument_list|()
expr_stmt|;
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|)
decl_stmt|;
name|path
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|)
decl_stmt|;
name|deleteDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestRepository ()
specifier|protected
name|Repository
name|getTestRepository
parameter_list|()
throws|throws
name|IOException
throws|,
name|IllegalStateException
throws|,
name|GitAPIException
block|{
name|File
name|gitRepo
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|Git
operator|.
name|init
argument_list|()
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|setBare
argument_list|(
literal|false
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// now open the resulting repository with a FileRepositoryBuilder
name|FileRepositoryBuilder
name|builder
init|=
operator|new
name|FileRepositoryBuilder
argument_list|()
decl_stmt|;
name|Repository
name|repo
init|=
name|builder
operator|.
name|setGitDir
argument_list|(
name|gitRepo
argument_list|)
operator|.
name|readEnvironment
argument_list|()
comment|// scan environment GIT_* variables
operator|.
name|findGitDir
argument_list|()
comment|// scan up the file system tree
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|repo
return|;
block|}
DECL|method|deleteDirectory (File path)
specifier|static
specifier|public
name|boolean
name|deleteDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectory
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|path
operator|.
name|delete
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

