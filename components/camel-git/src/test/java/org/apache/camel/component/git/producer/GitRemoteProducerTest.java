begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.git.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|git
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|git
operator|.
name|GitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|CreateBranchCommand
operator|.
name|SetupUpstreamMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|PullResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|GitAPIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileRepositoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GitRemoteProducerTest
specifier|public
class|class
name|GitRemoteProducerTest
extends|extends
name|GitTestSupport
block|{
annotation|@
name|Ignore
argument_list|(
literal|"Require a remote git repository"
argument_list|)
annotation|@
name|Test
DECL|method|pushTest ()
specifier|public
name|void
name|pushTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|PushResult
argument_list|>
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:push"
argument_list|,
literal|""
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:add"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=add"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:commit"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=commit"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:push"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=push&remotePath=remoteURL&username=xxx&password=xxx"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

