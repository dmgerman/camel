begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.github.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|git
operator|.
name|GitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|CreateBranchCommand
operator|.
name|SetupUpstreamMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|GitAPIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileRepositoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GitProducerTest
specifier|public
class|class
name|GitProducerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|GIT_LOCAL_REPO
specifier|private
specifier|final
specifier|static
name|String
name|GIT_LOCAL_REPO
init|=
literal|"testRepo"
decl_stmt|;
DECL|field|FILENAME_TO_ADD
specifier|private
specifier|final
specifier|static
name|String
name|FILENAME_TO_ADD
init|=
literal|"filetest.txt"
decl_stmt|;
DECL|field|FILENAME_BRANCH_TO_ADD
specifier|private
specifier|final
specifier|static
name|String
name|FILENAME_BRANCH_TO_ADD
init|=
literal|"filetest1.txt"
decl_stmt|;
DECL|field|COMMIT_MESSAGE
specifier|private
specifier|final
specifier|static
name|String
name|COMMIT_MESSAGE
init|=
literal|"Test commit"
decl_stmt|;
DECL|field|COMMIT_MESSAGE_ALL
specifier|private
specifier|final
specifier|static
name|String
name|COMMIT_MESSAGE_ALL
init|=
literal|"Test commit all"
decl_stmt|;
DECL|field|COMMIT_MESSAGE_BRANCH
specifier|private
specifier|final
specifier|static
name|String
name|COMMIT_MESSAGE_BRANCH
init|=
literal|"Test commit on a branch"
decl_stmt|;
DECL|field|BRANCH_TEST
specifier|private
specifier|final
specifier|static
name|String
name|BRANCH_TEST
init|=
literal|"testBranch"
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|File
name|localPath
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|localPath
operator|.
name|delete
argument_list|()
expr_stmt|;
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|)
decl_stmt|;
name|path
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|)
decl_stmt|;
name|deleteDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cloneTest ()
specifier|public
name|void
name|cloneTest
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:clone"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|initTest ()
specifier|public
name|void
name|initTest
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:init"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addTest ()
specifier|public
name|void
name|addTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeTest ()
specifier|public
name|void
name|removeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:remove"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|gitDir
operator|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|RevCommit
argument_list|>
name|logs
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RevCommit
name|rev
range|:
name|logs
control|)
block|{
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|status
operator|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitTest ()
specifier|public
name|void
name|commitTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|RevCommit
argument_list|>
name|logs
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RevCommit
name|rev
range|:
name|logs
control|)
block|{
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitBranchTest ()
specifier|public
name|void
name|commitBranchTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|RevCommit
argument_list|>
name|logs
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RevCommit
name|rev
range|:
name|logs
control|)
block|{
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Git
name|git
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
name|BRANCH_TEST
argument_list|)
operator|.
name|setUpstreamMode
argument_list|(
name|SetupUpstreamMode
operator|.
name|SET_UPSTREAM
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit-branch"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE_BRANCH
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logs
operator|=
name|git
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|RevCommit
name|rev
range|:
name|logs
control|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE_BRANCH
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|1
condition|)
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitAllTest ()
specifier|public
name|void
name|commitAllTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit-all"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE_ALL
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|RevCommit
argument_list|>
name|logs
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RevCommit
name|rev
range|:
name|logs
control|)
block|{
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE_ALL
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitAllDifferentBranchTest ()
specifier|public
name|void
name|commitAllDifferentBranchTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|RevCommit
argument_list|>
name|logs
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RevCommit
name|rev
range|:
name|logs
control|)
block|{
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Git
name|git
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
name|BRANCH_TEST
argument_list|)
operator|.
name|setUpstreamMode
argument_list|(
name|SetupUpstreamMode
operator|.
name|SET_UPSTREAM
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|File
name|fileToAdd1
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_BRANCH_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add-on-branch"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_BRANCH_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit-all-branch"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE_ALL
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logs
operator|=
name|git
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|RevCommit
name|rev
range|:
name|logs
control|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE_ALL
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|1
condition|)
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeFileBranchTest ()
specifier|public
name|void
name|removeFileBranchTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|RevCommit
argument_list|>
name|logs
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RevCommit
name|rev
range|:
name|logs
control|)
block|{
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Git
name|git
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
name|BRANCH_TEST
argument_list|)
operator|.
name|setUpstreamMode
argument_list|(
name|SetupUpstreamMode
operator|.
name|SET_UPSTREAM
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|File
name|fileToAdd1
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_BRANCH_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add-on-branch"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_BRANCH_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit-all-branch"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE_ALL
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logs
operator|=
name|git
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|RevCommit
name|rev
range|:
name|logs
control|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE_ALL
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|1
condition|)
name|assertEquals
argument_list|(
name|rev
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:remove-on-branch"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|git
operator|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|BRANCH_TEST
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|status
operator|=
name|git
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createBranchTest ()
specifier|public
name|void
name|createBranchTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Git
name|git
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:create-branch"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Ref
argument_list|>
name|ref
init|=
name|git
operator|.
name|branchList
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|boolean
name|branchCreated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Ref
name|refInternal
range|:
name|ref
control|)
block|{
if|if
condition|(
name|refInternal
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"refs/heads/"
operator|+
name|BRANCH_TEST
argument_list|)
condition|)
block|{
name|branchCreated
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|branchCreated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteBranchTest ()
specifier|public
name|void
name|deleteBranchTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Git
name|git
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:create-branch"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Ref
argument_list|>
name|ref
init|=
name|git
operator|.
name|branchList
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|boolean
name|branchCreated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Ref
name|refInternal
range|:
name|ref
control|)
block|{
if|if
condition|(
name|refInternal
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"refs/heads/"
operator|+
name|BRANCH_TEST
argument_list|)
condition|)
block|{
name|branchCreated
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|branchCreated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:delete-branch"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ref
operator|=
name|git
operator|.
name|branchList
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|branchCreated
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Ref
name|refInternal
range|:
name|ref
control|)
block|{
if|if
condition|(
name|refInternal
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"refs/heads/"
operator|+
name|BRANCH_TEST
argument_list|)
condition|)
block|{
name|branchCreated
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|branchCreated
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|statusTest ()
specifier|public
name|void
name|statusTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:status"
argument_list|,
literal|""
argument_list|,
name|Status
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|statusBranchTest ()
specifier|public
name|void
name|statusBranchTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|getTestRepository
argument_list|()
decl_stmt|;
name|File
name|fileToAdd
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAdd
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:status"
argument_list|,
literal|""
argument_list|,
name|Status
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:commit"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|COMMIT_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:create-branch"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Git
name|git
init|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Ref
argument_list|>
name|ref
init|=
name|git
operator|.
name|branchList
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
name|boolean
name|branchCreated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Ref
name|refInternal
range|:
name|ref
control|)
block|{
if|if
condition|(
name|refInternal
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"refs/heads/"
operator|+
name|BRANCH_TEST
argument_list|)
condition|)
block|{
name|branchCreated
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|branchCreated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|fileToAddDifferent
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
name|FILENAME_BRANCH_TO_ADD
argument_list|)
decl_stmt|;
name|fileToAddDifferent
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:add-on-branch"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|FILENAME_BRANCH_TO_ADD
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|status
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:status-branch"
argument_list|,
literal|""
argument_list|,
name|Status
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getAdded
argument_list|()
operator|.
name|contains
argument_list|(
name|FILENAME_BRANCH_TO_ADD
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:clone"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?remotePath=https://github.com/oscerd/json-webserver-example.git&operation=clone"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:init"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=init"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:add"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=add"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:remove"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=rm"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:add-on-branch"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=add&branchName="
operator|+
name|BRANCH_TEST
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:remove-on-branch"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=add&branchName="
operator|+
name|BRANCH_TEST
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:commit"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=commit"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:commit-branch"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=commit&branchName="
operator|+
name|BRANCH_TEST
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:commit-all"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=commit"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:commit-all-branch"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=commit&branchName="
operator|+
name|BRANCH_TEST
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:create-branch"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=createBranch&branchName="
operator|+
name|BRANCH_TEST
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:delete-branch"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=deleteBranch&branchName="
operator|+
name|BRANCH_TEST
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:status"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=status"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:status-branch"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://"
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"?operation=status&branchName="
operator|+
name|BRANCH_TEST
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getTestRepository ()
specifier|private
name|Repository
name|getTestRepository
parameter_list|()
throws|throws
name|IOException
throws|,
name|IllegalStateException
throws|,
name|GitAPIException
block|{
name|File
name|gitRepo
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|Git
operator|.
name|init
argument_list|()
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|setBare
argument_list|(
literal|false
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// now open the resulting repository with a FileRepositoryBuilder
name|FileRepositoryBuilder
name|builder
init|=
operator|new
name|FileRepositoryBuilder
argument_list|()
decl_stmt|;
name|Repository
name|repo
init|=
name|builder
operator|.
name|setGitDir
argument_list|(
name|gitRepo
argument_list|)
operator|.
name|readEnvironment
argument_list|()
comment|// scan environment GIT_* variables
operator|.
name|findGitDir
argument_list|()
comment|// scan up the file system tree
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|repo
return|;
block|}
DECL|method|deleteDirectory (File path)
specifier|static
specifier|public
name|boolean
name|deleteDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectory
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|path
operator|.
name|delete
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

