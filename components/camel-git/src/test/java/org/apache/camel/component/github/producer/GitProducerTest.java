begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.github.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GitProducerTest
specifier|public
class|class
name|GitProducerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|GIT_LOCAL_REPO
specifier|private
specifier|final
specifier|static
name|String
name|GIT_LOCAL_REPO
init|=
literal|"pippo"
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|File
name|localPath
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|localPath
operator|.
name|delete
argument_list|()
expr_stmt|;
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|)
decl_stmt|;
name|path
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|)
decl_stmt|;
name|deleteDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cloneTest ()
specifier|public
name|void
name|cloneTest
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:clone"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|initTest ()
specifier|public
name|void
name|initTest
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:init"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|File
name|gitDir
init|=
operator|new
name|File
argument_list|(
name|GIT_LOCAL_REPO
argument_list|,
literal|".git"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gitDir
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:clone"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://https://github.com/oscerd/json-webserver-example.git?localPath="
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"&operation=clone"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:init"
argument_list|)
operator|.
name|to
argument_list|(
literal|"git://https://github.com/oscerd/json-webserver-example.git?localPath="
operator|+
name|GIT_LOCAL_REPO
operator|+
literal|"&operation=init"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|deleteDirectory (File path)
specifier|static
specifier|public
name|boolean
name|deleteDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectory
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|path
operator|.
name|delete
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

