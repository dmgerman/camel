begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.git
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|git
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileRepositoryBuilder
import|;
end_import

begin_class
DECL|class|GitConsumer
specifier|public
class|class
name|GitConsumer
extends|extends
name|ScheduledPollConsumer
block|{
DECL|field|endpoint
specifier|private
name|GitEndpoint
name|endpoint
decl_stmt|;
DECL|field|repository
specifier|private
name|Repository
name|repository
decl_stmt|;
DECL|field|git
specifier|private
name|Git
name|git
decl_stmt|;
DECL|field|used
specifier|private
name|List
name|used
decl_stmt|;
DECL|method|GitConsumer (GitEndpoint endpoint, Processor processor)
specifier|public
name|GitConsumer
parameter_list|(
name|GitEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|getLocalRepository
argument_list|()
expr_stmt|;
name|this
operator|.
name|git
operator|=
operator|new
name|Git
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|this
operator|.
name|used
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Iterable
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
name|git
operator|.
name|log
argument_list|()
operator|.
name|all
argument_list|()
operator|.
name|call
argument_list|()
decl_stmt|;
for|for
control|(
name|RevCommit
name|commit
range|:
name|commits
control|)
block|{
if|if
condition|(
operator|!
name|used
operator|.
name|contains
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|Exchange
name|e
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|e
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|commit
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|used
operator|.
name|add
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|getLocalRepository ()
specifier|private
name|Repository
name|getLocalRepository
parameter_list|()
block|{
name|FileRepositoryBuilder
name|builder
init|=
operator|new
name|FileRepositoryBuilder
argument_list|()
decl_stmt|;
name|Repository
name|repo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|builder
operator|.
name|setGitDir
argument_list|(
operator|new
name|File
argument_list|(
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|,
literal|".git"
argument_list|)
argument_list|)
operator|.
name|readEnvironment
argument_list|()
comment|// scan environment GIT_* variables
operator|.
name|findGitDir
argument_list|()
comment|// scan up the file system tree
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//LOG.error("There was an error, cannot open " + endpoint.getLocalPath() + " repository");
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|repo
return|;
block|}
block|}
end_class

end_unit

