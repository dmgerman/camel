begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.git.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|git
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|git
operator|.
name|GitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|git
operator|.
name|GitEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|CherryPickResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|ListBranchCommand
operator|.
name|ListMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|MergeCommand
operator|.
name|FastForwardMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|MergeResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|PullResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|RemoteAddCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileRepositoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|URIish
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|UsernamePasswordCredentialsProvider
import|;
end_import

begin_class
DECL|class|GitProducer
specifier|public
class|class
name|GitProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|GitEndpoint
name|endpoint
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|git
specifier|private
name|Git
name|git
decl_stmt|;
DECL|method|GitProducer (GitEndpoint endpoint)
specifier|public
name|GitProducer
parameter_list|(
name|GitEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|this
operator|.
name|repo
operator|=
name|getLocalRepository
argument_list|()
expr_stmt|;
name|this
operator|.
name|git
operator|=
operator|new
name|Git
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operation
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|operation
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_OPERATION
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operation
operator|=
name|endpoint
operator|.
name|getOperation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Local path must specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|GitOperation
operator|.
name|CLONE_OPERATION
case|:
name|doClone
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|CHECKOUT_OPERATION
case|:
name|doCheckout
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|INIT_OPERATION
case|:
name|doInit
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|ADD_OPERATION
case|:
name|doAdd
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|CHERRYPICK_OPERATION
case|:
name|doCherryPick
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|REMOVE_OPERATION
case|:
name|doRemove
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|COMMIT_OPERATION
case|:
name|doCommit
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|COMMIT_ALL_OPERATION
case|:
name|doCommitAll
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|CREATE_BRANCH_OPERATION
case|:
name|doCreateBranch
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|DELETE_BRANCH_OPERATION
case|:
name|doDeleteBranch
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|STATUS_OPERATION
case|:
name|doStatus
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|LOG_OPERATION
case|:
name|doLog
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|PUSH_OPERATION
case|:
name|doPush
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|PUSH_TAG_OPERATION
case|:
name|doPushTag
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|PULL_OPERATION
case|:
name|doPull
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|MERGE_OPERATION
case|:
name|doMerge
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|CREATE_TAG_OPERATION
case|:
name|doCreateTag
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|DELETE_TAG_OPERATION
case|:
name|doDeleteTag
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|SHOW_BRANCHES_OPERATION
case|:
name|doShowBranches
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|SHOW_TAGS_OPERATION
case|:
name|doShowTags
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|CLEAN_OPERATION
case|:
name|doClean
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|GC_OPERATION
case|:
name|doGc
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|REMOTE_ADD_OPERATION
case|:
name|doRemoteAdd
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|GitOperation
operator|.
name|REMOTE_LIST_OPERATION
case|:
name|doRemoteList
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation "
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
DECL|method|doClone (Exchange exchange, String operation)
specifier|protected
name|void
name|doClone
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|Git
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Local path must specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
try|try
block|{
name|File
name|localRepo
init|=
operator|new
name|File
argument_list|(
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localRepo
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|UsernamePasswordCredentialsProvider
name|credentials
init|=
operator|new
name|UsernamePasswordCredentialsProvider
argument_list|(
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|Git
operator|.
name|cloneRepository
argument_list|()
operator|.
name|setCredentialsProvider
argument_list|(
name|credentials
argument_list|)
operator|.
name|setURI
argument_list|(
name|endpoint
operator|.
name|getRemotePath
argument_list|()
argument_list|)
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|Git
operator|.
name|cloneRepository
argument_list|()
operator|.
name|setURI
argument_list|(
name|endpoint
operator|.
name|getRemotePath
argument_list|()
argument_list|)
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The local repository directory already exists"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doCheckout (Exchange exchange, String operation)
specifier|protected
name|void
name|doCheckout
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Branch Name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|setStartPoint
argument_list|(
name|endpoint
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doInit (Exchange exchange, String operation)
specifier|protected
name|void
name|doInit
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|Git
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Local path must specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
try|try
block|{
name|result
operator|=
name|Git
operator|.
name|init
argument_list|()
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|setBare
argument_list|(
literal|false
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doAdd (Exchange exchange, String operation)
specifier|protected
name|void
name|doAdd
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|fileName
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"File name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
name|git
operator|.
name|add
argument_list|()
operator|.
name|addFilepattern
argument_list|(
name|fileName
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doRemove (Exchange exchange, String operation)
specifier|protected
name|void
name|doRemove
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|fileName
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"File name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
name|git
operator|.
name|rm
argument_list|()
operator|.
name|addFilepattern
argument_list|(
name|fileName
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doCommit (Exchange exchange, String operation)
specifier|protected
name|void
name|doCommit
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|null
decl_stmt|;
name|String
name|username
init|=
literal|null
decl_stmt|;
name|String
name|email
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|)
argument_list|)
condition|)
block|{
name|commitMessage
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Commit message must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_USERNAME
argument_list|)
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_EMAIL
argument_list|)
argument_list|)
condition|)
block|{
name|username
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|email
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_EMAIL
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|boolean
name|allowEmpty
init|=
name|endpoint
operator|.
name|isAllowEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_ALLOW_EMPTY
argument_list|)
argument_list|)
condition|)
block|{
name|allowEmpty
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_ALLOW_EMPTY
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|username
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|email
argument_list|)
condition|)
block|{
name|git
operator|.
name|commit
argument_list|()
operator|.
name|setAllowEmpty
argument_list|(
name|allowEmpty
argument_list|)
operator|.
name|setCommitter
argument_list|(
name|username
argument_list|,
name|email
argument_list|)
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|git
operator|.
name|commit
argument_list|()
operator|.
name|setAllowEmpty
argument_list|(
name|allowEmpty
argument_list|)
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doCommitAll (Exchange exchange, String operation)
specifier|protected
name|void
name|doCommitAll
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|commitMessage
init|=
literal|null
decl_stmt|;
name|String
name|username
init|=
literal|null
decl_stmt|;
name|String
name|email
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|)
argument_list|)
condition|)
block|{
name|commitMessage
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_MESSAGE
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Commit message must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_USERNAME
argument_list|)
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_EMAIL
argument_list|)
argument_list|)
condition|)
block|{
name|username
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|email
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_EMAIL
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|boolean
name|allowEmpty
init|=
name|endpoint
operator|.
name|isAllowEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_ALLOW_EMPTY
argument_list|)
argument_list|)
condition|)
block|{
name|allowEmpty
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_ALLOW_EMPTY
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|username
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|email
argument_list|)
condition|)
block|{
name|git
operator|.
name|commit
argument_list|()
operator|.
name|setAllowEmpty
argument_list|(
name|allowEmpty
argument_list|)
operator|.
name|setAll
argument_list|(
literal|true
argument_list|)
operator|.
name|setCommitter
argument_list|(
name|username
argument_list|,
name|email
argument_list|)
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|git
operator|.
name|commit
argument_list|()
operator|.
name|setAllowEmpty
argument_list|(
name|allowEmpty
argument_list|)
operator|.
name|setAll
argument_list|(
literal|true
argument_list|)
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doCreateBranch (Exchange exchange, String operation)
specifier|protected
name|void
name|doCreateBranch
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Branch Name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
try|try
block|{
name|git
operator|.
name|branchCreate
argument_list|()
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doDeleteBranch (Exchange exchange, String operation)
specifier|protected
name|void
name|doDeleteBranch
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Branch Name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
try|try
block|{
name|git
operator|.
name|branchDelete
argument_list|()
operator|.
name|setBranchNames
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doStatus (Exchange exchange, String operation)
specifier|protected
name|void
name|doStatus
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|Status
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
name|status
operator|=
name|git
operator|.
name|status
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|doLog (Exchange exchange, String operation)
specifier|protected
name|void
name|doLog
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|RevCommit
argument_list|>
name|revCommit
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
name|revCommit
operator|=
name|git
operator|.
name|log
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|revCommit
argument_list|)
expr_stmt|;
block|}
DECL|method|doPush (Exchange exchange, String operation)
specifier|protected
name|void
name|doPush
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|PushResult
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Remote name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|UsernamePasswordCredentialsProvider
name|credentials
init|=
operator|new
name|UsernamePasswordCredentialsProvider
argument_list|(
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|git
operator|.
name|push
argument_list|()
operator|.
name|setCredentialsProvider
argument_list|(
name|credentials
argument_list|)
operator|.
name|setRemote
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|git
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doPushTag (Exchange exchange, String operation)
specifier|protected
name|void
name|doPushTag
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|PushResult
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Remote name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tag Name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|UsernamePasswordCredentialsProvider
name|credentials
init|=
operator|new
name|UsernamePasswordCredentialsProvider
argument_list|(
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|git
operator|.
name|push
argument_list|()
operator|.
name|setCredentialsProvider
argument_list|(
name|credentials
argument_list|)
operator|.
name|setRemote
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|R_TAGS
operator|+
name|endpoint
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|git
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|R_TAGS
operator|+
name|endpoint
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doPull (Exchange exchange, String operation)
specifier|protected
name|void
name|doPull
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|PullResult
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Remote name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|UsernamePasswordCredentialsProvider
name|credentials
init|=
operator|new
name|UsernamePasswordCredentialsProvider
argument_list|(
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|git
operator|.
name|pull
argument_list|()
operator|.
name|setCredentialsProvider
argument_list|(
name|credentials
argument_list|)
operator|.
name|setRemote
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|git
operator|.
name|pull
argument_list|()
operator|.
name|setRemote
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doMerge (Exchange exchange, String operation)
specifier|protected
name|void
name|doMerge
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|MergeResult
name|result
init|=
literal|null
decl_stmt|;
name|ObjectId
name|mergeBase
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Branch name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
name|mergeBase
operator|=
name|git
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
expr_stmt|;
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setName
argument_list|(
literal|"master"
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|result
operator|=
name|git
operator|.
name|merge
argument_list|()
operator|.
name|include
argument_list|(
name|mergeBase
argument_list|)
operator|.
name|setFastForward
argument_list|(
name|FastForwardMode
operator|.
name|FF
argument_list|)
operator|.
name|setCommit
argument_list|(
literal|true
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doCreateTag (Exchange exchange, String operation)
specifier|protected
name|void
name|doCreateTag
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tag Name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
try|try
block|{
name|git
operator|.
name|tag
argument_list|()
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doDeleteTag (Exchange exchange, String operation)
specifier|protected
name|void
name|doDeleteTag
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tag Name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
try|try
block|{
name|git
operator|.
name|tagDelete
argument_list|()
operator|.
name|setTags
argument_list|(
name|endpoint
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doShowBranches (Exchange exchange, String operation)
specifier|protected
name|void
name|doShowBranches
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Ref
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|git
operator|.
name|branchList
argument_list|()
operator|.
name|setListMode
argument_list|(
name|ListMode
operator|.
name|ALL
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doShowTags (Exchange exchange, String operation)
specifier|protected
name|void
name|doShowTags
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Ref
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|git
operator|.
name|tagList
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doCherryPick (Exchange exchange, String operation)
specifier|protected
name|void
name|doCherryPick
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|CherryPickResult
name|result
init|=
literal|null
decl_stmt|;
name|String
name|commitId
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_ID
argument_list|)
argument_list|)
condition|)
block|{
name|commitId
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GitConstants
operator|.
name|GIT_COMMIT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Commit id must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
name|RevWalk
name|walk
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|ObjectId
name|id
init|=
name|repo
operator|.
name|resolve
argument_list|(
name|commitId
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|walk
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|git
operator|.
name|cherryPick
argument_list|()
operator|.
name|include
argument_list|(
name|commit
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doClean (Exchange exchange, String operation)
specifier|protected
name|void
name|doClean
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
condition|)
block|{
name|git
operator|.
name|checkout
argument_list|()
operator|.
name|setCreateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getBranchName
argument_list|()
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|git
operator|.
name|clean
argument_list|()
operator|.
name|setCleanDirectories
argument_list|(
literal|true
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doGc (Exchange exchange, String operation)
specifier|protected
name|void
name|doGc
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|git
operator|.
name|gc
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doRemoteAdd (Exchange exchange, String operation)
specifier|protected
name|void
name|doRemoteAdd
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Remote Name must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|endpoint
operator|.
name|getRemotePath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Remote Path must be specified to execute "
operator|+
name|operation
argument_list|)
throw|;
block|}
name|RemoteConfig
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RemoteAddCommand
name|remoteAddCommand
init|=
name|git
operator|.
name|remoteAdd
argument_list|()
decl_stmt|;
name|remoteAddCommand
operator|.
name|setUri
argument_list|(
operator|new
name|URIish
argument_list|(
name|endpoint
operator|.
name|getRemotePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|remoteAddCommand
operator|.
name|setName
argument_list|(
name|endpoint
operator|.
name|getRemoteName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteAddCommand
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doRemoteList (Exchange exchange, String operation)
specifier|protected
name|void
name|doRemoteList
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RemoteConfig
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|git
operator|.
name|remoteList
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error in Git {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|updateExchange
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocalRepository ()
specifier|private
name|Repository
name|getLocalRepository
parameter_list|()
throws|throws
name|IOException
block|{
name|FileRepositoryBuilder
name|builder
init|=
operator|new
name|FileRepositoryBuilder
argument_list|()
decl_stmt|;
name|Repository
name|repo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|builder
operator|.
name|setGitDir
argument_list|(
operator|new
name|File
argument_list|(
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|,
literal|".git"
argument_list|)
argument_list|)
operator|.
name|readEnvironment
argument_list|()
comment|// scan
comment|// environment
comment|// GIT_*
comment|// variables
operator|.
name|findGitDir
argument_list|()
comment|// scan up the file system tree
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There was an error, cannot open {} repository"
argument_list|,
name|endpoint
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|repo
return|;
block|}
DECL|method|updateExchange (Exchange exchange, Object body)
specifier|private
name|void
name|updateExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|body
parameter_list|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|MessageHelper
operator|.
name|copyHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

