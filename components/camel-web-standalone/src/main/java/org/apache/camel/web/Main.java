begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_comment
comment|/**  * A bootstrap class for starting Jetty Runner using an embedded war  *  * @version   */
end_comment

begin_class
DECL|class|Main
specifier|public
specifier|final
class|class
name|Main
block|{
DECL|field|WAR_POSTFIX
specifier|private
specifier|static
specifier|final
name|String
name|WAR_POSTFIX
init|=
literal|".war"
decl_stmt|;
DECL|field|WAR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|WAR_NAME
init|=
literal|"camel-web"
decl_stmt|;
DECL|field|WAR_FILENAME
specifier|private
specifier|static
specifier|final
name|String
name|WAR_FILENAME
init|=
name|WAR_NAME
operator|+
name|WAR_POSTFIX
decl_stmt|;
DECL|field|KB
specifier|private
specifier|static
specifier|final
name|int
name|KB
init|=
literal|1024
decl_stmt|;
DECL|method|Main ()
specifier|private
name|Main
parameter_list|()
block|{
comment|// is started from main
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Welcome to Apache Camel!"
argument_list|)
expr_stmt|;
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|resource
init|=
name|classLoader
operator|.
name|getResource
argument_list|(
name|WAR_FILENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not find the "
operator|+
name|WAR_FILENAME
operator|+
literal|" on classpath!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|warFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|WAR_NAME
operator|+
literal|"-"
argument_list|,
name|WAR_POSTFIX
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Extracting "
operator|+
name|WAR_FILENAME
operator|+
literal|" to "
operator|+
name|warFile
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|writeStreamTo
argument_list|(
name|resource
operator|.
name|openStream
argument_list|()
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|warFile
argument_list|)
argument_list|,
literal|8
operator|*
name|KB
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Extracted "
operator|+
name|WAR_FILENAME
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Launching Jetty Runner..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
name|argsList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|argsList
operator|.
name|add
argument_list|(
name|warFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|Runner
operator|.
name|main
argument_list|(
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|writeStreamTo (final InputStream input, final OutputStream output, int bufferSize)
specifier|public
specifier|static
name|int
name|writeStreamTo
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|,
specifier|final
name|OutputStream
name|output
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|available
init|=
name|Math
operator|.
name|min
argument_list|(
name|input
operator|.
name|available
argument_list|()
argument_list|,
literal|256
operator|*
name|KB
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
name|bufferSize
argument_list|,
name|available
argument_list|)
index|]
decl_stmt|;
name|int
name|answer
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|>=
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|answer
operator|+=
name|count
expr_stmt|;
name|count
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

