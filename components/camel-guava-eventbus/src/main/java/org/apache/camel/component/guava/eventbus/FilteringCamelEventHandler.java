begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.guava.eventbus
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|guava
operator|.
name|eventbus
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_comment
comment|/**  * Subtype of CamelEventHandler with public method marked with Guava @Subscribe annotation. Supports  * filtering the messages by event type on the Camel level.  */
end_comment

begin_class
DECL|class|FilteringCamelEventHandler
specifier|public
class|class
name|FilteringCamelEventHandler
extends|extends
name|CamelEventHandler
block|{
DECL|field|eventClass
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|eventClass
decl_stmt|;
DECL|method|FilteringCamelEventHandler (GuavaEventBusEndpoint eventBusEndpoint, Processor processor, Class<?> eventClass)
specifier|public
name|FilteringCamelEventHandler
parameter_list|(
name|GuavaEventBusEndpoint
name|eventBusEndpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|eventClass
parameter_list|)
block|{
name|super
argument_list|(
name|eventBusEndpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventClass
operator|=
name|eventClass
expr_stmt|;
block|}
comment|/**      * Guava callback executed when an event was received.      *      * @param event the event      * @throws Exception is thrown if error processing the event      */
annotation|@
name|Subscribe
DECL|method|eventReceived (Object event)
specifier|public
name|void
name|eventReceived
parameter_list|(
name|Object
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|eventClass
operator|==
literal|null
operator|||
name|eventClass
operator|.
name|isAssignableFrom
argument_list|(
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|doEventReceived
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot process event: {} as its class type: {} is not assignable with: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|event
block|,
name|event
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
block|,
name|eventClass
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

