begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pulsar.utils.message
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
operator|.
name|utils
operator|.
name|message
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
DECL|class|PulsarMessageUtilsTest
specifier|public
class|class
name|PulsarMessageUtilsTest
block|{
annotation|@
name|Test
DECL|method|testSerializationOfString ()
specifier|public
name|void
name|testSerializationOfString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|in
init|=
literal|"Hello World!"
decl_stmt|;
name|byte
index|[]
name|expected
init|=
name|PulsarMessageUtils
operator|.
name|serialize
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSerialisationOfSerializableObject ()
specifier|public
name|void
name|testSerialisationOfSerializableObject
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|in
init|=
operator|new
name|Obj
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expected
init|=
name|PulsarMessageUtils
operator|.
name|serialize
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSerialisationOnPrimitive ()
specifier|public
name|void
name|testSerialisationOnPrimitive
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|PulsarMessageUtils
operator|.
name|serialize
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|Obj
class|class
name|Obj
implements|implements
name|Serializable
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|Obj (String id, String name)
specifier|public
name|Obj
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
end_class

end_unit

