begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pulsar.utils.consumers
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
operator|.
name|utils
operator|.
name|consumers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
operator|.
name|PulsarConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|ConsumerCreationStrategyFactoryTest
specifier|public
class|class
name|ConsumerCreationStrategyFactoryTest
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|givenPulsarConsumerIsNullwhenICreateFactoryverifyIllegalArgumentExceptionIsThrown ()
specifier|public
name|void
name|givenPulsarConsumerIsNullwhenICreateFactoryverifyIllegalArgumentExceptionIsThrown
parameter_list|()
block|{
name|ConsumerCreationStrategyFactory
operator|.
name|create
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|givenPulsarConsumerAndRetryPolicyNonNullwhenICreateFactoryverifyIllegalArgumentExceptionIsNotThrown ()
specifier|public
name|void
name|givenPulsarConsumerAndRetryPolicyNonNullwhenICreateFactoryverifyIllegalArgumentExceptionIsNotThrown
parameter_list|()
block|{
name|ConsumerCreationStrategyFactory
name|factory
init|=
name|ConsumerCreationStrategyFactory
operator|.
name|create
argument_list|(
name|mock
argument_list|(
name|PulsarConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyFailOverStrategy ()
specifier|public
name|void
name|verifyFailOverStrategy
parameter_list|()
block|{
name|ConsumerCreationStrategyFactory
name|factory
init|=
name|ConsumerCreationStrategyFactory
operator|.
name|create
argument_list|(
name|mock
argument_list|(
name|PulsarConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ConsumerCreationStrategy
name|strategy
init|=
name|factory
operator|.
name|getStrategy
argument_list|(
name|SubscriptionType
operator|.
name|FAILOVER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FailoverConsumerStrategy
operator|.
name|class
argument_list|,
name|strategy
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifySharedStrategy ()
specifier|public
name|void
name|verifySharedStrategy
parameter_list|()
block|{
name|ConsumerCreationStrategyFactory
name|factory
init|=
name|ConsumerCreationStrategyFactory
operator|.
name|create
argument_list|(
name|mock
argument_list|(
name|PulsarConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ConsumerCreationStrategy
name|strategy
init|=
name|factory
operator|.
name|getStrategy
argument_list|(
name|SubscriptionType
operator|.
name|SHARED
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SharedConsumerStrategy
operator|.
name|class
argument_list|,
name|strategy
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyExclusiveStrategy ()
specifier|public
name|void
name|verifyExclusiveStrategy
parameter_list|()
block|{
name|ConsumerCreationStrategyFactory
name|factory
init|=
name|ConsumerCreationStrategyFactory
operator|.
name|create
argument_list|(
name|mock
argument_list|(
name|PulsarConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ConsumerCreationStrategy
name|strategy
init|=
name|factory
operator|.
name|getStrategy
argument_list|(
name|SubscriptionType
operator|.
name|EXCLUSIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExclusiveConsumerStrategy
operator|.
name|class
argument_list|,
name|strategy
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyDefaultStrategyIsExclusiveStrategy ()
specifier|public
name|void
name|verifyDefaultStrategyIsExclusiveStrategy
parameter_list|()
block|{
name|ConsumerCreationStrategyFactory
name|factory
init|=
name|ConsumerCreationStrategyFactory
operator|.
name|create
argument_list|(
name|mock
argument_list|(
name|PulsarConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ConsumerCreationStrategy
name|strategy
init|=
name|factory
operator|.
name|getStrategy
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExclusiveConsumerStrategy
operator|.
name|class
argument_list|,
name|strategy
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

