begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pulsar.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|admin
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|admin
operator|.
name|PulsarAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|admin
operator|.
name|PulsarAdminException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|admin
operator|.
name|Tenants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|common
operator|.
name|policies
operator|.
name|data
operator|.
name|TenantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|AutoConfigurationTest
specifier|public
class|class
name|AutoConfigurationTest
block|{
DECL|field|pulsarAdmin
specifier|private
name|PulsarAdmin
name|pulsarAdmin
decl_stmt|;
DECL|field|tenants
specifier|private
name|Tenants
name|tenants
decl_stmt|;
DECL|field|namespaces
specifier|private
name|Namespaces
name|namespaces
decl_stmt|;
DECL|field|clusters
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|clusters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"standalone"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|pulsarAdmin
operator|=
name|mock
argument_list|(
name|PulsarAdmin
operator|.
name|class
argument_list|)
expr_stmt|;
name|tenants
operator|=
name|mock
argument_list|(
name|Tenants
operator|.
name|class
argument_list|)
expr_stmt|;
name|namespaces
operator|=
name|mock
argument_list|(
name|Namespaces
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pulsarAdmin
operator|.
name|tenants
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tenants
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pulsarAdmin
operator|.
name|namespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noAdminConfiguration ()
specifier|public
name|void
name|noAdminConfiguration
parameter_list|()
block|{
name|when
argument_list|(
name|pulsarAdmin
operator|.
name|getClientConfigData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|AutoConfiguration
name|autoConfiguration
init|=
operator|new
name|AutoConfiguration
argument_list|(
literal|null
argument_list|,
name|clusters
argument_list|)
decl_stmt|;
name|autoConfiguration
operator|.
name|ensureNameSpaceAndTenant
argument_list|(
literal|"tn1/ns1/topic"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pulsarAdmin
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|tenants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|autoConfigurationDisabled ()
specifier|public
name|void
name|autoConfigurationDisabled
parameter_list|()
block|{
name|AutoConfiguration
name|autoConfiguration
init|=
operator|new
name|AutoConfiguration
argument_list|(
literal|null
argument_list|,
name|clusters
argument_list|)
decl_stmt|;
name|autoConfiguration
operator|.
name|ensureNameSpaceAndTenant
argument_list|(
literal|"tn1/ns1/topic"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pulsarAdmin
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|tenants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultTopic ()
specifier|public
name|void
name|defaultTopic
parameter_list|()
block|{
name|AutoConfiguration
name|autoConfiguration
init|=
operator|new
name|AutoConfiguration
argument_list|(
name|pulsarAdmin
argument_list|,
name|clusters
argument_list|)
decl_stmt|;
name|autoConfiguration
operator|.
name|ensureNameSpaceAndTenant
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pulsarAdmin
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|tenants
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newTenantAndNamespace ()
specifier|public
name|void
name|newTenantAndNamespace
parameter_list|()
throws|throws
name|PulsarAdminException
block|{
name|when
argument_list|(
name|pulsarAdmin
operator|.
name|tenants
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tenants
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tenants
operator|.
name|getTenants
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pulsarAdmin
operator|.
name|namespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|namespaces
operator|.
name|getNamespaces
argument_list|(
literal|"tn1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|AutoConfiguration
name|autoConfiguration
init|=
operator|new
name|AutoConfiguration
argument_list|(
name|pulsarAdmin
argument_list|,
name|clusters
argument_list|)
decl_stmt|;
name|autoConfiguration
operator|.
name|ensureNameSpaceAndTenant
argument_list|(
literal|"tn1/ns1/topic"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tenants
argument_list|)
operator|.
name|createTenant
argument_list|(
name|eq
argument_list|(
literal|"tn1"
argument_list|)
argument_list|,
name|Matchers
operator|.
expr|<
name|TenantInfo
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|namespaces
argument_list|)
operator|.
name|createNamespace
argument_list|(
literal|"tn1/ns1"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"standalone"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|existingTenantAndNamespace ()
specifier|public
name|void
name|existingTenantAndNamespace
parameter_list|()
throws|throws
name|PulsarAdminException
block|{
name|when
argument_list|(
name|pulsarAdmin
operator|.
name|tenants
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tenants
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tenants
operator|.
name|getTenants
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|"tn1"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pulsarAdmin
operator|.
name|namespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|namespaces
operator|.
name|getNamespaces
argument_list|(
literal|"tn1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|"tn1/ns1"
argument_list|)
argument_list|)
expr_stmt|;
name|AutoConfiguration
name|autoConfiguration
init|=
operator|new
name|AutoConfiguration
argument_list|(
name|pulsarAdmin
argument_list|,
name|clusters
argument_list|)
decl_stmt|;
name|autoConfiguration
operator|.
name|ensureNameSpaceAndTenant
argument_list|(
literal|"tn1/ns1/topic"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tenants
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|createTenant
argument_list|(
name|Matchers
operator|.
expr|<
name|String
operator|>
name|any
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|TenantInfo
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|namespaces
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|createNamespace
argument_list|(
name|Matchers
operator|.
expr|<
name|String
operator|>
name|any
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

