begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pulsar.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|api
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|api
operator|.
name|PulsarClientException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|PulsarUtilsTest
specifier|public
class|class
name|PulsarUtilsTest
block|{
annotation|@
name|Test
DECL|method|givenConsumerQueueIsEmptywhenIStopConsumersverifyEmptyQueueIsReturned ()
specifier|public
name|void
name|givenConsumerQueueIsEmptywhenIStopConsumersverifyEmptyQueueIsReturned
parameter_list|()
throws|throws
name|PulsarClientException
block|{
name|Queue
argument_list|<
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|expected
init|=
name|PulsarUtils
operator|.
name|stopConsumers
argument_list|(
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|givenConsumerQueueIsNotEmptywhenIStopConsumersverifyEmptyQueueIsReturned ()
specifier|public
name|void
name|givenConsumerQueueIsNotEmptywhenIStopConsumersverifyEmptyQueueIsReturned
parameter_list|()
throws|throws
name|PulsarClientException
block|{
name|Queue
argument_list|<
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|consumers
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Queue
argument_list|<
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|expected
init|=
name|PulsarUtils
operator|.
name|stopConsumers
argument_list|(
name|consumers
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|givenConsumerQueueIsNotEmptywhenIStopConsumersverifyCallToCloseAndUnsubscribeConsumer ()
specifier|public
name|void
name|givenConsumerQueueIsNotEmptywhenIStopConsumersverifyCallToCloseAndUnsubscribeConsumer
parameter_list|()
throws|throws
name|PulsarClientException
block|{
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|>
name|consumer
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Queue
argument_list|<
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|consumers
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|PulsarUtils
operator|.
name|stopConsumers
argument_list|(
name|consumers
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|unsubscribe
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PulsarClientException
operator|.
name|class
argument_list|)
DECL|method|givenConsumerThrowsPulsarClientExceptionwhenIStopConsumersverifyExceptionIsThrown ()
specifier|public
name|void
name|givenConsumerThrowsPulsarClientExceptionwhenIStopConsumersverifyExceptionIsThrown
parameter_list|()
throws|throws
name|PulsarClientException
block|{
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|>
name|consumer
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|PulsarClientException
argument_list|(
literal|"A Pulsar Client exception occurred"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|consumer
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|unsubscribe
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

