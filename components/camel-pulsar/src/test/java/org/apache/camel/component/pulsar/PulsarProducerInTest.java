begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pulsar
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
operator|.
name|utils
operator|.
name|AutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|api
operator|.
name|PulsarClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|api
operator|.
name|PulsarClientException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|impl
operator|.
name|ClientBuilderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testcontainers
operator|.
name|containers
operator|.
name|PulsarContainer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|PulsarProducerInTest
specifier|public
class|class
name|PulsarProducerInTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|TOPIC_URI
specifier|private
specifier|static
specifier|final
name|String
name|TOPIC_URI
init|=
literal|"persistent://public/default/camel-producer-topic"
decl_stmt|;
DECL|field|PRODUCER
specifier|private
specifier|static
specifier|final
name|String
name|PRODUCER
init|=
literal|"camel-producer"
decl_stmt|;
annotation|@
name|Rule
DECL|field|pulsarContainer
specifier|public
name|PulsarContainer
name|pulsarContainer
init|=
operator|new
name|PulsarContainer
argument_list|()
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:start"
argument_list|)
DECL|field|producerTemplate
specifier|private
name|ProducerTemplate
name|producerTemplate
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"pulsar:"
operator|+
name|TOPIC_URI
operator|+
literal|"?numberOfConsumers=1&subscriptionType=Exclusive"
operator|+
literal|"&subscriptionName=camel-subscription&consumerQueueSize=1"
operator|+
literal|"&consumerName=camel-consumer"
operator|+
literal|"&producerName="
operator|+
name|PRODUCER
argument_list|)
DECL|field|from
specifier|private
name|Endpoint
name|from
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|to
specifier|private
name|MockEndpoint
name|to
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|from
argument_list|)
operator|.
name|to
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registerPulsarBeans
argument_list|(
name|jndi
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
DECL|method|registerPulsarBeans (final JndiRegistry jndi)
specifier|private
name|void
name|registerPulsarBeans
parameter_list|(
specifier|final
name|JndiRegistry
name|jndi
parameter_list|)
throws|throws
name|PulsarClientException
block|{
name|PulsarClient
name|pulsarClient
init|=
name|givenPulsarClient
argument_list|()
decl_stmt|;
name|AutoConfiguration
name|autoConfiguration
init|=
operator|new
name|AutoConfiguration
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"pulsarClient"
argument_list|,
name|pulsarClient
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"pulsar"
argument_list|,
operator|new
name|PulsarComponent
argument_list|(
name|context
argument_list|()
argument_list|,
name|autoConfiguration
argument_list|,
name|pulsarClient
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|givenPulsarClient ()
specifier|private
name|PulsarClient
name|givenPulsarClient
parameter_list|()
throws|throws
name|PulsarClientException
block|{
return|return
operator|new
name|ClientBuilderImpl
argument_list|()
operator|.
name|serviceUrl
argument_list|(
name|pulsarContainer
operator|.
name|getPulsarBrokerUrl
argument_list|()
argument_list|)
operator|.
name|ioThreads
argument_list|(
literal|1
argument_list|)
operator|.
name|listenerThreads
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testAMessageToRouteIsSentAndThenConsumed ()
specifier|public
name|void
name|testAMessageToRouteIsSentAndThenConsumed
parameter_list|()
throws|throws
name|Exception
block|{
name|to
operator|.
name|expectedMessageCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|producerTemplate
operator|.
name|sendBody
argument_list|(
literal|"Hello "
argument_list|)
expr_stmt|;
name|producerTemplate
operator|.
name|sendBody
argument_list|(
literal|"World "
argument_list|)
expr_stmt|;
name|producerTemplate
operator|.
name|sendBody
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

