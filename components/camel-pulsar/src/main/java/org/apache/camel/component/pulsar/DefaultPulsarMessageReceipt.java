begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pulsar
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|api
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|api
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|api
operator|.
name|PulsarClientException
import|;
end_import

begin_class
DECL|class|DefaultPulsarMessageReceipt
specifier|public
class|class
name|DefaultPulsarMessageReceipt
implements|implements
name|PulsarMessageReceipt
block|{
DECL|field|consumer
specifier|private
specifier|final
name|Consumer
name|consumer
decl_stmt|;
DECL|field|messageId
specifier|private
specifier|final
name|MessageId
name|messageId
decl_stmt|;
DECL|method|DefaultPulsarMessageReceipt (Consumer consumer, MessageId messageId)
specifier|public
name|DefaultPulsarMessageReceipt
parameter_list|(
name|Consumer
name|consumer
parameter_list|,
name|MessageId
name|messageId
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|messageId
operator|=
name|messageId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acknowledge ()
specifier|public
name|void
name|acknowledge
parameter_list|()
throws|throws
name|PulsarClientException
block|{
name|consumer
operator|.
name|acknowledge
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acknowledgeCumulative ()
specifier|public
name|void
name|acknowledgeCumulative
parameter_list|()
throws|throws
name|PulsarClientException
block|{
name|consumer
operator|.
name|acknowledgeCumulative
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acknowledgeAsync ()
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|acknowledgeAsync
parameter_list|()
block|{
return|return
name|consumer
operator|.
name|acknowledgeAsync
argument_list|(
name|messageId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|acknowledgeCumulativeAsync ()
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|acknowledgeCumulativeAsync
parameter_list|()
block|{
return|return
name|consumer
operator|.
name|acknowledgeCumulativeAsync
argument_list|(
name|messageId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|negativeAcknowledge ()
specifier|public
name|void
name|negativeAcknowledge
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Negative acknowledge is not supported in this version of the Pulsar client."
argument_list|)
throw|;
block|}
DECL|method|getConsumer ()
specifier|public
name|Consumer
name|getConsumer
parameter_list|()
block|{
return|return
name|consumer
return|;
block|}
DECL|method|getMessageId ()
specifier|public
name|MessageId
name|getMessageId
parameter_list|()
block|{
return|return
name|messageId
return|;
block|}
block|}
end_class

end_unit

