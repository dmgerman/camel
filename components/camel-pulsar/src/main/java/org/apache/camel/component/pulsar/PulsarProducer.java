begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pulsar
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
operator|.
name|utils
operator|.
name|message
operator|.
name|PulsarMessageHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pulsar
operator|.
name|utils
operator|.
name|message
operator|.
name|PulsarMessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|api
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pulsar
operator|.
name|client
operator|.
name|api
operator|.
name|ProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|PulsarProducer
specifier|public
class|class
name|PulsarProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PulsarProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pulsarEndpoint
specifier|private
specifier|final
name|PulsarEndpoint
name|pulsarEndpoint
decl_stmt|;
DECL|method|PulsarProducer (PulsarEndpoint pulsarEndpoint)
specifier|private
name|PulsarProducer
parameter_list|(
name|PulsarEndpoint
name|pulsarEndpoint
parameter_list|)
block|{
name|super
argument_list|(
name|pulsarEndpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|pulsarEndpoint
operator|=
name|pulsarEndpoint
expr_stmt|;
block|}
DECL|method|create (final PulsarEndpoint pulsarEndpoint)
specifier|public
specifier|static
name|PulsarProducer
name|create
parameter_list|(
specifier|final
name|PulsarEndpoint
name|pulsarEndpoint
parameter_list|)
block|{
return|return
operator|new
name|PulsarProducer
argument_list|(
name|pulsarEndpoint
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|topic
init|=
name|pulsarEndpoint
operator|.
name|getTopic
argument_list|()
decl_stmt|;
specifier|final
name|String
name|producerName
init|=
name|topic
operator|+
literal|"-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Map
name|properties
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|PulsarMessageHeaders
operator|.
name|PROPERTIES
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ProducerBuilder
argument_list|<
name|byte
index|[]
argument_list|>
name|producerBuilder
init|=
name|pulsarEndpoint
operator|.
name|getPulsarClient
argument_list|()
operator|.
name|newProducer
argument_list|()
operator|.
name|producerName
argument_list|(
name|producerName
argument_list|)
operator|.
name|topic
argument_list|(
name|topic
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|producerBuilder
operator|.
name|properties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Producer
argument_list|<
name|byte
index|[]
argument_list|>
name|producer
init|=
name|producerBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|body
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|exchange
argument_list|,
name|message
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoTypeConversionAvailableException
decl||
name|TypeConversionException
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"An error occurred while serializing to byte array, fall using fall back strategy :: {}"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|byte
index|[]
name|body
init|=
name|PulsarMessageUtils
operator|.
name|serialize
argument_list|(
name|message
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

