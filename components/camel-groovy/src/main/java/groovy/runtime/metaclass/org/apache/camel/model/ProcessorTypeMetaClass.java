begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 James Strachan  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  **/
end_comment

begin_package
DECL|package|groovy.runtime.metaclass.org.apache.camel.model
package|package
name|groovy
operator|.
name|runtime
operator|.
name|metaclass
operator|.
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|MetaClassImpl
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|MetaClassRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|groovy
operator|.
name|CamelGroovyMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorType
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|ProcessorTypeMetaClass
specifier|public
class|class
name|ProcessorTypeMetaClass
extends|extends
name|MetaClassImpl
block|{
DECL|method|ProcessorTypeMetaClass (MetaClassRegistry metaClassRegistry, Class aClass)
specifier|public
name|ProcessorTypeMetaClass
parameter_list|(
name|MetaClassRegistry
name|metaClassRegistry
parameter_list|,
name|Class
name|aClass
parameter_list|)
block|{
name|super
argument_list|(
name|metaClassRegistry
argument_list|,
name|aClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize ()
specifier|public
specifier|synchronized
name|void
name|initialize
parameter_list|()
block|{
comment|//addNewInstanceMethodsFrom(CamelGroovyMethods.class, theClass);
name|addNewInstanceMethodsFrom
argument_list|(
name|CamelGroovyMethods
operator|.
name|class
argument_list|,
name|ProcessorType
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
DECL|method|addNewInstanceMethodsFrom (Class type, Class ownerType)
specifier|protected
name|void
name|addNewInstanceMethodsFrom
parameter_list|(
name|Class
name|type
parameter_list|,
name|Class
name|ownerType
parameter_list|)
block|{
name|Method
index|[]
name|methods
init|=
name|type
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|int
name|modifiers
init|=
name|method
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|modifiers
argument_list|)
operator|&&
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|length
operator|>
literal|0
operator|&&
name|classes
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|ownerType
argument_list|)
condition|)
block|{
name|addNewInstanceMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

