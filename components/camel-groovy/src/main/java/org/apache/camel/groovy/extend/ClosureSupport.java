begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.groovy.extend
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|groovy
operator|.
name|extend
package|;
end_package

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|Closure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|runtime
operator|.
name|InvokerInvocationException
import|;
end_import

begin_class
DECL|class|ClosureSupport
specifier|final
class|class
name|ClosureSupport
block|{
DECL|method|ClosureSupport ()
specifier|private
name|ClosureSupport
parameter_list|()
block|{     }
DECL|method|call (Closure<T> closure, Object... args)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|call
parameter_list|(
name|Closure
argument_list|<
name|T
argument_list|>
name|closure
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
try|try
block|{
return|return
name|closure
operator|.
name|call
argument_list|(
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvokerInvocationException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

