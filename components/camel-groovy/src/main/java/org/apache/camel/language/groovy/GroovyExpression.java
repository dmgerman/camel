begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.groovy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|groovy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|GroovyShell
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExpressionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|GroovyExpression
specifier|public
class|class
name|GroovyExpression
extends|extends
name|ExpressionSupport
block|{
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|method|GroovyExpression (String text)
specifier|public
name|GroovyExpression
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"groovy: "
operator|+
name|text
return|;
block|}
DECL|method|assertionFailureMessage (Exchange exchange)
specifier|protected
name|String
name|assertionFailureMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
literal|"groovy: "
operator|+
name|text
return|;
block|}
DECL|method|evaluate (Exchange exchange, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Script
name|script
init|=
name|instantiateScript
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|script
operator|.
name|setBinding
argument_list|(
name|createBinding
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|script
operator|.
name|run
argument_list|()
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|instantiateScript (Exchange exchange)
specifier|private
name|Script
name|instantiateScript
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// Get the script from the cache, or create a new instance
name|GroovyLanguage
name|language
init|=
operator|(
name|GroovyLanguage
operator|)
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"groovy"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|Script
argument_list|>
name|scriptClass
init|=
name|language
operator|.
name|getScriptFromCache
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptClass
operator|==
literal|null
condition|)
block|{
name|GroovyShell
name|shell
decl_stmt|;
name|Set
argument_list|<
name|GroovyShellFactory
argument_list|>
name|shellFactories
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|GroovyShellFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|shellFactories
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Too many GroovyShellFactory instances found: "
operator|+
name|shellFactories
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|shellFactories
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|shell
operator|=
name|shellFactories
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|createGroovyShell
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClassLoader
name|cl
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getApplicationContextClassLoader
argument_list|()
decl_stmt|;
name|shell
operator|=
name|cl
operator|!=
literal|null
condition|?
operator|new
name|GroovyShell
argument_list|(
name|cl
argument_list|)
else|:
operator|new
name|GroovyShell
argument_list|()
expr_stmt|;
block|}
name|scriptClass
operator|=
name|shell
operator|.
name|getClassLoader
argument_list|()
operator|.
name|parseClass
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|language
operator|.
name|addScriptToCache
argument_list|(
name|text
argument_list|,
name|scriptClass
argument_list|)
expr_stmt|;
block|}
comment|// New instance of the script
try|try
block|{
return|return
name|scriptClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createBinding (Exchange exchange)
specifier|private
name|Binding
name|createBinding
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ExchangeHelper
operator|.
name|populateVariableMap
argument_list|(
name|exchange
argument_list|,
name|variables
argument_list|)
expr_stmt|;
return|return
operator|new
name|Binding
argument_list|(
name|variables
argument_list|)
return|;
block|}
block|}
end_class

end_unit

