begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.groovy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|groovy
package|;
end_package

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ExpressionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|GroovyExpression
specifier|public
class|class
name|GroovyExpression
extends|extends
name|ExpressionSupport
block|{
DECL|field|scriptType
specifier|private
name|Class
argument_list|<
name|Script
argument_list|>
name|scriptType
decl_stmt|;
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|method|GroovyExpression (Class<Script> scriptType, String text)
specifier|public
name|GroovyExpression
parameter_list|(
name|Class
argument_list|<
name|Script
argument_list|>
name|scriptType
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|scriptType
operator|=
name|scriptType
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"groovy: "
operator|+
name|text
return|;
block|}
DECL|method|assertionFailureMessage (Exchange exchange)
specifier|protected
name|String
name|assertionFailureMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
literal|"groovy: "
operator|+
name|text
return|;
block|}
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Script
name|script
init|=
name|ExchangeHelper
operator|.
name|newInstance
argument_list|(
name|exchange
argument_list|,
name|scriptType
argument_list|)
decl_stmt|;
comment|// lets configure the script
name|configure
argument_list|(
name|exchange
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
name|script
operator|.
name|run
argument_list|()
return|;
block|}
DECL|method|configure (Exchange exchange, Script script)
specifier|private
name|void
name|configure
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
specifier|final
name|Binding
name|binding
init|=
name|script
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|ExchangeHelper
operator|.
name|populateVariableMap
argument_list|(
name|exchange
argument_list|,
operator|new
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|binding
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
name|entrySet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|EMPTY_SET
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

