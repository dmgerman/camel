begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.groovy.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|groovy
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|xml
operator|.
name|FactorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Common attributes and methods for XmlParser and XmlSlurper usage.  */
end_comment

begin_class
DECL|class|AbstractXmlDataFormat
specifier|public
specifier|abstract
class|class
name|AbstractXmlDataFormat
implements|implements
name|DataFormat
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractXmlDataFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_HANDLER
specifier|private
specifier|static
specifier|final
name|ErrorHandler
name|DEFAULT_HANDLER
init|=
operator|new
name|DefaultErrorHandler
argument_list|()
decl_stmt|;
DECL|field|namespaceAware
specifier|private
name|boolean
name|namespaceAware
init|=
literal|true
decl_stmt|;
DECL|field|keepWhitespace
specifier|private
name|boolean
name|keepWhitespace
decl_stmt|;
DECL|field|errorHandler
specifier|private
name|ErrorHandler
name|errorHandler
init|=
name|DEFAULT_HANDLER
decl_stmt|;
DECL|method|AbstractXmlDataFormat (boolean namespaceAware)
specifier|public
name|AbstractXmlDataFormat
parameter_list|(
name|boolean
name|namespaceAware
parameter_list|)
block|{
name|this
operator|.
name|namespaceAware
operator|=
name|namespaceAware
expr_stmt|;
block|}
DECL|method|newSaxParser ()
specifier|protected
name|SAXParser
name|newSaxParser
parameter_list|()
throws|throws
name|Exception
block|{
name|SAXParserFactory
name|factory
init|=
name|FactorySupport
operator|.
name|createSaxParserFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
name|namespaceAware
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|factory
operator|.
name|newSAXParser
argument_list|()
return|;
block|}
DECL|method|getErrorHandler ()
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
DECL|method|isNamespaceAware ()
specifier|public
name|boolean
name|isNamespaceAware
parameter_list|()
block|{
return|return
name|namespaceAware
return|;
block|}
DECL|method|setNamespaceAware (boolean namespaceAware)
specifier|public
name|void
name|setNamespaceAware
parameter_list|(
name|boolean
name|namespaceAware
parameter_list|)
block|{
name|this
operator|.
name|namespaceAware
operator|=
name|namespaceAware
expr_stmt|;
block|}
DECL|method|isKeepWhitespace ()
specifier|public
name|boolean
name|isKeepWhitespace
parameter_list|()
block|{
return|return
name|keepWhitespace
return|;
block|}
DECL|method|setKeepWhitespace (boolean keepWhitespace)
specifier|public
name|void
name|setKeepWhitespace
parameter_list|(
name|boolean
name|keepWhitespace
parameter_list|)
block|{
name|this
operator|.
name|keepWhitespace
operator|=
name|keepWhitespace
expr_stmt|;
block|}
DECL|class|DefaultErrorHandler
specifier|private
specifier|static
class|class
name|DefaultErrorHandler
implements|implements
name|ErrorHandler
block|{
annotation|@
name|Override
DECL|method|warning (SAXParseException exception)
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning occured during parsing"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|error (SAXParseException exception)
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|fatalError (SAXParseException exception)
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

