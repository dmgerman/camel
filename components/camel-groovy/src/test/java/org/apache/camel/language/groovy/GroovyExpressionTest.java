begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.groovy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|groovy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|GroovyExpressionTest
specifier|public
class|class
name|GroovyExpressionTest
extends|extends
name|TestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GroovyTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exchange
specifier|protected
name|Exchange
name|exchange
decl_stmt|;
DECL|method|testExpressionReturnsTheCorrectValue ()
specifier|public
name|void
name|testExpressionReturnsTheCorrectValue
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
name|GroovyLanguage
operator|.
name|groovy
argument_list|(
literal|"exchange.in.headers['foo.bar']"
argument_list|)
argument_list|,
name|exchange
argument_list|,
literal|"cheese"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
name|GroovyLanguage
operator|.
name|groovy
argument_list|(
literal|"exchange.in.headers.name"
argument_list|)
argument_list|,
name|exchange
argument_list|,
literal|"James"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
name|GroovyLanguage
operator|.
name|groovy
argument_list|(
literal|"exchange.in.headers['doesNotExist']"
argument_list|)
argument_list|,
name|exchange
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testPredicateEvaluation ()
specifier|public
name|void
name|testPredicateEvaluation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertPredicate
argument_list|(
name|GroovyLanguage
operator|.
name|groovy
argument_list|(
literal|"exchange.in.headers.name == 'James'"
argument_list|)
argument_list|,
name|exchange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
name|GroovyLanguage
operator|.
name|groovy
argument_list|(
literal|"exchange.in.headers.name == 'Hiram'"
argument_list|)
argument_list|,
name|exchange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
name|GroovyLanguage
operator|.
name|groovy
argument_list|(
literal|"request.headers.name == 'James'"
argument_list|)
argument_list|,
name|exchange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testProcessorMutatesTheExchange ()
specifier|public
name|void
name|testProcessorMutatesTheExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|GroovyLanguage
operator|.
name|groovy
argument_list|(
literal|"request.headers.myNewHeader = 'ABC'"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertInMessageHeader
argument_list|(
name|exchange
argument_list|,
literal|"myNewHeader"
argument_list|,
literal|"ABC"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidExpressionFailsWithMeaningfulException ()
specifier|public
name|void
name|testInvalidExpressionFailsWithMeaningfulException
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|GroovyLanguage
operator|.
name|groovy
argument_list|(
literal|"exchange.doesNotExist"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"This test case should have thrown an exception!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught expected exception: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The message should include 'doesNotExist' but was: "
operator|+
name|message
argument_list|,
name|message
operator|.
name|contains
argument_list|(
literal|"doesNotExist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|=
operator|new
name|DefaultExchange
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"cheese"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"name"
argument_list|,
literal|"James"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

