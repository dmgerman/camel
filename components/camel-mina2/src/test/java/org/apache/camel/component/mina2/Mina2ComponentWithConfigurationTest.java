begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mina2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mina2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|Mina2ComponentWithConfigurationTest
specifier|public
class|class
name|Mina2ComponentWithConfigurationTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testMinaComponentWithConfiguration ()
specifier|public
name|void
name|testMinaComponentWithConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Mina2Component
name|comp
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"mina2"
argument_list|,
name|Mina2Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mina2Configuration
name|cfg1
init|=
operator|new
name|Mina2Configuration
argument_list|()
decl_stmt|;
name|cfg1
operator|.
name|setHost
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cfg1
operator|.
name|setPort
argument_list|(
literal|4455
argument_list|)
expr_stmt|;
name|cfg1
operator|.
name|setProtocol
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|Mina2Configuration
name|cfg2
init|=
operator|new
name|Mina2Configuration
argument_list|()
decl_stmt|;
name|cfg2
operator|.
name|setHost
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cfg2
operator|.
name|setPort
argument_list|(
literal|4455
argument_list|)
expr_stmt|;
name|cfg2
operator|.
name|setProtocol
argument_list|(
literal|"udp"
argument_list|)
expr_stmt|;
name|Mina2Endpoint
name|e1
init|=
operator|(
name|Mina2Endpoint
operator|)
name|comp
operator|.
name|createEndpoint
argument_list|(
name|cfg1
argument_list|)
decl_stmt|;
name|Mina2Endpoint
name|e2
init|=
operator|(
name|Mina2Endpoint
operator|)
name|comp
operator|.
name|createEndpoint
argument_list|(
name|cfg2
argument_list|)
decl_stmt|;
comment|// should not be same
name|assertNotSame
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|e1
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|e2
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|e2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setPort
argument_list|(
literal|5566
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|e1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isTextline
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|e2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isTextline
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4455
argument_list|,
name|e1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5566
argument_list|,
name|e2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

