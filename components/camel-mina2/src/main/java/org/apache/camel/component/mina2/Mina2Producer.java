begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mina2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mina2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangeTimedOutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServicePoolAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|filterchain
operator|.
name|DefaultIoFilterChainBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|filterchain
operator|.
name|IoFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|future
operator|.
name|CloseFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|future
operator|.
name|ConnectFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|service
operator|.
name|IoConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|service
operator|.
name|IoHandlerAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|service
operator|.
name|IoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSessionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolCodecFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|serialization
operator|.
name|ObjectSerializationCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|textline
operator|.
name|LineDelimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|executor
operator|.
name|ExecutorFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|executor
operator|.
name|OrderedThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|executor
operator|.
name|UnorderedThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|logging
operator|.
name|LoggingFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|ssl
operator|.
name|SslFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioDatagramConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|vmpipe
operator|.
name|VmPipeAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|vmpipe
operator|.
name|VmPipeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.camel.Producer} implementation for MINA  *  * @version  */
end_comment

begin_class
DECL|class|Mina2Producer
specifier|public
class|class
name|Mina2Producer
extends|extends
name|DefaultProducer
implements|implements
name|ServicePoolAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Mina2Producer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|ResponseHandler
name|handler
decl_stmt|;
DECL|field|session
specifier|private
name|IoSession
name|session
decl_stmt|;
DECL|field|responseLatch
specifier|private
name|CountDownLatch
name|responseLatch
decl_stmt|;
DECL|field|closeLatch
specifier|private
name|CountDownLatch
name|closeLatch
decl_stmt|;
DECL|field|lazySessionCreation
specifier|private
name|boolean
name|lazySessionCreation
decl_stmt|;
DECL|field|timeout
specifier|private
name|long
name|timeout
decl_stmt|;
DECL|field|address
specifier|private
name|SocketAddress
name|address
decl_stmt|;
DECL|field|connector
specifier|private
name|IoConnector
name|connector
decl_stmt|;
DECL|field|sync
specifier|private
name|boolean
name|sync
decl_stmt|;
DECL|field|noReplyLogger
specifier|private
name|CamelLogger
name|noReplyLogger
decl_stmt|;
DECL|field|configuration
specifier|private
name|Mina2Configuration
name|configuration
decl_stmt|;
DECL|field|connectorConfig
specifier|private
name|IoSessionConfig
name|connectorConfig
decl_stmt|;
DECL|field|workerPool
specifier|private
name|ExecutorService
name|workerPool
decl_stmt|;
DECL|method|Mina2Producer (Mina2Endpoint endpoint)
specifier|public
name|Mina2Producer
parameter_list|(
name|Mina2Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|lazySessionCreation
operator|=
name|configuration
operator|.
name|isLazySessionCreation
argument_list|()
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|configuration
operator|.
name|getTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|sync
operator|=
name|configuration
operator|.
name|isSync
argument_list|()
expr_stmt|;
name|this
operator|.
name|noReplyLogger
operator|=
operator|new
name|CamelLogger
argument_list|(
name|LOG
argument_list|,
name|configuration
operator|.
name|getNoReplyLogLevel
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|protocol
init|=
name|configuration
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
literal|"tcp"
argument_list|)
condition|)
block|{
name|setupSocketProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|isDatagramProtocol
argument_list|()
condition|)
block|{
name|setupDatagramProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
literal|"vm"
argument_list|)
condition|)
block|{
name|setupVmProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
name|handler
operator|=
operator|new
name|ResponseHandler
argument_list|()
expr_stmt|;
name|connector
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|Mina2Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|Mina2Endpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
comment|// the producer should not be singleton otherwise cannot use concurrent producers and safely
comment|// use request/reply with correct correlation
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|doProcess
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// ensure we always disconnect if configured
name|maybeDisconnectOnDone
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|doProcess (Exchange exchange)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|session
operator|==
literal|null
operator|&&
operator|!
name|lazySessionCreation
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not started yet!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|session
operator|==
literal|null
operator|||
operator|!
name|session
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|openConnection
argument_list|()
expr_stmt|;
block|}
comment|// set the exchange encoding property
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getCharsetName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|IOConverter
operator|.
name|normalizeCharset
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getCharsetName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Object
name|body
init|=
name|Mina2PayloadHelper
operator|.
name|getIn
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|noReplyLogger
operator|.
name|log
argument_list|(
literal|"No payload to send for exchange: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
return|return;
comment|// exit early since nothing to write
block|}
comment|// if textline enabled then covert to a String which must be used for textline
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isTextline
argument_list|()
condition|)
block|{
name|body
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
comment|// if sync is true then we should also wait for a response (synchronous mode)
if|if
condition|(
name|sync
condition|)
block|{
comment|// only initialize responseLatch if we should get a response
name|responseLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// reset handler if we expect a response
name|handler
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// log what we are writing
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Object
name|out
init|=
name|body
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|byte
index|[]
condition|)
block|{
comment|// byte arrays is not readable so convert to string
name|out
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing body: {}"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|// write the body
name|Mina2Helper
operator|.
name|writeBody
argument_list|(
name|session
argument_list|,
name|body
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|sync
condition|)
block|{
comment|// wait for response, consider timeout
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for response using timeout {} millis."
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|boolean
name|done
init|=
name|responseLatch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|done
condition|)
block|{
throw|throw
operator|new
name|ExchangeTimedOutException
argument_list|(
name|exchange
argument_list|,
name|timeout
argument_list|)
throw|;
block|}
comment|// did we get a response
if|if
condition|(
name|handler
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|CamelExchangeException
argument_list|(
literal|"Error occurred in ResponseHandler"
argument_list|,
name|exchange
argument_list|,
name|handler
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|handler
operator|.
name|isMessageReceived
argument_list|()
condition|)
block|{
comment|// no message received
throw|throw
operator|new
name|ExchangeTimedOutException
argument_list|(
name|exchange
argument_list|,
name|timeout
argument_list|)
throw|;
block|}
else|else
block|{
comment|// set the result on either IN or OUT on the original exchange depending on its pattern
if|if
condition|(
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|Mina2PayloadHelper
operator|.
name|setOut
argument_list|(
name|exchange
argument_list|,
name|handler
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Mina2PayloadHelper
operator|.
name|setIn
argument_list|(
name|exchange
argument_list|,
name|handler
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|maybeDisconnectOnDone (Exchange exchange)
specifier|protected
name|void
name|maybeDisconnectOnDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// should session be closed after complete?
name|Boolean
name|close
decl_stmt|;
if|if
condition|(
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|close
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Mina2Constants
operator|.
name|MINA_CLOSE_SESSION_WHEN_COMPLETE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|close
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Mina2Constants
operator|.
name|MINA_CLOSE_SESSION_WHEN_COMPLETE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// should we disconnect, the header can override the configuration
name|boolean
name|disconnect
init|=
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isDisconnect
argument_list|()
decl_stmt|;
if|if
condition|(
name|close
operator|!=
literal|null
condition|)
block|{
name|disconnect
operator|=
name|close
expr_stmt|;
block|}
if|if
condition|(
name|disconnect
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing session when complete at address: {}"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|closeSessionIfNeededAndAwaitCloseInHandler
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeSessionIfNeededAndAwaitCloseInHandler (IoSession sessionToBeClosed)
specifier|private
name|void
name|closeSessionIfNeededAndAwaitCloseInHandler
parameter_list|(
name|IoSession
name|sessionToBeClosed
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|closeLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sessionToBeClosed
operator|.
name|isClosing
argument_list|()
condition|)
block|{
name|CloseFuture
name|closeFuture
init|=
name|sessionToBeClosed
operator|.
name|closeNow
argument_list|()
decl_stmt|;
name|closeFuture
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|closeLatch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFilterChain ()
specifier|public
name|DefaultIoFilterChainBuilder
name|getFilterChain
parameter_list|()
block|{
return|return
name|connector
operator|.
name|getFilterChain
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|lazySessionCreation
condition|)
block|{
name|openConnection
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping connector: {} at address: {}"
argument_list|,
name|connector
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
name|closeConnection
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|workerPool
operator|!=
literal|null
condition|)
block|{
name|workerPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doShutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|closeConnection ()
specifier|private
name|void
name|closeConnection
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|closeSessionIfNeededAndAwaitCloseInHandler
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|dispose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|openConnection ()
specifier|private
name|void
name|openConnection
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|address
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|configuration
operator|.
name|isCachedAddress
argument_list|()
condition|)
block|{
name|setSocketAddress
argument_list|(
name|this
operator|.
name|configuration
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating connector to address: {} using connector: {} timeout: {} millis."
argument_list|,
name|address
argument_list|,
name|connector
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|// connect and wait until the connection is established
if|if
condition|(
name|connectorConfig
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|getSessionConfig
argument_list|()
operator|.
name|setAll
argument_list|(
name|connectorConfig
argument_list|)
expr_stmt|;
block|}
name|ConnectFuture
name|future
init|=
name|connector
operator|.
name|connect
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|future
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|session
operator|=
name|future
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|setupVmProtocol (String uri)
specifier|protected
name|void
name|setupVmProtocol
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|boolean
name|minaLogger
init|=
name|configuration
operator|.
name|isMinaLogger
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IoFilter
argument_list|>
name|filters
init|=
name|configuration
operator|.
name|getFilters
argument_list|()
decl_stmt|;
name|address
operator|=
operator|new
name|VmPipeAddress
argument_list|(
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|=
operator|new
name|VmPipeConnector
argument_list|()
expr_stmt|;
comment|// connector config
if|if
condition|(
name|minaLogger
condition|)
block|{
name|connector
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"logger"
argument_list|,
operator|new
name|LoggingFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|appendIoFiltersToChain
argument_list|(
name|filters
argument_list|,
name|connector
operator|.
name|getFilterChain
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getSslContextParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using vm protocol"
operator|+
literal|", but an SSLContextParameters instance was provided.  SSLContextParameters is only supported on the TCP protocol."
argument_list|)
expr_stmt|;
block|}
name|configureCodecFactory
argument_list|(
literal|"Mina2Producer"
argument_list|,
name|connector
argument_list|)
expr_stmt|;
block|}
DECL|method|setupSocketProtocol (String uri)
specifier|protected
name|void
name|setupSocketProtocol
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|minaLogger
init|=
name|configuration
operator|.
name|isMinaLogger
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|configuration
operator|.
name|getTimeout
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IoFilter
argument_list|>
name|filters
init|=
name|configuration
operator|.
name|getFilters
argument_list|()
decl_stmt|;
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|processorCount
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|+
literal|1
decl_stmt|;
name|connector
operator|=
operator|new
name|NioSocketConnector
argument_list|(
name|processorCount
argument_list|)
expr_stmt|;
comment|// connector config
name|connectorConfig
operator|=
name|connector
operator|.
name|getSessionConfig
argument_list|()
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isOrderedThreadPoolExecutor
argument_list|()
condition|)
block|{
name|workerPool
operator|=
operator|new
name|OrderedThreadPoolExecutor
argument_list|(
name|configuration
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|workerPool
operator|=
operator|new
name|UnorderedThreadPoolExecutor
argument_list|(
name|configuration
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"threadPool"
argument_list|,
operator|new
name|ExecutorFilter
argument_list|(
name|workerPool
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|minaLogger
condition|)
block|{
name|connector
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"logger"
argument_list|,
operator|new
name|LoggingFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|appendIoFiltersToChain
argument_list|(
name|filters
argument_list|,
name|connector
operator|.
name|getFilterChain
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getSslContextParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SslFilter
name|filter
init|=
operator|new
name|SslFilter
argument_list|(
name|configuration
operator|.
name|getSslContextParameters
argument_list|()
operator|.
name|createSSLContext
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|)
argument_list|,
name|configuration
operator|.
name|isAutoStartTls
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setUseClientMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addFirst
argument_list|(
literal|"sslFilter"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
name|configureCodecFactory
argument_list|(
literal|"Mina2Producer"
argument_list|,
name|connector
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setConnectTimeoutMillis
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|configureCodecFactory (String type, IoService service)
specifier|protected
name|void
name|configureCodecFactory
parameter_list|(
name|String
name|type
parameter_list|,
name|IoService
name|service
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getCodec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addCodecFactory
argument_list|(
name|service
argument_list|,
name|configuration
operator|.
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|isAllowDefaultCodec
argument_list|()
condition|)
block|{
name|configureDefaultCodecFactory
argument_list|(
name|type
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configureDefaultCodecFactory (String type, IoService service)
specifier|protected
name|void
name|configureDefaultCodecFactory
parameter_list|(
name|String
name|type
parameter_list|,
name|IoService
name|service
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isTextline
argument_list|()
condition|)
block|{
name|Charset
name|charset
init|=
name|getEncodingParameter
argument_list|(
name|type
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|LineDelimiter
name|delimiter
init|=
name|getLineDelimiterParameter
argument_list|(
name|configuration
operator|.
name|getTextlineDelimiter
argument_list|()
argument_list|)
decl_stmt|;
name|Mina2TextLineCodecFactory
name|codecFactory
init|=
operator|new
name|Mina2TextLineCodecFactory
argument_list|(
name|charset
argument_list|,
name|delimiter
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getEncoderMaxLineLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|codecFactory
operator|.
name|setEncoderMaxLineLength
argument_list|(
name|configuration
operator|.
name|getEncoderMaxLineLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getDecoderMaxLineLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|codecFactory
operator|.
name|setDecoderMaxLineLength
argument_list|(
name|configuration
operator|.
name|getDecoderMaxLineLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addCodecFactory
argument_list|(
name|service
argument_list|,
name|codecFactory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: Using TextLineCodecFactory: {} using encoding: {} line delimiter: {}({})"
argument_list|,
name|type
argument_list|,
name|codecFactory
argument_list|,
name|charset
argument_list|,
name|configuration
operator|.
name|getTextlineDelimiter
argument_list|()
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encoder maximum line length: {}. Decoder maximum line length: {}"
argument_list|,
name|codecFactory
operator|.
name|getEncoderMaxLineLength
argument_list|()
argument_list|,
name|codecFactory
operator|.
name|getDecoderMaxLineLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ObjectSerializationCodecFactory
name|codecFactory
init|=
operator|new
name|ObjectSerializationCodecFactory
argument_list|()
decl_stmt|;
name|addCodecFactory
argument_list|(
name|service
argument_list|,
name|codecFactory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: Using ObjectSerializationCodecFactory: {}"
argument_list|,
name|type
argument_list|,
name|codecFactory
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupDatagramProtocol (String uri)
specifier|protected
name|void
name|setupDatagramProtocol
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|boolean
name|minaLogger
init|=
name|configuration
operator|.
name|isMinaLogger
argument_list|()
decl_stmt|;
name|boolean
name|transferExchange
init|=
name|configuration
operator|.
name|isTransferExchange
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IoFilter
argument_list|>
name|filters
init|=
name|configuration
operator|.
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|transferExchange
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"transferExchange=true is not supported for datagram protocol"
argument_list|)
throw|;
block|}
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|processorCount
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|+
literal|1
decl_stmt|;
name|connector
operator|=
operator|new
name|NioDatagramConnector
argument_list|(
name|processorCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isOrderedThreadPoolExecutor
argument_list|()
condition|)
block|{
name|workerPool
operator|=
operator|new
name|OrderedThreadPoolExecutor
argument_list|(
name|configuration
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|workerPool
operator|=
operator|new
name|UnorderedThreadPoolExecutor
argument_list|(
name|configuration
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connectorConfig
operator|=
name|connector
operator|.
name|getSessionConfig
argument_list|()
expr_stmt|;
name|connector
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"threadPool"
argument_list|,
operator|new
name|ExecutorFilter
argument_list|(
name|workerPool
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|minaLogger
condition|)
block|{
name|connector
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"logger"
argument_list|,
operator|new
name|LoggingFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|appendIoFiltersToChain
argument_list|(
name|filters
argument_list|,
name|connector
operator|.
name|getFilterChain
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getSslContextParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using datagram protocol, "
operator|+
name|configuration
operator|.
name|getProtocol
argument_list|()
operator|+
literal|", but an SSLContextParameters instance was provided.  SSLContextParameters is only supported on the TCP protocol."
argument_list|)
expr_stmt|;
block|}
name|configureDataGramCodecFactory
argument_list|(
literal|"Mina2Producer"
argument_list|,
name|connector
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
comment|// set connect timeout to mina in seconds
name|connector
operator|.
name|setConnectTimeoutMillis
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**      * For datagrams the entire message is available as a single IoBuffer so lets just pass those around by default      * and try converting whatever they payload is into IoBuffer unless some custom converter is specified      */
DECL|method|configureDataGramCodecFactory (final String type, final IoService service, final Mina2Configuration configuration)
specifier|protected
name|void
name|configureDataGramCodecFactory
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|IoService
name|service
parameter_list|,
specifier|final
name|Mina2Configuration
name|configuration
parameter_list|)
block|{
name|ProtocolCodecFactory
name|codecFactory
init|=
name|configuration
operator|.
name|getCodec
argument_list|()
decl_stmt|;
if|if
condition|(
name|codecFactory
operator|==
literal|null
condition|)
block|{
name|codecFactory
operator|=
operator|new
name|Mina2UdpProtocolCodecFactory
argument_list|(
name|this
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: Using CodecFactory: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|type
block|,
name|codecFactory
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|addCodecFactory
argument_list|(
name|service
argument_list|,
name|codecFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|addCodecFactory (IoService service, ProtocolCodecFactory codecFactory)
specifier|private
name|void
name|addCodecFactory
parameter_list|(
name|IoService
name|service
parameter_list|,
name|ProtocolCodecFactory
name|codecFactory
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"addCodecFactory name: {}"
argument_list|,
name|codecFactory
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"codec"
argument_list|,
operator|new
name|ProtocolCodecFilter
argument_list|(
name|codecFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLineDelimiterParameter (Mina2TextLineDelimiter delimiter)
specifier|private
specifier|static
name|LineDelimiter
name|getLineDelimiterParameter
parameter_list|(
name|Mina2TextLineDelimiter
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|delimiter
operator|==
literal|null
condition|)
block|{
return|return
name|LineDelimiter
operator|.
name|DEFAULT
return|;
block|}
return|return
name|delimiter
operator|.
name|getLineDelimiter
argument_list|()
return|;
block|}
DECL|method|getEncodingParameter (String type, Mina2Configuration configuration)
specifier|private
name|Charset
name|getEncodingParameter
parameter_list|(
name|String
name|type
parameter_list|,
name|Mina2Configuration
name|configuration
parameter_list|)
block|{
name|String
name|encoding
init|=
name|configuration
operator|.
name|getEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
name|Charset
operator|.
name|defaultCharset
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
comment|// set in on configuration so its updated
name|configuration
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: No encoding parameter using default charset: {}"
argument_list|,
name|type
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Charset
operator|.
name|isSupported
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The encoding: "
operator|+
name|encoding
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
return|return
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
argument_list|)
return|;
block|}
DECL|method|appendIoFiltersToChain (List<IoFilter> filters, DefaultIoFilterChainBuilder filterChain)
specifier|private
name|void
name|appendIoFiltersToChain
parameter_list|(
name|List
argument_list|<
name|IoFilter
argument_list|>
name|filters
parameter_list|,
name|DefaultIoFilterChainBuilder
name|filterChain
parameter_list|)
block|{
if|if
condition|(
name|filters
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|IoFilter
name|ioFilter
range|:
name|filters
control|)
block|{
name|filterChain
operator|.
name|addLast
argument_list|(
name|ioFilter
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|ioFilter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setSocketAddress (String protocol)
specifier|private
name|void
name|setSocketAddress
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
literal|"tcp"
argument_list|)
condition|)
block|{
name|this
operator|.
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|isDatagramProtocol
argument_list|()
condition|)
block|{
name|this
operator|.
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
literal|"vm"
argument_list|)
condition|)
block|{
name|this
operator|.
name|address
operator|=
operator|new
name|VmPipeAddress
argument_list|(
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Handles response from session writes      */
DECL|class|ResponseHandler
specifier|private
specifier|final
class|class
name|ResponseHandler
extends|extends
name|IoHandlerAdapter
block|{
DECL|field|message
specifier|private
name|Object
name|message
decl_stmt|;
DECL|field|cause
specifier|private
name|Throwable
name|cause
decl_stmt|;
DECL|field|messageReceived
specifier|private
name|boolean
name|messageReceived
decl_stmt|;
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|message
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cause
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|messageReceived
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived (IoSession ioSession, Object message)
specifier|public
name|void
name|messageReceived
parameter_list|(
name|IoSession
name|ioSession
parameter_list|,
name|Object
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Message received: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|messageReceived
operator|=
literal|true
expr_stmt|;
name|cause
operator|=
literal|null
expr_stmt|;
name|notifyResultAvailable
argument_list|()
expr_stmt|;
block|}
DECL|method|notifyResultAvailable ()
specifier|protected
name|void
name|notifyResultAvailable
parameter_list|()
block|{
name|CountDownLatch
name|downLatch
init|=
name|responseLatch
decl_stmt|;
if|if
condition|(
name|downLatch
operator|!=
literal|null
condition|)
block|{
name|downLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|sessionClosed (IoSession session)
specifier|public
name|void
name|sessionClosed
parameter_list|(
name|IoSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|sync
operator|&&
operator|!
name|messageReceived
condition|)
block|{
comment|// sync=true (InOut mode) so we expected a message as reply but did not get one before the session is closed
name|LOG
operator|.
name|debug
argument_list|(
literal|"Session closed but no message received from address: {}"
argument_list|,
name|address
argument_list|)
expr_stmt|;
comment|// session was closed but no message received. This could be because the remote server had an internal error
comment|// and could not return a response. We should count down to stop waiting for a response
name|notifyResultAvailable
argument_list|()
expr_stmt|;
block|}
name|notifySessionClosed
argument_list|()
expr_stmt|;
block|}
DECL|method|notifySessionClosed ()
specifier|private
name|void
name|notifySessionClosed
parameter_list|()
block|{
if|if
condition|(
name|closeLatch
operator|!=
literal|null
condition|)
block|{
name|closeLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (IoSession ioSession, Throwable cause)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|IoSession
name|ioSession
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|messageReceived
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
if|if
condition|(
name|ioSession
operator|!=
literal|null
condition|)
block|{
name|CloseFuture
name|closeFuture
init|=
name|ioSession
operator|.
name|closeNow
argument_list|()
decl_stmt|;
name|closeFuture
operator|.
name|awaitUninterruptibly
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCause ()
specifier|public
name|Throwable
name|getCause
parameter_list|()
block|{
return|return
name|this
operator|.
name|cause
return|;
block|}
DECL|method|getMessage ()
specifier|public
name|Object
name|getMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|message
return|;
block|}
DECL|method|isMessageReceived ()
specifier|public
name|boolean
name|isMessageReceived
parameter_list|()
block|{
return|return
name|messageReceived
return|;
block|}
block|}
block|}
end_class

end_unit

