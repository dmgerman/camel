begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mina2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mina2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|filterchain
operator|.
name|IoFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolCodecFactory
import|;
end_import

begin_comment
comment|/**  * Component for Apache MINA 2.x.  *  * @version  */
end_comment

begin_class
DECL|class|Mina2Component
specifier|public
class|class
name|Mina2Component
extends|extends
name|UriEndpointComponent
block|{
DECL|field|configuration
specifier|private
name|Mina2Configuration
name|configuration
decl_stmt|;
DECL|method|Mina2Component ()
specifier|public
name|Mina2Component
parameter_list|()
block|{
name|super
argument_list|(
name|Mina2Endpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|Mina2Component (CamelContext context)
specifier|public
name|Mina2Component
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|Mina2Endpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Using the configuration which set by the component as a default one
comment|// Since the configuration's properties will be set by the URI
comment|// we need to copy or create a new MinaConfiguration here
comment|// Using the configuration which set by the component as a default one
comment|// Since the configuration's properties will be set by the URI
comment|// we need to copy or create a new MinaConfiguration here
name|Mina2Configuration
name|config
decl_stmt|;
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|config
operator|=
name|configuration
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
operator|new
name|Mina2Configuration
argument_list|()
expr_stmt|;
block|}
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|config
operator|.
name|setHost
argument_list|(
name|u
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setPort
argument_list|(
name|u
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProtocol
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setFilters
argument_list|(
name|resolveAndRemoveReferenceListParameter
argument_list|(
name|parameters
argument_list|,
literal|"filters"
argument_list|,
name|IoFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|createEndpoint
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
return|;
block|}
DECL|method|createEndpoint (Mina2Configuration config)
specifier|public
name|Endpoint
name|createEndpoint
parameter_list|(
name|Mina2Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createEndpoint
argument_list|(
name|config
operator|.
name|getUriString
argument_list|()
argument_list|,
name|config
argument_list|)
return|;
block|}
DECL|method|createEndpoint (String uri, Mina2Configuration config)
specifier|private
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Mina2Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|String
name|protocol
init|=
name|config
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
comment|// if mistyped uri then protocol can be null
name|Mina2Endpoint
name|endpoint
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|protocol
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
literal|"tcp"
argument_list|)
operator|||
name|config
operator|.
name|isDatagramProtocol
argument_list|()
operator|||
name|protocol
operator|.
name|equals
argument_list|(
literal|"vm"
argument_list|)
condition|)
block|{
name|endpoint
operator|=
operator|new
name|Mina2Endpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
comment|// protocol not resolved so error
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognised MINA protocol: "
operator|+
name|protocol
operator|+
literal|" for uri: "
operator|+
name|uri
argument_list|)
throw|;
block|}
comment|// set sync or async mode after endpoint is created
if|if
condition|(
name|config
operator|.
name|isSync
argument_list|()
condition|)
block|{
name|endpoint
operator|.
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|.
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
expr_stmt|;
block|}
return|return
name|endpoint
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getConfiguration ()
specifier|public
name|Mina2Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/**      * To use the shared mina configuration. Properties of the shared configuration can also be set individually.      */
DECL|method|setConfiguration (Mina2Configuration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Mina2Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getConfigurationOrCreate ()
specifier|private
name|Mina2Configuration
name|getConfigurationOrCreate
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Mina2Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
DECL|method|getCharsetName ()
specifier|public
name|String
name|getCharsetName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getCharsetName
argument_list|()
return|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getProtocol
argument_list|()
return|;
block|}
comment|/**      * Protocol to use      * @param protocol      */
DECL|method|setProtocol (String protocol)
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHost
argument_list|()
return|;
block|}
comment|/**      * Hostname to use. Use localhost or 0.0.0.0 for local server as consumer. For producer use the hostname or ip address of the remote server.      * @param host      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**      * Port number      * @param port      */
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
DECL|method|isSync ()
specifier|public
name|boolean
name|isSync
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isSync
argument_list|()
return|;
block|}
comment|/**      * Setting to set endpoint as one-way or request-response.      * @param sync      */
DECL|method|setSync (boolean sync)
specifier|public
name|void
name|setSync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSync
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
DECL|method|isTextline ()
specifier|public
name|boolean
name|isTextline
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isTextline
argument_list|()
return|;
block|}
comment|/**      * Only used for TCP. If no codec is specified, you can use this flag to indicate a text line based codec;      * if not specified or the value is false, then Object Serialization is assumed over TCP.      * @param textline      */
DECL|method|setTextline (boolean textline)
specifier|public
name|void
name|setTextline
parameter_list|(
name|boolean
name|textline
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setTextline
argument_list|(
name|textline
argument_list|)
expr_stmt|;
block|}
DECL|method|getTextlineDelimiter ()
specifier|public
name|Mina2TextLineDelimiter
name|getTextlineDelimiter
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getTextlineDelimiter
argument_list|()
return|;
block|}
comment|/**      * Only used for TCP and if textline=true. Sets the text line delimiter to use.      * If none provided, Camel will use DEFAULT.      * This delimiter is used to mark the end of text.      * @param textlineDelimiter      */
DECL|method|setTextlineDelimiter (Mina2TextLineDelimiter textlineDelimiter)
specifier|public
name|void
name|setTextlineDelimiter
parameter_list|(
name|Mina2TextLineDelimiter
name|textlineDelimiter
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setTextlineDelimiter
argument_list|(
name|textlineDelimiter
argument_list|)
expr_stmt|;
block|}
DECL|method|getCodec ()
specifier|public
name|ProtocolCodecFactory
name|getCodec
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getCodec
argument_list|()
return|;
block|}
comment|/**      * To use a custom minda codec implementation.      * @param codec      */
DECL|method|setCodec (ProtocolCodecFactory codec)
specifier|public
name|void
name|setCodec
parameter_list|(
name|ProtocolCodecFactory
name|codec
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getEncoding
argument_list|()
return|;
block|}
comment|/**      * You can configure the encoding (a charset name) to use for the TCP textline codec and the UDP protocol.      * If not provided, Camel will use the JVM default Charset      * @param encoding      */
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getTimeout
argument_list|()
return|;
block|}
comment|/**      * You can configure the timeout that specifies how long to wait for a response from a remote server.      * The timeout unit is in milliseconds, so 60000 is 60 seconds.      * @param timeout      */
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|isLazySessionCreation ()
specifier|public
name|boolean
name|isLazySessionCreation
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isLazySessionCreation
argument_list|()
return|;
block|}
comment|/**      * Sessions can be lazily created to avoid exceptions, if the remote server is not up and running when the Camel producer is started.      * @param lazySessionCreation      */
DECL|method|setLazySessionCreation (boolean lazySessionCreation)
specifier|public
name|void
name|setLazySessionCreation
parameter_list|(
name|boolean
name|lazySessionCreation
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setLazySessionCreation
argument_list|(
name|lazySessionCreation
argument_list|)
expr_stmt|;
block|}
DECL|method|isTransferExchange ()
specifier|public
name|boolean
name|isTransferExchange
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isTransferExchange
argument_list|()
return|;
block|}
comment|/**      * Only used for TCP. You can transfer the exchange over the wire instead of just the body.      * The following fields are transferred: In body, Out body, fault body, In headers, Out headers, fault headers, exchange properties, exchange exception.      * This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level.      * @param transferExchange      */
DECL|method|setTransferExchange (boolean transferExchange)
specifier|public
name|void
name|setTransferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setTransferExchange
argument_list|(
name|transferExchange
argument_list|)
expr_stmt|;
block|}
comment|/**      * To set the textline protocol encoder max line length. By default the default value of Mina itself is used which are Integer.MAX_VALUE.      * @param encoderMaxLineLength      */
DECL|method|setEncoderMaxLineLength (int encoderMaxLineLength)
specifier|public
name|void
name|setEncoderMaxLineLength
parameter_list|(
name|int
name|encoderMaxLineLength
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setEncoderMaxLineLength
argument_list|(
name|encoderMaxLineLength
argument_list|)
expr_stmt|;
block|}
DECL|method|getEncoderMaxLineLength ()
specifier|public
name|int
name|getEncoderMaxLineLength
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getEncoderMaxLineLength
argument_list|()
return|;
block|}
comment|/**      * To set the textline protocol decoder max line length. By default the default value of Mina itself is used which are 1024.      * @param decoderMaxLineLength      */
DECL|method|setDecoderMaxLineLength (int decoderMaxLineLength)
specifier|public
name|void
name|setDecoderMaxLineLength
parameter_list|(
name|int
name|decoderMaxLineLength
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setDecoderMaxLineLength
argument_list|(
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
block|}
DECL|method|getDecoderMaxLineLength ()
specifier|public
name|int
name|getDecoderMaxLineLength
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getDecoderMaxLineLength
argument_list|()
return|;
block|}
DECL|method|isMinaLogger ()
specifier|public
name|boolean
name|isMinaLogger
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isMinaLogger
argument_list|()
return|;
block|}
comment|/**      * You can enable the Apache MINA logging filter. Apache MINA uses slf4j logging at INFO level to log all input and output.      * @param minaLogger      */
DECL|method|setMinaLogger (boolean minaLogger)
specifier|public
name|void
name|setMinaLogger
parameter_list|(
name|boolean
name|minaLogger
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setMinaLogger
argument_list|(
name|minaLogger
argument_list|)
expr_stmt|;
block|}
DECL|method|getFilters ()
specifier|public
name|List
argument_list|<
name|IoFilter
argument_list|>
name|getFilters
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getFilters
argument_list|()
return|;
block|}
comment|/**      * You can set a list of Mina IoFilters to use.      * @param filters      */
DECL|method|setFilters (List<IoFilter> filters)
specifier|public
name|void
name|setFilters
parameter_list|(
name|List
argument_list|<
name|IoFilter
argument_list|>
name|filters
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
DECL|method|isDatagramProtocol ()
specifier|public
name|boolean
name|isDatagramProtocol
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isDatagramProtocol
argument_list|()
return|;
block|}
comment|/**      * The mina component installs a default codec if both, codec is null and textline is false.      * Setting allowDefaultCodec to false prevents the mina component from installing a default codec as the first element in the filter chain.      * This is useful in scenarios where another filter must be the first in the filter chain, like the SSL filter.      * @param allowDefaultCodec      */
DECL|method|setAllowDefaultCodec (boolean allowDefaultCodec)
specifier|public
name|void
name|setAllowDefaultCodec
parameter_list|(
name|boolean
name|allowDefaultCodec
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setAllowDefaultCodec
argument_list|(
name|allowDefaultCodec
argument_list|)
expr_stmt|;
block|}
DECL|method|isAllowDefaultCodec ()
specifier|public
name|boolean
name|isAllowDefaultCodec
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isAllowDefaultCodec
argument_list|()
return|;
block|}
DECL|method|isDisconnect ()
specifier|public
name|boolean
name|isDisconnect
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isDisconnect
argument_list|()
return|;
block|}
comment|/**      * Whether or not to disconnect(close) from Mina session right after use. Can be used for both consumer and producer.      * @param disconnect      */
DECL|method|setDisconnect (boolean disconnect)
specifier|public
name|void
name|setDisconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setDisconnect
argument_list|(
name|disconnect
argument_list|)
expr_stmt|;
block|}
DECL|method|isDisconnectOnNoReply ()
specifier|public
name|boolean
name|isDisconnectOnNoReply
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isDisconnectOnNoReply
argument_list|()
return|;
block|}
comment|/**      * If sync is enabled then this option dictates MinaConsumer if it should disconnect where there is no reply to send back.      * @param disconnectOnNoReply      */
DECL|method|setDisconnectOnNoReply (boolean disconnectOnNoReply)
specifier|public
name|void
name|setDisconnectOnNoReply
parameter_list|(
name|boolean
name|disconnectOnNoReply
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setDisconnectOnNoReply
argument_list|(
name|disconnectOnNoReply
argument_list|)
expr_stmt|;
block|}
DECL|method|getNoReplyLogLevel ()
specifier|public
name|LoggingLevel
name|getNoReplyLogLevel
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getNoReplyLogLevel
argument_list|()
return|;
block|}
comment|/**      * If sync is enabled this option dictates MinaConsumer which logging level to use when logging a there is no reply to send back.      * @param noReplyLogLevel      */
DECL|method|setNoReplyLogLevel (LoggingLevel noReplyLogLevel)
specifier|public
name|void
name|setNoReplyLogLevel
parameter_list|(
name|LoggingLevel
name|noReplyLogLevel
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setNoReplyLogLevel
argument_list|(
name|noReplyLogLevel
argument_list|)
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSslContextParameters
argument_list|()
return|;
block|}
comment|/**      * To configure SSL security.      * @param sslContextParameters      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSslContextParameters
argument_list|(
name|sslContextParameters
argument_list|)
expr_stmt|;
block|}
DECL|method|isAutoStartTls ()
specifier|public
name|boolean
name|isAutoStartTls
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isAutoStartTls
argument_list|()
return|;
block|}
comment|/**      * Whether to auto start SSL handshake.      * @param autoStartTls      */
DECL|method|setAutoStartTls (boolean autoStartTls)
specifier|public
name|void
name|setAutoStartTls
parameter_list|(
name|boolean
name|autoStartTls
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setAutoStartTls
argument_list|(
name|autoStartTls
argument_list|)
expr_stmt|;
block|}
DECL|method|getMaximumPoolSize ()
specifier|public
name|int
name|getMaximumPoolSize
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getMaximumPoolSize
argument_list|()
return|;
block|}
comment|/**      * Number of worker threads in the worker pool for TCP and UDP      * @param maximumPoolSize      */
DECL|method|setMaximumPoolSize (int maximumPoolSize)
specifier|public
name|void
name|setMaximumPoolSize
parameter_list|(
name|int
name|maximumPoolSize
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setMaximumPoolSize
argument_list|(
name|maximumPoolSize
argument_list|)
expr_stmt|;
block|}
DECL|method|isOrderedThreadPoolExecutor ()
specifier|public
name|boolean
name|isOrderedThreadPoolExecutor
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isOrderedThreadPoolExecutor
argument_list|()
return|;
block|}
comment|/**      * Whether to use ordered thread pool, to ensure events are processed orderly on the same channel.      * @param orderedThreadPoolExecutor      */
DECL|method|setOrderedThreadPoolExecutor (boolean orderedThreadPoolExecutor)
specifier|public
name|void
name|setOrderedThreadPoolExecutor
parameter_list|(
name|boolean
name|orderedThreadPoolExecutor
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setOrderedThreadPoolExecutor
argument_list|(
name|orderedThreadPoolExecutor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Whether to create the InetAddress once and reuse. Setting this to false allows to pickup DNS changes in the network.      * @param shouldCacheAddress      */
DECL|method|setCachedAddress (boolean shouldCacheAddress)
specifier|public
name|void
name|setCachedAddress
parameter_list|(
name|boolean
name|shouldCacheAddress
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setCachedAddress
argument_list|(
name|shouldCacheAddress
argument_list|)
expr_stmt|;
block|}
DECL|method|isCachedAddress ()
specifier|public
name|boolean
name|isCachedAddress
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isCachedAddress
argument_list|()
return|;
block|}
comment|/**      * If the clientMode is true, mina consumer will connect the address as a TCP client.      * @param clientMode      */
DECL|method|setClientMode (boolean clientMode)
specifier|public
name|void
name|setClientMode
parameter_list|(
name|boolean
name|clientMode
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setClientMode
argument_list|(
name|clientMode
argument_list|)
expr_stmt|;
block|}
DECL|method|isClientMode ()
specifier|public
name|boolean
name|isClientMode
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isClientMode
argument_list|()
return|;
block|}
DECL|method|getUriString ()
specifier|public
name|String
name|getUriString
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getUriString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

