begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira.oauth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|oauth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|PKCS8EncodedKeySpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|httpclient
operator|.
name|api
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|RestClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|auth
operator|.
name|oauth
operator|.
name|OAuthParameters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|auth
operator|.
name|oauth
operator|.
name|OAuthRsaSigner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|GenericUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|apache
operator|.
name|ApacheHttpTransport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|repackaged
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_comment
comment|/**  * This authentication handler uses the 3-legged OAuth approach described in https://developer.atlassian.com/server/jira/platform/oauth/  * The user must manually retrieve a verification code, access token and consumer key to use this authenticator.  */
end_comment

begin_class
DECL|class|JiraOAuthAuthenticationHandler
specifier|public
class|class
name|JiraOAuthAuthenticationHandler
implements|implements
name|AuthenticationHandler
block|{
DECL|field|parameters
specifier|private
name|OAuthParameters
name|parameters
decl_stmt|;
DECL|method|JiraOAuthAuthenticationHandler (String consumerKey, String verificationCode, String privateKey, String accessToken, String jiraUrl)
specifier|public
name|JiraOAuthAuthenticationHandler
parameter_list|(
name|String
name|consumerKey
parameter_list|,
name|String
name|verificationCode
parameter_list|,
name|String
name|privateKey
parameter_list|,
name|String
name|accessToken
parameter_list|,
name|String
name|jiraUrl
parameter_list|)
block|{
name|String
name|accessTokenUrl
init|=
name|jiraUrl
operator|+
literal|"/plugins/servlet/oauth/access-token"
decl_stmt|;
name|JiraOAuthGetAccessToken
name|jiraAccessToken
init|=
operator|new
name|JiraOAuthGetAccessToken
argument_list|(
name|accessTokenUrl
argument_list|)
decl_stmt|;
name|jiraAccessToken
operator|.
name|consumerKey
operator|=
name|consumerKey
expr_stmt|;
try|try
block|{
name|jiraAccessToken
operator|.
name|signer
operator|=
name|getOAuthRsaSigner
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RestClientException
argument_list|(
literal|"Error generating the OAuth Authorization RSA Signer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|jiraAccessToken
operator|.
name|transport
operator|=
operator|new
name|ApacheHttpTransport
argument_list|()
expr_stmt|;
name|jiraAccessToken
operator|.
name|verifier
operator|=
name|verificationCode
expr_stmt|;
name|jiraAccessToken
operator|.
name|temporaryToken
operator|=
name|accessToken
expr_stmt|;
name|parameters
operator|=
name|jiraAccessToken
operator|.
name|createParameters
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure (Request.Builder builder)
specifier|public
name|void
name|configure
parameter_list|(
name|Request
operator|.
name|Builder
name|builder
parameter_list|)
block|{
try|try
block|{
name|OAuthHttpClientDecorator
operator|.
name|OAuthAuthenticatedRequestBuilder
name|oauthBuilder
init|=
operator|(
name|OAuthHttpClientDecorator
operator|.
name|OAuthAuthenticatedRequestBuilder
operator|)
name|builder
decl_stmt|;
name|parameters
operator|.
name|computeNonce
argument_list|()
expr_stmt|;
name|parameters
operator|.
name|computeTimestamp
argument_list|()
expr_stmt|;
name|parameters
operator|.
name|computeSignature
argument_list|(
name|oauthBuilder
operator|.
name|method
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|GenericUrl
argument_list|(
name|oauthBuilder
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHeader
argument_list|(
literal|"Authorization"
argument_list|,
name|parameters
operator|.
name|getAuthorizationHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RestClientException
argument_list|(
literal|"Error generating the OAuth Authorization request parameter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getOAuthRsaSigner (String privateKey)
specifier|private
name|OAuthRsaSigner
name|getOAuthRsaSigner
parameter_list|(
name|String
name|privateKey
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
name|byte
index|[]
name|privateBytes
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|privateKey
argument_list|)
decl_stmt|;
name|PKCS8EncodedKeySpec
name|keySpec
init|=
operator|new
name|PKCS8EncodedKeySpec
argument_list|(
name|privateBytes
argument_list|)
decl_stmt|;
name|KeyFactory
name|kf
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|OAuthRsaSigner
name|oAuthRsaSigner
init|=
operator|new
name|OAuthRsaSigner
argument_list|()
decl_stmt|;
name|oAuthRsaSigner
operator|.
name|privateKey
operator|=
name|kf
operator|.
name|generatePrivate
argument_list|(
name|keySpec
argument_list|)
expr_stmt|;
return|return
name|oAuthRsaSigner
return|;
block|}
block|}
end_class

end_unit

