begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|JiraRestClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|RestClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|DefaultComponentVerifierExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|OptionsGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultErrorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultErrorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|oauth
operator|.
name|JiraOAuthAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|oauth
operator|.
name|OAuthAsynchronousJiraRestClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraConstants
operator|.
name|JIRA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraConstants
operator|.
name|JIRA_URL
import|;
end_import

begin_class
DECL|class|JiraVerifierExtension
specifier|public
class|class
name|JiraVerifierExtension
extends|extends
name|DefaultComponentVerifierExtension
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JiraVerifierExtension
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|JiraVerifierExtension ()
specifier|public
name|JiraVerifierExtension
parameter_list|()
block|{
name|super
argument_list|(
name|JIRA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|verifyParameters (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|PARAMETERS
argument_list|)
operator|.
name|error
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresOption
argument_list|(
name|JIRA_URL
argument_list|,
name|parameters
argument_list|)
argument_list|)
operator|.
name|errors
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresAny
argument_list|(
name|parameters
argument_list|,
name|OptionsGroup
operator|.
name|withName
argument_list|(
literal|"basic_authentication"
argument_list|)
operator|.
name|options
argument_list|(
literal|"username"
argument_list|,
literal|"password"
argument_list|,
literal|"!requestToken"
argument_list|,
literal|"!privateKey"
argument_list|,
literal|"!consumerKey"
argument_list|,
literal|"!verificationCode"
argument_list|,
literal|"!accessToken"
argument_list|)
argument_list|,
name|OptionsGroup
operator|.
name|withName
argument_list|(
literal|"oauth_authentication"
argument_list|)
operator|.
name|options
argument_list|(
literal|"requestToken"
argument_list|,
literal|"privateKey"
argument_list|,
literal|"consumerKey"
argument_list|,
literal|"verificationCode"
argument_list|,
literal|"accessToken"
argument_list|,
literal|"!username"
argument_list|,
literal|"!password"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Validate using the catalog
name|super
operator|.
name|verifyParametersAgainstCatalog
argument_list|(
name|builder
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|verifyConnectivity (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyConnectivity
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|CONNECTIVITY
argument_list|)
decl_stmt|;
try|try
block|{
name|JiraConfiguration
name|conf
init|=
name|setProperties
argument_list|(
operator|new
name|JiraConfiguration
argument_list|()
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|OAuthAsynchronousJiraRestClientFactory
name|factory
init|=
operator|new
name|OAuthAsynchronousJiraRestClientFactory
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|jiraServerUri
init|=
name|URI
operator|.
name|create
argument_list|(
name|conf
operator|.
name|getJiraUrl
argument_list|()
argument_list|)
decl_stmt|;
name|JiraRestClient
name|client
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getUsername
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|client
operator|=
name|factory
operator|.
name|createWithBasicHttpAuthentication
argument_list|(
name|jiraServerUri
argument_list|,
name|conf
operator|.
name|getUsername
argument_list|()
argument_list|,
name|conf
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JiraOAuthAuthenticationHandler
name|oAuthHandler
init|=
operator|new
name|JiraOAuthAuthenticationHandler
argument_list|(
name|conf
operator|.
name|getConsumerKey
argument_list|()
argument_list|,
name|conf
operator|.
name|getVerificationCode
argument_list|()
argument_list|,
name|conf
operator|.
name|getPrivateKey
argument_list|()
argument_list|,
name|conf
operator|.
name|getAccessToken
argument_list|()
argument_list|,
name|conf
operator|.
name|getJiraUrl
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|=
name|factory
operator|.
name|create
argument_list|(
name|jiraServerUri
argument_list|,
name|oAuthHandler
argument_list|)
expr_stmt|;
block|}
comment|// test the connection to the jira server
name|ServerInfo
name|serverInfo
init|=
name|client
operator|.
name|getMetadataClient
argument_list|()
operator|.
name|getServerInfo
argument_list|()
operator|.
name|claim
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verify connectivity to jira server OK: {}"
argument_list|,
name|serverInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestClientException
name|e
parameter_list|)
block|{
name|ResultErrorBuilder
name|errorBuilder
init|=
name|ResultErrorBuilder
operator|.
name|withCodeAndDescription
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|AUTHENTICATION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
literal|"jira_exception_message"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
literal|"jira_status_code"
argument_list|,
name|e
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
name|VerificationError
operator|.
name|ExceptionAttribute
operator|.
name|EXCEPTION_CLASS
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
name|VerificationError
operator|.
name|ExceptionAttribute
operator|.
name|EXCEPTION_INSTANCE
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|builder
operator|.
name|error
argument_list|(
name|errorBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ResultErrorBuilder
name|errorBuilder
init|=
name|ResultErrorBuilder
operator|.
name|withCodeAndDescription
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|AUTHENTICATION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
literal|"jira_exception_message"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
name|VerificationError
operator|.
name|ExceptionAttribute
operator|.
name|EXCEPTION_CLASS
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
name|VerificationError
operator|.
name|ExceptionAttribute
operator|.
name|EXCEPTION_INSTANCE
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|builder
operator|.
name|error
argument_list|(
name|errorBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

