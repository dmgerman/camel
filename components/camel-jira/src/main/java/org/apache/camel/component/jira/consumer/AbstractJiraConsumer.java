begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira.consumer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|consumer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|JiraRestClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|SearchRestClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|Issue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AbstractJiraConsumer
specifier|public
specifier|abstract
class|class
name|AbstractJiraConsumer
extends|extends
name|ScheduledPollConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractJiraConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|JiraEndpoint
name|endpoint
decl_stmt|;
DECL|method|AbstractJiraConsumer (JiraEndpoint endpoint, Processor processor)
specifier|public
name|AbstractJiraConsumer
parameter_list|(
name|JiraEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|setDelay
argument_list|(
name|endpoint
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getIssues ()
specifier|protected
name|List
argument_list|<
name|Issue
argument_list|>
name|getIssues
parameter_list|()
block|{
return|return
name|getIssues
argument_list|(
name|endpoint
operator|.
name|getJql
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
name|endpoint
operator|.
name|getMaxResults
argument_list|()
argument_list|)
return|;
block|}
comment|// Ignore maxResults if it's<= 0.
DECL|method|getIssues (String jql, int start, int maxPerQuery, int maxResults)
specifier|protected
name|List
argument_list|<
name|Issue
argument_list|>
name|getIssues
parameter_list|(
name|String
name|jql
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|maxPerQuery
parameter_list|,
name|int
name|maxResults
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start indexing current JIRA issues..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Issue
argument_list|>
name|issues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SearchRestClient
name|searchRestClient
init|=
name|endpoint
operator|.
name|getClient
argument_list|()
operator|.
name|getSearchClient
argument_list|()
decl_stmt|;
name|SearchResult
name|searchResult
init|=
name|searchRestClient
operator|.
name|searchJql
argument_list|(
name|jql
argument_list|,
name|maxResults
argument_list|,
name|start
argument_list|,
literal|null
argument_list|)
operator|.
name|claim
argument_list|()
decl_stmt|;
for|for
control|(
name|Issue
name|issue
range|:
name|searchResult
operator|.
name|getIssues
argument_list|()
control|)
block|{
name|issues
operator|.
name|add
argument_list|(
name|issue
argument_list|)
expr_stmt|;
block|}
comment|// Note: #getTotal == the total # the query would return *without* pagination, effectively telling us
comment|// we've reached the end. Also exit early if we're limiting the # of results.
if|if
condition|(
name|start
operator|>=
name|searchResult
operator|.
name|getTotal
argument_list|()
operator|||
operator|(
name|maxResults
operator|>
literal|0
operator|&&
name|issues
operator|.
name|size
argument_list|()
operator|>=
name|maxResults
operator|)
condition|)
block|{
break|break;
block|}
name|start
operator|+=
name|maxPerQuery
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"End indexing current JIRA issues. {} issues indexed."
argument_list|,
name|issues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|issues
return|;
block|}
DECL|method|client ()
specifier|protected
name|JiraRestClient
name|client
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getClient
argument_list|()
return|;
block|}
DECL|method|poll ()
specifier|protected
specifier|abstract
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

