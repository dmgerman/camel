begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira.oauth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|oauth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|event
operator|.
name|api
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|httpclient
operator|.
name|apache
operator|.
name|httpcomponents
operator|.
name|DefaultHttpClientFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|httpclient
operator|.
name|api
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|httpclient
operator|.
name|api
operator|.
name|factory
operator|.
name|HttpClientOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|internal
operator|.
name|async
operator|.
name|DisposableHttpClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|sal
operator|.
name|api
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|sal
operator|.
name|api
operator|.
name|UrlMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|sal
operator|.
name|api
operator|.
name|executor
operator|.
name|ThreadLocalContextManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Similar to AsynchronousHttpClientFactory, except we use a custom OAuthHttpClientDecorator  */
end_comment

begin_class
DECL|class|OAuthAsynchronousHttpClientFactory
specifier|public
class|class
name|OAuthAsynchronousHttpClientFactory
block|{
DECL|field|JIRA_REST_CLIENT_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|JIRA_REST_CLIENT_VERSION
init|=
name|MavenUtils
operator|.
name|getVersion
argument_list|(
literal|"com.atlassian.jira"
argument_list|,
literal|"jira-rest-java-client-api"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createClient (final URI serverUri, final AuthenticationHandler authenticationHandler)
specifier|public
name|DisposableHttpClient
name|createClient
parameter_list|(
specifier|final
name|URI
name|serverUri
parameter_list|,
specifier|final
name|AuthenticationHandler
name|authenticationHandler
parameter_list|)
block|{
specifier|final
name|HttpClientOptions
name|options
init|=
operator|new
name|HttpClientOptions
argument_list|()
decl_stmt|;
specifier|final
name|DefaultHttpClientFactory
name|defaultHttpClientFactory
init|=
operator|new
name|DefaultHttpClientFactory
argument_list|(
operator|new
name|NoOpEventPublisher
argument_list|()
argument_list|,
operator|new
name|RestClientApplicationProperties
argument_list|(
name|serverUri
argument_list|)
argument_list|,
operator|new
name|ThreadLocalContextManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getThreadLocalContext
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setThreadLocalContext
parameter_list|(
name|Object
name|context
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|clearThreadLocalContext
parameter_list|()
block|{                     }
block|}
argument_list|)
decl_stmt|;
specifier|final
name|HttpClient
name|httpClient
init|=
name|defaultHttpClientFactory
operator|.
name|create
argument_list|(
name|options
argument_list|)
decl_stmt|;
return|return
operator|new
name|OAuthHttpClientDecorator
argument_list|(
name|httpClient
argument_list|,
name|authenticationHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|defaultHttpClientFactory
operator|.
name|dispose
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|NoOpEventPublisher
specifier|private
specifier|static
class|class
name|NoOpEventPublisher
implements|implements
name|EventPublisher
block|{
annotation|@
name|Override
DECL|method|publish (Object o)
specifier|public
name|void
name|publish
parameter_list|(
name|Object
name|o
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|register (Object o)
specifier|public
name|void
name|register
parameter_list|(
name|Object
name|o
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|unregister (Object o)
specifier|public
name|void
name|unregister
parameter_list|(
name|Object
name|o
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|unregisterAll ()
specifier|public
name|void
name|unregisterAll
parameter_list|()
block|{         }
block|}
comment|/**      * These properties are used to present JRJC as a User-Agent during http requests.      */
DECL|class|RestClientApplicationProperties
specifier|private
specifier|static
specifier|final
class|class
name|RestClientApplicationProperties
implements|implements
name|ApplicationProperties
block|{
DECL|field|baseUrl
specifier|private
specifier|final
name|String
name|baseUrl
decl_stmt|;
DECL|method|RestClientApplicationProperties (URI jiraURI)
specifier|private
name|RestClientApplicationProperties
parameter_list|(
name|URI
name|jiraURI
parameter_list|)
block|{
name|this
operator|.
name|baseUrl
operator|=
name|jiraURI
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBaseUrl ()
specifier|public
name|String
name|getBaseUrl
parameter_list|()
block|{
return|return
name|baseUrl
return|;
block|}
comment|/**          * We'll always have an absolute URL as a client.          */
annotation|@
name|Nonnull
annotation|@
name|Override
DECL|method|getBaseUrl (UrlMode urlMode)
specifier|public
name|String
name|getBaseUrl
parameter_list|(
name|UrlMode
name|urlMode
parameter_list|)
block|{
return|return
name|baseUrl
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
DECL|method|getDisplayName ()
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
literal|"Atlassian JIRA Rest Java Client"
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
DECL|method|getPlatformId ()
specifier|public
name|String
name|getPlatformId
parameter_list|()
block|{
return|return
name|ApplicationProperties
operator|.
name|PLATFORM_JIRA
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|JIRA_REST_CLIENT_VERSION
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
DECL|method|getBuildDate ()
specifier|public
name|Date
name|getBuildDate
parameter_list|()
block|{
comment|// TODO implement using MavenUtils, JRJC-123
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
DECL|method|getBuildNumber ()
specifier|public
name|String
name|getBuildNumber
parameter_list|()
block|{
comment|// TODO implement using MavenUtils, JRJC-123
return|return
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|File
name|getHomeDirectory
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPropertyValue (final String s)
specifier|public
name|String
name|getPropertyValue
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
block|}
DECL|class|MavenUtils
specifier|private
specifier|static
specifier|final
class|class
name|MavenUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MavenUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UNKNOWN_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN_VERSION
init|=
literal|"unknown"
decl_stmt|;
DECL|method|getVersion (String groupId, String artifactId)
specifier|static
name|String
name|getVersion
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|pomProps
init|=
name|String
operator|.
name|format
argument_list|(
literal|"/META-INF/maven/%s/%s/pom.properties"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|resourceAsStream
init|=
name|AuthenticationHandler
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|pomProps
argument_list|)
init|)
block|{
name|props
operator|.
name|load
argument_list|(
name|resourceAsStream
argument_list|)
expr_stmt|;
return|return
name|props
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|,
name|UNKNOWN_VERSION
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not find version for maven artifact {}:{}"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got the following exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|UNKNOWN_VERSION
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

