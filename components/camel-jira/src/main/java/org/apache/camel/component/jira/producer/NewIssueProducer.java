begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|BasicIssue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|input
operator|.
name|IssueInputBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JIRAEndpoint
import|;
end_import

begin_class
DECL|class|NewIssueProducer
specifier|public
class|class
name|NewIssueProducer
extends|extends
name|AbstractJIRAProducer
block|{
DECL|method|NewIssueProducer (JIRAEndpoint endpoint)
specifier|public
name|NewIssueProducer
parameter_list|(
name|JIRAEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|projectKey
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"ProjectKey"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|issueTypeId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"IssueTypeId"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|issueSummary
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"IssueSummary"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|IssueInputBuilder
name|issueBuilder
init|=
operator|new
name|IssueInputBuilder
argument_list|(
name|projectKey
argument_list|,
name|issueTypeId
argument_list|)
decl_stmt|;
name|issueBuilder
operator|.
name|setDescription
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|issueBuilder
operator|.
name|setSummary
argument_list|(
name|issueSummary
argument_list|)
expr_stmt|;
name|BasicIssue
name|issue
init|=
name|client
argument_list|()
operator|.
name|getIssueClient
argument_list|()
operator|.
name|createIssue
argument_list|(
name|issueBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// support InOut
if|if
condition|(
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
condition|)
block|{
comment|// copy the header of in message to the out message
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|issue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|issue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

