begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.jira.consumer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|consumer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JIRAEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|BasicIssue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|Issue
import|;
end_import

begin_comment
comment|/**  * Consumes new comments on JIRA issues.  *   * NOTE: In your JQL, try to optimize the query as much as possible!  For example, the JIRA Toolkit Plugin includes a // "Number of comments" custom field -- use '"Number of comments"> 0' in your query.  Also try to minimize based on // state (status=Open), increase the polling delay, etc.  We have to do a separate query for *every single* resulting  * ticket in order to load its comments!  For large organizations, the JIRA API can be significantly slow.  */
end_comment

begin_class
DECL|class|NewCommentConsumer
specifier|public
class|class
name|NewCommentConsumer
extends|extends
name|AbstractJIRAConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NewCommentConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|commentIds
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|commentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|NewCommentConsumer (JIRAEndpoint endpoint, Processor processor)
specifier|public
name|NewCommentConsumer
parameter_list|(
name|JIRAEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JIRA NewCommentConsumer: Indexing current issue comments..."
argument_list|)
expr_stmt|;
name|getComments
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
name|Stack
argument_list|<
name|Comment
argument_list|>
name|newComments
init|=
name|getComments
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|newComments
operator|.
name|empty
argument_list|()
condition|)
block|{
name|Comment
name|newComment
init|=
name|newComments
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Exchange
name|e
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|newComment
argument_list|)
expr_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|newComments
operator|.
name|size
argument_list|()
return|;
block|}
comment|// In the end, we want *new* comments oldest to newest.
DECL|method|getComments ()
specifier|private
name|Stack
argument_list|<
name|Comment
argument_list|>
name|getComments
parameter_list|()
block|{
name|Stack
argument_list|<
name|Comment
argument_list|>
name|newComments
init|=
operator|new
name|Stack
argument_list|<
name|Comment
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BasicIssue
argument_list|>
name|issues
init|=
name|getIssues
argument_list|()
decl_stmt|;
for|for
control|(
name|BasicIssue
name|issue
range|:
name|issues
control|)
block|{
name|Issue
name|fullIssue
init|=
name|client
argument_list|()
operator|.
name|getIssueClient
argument_list|()
operator|.
name|getIssue
argument_list|(
name|issue
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Comment
name|comment
range|:
name|fullIssue
operator|.
name|getComments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|commentIds
operator|.
name|contains
argument_list|(
name|comment
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|newComments
operator|.
name|push
argument_list|(
name|comment
argument_list|)
expr_stmt|;
name|commentIds
operator|.
name|add
argument_list|(
name|comment
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|newComments
return|;
block|}
block|}
end_class

end_unit

