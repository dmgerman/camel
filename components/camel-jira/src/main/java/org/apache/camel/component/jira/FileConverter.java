begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_class
annotation|@
name|Converter
argument_list|(
name|generateLoader
operator|=
literal|true
argument_list|)
DECL|class|FileConverter
specifier|public
specifier|final
class|class
name|FileConverter
block|{
DECL|method|FileConverter ()
specifier|private
name|FileConverter
parameter_list|()
block|{     }
annotation|@
name|Converter
DECL|method|genericToFile (GenericFile<File> genericFile, Exchange exchange)
specifier|public
specifier|static
name|File
name|genericToFile
parameter_list|(
name|GenericFile
argument_list|<
name|File
argument_list|>
name|genericFile
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|body
init|=
name|genericFile
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|File
name|file
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|byte
index|[]
name|bos
init|=
operator|(
name|byte
index|[]
operator|)
name|body
decl_stmt|;
name|String
name|destDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|genericFile
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|getCanonicalPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|destDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File is not jailed to the destination directory"
argument_list|)
throw|;
block|}
name|Files
operator|.
name|write
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|,
name|bos
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|)
expr_stmt|;
comment|// delete the temporary file on exit, as other routing may need the file for post processing
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|(
name|File
operator|)
name|body
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
block|}
end_class

end_unit

