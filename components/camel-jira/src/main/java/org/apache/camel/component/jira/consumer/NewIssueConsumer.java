begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira.consumer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|consumer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|BasicIssue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JIRAEndpoint
import|;
end_import

begin_comment
comment|/**  * Consumes new JIRA issues.  *   * NOTE: We manually add "ORDER BY key desc" to the JQL in order to optimize startup (the latest issues one at a time),  * rather than having to index everything.  */
end_comment

begin_class
DECL|class|NewIssueConsumer
specifier|public
class|class
name|NewIssueConsumer
extends|extends
name|AbstractJIRAConsumer
block|{
DECL|field|jql
specifier|private
specifier|final
name|String
name|jql
decl_stmt|;
DECL|field|latestIssueId
specifier|private
name|long
name|latestIssueId
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|NewIssueConsumer (JIRAEndpoint endpoint, Processor processor)
specifier|public
name|NewIssueConsumer
parameter_list|(
name|JIRAEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|jql
operator|=
name|endpoint
operator|.
name|getJql
argument_list|()
operator|+
literal|" ORDER BY key desc"
expr_stmt|;
comment|// grab only the top
name|List
argument_list|<
name|BasicIssue
argument_list|>
name|issues
init|=
name|getIssues
argument_list|(
name|jql
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// in case there aren't any issues...
if|if
condition|(
name|issues
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|latestIssueId
operator|=
name|issues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
name|Stack
argument_list|<
name|BasicIssue
argument_list|>
name|newIssues
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
name|getNewIssues
argument_list|(
literal|0
argument_list|,
name|newIssues
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|newIssues
operator|.
name|empty
argument_list|()
condition|)
block|{
name|BasicIssue
name|newIssue
init|=
name|newIssues
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Exchange
name|e
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|newIssue
argument_list|)
expr_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|newIssues
operator|.
name|size
argument_list|()
return|;
block|}
comment|// In the end, we want *new* issues oldest to newest.
DECL|method|getNewIssues (int start, Stack<BasicIssue> stack)
specifier|private
name|void
name|getNewIssues
parameter_list|(
name|int
name|start
parameter_list|,
name|Stack
argument_list|<
name|BasicIssue
argument_list|>
name|stack
parameter_list|)
block|{
comment|// grab only the top
name|List
argument_list|<
name|BasicIssue
argument_list|>
name|issues
init|=
name|getIssues
argument_list|(
name|jql
argument_list|,
name|start
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// in case there aren't any issues...
if|if
condition|(
name|issues
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|long
name|id
init|=
name|issues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|>
name|latestIssueId
condition|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|issues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// try again in case multiple new issues exist
name|getNewIssues
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|stack
argument_list|)
expr_stmt|;
comment|// make sure this happens now, rather than before calling #getNewIssues
name|latestIssueId
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

