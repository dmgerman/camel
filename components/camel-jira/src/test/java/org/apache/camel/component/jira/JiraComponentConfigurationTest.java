begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JiraComponentConfigurationTest
specifier|public
class|class
name|JiraComponentConfigurationTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|USERNAME
specifier|static
specifier|final
name|String
name|USERNAME
init|=
literal|"username"
decl_stmt|;
DECL|field|USERNAME_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|USERNAME_VALUE
init|=
literal|"claudio"
decl_stmt|;
DECL|field|PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
DECL|field|PASSWORD_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD_VALUE
init|=
literal|"myPassword"
decl_stmt|;
DECL|field|VERIF_CODE
specifier|private
specifier|static
specifier|final
name|String
name|VERIF_CODE
init|=
literal|"verificationCode"
decl_stmt|;
DECL|field|VERIF_CODE_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|VERIF_CODE_VALUE
init|=
literal|"My_verification_code_test"
decl_stmt|;
DECL|field|CONS_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CONS_KEY
init|=
literal|"consumerKey"
decl_stmt|;
DECL|field|CONS_KEY_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|CONS_KEY_VALUE
init|=
literal|"my_consumer_key_test"
decl_stmt|;
DECL|field|ACCESS_TOKEN
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_TOKEN
init|=
literal|"accessToken"
decl_stmt|;
DECL|field|ACCESS_TOKEN_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_TOKEN_VALUE
init|=
literal|"my_access_token_test"
decl_stmt|;
DECL|field|PRIV_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PRIV_KEY
init|=
literal|"privateKey"
decl_stmt|;
DECL|field|PRIV_KEY_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|PRIV_KEY_VALUE
init|=
literal|"my_privateKey_test"
decl_stmt|;
DECL|field|JIRA_URL
specifier|private
specifier|static
specifier|final
name|String
name|JIRA_URL
init|=
literal|"jiraUrl"
decl_stmt|;
DECL|field|JIRA_URL_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|JIRA_URL_VALUE
init|=
literal|"http://my_jira_server:8080"
decl_stmt|;
annotation|@
name|Test
DECL|method|createEndpointWithBasicAuthentication ()
specifier|public
name|void
name|createEndpointWithBasicAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|JiraComponent
name|component
init|=
operator|new
name|JiraComponent
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"&"
argument_list|)
operator|.
name|join
argument_list|(
name|concat
argument_list|(
name|JIRA_URL
argument_list|,
name|JIRA_URL_VALUE
argument_list|)
argument_list|,
name|concat
argument_list|(
name|USERNAME
argument_list|,
name|USERNAME_VALUE
argument_list|)
argument_list|,
name|concat
argument_list|(
name|PASSWORD
argument_list|,
name|PASSWORD_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|JiraEndpoint
name|endpoint
init|=
operator|(
name|JiraEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"jira://newIssues?"
operator|+
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"newissues"
argument_list|,
name|endpoint
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JIRA_URL_VALUE
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getJiraUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USERNAME_VALUE
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PASSWORD_VALUE
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithOAuthentication ()
specifier|public
name|void
name|createEndpointWithOAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|JiraComponent
name|component
init|=
operator|new
name|JiraComponent
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"&"
argument_list|)
operator|.
name|join
argument_list|(
name|concat
argument_list|(
name|JIRA_URL
argument_list|,
name|JIRA_URL_VALUE
argument_list|)
argument_list|,
name|concat
argument_list|(
name|VERIF_CODE
argument_list|,
name|VERIF_CODE_VALUE
argument_list|)
argument_list|,
name|concat
argument_list|(
name|ACCESS_TOKEN
argument_list|,
name|ACCESS_TOKEN_VALUE
argument_list|)
argument_list|,
name|concat
argument_list|(
name|CONS_KEY
argument_list|,
name|CONS_KEY_VALUE
argument_list|)
argument_list|,
name|concat
argument_list|(
name|PRIV_KEY
argument_list|,
name|PRIV_KEY_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|JiraEndpoint
name|endpoint
init|=
operator|(
name|JiraEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"jira://newComments?"
operator|+
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"newcomments"
argument_list|,
name|endpoint
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JIRA_URL_VALUE
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getJiraUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VERIF_CODE_VALUE
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getVerificationCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACCESS_TOKEN_VALUE
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAccessToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CONS_KEY_VALUE
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConsumerKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PRIV_KEY_VALUE
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|concat (String key, String val)
specifier|private
name|String
name|concat
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
return|return
name|key
operator|+
literal|"="
operator|+
name|val
return|;
block|}
block|}
end_class

end_unit

