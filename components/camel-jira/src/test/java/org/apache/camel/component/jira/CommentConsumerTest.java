begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|BasicIssue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|mocks
operator|.
name|MockJerseyJiraRestClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|mocks
operator|.
name|MockJiraRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|mocks
operator|.
name|MockSearchRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CommentConsumerTest
specifier|public
class|class
name|CommentConsumerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommentConsumerTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|URL
specifier|private
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"https://somerepo.atlassian.net"
decl_stmt|;
DECL|field|USERNAME
specifier|private
specifier|static
specifier|final
name|String
name|USERNAME
init|=
literal|"someguy"
decl_stmt|;
DECL|field|PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"xU3xjhay9yjEaZq"
decl_stmt|;
DECL|field|JIRA_CREDENTIALS
specifier|private
specifier|static
specifier|final
name|String
name|JIRA_CREDENTIALS
init|=
name|URL
operator|+
literal|"&username="
operator|+
name|USERNAME
operator|+
literal|"&password="
operator|+
name|PASSWORD
decl_stmt|;
DECL|field|factory
specifier|protected
name|MockJerseyJiraRestClientFactory
name|factory
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|factory
operator|=
operator|new
name|MockJerseyJiraRestClientFactory
argument_list|()
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"JerseyJiraRestClientFactory"
argument_list|,
name|factory
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"jira://newComment?serverUrl="
operator|+
name|JIRA_CREDENTIALS
operator|+
literal|"&jql=RAW(project=CAMELJIRA)"
operator|+
literal|"&delay=500"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|NewCommentProcessor
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|emptyAtStartupTest ()
specifier|public
name|void
name|emptyAtStartupTest
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockResultEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mockResultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mockResultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleIssueTest ()
specifier|public
name|void
name|singleIssueTest
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockResultEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|MockJiraRestClient
name|jiraRestClient
init|=
operator|(
name|MockJiraRestClient
operator|)
name|factory
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|MockSearchRestClient
name|searchRestClient
init|=
operator|(
name|MockSearchRestClient
operator|)
name|jiraRestClient
operator|.
name|getSearchClient
argument_list|()
decl_stmt|;
name|BasicIssue
name|issue1
init|=
name|searchRestClient
operator|.
name|addIssue
argument_list|()
decl_stmt|;
name|String
name|commentText
init|=
literal|"Comment added at "
operator|+
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|searchRestClient
operator|.
name|addCommentToIssue
argument_list|(
name|issue1
argument_list|,
name|commentText
argument_list|)
decl_stmt|;
name|mockResultEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|comment1
argument_list|)
expr_stmt|;
name|mockResultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiIssueTest ()
specifier|public
name|void
name|multiIssueTest
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockResultEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|MockJiraRestClient
name|jiraRestClient
init|=
operator|(
name|MockJiraRestClient
operator|)
name|factory
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|MockSearchRestClient
name|searchRestClient
init|=
operator|(
name|MockSearchRestClient
operator|)
name|jiraRestClient
operator|.
name|getSearchClient
argument_list|()
decl_stmt|;
name|BasicIssue
name|issue1
init|=
name|searchRestClient
operator|.
name|addIssue
argument_list|()
decl_stmt|;
name|Comment
name|comment1
init|=
name|searchRestClient
operator|.
name|addCommentToIssue
argument_list|(
name|issue1
argument_list|,
literal|"Comment added at "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|BasicIssue
name|issue2
init|=
name|searchRestClient
operator|.
name|addIssue
argument_list|()
decl_stmt|;
name|Comment
name|comment2
init|=
name|searchRestClient
operator|.
name|addCommentToIssue
argument_list|(
name|issue2
argument_list|,
literal|"Comment added at "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|mockResultEndpoint
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
name|comment1
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|mockResultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|/**      * Log new comments.  Not really needed for this test, but useful for debugging.      */
DECL|class|NewCommentProcessor
specifier|public
class|class
name|NewCommentProcessor
implements|implements
name|Processor
block|{
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Comment
name|comment
init|=
operator|(
name|Comment
operator|)
name|in
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got comment with id "
operator|+
name|comment
operator|.
name|getId
argument_list|()
operator|+
literal|" Body "
operator|+
name|comment
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

