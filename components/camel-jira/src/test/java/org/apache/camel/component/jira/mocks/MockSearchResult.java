begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira.mocks
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|mocks
package|;
end_package

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|BasicIssue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|domain
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_class
DECL|class|MockSearchResult
specifier|public
class|class
name|MockSearchResult
extends|extends
name|SearchResult
block|{
DECL|field|issues
specifier|private
name|ArrayList
argument_list|<
name|?
extends|extends
name|BasicIssue
argument_list|>
name|issues
decl_stmt|;
DECL|field|basicIssueComparator
specifier|private
name|BasicIssueComparator
name|basicIssueComparator
init|=
operator|new
name|BasicIssueComparator
argument_list|()
decl_stmt|;
DECL|method|MockSearchResult (int startIndex, int maxResults, int total, java.lang.Iterable<? extends BasicIssue> issues)
specifier|public
name|MockSearchResult
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|maxResults
parameter_list|,
name|int
name|total
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Iterable
argument_list|<
name|?
extends|extends
name|BasicIssue
argument_list|>
name|issues
parameter_list|)
block|{
name|super
argument_list|(
name|startIndex
argument_list|,
name|maxResults
argument_list|,
name|total
argument_list|,
name|issues
argument_list|)
expr_stmt|;
name|this
operator|.
name|issues
operator|=
operator|(
name|ArrayList
argument_list|<
name|?
extends|extends
name|BasicIssue
argument_list|>
operator|)
name|issues
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTotal ()
specifier|public
name|int
name|getTotal
parameter_list|()
block|{
return|return
name|issues
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getIssues ()
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|BasicIssue
argument_list|>
name|getIssues
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|issues
argument_list|,
name|basicIssueComparator
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|?
extends|extends
name|BasicIssue
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|issues
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|issues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|issues
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
DECL|class|BasicIssueComparator
specifier|public
class|class
name|BasicIssueComparator
implements|implements
name|Comparator
argument_list|<
name|BasicIssue
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (BasicIssue issue1, BasicIssue issue2)
specifier|public
name|int
name|compare
parameter_list|(
name|BasicIssue
name|issue1
parameter_list|,
name|BasicIssue
name|issue2
parameter_list|)
block|{
if|if
condition|(
name|issue1
operator|.
name|getId
argument_list|()
operator|<
name|issue2
operator|.
name|getId
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|issue1
operator|.
name|getId
argument_list|()
operator|==
name|issue2
operator|.
name|getId
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

