begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IssueRestClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|JiraRestClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|JiraRestClientFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|Issue
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atlassian
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Promises
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraConstants
operator|.
name|ISSUE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraConstants
operator|.
name|JIRA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraConstants
operator|.
name|JIRA_REST_CLIENT_FACTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraTestConstants
operator|.
name|JIRA_CREDENTIALS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraTestConstants
operator|.
name|KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|Utils
operator|.
name|createIssue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|Utils
operator|.
name|createIssueWithAttachment
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|AttachFileProducerTest
specifier|public
class|class
name|AttachFileProducerTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Mock
DECL|field|jiraClient
specifier|private
name|JiraRestClient
name|jiraClient
decl_stmt|;
annotation|@
name|Mock
DECL|field|jiraRestClientFactory
specifier|private
name|JiraRestClientFactory
name|jiraRestClientFactory
decl_stmt|;
annotation|@
name|Mock
DECL|field|issueRestClient
specifier|private
name|IssueRestClient
name|issueRestClient
decl_stmt|;
annotation|@
name|Produce
argument_list|(
literal|"direct:start"
argument_list|)
DECL|field|template
specifier|private
name|ProducerTemplate
name|template
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:result"
argument_list|)
DECL|field|mockResult
specifier|private
name|MockEndpoint
name|mockResult
decl_stmt|;
DECL|field|issue
specifier|private
name|Issue
name|issue
decl_stmt|;
DECL|field|attachedFile
specifier|private
name|File
name|attachedFile
decl_stmt|;
annotation|@
name|Override
DECL|method|bindToRegistry (Registry registry)
specifier|protected
name|void
name|bindToRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|registry
operator|.
name|bind
argument_list|(
name|JIRA_REST_CLIENT_FACTORY
argument_list|,
name|jiraRestClientFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|setMocks ()
specifier|public
name|void
name|setMocks
parameter_list|()
block|{
name|when
argument_list|(
name|jiraRestClientFactory
operator|.
name|createWithBasicHttpAuthentication
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jiraClient
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|jiraClient
operator|.
name|getIssueClient
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|issueRestClient
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|issueRestClient
operator|.
name|getIssue
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|inv
lambda|->
block|{
if|if
condition|(
name|issue
operator|==
literal|null
condition|)
block|{
name|issue
operator|=
name|createIssue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|Promises
operator|.
name|promise
argument_list|(
name|issue
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|issueRestClient
operator|.
name|addAttachments
argument_list|(
name|any
argument_list|(
name|URI
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|inv
lambda|->
block|{
name|attachedFile
operator|=
name|inv
operator|.
name|getArgument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|attachments
operator|.
name|add
argument_list|(
operator|new
name|Attachment
argument_list|(
name|issue
operator|.
name|getAttachmentsUri
argument_list|()
argument_list|,
name|attachedFile
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Long
argument_list|(
name|attachedFile
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// re-create the issue with the attachment sent by the route
name|issue
operator|=
name|createIssueWithAttachment
argument_list|(
name|issue
operator|.
name|getId
argument_list|()
argument_list|,
name|issue
operator|.
name|getSummary
argument_list|()
argument_list|,
name|issue
operator|.
name|getKey
argument_list|()
argument_list|,
name|issue
operator|.
name|getIssueType
argument_list|()
argument_list|,
name|issue
operator|.
name|getDescription
argument_list|()
argument_list|,
name|issue
operator|.
name|getPriority
argument_list|()
argument_list|,
name|issue
operator|.
name|getAssignee
argument_list|()
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|generateSampleFile ()
specifier|private
name|File
name|generateSampleFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|sampleRandomFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"attach-test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|sampleRandomFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|text
init|=
literal|"A random text to use on the AttachFileProducerTest.java of camel-jira component."
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|sampleRandomFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|)
expr_stmt|;
return|return
name|sampleRandomFile
return|;
block|}
annotation|@
name|Override
DECL|method|stopCamelContext ()
specifier|protected
name|void
name|stopCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|stopCamelContext
argument_list|()
expr_stmt|;
name|attachedFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|setMocks
argument_list|()
expr_stmt|;
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|camelContext
operator|.
name|disableJMX
argument_list|()
expr_stmt|;
name|JiraComponent
name|component
init|=
operator|new
name|JiraComponent
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
name|JIRA
argument_list|,
name|component
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|sampleFile
init|=
name|generateSampleFile
argument_list|()
decl_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|process
argument_list|(
name|processor
lambda|->
block|{
name|GenericFile
argument_list|<
name|File
argument_list|>
name|genFile
init|=
operator|new
name|GenericFile
argument_list|<>
argument_list|()
decl_stmt|;
name|genFile
operator|.
name|setFile
argument_list|(
name|sampleFile
argument_list|)
expr_stmt|;
name|processor
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|genFile
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|setHeader
argument_list|(
name|ISSUE_KEY
argument_list|,
parameter_list|()
lambda|->
name|KEY
operator|+
literal|"-1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"jira://attach?jiraUrl="
operator|+
name|JIRA_CREDENTIALS
argument_list|)
operator|.
name|to
argument_list|(
name|mockResult
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|verifyAttachment ()
specifier|public
name|void
name|verifyAttachment
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Issue
name|retrievedIssue
init|=
name|issueRestClient
operator|.
name|getIssue
argument_list|(
name|issue
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|claim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|issue
argument_list|,
name|retrievedIssue
argument_list|)
expr_stmt|;
comment|// there is only one attachment
name|Attachment
name|attachFile
init|=
name|retrievedIssue
operator|.
name|getAttachments
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|attachFile
operator|.
name|getFilename
argument_list|()
argument_list|,
name|attachedFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attachFile
operator|.
name|getSize
argument_list|()
argument_list|,
name|attachedFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|mockResult
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockResult
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

