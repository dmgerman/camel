begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jira.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IssueRestClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|JiraRestClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|JiraRestClientFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|jira
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|Issue
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atlassian
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Promises
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraConstants
operator|.
name|ISSUE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraConstants
operator|.
name|JIRA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraConstants
operator|.
name|JIRA_REST_CLIENT_FACTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|JiraTestConstants
operator|.
name|JIRA_CREDENTIALS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|Utils
operator|.
name|createIssueWithComments
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jira
operator|.
name|Utils
operator|.
name|newComment
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|AddCommentProducerTest
specifier|public
class|class
name|AddCommentProducerTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Mock
DECL|field|jiraClient
specifier|private
name|JiraRestClient
name|jiraClient
decl_stmt|;
annotation|@
name|Mock
DECL|field|jiraRestClientFactory
specifier|private
name|JiraRestClientFactory
name|jiraRestClientFactory
decl_stmt|;
annotation|@
name|Mock
DECL|field|issueRestClient
specifier|private
name|IssueRestClient
name|issueRestClient
decl_stmt|;
annotation|@
name|Produce
argument_list|(
literal|"direct:start"
argument_list|)
DECL|field|template
specifier|private
name|ProducerTemplate
name|template
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:result"
argument_list|)
DECL|field|mockResult
specifier|private
name|MockEndpoint
name|mockResult
decl_stmt|;
DECL|field|comment
specifier|private
name|String
name|comment
decl_stmt|;
DECL|field|backendIssue
specifier|private
name|Issue
name|backendIssue
decl_stmt|;
annotation|@
name|Override
DECL|method|bindToRegistry (Registry registry)
specifier|protected
name|void
name|bindToRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|registry
operator|.
name|bind
argument_list|(
name|JIRA_REST_CLIENT_FACTORY
argument_list|,
name|jiraRestClientFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|setMocks ()
specifier|public
name|void
name|setMocks
parameter_list|()
block|{
name|when
argument_list|(
name|jiraRestClientFactory
operator|.
name|createWithBasicHttpAuthentication
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jiraClient
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|jiraClient
operator|.
name|getIssueClient
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|issueRestClient
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|issueRestClient
operator|.
name|addComment
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
operator|(
name|Answer
argument_list|<
name|Void
argument_list|>
operator|)
name|inv
lambda|->
block|{
name|Collection
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|backendIssue
operator|.
name|getComments
argument_list|()
control|)
block|{
name|comments
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|comments
operator|.
name|add
argument_list|(
name|newComment
argument_list|(
name|backendIssue
operator|.
name|getId
argument_list|()
argument_list|,
name|comments
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|backendIssue
operator|=
name|createIssueWithComments
argument_list|(
name|backendIssue
operator|.
name|getId
argument_list|()
argument_list|,
name|comments
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|backendIssue
operator|=
name|createIssueWithComments
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|issueRestClient
operator|.
name|getIssue
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|inv
lambda|->
name|Promises
operator|.
name|promise
argument_list|(
name|backendIssue
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|setMocks
argument_list|()
expr_stmt|;
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|camelContext
operator|.
name|disableJMX
argument_list|()
expr_stmt|;
name|JiraComponent
name|component
init|=
operator|new
name|JiraComponent
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
name|JIRA
argument_list|,
name|component
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|comment
operator|=
literal|"A new test comment "
operator|+
operator|new
name|Date
argument_list|()
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"jira://addComment?jiraUrl="
operator|+
name|JIRA_CREDENTIALS
argument_list|)
operator|.
name|to
argument_list|(
name|mockResult
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|verifyLastComment ()
specifier|public
name|void
name|verifyLastComment
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|comment
argument_list|,
name|ISSUE_KEY
argument_list|,
name|backendIssue
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Issue
name|issue
init|=
name|issueRestClient
operator|.
name|getIssue
argument_list|(
name|backendIssue
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|claim
argument_list|()
decl_stmt|;
name|String
name|lastComment
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|issue
operator|.
name|getComments
argument_list|()
control|)
block|{
name|lastComment
operator|=
name|c
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|comment
argument_list|,
name|lastComment
argument_list|)
expr_stmt|;
name|mockResult
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockResult
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

