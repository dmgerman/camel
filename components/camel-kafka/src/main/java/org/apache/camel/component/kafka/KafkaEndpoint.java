begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kafka
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|message
operator|.
name|MessageAndMetadata
import|;
end_import

begin_comment
comment|/**  * @author Stephen Samuel  */
end_comment

begin_class
DECL|class|KafkaEndpoint
specifier|public
class|class
name|KafkaEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|brokers
specifier|private
name|String
name|brokers
decl_stmt|;
DECL|field|zookeeperHost
specifier|private
name|String
name|zookeeperHost
decl_stmt|;
DECL|field|zookeeperPort
specifier|private
name|int
name|zookeeperPort
decl_stmt|;
DECL|field|groupId
specifier|private
name|String
name|groupId
decl_stmt|;
DECL|field|consumerStreams
specifier|private
name|int
name|consumerStreams
init|=
literal|10
decl_stmt|;
DECL|field|partitioner
specifier|private
name|String
name|partitioner
decl_stmt|;
DECL|field|topic
specifier|private
name|String
name|topic
decl_stmt|;
DECL|method|getZookeeperHost ()
specifier|public
name|String
name|getZookeeperHost
parameter_list|()
block|{
return|return
name|zookeeperHost
return|;
block|}
DECL|method|setZookeeperHost (String zookeeperHost)
specifier|public
name|void
name|setZookeeperHost
parameter_list|(
name|String
name|zookeeperHost
parameter_list|)
block|{
name|this
operator|.
name|zookeeperHost
operator|=
name|zookeeperHost
expr_stmt|;
block|}
DECL|method|getZookeeperPort ()
specifier|public
name|int
name|getZookeeperPort
parameter_list|()
block|{
return|return
name|zookeeperPort
return|;
block|}
DECL|method|setZookeeperPort (int zookeeperPort)
specifier|public
name|void
name|setZookeeperPort
parameter_list|(
name|int
name|zookeeperPort
parameter_list|)
block|{
name|this
operator|.
name|zookeeperPort
operator|=
name|zookeeperPort
expr_stmt|;
block|}
DECL|method|getGroupId ()
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|groupId
return|;
block|}
DECL|method|setGroupId (String groupId)
specifier|public
name|void
name|setGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
block|}
DECL|method|getPartitioner ()
specifier|public
name|String
name|getPartitioner
parameter_list|()
block|{
return|return
name|partitioner
return|;
block|}
DECL|method|setPartitioner (String partitioner)
specifier|public
name|void
name|setPartitioner
parameter_list|(
name|String
name|partitioner
parameter_list|)
block|{
name|this
operator|.
name|partitioner
operator|=
name|partitioner
expr_stmt|;
block|}
DECL|method|getTopic ()
specifier|public
name|String
name|getTopic
parameter_list|()
block|{
return|return
name|topic
return|;
block|}
DECL|method|setTopic (String topic)
specifier|public
name|void
name|setTopic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|this
operator|.
name|topic
operator|=
name|topic
expr_stmt|;
block|}
DECL|method|getBrokers ()
specifier|public
name|String
name|getBrokers
parameter_list|()
block|{
return|return
name|brokers
return|;
block|}
DECL|method|getConsumerStreams ()
specifier|public
name|int
name|getConsumerStreams
parameter_list|()
block|{
return|return
name|consumerStreams
return|;
block|}
DECL|method|setConsumerStreams (int consumerStreams)
specifier|public
name|void
name|setConsumerStreams
parameter_list|(
name|int
name|consumerStreams
parameter_list|)
block|{
name|this
operator|.
name|consumerStreams
operator|=
name|consumerStreams
expr_stmt|;
block|}
DECL|method|KafkaEndpoint ()
specifier|public
name|KafkaEndpoint
parameter_list|()
block|{     }
DECL|method|KafkaEndpoint (String endpointUri, String remaining, KafkaComponent component)
specifier|public
name|KafkaEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|KafkaComponent
name|component
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|brokers
operator|=
name|remaining
operator|.
name|split
argument_list|(
literal|"\\?"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|createKafkaExchange (MessageAndMetadata<byte[], byte[]> mm)
specifier|public
name|Exchange
name|createKafkaExchange
parameter_list|(
name|MessageAndMetadata
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|mm
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|getExchangePattern
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
operator|new
name|DefaultMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|KafkaConstants
operator|.
name|PARTITION
argument_list|,
name|mm
operator|.
name|partition
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|KafkaConstants
operator|.
name|TOPIC
argument_list|,
name|mm
operator|.
name|topic
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|KafkaConstants
operator|.
name|KEY
argument_list|,
operator|new
name|String
argument_list|(
name|mm
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|KafkaConsumer
name|consumer
init|=
operator|new
name|KafkaConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|KafkaProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|createExecutor ()
specifier|public
name|ThreadPoolExecutor
name|createExecutor
parameter_list|()
block|{
return|return
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|getConsumerStreams
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

