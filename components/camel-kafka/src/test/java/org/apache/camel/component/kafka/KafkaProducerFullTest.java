begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kafka
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|consumer
operator|.
name|ConsumerConfig
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|consumer
operator|.
name|ConsumerIterator
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|consumer
operator|.
name|KafkaStream
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|javaapi
operator|.
name|consumer
operator|.
name|ConsumerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|KafkaProducerFullTest
specifier|public
class|class
name|KafkaProducerFullTest
extends|extends
name|BaseEmbeddedKafkaTest
block|{
DECL|field|TOPIC_STRINGS
specifier|private
specifier|static
specifier|final
name|String
name|TOPIC_STRINGS
init|=
literal|"test"
decl_stmt|;
DECL|field|TOPIC_STRINGS_IN_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|TOPIC_STRINGS_IN_HEADER
init|=
literal|"testHeader"
decl_stmt|;
DECL|field|TOPIC_BYTES
specifier|private
specifier|static
specifier|final
name|String
name|TOPIC_BYTES
init|=
literal|"testBytes"
decl_stmt|;
DECL|field|TOPIC_BYTES_IN_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|TOPIC_BYTES_IN_HEADER
init|=
literal|"testBytesHeader"
decl_stmt|;
DECL|field|GROUP_STRINGS
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_STRINGS
init|=
literal|"groupStrings"
decl_stmt|;
DECL|field|GROUP_BYTES
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_BYTES
init|=
literal|"groupStrings"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KafkaProducerFullTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|stringsConsumerConn
specifier|private
specifier|static
name|ConsumerConnector
name|stringsConsumerConn
decl_stmt|;
DECL|field|bytesConsumerConn
specifier|private
specifier|static
name|ConsumerConnector
name|bytesConsumerConn
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"kafka:localhost:{{karfkaPort}}?topic="
operator|+
name|TOPIC_STRINGS
operator|+
literal|"&partitioner=org.apache.camel.component.kafka.SimplePartitioner&serializerClass=kafka.serializer.StringEncoder"
operator|+
literal|"&requestRequiredAcks=-1"
argument_list|)
DECL|field|toStrings
specifier|private
name|Endpoint
name|toStrings
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"kafka:localhost:{{karfkaPort}}?topic="
operator|+
name|TOPIC_BYTES
operator|+
literal|"&requestRequiredAcks=-1"
argument_list|)
DECL|field|toBytes
specifier|private
name|Endpoint
name|toBytes
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:startStrings"
argument_list|)
DECL|field|stringsTemplate
specifier|private
name|ProducerTemplate
name|stringsTemplate
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:startBytes"
argument_list|)
DECL|field|bytesTemplate
specifier|private
name|ProducerTemplate
name|bytesTemplate
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|before ()
specifier|public
specifier|static
name|void
name|before
parameter_list|()
block|{
name|Properties
name|stringsProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|stringsProps
operator|.
name|put
argument_list|(
literal|"zookeeper.connect"
argument_list|,
literal|"localhost:"
operator|+
name|getZookeeperPort
argument_list|()
argument_list|)
expr_stmt|;
name|stringsProps
operator|.
name|put
argument_list|(
literal|"group.id"
argument_list|,
name|GROUP_STRINGS
argument_list|)
expr_stmt|;
name|stringsProps
operator|.
name|put
argument_list|(
literal|"zookeeper.session.timeout.ms"
argument_list|,
literal|"6000"
argument_list|)
expr_stmt|;
name|stringsProps
operator|.
name|put
argument_list|(
literal|"zookeeper.connectiontimeout.ms"
argument_list|,
literal|"12000"
argument_list|)
expr_stmt|;
name|stringsProps
operator|.
name|put
argument_list|(
literal|"zookeeper.sync.time.ms"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|stringsProps
operator|.
name|put
argument_list|(
literal|"auto.commit.interval.ms"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|stringsProps
operator|.
name|put
argument_list|(
literal|"auto.offset.reset"
argument_list|,
literal|"smallest"
argument_list|)
expr_stmt|;
name|stringsConsumerConn
operator|=
name|kafka
operator|.
name|consumer
operator|.
name|Consumer
operator|.
name|createJavaConsumerConnector
argument_list|(
operator|new
name|ConsumerConfig
argument_list|(
name|stringsProps
argument_list|)
argument_list|)
expr_stmt|;
name|Properties
name|bytesProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|bytesProps
operator|.
name|putAll
argument_list|(
name|stringsProps
argument_list|)
expr_stmt|;
name|bytesProps
operator|.
name|put
argument_list|(
literal|"group.id"
argument_list|,
name|GROUP_BYTES
argument_list|)
expr_stmt|;
name|bytesConsumerConn
operator|=
name|kafka
operator|.
name|consumer
operator|.
name|Consumer
operator|.
name|createJavaConsumerConnector
argument_list|(
operator|new
name|ConsumerConfig
argument_list|(
name|bytesProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after ()
specifier|public
specifier|static
name|void
name|after
parameter_list|()
block|{
name|stringsConsumerConn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|bytesConsumerConn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilders ()
specifier|protected
name|RouteBuilder
index|[]
name|createRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:startStrings"
argument_list|)
operator|.
name|to
argument_list|(
name|toStrings
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:startBytes"
argument_list|)
operator|.
name|to
argument_list|(
name|toBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Test
DECL|method|producedStringMessageIsReceivedByKafka ()
specifier|public
name|void
name|producedStringMessageIsReceivedByKafka
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|int
name|messageInTopic
init|=
literal|10
decl_stmt|;
name|int
name|messageInOtherTopic
init|=
literal|5
decl_stmt|;
name|CountDownLatch
name|messagesLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|messageInTopic
operator|+
name|messageInOtherTopic
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|topicCountMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|topicCountMap
operator|.
name|put
argument_list|(
name|TOPIC_STRINGS
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|topicCountMap
operator|.
name|put
argument_list|(
name|TOPIC_STRINGS_IN_HEADER
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|createKafkaMessageConsumer
argument_list|(
name|stringsConsumerConn
argument_list|,
name|TOPIC_STRINGS
argument_list|,
name|TOPIC_STRINGS_IN_HEADER
argument_list|,
name|messagesLatch
argument_list|,
name|topicCountMap
argument_list|)
expr_stmt|;
name|sendMessagesInRoute
argument_list|(
name|messageInTopic
argument_list|,
name|stringsTemplate
argument_list|,
literal|"IT test message"
argument_list|,
name|KafkaConstants
operator|.
name|PARTITION_KEY
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sendMessagesInRoute
argument_list|(
name|messageInOtherTopic
argument_list|,
name|stringsTemplate
argument_list|,
literal|"IT test message in other topic"
argument_list|,
name|KafkaConstants
operator|.
name|PARTITION_KEY
argument_list|,
literal|"1"
argument_list|,
name|KafkaConstants
operator|.
name|TOPIC
argument_list|,
name|TOPIC_STRINGS_IN_HEADER
argument_list|)
expr_stmt|;
name|boolean
name|allMessagesReceived
init|=
name|messagesLatch
operator|.
name|await
argument_list|(
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not all messages were published to the kafka topics. Not received: "
operator|+
name|messagesLatch
operator|.
name|getCount
argument_list|()
argument_list|,
name|allMessagesReceived
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|producedBytesMessageIsReceivedByKafka ()
specifier|public
name|void
name|producedBytesMessageIsReceivedByKafka
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|int
name|messageInTopic
init|=
literal|10
decl_stmt|;
name|int
name|messageInOtherTopic
init|=
literal|5
decl_stmt|;
name|CountDownLatch
name|messagesLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|messageInTopic
operator|+
name|messageInOtherTopic
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|topicCountMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|topicCountMap
operator|.
name|put
argument_list|(
name|TOPIC_BYTES
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|topicCountMap
operator|.
name|put
argument_list|(
name|TOPIC_BYTES_IN_HEADER
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|createKafkaMessageConsumer
argument_list|(
name|bytesConsumerConn
argument_list|,
name|TOPIC_BYTES
argument_list|,
name|TOPIC_BYTES_IN_HEADER
argument_list|,
name|messagesLatch
argument_list|,
name|topicCountMap
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inTopicHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inTopicHeaders
operator|.
name|put
argument_list|(
name|KafkaConstants
operator|.
name|PARTITION_KEY
argument_list|,
literal|"1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessagesInRoute
argument_list|(
name|messageInTopic
argument_list|,
name|bytesTemplate
argument_list|,
literal|"IT test message"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|inTopicHeaders
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|otherTopicHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|otherTopicHeaders
operator|.
name|put
argument_list|(
name|KafkaConstants
operator|.
name|PARTITION_KEY
argument_list|,
literal|"1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|otherTopicHeaders
operator|.
name|put
argument_list|(
name|KafkaConstants
operator|.
name|TOPIC
argument_list|,
name|TOPIC_BYTES_IN_HEADER
argument_list|)
expr_stmt|;
name|sendMessagesInRoute
argument_list|(
name|messageInOtherTopic
argument_list|,
name|bytesTemplate
argument_list|,
literal|"IT test message in other topic"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|otherTopicHeaders
argument_list|)
expr_stmt|;
name|boolean
name|allMessagesReceived
init|=
name|messagesLatch
operator|.
name|await
argument_list|(
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not all messages were published to the kafka topics. Not received: "
operator|+
name|messagesLatch
operator|.
name|getCount
argument_list|()
argument_list|,
name|allMessagesReceived
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createKafkaMessageConsumer (ConsumerConnector consumerConn, String topic, String topicInHeader, CountDownLatch messagesLatch, Map<String, Integer> topicCountMap)
specifier|private
name|void
name|createKafkaMessageConsumer
parameter_list|(
name|ConsumerConnector
name|consumerConn
parameter_list|,
name|String
name|topic
parameter_list|,
name|String
name|topicInHeader
parameter_list|,
name|CountDownLatch
name|messagesLatch
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|topicCountMap
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|KafkaStream
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|>
name|consumerMap
init|=
name|consumerConn
operator|.
name|createMessageStreams
argument_list|(
name|topicCountMap
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|KafkaStream
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|stream
range|:
name|consumerMap
operator|.
name|get
argument_list|(
name|topic
argument_list|)
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|KakfaTopicConsumer
argument_list|(
name|stream
argument_list|,
name|messagesLatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|KafkaStream
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|stream
range|:
name|consumerMap
operator|.
name|get
argument_list|(
name|topicInHeader
argument_list|)
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|KakfaTopicConsumer
argument_list|(
name|stream
argument_list|,
name|messagesLatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|sendMessagesInRoute (int messages, ProducerTemplate template, Object bodyOther, String... headersWithValue)
specifier|private
name|void
name|sendMessagesInRoute
parameter_list|(
name|int
name|messages
parameter_list|,
name|ProducerTemplate
name|template
parameter_list|,
name|Object
name|bodyOther
parameter_list|,
name|String
modifier|...
name|headersWithValue
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headerMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headersWithValue
operator|.
name|length
condition|;
name|i
operator|=
name|i
operator|+
literal|2
control|)
block|{
name|headerMap
operator|.
name|put
argument_list|(
name|headersWithValue
index|[
name|i
index|]
argument_list|,
name|headersWithValue
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|sendMessagesInRoute
argument_list|(
name|messages
argument_list|,
name|template
argument_list|,
name|bodyOther
argument_list|,
name|headerMap
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|sendMessagesInRoute (int messages, ProducerTemplate template, Object bodyOther, Map<String, Object> headerMap)
specifier|private
name|void
name|sendMessagesInRoute
parameter_list|(
name|int
name|messages
parameter_list|,
name|ProducerTemplate
name|template
parameter_list|,
name|Object
name|bodyOther
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headerMap
parameter_list|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|messages
condition|;
name|k
operator|++
control|)
block|{
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
name|bodyOther
argument_list|,
name|headerMap
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_class
DECL|class|KakfaTopicConsumer
specifier|private
specifier|static
class|class
name|KakfaTopicConsumer
implements|implements
name|Runnable
block|{
DECL|field|stream
specifier|private
specifier|final
name|KafkaStream
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|stream
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|KakfaTopicConsumer (KafkaStream<byte[], byte[]> stream, CountDownLatch latch)
specifier|public
name|KakfaTopicConsumer
parameter_list|(
name|KafkaStream
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|stream
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ConsumerIterator
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|it
init|=
name|stream
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
operator|new
name|String
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Get the message"
operator|+
name|msg
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

unit|}
end_unit

