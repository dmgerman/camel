begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.kafka
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|javaapi
operator|.
name|producer
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|producer
operator|.
name|KeyedMessage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * @author Stephen Samuel  */
end_comment

begin_class
DECL|class|KafkaProducerTest
specifier|public
class|class
name|KafkaProducerTest
block|{
DECL|field|producer
specifier|private
name|KafkaProducer
name|producer
decl_stmt|;
DECL|field|endpoint
specifier|private
name|KafkaEndpoint
name|endpoint
decl_stmt|;
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|in
specifier|private
name|Message
name|in
init|=
operator|new
name|DefaultMessage
argument_list|()
decl_stmt|;
DECL|method|KafkaProducerTest ()
specifier|public
name|KafkaProducerTest
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|ClassNotFoundException
throws|,
name|URISyntaxException
block|{
name|endpoint
operator|=
operator|new
name|KafkaEndpoint
argument_list|(
literal|"kafka:broker1:1234,broker2:4567?topic=sometopic"
argument_list|,
literal|"broker1:1234,"
operator|+
literal|"broker2:4567?topic=sometopic"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|producer
operator|=
operator|new
name|KafkaProducer
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|producer
operator|.
name|producer
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Producer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertyBuilder ()
specifier|public
name|void
name|testPropertyBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setPartitioner
argument_list|(
literal|"com.sksamuel.someclass"
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|producer
operator|.
name|getProps
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"com.sksamuel.someclass"
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
literal|"partitioner.class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker1:1234,broker2:4567"
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
literal|"metadata.broker.list"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processSendsMesssage ()
specifier|public
name|void
name|processSendsMesssage
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setTopic
argument_list|(
literal|"sometopic"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|KafkaConstants
operator|.
name|PARTITION_KEY
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|producer
operator|.
name|producer
argument_list|)
operator|.
name|send
argument_list|(
name|Matchers
operator|.
name|any
argument_list|(
name|KeyedMessage
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CamelException
operator|.
name|class
argument_list|)
DECL|method|processRequiresPartitionHeader ()
specifier|public
name|void
name|processRequiresPartitionHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setTopic
argument_list|(
literal|"sometopic"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processSendsMesssageWithPartitionKeyHeader ()
specifier|public
name|void
name|processSendsMesssageWithPartitionKeyHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setTopic
argument_list|(
literal|"sometopic"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|KafkaConstants
operator|.
name|PARTITION_KEY
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|KeyedMessage
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|KeyedMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|producer
operator|.
name|producer
argument_list|)
operator|.
name|send
argument_list|(
name|captor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|captor
operator|.
name|getValue
argument_list|()
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sometopic"
argument_list|,
name|captor
operator|.
name|getValue
argument_list|()
operator|.
name|topic
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

