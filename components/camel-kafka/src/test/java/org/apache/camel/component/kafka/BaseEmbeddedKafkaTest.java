begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kafka
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
operator|.
name|embedded
operator|.
name|EmbeddedKafkaCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
operator|.
name|embedded
operator|.
name|EmbeddedZookeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
DECL|class|BaseEmbeddedKafkaTest
specifier|public
class|class
name|BaseEmbeddedKafkaTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|embeddedZookeeper
specifier|static
name|EmbeddedZookeeper
name|embeddedZookeeper
decl_stmt|;
DECL|field|embeddedKafkaCluster
specifier|static
name|EmbeddedKafkaCluster
name|embeddedKafkaCluster
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass ()
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|embeddedZookeeper
operator|=
operator|new
name|EmbeddedZookeeper
argument_list|(
literal|2181
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|kafkaPorts
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// -1 for any available port
name|kafkaPorts
operator|.
name|add
argument_list|(
literal|9092
argument_list|)
expr_stmt|;
name|embeddedKafkaCluster
operator|=
operator|new
name|EmbeddedKafkaCluster
argument_list|(
name|embeddedZookeeper
operator|.
name|getConnection
argument_list|()
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|,
name|kafkaPorts
argument_list|)
expr_stmt|;
try|try
block|{
name|embeddedZookeeper
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"### Embedded Zookeeper connection: "
operator|+
name|embeddedZookeeper
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|embeddedKafkaCluster
operator|.
name|startup
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"### Embedded Kafka cluster broker list: "
operator|+
name|embeddedKafkaCluster
operator|.
name|getBrokerList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass ()
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|embeddedKafkaCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|embeddedZookeeper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

