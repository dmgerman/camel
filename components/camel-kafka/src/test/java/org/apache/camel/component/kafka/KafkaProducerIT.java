begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kafka
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|consumer
operator|.
name|ConsumerConfig
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|consumer
operator|.
name|ConsumerIterator
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|consumer
operator|.
name|KafkaStream
import|;
end_import

begin_import
import|import
name|kafka
operator|.
name|javaapi
operator|.
name|consumer
operator|.
name|ConsumerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * The Producer IT tests require a Kafka broker running on 9092 and a zookeeper instance running on 2181.  * The broker must have a topic called test created.  */
end_comment

begin_class
DECL|class|KafkaProducerIT
specifier|public
class|class
name|KafkaProducerIT
extends|extends
name|CamelTestSupport
block|{
DECL|field|TOPIC
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC
init|=
literal|"test"
decl_stmt|;
DECL|field|TOPIC_IN_HEADER
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC_IN_HEADER
init|=
literal|"testHeader"
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"kafka:localhost:9092?topic="
operator|+
name|TOPIC
operator|+
literal|"&partitioner=org.apache.camel.component.kafka.SimplePartitioner"
argument_list|)
DECL|field|to
specifier|private
name|Endpoint
name|to
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:start"
argument_list|)
DECL|field|template
specifier|private
name|ProducerTemplate
name|template
decl_stmt|;
DECL|field|kafkaConsumer
specifier|private
name|ConsumerConnector
name|kafkaConsumer
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"zookeeper.connect"
argument_list|,
literal|"localhost:2181"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"group.id"
argument_list|,
name|KafkaConstants
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"zookeeper.session.timeout.ms"
argument_list|,
literal|"400"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"zookeeper.sync.time.ms"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"auto.commit.interval.ms"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|kafkaConsumer
operator|=
name|kafka
operator|.
name|consumer
operator|.
name|Consumer
operator|.
name|createJavaConsumerConnector
argument_list|(
operator|new
name|ConsumerConfig
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
name|kafkaConsumer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|producedMessageIsReceivedByKafka ()
specifier|public
name|void
name|producedMessageIsReceivedByKafka
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|int
name|messageInTopic
init|=
literal|10
decl_stmt|;
name|int
name|messageInOtherTopic
init|=
literal|5
decl_stmt|;
name|CountDownLatch
name|messagesLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|messageInTopic
operator|+
name|messageInOtherTopic
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|topicCountMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|topicCountMap
operator|.
name|put
argument_list|(
name|TOPIC
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|topicCountMap
operator|.
name|put
argument_list|(
name|TOPIC_IN_HEADER
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|createKafkaMessageConsumer
argument_list|(
name|messagesLatch
argument_list|,
name|topicCountMap
argument_list|)
expr_stmt|;
name|sendMessagesInRoute
argument_list|(
name|messageInTopic
argument_list|,
literal|"IT test message"
argument_list|,
name|KafkaConstants
operator|.
name|PARTITION_KEY
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sendMessagesInRoute
argument_list|(
name|messageInOtherTopic
argument_list|,
literal|"IT test message in other topic"
argument_list|,
name|KafkaConstants
operator|.
name|PARTITION_KEY
argument_list|,
literal|"1"
argument_list|,
name|KafkaConstants
operator|.
name|TOPIC
argument_list|,
name|TOPIC_IN_HEADER
argument_list|)
expr_stmt|;
name|boolean
name|allMessagesReceived
init|=
name|messagesLatch
operator|.
name|await
argument_list|(
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not all messages were published to the kafka topics"
argument_list|,
name|allMessagesReceived
argument_list|)
expr_stmt|;
block|}
DECL|method|createKafkaMessageConsumer (CountDownLatch messagesLatch, Map<String, Integer> topicCountMap)
specifier|private
name|void
name|createKafkaMessageConsumer
parameter_list|(
name|CountDownLatch
name|messagesLatch
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|topicCountMap
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|KafkaStream
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|>
name|consumerMap
init|=
name|kafkaConsumer
operator|.
name|createMessageStreams
argument_list|(
name|topicCountMap
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|KafkaStream
name|stream
range|:
name|consumerMap
operator|.
name|get
argument_list|(
name|TOPIC
argument_list|)
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|KakfaTopicConsumer
argument_list|(
name|stream
argument_list|,
name|messagesLatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|KafkaStream
name|stream
range|:
name|consumerMap
operator|.
name|get
argument_list|(
name|TOPIC_IN_HEADER
argument_list|)
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|KakfaTopicConsumer
argument_list|(
name|stream
argument_list|,
name|messagesLatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendMessagesInRoute (int messageInOtherTopic, String bodyOther, String... headersWithValue)
specifier|private
name|void
name|sendMessagesInRoute
parameter_list|(
name|int
name|messageInOtherTopic
parameter_list|,
name|String
name|bodyOther
parameter_list|,
name|String
modifier|...
name|headersWithValue
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headerMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headersWithValue
operator|.
name|length
condition|;
name|i
operator|=
name|i
operator|+
literal|2
control|)
block|{
name|headerMap
operator|.
name|put
argument_list|(
name|headersWithValue
index|[
name|i
index|]
argument_list|,
name|headersWithValue
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|messageInOtherTopic
condition|;
name|k
operator|++
control|)
block|{
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
name|bodyOther
argument_list|,
name|headerMap
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KakfaTopicConsumer
specifier|private
specifier|static
class|class
name|KakfaTopicConsumer
implements|implements
name|Runnable
block|{
DECL|field|stream
specifier|private
specifier|final
name|KafkaStream
name|stream
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|KakfaTopicConsumer (KafkaStream stream, CountDownLatch latch)
specifier|public
name|KakfaTopicConsumer
parameter_list|(
name|KafkaStream
name|stream
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ConsumerIterator
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|it
init|=
name|stream
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
operator|new
name|String
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|()
argument_list|)
decl_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

