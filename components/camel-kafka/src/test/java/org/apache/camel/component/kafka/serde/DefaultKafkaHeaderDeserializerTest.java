begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kafka.serde
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|DefaultKafkaHeaderDeserializerTest
specifier|public
class|class
name|DefaultKafkaHeaderDeserializerTest
block|{
DECL|field|deserializer
specifier|private
name|KafkaHeaderDeserializer
name|deserializer
init|=
operator|new
name|DefaultKafkaHeaderDeserializer
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|shouldDeserializeAsIs ()
specifier|public
name|void
name|shouldDeserializeAsIs
parameter_list|()
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|4
block|,
operator|-
literal|2
block|,
literal|54
block|,
literal|126
block|}
decl_stmt|;
name|Object
name|deserializedValue
init|=
name|deserializer
operator|.
name|deserialize
argument_list|(
literal|"someKey"
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deserializedValue
argument_list|,
name|CoreMatchers
operator|.
name|instanceOf
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|deserializedValue
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

