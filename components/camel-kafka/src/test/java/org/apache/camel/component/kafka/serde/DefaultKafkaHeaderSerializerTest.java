begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kafka.serde
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|DefaultKafkaHeaderSerializerTest
specifier|public
class|class
name|DefaultKafkaHeaderSerializerTest
block|{
DECL|field|serializer
specifier|private
name|KafkaHeaderSerializer
name|serializer
init|=
operator|new
name|DefaultKafkaHeaderSerializer
argument_list|()
decl_stmt|;
DECL|field|value
specifier|private
name|Object
name|value
decl_stmt|;
DECL|field|expectedResult
specifier|private
name|byte
index|[]
name|expectedResult
decl_stmt|;
DECL|method|DefaultKafkaHeaderSerializerTest (Object value, byte[] expectedResult)
specifier|public
name|DefaultKafkaHeaderSerializerTest
parameter_list|(
name|Object
name|value
parameter_list|,
name|byte
index|[]
name|expectedResult
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|expectedResult
operator|=
name|expectedResult
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|serialize ()
specifier|public
name|void
name|serialize
parameter_list|()
block|{
name|byte
index|[]
name|result
init|=
name|serializer
operator|.
name|serialize
argument_list|(
literal|"someKey"
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|primeNumbers ()
specifier|public
specifier|static
name|Collection
name|primeNumbers
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|Boolean
operator|.
name|TRUE
block|,
literal|"true"
operator|.
name|getBytes
argument_list|()
block|}
block|,
comment|//boolean
block|{
operator|-
literal|12
block|,
operator|new
name|byte
index|[]
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|12
block|}
block|}
block|,
comment|//integer
block|{
literal|19L
block|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|19
block|}
block|}
block|,
comment|//long
block|{
literal|22.0D
block|,
operator|new
name|byte
index|[]
block|{
literal|64
block|,
literal|54
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|//double
block|{
literal|"someValue"
block|,
literal|"someValue"
operator|.
name|getBytes
argument_list|()
block|}
block|,
comment|//string
block|{
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|2
block|,
operator|-
literal|43
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|2
block|,
operator|-
literal|43
block|}
block|}
block|,
comment|//byte[]
block|{
literal|null
block|,
literal|null
block|}
block|,
comment|//null
block|{
operator|new
name|Object
argument_list|()
block|,
literal|null
block|}
comment|//unknown type
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

