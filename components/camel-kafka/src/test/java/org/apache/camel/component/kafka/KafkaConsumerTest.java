begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kafka
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|KafkaConsumerTest
specifier|public
class|class
name|KafkaConsumerTest
block|{
DECL|field|endpoint
specifier|private
name|KafkaEndpoint
name|endpoint
init|=
name|mock
argument_list|(
name|KafkaEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|consumerRequiresBootstrapServers ()
specifier|public
name|void
name|consumerRequiresBootstrapServers
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"groupOne"
argument_list|)
expr_stmt|;
operator|new
name|KafkaConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|consumerRequiresGroupId ()
specifier|public
name|void
name|consumerRequiresGroupId
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|getBrokers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"localhost:1234"
argument_list|)
expr_stmt|;
operator|new
name|KafkaConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|consumerOnlyRequiresBootstrapServersAndGroupId ()
specifier|public
name|void
name|consumerOnlyRequiresBootstrapServersAndGroupId
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"groupOne"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|getBrokers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"localhost:2181"
argument_list|)
expr_stmt|;
operator|new
name|KafkaConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

