begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.iam
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|iam
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|AmazonIdentityManagement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|AddUserToGroupRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|AddUserToGroupResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|CreateAccessKeyRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|CreateAccessKeyResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|CreateGroupRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|CreateGroupResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|CreateUserRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|CreateUserResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|DeleteAccessKeyRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|DeleteAccessKeyResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|DeleteGroupRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|DeleteGroupResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|DeleteUserRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|DeleteUserResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|GetUserRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|GetUserResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|ListAccessKeysResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|ListGroupsResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|ListUsersResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|RemoveUserFromGroupRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|RemoveUserFromGroupResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|UpdateAccessKeyRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|identitymanagement
operator|.
name|model
operator|.
name|UpdateAccessKeyResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * A Producer which sends messages to the Amazon IAM Service  *<a href="http://aws.amazon.com/iam/">AWS IAM</a>  */
end_comment

begin_class
DECL|class|IAMProducer
specifier|public
class|class
name|IAMProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|iamProducerToString
specifier|private
specifier|transient
name|String
name|iamProducerToString
decl_stmt|;
DECL|method|IAMProducer (Endpoint endpoint)
specifier|public
name|IAMProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|determineOperation
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
case|case
name|listAccessKeys
case|:
name|listAccessKeys
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|createAccessKey
case|:
name|createAccessKey
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|deleteAccessKey
case|:
name|deleteAccessKey
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|updateAccessKey
case|:
name|updateAccessKey
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|createUser
case|:
name|createUser
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|deleteUser
case|:
name|deleteUser
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|getUser
case|:
name|getUser
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|listUsers
case|:
name|listUsers
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|createGroup
case|:
name|createGroup
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|deleteGroup
case|:
name|deleteGroup
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|listGroups
case|:
name|listGroups
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|addUserToGroup
case|:
name|addUserToGroup
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|removeUserFromGroup
case|:
name|removeUserFromGroup
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getIamClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation"
argument_list|)
throw|;
block|}
block|}
DECL|method|determineOperation (Exchange exchange)
specifier|private
name|IAMOperations
name|determineOperation
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|IAMOperations
name|operation
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|OPERATION
argument_list|,
name|IAMOperations
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getOperation
argument_list|()
expr_stmt|;
block|}
return|return
name|operation
return|;
block|}
DECL|method|getConfiguration ()
specifier|protected
name|IAMConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|iamProducerToString
operator|==
literal|null
condition|)
block|{
name|iamProducerToString
operator|=
literal|"IAMProducer["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|iamProducerToString
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|IAMEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|IAMEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|listAccessKeys (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|listAccessKeys
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|ListAccessKeysResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|listAccessKeys
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"List Access Keys command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|createUser (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|createUser
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|CreateUserRequest
name|request
init|=
operator|new
name|CreateUserRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User Name must be specified"
argument_list|)
throw|;
block|}
name|CreateUserResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|createUser
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Create user command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteUser (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|deleteUser
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|DeleteUserRequest
name|request
init|=
operator|new
name|DeleteUserRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User Name must be specified"
argument_list|)
throw|;
block|}
name|DeleteUserResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|deleteUser
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Delete user command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|getUser (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|getUser
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|GetUserRequest
name|request
init|=
operator|new
name|GetUserRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User Name must be specified"
argument_list|)
throw|;
block|}
name|GetUserResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|getUser
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"get user command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|listUsers (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|listUsers
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|ListUsersResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|listUsers
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"List users command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|createAccessKey (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|createAccessKey
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|CreateAccessKeyRequest
name|request
init|=
operator|new
name|CreateAccessKeyRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
name|CreateAccessKeyResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|createAccessKey
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Create Access Key command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteAccessKey (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|deleteAccessKey
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|DeleteAccessKeyRequest
name|request
init|=
operator|new
name|DeleteAccessKeyRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|ACCESS_KEY_ID
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|accessKeyId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|ACCESS_KEY_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withAccessKeyId
argument_list|(
name|accessKeyId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Key Id must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
name|DeleteAccessKeyResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|deleteAccessKey
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Delete Access Key command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|updateAccessKey (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|updateAccessKey
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|UpdateAccessKeyRequest
name|request
init|=
operator|new
name|UpdateAccessKeyRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|ACCESS_KEY_ID
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|accessKeyId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|ACCESS_KEY_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withAccessKeyId
argument_list|(
name|accessKeyId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Key Id must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|ACCESS_KEY_STATUS
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|status
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|ACCESS_KEY_STATUS
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withStatus
argument_list|(
name|StatusType
operator|.
name|fromValue
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Access Key status must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
name|UpdateAccessKeyResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|updateAccessKey
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Update Access Key command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|createGroup (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|createGroup
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|CreateGroupRequest
name|request
init|=
operator|new
name|CreateGroupRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|groupName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withGroupName
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Group Name must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_PATH
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|groupPath
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_PATH
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withPath
argument_list|(
name|groupPath
argument_list|)
expr_stmt|;
block|}
name|CreateGroupResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|createGroup
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Create Group command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteGroup (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|deleteGroup
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|DeleteGroupRequest
name|request
init|=
operator|new
name|DeleteGroupRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|groupName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withGroupName
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Group Name must be specified"
argument_list|)
throw|;
block|}
name|DeleteGroupResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|deleteGroup
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Delete Group command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|listGroups (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|listGroups
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|ListGroupsResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|listGroups
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"List Groups command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|addUserToGroup (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|addUserToGroup
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|AddUserToGroupRequest
name|request
init|=
operator|new
name|AddUserToGroupRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|groupName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withGroupName
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Group Name must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User Name must be specified"
argument_list|)
throw|;
block|}
name|AddUserToGroupResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|addUserToGroup
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Add User To Group command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|removeUserFromGroup (AmazonIdentityManagement iamClient, Exchange exchange)
specifier|private
name|void
name|removeUserFromGroup
parameter_list|(
name|AmazonIdentityManagement
name|iamClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|RemoveUserFromGroupRequest
name|request
init|=
operator|new
name|RemoveUserFromGroupRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|groupName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|GROUP_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withGroupName
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Group Name must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|IAMConstants
operator|.
name|USERNAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User Name must be specified"
argument_list|)
throw|;
block|}
name|RemoveUserFromGroupResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|iamClient
operator|.
name|removeUserFromGroup
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Remove User From Group command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|getMessageForResponse (final Exchange exchange)
specifier|public
specifier|static
name|Message
name|getMessageForResponse
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
condition|)
block|{
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|out
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
return|return
name|exchange
operator|.
name|getIn
argument_list|()
return|;
block|}
block|}
end_class

end_unit

