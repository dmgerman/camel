begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jdbc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ResultSetIterator
specifier|public
class|class
name|ResultSetIterator
implements|implements
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResultSetIterator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connection
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
DECL|field|statement
specifier|private
specifier|final
name|Statement
name|statement
decl_stmt|;
DECL|field|resultSet
specifier|private
specifier|final
name|ResultSet
name|resultSet
decl_stmt|;
DECL|field|columns
specifier|private
specifier|final
name|Column
index|[]
name|columns
decl_stmt|;
DECL|field|useGetBytes
specifier|private
specifier|final
name|boolean
name|useGetBytes
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|ResultSetIterator (Connection conn, ResultSet resultSet, boolean isJDBC4, boolean useGetBytes)
specifier|public
name|ResultSetIterator
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|,
name|boolean
name|isJDBC4
parameter_list|,
name|boolean
name|useGetBytes
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|resultSet
operator|=
name|resultSet
expr_stmt|;
name|this
operator|.
name|statement
operator|=
name|this
operator|.
name|resultSet
operator|.
name|getStatement
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|useGetBytes
operator|=
name|useGetBytes
expr_stmt|;
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|columns
operator|=
operator|new
name|Column
index|[
name|metaData
operator|.
name|getColumnCount
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|columnNumber
init|=
name|i
operator|+
literal|1
decl_stmt|;
name|String
name|columnName
init|=
name|getColumnName
argument_list|(
name|metaData
argument_list|,
name|columnNumber
argument_list|,
name|isJDBC4
argument_list|)
decl_stmt|;
name|int
name|columnType
init|=
name|metaData
operator|.
name|getColumnType
argument_list|(
name|columnNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnType
operator|==
name|Types
operator|.
name|CLOB
operator|||
name|columnType
operator|==
name|Types
operator|.
name|BLOB
condition|)
block|{
name|columns
index|[
name|i
index|]
operator|=
operator|new
name|BlobColumn
argument_list|(
name|columnName
argument_list|,
name|columnNumber
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columns
index|[
name|i
index|]
operator|=
operator|new
name|DefaultColumn
argument_list|(
name|columnName
argument_list|,
name|columnNumber
argument_list|)
expr_stmt|;
block|}
block|}
name|loadNext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Column
name|column
range|:
name|columns
control|)
block|{
if|if
condition|(
name|useGetBytes
operator|&&
name|column
operator|instanceof
name|BlobColumn
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
operator|(
name|BlobColumn
operator|)
name|column
operator|)
operator|.
name|getBytes
argument_list|(
name|resultSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|put
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|column
operator|.
name|getValue
argument_list|(
name|resultSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|loadNext
argument_list|()
expr_stmt|;
return|return
name|row
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot process result"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot remove from a database result"
argument_list|)
throw|;
block|}
DECL|method|getColumnNames ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getColumnNames
parameter_list|()
block|{
comment|// New copy each time in order to ensure immutability
name|Set
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|columns
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Column
name|column
range|:
name|columns
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|columnNames
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|safeCloseResultSet
argument_list|()
expr_stmt|;
name|safeCloseStatement
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|closeConnection ()
specifier|public
name|void
name|closeConnection
parameter_list|()
block|{
name|safeCloseConnection
argument_list|()
expr_stmt|;
block|}
DECL|method|loadNext ()
specifier|private
name|void
name|loadNext
parameter_list|()
throws|throws
name|SQLException
block|{
name|boolean
name|hasNext
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|safeCloseResultSet ()
specifier|private
name|void
name|safeCloseResultSet
parameter_list|()
block|{
try|try
block|{
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error by closing result set: {}"
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|safeCloseStatement ()
specifier|private
name|void
name|safeCloseStatement
parameter_list|()
block|{
try|try
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error by closing statement: {}"
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|safeCloseConnection ()
specifier|private
name|void
name|safeCloseConnection
parameter_list|()
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error by closing connection: {}"
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getColumnName (ResultSetMetaData metaData, int columnNumber, boolean isJDBC4)
specifier|private
specifier|static
name|String
name|getColumnName
parameter_list|(
name|ResultSetMetaData
name|metaData
parameter_list|,
name|int
name|columnNumber
parameter_list|,
name|boolean
name|isJDBC4
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|isJDBC4
condition|)
block|{
comment|// jdbc 4 should use label to get the name
return|return
name|metaData
operator|.
name|getColumnLabel
argument_list|(
name|columnNumber
argument_list|)
return|;
block|}
else|else
block|{
comment|// jdbc 3 uses the label or name to get the name
try|try
block|{
return|return
name|metaData
operator|.
name|getColumnLabel
argument_list|(
name|columnNumber
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
return|return
name|metaData
operator|.
name|getColumnName
argument_list|(
name|columnNumber
argument_list|)
return|;
block|}
block|}
block|}
DECL|interface|Column
specifier|private
interface|interface
name|Column
block|{
DECL|method|getName ()
name|String
name|getName
parameter_list|()
function_decl|;
DECL|method|getValue (ResultSet resultSet)
name|Object
name|getValue
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
function_decl|;
block|}
DECL|class|DefaultColumn
specifier|private
specifier|static
specifier|final
class|class
name|DefaultColumn
implements|implements
name|Column
block|{
DECL|field|columnNumber
specifier|private
specifier|final
name|int
name|columnNumber
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|DefaultColumn (String name, int columnNumber)
specifier|private
name|DefaultColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|columnNumber
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|columnNumber
operator|=
name|columnNumber
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getValue (ResultSet resultSet)
specifier|public
name|Object
name|getValue
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|resultSet
operator|.
name|getObject
argument_list|(
name|columnNumber
argument_list|)
return|;
block|}
block|}
DECL|class|BlobColumn
specifier|private
specifier|static
specifier|final
class|class
name|BlobColumn
implements|implements
name|Column
block|{
DECL|field|columnNumber
specifier|private
specifier|final
name|int
name|columnNumber
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|BlobColumn (String name, int columnNumber)
specifier|private
name|BlobColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|columnNumber
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|columnNumber
operator|=
name|columnNumber
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getValue (ResultSet resultSet)
specifier|public
name|Object
name|getValue
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|resultSet
operator|.
name|getBlob
argument_list|(
name|columnNumber
argument_list|)
return|;
block|}
DECL|method|getBytes (ResultSet resultSet)
specifier|public
name|Object
name|getBytes
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|resultSet
operator|.
name|getBytes
argument_list|(
name|columnNumber
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

