begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jdbc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jdbc
operator|.
name|JdbcHelper
operator|.
name|newBeanInstance
import|;
end_import

begin_class
DECL|class|StreamListIterator
specifier|public
specifier|final
class|class
name|StreamListIterator
implements|implements
name|Iterator
block|{
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|outputClass
specifier|private
specifier|final
name|String
name|outputClass
decl_stmt|;
DECL|field|beanRowMapper
specifier|private
specifier|final
name|BeanRowMapper
name|beanRowMapper
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|Iterator
name|delegate
decl_stmt|;
DECL|method|StreamListIterator (CamelContext camelContext, String outputClass, BeanRowMapper beanRowMapper, Iterator delegate)
specifier|public
name|StreamListIterator
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|outputClass
parameter_list|,
name|BeanRowMapper
name|beanRowMapper
parameter_list|,
name|Iterator
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|outputClass
operator|=
name|outputClass
expr_stmt|;
name|this
operator|.
name|beanRowMapper
operator|=
name|beanRowMapper
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|Object
name|answer
decl_stmt|;
name|Map
name|row
init|=
operator|(
name|Map
operator|)
name|delegate
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
operator|&&
name|outputClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|newBeanInstance
argument_list|(
name|camelContext
argument_list|,
name|outputClass
argument_list|,
name|beanRowMapper
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|answer
operator|=
name|row
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|delegate
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forEachRemaining (Consumer action)
specifier|public
name|void
name|forEachRemaining
parameter_list|(
name|Consumer
name|action
parameter_list|)
block|{
name|delegate
operator|.
name|forEachRemaining
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

