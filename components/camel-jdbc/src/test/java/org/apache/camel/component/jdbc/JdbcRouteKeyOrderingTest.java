begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jdbc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests that key ordering for the Maps (rows) is preserved.  * @version  */
end_comment

begin_class
DECL|class|JdbcRouteKeyOrderingTest
specifier|public
class|class
name|JdbcRouteKeyOrderingTest
extends|extends
name|JdbcRouteTest
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testJdbcRoutes ()
specifier|public
name|void
name|testJdbcRoutes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first we create our exchange using the endpoint
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:hello"
argument_list|)
decl_stmt|;
comment|// repeat the test often enough to make sure preserved ordering is not a fluke
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
comment|// then we set the SQL on the in body
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"select * from customer order by ID"
argument_list|)
expr_stmt|;
comment|// now we send the exchange to the endpoint, and receives the response from Camel
name|Exchange
name|out
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
comment|// assertions of the response
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|out
operator|.
name|getOut
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rowList
init|=
name|out
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"out body could not be converted to an ArrayList - was: "
operator|+
name|out
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|,
name|rowList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rowList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
name|rowList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ordering not preserved "
operator|+
name|row
operator|.
name|keySet
argument_list|()
argument_list|,
name|isOrdered
argument_list|(
name|row
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|rowList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ordering not preserved "
operator|+
name|row
operator|.
name|keySet
argument_list|()
argument_list|,
name|isOrdered
argument_list|(
name|row
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param keySet (should have 2 items "ID"& "NAME")      * @return true if "ID" comes before "NAME", false otherwise      */
DECL|method|isOrdered (Set<String> keySet)
specifier|private
specifier|static
name|boolean
name|isOrdered
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"isOrdered() relies on \"ID\"& \"NAME\" being the only two fields"
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|keySet
operator|.
name|contains
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|keySet
operator|.
name|contains
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|2
argument_list|,
name|keySet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|keySet
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
literal|"ID"
operator|.
name|equals
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
operator|&&
literal|"NAME"
operator|.
name|equals
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

