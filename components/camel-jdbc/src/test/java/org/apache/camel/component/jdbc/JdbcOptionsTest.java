begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jdbc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|datasource
operator|.
name|DriverManagerDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|datasource
operator|.
name|SingleConnectionDataSource
import|;
end_import

begin_class
DECL|class|JdbcOptionsTest
specifier|public
class|class
name|JdbcOptionsTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|driverClass
specifier|private
name|String
name|driverClass
init|=
literal|"org.hsqldb.jdbcDriver"
decl_stmt|;
DECL|field|url
specifier|private
name|String
name|url
init|=
literal|"jdbc:hsqldb:mem:camel_jdbc"
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
init|=
literal|"sa"
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
init|=
literal|""
decl_stmt|;
DECL|field|ds
specifier|private
name|DataSource
name|ds
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
DECL|method|testReadSize ()
specifier|public
name|void
name|testReadSize
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"select * from customer"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
DECL|method|testInsertCommit ()
specifier|public
name|void
name|testInsertCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:resultTx"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// insert 2 recs into table
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:startTx"
argument_list|,
literal|"insert into customer values ('cust3', 'johnsmith');insert into customer values ('cust4', 'hkesler') "
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|String
name|body
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
comment|// now test to see that they were inserted and committed properly
name|MockEndpoint
name|mockTest
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:retrieve"
argument_list|)
decl_stmt|;
name|mockTest
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:retrieve"
argument_list|,
literal|"select * from customer"
argument_list|)
expr_stmt|;
name|mockTest
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|mockTest
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// both records were committed
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
DECL|method|testInsertRollback ()
specifier|public
name|void
name|testInsertRollback
parameter_list|()
throws|throws
name|Exception
block|{
comment|// insert 2 records
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:startTx"
argument_list|,
literal|"insert into customer values ('cust3', 'johnsmith');insert into customer values ('cust3', 'hkesler')"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a CamelExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Violation of unique constraint"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Test did not throw the expected Constraint Violation Exception"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check to see that they failed by getting a rec count from table
name|MockEndpoint
name|mockTest
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:retrieve"
argument_list|)
decl_stmt|;
name|mockTest
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:retrieve"
argument_list|,
literal|"select * from customer"
argument_list|)
expr_stmt|;
name|mockTest
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|mockTest
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// all recs failed to insert
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoDataSourceInRegistry ()
specifier|public
name|void
name|testNoDataSourceInRegistry
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"jdbc:xxx"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a ResolveEndpointFailedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResolveEndpointFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"registry entry called xxx of type javax.sql.DataSource must be specified"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testResettingAutoCommitOption ()
specifier|public
name|void
name|testResettingAutoCommitOption
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ds
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:retrieve"
argument_list|,
literal|"select * from customer"
argument_list|)
expr_stmt|;
name|connection
operator|=
name|ds
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|reg
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|reg
operator|.
name|bind
argument_list|(
literal|"testdb"
argument_list|,
name|ds
argument_list|)
expr_stmt|;
return|return
name|reg
return|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"jdbc:testdb?readSize=1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:retrieve"
argument_list|)
operator|.
name|to
argument_list|(
literal|"jdbc:testdb"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:retrieve"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:startTx"
argument_list|)
operator|.
name|to
argument_list|(
literal|"jdbc:testdb?transacted=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultTx"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|connectionProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|connectionProperties
operator|.
name|put
argument_list|(
literal|"autoCommit"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|DriverManagerDataSource
name|dataSource
init|=
operator|new
name|SingleConnectionDataSource
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dataSource
operator|.
name|setDriverClassName
argument_list|(
name|driverClass
argument_list|)
expr_stmt|;
name|dataSource
operator|.
name|setConnectionProperties
argument_list|(
name|connectionProperties
argument_list|)
expr_stmt|;
name|ds
operator|=
name|dataSource
expr_stmt|;
name|JdbcTemplate
name|jdbc
init|=
operator|new
name|JdbcTemplate
argument_list|(
name|ds
argument_list|)
decl_stmt|;
name|jdbc
operator|.
name|execute
argument_list|(
literal|"create table customer (id varchar(15) PRIMARY KEY, name varchar(10))"
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|execute
argument_list|(
literal|"insert into customer values('cust1','jstrachan')"
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|execute
argument_list|(
literal|"insert into customer values('cust2','nsandhu')"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|JdbcTemplate
name|jdbc
init|=
operator|new
name|JdbcTemplate
argument_list|(
name|ds
argument_list|)
decl_stmt|;
name|jdbc
operator|.
name|execute
argument_list|(
literal|"drop table customer"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

