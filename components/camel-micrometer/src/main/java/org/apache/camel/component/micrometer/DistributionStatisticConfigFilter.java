begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.micrometer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|config
operator|.
name|MeterFilter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|distribution
operator|.
name|DistributionStatisticConfig
import|;
end_import

begin_comment
comment|/**  * Example filter for adding common distribution statistics for all Timers and Distribution  * Summaries.  * Configure and add this to the {@link io.micrometer.core.instrument.MeterRegistry}  * if desired:  *  *<pre>  *     DistributionStatisticConfigFilter filter = new DistributionStatisticConfigFilter()  *     // filter.set...  *     meterRegistry.config().meterFilter(filter)  *</pre>  */
end_comment

begin_class
DECL|class|DistributionStatisticConfigFilter
specifier|public
class|class
name|DistributionStatisticConfigFilter
implements|implements
name|MeterFilter
block|{
DECL|field|maximumExpectedValue
specifier|private
name|Long
name|maximumExpectedValue
decl_stmt|;
DECL|field|minimumExpectedValue
specifier|private
name|Long
name|minimumExpectedValue
decl_stmt|;
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
DECL|field|bufferLength
specifier|private
name|Integer
name|bufferLength
decl_stmt|;
DECL|field|expiry
specifier|private
name|Duration
name|expiry
decl_stmt|;
DECL|field|percentiles
specifier|private
name|double
index|[]
name|percentiles
init|=
operator|new
name|double
index|[]
block|{
literal|0.5D
block|,
literal|0.75D
block|,
literal|0.9D
block|,
literal|0.99D
block|,
literal|0.999D
block|}
decl_stmt|;
DECL|field|slas
specifier|private
name|long
index|[]
name|slas
decl_stmt|;
annotation|@
name|Override
DECL|method|configure (Meter.Id id, DistributionStatisticConfig config)
specifier|public
name|DistributionStatisticConfig
name|configure
parameter_list|(
name|Meter
operator|.
name|Id
name|id
parameter_list|,
name|DistributionStatisticConfig
name|config
parameter_list|)
block|{
if|if
condition|(
name|id
operator|.
name|getTag
argument_list|(
name|MicrometerConstants
operator|.
name|CAMEL_CONTEXT_TAG
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|DistributionStatisticConfig
operator|.
name|builder
argument_list|()
operator|.
name|percentilesHistogram
argument_list|(
name|enabled
argument_list|)
operator|.
name|percentiles
argument_list|(
name|percentiles
argument_list|)
operator|.
name|maximumExpectedValue
argument_list|(
name|maximumExpectedValue
argument_list|)
operator|.
name|minimumExpectedValue
argument_list|(
name|minimumExpectedValue
argument_list|)
operator|.
name|sla
argument_list|(
name|slas
argument_list|)
operator|.
name|bufferLength
argument_list|(
name|bufferLength
argument_list|)
operator|.
name|expiry
argument_list|(
name|expiry
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|merge
argument_list|(
name|config
argument_list|)
return|;
block|}
return|return
name|config
return|;
block|}
DECL|method|setMaximumExpectedValue (Long maximumExpectedValue)
specifier|public
name|void
name|setMaximumExpectedValue
parameter_list|(
name|Long
name|maximumExpectedValue
parameter_list|)
block|{
name|this
operator|.
name|maximumExpectedValue
operator|=
name|maximumExpectedValue
expr_stmt|;
block|}
DECL|method|setMinimumExpectedValue (Long minimumExpectedValue)
specifier|public
name|void
name|setMinimumExpectedValue
parameter_list|(
name|Long
name|minimumExpectedValue
parameter_list|)
block|{
name|this
operator|.
name|minimumExpectedValue
operator|=
name|minimumExpectedValue
expr_stmt|;
block|}
DECL|method|setEnabled (Boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|Boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|method|setBufferLength (Integer bufferLength)
specifier|public
name|void
name|setBufferLength
parameter_list|(
name|Integer
name|bufferLength
parameter_list|)
block|{
name|this
operator|.
name|bufferLength
operator|=
name|bufferLength
expr_stmt|;
block|}
DECL|method|setExpiry (Duration expiry)
specifier|public
name|void
name|setExpiry
parameter_list|(
name|Duration
name|expiry
parameter_list|)
block|{
name|this
operator|.
name|expiry
operator|=
name|expiry
expr_stmt|;
block|}
DECL|method|setPercentiles (double[] percentiles)
specifier|public
name|void
name|setPercentiles
parameter_list|(
name|double
index|[]
name|percentiles
parameter_list|)
block|{
name|this
operator|.
name|percentiles
operator|=
name|percentiles
expr_stmt|;
block|}
DECL|method|setSlas (long[] slas)
specifier|public
name|void
name|setSlas
parameter_list|(
name|long
index|[]
name|slas
parameter_list|)
block|{
name|this
operator|.
name|slas
operator|=
name|slas
expr_stmt|;
block|}
block|}
end_class

end_unit

