begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.micrometer.eventnotifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
operator|.
name|eventnotifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Tags
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|AbstractExchangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeCreatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeSentEvent
import|;
end_import

begin_class
DECL|class|MicrometerExchangeEventNotifier
specifier|public
class|class
name|MicrometerExchangeEventNotifier
extends|extends
name|AbstractMicrometerEventNotifier
argument_list|<
name|AbstractExchangeEvent
argument_list|>
block|{
DECL|field|ignoreExchanges
specifier|private
name|Predicate
argument_list|<
name|Exchange
argument_list|>
name|ignoreExchanges
init|=
name|exchange
lambda|->
literal|false
decl_stmt|;
DECL|field|namingStrategy
specifier|private
name|MicrometerExchangeEventNotifierNamingStrategy
name|namingStrategy
init|=
name|MicrometerExchangeEventNotifierNamingStrategy
operator|.
name|DEFAULT
decl_stmt|;
DECL|method|MicrometerExchangeEventNotifier ()
specifier|public
name|MicrometerExchangeEventNotifier
parameter_list|()
block|{
name|super
argument_list|(
name|AbstractExchangeEvent
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|setIgnoreExchanges (Predicate<Exchange> ignoreExchanges)
specifier|public
name|void
name|setIgnoreExchanges
parameter_list|(
name|Predicate
argument_list|<
name|Exchange
argument_list|>
name|ignoreExchanges
parameter_list|)
block|{
name|this
operator|.
name|ignoreExchanges
operator|=
name|ignoreExchanges
expr_stmt|;
block|}
DECL|method|getIgnoreExchanges ()
specifier|public
name|Predicate
argument_list|<
name|Exchange
argument_list|>
name|getIgnoreExchanges
parameter_list|()
block|{
return|return
name|ignoreExchanges
return|;
block|}
DECL|method|getNamingStrategy ()
specifier|public
name|MicrometerExchangeEventNotifierNamingStrategy
name|getNamingStrategy
parameter_list|()
block|{
return|return
name|namingStrategy
return|;
block|}
DECL|method|setNamingStrategy (MicrometerExchangeEventNotifierNamingStrategy namingStrategy)
specifier|public
name|void
name|setNamingStrategy
parameter_list|(
name|MicrometerExchangeEventNotifierNamingStrategy
name|namingStrategy
parameter_list|)
block|{
name|this
operator|.
name|namingStrategy
operator|=
name|namingStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notify (EventObject eventObject)
specifier|public
name|void
name|notify
parameter_list|(
name|EventObject
name|eventObject
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|getIgnoreExchanges
argument_list|()
operator|.
name|test
argument_list|(
operator|(
operator|(
name|AbstractExchangeEvent
operator|)
name|eventObject
operator|)
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|eventObject
operator|instanceof
name|ExchangeSentEvent
condition|)
block|{
name|handleSentEvent
argument_list|(
operator|(
name|ExchangeSentEvent
operator|)
name|eventObject
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eventObject
operator|instanceof
name|ExchangeCreatedEvent
condition|)
block|{
name|handleCreatedEvent
argument_list|(
operator|(
name|ExchangeCreatedEvent
operator|)
name|eventObject
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eventObject
operator|instanceof
name|ExchangeCompletedEvent
operator|||
name|eventObject
operator|instanceof
name|ExchangeFailedEvent
condition|)
block|{
name|handleDoneEvent
argument_list|(
operator|(
name|AbstractExchangeEvent
operator|)
name|eventObject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleSentEvent (ExchangeSentEvent sentEvent)
specifier|protected
name|void
name|handleSentEvent
parameter_list|(
name|ExchangeSentEvent
name|sentEvent
parameter_list|)
block|{
name|String
name|name
init|=
name|namingStrategy
operator|.
name|getName
argument_list|(
name|sentEvent
operator|.
name|getExchange
argument_list|()
argument_list|,
name|sentEvent
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|Tags
name|tags
init|=
name|namingStrategy
operator|.
name|getTags
argument_list|(
name|sentEvent
argument_list|,
name|sentEvent
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|getMeterRegistry
argument_list|()
operator|.
name|timer
argument_list|(
name|name
argument_list|,
name|tags
argument_list|)
operator|.
name|record
argument_list|(
name|sentEvent
operator|.
name|getTimeTaken
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|handleCreatedEvent (ExchangeCreatedEvent createdEvent)
specifier|protected
name|void
name|handleCreatedEvent
parameter_list|(
name|ExchangeCreatedEvent
name|createdEvent
parameter_list|)
block|{
name|String
name|name
init|=
name|namingStrategy
operator|.
name|getName
argument_list|(
name|createdEvent
operator|.
name|getExchange
argument_list|()
argument_list|,
name|createdEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|getFromEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|createdEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"eventTimer:"
operator|+
name|name
argument_list|,
name|Timer
operator|.
name|start
argument_list|(
name|getMeterRegistry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|handleDoneEvent (AbstractExchangeEvent doneEvent)
specifier|protected
name|void
name|handleDoneEvent
parameter_list|(
name|AbstractExchangeEvent
name|doneEvent
parameter_list|)
block|{
name|String
name|name
init|=
name|namingStrategy
operator|.
name|getName
argument_list|(
name|doneEvent
operator|.
name|getExchange
argument_list|()
argument_list|,
name|doneEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|getFromEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|Tags
name|tags
init|=
name|namingStrategy
operator|.
name|getTags
argument_list|(
name|doneEvent
argument_list|,
name|doneEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|getFromEndpoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// Would have preferred LongTaskTimer, but you cannot set the FAILED_TAG once it is registered
name|Timer
operator|.
name|Sample
name|sample
init|=
operator|(
name|Timer
operator|.
name|Sample
operator|)
name|doneEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|removeProperty
argument_list|(
literal|"eventTimer:"
operator|+
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sample
operator|!=
literal|null
condition|)
block|{
name|sample
operator|.
name|stop
argument_list|(
name|getMeterRegistry
argument_list|()
operator|.
name|timer
argument_list|(
name|name
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

