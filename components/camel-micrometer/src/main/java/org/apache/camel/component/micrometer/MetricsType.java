begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.micrometer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_enum
DECL|enum|MetricsType
specifier|public
enum|enum
name|MetricsType
block|{
DECL|enumConstant|GAUGE
name|GAUGE
argument_list|(
literal|"gauge"
argument_list|)
block|,
DECL|enumConstant|COUNTER
name|COUNTER
argument_list|(
literal|"counter"
argument_list|)
block|,
DECL|enumConstant|FUNCTION_COUNTER
name|FUNCTION_COUNTER
argument_list|(
literal|"functionCounter"
argument_list|)
block|,
DECL|enumConstant|TIMER
name|TIMER
argument_list|(
literal|"timer"
argument_list|)
block|,
DECL|enumConstant|FUNCTION_TIMER
name|FUNCTION_TIMER
argument_list|(
literal|"functionTimer"
argument_list|)
block|,
DECL|enumConstant|LONG_TASK_TIMER
name|LONG_TASK_TIMER
argument_list|(
literal|"longTaskTimer"
argument_list|)
block|,
DECL|enumConstant|DISTRIBUTION_SUMMARY
name|DISTRIBUTION_SUMMARY
argument_list|(
literal|"summary"
argument_list|)
block|;
DECL|field|MAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsType
argument_list|>
name|MAP
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
static|static
block|{
for|for
control|(
name|MetricsType
name|type
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|MetricsType
operator|.
name|class
argument_list|)
control|)
block|{
name|MAP
operator|.
name|put
argument_list|(
name|type
operator|.
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|MetricsType (String name)
name|MetricsType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getByName (String name)
specifier|public
specifier|static
name|MetricsType
name|getByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|MAP
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

