begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.micrometer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|MeterRegistry
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Tags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages Micrometer endpoints.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
literal|"micrometer"
argument_list|)
DECL|class|MicrometerComponent
specifier|public
class|class
name|MicrometerComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|DEFAULT_METER_TYPE
specifier|public
specifier|static
specifier|final
name|Meter
operator|.
name|Type
name|DEFAULT_METER_TYPE
init|=
name|Meter
operator|.
name|Type
operator|.
name|COUNTER
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|metricsRegistry
specifier|private
name|MeterRegistry
name|metricsRegistry
decl_stmt|;
DECL|method|MicrometerComponent ()
specifier|public
name|MicrometerComponent
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|metricsRegistry
operator|==
literal|null
condition|)
block|{
name|Registry
name|camelRegistry
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|metricsRegistry
operator|=
name|MicrometerUtils
operator|.
name|getOrCreateMeterRegistry
argument_list|(
name|camelRegistry
argument_list|,
name|MicrometerConstants
operator|.
name|METRICS_REGISTRY_NAME
argument_list|)
expr_stmt|;
block|}
name|String
name|metricsName
init|=
name|getMetricsName
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|Meter
operator|.
name|Type
name|metricsType
init|=
name|getMetricsType
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|getMetricsTag
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Metrics type: {}; name: {}; tags: {}"
argument_list|,
name|metricsType
argument_list|,
name|metricsName
argument_list|,
name|tags
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
operator|new
name|MicrometerEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|metricsRegistry
argument_list|,
name|metricsType
argument_list|,
name|metricsName
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getMetricsName (String remaining)
name|String
name|getMetricsName
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|String
name|name
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|remaining
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
return|return
name|name
operator|==
literal|null
condition|?
name|remaining
else|:
name|name
return|;
block|}
DECL|method|getMetricsType (String remaining)
name|Meter
operator|.
name|Type
name|getMetricsType
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|String
name|type
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|remaining
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
return|return
name|type
operator|==
literal|null
condition|?
name|DEFAULT_METER_TYPE
else|:
name|MicrometerUtils
operator|.
name|getByName
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getMetricsTag (Map<String, Object> parameters)
name|Iterable
argument_list|<
name|Tag
argument_list|>
name|getMetricsTag
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|String
name|tagsString
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"tags"
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagsString
operator|!=
literal|null
operator|&&
operator|!
name|tagsString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|tagStrings
init|=
name|tagsString
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*"
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|of
argument_list|(
name|tagStrings
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
name|Tags
operator|.
name|of
argument_list|(
name|s
operator|.
name|split
argument_list|(
literal|"\\s*=\\s*"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|reduce
argument_list|(
name|Tags
operator|.
name|empty
argument_list|()
argument_list|,
name|Tags
operator|::
name|and
argument_list|)
return|;
block|}
return|return
name|Tags
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|getMetricsRegistry ()
specifier|public
name|MeterRegistry
name|getMetricsRegistry
parameter_list|()
block|{
return|return
name|metricsRegistry
return|;
block|}
comment|/**      * To use a custom configured MetricRegistry.      */
DECL|method|setMetricsRegistry (MeterRegistry metricsRegistry)
specifier|public
name|void
name|setMetricsRegistry
parameter_list|(
name|MeterRegistry
name|metricsRegistry
parameter_list|)
block|{
name|this
operator|.
name|metricsRegistry
operator|=
name|metricsRegistry
expr_stmt|;
block|}
block|}
end_class

end_unit

