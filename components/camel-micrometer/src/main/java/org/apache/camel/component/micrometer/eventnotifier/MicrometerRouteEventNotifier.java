begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.micrometer.eventnotifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
operator|.
name|eventnotifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|RouteAddedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|RouteEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|RouteRemovedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|RouteStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|RouteStoppedEvent
import|;
end_import

begin_class
DECL|class|MicrometerRouteEventNotifier
specifier|public
class|class
name|MicrometerRouteEventNotifier
extends|extends
name|AbstractMicrometerEventNotifier
argument_list|<
name|RouteEvent
argument_list|>
block|{
DECL|field|routesAdded
specifier|private
specifier|final
name|AtomicLong
name|routesAdded
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|routesRunning
specifier|private
specifier|final
name|AtomicLong
name|routesRunning
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|namingStrategy
specifier|private
name|MicrometerRouteEventNotifierNamingStrategy
name|namingStrategy
init|=
name|MicrometerRouteEventNotifierNamingStrategy
operator|.
name|DEFAULT
decl_stmt|;
DECL|method|MicrometerRouteEventNotifier ()
specifier|public
name|MicrometerRouteEventNotifier
parameter_list|()
block|{
name|super
argument_list|(
name|RouteEvent
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getNamingStrategy ()
specifier|public
name|MicrometerRouteEventNotifierNamingStrategy
name|getNamingStrategy
parameter_list|()
block|{
return|return
name|namingStrategy
return|;
block|}
DECL|method|setNamingStrategy (MicrometerRouteEventNotifierNamingStrategy namingStrategy)
specifier|public
name|void
name|setNamingStrategy
parameter_list|(
name|MicrometerRouteEventNotifierNamingStrategy
name|namingStrategy
parameter_list|)
block|{
name|this
operator|.
name|namingStrategy
operator|=
name|namingStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|Gauge
operator|.
name|builder
argument_list|(
name|namingStrategy
operator|.
name|getRouteAddedName
argument_list|()
argument_list|,
name|routesAdded
argument_list|,
name|value
lambda|->
name|Long
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|.
name|baseUnit
argument_list|(
literal|"routes"
argument_list|)
operator|.
name|tags
argument_list|(
name|namingStrategy
operator|.
name|getTags
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
operator|.
name|register
argument_list|(
name|getMeterRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|Gauge
operator|.
name|builder
argument_list|(
name|namingStrategy
operator|.
name|getRouteRunningName
argument_list|()
argument_list|,
name|routesRunning
argument_list|,
name|value
lambda|->
name|Long
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|.
name|baseUnit
argument_list|(
literal|"routes"
argument_list|)
operator|.
name|tags
argument_list|(
name|namingStrategy
operator|.
name|getTags
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
operator|.
name|register
argument_list|(
name|getMeterRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notify (CamelEvent eventObject)
specifier|public
name|void
name|notify
parameter_list|(
name|CamelEvent
name|eventObject
parameter_list|)
block|{
if|if
condition|(
name|eventObject
operator|instanceof
name|RouteAddedEvent
condition|)
block|{
name|routesAdded
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eventObject
operator|instanceof
name|RouteRemovedEvent
condition|)
block|{
name|routesAdded
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eventObject
operator|instanceof
name|RouteStartedEvent
condition|)
block|{
name|routesRunning
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eventObject
operator|instanceof
name|RouteStoppedEvent
condition|)
block|{
name|routesRunning
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

