begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.micrometer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|MeterRegistry
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
operator|.
name|MicrometerConstants
operator|.
name|HEADER_TIMER_ACTION
import|;
end_import

begin_class
DECL|class|TimerProducer
specifier|public
class|class
name|TimerProducer
extends|extends
name|AbstractMicrometerProducer
argument_list|<
name|Timer
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimerProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TimerProducer (MicrometerEndpoint endpoint)
specifier|public
name|TimerProducer
parameter_list|(
name|MicrometerEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registrar (String name, Iterable<Tag> tags)
specifier|protected
name|Function
argument_list|<
name|MeterRegistry
argument_list|,
name|Timer
argument_list|>
name|registrar
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
return|return
name|meterRegistry
lambda|->
name|meterRegistry
operator|.
name|timer
argument_list|(
name|name
argument_list|,
name|tags
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doProcess (Exchange exchange, MicrometerEndpoint endpoint, Timer timer)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MicrometerEndpoint
name|endpoint
parameter_list|,
name|Timer
name|timer
parameter_list|)
block|{
name|String
name|propertyName
init|=
name|getPropertyName
argument_list|(
name|timer
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Timer
operator|.
name|Sample
name|sample
init|=
name|getTimerSampleFromExchange
argument_list|(
name|exchange
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
name|sample
operator|.
name|stop
argument_list|(
name|timer
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|removeProperty
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doProcess (Exchange exchange, String metricsName, Iterable<Tag> tags)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|metricsName
parameter_list|,
name|Iterable
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
name|MeterRegistry
name|registry
init|=
name|getEndpoint
argument_list|()
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|MicrometerTimerAction
name|action
init|=
name|getEndpoint
argument_list|()
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|MicrometerTimerAction
name|finalAction
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|HEADER_TIMER_ACTION
argument_list|,
name|action
argument_list|,
name|MicrometerTimerAction
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|finalAction
operator|==
name|MicrometerTimerAction
operator|.
name|start
condition|)
block|{
name|handleStart
argument_list|(
name|exchange
argument_list|,
name|registry
argument_list|,
name|metricsName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finalAction
operator|==
name|MicrometerTimerAction
operator|.
name|stop
condition|)
block|{
name|handleStop
argument_list|(
name|exchange
argument_list|,
name|metricsName
argument_list|,
name|tags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No action provided for timer \"{}\""
argument_list|,
name|metricsName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleStop (Exchange exchange, String metricsName, Iterable<Tag> tags)
specifier|private
name|void
name|handleStop
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|metricsName
parameter_list|,
name|Iterable
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
if|if
condition|(
name|getTimerSampleFromExchange
argument_list|(
name|exchange
argument_list|,
name|getPropertyName
argument_list|(
name|metricsName
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|doProcess
argument_list|(
name|exchange
argument_list|,
name|getEndpoint
argument_list|()
argument_list|,
name|getMeter
argument_list|(
name|metricsName
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleStart (Exchange exchange, MeterRegistry registry, String metricsName)
name|void
name|handleStart
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MeterRegistry
name|registry
parameter_list|,
name|String
name|metricsName
parameter_list|)
block|{
name|String
name|propertyName
init|=
name|getPropertyName
argument_list|(
name|metricsName
argument_list|)
decl_stmt|;
name|Timer
operator|.
name|Sample
name|sample
init|=
name|getTimerSampleFromExchange
argument_list|(
name|exchange
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sample
operator|==
literal|null
condition|)
block|{
name|sample
operator|=
name|Timer
operator|.
name|start
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|sample
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Timer \"{}\" already running"
argument_list|,
name|metricsName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPropertyName (String metricsName)
name|String
name|getPropertyName
parameter_list|(
name|String
name|metricsName
parameter_list|)
block|{
return|return
literal|"timer:"
operator|+
name|metricsName
return|;
block|}
DECL|method|getTimerSampleFromExchange (Exchange exchange, String propertyName)
name|Timer
operator|.
name|Sample
name|getTimerSampleFromExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

