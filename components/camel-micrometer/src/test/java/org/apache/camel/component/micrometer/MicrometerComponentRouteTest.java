begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.micrometer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MicrometerComponentRouteTest
specifier|public
class|class
name|MicrometerComponentRouteTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:start-1"
argument_list|)
DECL|field|template1
specifier|protected
name|ProducerTemplate
name|template1
decl_stmt|;
annotation|@
name|Test
DECL|method|testMetrics ()
specifier|public
name|void
name|testMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template1
operator|.
name|sendBody
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMessageContentDelivery ()
specifier|public
name|void
name|testMessageContentDelivery
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|String
name|body
init|=
literal|"Message Body"
decl_stmt|;
name|String
name|header1
init|=
literal|"Header 1"
decl_stmt|;
name|String
name|header2
init|=
literal|"Header 2"
decl_stmt|;
name|Object
name|value1
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Object
name|value2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|header1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|header2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|header1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|header2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|template1
operator|.
name|sendBodyAndHeaders
argument_list|(
name|body
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start-1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:timer:T?action=start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:counter://A"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:counter://B"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:counter:C?increment=19291"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:counter:C?decrement=19292"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:counter:C"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:summary:E"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:timer:T"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:summary:E?value=12000000031"
argument_list|)
operator|.
name|to
argument_list|(
literal|"micrometer:timer:T?action=stop"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

