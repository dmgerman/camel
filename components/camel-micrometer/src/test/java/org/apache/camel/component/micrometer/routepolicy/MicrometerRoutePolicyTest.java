begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.micrometer.routepolicy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
operator|.
name|routepolicy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
operator|.
name|MicrometerConstants
operator|.
name|DEFAULT_CAMEL_ROUTE_POLICY_METER_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
operator|.
name|MicrometerConstants
operator|.
name|ROUTE_ID_TAG
import|;
end_import

begin_class
DECL|class|MicrometerRoutePolicyTest
specifier|public
class|class
name|MicrometerRoutePolicyTest
extends|extends
name|AbstractMicrometerRoutePolicyTest
block|{
DECL|field|DELAY_FOO
specifier|private
specifier|static
specifier|final
name|long
name|DELAY_FOO
init|=
literal|20
decl_stmt|;
DECL|field|DELAY_BAR
specifier|private
specifier|static
specifier|final
name|long
name|DELAY_BAR
init|=
literal|50
decl_stmt|;
annotation|@
name|Test
DECL|method|testMetricsRoutePolicy ()
specifier|public
name|void
name|testMetricsRoutePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:foo"
argument_list|,
literal|"Hello "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:bar"
argument_list|,
literal|"Hello "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Timer
name|fooTimer
init|=
name|meterRegistry
operator|.
name|find
argument_list|(
name|DEFAULT_CAMEL_ROUTE_POLICY_METER_NAME
argument_list|)
operator|.
name|tag
argument_list|(
name|ROUTE_ID_TAG
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|timer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|count
operator|/
literal|2
argument_list|,
name|fooTimer
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooTimer
operator|.
name|mean
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
name|DELAY_FOO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooTimer
operator|.
name|max
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
name|DELAY_FOO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooTimer
operator|.
name|totalTime
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
name|DELAY_FOO
operator|*
name|count
operator|/
literal|2
argument_list|)
expr_stmt|;
name|Timer
name|barTimer
init|=
name|meterRegistry
operator|.
name|find
argument_list|(
name|DEFAULT_CAMEL_ROUTE_POLICY_METER_NAME
argument_list|)
operator|.
name|tag
argument_list|(
name|ROUTE_ID_TAG
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|timer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|count
operator|/
literal|2
argument_list|,
name|barTimer
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|barTimer
operator|.
name|mean
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
name|DELAY_BAR
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|barTimer
operator|.
name|max
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
name|DELAY_BAR
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|barTimer
operator|.
name|totalTime
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
name|DELAY_BAR
operator|*
name|count
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:foo"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|delay
argument_list|(
name|DELAY_FOO
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bar"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|delay
argument_list|(
name|DELAY_BAR
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

