begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.micrometer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|MeterRegistry
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Tags
import|;
end_import

begin_import
import|import
name|io
operator|.
name|micrometer
operator|.
name|core
operator|.
name|instrument
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|micrometer
operator|.
name|MicrometerConstants
operator|.
name|HEADER_TIMER_ACTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TimerProducerTest
specifier|public
class|class
name|TimerProducerTest
block|{
DECL|field|METRICS_NAME
specifier|private
specifier|static
specifier|final
name|String
name|METRICS_NAME
init|=
literal|"metrics.name"
decl_stmt|;
DECL|field|PROPERTY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_NAME
init|=
literal|"timer"
operator|+
literal|":"
operator|+
name|METRICS_NAME
decl_stmt|;
annotation|@
name|Mock
DECL|field|endpoint
specifier|private
name|MicrometerEndpoint
name|endpoint
decl_stmt|;
annotation|@
name|Mock
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
annotation|@
name|Mock
DECL|field|registry
specifier|private
name|MeterRegistry
name|registry
decl_stmt|;
annotation|@
name|Mock
DECL|field|config
specifier|private
name|MeterRegistry
operator|.
name|Config
name|config
decl_stmt|;
annotation|@
name|Mock
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
annotation|@
name|Mock
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
annotation|@
name|Mock
DECL|field|sample
specifier|private
name|Timer
operator|.
name|Sample
name|sample
decl_stmt|;
annotation|@
name|Mock
DECL|field|in
specifier|private
name|Message
name|in
decl_stmt|;
DECL|field|producer
specifier|private
name|TimerProducer
name|producer
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|producer
operator|=
operator|new
name|TimerProducer
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getRegistry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimerProducer ()
specifier|public
name|void
name|testTimerProducer
parameter_list|()
block|{
name|assertThat
argument_list|(
name|producer
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|producer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|equals
argument_list|(
name|endpoint
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessStart ()
specifier|public
name|void
name|testProcessStart
parameter_list|()
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MicrometerTimerAction
operator|.
name|start
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|HEADER_TIMER_ACTION
argument_list|,
name|MicrometerTimerAction
operator|.
name|start
argument_list|,
name|MicrometerTimerAction
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MicrometerTimerAction
operator|.
name|start
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|registry
operator|.
name|config
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|clock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|producer
operator|.
name|doProcess
argument_list|(
name|exchange
argument_list|,
name|METRICS_NAME
argument_list|,
name|Tags
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessStopWithOverride ()
specifier|public
name|void
name|testProcessStopWithOverride
parameter_list|()
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MicrometerTimerAction
operator|.
name|stop
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|HEADER_TIMER_ACTION
argument_list|,
name|MicrometerTimerAction
operator|.
name|stop
argument_list|,
name|MicrometerTimerAction
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MicrometerTimerAction
operator|.
name|start
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|registry
operator|.
name|config
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|clock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|producer
operator|.
name|doProcess
argument_list|(
name|exchange
argument_list|,
name|METRICS_NAME
argument_list|,
name|Tags
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessNoActionOverride ()
specifier|public
name|void
name|testProcessNoActionOverride
parameter_list|()
block|{
name|Object
name|action
init|=
literal|null
decl_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|HEADER_TIMER_ACTION
argument_list|,
name|action
argument_list|,
name|MicrometerTimerAction
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MicrometerTimerAction
operator|.
name|start
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|registry
operator|.
name|config
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|clock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|producer
operator|.
name|doProcess
argument_list|(
name|exchange
argument_list|,
name|METRICS_NAME
argument_list|,
name|Tags
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessStartWithOverride ()
specifier|public
name|void
name|testProcessStartWithOverride
parameter_list|()
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MicrometerTimerAction
operator|.
name|start
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|HEADER_TIMER_ACTION
argument_list|,
name|MicrometerTimerAction
operator|.
name|start
argument_list|,
name|MicrometerTimerAction
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MicrometerTimerAction
operator|.
name|stop
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sample
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getRegistry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|registry
operator|.
name|timer
argument_list|(
name|METRICS_NAME
argument_list|,
name|Tags
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|timer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Meter
operator|.
name|Id
argument_list|(
name|METRICS_NAME
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Meter
operator|.
name|Type
operator|.
name|TIMER
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sample
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sample
operator|.
name|stop
argument_list|(
name|timer
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|removeProperty
argument_list|(
name|PROPERTY_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|producer
operator|.
name|doProcess
argument_list|(
name|exchange
argument_list|,
name|METRICS_NAME
argument_list|,
name|Tags
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessStop ()
specifier|public
name|void
name|testProcessStop
parameter_list|()
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MicrometerTimerAction
operator|.
name|stop
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|HEADER_TIMER_ACTION
argument_list|,
name|MicrometerTimerAction
operator|.
name|stop
argument_list|,
name|MicrometerTimerAction
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MicrometerTimerAction
operator|.
name|stop
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sample
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getRegistry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|registry
operator|.
name|timer
argument_list|(
name|METRICS_NAME
argument_list|,
name|Tags
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|timer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Meter
operator|.
name|Id
argument_list|(
name|METRICS_NAME
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Meter
operator|.
name|Type
operator|.
name|TIMER
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sample
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sample
operator|.
name|stop
argument_list|(
name|timer
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|removeProperty
argument_list|(
name|PROPERTY_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|producer
operator|.
name|doProcess
argument_list|(
name|exchange
argument_list|,
name|METRICS_NAME
argument_list|,
name|Tags
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessNoAction ()
specifier|public
name|void
name|testProcessNoAction
parameter_list|()
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|producer
operator|.
name|doProcess
argument_list|(
name|exchange
argument_list|,
name|METRICS_NAME
argument_list|,
name|Tags
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPropertyName ()
specifier|public
name|void
name|testGetPropertyName
parameter_list|()
block|{
name|assertThat
argument_list|(
name|producer
operator|.
name|getPropertyName
argument_list|(
name|METRICS_NAME
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"timer"
operator|+
literal|":"
operator|+
name|METRICS_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetTimerContextFromExchange ()
specifier|public
name|void
name|testGetTimerContextFromExchange
parameter_list|()
block|{
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sample
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|producer
operator|.
name|getTimerSampleFromExchange
argument_list|(
name|exchange
argument_list|,
name|PROPERTY_NAME
argument_list|)
argument_list|,
name|is
argument_list|(
name|sample
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetTimerContextFromExchangeNotFound ()
specifier|public
name|void
name|testGetTimerContextFromExchangeNotFound
parameter_list|()
block|{
name|when
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|Timer
operator|.
name|Sample
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|producer
operator|.
name|getTimerSampleFromExchange
argument_list|(
name|exchange
argument_list|,
name|PROPERTY_NAME
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

