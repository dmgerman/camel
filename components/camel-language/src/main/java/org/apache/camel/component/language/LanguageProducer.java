begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.language
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|language
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * Language producer.  */
end_comment

begin_class
DECL|class|LanguageProducer
specifier|public
class|class
name|LanguageProducer
extends|extends
name|DefaultProducer
block|{
DECL|method|LanguageProducer (LanguageEndpoint endpoint)
specifier|public
name|LanguageProducer
parameter_list|(
name|LanguageEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|script
init|=
literal|null
decl_stmt|;
comment|// is there a custom expression in the header?
name|Expression
name|exp
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|LANGUAGE_SCRIPT
argument_list|,
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp
operator|==
literal|null
condition|)
block|{
name|script
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|LANGUAGE_SCRIPT
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|!=
literal|null
condition|)
block|{
comment|// the script may be a file: so resolve it before using
name|script
operator|=
name|getEndpoint
argument_list|()
operator|.
name|resolveScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|exp
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getLanguage
argument_list|()
operator|.
name|createExpression
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if not fallback to use expression from endpoint
if|if
condition|(
name|exp
operator|==
literal|null
operator|&&
name|getEndpoint
argument_list|()
operator|.
name|isCacheScript
argument_list|()
condition|)
block|{
name|exp
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getExpression
argument_list|()
expr_stmt|;
block|}
comment|// the script can be a resource from the endpoint,
comment|// or refer to a resource itself
comment|// or just be a plain string
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
comment|// fallback and use resource uri from endpoint
if|if
condition|(
name|exp
operator|==
literal|null
condition|)
block|{
name|script
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getScript
argument_list|()
expr_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
operator|&&
name|getEndpoint
argument_list|()
operator|.
name|getResourceUri
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// no script to execute
throw|throw
operator|new
name|CamelExchangeException
argument_list|(
literal|"No script to evaluate"
argument_list|,
name|exchange
argument_list|)
throw|;
block|}
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
name|is
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getResourceAsInputStream
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ResourceHelper
operator|.
name|hasScheme
argument_list|(
name|script
argument_list|)
condition|)
block|{
name|is
operator|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|!=
literal|null
operator|&&
operator|!
name|getEndpoint
argument_list|()
operator|.
name|isBinary
argument_list|()
condition|)
block|{
try|try
block|{
name|script
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// if we have a text based script then use and evaluate it
if|if
condition|(
name|script
operator|!=
literal|null
condition|)
block|{
comment|// create the expression from the script
name|exp
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getLanguage
argument_list|()
operator|.
name|createExpression
argument_list|(
name|script
argument_list|)
expr_stmt|;
comment|// expression was resolved from resource
name|getEndpoint
argument_list|()
operator|.
name|setContentResolvedFromResource
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// if we cache then set this as expression on endpoint so we don't re-create it again
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|isCacheScript
argument_list|()
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setExpression
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the result is either the result of the expression or the input stream as-is because its binary content
name|Object
name|result
decl_stmt|;
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|exp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Evaluated expression as: {} with: {}"
argument_list|,
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|getEndpoint
argument_list|()
operator|.
name|isCacheScript
argument_list|()
condition|)
block|{
comment|// some languages add themselves as a service which we then need to remove if we are not cached
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|removeService
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// use the result as-is
name|result
operator|=
name|is
expr_stmt|;
block|}
comment|// set message body if transform is enabled
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|isTransform
argument_list|()
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|LanguageEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|LanguageEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
block|}
end_class

end_unit

