begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jsonvalidator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jsonvalidator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|networknt
operator|.
name|schema
operator|.
name|JsonSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|networknt
operator|.
name|schema
operator|.
name|ValidationMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ResourceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * Validates the payload of a message using NetworkNT JSON Schema library.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed JsonValidatorEndpoint"
argument_list|)
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"json-validator"
argument_list|,
name|firstVersion
operator|=
literal|"2.20.0"
argument_list|,
name|title
operator|=
literal|"JSON Schema Validator"
argument_list|,
name|syntax
operator|=
literal|"json-validator:resourceUri"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"validation"
argument_list|)
DECL|class|JsonValidatorEndpoint
specifier|public
class|class
name|JsonValidatorEndpoint
extends|extends
name|ResourceEndpoint
block|{
DECL|field|schema
specifier|private
specifier|volatile
name|JsonSchema
name|schema
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|failOnNullBody
specifier|private
name|boolean
name|failOnNullBody
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|failOnNullHeader
specifier|private
name|boolean
name|failOnNullHeader
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"To validate against a header instead of the message body."
argument_list|)
DECL|field|headerName
specifier|private
name|String
name|headerName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|errorHandler
specifier|private
name|JsonValidatorErrorHandler
name|errorHandler
init|=
operator|new
name|DefaultJsonValidationErrorHandler
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|schemaLoader
specifier|private
name|JsonSchemaLoader
name|schemaLoader
init|=
operator|new
name|DefaultJsonSchemaLoader
argument_list|()
decl_stmt|;
DECL|method|JsonValidatorEndpoint (String endpointUri, Component component, String resourceUri)
specifier|public
name|JsonValidatorEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|String
name|resourceUri
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|,
name|resourceUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clearContentCache ()
specifier|public
name|void
name|clearContentCache
parameter_list|()
block|{
name|this
operator|.
name|schema
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|clearContentCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExchangePattern ()
specifier|public
name|ExchangePattern
name|getExchangePattern
parameter_list|()
block|{
return|return
name|ExchangePattern
operator|.
name|InOut
return|;
block|}
annotation|@
name|Override
DECL|method|onExchange (Exchange exchange)
specifier|protected
name|void
name|onExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
comment|// Get a local copy of the current schema to improve concurrency.
name|JsonSchema
name|localSchema
init|=
name|this
operator|.
name|schema
decl_stmt|;
if|if
condition|(
name|localSchema
operator|==
literal|null
condition|)
block|{
name|localSchema
operator|=
name|getOrCreateSchema
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|is
operator|=
name|getContentToValidate
argument_list|(
name|exchange
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldUseHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|is
operator|==
literal|null
operator|&&
name|isFailOnNullHeader
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoJsonHeaderValidationException
argument_list|(
name|exchange
argument_list|,
name|headerName
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|is
operator|==
literal|null
operator|&&
name|isFailOnNullBody
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoJsonBodyValidationException
argument_list|(
name|exchange
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|node
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ValidationMessage
argument_list|>
name|errors
init|=
name|localSchema
operator|.
name|validate
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"Validated JSon has {} errors"
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorHandler
operator|.
name|handleErrors
argument_list|(
name|exchange
argument_list|,
name|schema
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"Validated JSon success"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|ValidationException
condition|)
block|{
comment|// already as validation error
throw|throw
name|e
throw|;
block|}
else|else
block|{
comment|// general error
name|this
operator|.
name|errorHandler
operator|.
name|handleErrors
argument_list|(
name|exchange
argument_list|,
name|schema
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContentToValidate (Exchange exchange, Class<T> clazz)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getContentToValidate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|shouldUseHeader
argument_list|()
condition|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|,
name|clazz
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
DECL|method|shouldUseHeader ()
specifier|private
name|boolean
name|shouldUseHeader
parameter_list|()
block|{
return|return
name|headerName
operator|!=
literal|null
return|;
block|}
comment|/**      * Synchronized method to create a schema if is does not already exist.      *       * @return The currently loaded schema      */
DECL|method|getOrCreateSchema ()
specifier|private
name|JsonSchema
name|getOrCreateSchema
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|schema
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|schema
operator|=
name|this
operator|.
name|schemaLoader
operator|.
name|createSchema
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|this
operator|.
name|getResourceAsInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|schema
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpointUri ()
specifier|protected
name|String
name|createEndpointUri
parameter_list|()
block|{
return|return
literal|"json-validator:"
operator|+
name|getResourceUri
argument_list|()
return|;
block|}
DECL|method|getErrorHandler ()
specifier|public
name|JsonValidatorErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
comment|/**      * To use a custom ValidatorErrorHandler.      *<p/>      * The default error handler captures the errors and throws an exception.      */
DECL|method|setErrorHandler (JsonValidatorErrorHandler errorHandler)
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|JsonValidatorErrorHandler
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
block|}
DECL|method|getSchemaLoader ()
specifier|public
name|JsonSchemaLoader
name|getSchemaLoader
parameter_list|()
block|{
return|return
name|schemaLoader
return|;
block|}
comment|/**      * To use a custom schema loader allowing for adding custom format validation. The default implementation will create a schema loader with draft v4 support.      */
DECL|method|setSchemaLoader (JsonSchemaLoader schemaLoader)
specifier|public
name|void
name|setSchemaLoader
parameter_list|(
name|JsonSchemaLoader
name|schemaLoader
parameter_list|)
block|{
name|this
operator|.
name|schemaLoader
operator|=
name|schemaLoader
expr_stmt|;
block|}
DECL|method|isFailOnNullBody ()
specifier|public
name|boolean
name|isFailOnNullBody
parameter_list|()
block|{
return|return
name|failOnNullBody
return|;
block|}
comment|/**      * Whether to fail if no body exists.      */
DECL|method|setFailOnNullBody (boolean failOnNullBody)
specifier|public
name|void
name|setFailOnNullBody
parameter_list|(
name|boolean
name|failOnNullBody
parameter_list|)
block|{
name|this
operator|.
name|failOnNullBody
operator|=
name|failOnNullBody
expr_stmt|;
block|}
DECL|method|isFailOnNullHeader ()
specifier|public
name|boolean
name|isFailOnNullHeader
parameter_list|()
block|{
return|return
name|failOnNullHeader
return|;
block|}
comment|/**      * Whether to fail if no header exists when validating against a header.      */
DECL|method|setFailOnNullHeader (boolean failOnNullHeader)
specifier|public
name|void
name|setFailOnNullHeader
parameter_list|(
name|boolean
name|failOnNullHeader
parameter_list|)
block|{
name|this
operator|.
name|failOnNullHeader
operator|=
name|failOnNullHeader
expr_stmt|;
block|}
DECL|method|getHeaderName ()
specifier|public
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|headerName
return|;
block|}
comment|/**      * To validate against a header instead of the message body.      */
DECL|method|setHeaderName (String headerName)
specifier|public
name|void
name|setHeaderName
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
name|this
operator|.
name|headerName
operator|=
name|headerName
expr_stmt|;
block|}
block|}
end_class

end_unit

