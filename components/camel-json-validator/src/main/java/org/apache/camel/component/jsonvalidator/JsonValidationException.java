begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jsonvalidator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jsonvalidator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|networknt
operator|.
name|schema
operator|.
name|JsonSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|networknt
operator|.
name|schema
operator|.
name|ValidationMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ValidationException
import|;
end_import

begin_class
DECL|class|JsonValidationException
specifier|public
class|class
name|JsonValidationException
extends|extends
name|ValidationException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|JsonSchema
name|schema
decl_stmt|;
DECL|field|errors
specifier|private
specifier|final
name|Set
argument_list|<
name|ValidationMessage
argument_list|>
name|errors
decl_stmt|;
DECL|method|JsonValidationException (Exchange exchange, JsonSchema schema, Set<ValidationMessage> errors)
specifier|public
name|JsonValidationException
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|JsonSchema
name|schema
parameter_list|,
name|Set
argument_list|<
name|ValidationMessage
argument_list|>
name|errors
parameter_list|)
block|{
name|super
argument_list|(
name|exchange
argument_list|,
literal|"JSon validation error with "
operator|+
name|errors
operator|.
name|size
argument_list|()
operator|+
literal|" errors"
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
block|}
DECL|method|JsonValidationException (Exchange exchange, JsonSchema schema, Exception e)
specifier|public
name|JsonValidationException
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|JsonSchema
name|schema
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|errors
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getSchema ()
specifier|public
name|JsonSchema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
DECL|method|getErrors ()
specifier|public
name|Set
argument_list|<
name|ValidationMessage
argument_list|>
name|getErrors
parameter_list|()
block|{
return|return
name|errors
return|;
block|}
DECL|method|getNumberOfErrors ()
specifier|public
name|int
name|getNumberOfErrors
parameter_list|()
block|{
return|return
name|errors
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

