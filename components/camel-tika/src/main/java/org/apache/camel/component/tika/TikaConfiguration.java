begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.tika
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|TikaConfiguration
specifier|public
class|class
name|TikaConfiguration
block|{
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Operation type"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|operation
specifier|private
name|TikaOperation
name|operation
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"xml"
argument_list|)
DECL|field|tikaParseOutputFormat
specifier|private
name|TikaParseOutputFormat
name|tikaParseOutputFormat
init|=
name|TikaParseOutputFormat
operator|.
name|xml
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Tika Parse Output Encoding"
argument_list|)
DECL|field|tikaParseOutputEncoding
specifier|private
name|String
name|tikaParseOutputEncoding
init|=
name|Charset
operator|.
name|defaultCharset
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Tika Config"
argument_list|)
DECL|field|tikaConfig
specifier|private
name|TikaConfig
name|tikaConfig
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Tika Config Url"
argument_list|)
DECL|field|tikaConfigUri
specifier|private
name|String
name|tikaConfigUri
decl_stmt|;
DECL|method|getOperation ()
specifier|public
name|TikaOperation
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
comment|/**      * Tika Operation - parse or detect      */
DECL|method|setOperation (TikaOperation operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|TikaOperation
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|setOperation (String operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|TikaOperation
operator|.
name|valueOf
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
DECL|method|getTikaParseOutputFormat ()
specifier|public
name|TikaParseOutputFormat
name|getTikaParseOutputFormat
parameter_list|()
block|{
return|return
name|tikaParseOutputFormat
return|;
block|}
comment|/**      * Tika Output Format. Supported output formats.      *<ul>      *<li>xml: Returns Parsed Content as XML.</li>      *<li>html: Returns Parsed Content as HTML.</li>      *<li>text: Returns Parsed Content as Text.</li>      *<li>textMain: Uses the<a href="http://code.google.com/p/boilerpipe/">boilerpipe</a> library to automatically extract the main content from a web page.</li>      *</ul>      */
DECL|method|setTikaParseOutputFormat (TikaParseOutputFormat tikaParseOutputFormat)
specifier|public
name|void
name|setTikaParseOutputFormat
parameter_list|(
name|TikaParseOutputFormat
name|tikaParseOutputFormat
parameter_list|)
block|{
name|this
operator|.
name|tikaParseOutputFormat
operator|=
name|tikaParseOutputFormat
expr_stmt|;
block|}
DECL|method|getTikaParseOutputEncoding ()
specifier|public
name|String
name|getTikaParseOutputEncoding
parameter_list|()
block|{
return|return
name|tikaParseOutputEncoding
return|;
block|}
comment|/**      * Tika Parse Output Encoding - Used to specify the character encoding of the parsed output.        * Defaults to Charset.defaultCharset().      */
DECL|method|setTikaParseOutputEncoding (String tikaParseOutputEncoding)
specifier|public
name|void
name|setTikaParseOutputEncoding
parameter_list|(
name|String
name|tikaParseOutputEncoding
parameter_list|)
block|{
name|this
operator|.
name|tikaParseOutputEncoding
operator|=
name|tikaParseOutputEncoding
expr_stmt|;
block|}
DECL|method|getTikaConfig ()
specifier|public
name|TikaConfig
name|getTikaConfig
parameter_list|()
block|{
return|return
name|tikaConfig
return|;
block|}
comment|/**      * To use a custom Tika config.      */
DECL|method|setTikaConfig (TikaConfig tikaConfig)
specifier|public
name|void
name|setTikaConfig
parameter_list|(
name|TikaConfig
name|tikaConfig
parameter_list|)
block|{
name|this
operator|.
name|tikaConfig
operator|=
name|tikaConfig
expr_stmt|;
block|}
DECL|method|getTikaConfigUri ()
specifier|public
name|String
name|getTikaConfigUri
parameter_list|()
block|{
return|return
name|tikaConfigUri
return|;
block|}
comment|/**      * Tika Config Uri: The URI of tika-config.xml file to use.      */
DECL|method|setTikaConfigUri (String tikaConfigUri)
specifier|public
name|void
name|setTikaConfigUri
parameter_list|(
name|String
name|tikaConfigUri
parameter_list|)
block|{
name|this
operator|.
name|tikaConfigUri
operator|=
name|tikaConfigUri
expr_stmt|;
try|try
block|{
name|this
operator|.
name|tikaConfig
operator|=
operator|new
name|TikaConfig
argument_list|(
name|tikaConfigUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

