begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.yql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yql
operator|.
name|configuration
operator|.
name|YqlConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|text
operator|.
name|IsEmptyString
operator|.
name|emptyString
import|;
end_import

begin_class
DECL|class|YqlComponentTest
specifier|public
class|class
name|YqlComponentTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Rule
DECL|field|thrown
specifier|public
specifier|final
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"yql://query?format=json"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateProducer ()
specifier|public
name|void
name|testCreateProducer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// given
specifier|final
name|Endpoint
name|yqlEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"yql://query?format=json"
argument_list|)
decl_stmt|;
comment|// when
specifier|final
name|Producer
name|producer
init|=
name|yqlEndpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
comment|// then
name|assertNotNull
argument_list|(
name|producer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|producer
operator|instanceof
name|YqlProducer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigurationSetup ()
specifier|public
name|void
name|testConfigurationSetup
parameter_list|()
block|{
comment|// given
specifier|final
name|YqlEndpoint
name|yqlEndpoint
init|=
operator|(
name|YqlEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"yql://query?format=xml&callback=yqlCallback&diagnostics=true"
operator|+
literal|"&debug=true&https=false&throwExceptionOnFailure=false&jsonCompat=new"
argument_list|)
decl_stmt|;
comment|// when
specifier|final
name|YqlConfiguration
name|yqlConfiguration
init|=
name|yqlEndpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// then
name|assertNotNull
argument_list|(
name|yqlConfiguration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"query"
argument_list|,
name|yqlConfiguration
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xml"
argument_list|,
name|yqlConfiguration
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yqlCallback"
argument_list|,
name|yqlConfiguration
operator|.
name|getCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|yqlConfiguration
operator|.
name|isDebug
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|yqlConfiguration
operator|.
name|isDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|yqlConfiguration
operator|.
name|isHttps
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|yqlConfiguration
operator|.
name|isThrowExceptionOnFailure
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigurationSetupDefault ()
specifier|public
name|void
name|testConfigurationSetupDefault
parameter_list|()
block|{
comment|// given
specifier|final
name|YqlEndpoint
name|yqlEndpoint
init|=
operator|(
name|YqlEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"yql://query"
argument_list|)
decl_stmt|;
comment|// when
specifier|final
name|YqlConfiguration
name|yqlConfiguration
init|=
name|yqlEndpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// then
name|assertNotNull
argument_list|(
name|yqlConfiguration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"query"
argument_list|,
name|yqlConfiguration
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"json"
argument_list|,
name|yqlConfiguration
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|yqlConfiguration
operator|.
name|getCallback
argument_list|()
argument_list|,
name|is
argument_list|(
name|emptyString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|yqlConfiguration
operator|.
name|getCrossProduct
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|yqlConfiguration
operator|.
name|isDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|yqlConfiguration
operator|.
name|isDebug
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|yqlConfiguration
operator|.
name|getEnv
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|yqlConfiguration
operator|.
name|getJsonCompat
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|yqlConfiguration
operator|.
name|isThrowExceptionOnFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|yqlConfiguration
operator|.
name|isHttps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateConsumer ()
specifier|public
name|void
name|testCreateConsumer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// then
name|thrown
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// given
specifier|final
name|Endpoint
name|yqlEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"yql://query?format=json"
argument_list|)
decl_stmt|;
comment|// when
name|yqlEndpoint
operator|.
name|createConsumer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

