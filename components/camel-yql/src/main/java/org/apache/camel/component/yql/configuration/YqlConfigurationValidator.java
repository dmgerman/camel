begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.yql.configuration
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yql
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yql
operator|.
name|exception
operator|.
name|YqlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_class
DECL|class|YqlConfigurationValidator
specifier|public
specifier|final
class|class
name|YqlConfigurationValidator
block|{
DECL|method|YqlConfigurationValidator ()
specifier|private
name|YqlConfigurationValidator
parameter_list|()
block|{     }
DECL|method|validateProperties (final YqlConfiguration configuration)
specifier|public
specifier|static
name|void
name|validateProperties
parameter_list|(
specifier|final
name|YqlConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|configuration
operator|.
name|getQuery
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YqlException
argument_list|(
literal|"<query> is not present or not valid!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equalsAny
argument_list|(
name|configuration
operator|.
name|getFormat
argument_list|()
argument_list|,
literal|"json"
argument_list|,
literal|"xml"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YqlException
argument_list|(
literal|"<format> is not valid!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getCrossProduct
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|configuration
operator|.
name|getCrossProduct
argument_list|()
operator|.
name|equals
argument_list|(
literal|"optimized"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YqlException
argument_list|(
literal|"<crossProduct> is not valid!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getJsonCompat
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|configuration
operator|.
name|getJsonCompat
argument_list|()
operator|.
name|equals
argument_list|(
literal|"new"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YqlException
argument_list|(
literal|"<jsonCompat> is not valid!"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

