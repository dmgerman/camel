begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|PostgresConnectorEmbeddedDebeziumConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_comment
comment|/**  * Represents a Debezium PostgresSQL endpoint which is used to capture changes in PostgresSQL database so that that applications can see those changes and respond to them.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"3.0.0"
argument_list|,
name|scheme
operator|=
literal|"debezium-postgres"
argument_list|,
name|title
operator|=
literal|"Debezium PostgresSQL Connector"
argument_list|,
name|syntax
operator|=
literal|"debezium-postgres:name"
argument_list|,
name|label
operator|=
literal|"database,sql,postgres"
argument_list|,
name|consumerOnly
operator|=
literal|true
argument_list|)
DECL|class|DebeziumPostgresEndpoint
specifier|public
specifier|final
class|class
name|DebeziumPostgresEndpoint
extends|extends
name|DebeziumEndpoint
argument_list|<
name|PostgresConnectorEmbeddedDebeziumConfiguration
argument_list|>
block|{
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|PostgresConnectorEmbeddedDebeziumConfiguration
name|configuration
decl_stmt|;
DECL|method|DebeziumPostgresEndpoint (final String uri, final DebeziumPostgresComponent component, final PostgresConnectorEmbeddedDebeziumConfiguration configuration)
specifier|public
name|DebeziumPostgresEndpoint
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|DebeziumPostgresComponent
name|component
parameter_list|,
specifier|final
name|PostgresConnectorEmbeddedDebeziumConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|DebeziumPostgresEndpoint ()
specifier|public
name|DebeziumPostgresEndpoint
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|PostgresConnectorEmbeddedDebeziumConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
annotation|@
name|Override
DECL|method|setConfiguration (final PostgresConnectorEmbeddedDebeziumConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
specifier|final
name|PostgresConnectorEmbeddedDebeziumConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
block|}
end_class

end_unit

