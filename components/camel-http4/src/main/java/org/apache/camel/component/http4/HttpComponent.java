begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|SSLContextParametersAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|VerifiableComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpCommonComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpRestHeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|UrlRewrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestProducerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestProducerFactoryHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CookieStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|RegistryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|HttpClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|socket
operator|.
name|ConnectionSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|socket
operator|.
name|PlainConnectionSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ssl
operator|.
name|DefaultHostnameVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ssl
operator|.
name|SSLConnectionSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|PoolingHttpClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ssl
operator|.
name|SSLContexts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Defines the<a href="http://camel.apache.org/http4.html">HTTP4  * Component</a>  *  * @version   */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"verifiers"
argument_list|,
name|enums
operator|=
literal|"parameters,connectivity"
argument_list|)
DECL|class|HttpComponent
specifier|public
class|class
name|HttpComponent
extends|extends
name|HttpCommonComponent
implements|implements
name|RestProducerFactory
implements|,
name|VerifiableComponent
implements|,
name|SSLContextParametersAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpComponent
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use the custom HttpClientConfigurer to perform configuration of the HttpClient that will be used."
argument_list|)
DECL|field|httpClientConfigurer
specifier|protected
name|HttpClientConfigurer
name|httpClientConfigurer
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use a custom and shared HttpClientConnectionManager to manage connections."
operator|+
literal|" If this has been configured then this is always used for all endpoints created by this component."
argument_list|)
DECL|field|clientConnectionManager
specifier|protected
name|HttpClientConnectionManager
name|clientConnectionManager
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use a custom org.apache.http.protocol.HttpContext when executing requests."
argument_list|)
DECL|field|httpContext
specifier|protected
name|HttpContext
name|httpContext
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|description
operator|=
literal|"To configure security using SSLContextParameters."
operator|+
literal|" Important: Only one instance of org.apache.camel.util.jsse.SSLContextParameters is supported per HttpComponent."
operator|+
literal|" If you need to use 2 or more different instances, you need to define a new HttpComponent per instance you need."
argument_list|)
DECL|field|sslContextParameters
specifier|protected
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|description
operator|=
literal|"To use a custom X509HostnameVerifier such as DefaultHostnameVerifier or NoopHostnameVerifier."
argument_list|)
DECL|field|x509HostnameVerifier
specifier|protected
name|HostnameVerifier
name|x509HostnameVerifier
init|=
operator|new
name|DefaultHostnameVerifier
argument_list|()
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"To use a custom org.apache.http.client.CookieStore."
operator|+
literal|" By default the org.apache.http.impl.client.BasicCookieStore is used which is an in-memory only cookie store."
operator|+
literal|" Notice if bridgeEndpoint=true then the cookie store is forced to be a noop cookie store as cookie"
operator|+
literal|" shouldn't be stored as we are just bridging (eg acting as a proxy)."
argument_list|)
DECL|field|cookieStore
specifier|protected
name|CookieStore
name|cookieStore
decl_stmt|;
comment|// timeout
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"timeout"
argument_list|,
name|defaultValue
operator|=
literal|"-1"
argument_list|,
name|description
operator|=
literal|"The timeout in milliseconds used when requesting a connection"
operator|+
literal|" from the connection manager. A timeout value of zero is interpreted as an infinite timeout."
operator|+
literal|" A timeout value of zero is interpreted as an infinite timeout."
operator|+
literal|" A negative value is interpreted as undefined (system default)."
argument_list|)
DECL|field|connectionRequestTimeout
specifier|protected
name|int
name|connectionRequestTimeout
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"timeout"
argument_list|,
name|defaultValue
operator|=
literal|"-1"
argument_list|,
name|description
operator|=
literal|"Determines the timeout in milliseconds until a connection is established."
operator|+
literal|" A timeout value of zero is interpreted as an infinite timeout."
operator|+
literal|" A timeout value of zero is interpreted as an infinite timeout."
operator|+
literal|" A negative value is interpreted as undefined (system default)."
argument_list|)
DECL|field|connectTimeout
specifier|protected
name|int
name|connectTimeout
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"timeout"
argument_list|,
name|defaultValue
operator|=
literal|"-1"
argument_list|,
name|description
operator|=
literal|"Defines the socket timeout in milliseconds,"
operator|+
literal|" which is the timeout for waiting for data  or, put differently,"
operator|+
literal|" a maximum period inactivity between two consecutive data packets)."
operator|+
literal|" A timeout value of zero is interpreted as an infinite timeout."
operator|+
literal|" A negative value is interpreted as undefined (system default)."
argument_list|)
DECL|field|socketTimeout
specifier|protected
name|int
name|socketTimeout
init|=
operator|-
literal|1
decl_stmt|;
comment|// options to the default created http connection manager
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"The maximum number of connections."
argument_list|)
DECL|field|maxTotalConnections
specifier|protected
name|int
name|maxTotalConnections
init|=
literal|200
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"20"
argument_list|,
name|description
operator|=
literal|"The maximum number of connections per route."
argument_list|)
DECL|field|connectionsPerRoute
specifier|protected
name|int
name|connectionsPerRoute
init|=
literal|20
decl_stmt|;
comment|// It's MILLISECONDS, the default value is always keep alive
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"The time for connection to live, the time unit is millisecond, the default value is always keep alive."
argument_list|)
DECL|field|connectionTimeToLive
specifier|protected
name|long
name|connectionTimeToLive
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|,
name|description
operator|=
literal|"Enable usage of global SSL context parameters."
argument_list|)
DECL|field|useGlobalSslContextParameters
specifier|private
name|boolean
name|useGlobalSslContextParameters
decl_stmt|;
DECL|method|HttpComponent ()
specifier|public
name|HttpComponent
parameter_list|()
block|{
name|this
argument_list|(
name|HttpEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|HttpComponent (Class<? extends HttpEndpoint> endpointClass)
specifier|public
name|HttpComponent
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|HttpEndpoint
argument_list|>
name|endpointClass
parameter_list|)
block|{
name|super
argument_list|(
name|endpointClass
argument_list|)
expr_stmt|;
name|registerExtension
argument_list|(
name|HttpComponentVerifierExtension
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the HttpClientConfigurer based on the given parameters      *      * @param parameters the map of parameters      * @param secure whether the endpoint is secure (eg https4)      * @return the configurer      * @throws Exception is thrown if error creating configurer      */
DECL|method|createHttpClientConfigurer (Map<String, Object> parameters, boolean secure)
specifier|protected
name|HttpClientConfigurer
name|createHttpClientConfigurer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|boolean
name|secure
parameter_list|)
throws|throws
name|Exception
block|{
comment|// prefer to use endpoint configured over component configured
name|HttpClientConfigurer
name|configurer
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpClientConfigurer"
argument_list|,
name|HttpClientConfigurer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|configurer
operator|==
literal|null
condition|)
block|{
comment|// fallback to component configured
name|configurer
operator|=
name|getHttpClientConfigurer
argument_list|()
expr_stmt|;
block|}
name|configurer
operator|=
name|configureBasicAuthentication
argument_list|(
name|parameters
argument_list|,
name|configurer
argument_list|)
expr_stmt|;
name|configurer
operator|=
name|configureHttpProxy
argument_list|(
name|parameters
argument_list|,
name|configurer
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|configurer
return|;
block|}
DECL|method|configureBasicAuthentication (Map<String, Object> parameters, HttpClientConfigurer configurer)
specifier|private
name|HttpClientConfigurer
name|configureBasicAuthentication
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|HttpClientConfigurer
name|configurer
parameter_list|)
block|{
name|String
name|authUsername
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"authUsername"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|authPassword
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"authPassword"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authUsername
operator|!=
literal|null
operator|&&
name|authPassword
operator|!=
literal|null
condition|)
block|{
name|String
name|authDomain
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"authDomain"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|authHost
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"authHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|CompositeHttpConfigurer
operator|.
name|combineConfigurers
argument_list|(
name|configurer
argument_list|,
operator|new
name|BasicAuthenticationHttpClientConfigurer
argument_list|(
name|authUsername
argument_list|,
name|authPassword
argument_list|,
name|authDomain
argument_list|,
name|authHost
argument_list|)
argument_list|)
return|;
block|}
return|return
name|configurer
return|;
block|}
DECL|method|configureHttpProxy (Map<String, Object> parameters, HttpClientConfigurer configurer, boolean secure)
specifier|private
name|HttpClientConfigurer
name|configureHttpProxy
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|HttpClientConfigurer
name|configurer
parameter_list|,
name|boolean
name|secure
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|proxyAuthScheme
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthScheme"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyAuthScheme
operator|==
literal|null
condition|)
block|{
comment|// fallback and use either http or https depending on secure
name|proxyAuthScheme
operator|=
name|secure
condition|?
literal|"https"
else|:
literal|"http"
expr_stmt|;
block|}
name|String
name|proxyAuthHost
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|proxyAuthPort
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthPort"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyAuthHost
operator|!=
literal|null
operator|&&
name|proxyAuthPort
operator|!=
literal|null
condition|)
block|{
name|String
name|proxyAuthUsername
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthUsername"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|proxyAuthPassword
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthPassword"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|proxyAuthDomain
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthDomain"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|proxyAuthNtHost
init|=
name|getParameter
argument_list|(
name|parameters
argument_list|,
literal|"proxyAuthNtHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyAuthUsername
operator|!=
literal|null
operator|&&
name|proxyAuthPassword
operator|!=
literal|null
condition|)
block|{
return|return
name|CompositeHttpConfigurer
operator|.
name|combineConfigurers
argument_list|(
name|configurer
argument_list|,
operator|new
name|ProxyHttpClientConfigurer
argument_list|(
name|proxyAuthHost
argument_list|,
name|proxyAuthPort
argument_list|,
name|proxyAuthScheme
argument_list|,
name|proxyAuthUsername
argument_list|,
name|proxyAuthPassword
argument_list|,
name|proxyAuthDomain
argument_list|,
name|proxyAuthNtHost
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CompositeHttpConfigurer
operator|.
name|combineConfigurers
argument_list|(
name|configurer
argument_list|,
operator|new
name|ProxyHttpClientConfigurer
argument_list|(
name|proxyAuthHost
argument_list|,
name|proxyAuthPort
argument_list|,
name|proxyAuthScheme
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|configurer
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientParameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientOptions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// timeout values can be configured on both component and endpoint level, where endpoint take priority
name|int
name|val
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"connectionRequestTimeout"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|connectionRequestTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
operator|-
literal|1
condition|)
block|{
name|httpClientOptions
operator|.
name|put
argument_list|(
literal|"connectionRequestTimeout"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"connectTimeout"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
operator|-
literal|1
condition|)
block|{
name|httpClientOptions
operator|.
name|put
argument_list|(
literal|"connectTimeout"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"socketTimeout"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
operator|-
literal|1
condition|)
block|{
name|httpClientOptions
operator|.
name|put
argument_list|(
literal|"socketTimeout"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HttpClientBuilder
name|clientBuilder
init|=
name|createHttpClientBuilder
argument_list|(
name|uri
argument_list|,
name|parameters
argument_list|,
name|httpClientOptions
argument_list|)
decl_stmt|;
name|HttpBinding
name|httpBinding
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpBinding"
argument_list|,
name|HttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpContext
name|httpContext
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpContext"
argument_list|,
name|HttpContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|SSLContextParameters
name|sslContextParameters
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"sslContextParameters"
argument_list|,
name|SSLContextParameters
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslContextParameters
operator|==
literal|null
condition|)
block|{
name|sslContextParameters
operator|=
name|getSslContextParameters
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sslContextParameters
operator|==
literal|null
condition|)
block|{
name|sslContextParameters
operator|=
name|retrieveGlobalSslContextParameters
argument_list|()
expr_stmt|;
block|}
name|String
name|httpMethodRestrict
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"httpMethodRestrict"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|HeaderFilterStrategy
name|headerFilterStrategy
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"headerFilterStrategy"
argument_list|,
name|HeaderFilterStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
name|UrlRewrite
name|urlRewrite
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"urlRewrite"
argument_list|,
name|UrlRewrite
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|secure
init|=
name|HttpHelper
operator|.
name|isSecureConnection
argument_list|(
name|uri
argument_list|)
operator|||
name|sslContextParameters
operator|!=
literal|null
decl_stmt|;
comment|// need to set scheme on address uri depending on if its secure or not
name|String
name|addressUri
init|=
operator|(
name|secure
condition|?
literal|"https://"
else|:
literal|"http://"
operator|)
operator|+
name|remaining
decl_stmt|;
name|addressUri
operator|=
name|UnsafeUriCharactersEncoder
operator|.
name|encodeHttpURI
argument_list|(
name|addressUri
argument_list|)
expr_stmt|;
name|URI
name|uriHttpUriAddress
init|=
operator|new
name|URI
argument_list|(
name|addressUri
argument_list|)
decl_stmt|;
comment|// validate http uri that end-user did not duplicate the http part that can be a common error
name|int
name|pos
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|"//"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|part
init|=
name|uri
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
literal|"http:"
argument_list|)
operator|||
name|part
operator|.
name|startsWith
argument_list|(
literal|"https:"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
literal|"The uri part is not configured correctly. You have duplicated the http(s) protocol."
argument_list|)
throw|;
block|}
block|}
comment|// create the configurer to use for this endpoint
name|HttpClientConfigurer
name|configurer
init|=
name|createHttpClientConfigurer
argument_list|(
name|parameters
argument_list|,
name|secure
argument_list|)
decl_stmt|;
name|URI
name|endpointUri
init|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
name|uriHttpUriAddress
argument_list|,
name|httpClientParameters
argument_list|)
decl_stmt|;
comment|// the endpoint uri should use the component name as scheme, so we need to re-create it once more
name|String
name|scheme
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|uri
argument_list|,
literal|"://"
argument_list|)
decl_stmt|;
name|endpointUri
operator|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
name|endpointUri
operator|.
name|getUserInfo
argument_list|()
argument_list|,
name|endpointUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|endpointUri
operator|.
name|getPort
argument_list|()
argument_list|,
name|endpointUri
operator|.
name|getPath
argument_list|()
argument_list|,
name|endpointUri
operator|.
name|getQuery
argument_list|()
argument_list|,
name|endpointUri
operator|.
name|getFragment
argument_list|()
argument_list|)
argument_list|,
name|httpClientParameters
argument_list|)
expr_stmt|;
comment|// create the endpoint and set the http uri to be null
name|String
name|endpointUriString
init|=
name|endpointUri
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating endpoint uri {}"
argument_list|,
name|endpointUriString
argument_list|)
expr_stmt|;
specifier|final
name|HttpClientConnectionManager
name|localConnectionManager
init|=
name|createConnectionManager
argument_list|(
name|parameters
argument_list|,
name|sslContextParameters
argument_list|)
decl_stmt|;
name|HttpEndpoint
name|endpoint
init|=
operator|new
name|HttpEndpoint
argument_list|(
name|endpointUriString
argument_list|,
name|this
argument_list|,
name|clientBuilder
argument_list|,
name|localConnectionManager
argument_list|,
name|configurer
argument_list|)
decl_stmt|;
comment|// configure the endpoint with the common configuration from the component
if|if
condition|(
name|getHttpConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|getHttpConfiguration
argument_list|()
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|urlRewrite
operator|!=
literal|null
condition|)
block|{
comment|// let CamelContext deal with the lifecycle of the url rewrite
comment|// this ensures its being shutdown when Camel shutdown etc.
name|getCamelContext
argument_list|()
operator|.
name|addService
argument_list|(
name|urlRewrite
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setUrlRewrite
argument_list|(
name|urlRewrite
argument_list|)
expr_stmt|;
block|}
comment|// configure the endpoint
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// we can not change the port of an URI, we must create a new one with an explicit port value
name|URI
name|httpUri
init|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
operator|new
name|URI
argument_list|(
name|uriHttpUriAddress
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uriHttpUriAddress
operator|.
name|getUserInfo
argument_list|()
argument_list|,
name|uriHttpUriAddress
operator|.
name|getHost
argument_list|()
argument_list|,
name|uriHttpUriAddress
operator|.
name|getPort
argument_list|()
argument_list|,
name|uriHttpUriAddress
operator|.
name|getPath
argument_list|()
argument_list|,
name|uriHttpUriAddress
operator|.
name|getQuery
argument_list|()
argument_list|,
name|uriHttpUriAddress
operator|.
name|getFragment
argument_list|()
argument_list|)
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setHttpUri
argument_list|(
name|httpUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|headerFilterStrategy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setEndpointHeaderFilterStrategy
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setBinding
argument_list|(
name|getHttpBinding
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpBinding
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setBinding
argument_list|(
name|httpBinding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpMethodRestrict
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setHttpMethodRestrict
argument_list|(
name|httpMethodRestrict
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setHttpContext
argument_list|(
name|getHttpContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpContext
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setHttpContext
argument_list|(
name|httpContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getCookieStore
argument_list|()
operator|==
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setCookieStore
argument_list|(
name|getCookieStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setHttpClientOptions
argument_list|(
name|httpClientOptions
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|createConnectionManager (final Map<String, Object> parameters, final SSLContextParameters sslContextParameters)
specifier|protected
name|HttpClientConnectionManager
name|createConnectionManager
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
specifier|final
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
if|if
condition|(
name|clientConnectionManager
operator|!=
literal|null
condition|)
block|{
return|return
name|clientConnectionManager
return|;
block|}
specifier|final
name|HostnameVerifier
name|resolvedHostnameVerifier
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"x509HostnameVerifier"
argument_list|,
name|HostnameVerifier
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|HostnameVerifier
name|hostnameVerifier
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|resolvedHostnameVerifier
argument_list|)
operator|.
name|orElse
argument_list|(
name|x509HostnameVerifier
argument_list|)
decl_stmt|;
comment|// need to check the parameters of maxTotalConnections and connectionsPerRoute
specifier|final
name|int
name|maxTotalConnections
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"maxTotalConnections"
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|connectionsPerRoute
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"connectionsPerRoute"
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Registry
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|connectionRegistry
init|=
name|createConnectionRegistry
argument_list|(
name|hostnameVerifier
argument_list|,
name|sslContextParameters
argument_list|)
decl_stmt|;
return|return
name|createConnectionManager
argument_list|(
name|connectionRegistry
argument_list|,
name|maxTotalConnections
argument_list|,
name|connectionsPerRoute
argument_list|)
return|;
block|}
DECL|method|createHttpClientBuilder (final String uri, final Map<String, Object> parameters, final Map<String, Object> httpClientOptions)
specifier|protected
name|HttpClientBuilder
name|createHttpClientBuilder
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientOptions
parameter_list|)
throws|throws
name|Exception
block|{
comment|// http client can be configured from URI options
name|HttpClientBuilder
name|clientBuilder
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// allow the builder pattern
name|httpClientOptions
operator|.
name|putAll
argument_list|(
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
literal|"httpClient."
argument_list|)
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|clientBuilder
argument_list|,
name|httpClientOptions
argument_list|)
expr_stmt|;
comment|// set the Request configure this way and allow the builder pattern
name|RequestConfig
operator|.
name|Builder
name|requestConfigBuilder
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|requestConfigBuilder
argument_list|,
name|httpClientOptions
argument_list|)
expr_stmt|;
name|clientBuilder
operator|.
name|setDefaultRequestConfig
argument_list|(
name|requestConfigBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate that we could resolve all httpClient. parameters as this component is lenient
name|validateParameters
argument_list|(
name|uri
argument_list|,
name|httpClientOptions
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|clientBuilder
return|;
block|}
DECL|method|createConnectionRegistry (HostnameVerifier x509HostnameVerifier, SSLContextParameters sslContextParams)
specifier|protected
name|Registry
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|createConnectionRegistry
parameter_list|(
name|HostnameVerifier
name|x509HostnameVerifier
parameter_list|,
name|SSLContextParameters
name|sslContextParams
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
comment|// create the default connection registry to use
name|RegistryBuilder
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|builder
init|=
name|RegistryBuilder
operator|.
expr|<
name|ConnectionSocketFactory
operator|>
name|create
argument_list|()
decl_stmt|;
name|builder
operator|.
name|register
argument_list|(
literal|"http"
argument_list|,
name|PlainConnectionSocketFactory
operator|.
name|getSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|register
argument_list|(
literal|"http4"
argument_list|,
name|PlainConnectionSocketFactory
operator|.
name|getSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sslContextParams
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|register
argument_list|(
literal|"https"
argument_list|,
operator|new
name|SSLConnectionSocketFactory
argument_list|(
name|sslContextParams
operator|.
name|createSSLContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|,
name|x509HostnameVerifier
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|register
argument_list|(
literal|"https4"
argument_list|,
operator|new
name|SSLConnectionSocketFactory
argument_list|(
name|sslContextParams
operator|.
name|createSSLContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|,
name|x509HostnameVerifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|register
argument_list|(
literal|"https4"
argument_list|,
operator|new
name|SSLConnectionSocketFactory
argument_list|(
name|SSLContexts
operator|.
name|createDefault
argument_list|()
argument_list|,
name|x509HostnameVerifier
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|register
argument_list|(
literal|"https"
argument_list|,
operator|new
name|SSLConnectionSocketFactory
argument_list|(
name|SSLContexts
operator|.
name|createDefault
argument_list|()
argument_list|,
name|x509HostnameVerifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createConnectionManager (Registry<ConnectionSocketFactory> registry)
specifier|protected
name|HttpClientConnectionManager
name|createConnectionManager
parameter_list|(
name|Registry
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|registry
parameter_list|)
block|{
return|return
name|createConnectionManager
argument_list|(
name|registry
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|createConnectionManager (Registry<ConnectionSocketFactory> registry, int maxTotalConnections, int connectionsPerRoute)
specifier|protected
name|HttpClientConnectionManager
name|createConnectionManager
parameter_list|(
name|Registry
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|registry
parameter_list|,
name|int
name|maxTotalConnections
parameter_list|,
name|int
name|connectionsPerRoute
parameter_list|)
block|{
comment|// setup the connection live time
name|PoolingHttpClientConnectionManager
name|answer
init|=
operator|new
name|PoolingHttpClientConnectionManager
argument_list|(
name|registry
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|getConnectionTimeToLive
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|int
name|localMaxTotalConnections
init|=
name|maxTotalConnections
decl_stmt|;
if|if
condition|(
name|localMaxTotalConnections
operator|==
literal|0
condition|)
block|{
name|localMaxTotalConnections
operator|=
name|getMaxTotalConnections
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|localMaxTotalConnections
operator|>
literal|0
condition|)
block|{
name|answer
operator|.
name|setMaxTotal
argument_list|(
name|localMaxTotalConnections
argument_list|)
expr_stmt|;
block|}
name|int
name|localConnectionsPerRoute
init|=
name|connectionsPerRoute
decl_stmt|;
if|if
condition|(
name|localConnectionsPerRoute
operator|==
literal|0
condition|)
block|{
name|localConnectionsPerRoute
operator|=
name|getConnectionsPerRoute
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|localConnectionsPerRoute
operator|>
literal|0
condition|)
block|{
name|answer
operator|.
name|setDefaultMaxPerRoute
argument_list|(
name|localConnectionsPerRoute
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created ClientConnectionManager "
operator|+
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|useIntrospectionOnEndpoint ()
specifier|protected
name|boolean
name|useIntrospectionOnEndpoint
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer (CamelContext camelContext, String host, String verb, String basePath, String uriTemplate, String queryParameters, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Producer
name|createProducer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|basePath
parameter_list|,
name|String
name|uriTemplate
parameter_list|,
name|String
name|queryParameters
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// avoid leading slash
name|basePath
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
name|uriTemplate
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|uriTemplate
argument_list|)
expr_stmt|;
comment|// replace http with http4 in the host part
name|host
operator|=
name|host
operator|.
name|replaceFirst
argument_list|(
literal|":"
argument_list|,
literal|"4:"
argument_list|)
expr_stmt|;
comment|// get the endpoint
name|String
name|url
init|=
name|host
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|url
operator|+=
literal|"/"
operator|+
name|basePath
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|uriTemplate
argument_list|)
condition|)
block|{
name|url
operator|+=
literal|"/"
operator|+
name|uriTemplate
expr_stmt|;
block|}
name|RestConfiguration
name|config
init|=
name|configuration
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
literal|"http4"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// build query string, and append any endpoint configuration properties
if|if
condition|(
name|config
operator|.
name|getComponent
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getComponent
argument_list|()
operator|.
name|equals
argument_list|(
literal|"http4"
argument_list|)
condition|)
block|{
comment|// setup endpoint options
if|if
condition|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// get the endpoint
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
comment|// there are cases where we might end up here without component being created beforehand
comment|// we need to abide by the component properties specified in the parameters when creating
comment|// the component, one such case is when we switch from "http4" to "https4" component name
name|RestProducerFactoryHelper
operator|.
name|setupComponentFor
argument_list|(
name|url
argument_list|,
name|camelContext
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"component"
argument_list|)
argument_list|)
expr_stmt|;
name|HttpEndpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|url
argument_list|,
name|HttpEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
operator|&&
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setProperties
argument_list|(
name|camelContext
argument_list|,
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
name|String
name|path
init|=
name|uriTemplate
operator|!=
literal|null
condition|?
name|uriTemplate
else|:
name|basePath
decl_stmt|;
name|endpoint
operator|.
name|setHeaderFilterStrategy
argument_list|(
operator|new
name|HttpRestHeaderFilterStrategy
argument_list|(
name|path
argument_list|,
name|queryParameters
argument_list|)
argument_list|)
expr_stmt|;
comment|// the endpoint must be started before creating the producer
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|endpoint
operator|.
name|createProducer
argument_list|()
return|;
block|}
DECL|method|getHttpClientConfigurer ()
specifier|public
name|HttpClientConfigurer
name|getHttpClientConfigurer
parameter_list|()
block|{
return|return
name|httpClientConfigurer
return|;
block|}
comment|/**      * To use the custom HttpClientConfigurer to perform configuration of the HttpClient that will be used.      */
DECL|method|setHttpClientConfigurer (HttpClientConfigurer httpClientConfigurer)
specifier|public
name|void
name|setHttpClientConfigurer
parameter_list|(
name|HttpClientConfigurer
name|httpClientConfigurer
parameter_list|)
block|{
name|this
operator|.
name|httpClientConfigurer
operator|=
name|httpClientConfigurer
expr_stmt|;
block|}
DECL|method|getClientConnectionManager ()
specifier|public
name|HttpClientConnectionManager
name|getClientConnectionManager
parameter_list|()
block|{
return|return
name|clientConnectionManager
return|;
block|}
comment|/**      * To use a custom and shared HttpClientConnectionManager to manage connections.      * If this has been configured then this is always used for all endpoints created by this component.      */
DECL|method|setClientConnectionManager (HttpClientConnectionManager clientConnectionManager)
specifier|public
name|void
name|setClientConnectionManager
parameter_list|(
name|HttpClientConnectionManager
name|clientConnectionManager
parameter_list|)
block|{
name|this
operator|.
name|clientConnectionManager
operator|=
name|clientConnectionManager
expr_stmt|;
block|}
DECL|method|getHttpContext ()
specifier|public
name|HttpContext
name|getHttpContext
parameter_list|()
block|{
return|return
name|httpContext
return|;
block|}
comment|/**      * To use a custom org.apache.http.protocol.HttpContext when executing requests.      */
DECL|method|setHttpContext (HttpContext httpContext)
specifier|public
name|void
name|setHttpContext
parameter_list|(
name|HttpContext
name|httpContext
parameter_list|)
block|{
name|this
operator|.
name|httpContext
operator|=
name|httpContext
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
comment|/**      * To configure security using SSLContextParameters.      * Important: Only one instance of org.apache.camel.util.jsse.SSLContextParameters is supported per HttpComponent.      * If you need to use 2 or more different instances, you need to define a new HttpComponent per instance you need.      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isUseGlobalSslContextParameters ()
specifier|public
name|boolean
name|isUseGlobalSslContextParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|useGlobalSslContextParameters
return|;
block|}
comment|/**      * Enable usage of global SSL context parameters.      */
annotation|@
name|Override
DECL|method|setUseGlobalSslContextParameters (boolean useGlobalSslContextParameters)
specifier|public
name|void
name|setUseGlobalSslContextParameters
parameter_list|(
name|boolean
name|useGlobalSslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|useGlobalSslContextParameters
operator|=
name|useGlobalSslContextParameters
expr_stmt|;
block|}
DECL|method|getX509HostnameVerifier ()
specifier|public
name|HostnameVerifier
name|getX509HostnameVerifier
parameter_list|()
block|{
return|return
name|x509HostnameVerifier
return|;
block|}
comment|/**      * To use a custom X509HostnameVerifier such as {@link DefaultHostnameVerifier}      * or {@link org.apache.http.conn.ssl.NoopHostnameVerifier}.      */
DECL|method|setX509HostnameVerifier (HostnameVerifier x509HostnameVerifier)
specifier|public
name|void
name|setX509HostnameVerifier
parameter_list|(
name|HostnameVerifier
name|x509HostnameVerifier
parameter_list|)
block|{
name|this
operator|.
name|x509HostnameVerifier
operator|=
name|x509HostnameVerifier
expr_stmt|;
block|}
DECL|method|getMaxTotalConnections ()
specifier|public
name|int
name|getMaxTotalConnections
parameter_list|()
block|{
return|return
name|maxTotalConnections
return|;
block|}
comment|/**      * The maximum number of connections.      */
DECL|method|setMaxTotalConnections (int maxTotalConnections)
specifier|public
name|void
name|setMaxTotalConnections
parameter_list|(
name|int
name|maxTotalConnections
parameter_list|)
block|{
name|this
operator|.
name|maxTotalConnections
operator|=
name|maxTotalConnections
expr_stmt|;
block|}
DECL|method|getConnectionsPerRoute ()
specifier|public
name|int
name|getConnectionsPerRoute
parameter_list|()
block|{
return|return
name|connectionsPerRoute
return|;
block|}
comment|/**      * The maximum number of connections per route.      */
DECL|method|setConnectionsPerRoute (int connectionsPerRoute)
specifier|public
name|void
name|setConnectionsPerRoute
parameter_list|(
name|int
name|connectionsPerRoute
parameter_list|)
block|{
name|this
operator|.
name|connectionsPerRoute
operator|=
name|connectionsPerRoute
expr_stmt|;
block|}
DECL|method|getConnectionTimeToLive ()
specifier|public
name|long
name|getConnectionTimeToLive
parameter_list|()
block|{
return|return
name|connectionTimeToLive
return|;
block|}
comment|/**      * The time for connection to live, the time unit is millisecond, the default value is always keep alive.      */
DECL|method|setConnectionTimeToLive (long connectionTimeToLive)
specifier|public
name|void
name|setConnectionTimeToLive
parameter_list|(
name|long
name|connectionTimeToLive
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeToLive
operator|=
name|connectionTimeToLive
expr_stmt|;
block|}
DECL|method|getCookieStore ()
specifier|public
name|CookieStore
name|getCookieStore
parameter_list|()
block|{
return|return
name|cookieStore
return|;
block|}
comment|/**      * To use a custom org.apache.http.client.CookieStore.      * By default the org.apache.http.impl.client.BasicCookieStore is used which is an in-memory only cookie store.      * Notice if bridgeEndpoint=true then the cookie store is forced to be a noop cookie store as cookie      * shouldn't be stored as we are just bridging (eg acting as a proxy).      */
DECL|method|setCookieStore (CookieStore cookieStore)
specifier|public
name|void
name|setCookieStore
parameter_list|(
name|CookieStore
name|cookieStore
parameter_list|)
block|{
name|this
operator|.
name|cookieStore
operator|=
name|cookieStore
expr_stmt|;
block|}
DECL|method|getConnectionRequestTimeout ()
specifier|public
name|int
name|getConnectionRequestTimeout
parameter_list|()
block|{
return|return
name|connectionRequestTimeout
return|;
block|}
comment|/**      * The timeout in milliseconds used when requesting a connection      * from the connection manager. A timeout value of zero is interpreted      * as an infinite timeout.      *<p>      * A timeout value of zero is interpreted as an infinite timeout.      * A negative value is interpreted as undefined (system default).      *</p>      *<p>      * Default: {@code -1}      *</p>      */
DECL|method|setConnectionRequestTimeout (int connectionRequestTimeout)
specifier|public
name|void
name|setConnectionRequestTimeout
parameter_list|(
name|int
name|connectionRequestTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionRequestTimeout
operator|=
name|connectionRequestTimeout
expr_stmt|;
block|}
DECL|method|getConnectTimeout ()
specifier|public
name|int
name|getConnectTimeout
parameter_list|()
block|{
return|return
name|connectTimeout
return|;
block|}
comment|/**      * Determines the timeout in milliseconds until a connection is established.      * A timeout value of zero is interpreted as an infinite timeout.      *<p>      * A timeout value of zero is interpreted as an infinite timeout.      * A negative value is interpreted as undefined (system default).      *</p>      *<p>      * Default: {@code -1}      *</p>      */
DECL|method|setConnectTimeout (int connectTimeout)
specifier|public
name|void
name|setConnectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectTimeout
operator|=
name|connectTimeout
expr_stmt|;
block|}
DECL|method|getSocketTimeout ()
specifier|public
name|int
name|getSocketTimeout
parameter_list|()
block|{
return|return
name|socketTimeout
return|;
block|}
comment|/**      * Defines the socket timeout ({@code SO_TIMEOUT}) in milliseconds,      * which is the timeout for waiting for data  or, put differently,      * a maximum period inactivity between two consecutive data packets).      *<p>      * A timeout value of zero is interpreted as an infinite timeout.      * A negative value is interpreted as undefined (system default).      *</p>      *<p>      * Default: {@code -1}      *</p>      */
DECL|method|setSocketTimeout (int socketTimeout)
specifier|public
name|void
name|setSocketTimeout
parameter_list|(
name|int
name|socketTimeout
parameter_list|)
block|{
name|this
operator|.
name|socketTimeout
operator|=
name|socketTimeout
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|public
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|public
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// shutdown connection manager
if|if
condition|(
name|clientConnectionManager
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down ClientConnectionManager: "
operator|+
name|clientConnectionManager
argument_list|)
expr_stmt|;
name|clientConnectionManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|clientConnectionManager
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVerifier ()
specifier|public
name|ComponentVerifier
name|getVerifier
parameter_list|()
block|{
return|return
parameter_list|(
name|scope
parameter_list|,
name|parameters
parameter_list|)
lambda|->
name|getExtension
argument_list|(
name|ComponentVerifierExtension
operator|.
name|class
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|UnsupportedOperationException
operator|::
operator|new
argument_list|)
operator|.
name|verify
argument_list|(
name|scope
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
end_class

end_unit

