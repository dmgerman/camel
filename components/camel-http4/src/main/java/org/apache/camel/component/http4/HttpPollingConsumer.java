begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|PollingConsumerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|protocol
operator|.
name|HttpClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|auth
operator|.
name|BasicScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_comment
comment|/**  * A polling HTTP consumer which by default performs a GET  *  * @version   */
end_comment

begin_class
DECL|class|HttpPollingConsumer
specifier|public
class|class
name|HttpPollingConsumer
extends|extends
name|PollingConsumerSupport
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|HttpEndpoint
name|endpoint
decl_stmt|;
DECL|field|httpClient
specifier|private
name|HttpClient
name|httpClient
decl_stmt|;
DECL|field|httpContext
specifier|private
name|HttpContext
name|httpContext
decl_stmt|;
DECL|method|HttpPollingConsumer (HttpEndpoint endpoint)
specifier|public
name|HttpPollingConsumer
parameter_list|(
name|HttpEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|httpContext
operator|=
name|endpoint
operator|.
name|getHttpContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpClient
operator|=
name|endpoint
operator|.
name|getHttpClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|HttpEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|HttpEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|receive ()
specifier|public
name|Exchange
name|receive
parameter_list|()
block|{
return|return
name|doReceive
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|receive (long timeout)
specifier|public
name|Exchange
name|receive
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
return|return
name|doReceive
argument_list|(
operator|(
name|int
operator|)
name|timeout
argument_list|)
return|;
block|}
DECL|method|receiveNoWait ()
specifier|public
name|Exchange
name|receiveNoWait
parameter_list|()
block|{
return|return
name|doReceive
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|doReceive (int timeout)
specifier|protected
name|Exchange
name|doReceive
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|HttpRequestBase
name|method
init|=
name|createMethod
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|HttpClientContext
name|httpClientContext
init|=
operator|new
name|HttpClientContext
argument_list|()
decl_stmt|;
comment|// set optional timeout in millis
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|RequestConfig
name|requestConfig
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setSocketTimeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|httpClientContext
operator|.
name|setRequestConfig
argument_list|(
name|requestConfig
argument_list|)
expr_stmt|;
block|}
name|HttpEntity
name|responeEntity
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// execute request
name|HttpResponse
name|response
init|=
name|executeMethod
argument_list|(
name|method
argument_list|,
name|httpClientContext
argument_list|)
decl_stmt|;
name|int
name|responseCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|responeEntity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
name|Object
name|body
init|=
name|HttpHelper
operator|.
name|readResponseBodyFromInputStream
argument_list|(
name|responeEntity
operator|.
name|getContent
argument_list|()
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
comment|// lets store the result in the output message.
name|Message
name|message
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
comment|// lets set the headers
name|Header
index|[]
name|headers
init|=
name|response
operator|.
name|getAllHeaders
argument_list|()
decl_stmt|;
name|HeaderFilterStrategy
name|strategy
init|=
name|endpoint
operator|.
name|getHeaderFilterStrategy
argument_list|()
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|headers
control|)
block|{
name|String
name|name
init|=
name|header
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// mapping the content-type
if|if
condition|(
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"content-type"
argument_list|)
condition|)
block|{
name|name
operator|=
name|Exchange
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
name|String
name|value
init|=
name|header
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|strategy
operator|!=
literal|null
operator|&&
operator|!
name|strategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|responseCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_TEXT
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|responeEntity
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|EntityUtils
operator|.
name|consume
argument_list|(
name|responeEntity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// nothing what we can do
block|}
block|}
block|}
block|}
comment|/**      * Strategy when executing the method (calling the remote server).      *      * @param httpRequest the http Request to execute      * @return the response      * @throws IOException can be thrown      */
DECL|method|executeMethod (HttpRequestBase httpRequest, HttpClientContext httpClientContext)
specifier|protected
name|HttpResponse
name|executeMethod
parameter_list|(
name|HttpRequestBase
name|httpRequest
parameter_list|,
name|HttpClientContext
name|httpClientContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|isAuthenticationPreemptive
argument_list|()
condition|)
block|{
name|BasicScheme
name|basicAuth
init|=
operator|new
name|BasicScheme
argument_list|()
decl_stmt|;
name|httpClientContext
operator|.
name|setAttribute
argument_list|(
literal|"preemptive-auth"
argument_list|,
name|basicAuth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpContext
operator|!=
literal|null
condition|)
block|{
name|httpClientContext
operator|=
operator|new
name|HttpClientContext
argument_list|(
name|httpContext
argument_list|)
expr_stmt|;
block|}
return|return
name|httpClient
operator|.
name|execute
argument_list|(
name|httpRequest
argument_list|,
name|httpClientContext
argument_list|)
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getHttpClient ()
specifier|public
name|HttpClient
name|getHttpClient
parameter_list|()
block|{
return|return
name|httpClient
return|;
block|}
DECL|method|setHttpClient (HttpClient httpClient)
specifier|public
name|void
name|setHttpClient
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|)
block|{
name|this
operator|.
name|httpClient
operator|=
name|httpClient
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|createMethod (Exchange exchange)
specifier|protected
name|HttpRequestBase
name|createMethod
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|uri
init|=
name|HttpHelper
operator|.
name|createURL
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
return|return
operator|new
name|HttpGet
argument_list|(
name|uri
argument_list|)
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{     }
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{     }
block|}
end_class

end_unit

