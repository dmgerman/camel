begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http4
operator|.
name|handler
operator|.
name|HeaderValidationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequestInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|HttpEntityWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|localserver
operator|.
name|LocalTestServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|localserver
operator|.
name|ResponseBasicUnauthorized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|ImmutableHttpProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * @version  */
end_comment

begin_class
DECL|class|HttpCompressionTest
specifier|public
class|class
name|HttpCompressionTest
extends|extends
name|BaseHttpTest
block|{
annotation|@
name|Test
DECL|method|compressedHttpPost ()
specifier|public
name|void
name|compressedHttpPost
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"http4://"
operator|+
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|out
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|headers
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertBody
argument_list|(
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBasicHttpProcessor ()
specifier|protected
name|HttpProcessor
name|getBasicHttpProcessor
parameter_list|()
block|{
name|List
argument_list|<
name|HttpRequestInterceptor
argument_list|>
name|requestInterceptors
init|=
operator|new
name|ArrayList
argument_list|<
name|HttpRequestInterceptor
argument_list|>
argument_list|()
decl_stmt|;
name|requestInterceptors
operator|.
name|add
argument_list|(
operator|new
name|RequestDecompressingInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HttpResponseInterceptor
argument_list|>
name|responseInterceptors
init|=
operator|new
name|ArrayList
argument_list|<
name|HttpResponseInterceptor
argument_list|>
argument_list|()
decl_stmt|;
name|responseInterceptors
operator|.
name|add
argument_list|(
operator|new
name|ResponseCompressingInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|responseInterceptors
operator|.
name|add
argument_list|(
operator|new
name|ResponseBasicUnauthorized
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableHttpProcessor
name|httpproc
init|=
operator|new
name|ImmutableHttpProcessor
argument_list|(
name|requestInterceptors
argument_list|,
name|responseInterceptors
argument_list|)
decl_stmt|;
return|return
name|httpproc
return|;
block|}
annotation|@
name|Override
DECL|method|registerHandler (LocalTestServer server)
specifier|protected
name|void
name|registerHandler
parameter_list|(
name|LocalTestServer
name|server
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|expectedHeaders
operator|.
name|put
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
name|server
operator|.
name|register
argument_list|(
literal|"/"
argument_list|,
operator|new
name|HeaderValidationHandler
argument_list|(
literal|"POST"
argument_list|,
literal|null
argument_list|,
name|getBody
argument_list|()
argument_list|,
name|getExpectedContent
argument_list|()
argument_list|,
name|expectedHeaders
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getBody ()
specifier|protected
name|String
name|getBody
parameter_list|()
block|{
return|return
literal|"hl=en&q=camel"
return|;
block|}
DECL|class|RequestDecompressingInterceptor
specifier|static
class|class
name|RequestDecompressingInterceptor
implements|implements
name|HttpRequestInterceptor
block|{
DECL|method|process (HttpRequest request, HttpContext context)
specifier|public
name|void
name|process
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|Header
name|contentEncoding
init|=
name|request
operator|.
name|getFirstHeader
argument_list|(
literal|"Content-Encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentEncoding
operator|!=
literal|null
operator|&&
name|contentEncoding
operator|.
name|getValue
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"gzip"
argument_list|)
condition|)
block|{
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|setEntity
argument_list|(
operator|new
name|GzipDecompressingEntity
argument_list|(
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|GzipDecompressingEntity
specifier|static
class|class
name|GzipDecompressingEntity
extends|extends
name|HttpEntityWrapper
block|{
DECL|method|GzipDecompressingEntity (final HttpEntity entity)
specifier|public
name|GzipDecompressingEntity
parameter_list|(
specifier|final
name|HttpEntity
name|entity
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContent ()
specifier|public
name|InputStream
name|getContent
parameter_list|()
throws|throws
name|IOException
throws|,
name|IllegalStateException
block|{
name|InputStream
name|wrappedin
init|=
name|wrappedEntity
operator|.
name|getContent
argument_list|()
decl_stmt|;
return|return
operator|new
name|GZIPInputStream
argument_list|(
name|wrappedin
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContentLength ()
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|isStreaming ()
specifier|public
name|boolean
name|isStreaming
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|class|ResponseCompressingInterceptor
specifier|static
class|class
name|ResponseCompressingInterceptor
implements|implements
name|HttpResponseInterceptor
block|{
DECL|method|process (HttpResponse response, HttpContext context)
specifier|public
name|void
name|process
parameter_list|(
name|HttpResponse
name|response
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|GzipCompressingEntity
argument_list|(
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|GzipCompressingEntity
specifier|static
class|class
name|GzipCompressingEntity
extends|extends
name|HttpEntityWrapper
block|{
DECL|method|GzipCompressingEntity (final HttpEntity entity)
specifier|public
name|GzipCompressingEntity
parameter_list|(
specifier|final
name|HttpEntity
name|entity
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContentEncoding ()
specifier|public
name|Header
name|getContentEncoding
parameter_list|()
block|{
return|return
operator|new
name|BasicHeader
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo (OutputStream outstream)
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|outstream
parameter_list|)
throws|throws
name|IOException
block|{
name|GZIPOutputStream
name|gzip
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|outstream
argument_list|)
decl_stmt|;
name|gzip
operator|.
name|write
argument_list|(
name|EntityUtils
operator|.
name|toByteArray
argument_list|(
name|wrappedEntity
argument_list|)
argument_list|)
expr_stmt|;
name|gzip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContentLength ()
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|isStreaming ()
specifier|public
name|boolean
name|isStreaming
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

