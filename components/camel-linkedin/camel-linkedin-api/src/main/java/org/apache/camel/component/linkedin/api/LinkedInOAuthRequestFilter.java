begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.linkedin.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Priorities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|params
operator|.
name|ConnRoutePNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|Jsoup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|FormElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|select
operator|.
name|Elements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * LinkedIn OAuth request filter to handle OAuth token.  */
end_comment

begin_class
annotation|@
name|Provider
annotation|@
name|Priority
argument_list|(
name|Priorities
operator|.
name|AUTHENTICATION
argument_list|)
DECL|class|LinkedInOAuthRequestFilter
specifier|public
specifier|final
class|class
name|LinkedInOAuthRequestFilter
implements|implements
name|ClientRequestFilter
block|{
DECL|field|BASE_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|BASE_ADDRESS
init|=
literal|"https://api.linkedin.com/v1"
decl_stmt|;
DECL|field|SC_OK
specifier|private
specifier|static
specifier|final
name|int
name|SC_OK
init|=
literal|200
decl_stmt|;
DECL|field|SC_MOVED_TEMPORARILY
specifier|private
specifier|static
specifier|final
name|int
name|SC_MOVED_TEMPORARILY
init|=
literal|302
decl_stmt|;
DECL|field|SC_SEE_OTHER
specifier|private
specifier|static
specifier|final
name|int
name|SC_SEE_OTHER
init|=
literal|303
decl_stmt|;
DECL|field|HEADER_LOCATION
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_LOCATION
init|=
literal|"location"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LinkedInOAuthRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AUTHORIZATION_URL_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|AUTHORIZATION_URL_PREFIX
init|=
literal|"https://www.linkedin.com"
decl_stmt|;
DECL|field|AUTHORIZATION_URL
specifier|private
specifier|static
specifier|final
name|String
name|AUTHORIZATION_URL
init|=
name|AUTHORIZATION_URL_PREFIX
operator|+
literal|"/uas/oauth2/authorization?"
operator|+
literal|"response_type=code&client_id=%s&state=%s&redirect_uri=%s"
decl_stmt|;
DECL|field|AUTHORIZATION_URL_WITH_SCOPE
specifier|private
specifier|static
specifier|final
name|String
name|AUTHORIZATION_URL_WITH_SCOPE
init|=
name|AUTHORIZATION_URL_PREFIX
operator|+
literal|"/uas/oauth2/authorization?"
operator|+
literal|"response_type=code&client_id=%s&state=%s&scope=%s&redirect_uri=%s"
decl_stmt|;
DECL|field|ACCESS_TOKEN_URL
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_TOKEN_URL
init|=
name|AUTHORIZATION_URL_PREFIX
operator|+
literal|"/uas/oauth2/accessToken?"
operator|+
literal|"grant_type=authorization_code&code=%s&redirect_uri=%s&client_id=%s&client_secret=%s"
decl_stmt|;
DECL|field|QUERY_PARAM_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|QUERY_PARAM_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&?([^=]+)=([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|oAuthParams
specifier|private
specifier|final
name|OAuthParams
name|oAuthParams
decl_stmt|;
DECL|field|oAuthToken
specifier|private
name|OAuthToken
name|oAuthToken
decl_stmt|;
DECL|field|proxy
specifier|private
name|Proxy
name|proxy
decl_stmt|;
DECL|method|LinkedInOAuthRequestFilter (OAuthParams oAuthParams, Map<String, Object> httpParams, boolean lazyAuth, String[] enabledProtocols)
specifier|public
name|LinkedInOAuthRequestFilter
parameter_list|(
name|OAuthParams
name|oAuthParams
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|,
name|boolean
name|lazyAuth
parameter_list|,
name|String
index|[]
name|enabledProtocols
parameter_list|)
block|{
name|this
operator|.
name|oAuthParams
operator|=
name|oAuthParams
expr_stmt|;
name|this
operator|.
name|oAuthToken
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|httpParams
operator|!=
literal|null
operator|&&
name|httpParams
operator|.
name|get
argument_list|(
name|ConnRoutePNames
operator|.
name|DEFAULT_PROXY
argument_list|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|HttpHost
name|proxyHost
init|=
operator|(
name|HttpHost
operator|)
name|httpParams
operator|.
name|get
argument_list|(
name|ConnRoutePNames
operator|.
name|DEFAULT_PROXY
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|socksProxy
init|=
operator|(
name|Boolean
operator|)
name|httpParams
operator|.
name|get
argument_list|(
literal|"http.route.socks-proxy"
argument_list|)
decl_stmt|;
name|SocketAddress
name|proxyAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|proxyHost
operator|.
name|getHostName
argument_list|()
argument_list|,
name|proxyHost
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|socksProxy
operator|!=
literal|null
operator|&&
name|socksProxy
condition|)
block|{
name|proxy
operator|=
operator|new
name|Proxy
argument_list|(
name|Proxy
operator|.
name|Type
operator|.
name|SOCKS
argument_list|,
name|proxyAddr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|=
operator|new
name|Proxy
argument_list|(
name|Proxy
operator|.
name|Type
operator|.
name|HTTP
argument_list|,
name|proxyAddr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|proxy
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lazyAuth
condition|)
block|{
try|try
block|{
name|updateOAuthToken
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error authorizing user %s: %s"
argument_list|,
name|oAuthParams
operator|.
name|getUserName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getRefreshToken ()
specifier|private
name|String
name|getRefreshToken
parameter_list|()
block|{
try|try
block|{
specifier|final
name|String
name|csrfId
init|=
name|String
operator|.
name|valueOf
argument_list|(
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|encodedRedirectUri
init|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|oAuthParams
operator|.
name|getRedirectUri
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|final
name|OAuthScope
index|[]
name|scopes
init|=
name|oAuthParams
operator|.
name|getScopes
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cookies
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|final
name|String
name|authorizationUrl
init|=
name|authorizationUrl
argument_list|(
name|csrfId
argument_list|,
name|encodedRedirectUri
argument_list|,
name|scopes
argument_list|)
decl_stmt|;
comment|//get login page (redirection is disabled as there could be an error message in redirect url
specifier|final
name|Connection
operator|.
name|Response
name|loginPageResponse
init|=
name|addProxy
argument_list|(
name|Jsoup
operator|.
name|connect
argument_list|(
name|authorizationUrl
argument_list|)
argument_list|,
name|proxy
argument_list|)
operator|.
name|followRedirects
argument_list|(
literal|false
argument_list|)
operator|.
name|method
argument_list|(
name|Connection
operator|.
name|Method
operator|.
name|GET
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
specifier|final
name|Connection
operator|.
name|Response
name|loginPageRedirectedResponse
init|=
name|followRedirection
argument_list|(
name|loginPageResponse
argument_list|,
name|cookies
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|loginPage
init|=
name|loginPageRedirectedResponse
operator|.
name|parse
argument_list|()
decl_stmt|;
name|validatePage
argument_list|(
name|loginPage
argument_list|)
expr_stmt|;
comment|//fill login form
specifier|final
name|FormElement
name|loginForm
init|=
operator|(
name|FormElement
operator|)
name|loginPage
operator|.
name|select
argument_list|(
literal|"form"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
specifier|final
name|Element
name|loginField
init|=
name|loginForm
operator|.
name|select
argument_list|(
literal|"input[name=session_key]"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|loginField
operator|.
name|val
argument_list|(
name|oAuthParams
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|passwordField
init|=
name|loginForm
operator|.
name|select
argument_list|(
literal|"input[name=session_password]"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|passwordField
operator|.
name|val
argument_list|(
name|oAuthParams
operator|.
name|getUserPassword
argument_list|()
argument_list|)
expr_stmt|;
comment|//submit loginPage
specifier|final
name|Connection
operator|.
name|Response
name|afterLoginResponse
init|=
name|addProxy
argument_list|(
name|loginForm
operator|.
name|submit
argument_list|()
argument_list|,
name|proxy
argument_list|)
operator|.
name|followRedirects
argument_list|(
literal|false
argument_list|)
operator|.
name|cookies
argument_list|(
name|cookies
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|cookies
operator|.
name|putAll
argument_list|(
name|afterLoginResponse
operator|.
name|cookies
argument_list|()
argument_list|)
expr_stmt|;
comment|//follow redirects
specifier|final
name|Connection
operator|.
name|Response
name|afterLoginRedirectedResponse
init|=
name|followRedirection
argument_list|(
name|afterLoginResponse
argument_list|,
name|cookies
argument_list|)
decl_stmt|;
specifier|final
name|URL
name|redirectionUrl
init|=
name|getRedirectLocationAndValidate
argument_list|(
name|afterLoginRedirectedResponse
argument_list|)
decl_stmt|;
specifier|final
name|String
name|redirectQuery
decl_stmt|;
comment|//if redirect url != null, it means that it contains code= and there is no need to continue
if|if
condition|(
name|redirectionUrl
operator|!=
literal|null
condition|)
block|{
name|redirectQuery
operator|=
name|redirectionUrl
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|afterLoginRedirectedResponse
operator|.
name|statusCode
argument_list|()
operator|==
name|SC_OK
condition|)
block|{
comment|//allow permission page is in response (or still login page containing errors)
specifier|final
name|Document
name|allowPage
init|=
name|afterLoginRedirectedResponse
operator|.
name|parse
argument_list|()
decl_stmt|;
comment|//detect possible login errors
name|validatePage
argument_list|(
name|allowPage
argument_list|)
expr_stmt|;
comment|//if there is no error, allow permission page is it for sure
specifier|final
name|FormElement
name|allowForm
init|=
operator|(
name|FormElement
operator|)
name|allowPage
operator|.
name|select
argument_list|(
literal|"form"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Connection
operator|.
name|Response
name|allowRedirectResponse
init|=
name|addProxy
argument_list|(
name|allowForm
operator|.
name|submit
argument_list|()
argument_list|,
name|proxy
argument_list|)
operator|.
name|followRedirects
argument_list|(
literal|false
argument_list|)
operator|.
name|cookies
argument_list|(
name|cookies
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|allowUrl
init|=
name|getRedirectLocationAndValidate
argument_list|(
name|allowRedirectResponse
argument_list|)
decl_stmt|;
name|redirectQuery
operator|=
name|allowUrl
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Redirect response query is null, check username, password and permissions"
argument_list|)
throw|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Matcher
name|matcher
init|=
name|QUERY_PARAM_PATTERN
operator|.
name|matcher
argument_list|(
name|redirectQuery
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check if we got caught in a Captcha!
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
literal|"challengeId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Unable to login due to CAPTCHA, use with a valid accessToken instead!"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|state
init|=
name|params
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|csrfId
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Invalid CSRF code!"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// return authorization code
comment|// TODO check results??
return|return
name|params
operator|.
name|get
argument_list|(
literal|"code"
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error authorizing application: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Validate page html for errors.      */
DECL|method|validatePage (Document loginPage)
specifier|private
name|void
name|validatePage
parameter_list|(
name|Document
name|loginPage
parameter_list|)
block|{
comment|//this error could happen e.g. if there is a wrong redirect url
name|Elements
name|errorDivs
init|=
name|loginPage
operator|.
name|select
argument_list|(
literal|"body[class=error]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorDivs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//this error could happen e.g. with wrong clientId, usernane or password
name|errorDivs
operator|=
name|loginPage
operator|.
name|select
argument_list|(
literal|"div[role=alert]:not([class*=hidden])"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|errorDivs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|String
name|errorMessage
init|=
name|errorDivs
operator|.
name|first
argument_list|()
operator|.
name|text
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error authorizing application: "
operator|+
name|errorMessage
argument_list|)
throw|;
block|}
block|}
comment|/**      * Constructs authorization URL from AuthParams.      */
DECL|method|authorizationUrl (String csrfId, String encodedRedirectUri, OAuthScope[] scopes)
specifier|private
name|String
name|authorizationUrl
parameter_list|(
name|String
name|csrfId
parameter_list|,
name|String
name|encodedRedirectUri
parameter_list|,
name|OAuthScope
index|[]
name|scopes
parameter_list|)
block|{
specifier|final
name|String
name|url
decl_stmt|;
if|if
condition|(
name|scopes
operator|==
literal|null
operator|||
name|scopes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|url
operator|=
name|String
operator|.
name|format
argument_list|(
name|AUTHORIZATION_URL
argument_list|,
name|oAuthParams
operator|.
name|getClientId
argument_list|()
argument_list|,
name|csrfId
argument_list|,
name|encodedRedirectUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|nScopes
init|=
name|scopes
operator|.
name|length
decl_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OAuthScope
name|scope
range|:
name|scopes
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|scope
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|<
name|nScopes
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"%20"
argument_list|)
expr_stmt|;
block|}
block|}
name|url
operator|=
name|String
operator|.
name|format
argument_list|(
name|AUTHORIZATION_URL_WITH_SCOPE
argument_list|,
name|oAuthParams
operator|.
name|getClientId
argument_list|()
argument_list|,
name|csrfId
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|encodedRedirectUri
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
comment|/**      * Follows redirection (states 302 and 303) - on each step validates whether there s abn error.      */
DECL|method|followRedirection (Connection.Response response, Map<String, String> cookies)
specifier|private
name|Connection
operator|.
name|Response
name|followRedirection
parameter_list|(
name|Connection
operator|.
name|Response
name|response
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cookies
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|followRedirection
argument_list|(
name|response
argument_list|,
name|cookies
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Follows redirections (recursively, with max 5 repetitions)      */
DECL|method|followRedirection (Connection.Response response, Map<String, String> cookies, int deep)
specifier|private
name|Connection
operator|.
name|Response
name|followRedirection
parameter_list|(
name|Connection
operator|.
name|Response
name|response
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cookies
parameter_list|,
name|int
name|deep
parameter_list|)
throws|throws
name|IOException
block|{
comment|//if recursive calls are not ending (theoretically it could happen if there is some error), we will end after 5 redirections (in successfull scenario there is maximal redirection count 1)
if|if
condition|(
name|deep
operator|>
literal|5
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error authorizing application. Redirection goes still on and on."
argument_list|)
throw|;
block|}
comment|//try to get redirection url
name|URL
name|url
init|=
name|getRedirectLocationAndValidate
argument_list|(
name|response
argument_list|)
decl_stmt|;
comment|//if contains code=, then it is final url (containing refresh code)
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|url
operator|.
name|getQuery
argument_list|()
operator|.
name|contains
argument_list|(
literal|"code="
argument_list|)
condition|)
block|{
return|return
name|response
return|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"error="
argument_list|)
operator|||
name|url
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"errorKey="
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|", "
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|Connection
operator|.
name|Response
name|resp
init|=
name|addProxy
argument_list|(
name|Jsoup
operator|.
name|connect
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|proxy
argument_list|)
operator|.
name|followRedirects
argument_list|(
literal|false
argument_list|)
operator|.
name|method
argument_list|(
name|Connection
operator|.
name|Method
operator|.
name|GET
argument_list|)
operator|.
name|cookies
argument_list|(
name|cookies
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
return|return
name|followRedirection
argument_list|(
name|resp
argument_list|,
name|cookies
argument_list|,
name|deep
operator|++
argument_list|)
return|;
block|}
block|}
name|cookies
operator|.
name|putAll
argument_list|(
name|response
operator|.
name|cookies
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**      * Extract header Location from response, also validates for possible errors, which could be part of redirection url (e.g. errorKey=unexpected_error)      */
DECL|method|getRedirectLocationAndValidate (Connection.Response response)
specifier|private
name|URL
name|getRedirectLocationAndValidate
parameter_list|(
name|Connection
operator|.
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|statusCode
argument_list|()
operator|==
name|SC_MOVED_TEMPORARILY
operator|||
name|response
operator|.
name|statusCode
argument_list|()
operator|==
name|SC_SEE_OTHER
condition|)
block|{
name|URL
name|location
decl_stmt|;
try|try
block|{
name|location
operator|=
operator|new
name|URL
argument_list|(
name|response
operator|.
name|header
argument_list|(
name|HEADER_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|location
operator|=
operator|new
name|URL
argument_list|(
name|AUTHORIZATION_URL_PREFIX
operator|+
name|response
operator|.
name|header
argument_list|(
name|HEADER_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|locationQuery
init|=
name|location
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|locationQuery
operator|!=
literal|null
operator|&&
operator|(
name|locationQuery
operator|.
name|contains
argument_list|(
literal|"error="
argument_list|)
operator|||
name|locationQuery
operator|.
name|contains
argument_list|(
literal|"errorKey="
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|locationQuery
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|", "
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|location
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Helper method to add proxy into JSoup connection      */
DECL|method|addProxy (Connection connection, Proxy proxy)
specifier|private
specifier|static
name|Connection
name|addProxy
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Proxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
return|return
name|connection
operator|.
name|proxy
argument_list|(
name|proxy
argument_list|)
return|;
block|}
return|return
name|connection
return|;
block|}
DECL|method|getAccessToken (String refreshToken)
specifier|private
name|OAuthToken
name|getAccessToken
parameter_list|(
name|String
name|refreshToken
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|tokenUrl
init|=
name|String
operator|.
name|format
argument_list|(
name|ACCESS_TOKEN_URL
argument_list|,
name|refreshToken
argument_list|,
name|oAuthParams
operator|.
name|getRedirectUri
argument_list|()
argument_list|,
name|oAuthParams
operator|.
name|getClientId
argument_list|()
argument_list|,
name|oAuthParams
operator|.
name|getClientSecret
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Connection
operator|.
name|Response
name|response
init|=
name|addProxy
argument_list|(
name|Jsoup
operator|.
name|connect
argument_list|(
name|tokenUrl
argument_list|)
argument_list|,
name|proxy
argument_list|)
operator|.
name|ignoreContentType
argument_list|(
literal|true
argument_list|)
operator|.
name|method
argument_list|(
name|Connection
operator|.
name|Method
operator|.
name|POST
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|statusCode
argument_list|()
operator|!=
name|SC_OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error getting access token: [%s: %s]"
argument_list|,
name|response
operator|.
name|statusCode
argument_list|()
argument_list|,
name|response
operator|.
name|statusMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
specifier|final
name|Map
name|map
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|body
argument_list|()
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|accessToken
init|=
name|map
operator|.
name|get
argument_list|(
literal|"access_token"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Integer
name|expiresIn
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"expires_in"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|OAuthToken
argument_list|(
name|refreshToken
argument_list|,
name|accessToken
argument_list|,
name|currentTime
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|expiresIn
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getOAuthToken ()
specifier|public
specifier|synchronized
name|OAuthToken
name|getOAuthToken
parameter_list|()
block|{
return|return
name|oAuthToken
return|;
block|}
annotation|@
name|Override
DECL|method|filter (ClientRequestContext requestContext)
specifier|public
name|void
name|filter
parameter_list|(
name|ClientRequestContext
name|requestContext
parameter_list|)
throws|throws
name|IOException
block|{
name|updateOAuthToken
argument_list|()
expr_stmt|;
comment|// add OAuth query param
specifier|final
name|String
name|requestUri
init|=
name|requestContext
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|requestUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestUri
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"oauth2_access_token="
argument_list|)
operator|.
name|append
argument_list|(
name|oAuthToken
operator|.
name|getAccessToken
argument_list|()
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateOAuthToken ()
specifier|private
specifier|synchronized
name|void
name|updateOAuthToken
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check whether an update is needed
specifier|final
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|oAuthToken
operator|==
literal|null
operator|||
name|oAuthToken
operator|.
name|getExpiryTime
argument_list|()
operator|<
name|currentTime
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"OAuth token doesn't exist or has expired"
argument_list|)
expr_stmt|;
comment|// check whether a secure store is provided
specifier|final
name|OAuthSecureStorage
name|secureStorage
init|=
name|oAuthParams
operator|.
name|getSecureStorage
argument_list|()
decl_stmt|;
if|if
condition|(
name|secureStorage
operator|!=
literal|null
condition|)
block|{
name|oAuthToken
operator|=
name|secureStorage
operator|.
name|getOAuthToken
argument_list|()
expr_stmt|;
comment|// if it returned a valid token, we are done, otherwise fall through and generate a new token
if|if
condition|(
name|oAuthToken
operator|!=
literal|null
operator|&&
name|oAuthToken
operator|.
name|getExpiryTime
argument_list|()
operator|>
name|currentTime
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"OAuth secure storage returned a null or expired token, creating a new token..."
argument_list|)
expr_stmt|;
comment|// throw an exception if a user password is not set for authorization
if|if
condition|(
name|oAuthParams
operator|.
name|getUserPassword
argument_list|()
operator|==
literal|null
operator|||
name|oAuthParams
operator|.
name|getUserPassword
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing password for LinkedIn authorization"
argument_list|)
throw|;
block|}
block|}
comment|// need new OAuth token, authorize user, LinkedIn does not support OAuth2 grant_type=refresh_token
specifier|final
name|String
name|refreshToken
init|=
name|getRefreshToken
argument_list|()
decl_stmt|;
name|this
operator|.
name|oAuthToken
operator|=
name|getAccessToken
argument_list|(
name|refreshToken
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OAuth token created!"
argument_list|)
expr_stmt|;
comment|// notify secure storage
if|if
condition|(
name|secureStorage
operator|!=
literal|null
condition|)
block|{
name|secureStorage
operator|.
name|saveOAuthToken
argument_list|(
name|this
operator|.
name|oAuthToken
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

