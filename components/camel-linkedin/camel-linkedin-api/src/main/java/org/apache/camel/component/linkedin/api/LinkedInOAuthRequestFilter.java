begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.linkedin.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Priorities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|BrowserVersion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|FailingHttpStatusCodeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|Page
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|ProxyConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebClientOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|WebResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|html
operator|.
name|HtmlDivision
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|html
operator|.
name|HtmlForm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|html
operator|.
name|HtmlPage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|html
operator|.
name|HtmlPasswordInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|html
operator|.
name|HtmlSubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|html
operator|.
name|HtmlTextInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|gargoylesoftware
operator|.
name|htmlunit
operator|.
name|util
operator|.
name|WebConnectionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|params
operator|.
name|ConnRoutePNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * LinkedIn OAuth request filter to handle OAuth token.  */
end_comment

begin_class
annotation|@
name|Provider
annotation|@
name|Priority
argument_list|(
name|Priorities
operator|.
name|AUTHENTICATION
argument_list|)
DECL|class|LinkedInOAuthRequestFilter
specifier|public
specifier|final
class|class
name|LinkedInOAuthRequestFilter
implements|implements
name|ClientRequestFilter
block|{
DECL|field|BASE_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|BASE_ADDRESS
init|=
literal|"https://api.linkedin.com/v1"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LinkedInOAuthRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AUTHORIZATION_URL
specifier|private
specifier|static
specifier|final
name|String
name|AUTHORIZATION_URL
init|=
literal|"https://www.linkedin.com/uas/oauth2/authorization?"
operator|+
literal|"response_type=code&client_id=%s&state=%s&redirect_uri=%s"
decl_stmt|;
DECL|field|AUTHORIZATION_URL_WITH_SCOPE
specifier|private
specifier|static
specifier|final
name|String
name|AUTHORIZATION_URL_WITH_SCOPE
init|=
literal|"https://www.linkedin.com/uas/oauth2/authorization?"
operator|+
literal|"response_type=code&client_id=%s&state=%s&scope=%s&redirect_uri=%s"
decl_stmt|;
DECL|field|ACCESS_TOKEN_URL
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_TOKEN_URL
init|=
literal|"https://www.linkedin.com/uas/oauth2/accessToken?"
operator|+
literal|"grant_type=authorization_code&code=%s&redirect_uri=%s&client_id=%s&client_secret=%s"
decl_stmt|;
DECL|field|QUERY_PARAM_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|QUERY_PARAM_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&?([^=]+)=([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|webClient
specifier|private
specifier|final
name|WebClient
name|webClient
decl_stmt|;
DECL|field|oAuthParams
specifier|private
specifier|final
name|OAuthParams
name|oAuthParams
decl_stmt|;
DECL|field|oAuthToken
specifier|private
name|OAuthToken
name|oAuthToken
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|LinkedInOAuthRequestFilter (OAuthParams oAuthParams, Map<String, Object> httpParams, boolean lazyAuth, String[] enabledProtocols)
specifier|public
name|LinkedInOAuthRequestFilter
parameter_list|(
name|OAuthParams
name|oAuthParams
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|,
name|boolean
name|lazyAuth
parameter_list|,
name|String
index|[]
name|enabledProtocols
parameter_list|)
block|{
name|this
operator|.
name|oAuthParams
operator|=
name|oAuthParams
expr_stmt|;
name|this
operator|.
name|oAuthToken
operator|=
literal|null
expr_stmt|;
comment|// create HtmlUnit client
name|webClient
operator|=
operator|new
name|WebClient
argument_list|(
name|BrowserVersion
operator|.
name|FIREFOX_24
argument_list|)
expr_stmt|;
specifier|final
name|WebClientOptions
name|options
init|=
name|webClient
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setRedirectEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setJavaScriptEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|options
operator|.
name|setThrowExceptionOnFailingStatusCode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setThrowExceptionOnScriptError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setPrintContentOnFailingStatusCode
argument_list|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|setSSLClientProtocols
argument_list|(
name|enabledProtocols
argument_list|)
expr_stmt|;
comment|// add HTTP proxy if set
if|if
condition|(
name|httpParams
operator|!=
literal|null
operator|&&
name|httpParams
operator|.
name|get
argument_list|(
name|ConnRoutePNames
operator|.
name|DEFAULT_PROXY
argument_list|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|HttpHost
name|proxyHost
init|=
operator|(
name|HttpHost
operator|)
name|httpParams
operator|.
name|get
argument_list|(
name|ConnRoutePNames
operator|.
name|DEFAULT_PROXY
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|socksProxy
init|=
operator|(
name|Boolean
operator|)
name|httpParams
operator|.
name|get
argument_list|(
literal|"http.route.socks-proxy"
argument_list|)
decl_stmt|;
specifier|final
name|ProxyConfig
name|proxyConfig
init|=
operator|new
name|ProxyConfig
argument_list|(
name|proxyHost
operator|.
name|getHostName
argument_list|()
argument_list|,
name|proxyHost
operator|.
name|getPort
argument_list|()
argument_list|,
name|socksProxy
operator|!=
literal|null
condition|?
name|socksProxy
else|:
literal|false
argument_list|)
decl_stmt|;
name|options
operator|.
name|setProxyConfig
argument_list|(
name|proxyConfig
argument_list|)
expr_stmt|;
block|}
comment|// disable default gzip compression, as error pages are sent with no compression and htmlunit doesn't negotiate
operator|new
name|WebConnectionWrapper
argument_list|(
name|webClient
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|WebResponse
name|getResponse
parameter_list|(
name|WebRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|request
operator|.
name|setAdditionalHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_ENCODING
argument_list|,
literal|"identity"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
expr_stmt|;
if|if
condition|(
operator|!
name|lazyAuth
condition|)
block|{
try|try
block|{
name|updateOAuthToken
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error authorizing user %s: %s"
argument_list|,
name|oAuthParams
operator|.
name|getUserName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getRefreshToken ()
specifier|private
name|String
name|getRefreshToken
parameter_list|()
block|{
comment|// authorize application on user's behalf
name|webClient
operator|.
name|getOptions
argument_list|()
operator|.
name|setRedirectEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|csrfId
init|=
name|String
operator|.
name|valueOf
argument_list|(
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|encodedRedirectUri
init|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|oAuthParams
operator|.
name|getRedirectUri
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|final
name|OAuthScope
index|[]
name|scopes
init|=
name|oAuthParams
operator|.
name|getScopes
argument_list|()
decl_stmt|;
specifier|final
name|String
name|url
decl_stmt|;
if|if
condition|(
name|scopes
operator|==
literal|null
operator|||
name|scopes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|url
operator|=
name|String
operator|.
name|format
argument_list|(
name|AUTHORIZATION_URL
argument_list|,
name|oAuthParams
operator|.
name|getClientId
argument_list|()
argument_list|,
name|csrfId
argument_list|,
name|encodedRedirectUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|nScopes
init|=
name|scopes
operator|.
name|length
decl_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OAuthScope
name|scope
range|:
name|scopes
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|scope
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|<
name|nScopes
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"%20"
argument_list|)
expr_stmt|;
block|}
block|}
name|url
operator|=
name|String
operator|.
name|format
argument_list|(
name|AUTHORIZATION_URL_WITH_SCOPE
argument_list|,
name|oAuthParams
operator|.
name|getClientId
argument_list|()
argument_list|,
name|csrfId
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|encodedRedirectUri
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HtmlPage
name|authPage
init|=
name|webClient
operator|.
name|getPage
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// look for<div role="alert">
specifier|final
name|HtmlDivision
name|div
init|=
name|authPage
operator|.
name|getFirstByXPath
argument_list|(
literal|"//div[@role='alert']"
argument_list|)
decl_stmt|;
if|if
condition|(
name|div
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error authorizing application: "
operator|+
name|div
operator|.
name|getTextContent
argument_list|()
argument_list|)
throw|;
block|}
comment|// submit login credentials
specifier|final
name|HtmlForm
name|loginForm
init|=
name|authPage
operator|.
name|getFormByName
argument_list|(
literal|"oauth2SAuthorizeForm"
argument_list|)
decl_stmt|;
specifier|final
name|HtmlTextInput
name|login
init|=
name|loginForm
operator|.
name|getInputByName
argument_list|(
literal|"session_key"
argument_list|)
decl_stmt|;
name|login
operator|.
name|setText
argument_list|(
name|oAuthParams
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|HtmlPasswordInput
name|password
init|=
name|loginForm
operator|.
name|getInputByName
argument_list|(
literal|"session_password"
argument_list|)
decl_stmt|;
name|password
operator|.
name|setText
argument_list|(
name|oAuthParams
operator|.
name|getUserPassword
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|HtmlSubmitInput
name|submitInput
init|=
name|loginForm
operator|.
name|getInputByName
argument_list|(
literal|"authorize"
argument_list|)
decl_stmt|;
comment|// disable redirect to avoid loading redirect URL
name|webClient
operator|.
name|getOptions
argument_list|()
operator|.
name|setRedirectEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// validate CSRF and get authorization code
name|String
name|redirectQuery
decl_stmt|;
try|try
block|{
specifier|final
name|Page
name|redirectPage
init|=
name|submitInput
operator|.
name|click
argument_list|()
decl_stmt|;
name|redirectQuery
operator|=
name|redirectPage
operator|.
name|getUrl
argument_list|()
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailingHttpStatusCodeException
name|e
parameter_list|)
block|{
comment|// escalate non redirect errors
if|if
condition|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|SC_MOVED_TEMPORARILY
condition|)
block|{
throw|throw
name|e
throw|;
block|}
specifier|final
name|String
name|location
init|=
name|e
operator|.
name|getResponse
argument_list|()
operator|.
name|getResponseHeaderValue
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|redirectQuery
operator|=
name|location
operator|.
name|substring
argument_list|(
name|location
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Matcher
name|matcher
init|=
name|QUERY_PARAM_PATTERN
operator|.
name|matcher
argument_list|(
name|redirectQuery
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|state
init|=
name|params
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|csrfId
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Invalid CSRF code!"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// return authorization code
comment|// TODO check results??
return|return
name|params
operator|.
name|get
argument_list|(
literal|"code"
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error authorizing application: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|webClient
operator|.
name|closeAllWindows
argument_list|()
expr_stmt|;
block|}
DECL|method|getAccessToken (String refreshToken)
specifier|private
name|OAuthToken
name|getAccessToken
parameter_list|(
name|String
name|refreshToken
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|tokenUrl
init|=
name|String
operator|.
name|format
argument_list|(
name|ACCESS_TOKEN_URL
argument_list|,
name|refreshToken
argument_list|,
name|oAuthParams
operator|.
name|getRedirectUri
argument_list|()
argument_list|,
name|oAuthParams
operator|.
name|getClientId
argument_list|()
argument_list|,
name|oAuthParams
operator|.
name|getClientSecret
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|WebRequest
name|webRequest
init|=
operator|new
name|WebRequest
argument_list|(
operator|new
name|URL
argument_list|(
name|tokenUrl
argument_list|)
argument_list|,
name|HttpMethod
operator|.
name|POST
argument_list|)
decl_stmt|;
specifier|final
name|WebResponse
name|webResponse
init|=
name|webClient
operator|.
name|loadWebResponse
argument_list|(
name|webRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|webResponse
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error getting access token: [%s: %s]"
argument_list|,
name|webResponse
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|webResponse
operator|.
name|getStatusMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
specifier|final
name|Map
name|map
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|webResponse
operator|.
name|getContentAsStream
argument_list|()
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|accessToken
init|=
name|map
operator|.
name|get
argument_list|(
literal|"access_token"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Integer
name|expiresIn
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"expires_in"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|OAuthToken
argument_list|(
name|refreshToken
argument_list|,
name|accessToken
argument_list|,
name|currentTime
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|expiresIn
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getOAuthToken ()
specifier|public
specifier|synchronized
name|OAuthToken
name|getOAuthToken
parameter_list|()
block|{
return|return
name|oAuthToken
return|;
block|}
annotation|@
name|Override
DECL|method|filter (ClientRequestContext requestContext)
specifier|public
name|void
name|filter
parameter_list|(
name|ClientRequestContext
name|requestContext
parameter_list|)
throws|throws
name|IOException
block|{
name|updateOAuthToken
argument_list|()
expr_stmt|;
comment|// add OAuth query param
specifier|final
name|String
name|requestUri
init|=
name|requestContext
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|requestUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestUri
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"oauth2_access_token="
argument_list|)
operator|.
name|append
argument_list|(
name|oAuthToken
operator|.
name|getAccessToken
argument_list|()
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateOAuthToken ()
specifier|private
specifier|synchronized
name|void
name|updateOAuthToken
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check whether an update is needed
specifier|final
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|oAuthToken
operator|==
literal|null
operator|||
name|oAuthToken
operator|.
name|getExpiryTime
argument_list|()
operator|<
name|currentTime
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"OAuth token doesn't exist or has expired"
argument_list|)
expr_stmt|;
comment|// check whether a secure store is provided
specifier|final
name|OAuthSecureStorage
name|secureStorage
init|=
name|oAuthParams
operator|.
name|getSecureStorage
argument_list|()
decl_stmt|;
if|if
condition|(
name|secureStorage
operator|!=
literal|null
condition|)
block|{
name|oAuthToken
operator|=
name|secureStorage
operator|.
name|getOAuthToken
argument_list|()
expr_stmt|;
comment|// if it returned a valid token, we are done, otherwise fall through and generate a new token
if|if
condition|(
name|oAuthToken
operator|!=
literal|null
operator|&&
name|oAuthToken
operator|.
name|getExpiryTime
argument_list|()
operator|>
name|currentTime
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"OAuth secure storage returned a null or expired token, creating a new token..."
argument_list|)
expr_stmt|;
comment|// throw an exception if a user password is not set for authorization
if|if
condition|(
name|oAuthParams
operator|.
name|getUserPassword
argument_list|()
operator|==
literal|null
operator|||
name|oAuthParams
operator|.
name|getUserPassword
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing password for LinkedIn authorization"
argument_list|)
throw|;
block|}
block|}
comment|// need new OAuth token, authorize user, LinkedIn does not support OAuth2 grant_type=refresh_token
specifier|final
name|String
name|refreshToken
init|=
name|getRefreshToken
argument_list|()
decl_stmt|;
name|this
operator|.
name|oAuthToken
operator|=
name|getAccessToken
argument_list|(
name|refreshToken
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OAuth token created!"
argument_list|)
expr_stmt|;
comment|// notify secure storage
if|if
condition|(
name|secureStorage
operator|!=
literal|null
condition|)
block|{
name|secureStorage
operator|.
name|saveOAuthToken
argument_list|(
name|this
operator|.
name|oAuthToken
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

