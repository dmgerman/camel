begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Camel Api Route test generated by camel-component-util-maven-plugin  * Generated on: Wed Jul 09 19:57:11 PDT 2014  */
end_comment

begin_package
DECL|package|org.apache.camel.component.linkedin
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|internal
operator|.
name|LinkedInApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|internal
operator|.
name|PostsResourceApiMethod
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.linkedin.api.PostsResource} APIs.  */
end_comment

begin_class
DECL|class|PostsResourceIntegrationTest
specifier|public
class|class
name|PostsResourceIntegrationTest
extends|extends
name|AbstractLinkedInTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PostsResourceIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|LinkedInApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|PostsResourceApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// TODO provide parameter values for addComment
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testAddComment ()
specifier|public
name|void
name|testAddComment
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.post_id"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.linkedin.api.model.Comment
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.comment"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADDCOMMENT"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for flagCategory
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testFlagCategory ()
specifier|public
name|void
name|testFlagCategory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.post_id"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.linkedin.api.model.PostCategoryCode
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.postcategorycode"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|requestBodyAndHeaders
argument_list|(
literal|"direct://FLAGCATEGORY"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for followPost
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testFollowPost ()
specifier|public
name|void
name|testFollowPost
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.post_id"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.linkedin.api.model.IsFollowing
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.isfollowing"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|requestBodyAndHeaders
argument_list|(
literal|"direct://FOLLOWPOST"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for getPost
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testGetPost ()
specifier|public
name|void
name|testGetPost
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.post_id"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.count"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.start"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.fields"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|api
operator|.
name|model
operator|.
name|Post
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETPOST"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getPost result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getPost: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for getPostComments
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testGetPostComments ()
specifier|public
name|void
name|testGetPostComments
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.post_id"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.count"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.start"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.fields"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|api
operator|.
name|model
operator|.
name|Comments
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETPOSTCOMMENTS"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getPostComments result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getPostComments: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for likePost
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testLikePost ()
specifier|public
name|void
name|testLikePost
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.post_id"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.linkedin.api.model.IsLiked
name|headers
operator|.
name|put
argument_list|(
literal|"CamelLinkedIn.isliked"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|requestBodyAndHeaders
argument_list|(
literal|"direct://LIKEPOST"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for removePost
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testRemovePost ()
specifier|public
name|void
name|testRemovePost
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "post_id"
name|requestBody
argument_list|(
literal|"direct://REMOVEPOST"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for addComment
name|from
argument_list|(
literal|"direct://ADDCOMMENT"
argument_list|)
operator|.
name|to
argument_list|(
literal|"linkedin://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addComment"
argument_list|)
expr_stmt|;
comment|// test route for flagCategory
name|from
argument_list|(
literal|"direct://FLAGCATEGORY"
argument_list|)
operator|.
name|to
argument_list|(
literal|"linkedin://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/flagCategory"
argument_list|)
expr_stmt|;
comment|// test route for followPost
name|from
argument_list|(
literal|"direct://FOLLOWPOST"
argument_list|)
operator|.
name|to
argument_list|(
literal|"linkedin://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/followPost"
argument_list|)
expr_stmt|;
comment|// test route for getPost
name|from
argument_list|(
literal|"direct://GETPOST"
argument_list|)
operator|.
name|to
argument_list|(
literal|"linkedin://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getPost"
argument_list|)
expr_stmt|;
comment|// test route for getPostComments
name|from
argument_list|(
literal|"direct://GETPOSTCOMMENTS"
argument_list|)
operator|.
name|to
argument_list|(
literal|"linkedin://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getPostComments"
argument_list|)
expr_stmt|;
comment|// test route for likePost
name|from
argument_list|(
literal|"direct://LIKEPOST"
argument_list|)
operator|.
name|to
argument_list|(
literal|"linkedin://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/likePost"
argument_list|)
expr_stmt|;
comment|// test route for removePost
name|from
argument_list|(
literal|"direct://REMOVEPOST"
argument_list|)
operator|.
name|to
argument_list|(
literal|"linkedin://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/removePost?inBody=post_id"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

