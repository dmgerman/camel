begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.lzf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|lzf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ning
operator|.
name|compress
operator|.
name|lzf
operator|.
name|LZFInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|LZFDataFormatTest
specifier|public
class|class
name|LZFDataFormatTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|TEXT
specifier|private
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"Hamlet by William Shakespeare\n"
operator|+
literal|"To be, or not to be: that is the question:\n"
operator|+
literal|"Whether 'tis nobler in the mind to suffer\n"
operator|+
literal|"The slings and arrows of outrageous fortune,\n"
operator|+
literal|"Or to take arms against a sea of troubles,\n"
operator|+
literal|"And by opposing end them? To die: to sleep;"
decl_stmt|;
annotation|@
name|Test
DECL|method|testMarshalTextToLzf ()
specifier|public
name|void
name|testMarshalTextToLzf
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|output
init|=
name|sendText
argument_list|(
literal|"direct:textToLzf"
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|LZFInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|output
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|IOConverter
operator|.
name|toString
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Uncompressed something different than compressed"
argument_list|,
name|TEXT
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnMarshalTextToLzf ()
specifier|public
name|void
name|testUnMarshalTextToLzf
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:unMarshalTextToLzf"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
name|TEXT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|sendText
argument_list|(
literal|"direct:unMarshalTextToLzf"
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelUnMarshalTextToLzf ()
specifier|public
name|void
name|testParallelUnMarshalTextToLzf
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:parallelUnMarshalTextToLzf"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
name|TEXT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|sendText
argument_list|(
literal|"direct:parallelUnMarshalTextToLzf"
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|LZFDataFormat
name|dataFormat
init|=
operator|new
name|LZFDataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setUsingParallelCompression
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:textToLzf"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|lzf
argument_list|()
expr_stmt|;
name|from
argument_list|(
literal|"direct:unMarshalTextToLzf"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|lzf
argument_list|()
operator|.
name|unmarshal
argument_list|()
operator|.
name|lzf
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:unMarshalTextToLzf"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:parallelUnMarshalTextToLzf"
argument_list|)
operator|.
name|marshal
argument_list|(
name|dataFormat
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|dataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:parallelUnMarshalTextToLzf"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|sendText (String destination)
specifier|private
name|byte
index|[]
name|sendText
parameter_list|(
name|String
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|template
operator|.
name|requestBody
argument_list|(
name|destination
argument_list|,
name|TEXT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

