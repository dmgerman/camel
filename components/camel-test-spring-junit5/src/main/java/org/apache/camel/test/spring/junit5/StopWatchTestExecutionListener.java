begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.spring.junit5
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|junit5
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractTestExecutionListener
import|;
end_import

begin_comment
comment|/**  * An execution listener that simulates the timing output built in to {@link org.apache.camel.test.junit5.CamelTestSupport}.  */
end_comment

begin_class
DECL|class|StopWatchTestExecutionListener
specifier|public
class|class
name|StopWatchTestExecutionListener
extends|extends
name|AbstractTestExecutionListener
block|{
DECL|field|threadStopWatch
specifier|protected
specifier|static
name|ThreadLocal
argument_list|<
name|StopWatch
argument_list|>
name|threadStopWatch
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Exists primarily for testing purposes, but allows for access to the underlying stop watch instance for a test.      */
DECL|method|getStopWatch ()
specifier|public
specifier|static
name|StopWatch
name|getStopWatch
parameter_list|()
block|{
return|return
name|threadStopWatch
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|beforeTestMethod (TestContext testContext)
specifier|public
name|void
name|beforeTestMethod
parameter_list|(
name|TestContext
name|testContext
parameter_list|)
throws|throws
name|Exception
block|{
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|threadStopWatch
operator|.
name|set
argument_list|(
name|stopWatch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterTestMethod (TestContext testContext)
specifier|public
name|void
name|afterTestMethod
parameter_list|(
name|TestContext
name|testContext
parameter_list|)
throws|throws
name|Exception
block|{
name|StopWatch
name|watch
init|=
name|threadStopWatch
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|watch
operator|!=
literal|null
condition|)
block|{
name|long
name|time
init|=
name|watch
operator|.
name|taken
argument_list|()
decl_stmt|;
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|testContext
operator|.
name|getTestClass
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"********************************************************************************"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing done: "
operator|+
name|testContext
operator|.
name|getTestMethod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"("
operator|+
name|testContext
operator|.
name|getTestClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Took: "
operator|+
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|time
argument_list|)
operator|+
literal|" ("
operator|+
name|time
operator|+
literal|" millis)"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"********************************************************************************"
argument_list|)
expr_stmt|;
name|threadStopWatch
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

