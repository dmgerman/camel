begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|junit5
operator|.
name|CamelSpringBootExecutionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|junit5
operator|.
name|CamelSpringTestContextLoaderTestExecutionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|junit5
operator|.
name|DisableJmxTestExecutionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|junit5
operator|.
name|StopWatchTestExecutionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|junit5
operator|.
name|SpringTestExecutionListenerSorter
operator|.
name|getPrecedence
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_class
DECL|class|SpringTestExecutionListenerSorterTest
specifier|public
class|class
name|SpringTestExecutionListenerSorterTest
block|{
annotation|@
name|Test
DECL|method|getPrecedencesForRegisteredClassesShouldReturnCorrectOrder ()
name|void
name|getPrecedencesForRegisteredClassesShouldReturnCorrectOrder
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|listenersInExpectedOrder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|listenersInExpectedOrder
operator|.
name|add
argument_list|(
name|CamelSpringTestContextLoaderTestExecutionListener
operator|.
name|class
argument_list|)
expr_stmt|;
name|listenersInExpectedOrder
operator|.
name|add
argument_list|(
name|DisableJmxTestExecutionListener
operator|.
name|class
argument_list|)
expr_stmt|;
name|listenersInExpectedOrder
operator|.
name|add
argument_list|(
name|CamelSpringBootExecutionListener
operator|.
name|class
argument_list|)
expr_stmt|;
name|listenersInExpectedOrder
operator|.
name|add
argument_list|(
name|StopWatchTestExecutionListener
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|listenersSortedByPrecedence
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|listenersInExpectedOrder
argument_list|)
decl_stmt|;
name|listenersSortedByPrecedence
operator|.
name|sort
argument_list|(
parameter_list|(
name|c1
parameter_list|,
name|c2
parameter_list|)
lambda|->
name|Integer
operator|.
name|compare
argument_list|(
name|getPrecedence
argument_list|(
name|c1
argument_list|)
argument_list|,
name|getPrecedence
argument_list|(
name|c2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|listenersInExpectedOrder
argument_list|,
name|listenersSortedByPrecedence
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getPrecedenceForWrongClassShouldThrow ()
name|void
name|getPrecedenceForWrongClassShouldThrow
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getPrecedence
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

