begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.geocoder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|geocoder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|GeoApiContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|GeocodingApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|GeolocationApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|errors
operator|.
name|InvalidRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|errors
operator|.
name|OverDailyLimitException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|errors
operator|.
name|OverQueryLimitException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|errors
operator|.
name|RequestDeniedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|errors
operator|.
name|UnknownErrorException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|model
operator|.
name|AddressComponent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|model
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|model
operator|.
name|GeocodingResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|model
operator|.
name|GeolocationPayload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|model
operator|.
name|GeolocationResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|maps
operator|.
name|model
operator|.
name|LatLng
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The GeoCoder producer.  */
end_comment

begin_class
DECL|class|GeoCoderProducer
specifier|public
class|class
name|GeoCoderProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GeoCoderProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|GeoCoderEndpoint
name|endpoint
decl_stmt|;
DECL|field|context
specifier|private
name|GeoApiContext
name|context
decl_stmt|;
DECL|method|GeoCoderProducer (GeoCoderEndpoint endpoint)
specifier|public
name|GeoCoderProducer
parameter_list|(
name|GeoCoderEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
comment|// headers take precedence
name|String
name|address
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|ADDRESS
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|address
operator|=
name|endpoint
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
name|String
name|latlng
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|LATLNG
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|latlng
operator|==
literal|null
condition|)
block|{
name|latlng
operator|=
name|endpoint
operator|.
name|getLatlng
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|latlng
operator|!=
literal|null
condition|)
block|{
name|String
name|lat
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|latlng
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|String
name|lng
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|latlng
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|LatLng
name|latLng
init|=
operator|new
name|LatLng
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|lat
argument_list|)
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|lng
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode for lat/lng {}"
argument_list|,
name|latlng
argument_list|)
expr_stmt|;
name|GeocodingResult
index|[]
name|results
init|=
name|GeocodingApi
operator|.
name|reverseGeocode
argument_list|(
name|context
argument_list|,
name|latLng
argument_list|)
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode response {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
name|extractGeoResult
argument_list|(
name|results
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
comment|// is it current address
if|if
condition|(
literal|"current"
operator|.
name|equals
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|processCurrentLocation
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode for address {}"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|GeocodingResult
index|[]
name|results
init|=
name|GeocodingApi
operator|.
name|geocode
argument_list|(
name|context
argument_list|,
name|address
argument_list|)
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode response {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
name|extractGeoResult
argument_list|(
name|results
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RequestDeniedException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|STATUS
argument_list|,
name|GeocoderStatus
operator|.
name|REQUEST_DENIED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OverQueryLimitException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|STATUS
argument_list|,
name|GeocoderStatus
operator|.
name|OVER_QUERY_LIMIT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OverDailyLimitException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|STATUS
argument_list|,
name|GeocoderStatus
operator|.
name|OVER_DAILY_LIMIT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|STATUS
argument_list|,
name|GeocoderStatus
operator|.
name|INVALID_REQUEST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownErrorException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|STATUS
argument_list|,
name|GeocoderStatus
operator|.
name|UNKNOWN_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Perform geolocation to retrieve LatLng and then perform a geocoding      */
DECL|method|processCurrentLocation (Exchange exchange)
specifier|protected
name|void
name|processCurrentLocation
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geolocation for current location"
argument_list|)
expr_stmt|;
name|GeolocationPayload
name|payload
init|=
operator|new
name|GeolocationPayload
argument_list|()
decl_stmt|;
name|payload
operator|.
name|considerIp
operator|=
literal|true
expr_stmt|;
name|GeolocationResult
name|result
init|=
name|GeolocationApi
operator|.
name|geolocate
argument_list|(
name|context
argument_list|,
name|payload
argument_list|)
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geolocation response {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//status
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|STATUS
argument_list|,
name|GeocoderStatus
operator|.
name|OK
argument_list|)
expr_stmt|;
comment|//latlng
name|String
name|resLatlng
init|=
name|result
operator|.
name|location
operator|.
name|toString
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|LATLNG
argument_list|,
name|resLatlng
argument_list|)
expr_stmt|;
comment|//address - reverse geocode
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode - reverse geocode for location {}"
argument_list|,
name|resLatlng
argument_list|)
expr_stmt|;
name|GeocodingResult
index|[]
name|results
init|=
name|GeocodingApi
operator|.
name|reverseGeocode
argument_list|(
name|context
argument_list|,
name|result
operator|.
name|location
argument_list|)
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode response {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
name|extractGeoResult
argument_list|(
name|results
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setLatLngToExchangeHeader (LatLng location, Exchange exchange)
specifier|private
name|void
name|setLatLngToExchangeHeader
parameter_list|(
name|LatLng
name|location
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|double
name|resLat
init|=
name|location
operator|.
name|lat
decl_stmt|;
name|double
name|resLng
init|=
name|location
operator|.
name|lng
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|LAT
argument_list|,
name|formatLatOrLon
argument_list|(
name|resLat
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|LNG
argument_list|,
name|formatLatOrLon
argument_list|(
name|resLng
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|resLatlng
init|=
name|location
operator|.
name|toString
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|LATLNG
argument_list|,
name|resLatlng
argument_list|)
expr_stmt|;
block|}
DECL|method|extractGeoResult (GeocodingResult[] res, Exchange exchange)
specifier|protected
name|void
name|extractGeoResult
parameter_list|(
name|GeocodingResult
index|[]
name|res
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// should we include body
if|if
condition|(
operator|!
name|endpoint
operator|.
name|isHeadersOnly
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
comment|//no results
if|if
condition|(
name|res
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|STATUS
argument_list|,
name|GeocoderStatus
operator|.
name|ZERO_RESULTS
argument_list|)
expr_stmt|;
return|return;
block|}
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|STATUS
argument_list|,
name|GeocoderStatus
operator|.
name|OK
argument_list|)
expr_stmt|;
name|GeocodingResult
name|first
init|=
name|res
index|[
literal|0
index|]
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|ADDRESS
argument_list|,
name|first
operator|.
name|formattedAddress
argument_list|)
expr_stmt|;
comment|// just grab the first element and its lat and lon
name|setLatLngToExchangeHeader
argument_list|(
name|first
operator|.
name|geometry
operator|.
name|location
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|//additional details
name|AddressComponent
name|country
init|=
name|getCountry
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|country
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|COUNTRY_SHORT
argument_list|,
name|country
operator|.
name|shortName
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|COUNTRY_LONG
argument_list|,
name|country
operator|.
name|longName
argument_list|)
expr_stmt|;
block|}
name|AddressComponent
name|city
init|=
name|getCity
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|city
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|CITY
argument_list|,
name|city
operator|.
name|longName
argument_list|)
expr_stmt|;
block|}
name|AddressComponent
name|postalCode
init|=
name|getPostalCode
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|postalCode
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|POSTAL_CODE
argument_list|,
name|postalCode
operator|.
name|shortName
argument_list|)
expr_stmt|;
block|}
name|AddressComponent
name|region
init|=
name|getRegion
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|REGION_CODE
argument_list|,
name|region
operator|.
name|shortName
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|REGION_NAME
argument_list|,
name|region
operator|.
name|longName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|formatLatOrLon (double value)
specifier|private
name|String
name|formatLatOrLon
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"%.8f"
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|getComponent (GeocodingResult[] results, AddressType addressType)
specifier|private
specifier|static
name|AddressComponent
name|getComponent
parameter_list|(
name|GeocodingResult
index|[]
name|results
parameter_list|,
name|AddressType
name|addressType
parameter_list|)
block|{
for|for
control|(
name|GeocodingResult
name|result
range|:
name|results
control|)
block|{
for|for
control|(
name|AddressType
name|type
range|:
name|result
operator|.
name|types
control|)
block|{
if|if
condition|(
name|type
operator|==
name|addressType
operator|&&
name|result
operator|.
name|addressComponents
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|result
operator|.
name|addressComponents
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getCountry (GeocodingResult[] res)
specifier|private
specifier|static
name|AddressComponent
name|getCountry
parameter_list|(
name|GeocodingResult
index|[]
name|res
parameter_list|)
block|{
return|return
name|getComponent
argument_list|(
name|res
argument_list|,
name|AddressType
operator|.
name|COUNTRY
argument_list|)
return|;
block|}
DECL|method|getCity (GeocodingResult[] res)
specifier|private
specifier|static
name|AddressComponent
name|getCity
parameter_list|(
name|GeocodingResult
index|[]
name|res
parameter_list|)
block|{
return|return
name|getComponent
argument_list|(
name|res
argument_list|,
name|AddressType
operator|.
name|LOCALITY
argument_list|)
return|;
block|}
DECL|method|getPostalCode (GeocodingResult[] res)
specifier|private
specifier|static
name|AddressComponent
name|getPostalCode
parameter_list|(
name|GeocodingResult
index|[]
name|res
parameter_list|)
block|{
return|return
name|getComponent
argument_list|(
name|res
argument_list|,
name|AddressType
operator|.
name|POSTAL_CODE
argument_list|)
return|;
block|}
DECL|method|getRegion (GeocodingResult[] res)
specifier|private
specifier|static
name|AddressComponent
name|getRegion
parameter_list|(
name|GeocodingResult
index|[]
name|res
parameter_list|)
block|{
return|return
name|getComponent
argument_list|(
name|res
argument_list|,
name|AddressType
operator|.
name|ADMINISTRATIVE_AREA_LEVEL_1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|context
operator|=
name|endpoint
operator|.
name|createGeoApiContext
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

