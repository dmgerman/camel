begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.geocoder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|geocoder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|geocoder
operator|.
name|Geocoder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|geocoder
operator|.
name|model
operator|.
name|GeocodeResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|geocoder
operator|.
name|model
operator|.
name|GeocoderAddressComponent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|geocoder
operator|.
name|model
operator|.
name|GeocoderRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|geocoder
operator|.
name|model
operator|.
name|GeocoderResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|geocoder
operator|.
name|model
operator|.
name|GeocoderStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|geocoder
operator|.
name|model
operator|.
name|LatLng
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The GeoCoder producer.  */
end_comment

begin_class
DECL|class|GeoCoderProducer
specifier|public
class|class
name|GeoCoderProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GeoCoderProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|GeoCoderEndpoint
name|endpoint
decl_stmt|;
DECL|field|geocoder
specifier|private
specifier|final
name|Geocoder
name|geocoder
init|=
operator|new
name|Geocoder
argument_list|()
decl_stmt|;
DECL|method|GeoCoderProducer (GeoCoderEndpoint endpoint)
specifier|public
name|GeoCoderProducer
parameter_list|(
name|GeoCoderEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// header take precedence
name|String
name|address
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|ADDRESS
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|address
operator|=
name|endpoint
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
name|String
name|latlng
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|LATLNG
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|latlng
operator|==
literal|null
condition|)
block|{
name|latlng
operator|=
name|endpoint
operator|.
name|getLatlng
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|latlng
operator|!=
literal|null
condition|)
block|{
name|GeocoderRequest
name|req
init|=
operator|new
name|GeocoderRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setLanguage
argument_list|(
name|endpoint
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|lat
init|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|latlng
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|String
name|lng
init|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|latlng
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|req
operator|.
name|setLocation
argument_list|(
operator|new
name|LatLng
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode for lat/lng {}"
argument_list|,
name|latlng
argument_list|)
expr_stmt|;
name|GeocodeResponse
name|res
init|=
name|geocoder
operator|.
name|geocode
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode response {}"
argument_list|,
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|extractGeoResult
argument_list|(
name|res
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|GeocoderRequest
name|req
init|=
operator|new
name|GeocoderRequest
argument_list|(
name|address
argument_list|,
name|endpoint
operator|.
name|getLanguage
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode for address {}"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|GeocodeResponse
name|res
init|=
name|geocoder
operator|.
name|geocode
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Geocode response {}"
argument_list|,
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|extractGeoResult
argument_list|(
name|res
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|extractGeoResult (GeocodeResponse res, Exchange exchange)
specifier|protected
name|void
name|extractGeoResult
parameter_list|(
name|GeocodeResponse
name|res
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|STATUS
argument_list|,
name|res
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|getStatus
argument_list|()
operator|==
name|GeocoderStatus
operator|.
name|OK
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|ADDRESS
argument_list|,
name|res
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFormattedAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// just grab the first element and its lat and lon
name|BigDecimal
name|resLat
init|=
name|res
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeometry
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|BigDecimal
name|resLon
init|=
name|res
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeometry
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getLng
argument_list|()
decl_stmt|;
name|String
name|resLatlng
init|=
name|resLat
operator|.
name|toPlainString
argument_list|()
operator|+
literal|","
operator|+
name|resLon
operator|.
name|toPlainString
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|LATLNG
argument_list|,
name|resLatlng
argument_list|)
expr_stmt|;
name|GeocoderAddressComponent
name|country
init|=
name|getCountry
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|country
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|COUNTRY_SHORT
argument_list|,
name|country
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GeoCoderConstants
operator|.
name|COUNTRY_LONG
argument_list|,
name|country
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCountry (GeocodeResponse res)
specifier|private
specifier|static
name|GeocoderAddressComponent
name|getCountry
parameter_list|(
name|GeocodeResponse
name|res
parameter_list|)
block|{
for|for
control|(
name|GeocoderResult
name|result
range|:
name|res
operator|.
name|getResults
argument_list|()
control|)
block|{
comment|// look for "country" in types
for|for
control|(
name|String
name|type
range|:
name|result
operator|.
name|getTypes
argument_list|()
control|)
block|{
if|if
condition|(
literal|"country"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|result
operator|.
name|getAddressComponents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

