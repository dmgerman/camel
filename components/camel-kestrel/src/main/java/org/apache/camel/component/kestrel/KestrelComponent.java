begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kestrel
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kestrel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|net
operator|.
name|spy
operator|.
name|memcached
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|spy
operator|.
name|memcached
operator|.
name|ConnectionFactoryBuilder
import|;
end_import

begin_import
import|import
name|net
operator|.
name|spy
operator|.
name|memcached
operator|.
name|FailureMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|spy
operator|.
name|memcached
operator|.
name|MemcachedClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Camel component which offers queueing over the Memcached protocol  * as supported by Kestrel.  */
end_comment

begin_class
DECL|class|KestrelComponent
specifier|public
class|class
name|KestrelComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KestrelComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
name|KestrelConfiguration
name|configuration
decl_stmt|;
DECL|field|memcachedConnectionFactory
specifier|private
name|ConnectionFactory
name|memcachedConnectionFactory
decl_stmt|;
comment|/**      * We cache the memcached clients by queue for reuse      */
DECL|field|memcachedClientCache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MemcachedClient
argument_list|>
name|memcachedClientCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MemcachedClient
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|KestrelComponent ()
specifier|public
name|KestrelComponent
parameter_list|()
block|{
name|configuration
operator|=
operator|new
name|KestrelConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|KestrelComponent (KestrelConfiguration configuration)
specifier|public
name|KestrelComponent
parameter_list|(
name|KestrelConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|KestrelComponent (CamelContext context)
specifier|public
name|KestrelComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|KestrelConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|ConnectionFactoryBuilder
name|builder
init|=
operator|new
name|ConnectionFactoryBuilder
argument_list|()
decl_stmt|;
comment|// VERY IMPORTANT! Otherwise, spymemcached optimizes away concurrent gets
name|builder
operator|.
name|setShouldOptimize
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// We never want spymemcached to time out
name|builder
operator|.
name|setOpTimeout
argument_list|(
literal|9999999
argument_list|)
expr_stmt|;
comment|// Retry upon failure
name|builder
operator|.
name|setFailureMode
argument_list|(
name|FailureMode
operator|.
name|Retry
argument_list|)
expr_stmt|;
name|memcachedConnectionFactory
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|KestrelConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (KestrelConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|KestrelConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|KestrelEndpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Copy the configuration as each endpoint can override defaults
name|KestrelConfiguration
name|config
init|=
name|getConfiguration
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// Parse the URI, expected to be in one of the following formats:
comment|// 1. Use the base KestrelConfiguration for host addresses:
comment|//      kestrel://queue[?parameters]
comment|//      kestrel:///queue[?parameters]
comment|// 2. Override the host, but use the default port:
comment|//      kestrel://host/queue[?parameters]
comment|// 3. Override the host and port:
comment|//      kestrel://host:port/queue[?parameters]
comment|// 4. Supply a list of host addresses:
comment|//      kestrel://host[:port],host[:port]/queue[?parameters]
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|String
name|queue
decl_stmt|;
name|String
index|[]
name|addresses
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|getPath
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// This would be the case when they haven't specified any explicit
comment|// address(es), and the queue ends up in the "authority" portion of
comment|// the URI.  For example:
comment|//      kestrel://queue[?parameters]
name|queue
operator|=
name|u
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|u
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getAuthority
argument_list|()
argument_list|)
condition|)
block|{
comment|// The "path" was present without an authority, such as:
comment|//      kestrel:///queue[?parameters]
name|queue
operator|=
name|u
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Both "path" and "authority" were present in the URI, which
comment|// means both address(es) and the queue were specified, i.e.:
comment|//      kestrel://host/queue[?parameters]
comment|//      kestrel://host:port/queue[?parameters]
comment|//      kestrel://host[:port],host[:port]/queue[?parameters]
name|addresses
operator|=
name|u
operator|.
name|getAuthority
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|queue
operator|=
name|u
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
comment|// Trim off any slash(es), i.e. "/queue/" -> "queue"
while|while
condition|(
name|queue
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|queue
operator|=
name|queue
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|queue
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|queue
operator|=
name|queue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|queue
argument_list|)
condition|)
block|{
comment|// This would be the case if the URI didn't include a path, or if
comment|// the path was just "/" or something...throw an exception.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Queue not specified in endpoint URI: "
operator|+
name|uri
argument_list|)
throw|;
block|}
if|if
condition|(
name|addresses
operator|!=
literal|null
operator|&&
name|addresses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// Override the addresses on the copied config
name|config
operator|.
name|setAddresses
argument_list|(
name|addresses
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Explicit address(es) weren't specified on the URI, which is
comment|// no problem...just default the addresses to whatever was set on
comment|// the base KestrelConfiguration.  And since we've already copied
comment|// the config, there's nothing else we need to do there.  But let's
comment|// make sure the addresses field was indeed set on the base config.
if|if
condition|(
name|config
operator|.
name|getAddresses
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Addresses not set in base configuration or endpoint: "
operator|+
name|uri
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating endpoint for queue \""
operator|+
name|queue
operator|+
literal|"\" on "
operator|+
name|config
operator|.
name|getAddressesAsString
argument_list|()
operator|+
literal|", parameters="
operator|+
name|parameters
argument_list|)
expr_stmt|;
comment|// Finally, override config with any supplied URI parameters
name|setProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// Create the endpoint for the given queue with the config we built
return|return
operator|new
name|KestrelEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|,
name|queue
argument_list|)
return|;
block|}
DECL|method|getMemcachedClient (KestrelConfiguration config, String queue)
specifier|public
name|MemcachedClient
name|getMemcachedClient
parameter_list|(
name|KestrelConfiguration
name|config
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
name|String
name|key
init|=
name|config
operator|.
name|getAddressesAsString
argument_list|()
operator|+
literal|"/"
operator|+
name|queue
decl_stmt|;
name|MemcachedClient
name|memcachedClient
init|=
name|memcachedClientCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|memcachedClient
operator|!=
literal|null
condition|)
block|{
return|return
name|memcachedClient
return|;
block|}
synchronized|synchronized
init|(
name|memcachedClientCache
init|)
block|{
if|if
condition|(
operator|(
name|memcachedClient
operator|=
name|memcachedClientCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating MemcachedClient for "
operator|+
name|key
argument_list|)
expr_stmt|;
try|try
block|{
name|memcachedClient
operator|=
operator|new
name|MemcachedClient
argument_list|(
name|memcachedConnectionFactory
argument_list|,
name|config
operator|.
name|getInetSocketAddresses
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Failed to connect to "
operator|+
name|key
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|memcachedClientCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|memcachedClient
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|memcachedClient
return|;
block|}
DECL|method|closeMemcachedClient (String key, MemcachedClient memcachedClient)
specifier|public
name|void
name|closeMemcachedClient
parameter_list|(
name|String
name|key
parameter_list|,
name|MemcachedClient
name|memcachedClient
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing client connection to {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|memcachedClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|memcachedClientCache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close client connection to "
operator|+
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
specifier|synchronized
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Use a copy so we can clear the memcached client cache eagerly
name|Map
argument_list|<
name|String
argument_list|,
name|MemcachedClient
argument_list|>
name|copy
decl_stmt|;
synchronized|synchronized
init|(
name|memcachedClientCache
init|)
block|{
name|copy
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MemcachedClient
argument_list|>
argument_list|(
name|memcachedClientCache
argument_list|)
expr_stmt|;
name|memcachedClientCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MemcachedClient
argument_list|>
name|entry
range|:
name|copy
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|closeMemcachedClient
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

