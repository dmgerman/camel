begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dozer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dozer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dozermapper
operator|.
name|core
operator|.
name|CustomConverter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dozermapper
operator|.
name|core
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|dozer
operator|.
name|DozerBeanMapperConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|dozer
operator|.
name|MapperFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
import|;
end_import

begin_comment
comment|/**  * The dozer component provides the ability to map between Java beans using the Dozer mapping library.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.15.0"
argument_list|,
name|scheme
operator|=
literal|"dozer"
argument_list|,
name|title
operator|=
literal|"Dozer"
argument_list|,
name|syntax
operator|=
literal|"dozer:name"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"transformation"
argument_list|)
DECL|class|DozerEndpoint
specifier|public
class|class
name|DozerEndpoint
extends|extends
name|DefaultEndpoint
block|{
comment|// IDs for built-in custom converters used with the Dozer component
DECL|field|CUSTOM_MAPPING_ID
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_MAPPING_ID
init|=
literal|"_customMapping"
decl_stmt|;
DECL|field|VARIABLE_MAPPING_ID
specifier|private
specifier|static
specifier|final
name|String
name|VARIABLE_MAPPING_ID
init|=
literal|"_variableMapping"
decl_stmt|;
DECL|field|EXPRESSION_MAPPING_ID
specifier|private
specifier|static
specifier|final
name|String
name|EXPRESSION_MAPPING_ID
init|=
literal|"_expressionMapping"
decl_stmt|;
DECL|field|mapper
specifier|private
name|Mapper
name|mapper
decl_stmt|;
DECL|field|variableMapper
specifier|private
name|VariableMapper
name|variableMapper
decl_stmt|;
DECL|field|customMapper
specifier|private
name|CustomMapper
name|customMapper
decl_stmt|;
DECL|field|expressionMapper
specifier|private
name|ExpressionMapper
name|expressionMapper
decl_stmt|;
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|DozerConfiguration
name|configuration
decl_stmt|;
DECL|method|DozerEndpoint (String endpointUri, Component component, DozerConfiguration configuration)
specifier|public
name|DozerEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|DozerConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|variableMapper
operator|=
operator|new
name|VariableMapper
argument_list|()
expr_stmt|;
name|customMapper
operator|=
operator|new
name|CustomMapper
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|)
expr_stmt|;
name|expressionMapper
operator|=
operator|new
name|ExpressionMapper
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DozerProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Consumer not supported for Dozer endpoints"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getMapper ()
specifier|public
name|Mapper
name|getMapper
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|mapper
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|DozerConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (DozerConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|DozerConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getCustomMapper ()
name|CustomMapper
name|getCustomMapper
parameter_list|()
block|{
return|return
name|customMapper
return|;
block|}
DECL|method|getVariableMapper ()
name|VariableMapper
name|getVariableMapper
parameter_list|()
block|{
return|return
name|variableMapper
return|;
block|}
DECL|method|getExpressionMapper ()
name|ExpressionMapper
name|getExpressionMapper
parameter_list|()
block|{
return|return
name|expressionMapper
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|initDozerBeanContainerAndMapper
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
comment|// noop
block|}
DECL|method|initDozerBeanContainerAndMapper ()
specifier|protected
name|void
name|initDozerBeanContainerAndMapper
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Configuring {}..."
argument_list|,
name|Mapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getMappingConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|URL
name|url
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsUrl
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|configuration
operator|.
name|getMappingFile
argument_list|()
argument_list|)
decl_stmt|;
name|DozerBeanMapperConfiguration
name|config
init|=
operator|new
name|DozerBeanMapperConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setCustomConvertersWithId
argument_list|(
name|getCustomConvertersWithId
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMappingFiles
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setMappingConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DozerBeanMapperConfiguration
name|config
init|=
name|configuration
operator|.
name|getMappingConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getCustomConvertersWithId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setCustomConvertersWithId
argument_list|(
name|getCustomConvertersWithId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|getCustomConvertersWithId
argument_list|()
operator|.
name|putAll
argument_list|(
name|getCustomConvertersWithId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMappingFiles
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getMappingFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|URL
name|url
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsUrl
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|configuration
operator|.
name|getMappingFile
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setMappingFiles
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|MapperFactory
name|factory
init|=
operator|new
name|MapperFactory
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|configuration
operator|.
name|getMappingConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|mapper
operator|=
name|factory
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCustomConvertersWithId ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CustomConverter
argument_list|>
name|getCustomConvertersWithId
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CustomConverter
argument_list|>
name|customConvertersWithId
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|customConvertersWithId
operator|.
name|put
argument_list|(
name|CUSTOM_MAPPING_ID
argument_list|,
name|customMapper
argument_list|)
expr_stmt|;
name|customConvertersWithId
operator|.
name|put
argument_list|(
name|VARIABLE_MAPPING_ID
argument_list|,
name|variableMapper
argument_list|)
expr_stmt|;
name|customConvertersWithId
operator|.
name|put
argument_list|(
name|EXPRESSION_MAPPING_ID
argument_list|,
name|expressionMapper
argument_list|)
expr_stmt|;
return|return
name|customConvertersWithId
return|;
block|}
block|}
end_class

end_unit

