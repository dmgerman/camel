begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.dozer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|dozer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|DozerBeanMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|classmap
operator|.
name|ClassMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|loader
operator|.
name|CustomMappingsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|loader
operator|.
name|LoadMappingsResult
import|;
end_import

begin_comment
comment|/**  *<code>DozerTypeConverterLoader</code> provides the mechanism for registering  * a Dozer {@link Mapper} as {@link TypeConverter} for a {@link CamelContext}.  *<p>  * While a mapper can be explicitly supplied as a parameter the  * {@link CamelContext}'s registry will also be searched for {@link Mapper}  * instances. A {@link DozerTypeConverter} is created to wrap each  * {@link Mapper} instance and the mapper is queried for the types it converts.  * The queried types are used to register the {@link TypeConverter} with the  * context via its {@link TypeConverterRegistry}.  */
end_comment

begin_class
DECL|class|DozerTypeConverterLoader
specifier|public
class|class
name|DozerTypeConverterLoader
implements|implements
name|CamelContextAware
block|{
DECL|field|log
specifier|private
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
comment|/**      * Creates a<code>DozerTypeConverter</code> performing no      * {@link TypeConverter} registration.      */
DECL|method|DozerTypeConverterLoader ()
specifier|public
name|DozerTypeConverterLoader
parameter_list|()
block|{     }
comment|/**      * Creates a<code>DozerTypeConverter</code> that will search the given      * {@link CamelContext} for instances of {@link DozerBeanMapper}. Each      * discovered instance will be wrapped as a {@link DozerTypeConverter} and      * register as a {@link TypeConverter} with the context      *      * @param camelContext the context to register the      *            {@link DozerTypeConverter} in      */
DECL|method|DozerTypeConverterLoader (CamelContext camelContext)
specifier|public
name|DozerTypeConverterLoader
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|init
argument_list|(
name|camelContext
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a<code>DozerTypeConverter</code> that will wrap the the given      * {@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it      * with the given context. It will also search the context for      *      * @param camelContext the context to register the      *            {@link DozerTypeConverter} in      * @param mapper the DozerMapperBean to be wrapped as a type converter.      */
DECL|method|DozerTypeConverterLoader (CamelContext camelContext, DozerBeanMapper mapper)
specifier|public
name|DozerTypeConverterLoader
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|DozerBeanMapper
name|mapper
parameter_list|)
block|{
name|init
argument_list|(
name|camelContext
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
comment|/**      * Doses the actual querying and registration of {@link DozerTypeConverter}s      * with the {@link CamelContext}.      *      * @param camelContext the context to register the      *            {@link DozerTypeConverter} in      * @param mapper the DozerMapperBean to be wrapped as a type converter.      */
DECL|method|init (CamelContext camelContext, DozerBeanMapper mapper)
specifier|public
name|void
name|init
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|DozerBeanMapper
name|mapper
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DozerBeanMapper
argument_list|>
name|mappers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DozerBeanMapper
argument_list|>
argument_list|(
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByType
argument_list|(
name|DozerBeanMapper
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
name|mappers
operator|.
name|put
argument_list|(
literal|"parameter"
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mappers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Loaded %d dozer mappers from Camel's registry. Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances."
argument_list|)
expr_stmt|;
block|}
name|TypeConverterRegistry
name|registry
init|=
name|camelContext
operator|.
name|getTypeConverterRegistry
argument_list|()
decl_stmt|;
for|for
control|(
name|DozerBeanMapper
name|dozer
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ClassMap
argument_list|>
name|all
init|=
name|loadMappings
argument_list|(
name|dozer
argument_list|)
decl_stmt|;
name|DozerTypeConverter
name|converter
init|=
operator|new
name|DozerTypeConverter
argument_list|(
name|dozer
argument_list|)
decl_stmt|;
for|for
control|(
name|ClassMap
name|map
range|:
name|all
operator|.
name|values
argument_list|()
control|)
block|{
name|registry
operator|.
name|addTypeConverter
argument_list|(
name|map
operator|.
name|getSrcClassToMap
argument_list|()
argument_list|,
name|map
operator|.
name|getDestClassToMap
argument_list|()
argument_list|,
name|converter
argument_list|)
expr_stmt|;
name|registry
operator|.
name|addTypeConverter
argument_list|(
name|map
operator|.
name|getDestClassToMap
argument_list|()
argument_list|,
name|map
operator|.
name|getSrcClassToMap
argument_list|()
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadMappings (DozerBeanMapper mapper)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ClassMap
argument_list|>
name|loadMappings
parameter_list|(
name|DozerBeanMapper
name|mapper
parameter_list|)
block|{
comment|// TODO: This is a little wasteful as dozer has already parsed this
comment|// information, if does not expose it though so it must be done again.
comment|// Create a patch for Dozer to expose this.
name|CustomMappingsLoader
name|customMappingsLoader
init|=
operator|new
name|CustomMappingsLoader
argument_list|()
decl_stmt|;
name|LoadMappingsResult
name|loadMappingsResult
init|=
name|customMappingsLoader
operator|.
name|load
argument_list|(
name|mapper
operator|.
name|getMappingFiles
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ClassMap
argument_list|>
name|all
init|=
name|loadMappingsResult
operator|.
name|getCustomMappings
argument_list|()
operator|.
name|getAll
argument_list|()
decl_stmt|;
return|return
name|all
return|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|init
argument_list|(
name|camelContext
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

