begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dozer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dozer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|MarshalProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|UnmarshalProcessor
import|;
end_import

begin_comment
comment|/**  * Producer class for Dozer endpoints.  */
end_comment

begin_class
DECL|class|DozerProducer
specifier|public
class|class
name|DozerProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|endpoint
specifier|private
name|DozerEndpoint
name|endpoint
decl_stmt|;
DECL|field|unmarshaller
specifier|private
name|UnmarshalProcessor
name|unmarshaller
decl_stmt|;
DECL|field|marshaller
specifier|private
name|MarshalProcessor
name|marshaller
decl_stmt|;
comment|/**      * Create a new producer for dozer endpoints.      * @param endpoint endpoint requiring a producer      */
DECL|method|DozerProducer (DozerEndpoint endpoint)
specifier|public
name|DozerProducer
parameter_list|(
name|DozerEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Unmarshal the source content only if an unmarshaller is configured.
name|String
name|unmarshalId
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUnmarshalId
argument_list|()
decl_stmt|;
if|if
condition|(
name|unmarshalId
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unmarshalling input data using data format '{}'."
argument_list|,
name|unmarshalId
argument_list|)
expr_stmt|;
name|resolveUnmarshaller
argument_list|(
name|exchange
argument_list|,
name|unmarshalId
argument_list|)
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exchange
operator|.
name|getException
argument_list|()
throw|;
block|}
block|}
comment|// Load the target model class
name|Class
argument_list|<
name|?
argument_list|>
name|targetModel
init|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTargetModel
argument_list|()
argument_list|)
decl_stmt|;
comment|// If an unmarshaller was used, the unmarshalled message is the OUT message.
name|Message
name|msg
init|=
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
comment|// Convert to source model, if specified
name|String
name|sourceType
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSourceModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceType
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Converting to source model {}."
argument_list|,
name|sourceType
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|sourceModel
init|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|sourceType
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceModel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to load sourceModel class: "
operator|+
name|sourceType
argument_list|)
throw|;
block|}
name|msg
operator|.
name|setBody
argument_list|(
name|msg
operator|.
name|getBody
argument_list|(
name|sourceModel
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Perform mappings
name|log
operator|.
name|debug
argument_list|(
literal|"Mapping to target model {}."
argument_list|,
name|targetModel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|targetObject
init|=
name|endpoint
operator|.
name|getMapper
argument_list|()
operator|.
name|map
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|,
name|targetModel
argument_list|)
decl_stmt|;
comment|// Second pass to process literal mappings
name|endpoint
operator|.
name|getMapper
argument_list|()
operator|.
name|map
argument_list|(
name|endpoint
operator|.
name|getVariableMapper
argument_list|()
argument_list|,
name|targetObject
argument_list|)
expr_stmt|;
comment|// Third pass to process expression mappings
try|try
block|{
name|endpoint
operator|.
name|getExpressionMapper
argument_list|()
operator|.
name|setCurrentExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getMapper
argument_list|()
operator|.
name|map
argument_list|(
name|endpoint
operator|.
name|getExpressionMapper
argument_list|()
argument_list|,
name|targetObject
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Clear out the exchange reference on the expression mapper
name|endpoint
operator|.
name|getExpressionMapper
argument_list|()
operator|.
name|setCurrentExchange
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|setBody
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// Marshal the source content only if a marshaller is configured.
name|String
name|marshalId
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMarshalId
argument_list|()
decl_stmt|;
if|if
condition|(
name|marshalId
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Marshalling output data using data format '{}'."
argument_list|,
name|marshalId
argument_list|)
expr_stmt|;
name|resolveMarshaller
argument_list|(
name|exchange
argument_list|,
name|marshalId
argument_list|)
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exchange
operator|.
name|getException
argument_list|()
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|unmarshaller
operator|!=
literal|null
condition|)
block|{
name|unmarshaller
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|marshaller
operator|!=
literal|null
condition|)
block|{
name|marshaller
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doShutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|unmarshaller
operator|!=
literal|null
condition|)
block|{
name|unmarshaller
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|marshaller
operator|!=
literal|null
condition|)
block|{
name|marshaller
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Find and configure an unmarshaller for the specified data format.      */
DECL|method|resolveUnmarshaller ( Exchange exchange, String dataFormatId)
specifier|private
specifier|synchronized
name|UnmarshalProcessor
name|resolveUnmarshaller
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|dataFormatId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|unmarshaller
operator|==
literal|null
condition|)
block|{
name|DataFormat
name|dataFormat
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveDataFormat
argument_list|(
name|dataFormatId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataFormat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to resolve data format for unmarshalling: "
operator|+
name|dataFormatId
argument_list|)
throw|;
block|}
comment|// Wrap the data format in a processor and start/configure it.
comment|// Stop/shutdown is handled when the corresponding methods are
comment|// called on this producer.
name|unmarshaller
operator|=
operator|new
name|UnmarshalProcessor
argument_list|(
name|dataFormat
argument_list|)
expr_stmt|;
name|unmarshaller
operator|.
name|setCamelContext
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|unmarshaller
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|unmarshaller
return|;
block|}
comment|/**      * Find and configure an unmarshaller for the specified data format.      */
DECL|method|resolveMarshaller ( Exchange exchange, String dataFormatId)
specifier|private
specifier|synchronized
name|MarshalProcessor
name|resolveMarshaller
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|dataFormatId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|marshaller
operator|==
literal|null
condition|)
block|{
name|DataFormat
name|dataFormat
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveDataFormat
argument_list|(
name|dataFormatId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataFormat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to resolve data format for marshalling: "
operator|+
name|dataFormatId
argument_list|)
throw|;
block|}
comment|// Wrap the data format in a processor and start/configure it.
comment|// Stop/shutdown is handled when the corresponding methods are
comment|// called on this producer.
name|marshaller
operator|=
operator|new
name|MarshalProcessor
argument_list|(
name|dataFormat
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|setCamelContext
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|marshaller
return|;
block|}
block|}
end_class

end_unit

