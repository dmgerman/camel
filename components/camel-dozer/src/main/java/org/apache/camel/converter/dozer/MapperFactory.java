begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.dozer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|dozer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|el
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dozer
operator|.
name|DozerEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|CustomConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|DozerBeanMapperBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|DozerEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|config
operator|.
name|BeanContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|config
operator|.
name|GlobalSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|loader
operator|.
name|api
operator|.
name|BeanMappingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|loader
operator|.
name|xml
operator|.
name|ELEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dozer
operator|.
name|loader
operator|.
name|xml
operator|.
name|ExpressionElementReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|MapperFactory
specifier|public
class|class
name|MapperFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MapperFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|DozerBeanMapperConfiguration
name|configuration
decl_stmt|;
DECL|method|MapperFactory (CamelContext camelContext, DozerBeanMapperConfiguration configuration)
specifier|public
name|MapperFactory
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|DozerBeanMapperConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|Mapper
name|create
parameter_list|()
block|{
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"CamelContext is null"
argument_list|)
throw|;
block|}
return|return
name|parseConfiguration
argument_list|(
name|configuration
argument_list|)
return|;
block|}
DECL|method|parseConfiguration (DozerBeanMapperConfiguration configuration)
specifier|private
name|Mapper
name|parseConfiguration
parameter_list|(
name|DozerBeanMapperConfiguration
name|configuration
parameter_list|)
block|{
name|DozerBeanMapperBuilder
name|builder
init|=
name|DozerBeanMapperBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getMappingFiles
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|files
init|=
name|configuration
operator|.
name|getMappingFiles
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|configuration
operator|.
name|getMappingFiles
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|builder
operator|.
name|withMappingFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getCustomConverters
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CustomConverter
name|current
range|:
name|configuration
operator|.
name|getCustomConverters
argument_list|()
control|)
block|{
name|builder
operator|.
name|withCustomConverter
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configuration
operator|.
name|getEventListeners
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DozerEventListener
name|current
range|:
name|configuration
operator|.
name|getEventListeners
argument_list|()
control|)
block|{
name|builder
operator|.
name|withEventListener
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configuration
operator|.
name|getCustomConvertersWithId
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CustomConverter
argument_list|>
name|current
range|:
name|configuration
operator|.
name|getCustomConvertersWithId
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|withCustomConverterWithId
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
argument_list|,
name|current
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configuration
operator|.
name|getBeanMappingBuilders
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BeanMappingBuilder
name|current
range|:
name|configuration
operator|.
name|getBeanMappingBuilders
argument_list|()
control|)
block|{
name|builder
operator|.
name|withMappingBuilder
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configuration
operator|.
name|getCustomFieldMapper
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|withCustomFieldMapper
argument_list|(
name|configuration
operator|.
name|getCustomFieldMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Mapper
name|mapper
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|configureGlobalSettings
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
name|configureBeanContainer
argument_list|(
name|mapper
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|getMappingMetadata
argument_list|()
expr_stmt|;
return|return
name|mapper
return|;
block|}
comment|/**      * Sets hidden fields on the mapper and returns an instance      * NOTE: https://github.com/DozerMapper/dozer/issues/463      *      * @param mapper      */
DECL|method|configureGlobalSettings (Mapper mapper)
specifier|private
name|void
name|configureGlobalSettings
parameter_list|(
name|Mapper
name|mapper
parameter_list|)
block|{
name|GlobalSettings
name|settings
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to retrieve GlobalSettings from: "
operator|+
name|mapper
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
name|mapper
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"globalSettings"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|=
operator|(
name|GlobalSettings
operator|)
name|field
operator|.
name|get
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot retrieve Dozer GlobalSettings due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//Safety check
if|if
condition|(
name|settings
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot retrieve Dozer GlobalSettings due null reflection response"
argument_list|)
throw|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuring GlobalSettings to use Camel classloader: {}"
argument_list|,
name|DozerThreadContextClassLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
name|settings
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"classLoaderBeanName"
argument_list|)
decl_stmt|;
name|ReflectionHelper
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|settings
argument_list|,
name|DozerThreadContextClassLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot configure Dozer GlobalSettings to use DozerThreadContextClassLoader as classloader due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuring GlobalSettings to enable EL"
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
name|settings
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"elEnabled"
argument_list|)
decl_stmt|;
name|ReflectionHelper
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|settings
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|nsfEx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to enable EL in global Dozer settings"
argument_list|,
name|nsfEx
argument_list|)
throw|;
block|}
block|}
DECL|method|configureBeanContainer (Mapper mapper, DozerBeanMapperConfiguration configuration)
specifier|public
name|void
name|configureBeanContainer
parameter_list|(
name|Mapper
name|mapper
parameter_list|,
name|DozerBeanMapperConfiguration
name|configuration
parameter_list|)
block|{
name|String
name|elprop
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.el.ExpressionFactory"
argument_list|)
decl_stmt|;
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ClassLoader
name|appcl
init|=
name|camelContext
operator|.
name|getApplicationContextClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|auxcl
init|=
name|appcl
operator|!=
literal|null
condition|?
name|appcl
else|:
name|DozerEndpoint
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|auxcl
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|auxcl
operator|.
name|loadClass
argument_list|(
literal|"com.sun.el.ExpressionFactoryImpl"
argument_list|)
decl_stmt|;
name|ExpressionFactory
name|factory
init|=
operator|(
name|ExpressionFactory
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.el.ExpressionFactory"
argument_list|,
name|factory
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot load glasfish expression engine, using default"
argument_list|)
expr_stmt|;
block|}
name|BeanContainer
name|beanContainer
init|=
name|resolveBeanContainer
argument_list|(
name|mapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanContainer
operator|.
name|getElEngine
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ELEngine
name|engine
init|=
operator|new
name|ELEngine
argument_list|()
decl_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|beanContainer
operator|.
name|setElEngine
argument_list|(
name|engine
argument_list|)
expr_stmt|;
block|}
name|beanContainer
operator|.
name|setElementReader
argument_list|(
operator|new
name|ExpressionElementReader
argument_list|(
name|beanContainer
operator|.
name|getElEngine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|tccl
argument_list|)
expr_stmt|;
if|if
condition|(
name|elprop
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"javax.el.ExpressionFactory"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.el.ExpressionFactory"
argument_list|,
name|elprop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|resolveBeanContainer (Mapper mapper)
specifier|private
name|BeanContainer
name|resolveBeanContainer
parameter_list|(
name|Mapper
name|mapper
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to retrieve BeanContainer from: "
operator|+
name|mapper
argument_list|)
expr_stmt|;
name|BeanContainer
name|beanContainer
init|=
operator|(
name|BeanContainer
operator|)
name|resolveProperty
argument_list|(
name|mapper
argument_list|,
literal|"beanContainer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanContainer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot retrieve Dozer BeanContainer due null response"
argument_list|)
throw|;
block|}
return|return
name|beanContainer
return|;
block|}
DECL|method|resolveProperty (Mapper mapper, String fieldName)
specifier|private
specifier|static
name|Object
name|resolveProperty
parameter_list|(
name|Mapper
name|mapper
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|Object
name|prop
decl_stmt|;
try|try
block|{
name|Field
name|field
init|=
name|mapper
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|=
name|field
operator|.
name|get
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot retrieve DozerBeanMapper."
operator|+
name|fieldName
operator|+
literal|" due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|prop
return|;
block|}
block|}
end_class

end_unit

