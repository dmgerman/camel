begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dozer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dozer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CustomMapperTest
specifier|public
class|class
name|CustomMapperTest
block|{
DECL|field|customMapper
specifier|private
name|CustomMapper
name|customMapper
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|customMapper
operator|=
operator|new
name|CustomMapper
argument_list|(
operator|new
name|DefaultClassResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|selectMapperOneMethod ()
specifier|public
name|void
name|selectMapperOneMethod
parameter_list|()
block|{
name|customMapper
operator|.
name|setParameter
argument_list|(
name|MapperWithOneMethod
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|customMapper
operator|.
name|selectMethod
argument_list|(
name|MapperWithOneMethod
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|selectMapperMultipleMethods ()
specifier|public
name|void
name|selectMapperMultipleMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|selectedMethod
init|=
name|customMapper
operator|.
name|selectMethod
argument_list|(
name|MapperWithTwoMethods
operator|.
name|class
argument_list|,
name|B
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|selectedMethod
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MapperWithTwoMethods
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"convertToA"
argument_list|,
name|B
operator|.
name|class
argument_list|)
argument_list|,
name|selectedMethod
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mapCustomFindOperation ()
specifier|public
name|void
name|mapCustomFindOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|customMapper
operator|.
name|setParameter
argument_list|(
name|MapperWithTwoMethods
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|customMapper
operator|.
name|mapCustom
argument_list|(
operator|new
name|B
argument_list|()
argument_list|,
name|B
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mapCustomDeclaredOperation ()
specifier|public
name|void
name|mapCustomDeclaredOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|customMapper
operator|.
name|setParameter
argument_list|(
name|MapperWithTwoMethods
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|",convertToA"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|customMapper
operator|.
name|mapCustom
argument_list|(
operator|new
name|B
argument_list|()
argument_list|,
name|B
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mapCustomInvalidOperation ()
specifier|public
name|void
name|mapCustomInvalidOperation
parameter_list|()
block|{
name|customMapper
operator|.
name|setParameter
argument_list|(
name|MapperWithTwoMethods
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|",convertToB"
argument_list|)
expr_stmt|;
try|try
block|{
name|customMapper
operator|.
name|mapCustom
argument_list|(
operator|new
name|B
argument_list|()
argument_list|,
name|B
operator|.
name|class
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid operation should result in exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchMethodException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|mapCustomNullField ()
specifier|public
name|void
name|mapCustomNullField
parameter_list|()
throws|throws
name|Exception
block|{
name|customMapper
operator|.
name|setParameter
argument_list|(
name|MapperWithTwoMethods
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|customMapper
operator|.
name|mapCustom
argument_list|(
literal|null
argument_list|,
name|B
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|A
class|class
name|A
block|{      }
end_class

begin_class
DECL|class|B
class|class
name|B
extends|extends
name|A
block|{      }
end_class

begin_class
DECL|class|MapperWithOneMethod
class|class
name|MapperWithOneMethod
block|{
DECL|method|convertToA (String val)
specifier|public
name|A
name|convertToA
parameter_list|(
name|String
name|val
parameter_list|)
block|{
return|return
operator|new
name|A
argument_list|()
return|;
block|}
block|}
end_class

begin_class
DECL|class|MapperWithTwoMethods
class|class
name|MapperWithTwoMethods
block|{
DECL|method|convertToA (String val)
specifier|public
name|A
name|convertToA
parameter_list|(
name|String
name|val
parameter_list|)
block|{
return|return
operator|new
name|A
argument_list|()
return|;
block|}
DECL|method|convertToA (B val)
specifier|public
name|A
name|convertToA
parameter_list|(
name|B
name|val
parameter_list|)
block|{
return|return
operator|new
name|A
argument_list|()
return|;
block|}
block|}
end_class

end_unit

