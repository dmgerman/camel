begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dozer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dozer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CustomMapperParametersTest
specifier|public
class|class
name|CustomMapperParametersTest
block|{
DECL|field|customMapper
specifier|private
name|CustomMapper
name|customMapper
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|customMapper
operator|=
operator|new
name|CustomMapper
argument_list|(
operator|new
name|DefaultClassResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldExecuteCustomFunctionWithArguments ()
specifier|public
name|void
name|shouldExecuteCustomFunctionWithArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|customMapper
operator|.
name|setParameter
argument_list|(
name|MapperWithMultiParmMethod
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|",test,java.lang.Integer=12,java.lang.Integer=20"
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|customMapper
operator|.
name|mapCustom
argument_list|(
literal|"JeremiahWasABullfrog"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Bullfrog"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldExecuteCustomFunctionWithVariableArguments ()
specifier|public
name|void
name|shouldExecuteCustomFunctionWithVariableArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|customMapper
operator|.
name|setParameter
argument_list|(
name|MapperWithMultiParmMethod
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|",add,java.lang.Integer=12,java.lang.Integer=20"
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|customMapper
operator|.
name|mapCustom
argument_list|(
literal|"JeremiahWasABullfrog"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|32L
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|MapperWithMultiParmMethod
class|class
name|MapperWithMultiParmMethod
block|{
DECL|method|add (String source, Integer... operands)
specifier|public
name|Object
name|add
parameter_list|(
name|String
name|source
parameter_list|,
name|Integer
modifier|...
name|operands
parameter_list|)
block|{
name|long
name|sum
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Integer
name|operand
range|:
name|operands
control|)
block|{
name|sum
operator|+=
name|operand
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
DECL|method|test (String source, Integer beginindex, Integer endindex)
specifier|public
name|Object
name|test
parameter_list|(
name|String
name|source
parameter_list|,
name|Integer
name|beginindex
parameter_list|,
name|Integer
name|endindex
parameter_list|)
block|{
return|return
name|source
operator|.
name|substring
argument_list|(
name|beginindex
operator|.
name|intValue
argument_list|()
argument_list|,
name|endindex
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

