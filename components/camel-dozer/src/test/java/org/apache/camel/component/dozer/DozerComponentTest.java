begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dozer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dozer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DozerComponentTest
specifier|public
class|class
name|DozerComponentTest
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"examplename"
decl_stmt|;
DECL|field|MARSHAL_ID
specifier|private
specifier|static
specifier|final
name|String
name|MARSHAL_ID
init|=
literal|"marshal123"
decl_stmt|;
DECL|field|UNMARSHAL_ID
specifier|private
specifier|static
specifier|final
name|String
name|UNMARSHAL_ID
init|=
literal|"unmarshal456"
decl_stmt|;
DECL|field|SOURCE_MODEL
specifier|private
specifier|static
specifier|final
name|String
name|SOURCE_MODEL
init|=
literal|"org.example.A"
decl_stmt|;
DECL|field|TARGET_MODEL
specifier|private
specifier|static
specifier|final
name|String
name|TARGET_MODEL
init|=
literal|"org.example.B"
decl_stmt|;
DECL|field|DOZER_CONFIG_PATH
specifier|private
specifier|static
specifier|final
name|String
name|DOZER_CONFIG_PATH
init|=
literal|"test/dozerBeanMapping.xml"
decl_stmt|;
DECL|field|TRANSFORM_EP_1
specifier|private
specifier|static
specifier|final
name|String
name|TRANSFORM_EP_1
init|=
literal|"dozer:"
operator|+
name|NAME
operator|+
literal|"?marshalId="
operator|+
name|MARSHAL_ID
operator|+
literal|"&unmarshalId="
operator|+
name|UNMARSHAL_ID
operator|+
literal|"&sourceModel="
operator|+
name|SOURCE_MODEL
operator|+
literal|"&targetModel="
operator|+
name|TARGET_MODEL
operator|+
literal|"&mappingFile="
operator|+
name|DOZER_CONFIG_PATH
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreateEndpoint ()
specifier|public
name|void
name|testCreateEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|DozerComponent
name|comp
init|=
operator|new
name|DozerComponent
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setCamelContext
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|DozerEndpoint
name|ep
init|=
operator|(
name|DozerEndpoint
operator|)
name|comp
operator|.
name|createEndpoint
argument_list|(
name|TRANSFORM_EP_1
argument_list|)
decl_stmt|;
name|DozerConfiguration
name|config
init|=
name|ep
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NAME
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MARSHAL_ID
argument_list|,
name|config
operator|.
name|getMarshalId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|UNMARSHAL_ID
argument_list|,
name|config
operator|.
name|getUnmarshalId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SOURCE_MODEL
argument_list|,
name|config
operator|.
name|getSourceModel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TARGET_MODEL
argument_list|,
name|config
operator|.
name|getTargetModel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DOZER_CONFIG_PATH
argument_list|,
name|config
operator|.
name|getMappingFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requiredTargetModelMissing ()
specifier|public
name|void
name|requiredTargetModelMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|DozerComponent
name|comp
init|=
operator|new
name|DozerComponent
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setCamelContext
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|comp
operator|.
name|createEndpoint
argument_list|(
literal|"dozer:noTargetModel?mappingFile=mapping.xml"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"targetModel is a required parameter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

