begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jsonapi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jsonapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|jasminb
operator|.
name|jsonapi
operator|.
name|JSONAPIDocument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|jasminb
operator|.
name|jsonapi
operator|.
name|ResourceConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Dataformat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_comment
comment|/**  * JsonApi {@link org.apache.camel.spi.DataFormat} for marshal/unmarshal  */
end_comment

begin_class
annotation|@
name|Dataformat
argument_list|(
literal|"jsonApi"
argument_list|)
DECL|class|JsonApiDataFormat
specifier|public
class|class
name|JsonApiDataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
block|{
DECL|field|dataFormatTypes
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|dataFormatTypes
decl_stmt|;
DECL|field|mainFormatType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|mainFormatType
decl_stmt|;
DECL|method|JsonApiDataFormat ()
specifier|public
name|JsonApiDataFormat
parameter_list|()
block|{     }
DECL|method|JsonApiDataFormat (Class<?>[] dataFormatTypes)
specifier|public
name|JsonApiDataFormat
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|dataFormatTypes
parameter_list|)
block|{
name|this
operator|.
name|dataFormatTypes
operator|=
name|dataFormatTypes
expr_stmt|;
block|}
DECL|method|JsonApiDataFormat (Class<?> mainFormatType, Class<?>[] dataFormatTypes)
specifier|public
name|JsonApiDataFormat
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|mainFormatType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|dataFormatTypes
parameter_list|)
block|{
name|this
operator|.
name|mainFormatType
operator|=
name|mainFormatType
expr_stmt|;
name|this
operator|.
name|dataFormatTypes
operator|=
name|dataFormatTypes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"jsonApi"
return|;
block|}
annotation|@
name|Override
DECL|method|marshal (Exchange exchange, Object graph, OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|graph
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|ResourceConverter
name|converter
init|=
operator|new
name|ResourceConverter
argument_list|(
name|dataFormatTypes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|objectAsBytes
init|=
name|converter
operator|.
name|writeDocument
argument_list|(
operator|new
name|JSONAPIDocument
argument_list|<>
argument_list|(
name|graph
argument_list|)
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|objectAsBytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unmarshal (Exchange exchange, InputStream stream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|ResourceConverter
name|converter
init|=
operator|new
name|ResourceConverter
argument_list|(
name|dataFormatTypes
argument_list|)
decl_stmt|;
name|JSONAPIDocument
argument_list|<
name|?
argument_list|>
name|jsonApiDocument
init|=
name|converter
operator|.
name|readDocument
argument_list|(
name|stream
argument_list|,
name|mainFormatType
argument_list|)
decl_stmt|;
return|return
name|jsonApiDocument
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
comment|/**      * The classes to take into account while marshalling      */
DECL|method|setDataFormatTypes (Class<?>[] dataFormatTypes)
specifier|public
name|void
name|setDataFormatTypes
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|dataFormatTypes
parameter_list|)
block|{
name|this
operator|.
name|dataFormatTypes
operator|=
name|dataFormatTypes
expr_stmt|;
block|}
comment|/**      * The classes to take into account while unmarshalling      */
DECL|method|setMainFormatType (Class<?> mainFormatType)
specifier|public
name|void
name|setMainFormatType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|mainFormatType
parameter_list|)
block|{
name|this
operator|.
name|mainFormatType
operator|=
name|mainFormatType
expr_stmt|;
block|}
block|}
end_class

end_unit

