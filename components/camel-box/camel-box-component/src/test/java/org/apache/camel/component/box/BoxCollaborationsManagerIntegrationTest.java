begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxCollaboration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|CreateUserParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|api
operator|.
name|BoxCollaborationsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for  * {@link BoxCollaborationsManager} APIs.  */
end_comment

begin_class
DECL|class|BoxCollaborationsManagerIntegrationTest
specifier|public
class|class
name|BoxCollaborationsManagerIntegrationTest
extends|extends
name|AbstractBoxTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BoxCollaborationsManagerIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|BoxApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|BoxCollaborationsManagerApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|CAMEL_TEST_FOLDER
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_FOLDER
init|=
literal|"CamelTestFolder"
decl_stmt|;
DECL|field|CAMEL_TEST_COLLABORATOR_EMAIL
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_COLLABORATOR_EMAIL
init|=
literal|"cameltest@example.com"
decl_stmt|;
DECL|field|CAMEL_TEST_COLLABORATOR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_COLLABORATOR_NAME
init|=
literal|"cameltest"
decl_stmt|;
DECL|field|testCollaboration
specifier|private
name|BoxCollaboration
name|testCollaboration
decl_stmt|;
annotation|@
name|Test
DECL|method|testAddFolderCollaborationByEmail ()
specifier|public
name|void
name|testAddFolderCollaborationByEmail
parameter_list|()
throws|throws
name|Exception
block|{
comment|// delete collaborator created by setupTest
name|deleteTestCollaborator
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.folderId"
argument_list|,
name|testFolder
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.email"
argument_list|,
name|CAMEL_TEST_COLLABORATOR_EMAIL
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.BoxCollaboration.Role
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.role"
argument_list|,
name|BoxCollaboration
operator|.
name|Role
operator|.
name|EDITOR
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxCollaboration
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADDFOLDERCOLLABORATIONBYEMAIL"
argument_list|,
name|testFolder
operator|.
name|getID
argument_list|()
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"addFolderCollaboration result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"addFolderCollaboration: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddFolderCollaboration ()
specifier|public
name|void
name|testAddFolderCollaboration
parameter_list|()
throws|throws
name|Exception
block|{
comment|// delete collaborator created by setupTest
name|deleteTestCollaborator
argument_list|()
expr_stmt|;
name|BoxUser
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// create test collaborator
name|CreateUserParams
name|params
init|=
operator|new
name|CreateUserParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|setSpaceAmount
argument_list|(
literal|1073741824
argument_list|)
expr_stmt|;
comment|// 1 GB
name|user
operator|=
name|BoxUser
operator|.
name|createAppUser
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|CAMEL_TEST_COLLABORATOR_NAME
argument_list|,
name|params
argument_list|)
operator|.
name|getResource
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.folderId"
argument_list|,
name|testFolder
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.collaborator"
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.BoxCollaboration.Role
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.role"
argument_list|,
name|BoxCollaboration
operator|.
name|Role
operator|.
name|EDITOR
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxCollaboration
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADDFOLDERCOLLABORATION"
argument_list|,
name|testFolder
operator|.
name|getID
argument_list|()
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"addFolderCollaboration result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"addFolderCollaboration: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|user
operator|.
name|delete
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testGetCollaborationInfo ()
specifier|public
name|void
name|testGetCollaborationInfo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "collaborationId"
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxCollaboration
operator|.
name|Info
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://GETCOLLABORATIONINFO"
argument_list|,
name|testCollaboration
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getCollaborationInfo result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getCollaborationInfo: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFolderCollaborations ()
specifier|public
name|void
name|testGetFolderCollaborations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "folderId"
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|final
name|java
operator|.
name|util
operator|.
name|Collection
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://GETFOLDERCOLLABORATIONS"
argument_list|,
name|testFolder
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFolderCollaborations result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFolderCollaborations: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
DECL|method|testGetPendingCollaborations ()
specifier|public
name|void
name|testGetPendingCollaborations
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|java
operator|.
name|util
operator|.
name|Collection
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://GETPENDINGCOLLABORATIONS"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getPendingCollaborations result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getPendingCollaborations: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateCollaborationInfo ()
specifier|public
name|void
name|testUpdateCollaborationInfo
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.collaborationId"
argument_list|,
name|testCollaboration
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.BoxCollaboration.Info
name|BoxCollaboration
operator|.
name|Info
name|info
init|=
name|testCollaboration
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setRole
argument_list|(
name|BoxCollaboration
operator|.
name|Role
operator|.
name|PREVIEWER
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.info"
argument_list|,
name|info
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxCollaboration
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://UPDATECOLLABORATIONINFO"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"updateCollaborationInfo result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"updateCollaborationInfo info"
argument_list|,
name|result
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"updateCollaborationInfo info"
argument_list|,
name|BoxCollaboration
operator|.
name|Role
operator|.
name|PREVIEWER
argument_list|,
name|result
operator|.
name|getInfo
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"updateCollaborationInfo: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for addFolderCollaboration
name|from
argument_list|(
literal|"direct://ADDFOLDERCOLLABORATIONBYEMAIL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addFolderCollaborationByEmail"
argument_list|)
expr_stmt|;
comment|// test route for addFolderCollaboration
name|from
argument_list|(
literal|"direct://ADDFOLDERCOLLABORATION"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addFolderCollaboration"
argument_list|)
expr_stmt|;
comment|// test route for deleteCollaboration
name|from
argument_list|(
literal|"direct://DELETECOLLABORATION"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/deleteCollaboration?inBody=collaborationId"
argument_list|)
expr_stmt|;
comment|// test route for getCollaborationInfo
name|from
argument_list|(
literal|"direct://GETCOLLABORATIONINFO"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getCollaborationInfo?inBody=collaborationId"
argument_list|)
expr_stmt|;
comment|// test route for getFolderCollaborations
name|from
argument_list|(
literal|"direct://GETFOLDERCOLLABORATIONS"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFolderCollaborations?inBody=folderId"
argument_list|)
expr_stmt|;
comment|// test route for getPendingCollaborations
name|from
argument_list|(
literal|"direct://GETPENDINGCOLLABORATIONS"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getPendingCollaborations"
argument_list|)
expr_stmt|;
comment|// test route for updateCollaborationInfo
name|from
argument_list|(
literal|"direct://UPDATECOLLABORATIONINFO"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/updateCollaborationInfo"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|setupTest ()
specifier|public
name|void
name|setupTest
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestFolder
argument_list|()
expr_stmt|;
name|createTestCollaborator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardownTest ()
specifier|public
name|void
name|teardownTest
parameter_list|()
block|{
name|deleteTestCollaborator
argument_list|()
expr_stmt|;
name|deleteTestFolder
argument_list|()
expr_stmt|;
block|}
DECL|method|getConnection ()
specifier|public
name|BoxAPIConnection
name|getConnection
parameter_list|()
block|{
name|BoxEndpoint
name|endpoint
init|=
operator|(
name|BoxEndpoint
operator|)
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addFolderCollaboration"
argument_list|)
decl_stmt|;
return|return
name|endpoint
operator|.
name|getBoxConnection
argument_list|()
return|;
block|}
DECL|method|createTestFolder ()
specifier|private
name|void
name|createTestFolder
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
name|BoxFolder
name|rootFolder
init|=
name|BoxFolder
operator|.
name|getRootFolder
argument_list|(
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
name|testFolder
operator|=
name|rootFolder
operator|.
name|createFolder
argument_list|(
name|CAMEL_TEST_FOLDER
argument_list|)
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
DECL|method|createTestCollaborator ()
specifier|private
name|void
name|createTestCollaborator
parameter_list|()
block|{
name|testCollaboration
operator|=
name|testFolder
operator|.
name|collaborate
argument_list|(
name|CAMEL_TEST_COLLABORATOR_EMAIL
argument_list|,
name|BoxCollaboration
operator|.
name|Role
operator|.
name|EDITOR
argument_list|)
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
DECL|method|deleteTestCollaborator ()
specifier|private
name|void
name|deleteTestCollaborator
parameter_list|()
block|{
if|if
condition|(
name|testCollaboration
operator|!=
literal|null
condition|)
block|{
name|testCollaboration
operator|.
name|delete
argument_list|()
expr_stmt|;
name|testCollaboration
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

