begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
operator|.
name|ThumbnailFileType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxSharedLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|api
operator|.
name|BoxFilesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxFilesManagerApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link BoxFilesManager}  * APIs.  */
end_comment

begin_class
DECL|class|BoxFilesManagerIntegrationTest
specifier|public
class|class
name|BoxFilesManagerIntegrationTest
extends|extends
name|AbstractBoxTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BoxFilesManagerIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|BoxApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|BoxFilesManagerApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|CAMEL_TEST_FILE
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_FILE
init|=
literal|"/CamelTestFile.txt"
decl_stmt|;
DECL|field|CAMEL_TEST_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_FILE_NAME
init|=
literal|"CamelTestFile.txt"
decl_stmt|;
DECL|field|CAMEL_TEST_FILE_DESCRIPTION
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_FILE_DESCRIPTION
init|=
literal|"CamelTestFile.txt description"
decl_stmt|;
DECL|field|CAMEL_TEST_COPY_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_COPY_FILE_NAME
init|=
literal|"CamelTestFile_Copy.txt"
decl_stmt|;
DECL|field|CAMEL_TEST_MOVE_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_MOVE_FILE_NAME
init|=
literal|"CamelTestFile_Move.txt"
decl_stmt|;
DECL|field|CAMEL_TEST_RENAME_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_RENAME_FILE_NAME
init|=
literal|"CamelTestFile_Rename.txt"
decl_stmt|;
DECL|field|CAMEL_TEST_UPLOAD_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_UPLOAD_FILE_NAME
init|=
literal|"CamelTestFile_Upload.txt"
decl_stmt|;
annotation|@
name|Test
DECL|method|testCopyFile ()
specifier|public
name|void
name|testCopyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.destinationFolderId"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.newName"
argument_list|,
name|CAMEL_TEST_COPY_FILE_NAME
argument_list|)
expr_stmt|;
name|result
operator|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://COPYFILE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"copyFile result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"copyFile name"
argument_list|,
name|CAMEL_TEST_COPY_FILE_NAME
argument_list|,
name|result
operator|.
name|getInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"copyFile: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateFileMetadata ()
specifier|public
name|void
name|testCreateFileMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"/foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.Metadata
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.metadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.typeName"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|Metadata
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://CREATEFILEMETADATA"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"createFileMetadata result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createFileMetadata result"
argument_list|,
literal|"bar"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"createFileMetadata: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateFileSharedLink ()
specifier|public
name|void
name|testCreateFileSharedLink
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.BoxSharedLink.Access
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.access"
argument_list|,
name|BoxSharedLink
operator|.
name|Access
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
comment|// parameter type is java.util.Date
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.unshareDate"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.BoxSharedLink.Permissions
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.permissions"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxSharedLink
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://CREATEFILESHAREDLINK"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"createFileSharedLink result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"createFileSharedLink: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteFile ()
specifier|public
name|void
name|testDeleteFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "fileId"
name|requestBody
argument_list|(
literal|"direct://DELETEFILE"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|BoxFolder
name|rootFolder
init|=
name|BoxFolder
operator|.
name|getRootFolder
argument_list|(
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|BoxItem
operator|.
name|Info
argument_list|>
name|it
init|=
name|rootFolder
operator|.
name|search
argument_list|(
literal|"^"
operator|+
name|CAMEL_TEST_FILE
operator|+
literal|"$"
argument_list|)
decl_stmt|;
name|int
name|searchResults
init|=
name|sizeOfIterable
argument_list|(
name|it
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|searchResults
operator|>
literal|0
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|assertEquals
argument_list|(
literal|"deleteFile exists"
argument_list|,
literal|false
argument_list|,
name|exists
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteFile: exists? "
operator|+
name|exists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteFileMetadata ()
specifier|public
name|void
name|testDeleteFileMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|testFile
operator|.
name|createMetadata
argument_list|(
operator|new
name|Metadata
argument_list|()
argument_list|)
expr_stmt|;
comment|// using String message body for single parameter "fileId"
name|requestBody
argument_list|(
literal|"direct://DELETEFILEMETADATA"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|testFile
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|404
condition|)
block|{
comment|// Box API should return a
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"deleteFileMetadata metadata"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
comment|// Requires premium user account to test.
annotation|@
name|Test
DECL|method|testDeleteFileVersion ()
specifier|public
name|void
name|testDeleteFileVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|testFile
operator|.
name|uploadVersion
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|CAMEL_TEST_FILE
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is Integer
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.version"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DELETEFILEVERSION"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|boolean
name|onlyOneVersion
init|=
name|testFile
operator|.
name|getVersions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
literal|"deleteFileVersion version deleted"
argument_list|,
name|onlyOneVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDownloadFile ()
specifier|public
name|void
name|testDownloadFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is java.io.OutputStream
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.output"
argument_list|,
name|output
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.rangeStart"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.rangeEnd"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.ProgressListener
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.listener"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|java
operator|.
name|io
operator|.
name|OutputStream
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DOWNLOADFILE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"downloadFile result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"downloadFile: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
comment|// Requires premium user account to test
annotation|@
name|Test
DECL|method|testDownloadPreviousFileVersion ()
specifier|public
name|void
name|testDownloadPreviousFileVersion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is Integer
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.version"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// parameter type is java.io.OutputStream
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.output"
argument_list|,
name|output
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.ProgressListener
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.listener"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|java
operator|.
name|io
operator|.
name|OutputStream
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DOWNLOADPREVIOUSFILEVERSION"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"downloadPreviousFileVersion result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"downloadPreviousFileVersion: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDownloadURL ()
specifier|public
name|void
name|testGetDownloadURL
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "fileId"
specifier|final
name|java
operator|.
name|net
operator|.
name|URL
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://GETDOWNLOADURL"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getDownloadURL result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getDownloadURL: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileInfo ()
specifier|public
name|void
name|testGetFileInfo
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String[]
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fields"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
operator|.
name|Info
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETFILEINFO"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFileInfo result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFileInfo: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileMetadata ()
specifier|public
name|void
name|testGetFileMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|testFile
operator|.
name|createMetadata
argument_list|(
operator|new
name|Metadata
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.typeName"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|Metadata
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETFILEMETADATA"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFileMetadata result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFileMetadata: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFilePreviewLink ()
specifier|public
name|void
name|testGetFilePreviewLink
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "fileId"
specifier|final
name|java
operator|.
name|net
operator|.
name|URL
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://GETFILEPREVIEWLINK"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFilePreviewLink result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFilePreviewLink: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileThumbnail ()
specifier|public
name|void
name|testGetFileThumbnail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.BoxFile.ThumbnailFileType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileType"
argument_list|,
name|ThumbnailFileType
operator|.
name|JPG
argument_list|)
expr_stmt|;
comment|// parameter type is Integer
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.minWidth"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
comment|// parameter type is Integer
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.minHeight"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
comment|// parameter type is Integer
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.maxWidth"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
comment|// parameter type is Integer
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.maxHeight"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETFILETHUMBNAIL"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFileThumbnail result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFileThumbnail: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileVersions ()
specifier|public
name|void
name|testGetFileVersions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "fileId"
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|final
name|java
operator|.
name|util
operator|.
name|Collection
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://GETFILEVERSIONS"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFileVersions result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFileVersions: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveFile ()
specifier|public
name|void
name|testMoveFile
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.destinationFolderId"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.newName"
argument_list|,
name|CAMEL_TEST_MOVE_FILE_NAME
argument_list|)
expr_stmt|;
name|result
operator|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://MOVEFILE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"moveFile result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"moveFile name"
argument_list|,
name|CAMEL_TEST_MOVE_FILE_NAME
argument_list|,
name|result
operator|.
name|getInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"moveFile: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Ignore
comment|// Requires premium user account to test
annotation|@
name|Test
DECL|method|testPromoteFileVersion ()
specifier|public
name|void
name|testPromoteFileVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|testFile
operator|.
name|uploadVersion
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|CAMEL_TEST_FILE
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is Integer
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.version"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFileVersion
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://PROMOTEFILEVERSION"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"promoteFileVersion result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"promoteFileVersion: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFile ()
specifier|public
name|void
name|testRenameFile
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.newFileName"
argument_list|,
name|CAMEL_TEST_RENAME_FILE_NAME
argument_list|)
expr_stmt|;
name|result
operator|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RENAMEFILE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"renameFile result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renameFile name"
argument_list|,
name|CAMEL_TEST_RENAME_FILE_NAME
argument_list|,
name|result
operator|.
name|getInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"renameFile: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateFileInfo ()
specifier|public
name|void
name|testUpdateFileInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|BoxFile
operator|.
name|Info
name|info
init|=
name|testFile
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setDescription
argument_list|(
name|CAMEL_TEST_FILE_DESCRIPTION
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.BoxFile.Info
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.info"
argument_list|,
name|info
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://UPDATEFILEINFO"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"updateFileInfo result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"updateFileInfo info"
argument_list|,
name|CAMEL_TEST_FILE_DESCRIPTION
argument_list|,
name|result
operator|.
name|getInfo
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"updateFileInfo: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFileMetadata ()
specifier|public
name|void
name|testUpdateFileMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|=
name|testFile
operator|.
name|createMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.Metadata
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.metadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
comment|//metada has to contain some value, otherwise response result will be error code 400
name|metadata
operator|.
name|add
argument_list|(
literal|"/foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|Metadata
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://UPDATEFILEMETADATA"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"updateFileMetadata result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"updateFileMetadata property foo"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"updateFileMetadata: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testUploadFile ()
specifier|public
name|void
name|testUploadFile
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.parentFolderId"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.content"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|CAMEL_TEST_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileName"
argument_list|,
name|CAMEL_TEST_UPLOAD_FILE_NAME
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.created"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.modified"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.size"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.listener"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://UPLOADFILE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"uploadFile result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"uploadFile: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{                 }
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testUploadNewFileVersion ()
specifier|public
name|void
name|testUploadNewFileVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is java.io.InputStream
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileContent"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|CAMEL_TEST_FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|// parameter type is java.util.Date
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.modified"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is Long
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileSize"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.sdk.ProgressListener
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.listener"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://UPLOADNEWFILEVERSION"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"uploadNewFileVersion result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"uploadNewFileVersion: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{                 }
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for copyFile
name|from
argument_list|(
literal|"direct://COPYFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/copyFile"
argument_list|)
expr_stmt|;
comment|// test route for createFileMetadata
name|from
argument_list|(
literal|"direct://CREATEFILEMETADATA"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/createFileMetadata"
argument_list|)
expr_stmt|;
comment|// test route for createFileSharedLink
name|from
argument_list|(
literal|"direct://CREATEFILESHAREDLINK"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/createFileSharedLink"
argument_list|)
expr_stmt|;
comment|// test route for deleteFile
name|from
argument_list|(
literal|"direct://DELETEFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/deleteFile?inBody=fileId"
argument_list|)
expr_stmt|;
comment|// test route for deleteFileMetadata
name|from
argument_list|(
literal|"direct://DELETEFILEMETADATA"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/deleteFileMetadata?inBody=fileId"
argument_list|)
expr_stmt|;
comment|// test route for deleteFileVersion
name|from
argument_list|(
literal|"direct://DELETEFILEVERSION"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/deleteFileVersion"
argument_list|)
expr_stmt|;
comment|// test route for downloadFile
name|from
argument_list|(
literal|"direct://DOWNLOADFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/downloadFile"
argument_list|)
expr_stmt|;
comment|// test route for downloadPreviousFileVersion
name|from
argument_list|(
literal|"direct://DOWNLOADPREVIOUSFILEVERSION"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/downloadPreviousFileVersion"
argument_list|)
expr_stmt|;
comment|// test route for getDownloadURL
name|from
argument_list|(
literal|"direct://GETDOWNLOADURL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getDownloadURL?inBody=fileId"
argument_list|)
expr_stmt|;
comment|// test route for getFileInfo
name|from
argument_list|(
literal|"direct://GETFILEINFO"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFileInfo"
argument_list|)
expr_stmt|;
comment|// test route for getFileMetadata
name|from
argument_list|(
literal|"direct://GETFILEMETADATA"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFileMetadata"
argument_list|)
expr_stmt|;
comment|// test route for getFilePreviewLink
name|from
argument_list|(
literal|"direct://GETFILEPREVIEWLINK"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFilePreviewLink?inBody=fileId"
argument_list|)
expr_stmt|;
comment|// test route for getFileThumbnail
name|from
argument_list|(
literal|"direct://GETFILETHUMBNAIL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFileThumbnail"
argument_list|)
expr_stmt|;
comment|// test route for getFileVersions
name|from
argument_list|(
literal|"direct://GETFILEVERSIONS"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFileVersions?inBody=fileId"
argument_list|)
expr_stmt|;
comment|// test route for moveFile
name|from
argument_list|(
literal|"direct://MOVEFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/moveFile"
argument_list|)
expr_stmt|;
comment|// test route for promoteFileVersion
name|from
argument_list|(
literal|"direct://PROMOTEFILEVERSION"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/promoteFileVersion"
argument_list|)
expr_stmt|;
comment|// test route for renameFile
name|from
argument_list|(
literal|"direct://RENAMEFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/renameFile"
argument_list|)
expr_stmt|;
comment|// test route for updateFileInfo
name|from
argument_list|(
literal|"direct://UPDATEFILEINFO"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/updateFileInfo"
argument_list|)
expr_stmt|;
comment|// test route for updateFileMetadata
name|from
argument_list|(
literal|"direct://UPDATEFILEMETADATA"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/updateFileMetadata"
argument_list|)
expr_stmt|;
comment|// test route for uploadFile
name|from
argument_list|(
literal|"direct://UPLOADFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/uploadFile"
argument_list|)
expr_stmt|;
comment|// test route for uploadNewFileVersion
name|from
argument_list|(
literal|"direct://UPLOADNEWFILEVERSION"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/uploadNewFileVersion"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|setupTest ()
specifier|public
name|void
name|setupTest
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardownTest ()
specifier|public
name|void
name|teardownTest
parameter_list|()
block|{
name|deleteTestFile
argument_list|()
expr_stmt|;
block|}
DECL|method|getConnection ()
specifier|public
name|BoxAPIConnection
name|getConnection
parameter_list|()
block|{
name|BoxEndpoint
name|endpoint
init|=
operator|(
name|BoxEndpoint
operator|)
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/copyFile"
argument_list|)
decl_stmt|;
return|return
name|endpoint
operator|.
name|getBoxConnection
argument_list|()
return|;
block|}
DECL|method|createTestFile ()
specifier|private
name|void
name|createTestFile
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
name|BoxFolder
name|rootFolder
init|=
name|BoxFolder
operator|.
name|getRootFolder
argument_list|(
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|CAMEL_TEST_FILE
argument_list|)
decl_stmt|;
name|testFile
operator|=
name|rootFolder
operator|.
name|uploadFile
argument_list|(
name|stream
argument_list|,
name|CAMEL_TEST_FILE_NAME
argument_list|)
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
DECL|method|sizeOfIterable (Iterable<?> it)
specifier|private
name|int
name|sizeOfIterable
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
name|it
operator|instanceof
name|Collection
condition|)
block|{
return|return
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|it
operator|)
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Object
name|obj
range|:
name|it
control|)
block|{
name|i
operator|++
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
block|}
block|}
end_class

end_unit

