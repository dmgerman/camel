begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|api
operator|.
name|BoxCommentsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxCommentsManagerApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for  * {@link BoxCommentsManager} APIs.  */
end_comment

begin_class
DECL|class|BoxCommentsManagerIntegrationTest
specifier|public
class|class
name|BoxCommentsManagerIntegrationTest
extends|extends
name|AbstractBoxTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BoxCommentsManagerIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|BoxApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|BoxCommentsManagerApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|CAMEL_TEST_FILE
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_FILE
init|=
literal|"/CamelTestFile.txt"
decl_stmt|;
DECL|field|CAMEL_TEST_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_FILE_NAME
init|=
literal|"CamelTestFile.txt"
decl_stmt|;
DECL|field|CAMEL_TEST_FILE_COMMENT
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_FILE_COMMENT
init|=
literal|"CamelTestFile comment."
decl_stmt|;
DECL|field|CAMEL_TEST_FILE_CHANGED_COMMENT
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_FILE_CHANGED_COMMENT
init|=
literal|"CamelTestFile changed comment."
decl_stmt|;
DECL|field|CAMEL_TEST_FILE_REPLY_COMMENT
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_FILE_REPLY_COMMENT
init|=
literal|"CamelTestFile changed comment."
decl_stmt|;
annotation|@
name|Test
DECL|method|testAddFileComment ()
specifier|public
name|void
name|testAddFileComment
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.message"
argument_list|,
name|CAMEL_TEST_FILE_COMMENT
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADDFILECOMMENT"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"addFileComment result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"addFileComment comments"
argument_list|,
name|result
operator|.
name|getComments
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"changeCommentMessage comments size"
argument_list|,
name|result
operator|.
name|getComments
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"changeCommentMessage comment message"
argument_list|,
name|CAMEL_TEST_FILE_COMMENT
argument_list|,
name|result
operator|.
name|getComments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"addFileComment: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeCommentMessage ()
specifier|public
name|void
name|testChangeCommentMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|BoxComment
operator|.
name|Info
name|commentInfo
init|=
name|testFile
operator|.
name|addComment
argument_list|(
name|CAMEL_TEST_FILE_COMMENT
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.commentId"
argument_list|,
name|commentInfo
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.message"
argument_list|,
name|CAMEL_TEST_FILE_CHANGED_COMMENT
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxComment
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://CHANGECOMMENTMESSAGE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"changeCommentMessage result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"changeCommentMessage message"
argument_list|,
name|result
operator|.
name|getInfo
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"changeCommentMessage message"
argument_list|,
name|CAMEL_TEST_FILE_CHANGED_COMMENT
argument_list|,
name|result
operator|.
name|getInfo
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"changeCommentMessage: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteComment ()
specifier|public
name|void
name|testDeleteComment
parameter_list|()
throws|throws
name|Exception
block|{
name|BoxComment
operator|.
name|Info
name|commentInfo
init|=
name|testFile
operator|.
name|addComment
argument_list|(
name|CAMEL_TEST_FILE_COMMENT
argument_list|)
decl_stmt|;
comment|// using String message body for single parameter "commentId"
name|requestBody
argument_list|(
literal|"direct://DELETECOMMENT"
argument_list|,
name|commentInfo
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BoxComment
operator|.
name|Info
argument_list|>
name|comments
init|=
name|testFile
operator|.
name|getComments
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"deleteComment comments"
argument_list|,
name|comments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleteComment comments empty"
argument_list|,
literal|0
argument_list|,
name|comments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetCommentInfo ()
specifier|public
name|void
name|testGetCommentInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|BoxComment
operator|.
name|Info
name|commentInfo
init|=
name|testFile
operator|.
name|addComment
argument_list|(
name|CAMEL_TEST_FILE_COMMENT
argument_list|)
decl_stmt|;
comment|// using String message body for single parameter "commentId"
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxComment
operator|.
name|Info
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://GETCOMMENTINFO"
argument_list|,
name|commentInfo
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getCommentInfo result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getCommentInfo message"
argument_list|,
name|CAMEL_TEST_FILE_COMMENT
argument_list|,
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getCommentInfo: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileComments ()
specifier|public
name|void
name|testGetFileComments
parameter_list|()
throws|throws
name|Exception
block|{
name|testFile
operator|.
name|addComment
argument_list|(
name|CAMEL_TEST_FILE_COMMENT
argument_list|)
expr_stmt|;
comment|// using String message body for single parameter "fileId"
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|final
name|java
operator|.
name|util
operator|.
name|List
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://GETFILECOMMENTS"
argument_list|,
name|testFile
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFileComments result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getFileComments size"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFileComments: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplyToComment ()
specifier|public
name|void
name|testReplyToComment
parameter_list|()
throws|throws
name|Exception
block|{
name|BoxComment
operator|.
name|Info
name|commentInfo
init|=
name|testFile
operator|.
name|addComment
argument_list|(
name|CAMEL_TEST_FILE_COMMENT
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.commentId"
argument_list|,
name|commentInfo
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.message"
argument_list|,
name|CAMEL_TEST_FILE_REPLY_COMMENT
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxComment
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://REPLYTOCOMMENT"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"replyToComment result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"replyToComment result"
argument_list|,
name|CAMEL_TEST_FILE_REPLY_COMMENT
argument_list|,
name|result
operator|.
name|getInfo
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"replyToComment: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for addFileComment
name|from
argument_list|(
literal|"direct://ADDFILECOMMENT"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addFileComment"
argument_list|)
expr_stmt|;
comment|// test route for changeCommentMessage
name|from
argument_list|(
literal|"direct://CHANGECOMMENTMESSAGE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/changeCommentMessage"
argument_list|)
expr_stmt|;
comment|// test route for deleteComment
name|from
argument_list|(
literal|"direct://DELETECOMMENT"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/deleteComment?inBody=commentId"
argument_list|)
expr_stmt|;
comment|// test route for getCommentInfo
name|from
argument_list|(
literal|"direct://GETCOMMENTINFO"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getCommentInfo?inBody=commentId"
argument_list|)
expr_stmt|;
comment|// test route for getFileComments
name|from
argument_list|(
literal|"direct://GETFILECOMMENTS"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFileComments?inBody=fileId"
argument_list|)
expr_stmt|;
comment|// test route for replyToComment
name|from
argument_list|(
literal|"direct://REPLYTOCOMMENT"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/replyToComment"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|setupTest ()
specifier|public
name|void
name|setupTest
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardownTest ()
specifier|public
name|void
name|teardownTest
parameter_list|()
block|{
name|deleteTestFile
argument_list|()
expr_stmt|;
block|}
DECL|method|getConnection ()
specifier|public
name|BoxAPIConnection
name|getConnection
parameter_list|()
block|{
name|BoxEndpoint
name|endpoint
init|=
operator|(
name|BoxEndpoint
operator|)
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addFileComment"
argument_list|)
decl_stmt|;
return|return
name|endpoint
operator|.
name|getBoxConnection
argument_list|()
return|;
block|}
DECL|method|createTestFile ()
specifier|private
name|void
name|createTestFile
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
name|BoxFolder
name|rootFolder
init|=
name|BoxFolder
operator|.
name|getRootFolder
argument_list|(
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|CAMEL_TEST_FILE
argument_list|)
decl_stmt|;
name|testFile
operator|=
name|rootFolder
operator|.
name|uploadFile
argument_list|(
name|stream
argument_list|,
name|CAMEL_TEST_FILE_NAME
argument_list|)
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

