begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * Camel Api Route test generated by camel-component-util-maven-plugin  * Generated on: Tue Jun 24 22:42:08 PDT 2014  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxPreview
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxSharedLinkAccess
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|exceptions
operator|.
name|BoxServerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|filetransfer
operator|.
name|IFileTransferListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|jsonentities
operator|.
name|BoxSharedLinkRequestEntity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|requests
operator|.
name|requestobjects
operator|.
name|BoxFileRequestObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|requests
operator|.
name|requestobjects
operator|.
name|BoxImageRequestObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|requests
operator|.
name|requestobjects
operator|.
name|BoxItemCopyRequestObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|requests
operator|.
name|requestobjects
operator|.
name|BoxSharedLinkRequestObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|restclientv2
operator|.
name|requestsbase
operator|.
name|BoxFileUploadRequestObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for com.box.boxjavalibv2.resourcemanagers.IBoxFilesManager APIs.  */
end_comment

begin_class
DECL|class|IBoxFilesManagerIntegrationTest
specifier|public
class|class
name|IBoxFilesManagerIntegrationTest
extends|extends
name|AbstractBoxTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IBoxFilesManagerIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|BoxApiName
operator|.
name|FILES
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|BOX_IMAGE_REQUEST_OBJECT
specifier|private
specifier|static
specifier|final
name|BoxImageRequestObject
name|BOX_IMAGE_REQUEST_OBJECT
init|=
name|BoxImageRequestObject
operator|.
name|previewRequestObject
argument_list|()
decl_stmt|;
DECL|field|PNG_EXTENSION
specifier|private
specifier|static
specifier|final
name|String
name|PNG_EXTENSION
init|=
literal|"png"
decl_stmt|;
DECL|field|TEST_UPLOAD_FILE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_UPLOAD_FILE
init|=
literal|"/log4j.properties"
decl_stmt|;
DECL|field|PREVIEW_UNAVAILABLE
specifier|private
specifier|static
specifier|final
name|String
name|PREVIEW_UNAVAILABLE
init|=
literal|"Requested preview unavailable"
decl_stmt|;
DECL|method|copyFile ()
specifier|public
name|BoxFile
name|copyFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.boxjavalibv2.requests.requestobjects.BoxItemCopyRequestObject
specifier|final
name|BoxItemCopyRequestObject
name|requestObject
init|=
name|BoxItemCopyRequestObject
operator|.
name|copyItemRequestObject
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
name|requestObject
operator|.
name|setName
argument_list|(
name|CAMEL_TEST_FILE
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.itemCopyRequest"
argument_list|,
name|requestObject
argument_list|)
expr_stmt|;
name|BoxFile
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://COPYFILE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"copyFile result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"copyFile: "
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateSharedLink ()
specifier|public
name|void
name|testCreateSharedLink
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BoxFile
name|boxFile
init|=
name|copyFile
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|boxFile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.boxjavalibv2.requests.requestobjects.BoxSharedLinkRequestObject
specifier|final
name|BoxSharedLinkRequestEntity
name|sharedLink
init|=
operator|new
name|BoxSharedLinkRequestEntity
argument_list|(
name|BoxSharedLinkAccess
operator|.
name|OPEN
argument_list|)
decl_stmt|;
specifier|final
name|BoxSharedLinkRequestObject
name|requestObject
init|=
name|BoxSharedLinkRequestObject
operator|.
name|createSharedLinkRequestObject
argument_list|(
name|sharedLink
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.sharedLinkRequest"
argument_list|,
name|requestObject
argument_list|)
expr_stmt|;
name|BoxFile
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://CREATESHAREDLINK"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"createSharedLink result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"createSharedLink: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteFile
argument_list|(
name|boxFile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteFile (String fileId)
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|fileId
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.restclientv2.requestsbase.BoxDefaultRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.defaultRequest"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DELETEFILE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDownloadFile ()
specifier|public
name|void
name|testDownloadFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.restclientv2.requestsbase.BoxDefaultRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.defaultRequest"
argument_list|,
name|BOX_DEFAULT_REQUEST_OBJECT
argument_list|)
expr_stmt|;
name|InputStream
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DOWNLOADFILE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"downloadFile result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"downloadFile: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDownloadFile_1 ()
specifier|public
name|void
name|testDownloadFile_1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is java.io.File
specifier|final
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"CamelTest"
argument_list|,
literal|"download"
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.destination"
argument_list|,
name|tempFile
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.boxjavalibv2.filetransfer.IFileTransferListener
specifier|final
name|FileTransferListener
name|fileTransferListener
init|=
operator|new
name|FileTransferListener
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.listener"
argument_list|,
name|fileTransferListener
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.restclientv2.requestsbase.BoxDefaultRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.defaultRequest"
argument_list|,
name|BOX_DEFAULT_REQUEST_OBJECT
argument_list|)
expr_stmt|;
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DOWNLOADFILE_1"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertTransferSuccess
argument_list|(
name|fileTransferListener
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"downloadFile file"
argument_list|,
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTransferSuccess (FileTransferListener fileTransferListener)
specifier|private
name|void
name|assertTransferSuccess
parameter_list|(
name|FileTransferListener
name|fileTransferListener
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|bytesTransferred
decl_stmt|;
do|do
block|{
name|bytesTransferred
operator|=
name|fileTransferListener
operator|.
name|getBytesTransferred
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|fileTransferListener
operator|.
name|getBytesTransferred
argument_list|()
operator|!=
name|bytesTransferred
condition|)
do|;
comment|//        assertEquals("downloadFile status", "success", fileTransferListener.getStatus());
name|assertNull
argument_list|(
literal|"downloadFile exception"
argument_list|,
name|fileTransferListener
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDownloadFile_2 ()
specifier|public
name|void
name|testDownloadFile_2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is java.io.OutputStream[]
specifier|final
name|OutputStream
index|[]
name|outputStreams
init|=
operator|new
name|OutputStream
index|[]
block|{
operator|new
name|ByteArrayOutputStream
argument_list|()
block|}
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.outputStreams"
argument_list|,
name|outputStreams
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.boxjavalibv2.filetransfer.IFileTransferListener
specifier|final
name|FileTransferListener
name|fileTransferListener
init|=
operator|new
name|FileTransferListener
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.listener"
argument_list|,
name|fileTransferListener
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.restclientv2.requestsbase.BoxDefaultRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.defaultRequest"
argument_list|,
name|BOX_DEFAULT_REQUEST_OBJECT
argument_list|)
expr_stmt|;
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DOWNLOADFILE_2"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertTransferSuccess
argument_list|(
name|fileTransferListener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"downloadFile OutputStream"
argument_list|,
name|outputStreams
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDownloadThumbnail ()
specifier|public
name|void
name|testDownloadThumbnail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.extension"
argument_list|,
name|PNG_EXTENSION
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.boxjavalibv2.requests.requestobjects.BoxImageRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.imageRequest"
argument_list|,
name|BOX_IMAGE_REQUEST_OBJECT
argument_list|)
expr_stmt|;
name|InputStream
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DOWNLOADTHUMBNAIL"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"downloadThumbnail result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"downloadThumbnail: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFile ()
specifier|public
name|void
name|testGetFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.restclientv2.requestsbase.BoxDefaultRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.defaultRequest"
argument_list|,
name|BOX_DEFAULT_REQUEST_OBJECT
argument_list|)
expr_stmt|;
comment|//        BoxFile result = requestBodyAndHeaders("direct://GETFILE", null, headers);
name|BoxFile
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETFILE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFile result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFile: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileComments ()
specifier|public
name|void
name|testGetFileComments
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.restclientv2.requestsbase.BoxDefaultRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.defaultRequest"
argument_list|,
name|BOX_DEFAULT_REQUEST_OBJECT
argument_list|)
expr_stmt|;
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxCollection
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETFILECOMMENTS"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFileComments result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFileComments: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileVersions ()
specifier|public
name|void
name|testGetFileVersions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.restclientv2.requestsbase.BoxDefaultRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.defaultRequest"
argument_list|,
name|BOX_DEFAULT_REQUEST_OBJECT
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|List
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETFILEVERSIONS"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getFileVersions result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFileVersions: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPreview ()
specifier|public
name|void
name|testGetPreview
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.extension"
argument_list|,
name|PNG_EXTENSION
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.boxjavalibv2.requests.requestobjects.BoxImageRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.imageRequest"
argument_list|,
name|BOX_IMAGE_REQUEST_OBJECT
argument_list|)
expr_stmt|;
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxPreview
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETPREVIEW"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|boolean
name|ignore
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|BoxServerException
condition|)
block|{
name|BoxServerException
name|exception
init|=
operator|(
name|BoxServerException
operator|)
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|PREVIEW_UNAVAILABLE
operator|.
name|equals
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
comment|// ignore unavailable preview errors
name|result
operator|=
operator|new
name|BoxPreview
argument_list|()
expr_stmt|;
name|ignore
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ignore
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"getPreview result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getPreview: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetThumbnail ()
specifier|public
name|void
name|testGetThumbnail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.extension"
argument_list|,
name|PNG_EXTENSION
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.boxjavalibv2.requests.requestobjects.BoxImageRequestObject
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.imageRequest"
argument_list|,
name|BOX_IMAGE_REQUEST_OBJECT
argument_list|)
expr_stmt|;
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxThumbnail
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://GETTHUMBNAIL"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getThumbnail: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFileInfo ()
specifier|public
name|void
name|testUpdateFileInfo
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|testFileId
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.boxjavalibv2.requests.requestobjects.BoxFileRequestObject
specifier|final
name|BoxFileRequestObject
name|requestObject
init|=
name|BoxFileRequestObject
operator|.
name|getRequestObject
argument_list|()
decl_stmt|;
name|requestObject
operator|.
name|setTags
argument_list|(
operator|new
name|String
index|[]
block|{
name|CAMEL_TEST_TAG
block|}
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileRequest"
argument_list|,
name|requestObject
argument_list|)
expr_stmt|;
name|BoxFile
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://UPDATEFILEINFO"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"updateFileInfo result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"updateFileInfo: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadFile ()
specifier|public
name|BoxFile
name|uploadFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using com.box.restclientv2.requestsbase.BoxFileUploadRequestObject message body for single parameter "fileUploadRequest"
specifier|final
name|BoxFileUploadRequestObject
name|requestObject
init|=
name|BoxFileUploadRequestObject
operator|.
name|uploadFileRequestObject
argument_list|(
literal|"0"
argument_list|,
name|CAMEL_TEST_FILE
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|TEST_UPLOAD_FILE
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FileTransferListener
name|fileTransferListener
init|=
operator|new
name|FileTransferListener
argument_list|()
decl_stmt|;
name|requestObject
operator|.
name|setListener
argument_list|(
name|fileTransferListener
argument_list|)
expr_stmt|;
name|BoxFile
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://UPLOADFILE"
argument_list|,
name|requestObject
argument_list|)
decl_stmt|;
name|assertTransferSuccess
argument_list|(
name|fileTransferListener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"uploadFile result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"uploadFile: "
operator|+
name|result
argument_list|)
expr_stmt|;
comment|// wait a moment for the file to show up in subsequent calls
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Test
DECL|method|testUploadNewVersion ()
specifier|public
name|void
name|testUploadNewVersion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BoxFile
name|boxFile
init|=
name|uploadFile
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileId"
argument_list|,
name|boxFile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is com.box.restclientv2.requestsbase.BoxFileUploadRequestObject
specifier|final
name|BoxFileUploadRequestObject
name|requestObject
init|=
name|BoxFileUploadRequestObject
operator|.
name|uploadNewVersionRequestObject
argument_list|(
name|CAMEL_TEST_FILE
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|TEST_UPLOAD_FILE
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FileTransferListener
name|fileTransferListener
init|=
operator|new
name|FileTransferListener
argument_list|()
decl_stmt|;
name|requestObject
operator|.
name|setListener
argument_list|(
name|fileTransferListener
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBox.fileUploadRequest"
argument_list|,
name|requestObject
argument_list|)
expr_stmt|;
name|BoxFile
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://UPLOADNEWVERSION"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertTransferSuccess
argument_list|(
name|fileTransferListener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"uploadNewVersion result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"uploadNewVersion: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteFile
argument_list|(
name|boxFile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for copyFile
name|from
argument_list|(
literal|"direct://COPYFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/copyFile"
argument_list|)
expr_stmt|;
comment|// test route for createSharedLink
name|from
argument_list|(
literal|"direct://CREATESHAREDLINK"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/createSharedLink"
argument_list|)
expr_stmt|;
comment|// test route for deleteFile
name|from
argument_list|(
literal|"direct://DELETEFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/deleteFile"
argument_list|)
expr_stmt|;
comment|// test route for downloadFile
name|from
argument_list|(
literal|"direct://DOWNLOADFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/downloadFile"
argument_list|)
expr_stmt|;
comment|// test route for downloadFile
name|from
argument_list|(
literal|"direct://DOWNLOADFILE_1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/downloadFile"
argument_list|)
expr_stmt|;
comment|// test route for downloadFile
name|from
argument_list|(
literal|"direct://DOWNLOADFILE_2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/downloadFile"
argument_list|)
expr_stmt|;
comment|// test route for downloadThumbnail
name|from
argument_list|(
literal|"direct://DOWNLOADTHUMBNAIL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/downloadThumbnail"
argument_list|)
expr_stmt|;
comment|// test route for getFile
name|from
argument_list|(
literal|"direct://GETFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFile"
argument_list|)
expr_stmt|;
comment|// test route for getFileComments
name|from
argument_list|(
literal|"direct://GETFILECOMMENTS"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFileComments"
argument_list|)
expr_stmt|;
comment|// test route for getFileVersions
name|from
argument_list|(
literal|"direct://GETFILEVERSIONS"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getFileVersions"
argument_list|)
expr_stmt|;
comment|// test route for getPreview
name|from
argument_list|(
literal|"direct://GETPREVIEW"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getPreview"
argument_list|)
expr_stmt|;
comment|// test route for getThumbnail
name|from
argument_list|(
literal|"direct://GETTHUMBNAIL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/getThumbnail"
argument_list|)
expr_stmt|;
comment|// test route for updateFileInfo
name|from
argument_list|(
literal|"direct://UPDATEFILEINFO"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/updateFileInfo"
argument_list|)
expr_stmt|;
comment|// test route for uploadFile
name|from
argument_list|(
literal|"direct://UPLOADFILE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/uploadFile?inBody=fileUploadRequest"
argument_list|)
expr_stmt|;
comment|// test route for uploadNewVersion
name|from
argument_list|(
literal|"direct://UPLOADNEWVERSION"
argument_list|)
operator|.
name|to
argument_list|(
literal|"box://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/uploadNewVersion"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|FileTransferListener
specifier|private
specifier|static
class|class
name|FileTransferListener
implements|implements
name|IFileTransferListener
block|{
DECL|field|status
specifier|private
name|String
name|status
decl_stmt|;
DECL|field|bytesTransferred
specifier|private
name|long
name|bytesTransferred
decl_stmt|;
DECL|field|exception
specifier|private
name|IOException
name|exception
decl_stmt|;
DECL|method|getStatus ()
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|getBytesTransferred ()
specifier|public
name|long
name|getBytesTransferred
parameter_list|()
block|{
return|return
name|bytesTransferred
return|;
block|}
DECL|method|getException ()
specifier|private
name|IOException
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
annotation|@
name|Override
DECL|method|onComplete (String status)
specifier|public
name|void
name|onComplete
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Download completed with status "
operator|+
name|status
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCanceled ()
specifier|public
name|void
name|onCanceled
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Download canceled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onProgress (long bytesTransferred)
specifier|public
name|void
name|onProgress
parameter_list|(
name|long
name|bytesTransferred
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Downloaded bytes "
operator|+
name|bytesTransferred
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytesTransferred
operator|=
name|bytesTransferred
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onIOException (IOException e)
specifier|public
name|void
name|onIOException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Download exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

