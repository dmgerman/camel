begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|BoxConnectionManagerBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|IBoxConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|authorization
operator|.
name|IAuthSecureStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|authorization
operator|.
name|OAuthRefreshListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxClientHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|CachedBoxClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|AbstractApiComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link BoxEndpoint}.  */
end_comment

begin_class
DECL|class|BoxComponent
specifier|public
class|class
name|BoxComponent
extends|extends
name|AbstractApiComponent
argument_list|<
name|BoxApiName
argument_list|,
name|BoxConfiguration
argument_list|,
name|BoxApiCollection
argument_list|>
block|{
DECL|field|cachedBoxClient
specifier|private
name|CachedBoxClient
name|cachedBoxClient
decl_stmt|;
DECL|method|BoxComponent ()
specifier|public
name|BoxComponent
parameter_list|()
block|{
name|super
argument_list|(
name|BoxEndpoint
operator|.
name|class
argument_list|,
name|BoxApiName
operator|.
name|class
argument_list|,
name|BoxApiCollection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|BoxComponent (CamelContext context)
specifier|public
name|BoxComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|BoxEndpoint
operator|.
name|class
argument_list|,
name|BoxApiName
operator|.
name|class
argument_list|,
name|BoxApiCollection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApiName (String apiNameStr)
specifier|protected
name|BoxApiName
name|getApiName
parameter_list|(
name|String
name|apiNameStr
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|BoxApiName
operator|.
name|fromValue
argument_list|(
name|apiNameStr
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String methodName, BoxApiName apiName, BoxConfiguration endpointConfiguration)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|methodName
parameter_list|,
name|BoxApiName
name|apiName
parameter_list|,
name|BoxConfiguration
name|endpointConfiguration
parameter_list|)
block|{
name|endpointConfiguration
operator|.
name|setApiName
argument_list|(
name|apiName
argument_list|)
expr_stmt|;
name|endpointConfiguration
operator|.
name|setMethodName
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
return|return
operator|new
name|BoxEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|apiName
argument_list|,
name|methodName
argument_list|,
name|endpointConfiguration
argument_list|)
return|;
block|}
DECL|method|getBoxClient ()
specifier|public
name|CachedBoxClient
name|getBoxClient
parameter_list|()
block|{
return|return
name|cachedBoxClient
return|;
block|}
comment|/**      * To use the shared configuration. Properties of the shared configuration can also be set individually.      */
annotation|@
name|Override
DECL|method|setConfiguration (BoxConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|BoxConfiguration
name|configuration
parameter_list|)
block|{
name|super
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * To use the shared configuration      */
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|BoxConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|cachedBoxClient
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|cachedBoxClient
operator|=
name|BoxClientHelper
operator|.
name|createBoxClient
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to connect, Box component configuration is missing"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cachedBoxClient
operator|!=
literal|null
condition|)
block|{
comment|// close shared client connections
name|BoxClientHelper
operator|.
name|closeIdleConnections
argument_list|(
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|public
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|cachedBoxClient
operator|!=
literal|null
condition|)
block|{
comment|// shutdown singleton client
name|BoxClientHelper
operator|.
name|shutdownBoxClient
argument_list|(
name|configuration
argument_list|,
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cachedBoxClient
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|doShutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getConfigurationOrCreate ()
specifier|private
name|BoxConfiguration
name|getConfigurationOrCreate
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setConfiguration
argument_list|(
operator|new
name|BoxConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
DECL|method|getApiName ()
specifier|public
name|BoxApiName
name|getApiName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getApiName
argument_list|()
return|;
block|}
comment|/**      * What kind of operation to perform      * @param apiName      */
DECL|method|setApiName (BoxApiName apiName)
specifier|public
name|void
name|setApiName
parameter_list|(
name|BoxApiName
name|apiName
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setApiName
argument_list|(
name|apiName
argument_list|)
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getMethodName
argument_list|()
return|;
block|}
comment|/**      * What sub operation to use for the selected operation      * @param methodName      */
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setMethodName
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getClientId
argument_list|()
return|;
block|}
comment|/**      * Box application client ID      * @param clientId      */
DECL|method|setClientId (String clientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientSecret ()
specifier|public
name|String
name|getClientSecret
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getClientSecret
argument_list|()
return|;
block|}
comment|/**      * Box application client secret      * @param clientSecret      */
DECL|method|setClientSecret (String clientSecret)
specifier|public
name|void
name|setClientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setClientSecret
argument_list|(
name|clientSecret
argument_list|)
expr_stmt|;
block|}
DECL|method|getAuthSecureStorage ()
specifier|public
name|IAuthSecureStorage
name|getAuthSecureStorage
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getAuthSecureStorage
argument_list|()
return|;
block|}
comment|/**      * OAuth Secure Storage callback, can be used to provide and or save OAuth tokens.      * The callback may return null on first call to allow the component to login and authorize application      * and obtain an OAuth token, which can then be saved in the secure storage.      * For the component to be able to create a token automatically a user password must be provided.      * @param authSecureStorage      */
DECL|method|setAuthSecureStorage (IAuthSecureStorage authSecureStorage)
specifier|public
name|void
name|setAuthSecureStorage
parameter_list|(
name|IAuthSecureStorage
name|authSecureStorage
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setAuthSecureStorage
argument_list|(
name|authSecureStorage
argument_list|)
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
comment|/**      * Box user name, MUST be provided      * @param userName      */
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
DECL|method|getUserPassword ()
specifier|public
name|String
name|getUserPassword
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getUserPassword
argument_list|()
return|;
block|}
comment|/**      * Box user password, MUST be provided if authSecureStorage is not set, or returns null on first call      * @param userPassword      */
DECL|method|setUserPassword (String userPassword)
specifier|public
name|void
name|setUserPassword
parameter_list|(
name|String
name|userPassword
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setUserPassword
argument_list|(
name|userPassword
argument_list|)
expr_stmt|;
block|}
DECL|method|getRefreshListener ()
specifier|public
name|OAuthRefreshListener
name|getRefreshListener
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getRefreshListener
argument_list|()
return|;
block|}
comment|/**      * OAuth listener for token updates, if the Camel application needs to use the access token outside the route      * @param refreshListener      */
DECL|method|setRefreshListener (OAuthRefreshListener refreshListener)
specifier|public
name|void
name|setRefreshListener
parameter_list|(
name|OAuthRefreshListener
name|refreshListener
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setRefreshListener
argument_list|(
name|refreshListener
argument_list|)
expr_stmt|;
block|}
DECL|method|isRevokeOnShutdown ()
specifier|public
name|boolean
name|isRevokeOnShutdown
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isRevokeOnShutdown
argument_list|()
return|;
block|}
comment|/**      * Flag to revoke OAuth refresh token on route shutdown, default false.      * Will require a fresh refresh token on restart using either a custom IAuthSecureStorage      * or automatic component login by providing a user password      * @param revokeOnShutdown      */
DECL|method|setRevokeOnShutdown (boolean revokeOnShutdown)
specifier|public
name|void
name|setRevokeOnShutdown
parameter_list|(
name|boolean
name|revokeOnShutdown
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setRevokeOnShutdown
argument_list|(
name|revokeOnShutdown
argument_list|)
expr_stmt|;
block|}
DECL|method|getSharedLink ()
specifier|public
name|String
name|getSharedLink
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSharedLink
argument_list|()
return|;
block|}
comment|/**      * Box shared link for shared endpoints, can be a link for a shared comment, file or folder      * @param sharedLink      */
DECL|method|setSharedLink (String sharedLink)
specifier|public
name|void
name|setSharedLink
parameter_list|(
name|String
name|sharedLink
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSharedLink
argument_list|(
name|sharedLink
argument_list|)
expr_stmt|;
block|}
DECL|method|getSharedPassword ()
specifier|public
name|String
name|getSharedPassword
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSharedPassword
argument_list|()
return|;
block|}
comment|/**      * Password associated with the shared link, MUST be provided with sharedLink      * @param sharedPassword      */
DECL|method|setSharedPassword (String sharedPassword)
specifier|public
name|void
name|setSharedPassword
parameter_list|(
name|String
name|sharedPassword
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSharedPassword
argument_list|(
name|sharedPassword
argument_list|)
expr_stmt|;
block|}
DECL|method|getBoxConfig ()
specifier|public
name|IBoxConfig
name|getBoxConfig
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getBoxConfig
argument_list|()
return|;
block|}
comment|/**      * Custom Box SDK configuration, not required normally      * @param boxConfig      */
DECL|method|setBoxConfig (IBoxConfig boxConfig)
specifier|public
name|void
name|setBoxConfig
parameter_list|(
name|IBoxConfig
name|boxConfig
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setBoxConfig
argument_list|(
name|boxConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnectionManagerBuilder ()
specifier|public
name|BoxConnectionManagerBuilder
name|getConnectionManagerBuilder
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getConnectionManagerBuilder
argument_list|()
return|;
block|}
comment|/**      * Custom Box connection manager builder, used to override default settings like max connections for underlying HttpClient.      * @param connectionManagerBuilder      */
DECL|method|setConnectionManagerBuilder (BoxConnectionManagerBuilder connectionManagerBuilder)
specifier|public
name|void
name|setConnectionManagerBuilder
parameter_list|(
name|BoxConnectionManagerBuilder
name|connectionManagerBuilder
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setConnectionManagerBuilder
argument_list|(
name|connectionManagerBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpParams ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getHttpParams
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHttpParams
argument_list|()
return|;
block|}
comment|/**      * Custom HTTP params for settings like proxy host      * @param httpParams      */
DECL|method|setHttpParams (Map<String, Object> httpParams)
specifier|public
name|void
name|setHttpParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHttpParams
argument_list|(
name|httpParams
argument_list|)
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSslContextParameters
argument_list|()
return|;
block|}
comment|/**      * To configure security using SSLContextParameters.      * @param sslContextParameters      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSslContextParameters
argument_list|(
name|sslContextParameters
argument_list|)
expr_stmt|;
block|}
DECL|method|getLoginTimeout ()
specifier|public
name|int
name|getLoginTimeout
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getLoginTimeout
argument_list|()
return|;
block|}
comment|/**      * Amount of time the component will wait for a response from Box.com, default is 30 seconds      * @param loginTimeout      */
DECL|method|setLoginTimeout (int loginTimeout)
specifier|public
name|void
name|setLoginTimeout
parameter_list|(
name|int
name|loginTimeout
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setLoginTimeout
argument_list|(
name|loginTimeout
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

