begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxEventCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxTypedObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|CachedBoxClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|EventCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|LongPollingEventsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiConsumerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethodHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|PropertyNamesInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ResultInterceptor
import|;
end_import

begin_comment
comment|/**  * The Box consumer.  */
end_comment

begin_comment
comment|//public class BoxConsumer extends AbstractApiConsumer<BoxApiName, BoxConfiguration> {
end_comment

begin_class
DECL|class|BoxConsumer
specifier|public
class|class
name|BoxConsumer
extends|extends
name|DefaultConsumer
implements|implements
name|PropertyNamesInterceptor
implements|,
name|ResultInterceptor
implements|,
name|EventCallback
block|{
DECL|field|CALLBACK_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|CALLBACK_PROPERTY
init|=
literal|"callback"
decl_stmt|;
DECL|field|apiProxy
specifier|private
specifier|final
name|LongPollingEventsManager
name|apiProxy
decl_stmt|;
DECL|field|properties
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
DECL|field|apiMethod
specifier|private
specifier|final
name|ApiMethod
name|apiMethod
decl_stmt|;
DECL|field|splitResult
specifier|private
name|boolean
name|splitResult
init|=
literal|true
decl_stmt|;
DECL|field|cachedBoxClient
specifier|private
name|CachedBoxClient
name|cachedBoxClient
decl_stmt|;
DECL|method|BoxConsumer (BoxEndpoint endpoint, Processor processor)
specifier|public
name|BoxConsumer
parameter_list|(
name|BoxEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|apiMethod
operator|=
name|ApiConsumerHelper
operator|.
name|findMethod
argument_list|(
name|endpoint
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|endpoint
operator|.
name|getEndpointProperties
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CALLBACK_PROPERTY
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// invoke LongPollingEventsManager.poll to start event polling
name|cachedBoxClient
operator|=
name|endpoint
operator|.
name|getBoxClient
argument_list|()
expr_stmt|;
name|apiProxy
operator|=
operator|new
name|LongPollingEventsManager
argument_list|(
name|cachedBoxClient
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHttpParams
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getExecutorService
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|interceptPropertyNames (Set<String> propertyNames)
specifier|public
name|void
name|interceptPropertyNames
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|propertyNames
parameter_list|)
block|{
name|propertyNames
operator|.
name|add
argument_list|(
name|CALLBACK_PROPERTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onEvent (BoxEventCollection events)
specifier|public
name|void
name|onEvent
parameter_list|(
name|BoxEventCollection
name|events
parameter_list|)
throws|throws
name|Exception
block|{
comment|// convert Events to exchange and process
name|log
operator|.
name|debug
argument_list|(
literal|"Processed {} events for {}"
argument_list|,
name|ApiConsumerHelper
operator|.
name|getResultsProcessed
argument_list|(
name|this
argument_list|,
name|events
argument_list|,
name|splitResult
argument_list|)
argument_list|,
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onException (Exception e)
specifier|public
name|void
name|onException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// invoke the API method to start polling
name|ApiMethodHelper
operator|.
name|invokeMethod
argument_list|(
name|apiProxy
argument_list|,
name|apiMethod
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|apiProxy
operator|.
name|stopPolling
argument_list|()
expr_stmt|;
block|}
DECL|method|isSplitResult ()
specifier|public
name|boolean
name|isSplitResult
parameter_list|()
block|{
return|return
name|splitResult
return|;
block|}
DECL|method|setSplitResult (boolean splitResult)
specifier|public
name|void
name|setSplitResult
parameter_list|(
name|boolean
name|splitResult
parameter_list|)
block|{
name|this
operator|.
name|splitResult
operator|=
name|splitResult
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|splitResult (Object result)
specifier|public
name|Object
name|splitResult
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|BoxEventCollection
operator|&&
name|splitResult
condition|)
block|{
name|BoxEventCollection
name|eventCollection
init|=
operator|(
name|BoxEventCollection
operator|)
name|result
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|BoxTypedObject
argument_list|>
name|entries
init|=
name|eventCollection
operator|.
name|getEntries
argument_list|()
decl_stmt|;
return|return
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|BoxTypedObject
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|interceptResult (Object result, Exchange resultExchange)
specifier|public
name|void
name|interceptResult
parameter_list|(
name|Object
name|result
parameter_list|,
name|Exchange
name|resultExchange
parameter_list|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|BoxEventCollection
condition|)
block|{
name|BoxEventCollection
name|boxEventCollection
init|=
operator|(
name|BoxEventCollection
operator|)
name|result
decl_stmt|;
name|resultExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|BoxConstants
operator|.
name|CHUNK_SIZE_PROPERTY
argument_list|,
name|boxEventCollection
operator|.
name|getChunkSize
argument_list|()
argument_list|)
expr_stmt|;
name|resultExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|BoxConstants
operator|.
name|NEXT_STREAM_POSITION_PROPERTY
argument_list|,
name|boxEventCollection
operator|.
name|getNextStreamPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

