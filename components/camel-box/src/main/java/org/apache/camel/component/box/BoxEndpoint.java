begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|BoxClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|resourcemanagers
operator|.
name|IBoxResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxClientHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|BoxPropertiesHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
operator|.
name|CachedBoxClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|AbstractApiEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethodPropertiesHelper
import|;
end_import

begin_comment
comment|/**  * For uploading, downloading and managing files, folders, groups, collaborations, etc on box DOT com.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"box"
argument_list|,
name|title
operator|=
literal|"Box"
argument_list|,
name|syntax
operator|=
literal|"box:apiName/methodName"
argument_list|,
name|consumerClass
operator|=
name|BoxConsumer
operator|.
name|class
argument_list|,
name|consumerPrefix
operator|=
literal|"consumer"
argument_list|,
name|label
operator|=
literal|"api,file,cloud"
argument_list|,
name|lenientProperties
operator|=
literal|true
argument_list|)
comment|// need to be lenient as the box component has a bunch of generated configuration classes that lacks documentation
DECL|class|BoxEndpoint
specifier|public
class|class
name|BoxEndpoint
extends|extends
name|AbstractApiEndpoint
argument_list|<
name|BoxApiName
argument_list|,
name|BoxConfiguration
argument_list|>
block|{
DECL|field|SHARED_LINK_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_LINK_PROPERTY
init|=
literal|"sharedLink"
decl_stmt|;
DECL|field|SHARED_PASSWORD_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_PASSWORD_PROPERTY
init|=
literal|"sharedPassword"
decl_stmt|;
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|BoxConfiguration
name|configuration
decl_stmt|;
comment|// cached client
DECL|field|cachedBoxClient
specifier|private
name|CachedBoxClient
name|cachedBoxClient
decl_stmt|;
comment|// proxy manager
DECL|field|apiProxy
specifier|private
name|IBoxResourceManager
name|apiProxy
decl_stmt|;
comment|// configuration values for shared links
DECL|field|sharedLink
specifier|private
name|String
name|sharedLink
decl_stmt|;
DECL|field|sharedPassword
specifier|private
name|String
name|sharedPassword
decl_stmt|;
DECL|field|boxClientShared
specifier|private
name|boolean
name|boxClientShared
decl_stmt|;
DECL|method|BoxEndpoint (String uri, BoxComponent component, BoxApiName apiName, String methodName, BoxConfiguration endpointConfiguration)
specifier|public
name|BoxEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|BoxComponent
name|component
parameter_list|,
name|BoxApiName
name|apiName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|BoxConfiguration
name|endpointConfiguration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|apiName
argument_list|,
name|methodName
argument_list|,
name|BoxApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getHelper
argument_list|(
name|apiName
argument_list|)
argument_list|,
name|endpointConfiguration
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|endpointConfiguration
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// validate producer APIs
if|if
condition|(
name|getApiName
argument_list|()
operator|==
name|BoxApiName
operator|.
name|POLL_EVENTS
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Producer endpoints do not support endpoint prefix "
operator|+
name|BoxApiName
operator|.
name|POLL_EVENTS
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|BoxProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// make sure inBody is not set for consumers
if|if
condition|(
name|inBody
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option inBody is not supported for consumer endpoint"
argument_list|)
throw|;
block|}
comment|// validate consumer APIs
if|if
condition|(
name|getApiName
argument_list|()
operator|!=
name|BoxApiName
operator|.
name|POLL_EVENTS
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Consumer endpoint only supports endpoint prefix "
operator|+
name|BoxApiName
operator|.
name|POLL_EVENTS
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|BoxConsumer
name|consumer
init|=
operator|new
name|BoxConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
comment|// also set consumer.* properties
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|getPropertiesHelper ()
specifier|protected
name|ApiMethodPropertiesHelper
argument_list|<
name|BoxConfiguration
argument_list|>
name|getPropertiesHelper
parameter_list|()
block|{
return|return
name|BoxPropertiesHelper
operator|.
name|getHelper
argument_list|()
return|;
block|}
DECL|method|getThreadProfileName ()
specifier|protected
name|String
name|getThreadProfileName
parameter_list|()
block|{
return|return
name|BoxConstants
operator|.
name|THREAD_PROFILE_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|afterConfigureProperties ()
specifier|protected
name|void
name|afterConfigureProperties
parameter_list|()
block|{
comment|// create client eagerly, a good way to validate configuration
name|createBoxClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|sharedLink
operator|=
name|configuration
operator|.
name|getSharedLink
argument_list|()
expr_stmt|;
name|this
operator|.
name|sharedPassword
operator|=
name|configuration
operator|.
name|getSharedPassword
argument_list|()
expr_stmt|;
comment|// validate shared endpoints
switch|switch
condition|(
name|getApiName
argument_list|()
condition|)
block|{
case|case
name|SHARED_COMMENTS
case|:
case|case
name|SHARED_FILES
case|:
case|case
name|SHARED_FOLDERS
case|:
case|case
name|SHARED_ITEMS
case|:
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|sharedLink
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Header properties sharedLink and sharedPassword MUST be provided for endpoint {}"
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
block|}
block|}
DECL|method|createBoxClient ()
specifier|private
name|void
name|createBoxClient
parameter_list|()
block|{
specifier|final
name|BoxComponent
name|component
init|=
name|getComponent
argument_list|()
decl_stmt|;
name|this
operator|.
name|boxClientShared
operator|=
name|configuration
operator|.
name|equals
argument_list|(
name|getComponent
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|boxClientShared
condition|)
block|{
comment|// get shared singleton client from Component
name|cachedBoxClient
operator|=
name|component
operator|.
name|getBoxClient
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachedBoxClient
operator|=
name|BoxClientHelper
operator|.
name|createBoxClient
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|BoxComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|BoxComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|interceptProperties (Map<String, Object> properties)
specifier|public
name|void
name|interceptProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
comment|// set shared link and password from configuration if not set as header properties
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|SHARED_LINK_PROPERTY
argument_list|)
operator|&&
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|sharedLink
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|SHARED_LINK_PROPERTY
argument_list|,
name|sharedLink
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|SHARED_PASSWORD_PROPERTY
argument_list|)
operator|&&
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|sharedPassword
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|SHARED_PASSWORD_PROPERTY
argument_list|,
name|sharedPassword
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getApiProxy (ApiMethod method, Map<String, Object> args)
specifier|public
name|Object
name|getApiProxy
parameter_list|(
name|ApiMethod
name|method
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
if|if
condition|(
name|apiProxy
operator|==
literal|null
condition|)
block|{
comment|// create API proxy lazily
name|createApiProxy
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|apiProxy
return|;
block|}
DECL|method|createApiProxy (Map<String, Object> args)
specifier|private
name|void
name|createApiProxy
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
comment|// get shared link and password from args
specifier|final
name|String
name|sharedLink
init|=
operator|(
name|String
operator|)
name|args
operator|.
name|get
argument_list|(
literal|"sharedLink"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sharedPassword
init|=
operator|(
name|String
operator|)
name|args
operator|.
name|get
argument_list|(
literal|"sharedPassword"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|apiName
condition|)
block|{
case|case
name|SHARED_COMMENTS
case|:
case|case
name|SHARED_FILES
case|:
case|case
name|SHARED_FOLDERS
case|:
case|case
name|SHARED_ITEMS
case|:
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|sharedLink
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing required property sharedLink"
argument_list|)
throw|;
block|}
default|default:
block|}
specifier|final
name|BoxClient
name|boxClient
init|=
name|cachedBoxClient
operator|.
name|getBoxClient
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|apiName
condition|)
block|{
case|case
name|COLLABORATIONS
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getCollaborationsManager
argument_list|()
expr_stmt|;
break|break;
case|case
name|COMMENTS
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getCommentsManager
argument_list|()
expr_stmt|;
break|break;
case|case
name|EVENTS
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getEventsManager
argument_list|()
expr_stmt|;
break|break;
case|case
name|FILES
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getFilesManager
argument_list|()
expr_stmt|;
break|break;
case|case
name|FOLDERS
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getFoldersManager
argument_list|()
expr_stmt|;
break|break;
case|case
name|GROUPS
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getGroupsManager
argument_list|()
expr_stmt|;
break|break;
case|case
name|SEARCH
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getSearchManager
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHARED_FILES
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getSharedFilesManager
argument_list|(
name|sharedLink
argument_list|,
name|sharedPassword
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHARED_FOLDERS
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getSharedFoldersManager
argument_list|(
name|sharedLink
argument_list|,
name|sharedPassword
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHARED_COMMENTS
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getSharedCommentsManager
argument_list|(
name|sharedLink
argument_list|,
name|sharedPassword
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHARED_ITEMS
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getSharedItemsManager
argument_list|(
name|sharedLink
argument_list|,
name|sharedPassword
argument_list|)
expr_stmt|;
break|break;
case|case
name|USERS
case|:
name|apiProxy
operator|=
name|boxClient
operator|.
name|getUsersManager
argument_list|()
expr_stmt|;
break|break;
default|default:
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|BoxClientHelper
operator|.
name|getOAuthToken
argument_list|(
name|configuration
argument_list|,
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
operator|!
name|boxClientShared
condition|)
block|{
comment|// while there is no way to suspend BoxClient, we can close idle connections to be nice
name|BoxClientHelper
operator|.
name|closeIdleConnections
argument_list|(
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|public
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// cleanup if BoxClient is not shared
if|if
condition|(
operator|!
name|boxClientShared
condition|)
block|{
name|BoxClientHelper
operator|.
name|shutdownBoxClient
argument_list|(
name|configuration
argument_list|,
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cachedBoxClient
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|doShutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getBoxClient ()
specifier|public
name|CachedBoxClient
name|getBoxClient
parameter_list|()
block|{
return|return
name|cachedBoxClient
return|;
block|}
block|}
end_class

end_unit

