begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxEventCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxRealTimeServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|dao
operator|.
name|BoxTypedObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|exceptions
operator|.
name|AuthFatalFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|exceptions
operator|.
name|BoxServerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|requests
operator|.
name|requestobjects
operator|.
name|BoxEventRequestObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|resourcemanagers
operator|.
name|IBoxEventsManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|restclientv2
operator|.
name|exceptions
operator|.
name|BoxRestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|restclientv2
operator|.
name|exceptions
operator|.
name|BoxSDKException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|BasicHttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpConnectionParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Manager for monitoring events using long polling.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|LongPollingEventsManager
specifier|public
class|class
name|LongPollingEventsManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LongPollingEventsManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RETRY_TIMEOUT
specifier|private
specifier|static
specifier|final
name|String
name|RETRY_TIMEOUT
init|=
literal|"retry_timeout"
decl_stmt|;
DECL|field|MAX_RETRIES
specifier|private
specifier|static
specifier|final
name|String
name|MAX_RETRIES
init|=
literal|"max_retries"
decl_stmt|;
DECL|field|MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE
init|=
literal|"message"
decl_stmt|;
DECL|field|NEW_CHANGE
specifier|private
specifier|static
specifier|final
name|String
name|NEW_CHANGE
init|=
literal|"new_change"
decl_stmt|;
DECL|field|RECONNECT
specifier|private
specifier|static
specifier|final
name|String
name|RECONNECT
init|=
literal|"reconnect"
decl_stmt|;
DECL|field|OUT_OF_DATE
specifier|private
specifier|static
specifier|final
name|String
name|OUT_OF_DATE
init|=
literal|"out_of_date"
decl_stmt|;
DECL|field|cachedBoxClient
specifier|private
specifier|final
name|CachedBoxClient
name|cachedBoxClient
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|final
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|httpParams
specifier|private
specifier|final
name|BasicHttpParams
name|httpParams
decl_stmt|;
DECL|field|httpClient
specifier|private
name|HttpClient
name|httpClient
decl_stmt|;
DECL|field|pollFuture
specifier|private
name|Future
argument_list|<
name|?
argument_list|>
name|pollFuture
decl_stmt|;
DECL|field|httpGet
specifier|private
name|HttpGet
name|httpGet
decl_stmt|;
DECL|field|done
specifier|private
name|boolean
name|done
decl_stmt|;
DECL|method|LongPollingEventsManager (CachedBoxClient boxClient, Map<String, Object> httpParams, ExecutorService executorService)
specifier|public
name|LongPollingEventsManager
parameter_list|(
name|CachedBoxClient
name|boxClient
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|,
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|cachedBoxClient
operator|=
name|boxClient
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
name|this
operator|.
name|httpParams
operator|=
operator|new
name|BasicHttpParams
argument_list|()
expr_stmt|;
name|HttpConnectionParams
operator|.
name|setSoKeepalive
argument_list|(
name|this
operator|.
name|httpParams
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpParams
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|httpParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|httpParams
operator|.
name|setParameter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|poll (long streamPosition, final String streamType, final int limit, final EventCallback callback)
specifier|public
name|void
name|poll
parameter_list|(
name|long
name|streamPosition
parameter_list|,
specifier|final
name|String
name|streamType
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
specifier|final
name|EventCallback
name|callback
parameter_list|)
throws|throws
name|BoxServerException
throws|,
name|AuthFatalFailureException
throws|,
name|BoxRestException
block|{
comment|// get BoxClient Event Manager
specifier|final
name|IBoxEventsManager
name|eventsManager
init|=
name|cachedBoxClient
operator|.
name|getBoxClient
argument_list|()
operator|.
name|getEventsManager
argument_list|()
decl_stmt|;
comment|// get current stream position if requested
if|if
condition|(
name|BoxEventRequestObject
operator|.
name|STREAM_POSITION_NOW
operator|==
name|streamPosition
condition|)
block|{
name|streamPosition
operator|=
name|getCurrentStreamPosition
argument_list|(
name|eventsManager
argument_list|,
name|streamPosition
argument_list|)
expr_stmt|;
block|}
comment|// validate parameters
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|streamPosition
argument_list|,
literal|"streamPosition"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|streamType
argument_list|,
literal|"streamType"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|callback
argument_list|,
literal|"eventCallback"
argument_list|)
expr_stmt|;
name|httpClient
operator|=
operator|new
name|DefaultHttpClient
argument_list|(
name|cachedBoxClient
operator|.
name|getClientConnectionManager
argument_list|()
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
comment|// start polling thread
name|LOG
operator|.
name|info
argument_list|(
literal|"Started event polling thread for "
operator|+
name|cachedBoxClient
argument_list|)
expr_stmt|;
specifier|final
name|long
name|startStreamPosition
init|=
name|streamPosition
decl_stmt|;
name|pollFuture
operator|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|long
name|currentStreamPosition
init|=
name|startStreamPosition
decl_stmt|;
name|BoxRealTimeServer
name|realTimeServer
init|=
literal|null
decl_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
name|int
name|retries
init|=
literal|0
decl_stmt|;
name|int
name|maxRetries
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
try|try
block|{
comment|// set to true if no exceptions thrown
name|retry
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|realTimeServer
operator|==
literal|null
condition|)
block|{
comment|// get RTS URL
name|realTimeServer
operator|=
name|getBoxRealTimeServer
argument_list|(
name|currentStreamPosition
argument_list|,
name|eventsManager
argument_list|)
expr_stmt|;
comment|// update HTTP timeout
specifier|final
name|int
name|requestTimeout
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|realTimeServer
operator|.
name|getExtraData
argument_list|(
name|RETRY_TIMEOUT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|HttpParams
name|params
init|=
name|httpClient
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|HttpConnectionParams
operator|.
name|setSoTimeout
argument_list|(
name|params
argument_list|,
name|requestTimeout
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// update maxRetries
name|maxRetries
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|realTimeServer
operator|.
name|getExtraData
argument_list|(
name|MAX_RETRIES
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create HTTP request for RTS
name|httpGet
operator|=
name|getPollRequest
argument_list|(
name|realTimeServer
operator|.
name|getUrl
argument_list|()
argument_list|,
name|currentStreamPosition
argument_list|)
expr_stmt|;
comment|// execute RTS poll
name|HttpResponse
name|httpResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|httpResponse
operator|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|,
operator|(
name|HttpContext
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Poll timed out, retrying for "
operator|+
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpResponse
operator|!=
literal|null
condition|)
block|{
comment|// parse response
specifier|final
name|StatusLine
name|statusLine
init|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusLine
operator|!=
literal|null
operator|&&
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|==
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
specifier|final
name|HttpEntity
name|entity
init|=
name|httpResponse
operator|.
name|getEntity
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rtsResponse
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|entity
operator|.
name|getContent
argument_list|()
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|message
init|=
name|rtsResponse
operator|.
name|get
argument_list|(
name|MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|NEW_CHANGE
operator|.
name|equals
argument_list|(
name|message
argument_list|)
condition|)
block|{
comment|// get events
specifier|final
name|BoxEventRequestObject
name|requestObject
init|=
name|BoxEventRequestObject
operator|.
name|getEventsRequestObject
argument_list|(
name|currentStreamPosition
argument_list|)
decl_stmt|;
name|requestObject
operator|.
name|setStreamType
argument_list|(
name|streamType
argument_list|)
expr_stmt|;
name|requestObject
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
specifier|final
name|BoxEventCollection
name|events
init|=
name|eventsManager
operator|.
name|getEvents
argument_list|(
name|requestObject
argument_list|)
decl_stmt|;
comment|// notify callback
name|callback
operator|.
name|onEvent
argument_list|(
name|events
argument_list|)
expr_stmt|;
comment|// update stream position
name|currentStreamPosition
operator|=
name|events
operator|.
name|getNextStreamPosition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RECONNECT
operator|.
name|equals
argument_list|(
name|message
argument_list|)
operator|||
name|MAX_RETRIES
operator|.
name|equals
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Long poll reconnect for "
operator|+
name|cachedBoxClient
argument_list|)
expr_stmt|;
name|realTimeServer
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OUT_OF_DATE
operator|.
name|equals
argument_list|(
name|message
argument_list|)
condition|)
block|{
comment|// update currentStreamPosition
name|LOG
operator|.
name|debug
argument_list|(
literal|"Long poll out of date for "
operator|+
name|cachedBoxClient
argument_list|)
expr_stmt|;
name|currentStreamPosition
operator|=
name|getCurrentStreamPosition
argument_list|(
name|eventsManager
argument_list|,
name|BoxEventRequestObject
operator|.
name|STREAM_POSITION_NOW
argument_list|)
expr_stmt|;
name|realTimeServer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Unknown poll response "
operator|+
name|message
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Unknown error"
decl_stmt|;
if|if
condition|(
name|statusLine
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Error polling events for %s: code=%s, message=%s"
argument_list|,
name|cachedBoxClient
argument_list|,
name|statusLine
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|statusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|// keep polling
name|retry
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted event polling thread for {}, exiting..."
argument_list|,
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxSDKException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeCamelException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
comment|// TODO handle connection aborts!!!
name|LOG
operator|.
name|debug
argument_list|(
literal|"Socket exception while event polling for {}"
argument_list|,
name|cachedBoxClient
argument_list|)
expr_stmt|;
name|retry
operator|=
literal|true
expr_stmt|;
name|realTimeServer
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onException
argument_list|(
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Error while polling for "
operator|+
name|cachedBoxClient
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// are we done yet?
if|if
condition|(
operator|!
name|retry
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|realTimeServer
operator|!=
literal|null
operator|&&
operator|(
operator|++
name|retries
operator|>
name|maxRetries
operator|)
condition|)
block|{
comment|// make another option call
name|realTimeServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopped event polling thread for "
operator|+
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getCurrentStreamPosition (IBoxEventsManager eventsManager, long streamPosition)
specifier|private
name|long
name|getCurrentStreamPosition
parameter_list|(
name|IBoxEventsManager
name|eventsManager
parameter_list|,
name|long
name|streamPosition
parameter_list|)
throws|throws
name|BoxRestException
throws|,
name|BoxServerException
throws|,
name|AuthFatalFailureException
block|{
specifier|final
name|BoxEventRequestObject
name|requestObject
init|=
name|BoxEventRequestObject
operator|.
name|getEventsRequestObject
argument_list|(
name|streamPosition
argument_list|)
decl_stmt|;
specifier|final
name|BoxEventCollection
name|events
init|=
name|eventsManager
operator|.
name|getEvents
argument_list|(
name|requestObject
argument_list|)
decl_stmt|;
name|streamPosition
operator|=
name|events
operator|.
name|getNextStreamPosition
argument_list|()
expr_stmt|;
return|return
name|streamPosition
return|;
block|}
DECL|method|stopPolling ()
specifier|public
name|void
name|stopPolling
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|done
condition|)
block|{
comment|// done polling
name|done
operator|=
literal|true
expr_stmt|;
comment|// make sure an HTTP GET is not in progress
if|if
condition|(
name|httpGet
operator|!=
literal|null
operator|&&
operator|!
name|httpGet
operator|.
name|isAborted
argument_list|()
condition|)
block|{
name|httpGet
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
comment|// cancel polling thread
if|if
condition|(
name|pollFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopped event polling for "
operator|+
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to stop event polling for "
operator|+
name|cachedBoxClient
argument_list|)
expr_stmt|;
block|}
name|httpClient
operator|=
literal|null
expr_stmt|;
name|pollFuture
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getBoxRealTimeServer (long currentStreamPosition, IBoxEventsManager eventsManager)
specifier|private
name|BoxRealTimeServer
name|getBoxRealTimeServer
parameter_list|(
name|long
name|currentStreamPosition
parameter_list|,
name|IBoxEventsManager
name|eventsManager
parameter_list|)
throws|throws
name|BoxRestException
throws|,
name|BoxServerException
throws|,
name|AuthFatalFailureException
block|{
specifier|final
name|BoxEventRequestObject
name|optionsRequest
init|=
name|BoxEventRequestObject
operator|.
name|getEventsRequestObject
argument_list|(
name|currentStreamPosition
argument_list|)
decl_stmt|;
specifier|final
name|BoxCollection
name|eventOptions
init|=
name|eventsManager
operator|.
name|getEventOptions
argument_list|(
name|optionsRequest
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|BoxTypedObject
argument_list|>
name|entries
init|=
name|eventOptions
operator|.
name|getEntries
argument_list|()
decl_stmt|;
comment|// validate options
if|if
condition|(
name|entries
operator|==
literal|null
operator|||
name|entries
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|||
operator|!
operator|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|BoxRealTimeServer
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"No Real Time Server from event options for "
operator|+
name|cachedBoxClient
argument_list|)
throw|;
block|}
return|return
operator|(
name|BoxRealTimeServer
operator|)
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getPollRequest (String url, long currentStreamPosition)
specifier|private
name|HttpGet
name|getPollRequest
parameter_list|(
name|String
name|url
parameter_list|,
name|long
name|currentStreamPosition
parameter_list|)
throws|throws
name|AuthFatalFailureException
block|{
specifier|final
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
name|url
operator|+
literal|"&stream_position="
operator|+
name|currentStreamPosition
argument_list|)
decl_stmt|;
specifier|final
name|String
name|accessToken
init|=
name|cachedBoxClient
operator|.
name|getBoxClient
argument_list|()
operator|.
name|getAuthData
argument_list|()
operator|.
name|getAccessToken
argument_list|()
decl_stmt|;
name|httpGet
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
literal|"Bearer "
operator|+
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|httpGet
return|;
block|}
block|}
end_class

end_unit

