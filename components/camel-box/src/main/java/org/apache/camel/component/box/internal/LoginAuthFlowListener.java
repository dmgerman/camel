begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|authorization
operator|.
name|IAuthEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|authorization
operator|.
name|IAuthFlowListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|authorization
operator|.
name|IAuthFlowMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|boxjavalibv2
operator|.
name|events
operator|.
name|OAuthEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** * Implementation of {@link IAuthFlowListener} to get success or failure status of OAuth flow. */
end_comment

begin_class
DECL|class|LoginAuthFlowListener
specifier|public
specifier|final
class|class
name|LoginAuthFlowListener
implements|implements
name|IAuthFlowListener
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LoginAuthFlowListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exception
specifier|private
specifier|final
name|Exception
index|[]
name|exception
init|=
operator|new
name|Exception
index|[
literal|1
index|]
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|LoginAuthFlowListener (CountDownLatch latch)
specifier|public
name|LoginAuthFlowListener
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onAuthFlowMessage (IAuthFlowMessage message)
specifier|public
name|void
name|onAuthFlowMessage
parameter_list|(
name|IAuthFlowMessage
name|message
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|onAuthFlowException (Exception e)
specifier|public
name|void
name|onAuthFlowException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// record exception
name|exception
index|[
literal|0
index|]
operator|=
name|e
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"OAuth exception: %s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onAuthFlowEvent (IAuthEvent state, IAuthFlowMessage message)
specifier|public
name|void
name|onAuthFlowEvent
parameter_list|(
name|IAuthEvent
name|state
parameter_list|,
name|IAuthFlowMessage
name|message
parameter_list|)
block|{
comment|// check success
if|if
condition|(
name|state
operator|==
name|OAuthEvent
operator|.
name|OAUTH_CREATED
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"OAuth succeeded"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getException ()
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|exception
index|[
literal|0
index|]
return|;
block|}
block|}
end_class

end_unit

