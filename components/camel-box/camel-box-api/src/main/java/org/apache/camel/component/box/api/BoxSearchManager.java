begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxSearch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxSearchParameters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|PartialCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Box Search Manager  *   *<p>  * Provides operations to manage Box searches.  *   *   *  */
end_comment

begin_class
DECL|class|BoxSearchManager
specifier|public
class|class
name|BoxSearchManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BoxSearchManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//200 is maximal value used for search (see javadoc for BoxSearch.searchRange)
DECL|field|SEARCH_MAX_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|SEARCH_MAX_LIMIT
init|=
literal|200
decl_stmt|;
comment|/**      * Box connection to authenticated user account.      */
DECL|field|boxConnection
specifier|private
name|BoxAPIConnection
name|boxConnection
decl_stmt|;
comment|/**      * Create search manager to manage the searches of Box connection's      * authenticated user.      *       * @param boxConnection      *            - Box connection to authenticated user account.      */
DECL|method|BoxSearchManager (BoxAPIConnection boxConnection)
specifier|public
name|BoxSearchManager
parameter_list|(
name|BoxAPIConnection
name|boxConnection
parameter_list|)
block|{
name|this
operator|.
name|boxConnection
operator|=
name|boxConnection
expr_stmt|;
block|}
comment|/**      * Search folder and all descendant folders using the given query.      *       * @param folderId      *            - the id of folder searched.      * @param query      *            - the search query.      *       * @return A collection of matching items.      */
DECL|method|searchFolder (String folderId, String query)
specifier|public
name|Collection
argument_list|<
name|BoxItem
argument_list|>
name|searchFolder
parameter_list|(
name|String
name|folderId
parameter_list|,
name|String
name|query
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Searching folder(id="
operator|+
name|folderId
operator|+
literal|") with query="
operator|+
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'query' can not be null"
argument_list|)
throw|;
block|}
comment|// New box API for search requires offset and limit as parameters.
comment|// To preserve api from previous functionality fro previous version, we will execute more searches if needed and merge results
name|BoxSearchParameters
name|bsp
init|=
operator|new
name|BoxSearchParameters
argument_list|()
decl_stmt|;
name|bsp
operator|.
name|setAncestorFolderIds
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|folderId
argument_list|)
argument_list|)
expr_stmt|;
name|bsp
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|BoxItem
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|BoxSearch
name|bs
init|=
operator|new
name|BoxSearch
argument_list|(
name|boxConnection
argument_list|)
decl_stmt|;
name|PartialCollection
argument_list|<
name|BoxItem
operator|.
name|Info
argument_list|>
name|partialResult
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
do|do
block|{
name|partialResult
operator|=
name|bs
operator|.
name|searchRange
argument_list|(
name|offset
argument_list|,
name|SEARCH_MAX_LIMIT
argument_list|,
name|bsp
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|partialResult
operator|.
name|size
argument_list|()
expr_stmt|;
name|partialResult
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|i
lambda|->
operator|(
name|BoxItem
operator|)
name|i
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|forEachOrdered
argument_list|(
name|result
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|partialResult
operator|.
name|size
argument_list|()
operator|==
name|partialResult
operator|.
name|limit
argument_list|()
condition|)
do|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

