begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxTask
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxTaskAssignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Box Tasks Manager  *   *<p>  * Provides operations to manage Box tasks.  *   *   *  */
end_comment

begin_class
DECL|class|BoxTasksManager
specifier|public
class|class
name|BoxTasksManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BoxTasksManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Box connection to authenticated user account.      */
DECL|field|boxConnection
specifier|private
name|BoxAPIConnection
name|boxConnection
decl_stmt|;
comment|/**      * Create tasks manager to manage the tasks of Box connection's      * authenticated user.      *       * @param boxConnection      *            - Box connection to authenticated user account.      */
DECL|method|BoxTasksManager (BoxAPIConnection boxConnection)
specifier|public
name|BoxTasksManager
parameter_list|(
name|BoxAPIConnection
name|boxConnection
parameter_list|)
block|{
name|this
operator|.
name|boxConnection
operator|=
name|boxConnection
expr_stmt|;
block|}
comment|/**      * Get a list of any tasks on file.      *       * @param fileId      *            - the id of file.      * @return The list of tasks on file.      */
DECL|method|getFileTasks (String fileId)
specifier|public
name|List
argument_list|<
name|BoxTask
operator|.
name|Info
argument_list|>
name|getFileTasks
parameter_list|(
name|String
name|fileId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting tasks of file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|getTasks
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Add task to file.      *       * @param fileId      *            - the id of file to add task to.      * @param action      *            - the action the task assignee will be prompted to do.      * @param dueAt      *            - - the day at which this task is due.      * @param message      *            - an optional message to include with the task.      * @return The new task.      */
DECL|method|addFileTask (String fileId, BoxTask.Action action, Date dueAt, String message)
specifier|public
name|BoxTask
name|addFileTask
parameter_list|(
name|String
name|fileId
parameter_list|,
name|BoxTask
operator|.
name|Action
name|action
parameter_list|,
name|Date
name|dueAt
parameter_list|,
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding task to file(id="
operator|+
name|fileId
operator|+
literal|") to '"
operator|+
name|message
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'action' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dueAt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'dueAt' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|fileToAddTaskOn
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
return|return
name|fileToAddTaskOn
operator|.
name|addTask
argument_list|(
name|action
argument_list|,
name|message
argument_list|,
name|dueAt
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Delete task.      *       * @param taskId      *            - the id of task to delete.      */
DECL|method|deleteTask (String taskId)
specifier|public
name|void
name|deleteTask
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting task(id={})"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'taskId' can not be null"
argument_list|)
throw|;
block|}
name|BoxTask
name|task
init|=
operator|new
name|BoxTask
argument_list|(
name|boxConnection
argument_list|,
name|taskId
argument_list|)
decl_stmt|;
name|task
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get task information.      *       * @param taskId      *            - the id of task.      * @return The task information.      */
DECL|method|getTaskInfo (String taskId)
specifier|public
name|BoxTask
operator|.
name|Info
name|getTaskInfo
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting info for task(id={})"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'taskId' can not be null"
argument_list|)
throw|;
block|}
name|BoxTask
name|task
init|=
operator|new
name|BoxTask
argument_list|(
name|boxConnection
argument_list|,
name|taskId
argument_list|)
decl_stmt|;
return|return
name|task
operator|.
name|getInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Update task information.      *       * @param taskId      *            - the id of task.      * @param info      *            - the updated information      * @return The updated task.      */
DECL|method|updateTaskInfo (String taskId, BoxTask.Info info)
specifier|public
name|BoxTask
name|updateTaskInfo
parameter_list|(
name|String
name|taskId
parameter_list|,
name|BoxTask
operator|.
name|Info
name|info
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating info for task(id={})"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'taskId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'info' can not be null"
argument_list|)
throw|;
block|}
name|BoxTask
name|task
init|=
operator|new
name|BoxTask
argument_list|(
name|boxConnection
argument_list|,
name|taskId
argument_list|)
decl_stmt|;
name|task
operator|.
name|updateInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get a list of any assignments for task.      *       * @param taskId      *            - the id of task.      * @return The list of assignments for task.      */
DECL|method|getTaskAssignments (String taskId)
specifier|public
name|List
argument_list|<
name|BoxTaskAssignment
operator|.
name|Info
argument_list|>
name|getTaskAssignments
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting assignments for task(id={})"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'taskId' can not be null"
argument_list|)
throw|;
block|}
name|BoxTask
name|file
init|=
operator|new
name|BoxTask
argument_list|(
name|boxConnection
argument_list|,
name|taskId
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|getAssignments
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Add assignment for task.      *       * @param taskId      *            - the id of task to add assignment for.      * @param assignTo      *            - the user to assign to task.      * @return The assigned task.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// compiler for some reason thinks 'if (assignTo
comment|// == null)' clause is dead code.
DECL|method|addAssignmentToTask (String taskId, BoxUser assignTo)
specifier|public
name|BoxTask
name|addAssignmentToTask
parameter_list|(
name|String
name|taskId
parameter_list|,
name|BoxUser
name|assignTo
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigning task(id="
operator|+
name|taskId
operator|+
literal|") to user(id="
operator|+
name|assignTo
operator|.
name|getID
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'commentId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|assignTo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'assignTo' can not be null"
argument_list|)
throw|;
block|}
name|BoxTask
name|task
init|=
operator|new
name|BoxTask
argument_list|(
name|boxConnection
argument_list|,
name|taskId
argument_list|)
decl_stmt|;
name|task
operator|.
name|addAssignment
argument_list|(
name|assignTo
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get task assignment information.      *       * @param taskAssignmentId      *            - the id of task assignment.      * @return The task assignment information.      */
DECL|method|getTaskAssignmentInfo (String taskAssignmentId)
specifier|public
name|BoxTaskAssignment
operator|.
name|Info
name|getTaskAssignmentInfo
parameter_list|(
name|String
name|taskAssignmentId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting info for task(id={})"
argument_list|,
name|taskAssignmentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskAssignmentId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'taskAssignmentId' can not be null"
argument_list|)
throw|;
block|}
name|BoxTaskAssignment
name|taskAssignment
init|=
operator|new
name|BoxTaskAssignment
argument_list|(
name|boxConnection
argument_list|,
name|taskAssignmentId
argument_list|)
decl_stmt|;
return|return
name|taskAssignment
operator|.
name|getInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// TODO Add this method when BoxTaskAssignment API fixed:
comment|// BoxTaskAssignment.update method currently
comment|// takes BoxTask.Info instead of BoxTaskAssignment.Info
comment|// /**
comment|// * Update task assignment information.
comment|// *
comment|// * @param taskAssignmentId
comment|// * - the id of task assignment.
comment|// * @param info
comment|// * - the updated information
comment|// * @return The updated task assignment.
comment|// */
comment|// public BoxTaskAssignment updateTaskAssignmentInfo(String
comment|// taskAssignmentId, BoxTaskAssignment.Info info) {
comment|// try {
comment|// LOG.debug("Updating info for task(id={})", taskAssignmentId);
comment|// if (taskAssignmentId == null) {
comment|// throw new IllegalArgumentException("Parameter 'taskAssignmentId' can not
comment|// be null");
comment|// }
comment|// if (info == null) {
comment|// throw new IllegalArgumentException("Parameter 'info' can not be null");
comment|// }
comment|//
comment|// BoxTaskAssignment taskAssignment = new BoxTaskAssignment(boxConnection,
comment|// taskAssignmentId);
comment|// taskAssignment.updateInfo(info);
comment|//
comment|// return taskAssignment;
comment|// } catch (BoxAPIException e) {
comment|// throw new RuntimeException(
comment|// String.format("Box API returned the error code %d\n\n%s",
comment|// e.getResponseCode(), e.getResponse()), e);
comment|// }
comment|// }
comment|/**      * Delete task assignment.      *       * @param taskAssignmentId      *            - the id of task assignment to delete.      */
DECL|method|deleteTaskAssignment (String taskAssignmentId)
specifier|public
name|void
name|deleteTaskAssignment
parameter_list|(
name|String
name|taskAssignmentId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting task(id={})"
argument_list|,
name|taskAssignmentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskAssignmentId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'taskAssignmentId' can not be null"
argument_list|)
throw|;
block|}
name|BoxTaskAssignment
name|taskAssignment
init|=
operator|new
name|BoxTaskAssignment
argument_list|(
name|boxConnection
argument_list|,
name|taskAssignmentId
argument_list|)
decl_stmt|;
name|taskAssignment
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

