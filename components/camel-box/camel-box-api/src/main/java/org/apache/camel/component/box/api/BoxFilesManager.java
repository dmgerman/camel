begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFileVersion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxSharedLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|FileUploadParams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|ProgressListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Box Files Manager  *   *<p>  * Provides operations to manage Box files.  *   *   *  */
end_comment

begin_class
DECL|class|BoxFilesManager
specifier|public
class|class
name|BoxFilesManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BoxFilesManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Box connection to authenticated user account.      */
DECL|field|boxConnection
specifier|private
name|BoxAPIConnection
name|boxConnection
decl_stmt|;
comment|/**      * Create files manager to manage the files of Box connection's      * authenticated user.      *       * @param boxConnection      *            - Box connection to authenticated user account.      */
DECL|method|BoxFilesManager (BoxAPIConnection boxConnection)
specifier|public
name|BoxFilesManager
parameter_list|(
name|BoxAPIConnection
name|boxConnection
parameter_list|)
block|{
name|this
operator|.
name|boxConnection
operator|=
name|boxConnection
expr_stmt|;
block|}
comment|/**      * Get file information.      *       * @param fileId      *            - the id of file.      * @param fields      *            - the information fields to retrieve; if<code>null</code> all      *            information fields are retrieved.      * @return The file information.      */
DECL|method|getFileInfo (String fileId, String... fields)
specifier|public
name|BoxFile
operator|.
name|Info
name|getFileInfo
parameter_list|(
name|String
name|fileId
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting info for file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|fields
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|file
operator|.
name|getInfo
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|file
operator|.
name|getInfo
argument_list|(
name|fields
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Update file information.      *       * @param fileId      *            - the id of file to update.      * @param info      *            - the updated information      * @return The updated file.      */
DECL|method|updateFileInfo (String fileId, BoxFile.Info info)
specifier|public
name|BoxFile
name|updateFileInfo
parameter_list|(
name|String
name|fileId
parameter_list|,
name|BoxFile
operator|.
name|Info
name|info
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating info for file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'info' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|file
operator|.
name|updateInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Upload a new file to parent folder.      *       * @param parentFolderId      *            - the id of parent folder.      * @param content      *            - a stream containing contents of the file to upload.      * @param fileName      *            the name to give the uploaded file.      * @param created      *            - the content created date that will be given to the uploaded      *            file.      * @param modified      *            - the content modified date that will be given to the uploaded      *            file.      * @param size      *            - the size of the file's content used for monitoring the      *            upload's progress.      * @param listener      *            - a listener for monitoring the upload's progress.      * @return The uploaded file.      */
DECL|method|uploadFile (String parentFolderId, InputStream content, String fileName, Date created, Date modified, Long size, ProgressListener listener)
specifier|public
name|BoxFile
name|uploadFile
parameter_list|(
name|String
name|parentFolderId
parameter_list|,
name|InputStream
name|content
parameter_list|,
name|String
name|fileName
parameter_list|,
name|Date
name|created
parameter_list|,
name|Date
name|modified
parameter_list|,
name|Long
name|size
parameter_list|,
name|ProgressListener
name|listener
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Uploading file with name '"
operator|+
name|fileName
operator|+
literal|"' to parent_folder(id="
operator|+
name|parentFolderId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentFolderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'parentFolderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Paramerer 'content' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Paramerer 'fileName' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|parentFolder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|parentFolderId
argument_list|)
decl_stmt|;
name|FileUploadParams
name|uploadParams
init|=
operator|new
name|FileUploadParams
argument_list|()
decl_stmt|;
name|uploadParams
operator|.
name|setName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|uploadParams
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|uploadParams
operator|.
name|setCreated
argument_list|(
name|created
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modified
operator|!=
literal|null
condition|)
block|{
name|uploadParams
operator|.
name|setModified
argument_list|(
name|modified
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|uploadParams
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|uploadParams
operator|.
name|setProgressListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
return|return
name|parentFolder
operator|.
name|uploadFile
argument_list|(
name|uploadParams
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Upload a new version of file.      *       * @param fileId      *            - the id of file.      * @param fileContent      *            - a stream containing contents of the file to upload.      * @param modified      *            - the content modified date that will be given to the uploaded      *            file.      * @param fileSize      *            - the size of the file's content used for monitoring the      *            upload's progress.      * @param listener      *            - a listener for monitoring the upload's progress.      * @return The uploaded file.      */
DECL|method|uploadNewFileVersion (String fileId, InputStream fileContent, Date modified, Long fileSize, ProgressListener listener)
specifier|public
name|BoxFile
name|uploadNewFileVersion
parameter_list|(
name|String
name|fileId
parameter_list|,
name|InputStream
name|fileContent
parameter_list|,
name|Date
name|modified
parameter_list|,
name|Long
name|fileSize
parameter_list|,
name|ProgressListener
name|listener
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Uploading new version of file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileContent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Paramerer 'fileContent' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|modified
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fileSize
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|uploadVersion
argument_list|(
name|fileContent
argument_list|,
name|modified
argument_list|,
name|fileSize
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|uploadVersion
argument_list|(
name|fileContent
argument_list|,
name|modified
argument_list|,
literal|0
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|file
operator|.
name|uploadVersion
argument_list|(
name|fileContent
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get any previous versions of file.      *       * @param fileId      *            - the id of file.      * @return The list of previous file versions.      */
DECL|method|getFileVersions (String fileId)
specifier|public
name|Collection
argument_list|<
name|BoxFileVersion
argument_list|>
name|getFileVersions
parameter_list|(
name|String
name|fileId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting versions of file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|getVersions
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Download a file.      *       * @param fileId      *            - the id of file.      * @param output      *            - the stream to which the file contents will be written.      * @param rangeStart      *            - the byte offset in file at which to start the download; if      *<code>null</code> the entire contents of file will be      *            downloaded.      * @param rangeEnd      *            - the byte offset in file at which to stop the download; if      *<code>null</code> the entire contents of file will be      *            downloaded.      * @param listener      *            - a listener for monitoring the download's progress; if      *<code>null</code> the download's progress will not be      *            monitored.      * @return The stream containing the contents of the downloaded file.      */
DECL|method|downloadFile (String fileId, OutputStream output, Long rangeStart, Long rangeEnd, ProgressListener listener)
specifier|public
name|OutputStream
name|downloadFile
parameter_list|(
name|String
name|fileId
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|Long
name|rangeStart
parameter_list|,
name|Long
name|rangeEnd
parameter_list|,
name|ProgressListener
name|listener
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Downloading file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|output
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'output' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rangeStart
operator|!=
literal|null
operator|&&
name|rangeEnd
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|downloadRange
argument_list|(
name|output
argument_list|,
name|rangeStart
argument_list|,
name|rangeEnd
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|download
argument_list|(
name|output
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|rangeStart
operator|!=
literal|null
operator|&&
name|rangeEnd
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|downloadRange
argument_list|(
name|output
argument_list|,
name|rangeStart
argument_list|,
name|rangeEnd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|download
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|output
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Download a previous version of file.      *       * @param fileId      *            - the id of file.      * @param version      *            - the version of file to download; initial version of file has      *            value of<code>0</code>, second version of file is      *<code>1</code> and so on.      * @param output      *            - the stream to which the version contents will be written.      * @param listener      *            - a listener for monitoring the download's progress; if      *<code>null</code> the download's progress will not be      *            monitored.      * @return The stream containing the contents of the downloaded file      *         version.      */
DECL|method|downloadPreviousFileVersion (String fileId, Integer version, OutputStream output, ProgressListener listener)
specifier|public
name|OutputStream
name|downloadPreviousFileVersion
parameter_list|(
name|String
name|fileId
parameter_list|,
name|Integer
name|version
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|ProgressListener
name|listener
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Downloading file(id="
operator|+
name|fileId
operator|+
literal|", version="
operator|+
name|version
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'version' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|output
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'output' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BoxFileVersion
argument_list|>
name|fileVersions
init|=
operator|(
name|List
argument_list|<
name|BoxFileVersion
argument_list|>
operator|)
name|file
operator|.
name|getVersions
argument_list|()
decl_stmt|;
name|BoxFileVersion
name|fileVersion
init|=
name|fileVersions
operator|.
name|get
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|fileVersion
operator|.
name|download
argument_list|(
name|output
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileVersion
operator|.
name|download
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Promote a previous version of file.      *       * @param fileId      *            - the id of file.      * @param version      *            - the version of file to promote; initial version of file has      *            value of<code>0</code>, second version of file is      *<code>1</code> and so on.      * @return The promoted version of file.      */
DECL|method|promoteFileVersion (String fileId, Integer version)
specifier|public
name|BoxFileVersion
name|promoteFileVersion
parameter_list|(
name|String
name|fileId
parameter_list|,
name|Integer
name|version
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Promoting file(id="
operator|+
name|fileId
operator|+
literal|", version="
operator|+
name|version
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'version' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BoxFileVersion
argument_list|>
name|fileVersions
init|=
operator|(
name|List
argument_list|<
name|BoxFileVersion
argument_list|>
operator|)
name|file
operator|.
name|getVersions
argument_list|()
decl_stmt|;
name|BoxFileVersion
name|fileVersion
init|=
name|fileVersions
operator|.
name|get
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|fileVersion
operator|.
name|promote
argument_list|()
expr_stmt|;
return|return
name|fileVersion
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Copy file to destination folder while optionally giving it a new name.      *       * @param fileId      *            - the id of file to copy.      * @param destinationFolderId      *            - the id of the destination folder.      * @param newName      *            - the new name for copied file; if<code>newName</code> is      *<code>null</code>, the copied file has same name as the      *            original.      * @return The copied file.      */
DECL|method|copyFile (String fileId, String destinationFolderId, String newName)
specifier|public
name|BoxFile
name|copyFile
parameter_list|(
name|String
name|fileId
parameter_list|,
name|String
name|destinationFolderId
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copying file(id="
operator|+
name|fileId
operator|+
literal|") to destination_folder(id="
operator|+
name|destinationFolderId
operator|+
literal|")"
operator|+
operator|(
name|newName
operator|==
literal|null
condition|?
literal|""
else|:
literal|" with new name '"
operator|+
name|newName
operator|+
literal|"'"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|destinationFolderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'destinationFolderId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|fileToCopy
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|BoxFolder
name|destinationFolder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|destinationFolderId
argument_list|)
decl_stmt|;
if|if
condition|(
name|newName
operator|==
literal|null
condition|)
block|{
return|return
name|fileToCopy
operator|.
name|copy
argument_list|(
name|destinationFolder
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|fileToCopy
operator|.
name|copy
argument_list|(
name|destinationFolder
argument_list|,
name|newName
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Move file to destination folder while optionally giving it a new name.      *       * @param fileId      *            - the id of file to move.      * @param destinationFolderId      *            - the id of the destination folder.      * @param newName      *            - the new name of moved file; if<code>newName</code> is      *<code>null</code>, the moved file has same name as the      *            original.      * @return The moved file.      */
DECL|method|moveFile (String fileId, String destinationFolderId, String newName)
specifier|public
name|BoxFile
name|moveFile
parameter_list|(
name|String
name|fileId
parameter_list|,
name|String
name|destinationFolderId
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moving file(id="
operator|+
name|fileId
operator|+
literal|") to destination_folder(id="
operator|+
name|destinationFolderId
operator|+
literal|")"
operator|+
operator|(
name|newName
operator|==
literal|null
condition|?
literal|""
else|:
literal|" with new name '"
operator|+
name|newName
operator|+
literal|"'"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|destinationFolderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'destinationFolderId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|fileToMove
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|BoxFolder
name|destinationFolder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|destinationFolderId
argument_list|)
decl_stmt|;
if|if
condition|(
name|newName
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|BoxFile
operator|)
name|fileToMove
operator|.
name|move
argument_list|(
name|destinationFolder
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|BoxFile
operator|)
name|fileToMove
operator|.
name|move
argument_list|(
name|destinationFolder
argument_list|,
name|newName
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Rename file giving it the name<code>newName</code>      *       * @param fileId      *            - the id of file to rename.      * @param newFileName      *            - the new name of file.      * @return The renamed file.      */
DECL|method|renameFile (String fileId, String newFileName)
specifier|public
name|BoxFile
name|renameFile
parameter_list|(
name|String
name|fileId
parameter_list|,
name|String
name|newFileName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming file(id="
operator|+
name|fileId
operator|+
literal|") to '"
operator|+
name|newFileName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newFileName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'newName' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|fileToRename
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|fileToRename
operator|.
name|rename
argument_list|(
name|newFileName
argument_list|)
expr_stmt|;
return|return
name|fileToRename
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Delete the file.      *       * @param fileId      *            - the id of file to delete.      */
DECL|method|deleteFile (String fileId)
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|fileId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Delete a file version.      *       * @param fileId      *            - the id of file with version to delete.      * @param version      *            - the version of file to delete; initial version of file has      *            value of<code>0</code>, second version of file is      *<code>1</code> and so on.      */
DECL|method|deleteFileVersion (String fileId, Integer version)
specifier|public
name|void
name|deleteFileVersion
parameter_list|(
name|String
name|fileId
parameter_list|,
name|Integer
name|version
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting file(id="
operator|+
name|fileId
operator|+
literal|", version="
operator|+
name|version
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'version' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BoxFileVersion
argument_list|>
name|versions
init|=
operator|(
name|List
argument_list|<
name|BoxFileVersion
argument_list|>
operator|)
name|file
operator|.
name|getVersions
argument_list|()
decl_stmt|;
name|BoxFileVersion
name|fileVersion
init|=
name|versions
operator|.
name|get
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|fileVersion
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a shared link to file.      *       * @param fileId      *            - the id of the file to create shared link on.      * @param access      *            - the access level of the shared link.      * @param unshareDate      *            - the date and time at which time the created shared link will      *            expire; if<code>unsharedDate</code> is<code>null</code> then      *            a non-expiring link is created.      * @param permissions      *            - the permissions of the created link; if      *<code>permissions</code> is<code>null</code> then the created      *            shared link is create with default permissions.      * @return The created shared link.      */
DECL|method|createFileSharedLink (String fileId, BoxSharedLink.Access access, Date unshareDate, BoxSharedLink.Permissions permissions)
specifier|public
name|BoxSharedLink
name|createFileSharedLink
parameter_list|(
name|String
name|fileId
parameter_list|,
name|BoxSharedLink
operator|.
name|Access
name|access
parameter_list|,
name|Date
name|unshareDate
parameter_list|,
name|BoxSharedLink
operator|.
name|Permissions
name|permissions
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating shared link for file(id="
operator|+
name|fileId
operator|+
literal|") with access="
operator|+
name|access
operator|+
operator|(
name|unshareDate
operator|==
literal|null
condition|?
literal|""
else|:
literal|" unsharedDate="
operator|+
name|DateFormat
operator|.
name|getDateTimeInstance
argument_list|()
operator|.
name|format
argument_list|(
name|unshareDate
argument_list|)
operator|+
literal|" permissions="
operator|+
name|permissions
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|access
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'access' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|createSharedLink
argument_list|(
name|access
argument_list|,
name|unshareDate
argument_list|,
name|permissions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get an expiring URL for downloading a file directly from Box. This can be      * user, for example, for sending as a redirect to a browser to cause the      * browser to download the file directly from Box.      *       * @param fileId      *            - the id of file.      * @return The temporary download URL      */
DECL|method|getDownloadURL (String fileId)
specifier|public
name|URL
name|getDownloadURL
parameter_list|(
name|String
name|fileId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting download URL for file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|getDownloadURL
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get an expiring URL for creating an embedded preview session. The URL      * will expire after 60 seconds and the preview session will expire after 60      * minutes.      *       * @param fileId      *            - the id of the file to get preview link on.      * @return The preview link.      */
DECL|method|getFilePreviewLink (String fileId)
specifier|public
name|URL
name|getFilePreviewLink
parameter_list|(
name|String
name|fileId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting preview link for file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|getPreviewLink
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get an expiring URL for creating an embedded preview session. The URL      * will expire after 60 seconds and the preview session will expire after 60      * minutes.      *       * @param fileId      *            - the id of the file to get preview link on.      * @param fileType      *            - either PNG of JPG.      * @param minWidth      *            - minimum width.      * @param minHeight      *            - minimum height.      * @param maxWidth      *            - maximum width.      * @param maxHeight      *            - maximum height.      * @return The byte array of the thumbnail image.      */
DECL|method|getFileThumbnail (String fileId, BoxFile.ThumbnailFileType fileType, Integer minWidth, Integer minHeight, Integer maxWidth, Integer maxHeight)
specifier|public
name|byte
index|[]
name|getFileThumbnail
parameter_list|(
name|String
name|fileId
parameter_list|,
name|BoxFile
operator|.
name|ThumbnailFileType
name|fileType
parameter_list|,
name|Integer
name|minWidth
parameter_list|,
name|Integer
name|minHeight
parameter_list|,
name|Integer
name|maxWidth
parameter_list|,
name|Integer
name|maxHeight
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting thumbnail for file(id="
operator|+
name|fileId
operator|+
literal|") fileType="
operator|+
name|fileType
operator|+
literal|" minWidth="
operator|+
name|minWidth
operator|+
literal|" minHeight="
operator|+
name|minHeight
operator|+
literal|" maxWidth="
operator|+
name|maxWidth
operator|+
literal|" maxHeight="
operator|+
name|maxHeight
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileType' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minWidth
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'minWidth' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minHeight
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'minHeight' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxWidth
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'maxWidth' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxHeight
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'maxHeight' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|getThumbnail
argument_list|(
name|fileType
argument_list|,
name|minWidth
argument_list|,
name|minHeight
argument_list|,
name|maxWidth
argument_list|,
name|maxHeight
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create metadata for file in either the global properties template or the      * specified template type.      *       * @param fileId      *            - the id of the file to create metadata for.      * @param metadata      *            - the new metadata values.      * @param typeName      *            - the metadata template type name; if<code>null</code> the      *            global properties template type is used.      * @return The metadata returned from the server.      */
DECL|method|createFileMetadata (String fileId, Metadata metadata, String typeName)
specifier|public
name|Metadata
name|createFileMetadata
parameter_list|(
name|String
name|fileId
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating metadata for file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'metadata' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|!=
literal|null
condition|)
block|{
return|return
name|file
operator|.
name|createMetadata
argument_list|(
name|typeName
argument_list|,
name|metadata
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|file
operator|.
name|createMetadata
argument_list|(
name|metadata
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Gets the file properties metadata.      *       * @param fileId      *            - the id of the file to retrieve metadata for.      * @param typeName      *            - the metadata template type name; if<code>null</code> the      *            global properties template type is used.      * @return The metadata returned from the server.      */
DECL|method|getFileMetadata (String fileId, String typeName)
specifier|public
name|Metadata
name|getFileMetadata
parameter_list|(
name|String
name|fileId
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get metadata for file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|!=
literal|null
condition|)
block|{
return|return
name|file
operator|.
name|getMetadata
argument_list|(
name|typeName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|file
operator|.
name|getMetadata
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Update the file properties metadata.      *       * @param fileId      *            - the id of file to delete.      * @param metadata      *            - the new metadata values.      * @return The metadata returned from the server.      */
DECL|method|updateFileMetadata (String fileId, Metadata metadata)
specifier|public
name|Metadata
name|updateFileMetadata
parameter_list|(
name|String
name|fileId
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating metadata for file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'metadata' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|updateMetadata
argument_list|(
name|metadata
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Delete the file properties metadata.      *       * @param fileId      *            - the id of file to delete.      */
DECL|method|deleteFileMetadata (String fileId)
specifier|public
name|void
name|deleteFileMetadata
parameter_list|(
name|String
name|fileId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting metadata for file(id={})"
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFile
name|file
init|=
operator|new
name|BoxFile
argument_list|(
name|boxConnection
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteMetadata
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

