begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxSharedLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Box Folders Manager  *   *<p>  * Provides operations to manage Box folders.  *   *   *  */
end_comment

begin_class
DECL|class|BoxFoldersManager
specifier|public
class|class
name|BoxFoldersManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BoxFoldersManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Box connection to authenticated user account.      */
DECL|field|boxConnection
specifier|private
name|BoxAPIConnection
name|boxConnection
decl_stmt|;
comment|/**      * Create folder manager to manage folders of Box connection's authenticated      * user.      *       * @param boxConnection      *            - Box connection to authenticated user account.      */
DECL|method|BoxFoldersManager (BoxAPIConnection boxConnection)
specifier|public
name|BoxFoldersManager
parameter_list|(
name|BoxAPIConnection
name|boxConnection
parameter_list|)
block|{
name|this
operator|.
name|boxConnection
operator|=
name|boxConnection
expr_stmt|;
block|}
comment|/**      * Return the root folder of authenticated user.      *       * @return The root folder of authenticated user.      */
DECL|method|getRootFolder ()
specifier|public
name|BoxFolder
name|getRootFolder
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting root folder"
argument_list|)
expr_stmt|;
return|return
name|BoxFolder
operator|.
name|getRootFolder
argument_list|(
name|boxConnection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Return the Box folder referenced by<code>path</code>.      *       * @param path      *            - Sequence of Box folder names from root folder to returned      *            folder.      *       * @return The Box folder referenced by<code>path</code> or      *<code>null</code> if folder is not found.      */
DECL|method|getFolder (String... path)
specifier|public
name|BoxFolder
name|getFolder
parameter_list|(
name|String
modifier|...
name|path
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting folder at path="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|BoxFolder
name|folder
init|=
name|BoxFolder
operator|.
name|getRootFolder
argument_list|(
name|boxConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// Return root folder if path is null or empty.
return|return
name|folder
return|;
block|}
name|searchPath
label|:
for|for
control|(
name|int
name|folderIndex
init|=
literal|0
init|;
name|folderIndex
operator|<
name|path
operator|.
name|length
condition|;
name|folderIndex
operator|++
control|)
block|{
for|for
control|(
name|BoxItem
operator|.
name|Info
name|itemInfo
range|:
name|folder
control|)
block|{
if|if
condition|(
name|itemInfo
operator|instanceof
name|BoxFolder
operator|.
name|Info
operator|&&
name|itemInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|path
index|[
name|folderIndex
index|]
argument_list|)
condition|)
block|{
name|folder
operator|=
operator|(
name|BoxFolder
operator|)
name|itemInfo
operator|.
name|getResource
argument_list|()
expr_stmt|;
continue|continue
name|searchPath
continue|;
block|}
block|}
comment|// Failed to find named folder in path: return null
return|return
literal|null
return|;
block|}
return|return
name|folder
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a specific range of child items in folder and specifies which      * fields of each item to retrieve.      *       * @param folderId      *            - the id of folder.      * @param offset      *            - the index of first child item to retrieve; if      *<code>null</code> all child items are retrieved.      * @param limit      *            - the maximum number of children to retrieve after the offset;      *            if<code>null</code> all child items are retrieved.      * @param fields      *            - the item fields to retrieve for each child item; if      *<code>null</code> all item fields are retrieved.      * @return The Items in folder      */
DECL|method|getFolderItems (String folderId, Long offset, Long limit, String... fields)
specifier|public
name|Collection
argument_list|<
name|BoxItem
operator|.
name|Info
argument_list|>
name|getFolderItems
parameter_list|(
name|String
name|folderId
parameter_list|,
name|Long
name|offset
parameter_list|,
name|Long
name|limit
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting folder items in folder(id="
operator|+
name|folderId
operator|+
literal|") at offset="
operator|+
name|offset
operator|+
literal|" and limit="
operator|+
name|limit
operator|+
literal|" with fields="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
literal|null
operator|&&
name|limit
operator|!=
literal|null
condition|)
block|{
return|return
name|folder
operator|.
name|getChildrenRange
argument_list|(
name|offset
argument_list|,
name|limit
argument_list|,
name|fields
argument_list|)
return|;
block|}
else|else
block|{
name|Collection
argument_list|<
name|BoxItem
operator|.
name|Info
argument_list|>
name|folderItems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|BoxItem
operator|.
name|Info
argument_list|>
name|iterable
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|iterable
operator|=
name|folder
operator|.
name|getChildren
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterable
operator|=
name|folder
operator|.
name|getChildren
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|BoxItem
operator|.
name|Info
name|itemInfo
range|:
name|iterable
control|)
block|{
name|folderItems
operator|.
name|add
argument_list|(
name|itemInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|folderItems
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a folder in parent folder with given<code>parentFolderId</code>.      *       * @param parentFolderId      *            - the id of parent folder.      * @param folderName      *            the name of created folder.      * @return The created folder.      */
DECL|method|createFolder (String parentFolderId, String folderName)
specifier|public
name|BoxFolder
name|createFolder
parameter_list|(
name|String
name|parentFolderId
parameter_list|,
name|String
name|folderName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating folder with name '"
operator|+
name|folderName
operator|+
literal|"' in parent_folder(id="
operator|+
name|parentFolderId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentFolderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'parentFolderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|folderName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Paramerer 'folderName' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|parentFolder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|parentFolderId
argument_list|)
decl_stmt|;
return|return
name|parentFolder
operator|.
name|createFolder
argument_list|(
name|folderName
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a folder specified by path from parent folder with given<code>parentFolderId</code>,      * creating intermediate directories as required.      *      * @param parentFolderId      *            - the id of parent folder.      * @param path      *            - Sequence of Box folder names from parent folder to returned      *            folder.      * @return The last folder in path, no fault will be thrown if it already exists.      */
DECL|method|createFolder (String parentFolderId, String... path)
specifier|public
name|BoxFolder
name|createFolder
parameter_list|(
name|String
name|parentFolderId
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating folder with path '"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|path
argument_list|)
operator|+
literal|"' in parent_folder(id="
operator|+
name|parentFolderId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentFolderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'parentFolderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Paramerer 'path' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|parentFolderId
argument_list|)
decl_stmt|;
name|searchPath
label|:
for|for
control|(
name|int
name|folderIndex
init|=
literal|0
init|;
name|folderIndex
operator|<
name|path
operator|.
name|length
condition|;
name|folderIndex
operator|++
control|)
block|{
for|for
control|(
name|BoxItem
operator|.
name|Info
name|itemInfo
range|:
name|folder
control|)
block|{
if|if
condition|(
name|itemInfo
operator|instanceof
name|BoxFolder
operator|.
name|Info
operator|&&
name|itemInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|path
index|[
name|folderIndex
index|]
argument_list|)
condition|)
block|{
name|folder
operator|=
operator|(
name|BoxFolder
operator|)
name|itemInfo
operator|.
name|getResource
argument_list|()
expr_stmt|;
continue|continue
name|searchPath
continue|;
block|}
block|}
name|folder
operator|=
name|folder
operator|.
name|createFolder
argument_list|(
name|path
index|[
name|folderIndex
index|]
argument_list|)
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
return|return
name|folder
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Copy folder to destination folder while optionally giving it a new name.      *       * @param folderId      *            - the id of folder to copy.      * @param destinationFolderId      *            - the id of the destination folder.      * @param newName      *            - the new name for copied folder; if<code>newName</code> is      *<code>null</code>, the copied folder has same name as the      *            original.      * @return The copied folder.      */
DECL|method|copyFolder (String folderId, String destinationFolderId, String newName)
specifier|public
name|BoxFolder
name|copyFolder
parameter_list|(
name|String
name|folderId
parameter_list|,
name|String
name|destinationFolderId
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copying folder(id="
operator|+
name|folderId
operator|+
literal|") to destination_folder(id="
operator|+
name|destinationFolderId
operator|+
literal|")"
operator|+
operator|(
name|newName
operator|==
literal|null
condition|?
literal|""
else|:
literal|" with new name '"
operator|+
name|newName
operator|+
literal|"'"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|destinationFolderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'destinationFolderId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folderToCopy
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
name|BoxFolder
name|destinationFolder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|destinationFolderId
argument_list|)
decl_stmt|;
if|if
condition|(
name|newName
operator|==
literal|null
condition|)
block|{
return|return
name|folderToCopy
operator|.
name|copy
argument_list|(
name|destinationFolder
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|folderToCopy
operator|.
name|copy
argument_list|(
name|destinationFolder
argument_list|,
name|newName
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Move folder to destination folder while optionally giving it a new name.      *       * @param folderId      *            - the id of folder to move.      * @param destinationFolderId      *            - the id of the destination folder.      * @param newName      *            - the new name of moved folder; if<code>newName</code> is      *<code>null</code>, the moved folder has same name as the      *            original.      * @return The moved folder.      */
DECL|method|moveFolder (String folderId, String destinationFolderId, String newName)
specifier|public
name|BoxFolder
name|moveFolder
parameter_list|(
name|String
name|folderId
parameter_list|,
name|String
name|destinationFolderId
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moving folder(id="
operator|+
name|folderId
operator|+
literal|") to destination_folder(id="
operator|+
name|destinationFolderId
operator|+
literal|")"
operator|+
operator|(
name|newName
operator|==
literal|null
condition|?
literal|""
else|:
literal|" with new name '"
operator|+
name|newName
operator|+
literal|"'"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|destinationFolderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'destinationFolderId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folderToMove
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
name|BoxFolder
name|destinationFolder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|destinationFolderId
argument_list|)
decl_stmt|;
if|if
condition|(
name|newName
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|BoxFolder
operator|)
name|folderToMove
operator|.
name|move
argument_list|(
name|destinationFolder
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|BoxFolder
operator|)
name|folderToMove
operator|.
name|move
argument_list|(
name|destinationFolder
argument_list|,
name|newName
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Rename folder giving it the name<code>newName</code>      *       * @param folderId      *            - the id of folder to rename.      * @param newFolderName      *            - the new name of folder.      * @return The renamed folder.      */
DECL|method|renameFolder (String folderId, String newFolderName)
specifier|public
name|BoxFolder
name|renameFolder
parameter_list|(
name|String
name|folderId
parameter_list|,
name|String
name|newFolderName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming folder(id="
operator|+
name|folderId
operator|+
literal|") to '"
operator|+
name|newFolderName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newFolderName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'newFolderName' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folderToRename
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
name|folderToRename
operator|.
name|rename
argument_list|(
name|newFolderName
argument_list|)
expr_stmt|;
return|return
name|folderToRename
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Delete folder.      *       * @param folderId      *            - the id of folder to delete.      */
DECL|method|deleteFolder (String folderId)
specifier|public
name|void
name|deleteFolder
parameter_list|(
name|String
name|folderId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting folder(id="
operator|+
name|folderId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
name|folder
operator|.
name|delete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get folder information.      *       * @param folderId      *            - the id of folder.      * @param fields      *            - the information fields to retrieve; if<code>null</code> all      *            information fields are retrieved.      * @return The folder information.      */
DECL|method|getFolderInfo (String folderId, String... fields)
specifier|public
name|BoxFolder
operator|.
name|Info
name|getFolderInfo
parameter_list|(
name|String
name|folderId
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting info for folder(id="
operator|+
name|folderId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|fields
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|folder
operator|.
name|getInfo
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|folder
operator|.
name|getInfo
argument_list|(
name|fields
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Update folder information.      *       * @param folderId      *            - the id of folder to update.      * @param info      *            - the updated information      * @return The updated folder.      */
DECL|method|updateFolderInfo (String folderId, BoxFolder.Info info)
specifier|public
name|BoxFolder
name|updateFolderInfo
parameter_list|(
name|String
name|folderId
parameter_list|,
name|BoxFolder
operator|.
name|Info
name|info
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating info for folder(id="
operator|+
name|folderId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'info' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
name|folder
operator|.
name|updateInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|folder
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a shared link to folder.      *       * @param folderId      *            - the id of folder to create shared link on.      * @param access      *            - the access level of the shared link.      * @param unshareDate      *            - the date and time at which time the created shared link will      *            expire; if<code>unsharedDate</code> is<code>null</code> then      *            a non-expiring link is created.      * @param permissions      *            - the permissions of the created link; if      *<code>permissions</code> is<code>null</code> then the created      *            shared link is create with default permissions.      * @return The created shared link.      */
DECL|method|createFolderSharedLink (String folderId, BoxSharedLink.Access access, Date unshareDate, BoxSharedLink.Permissions permissions)
specifier|public
name|BoxSharedLink
name|createFolderSharedLink
parameter_list|(
name|String
name|folderId
parameter_list|,
name|BoxSharedLink
operator|.
name|Access
name|access
parameter_list|,
name|Date
name|unshareDate
parameter_list|,
name|BoxSharedLink
operator|.
name|Permissions
name|permissions
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating shared link for folder(id="
operator|+
name|folderId
operator|+
literal|") with access="
operator|+
name|access
operator|+
operator|(
name|unshareDate
operator|==
literal|null
condition|?
literal|""
else|:
literal|" unsharedDate="
operator|+
name|DateFormat
operator|.
name|getDateTimeInstance
argument_list|()
operator|.
name|format
argument_list|(
name|unshareDate
argument_list|)
operator|+
literal|" permissions="
operator|+
name|permissions
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|access
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'access' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
return|return
name|folder
operator|.
name|createSharedLink
argument_list|(
name|access
argument_list|,
name|unshareDate
argument_list|,
name|permissions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

