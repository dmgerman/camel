begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxCollaboration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxCollaborator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Box Collaborations Manager  *<p>  * Provides operations to manage Box collaborations.  *  */
end_comment

begin_class
DECL|class|BoxCollaborationsManager
specifier|public
class|class
name|BoxCollaborationsManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BoxCollaborationsManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Box connection to authenticated user account.      */
DECL|field|boxConnection
specifier|private
name|BoxAPIConnection
name|boxConnection
decl_stmt|;
comment|/**      * Create collaborations manager to manage the comments of Box connection's      * authenticated user.      *       * @param boxConnection      *            - Box connection to authenticated user account.      */
DECL|method|BoxCollaborationsManager (BoxAPIConnection boxConnection)
specifier|public
name|BoxCollaborationsManager
parameter_list|(
name|BoxAPIConnection
name|boxConnection
parameter_list|)
block|{
name|this
operator|.
name|boxConnection
operator|=
name|boxConnection
expr_stmt|;
block|}
comment|/**      * Get information about all of the collaborations for folder.      *       * @param folderId      *            - the id of folder to get collaborations information on.      *       * @return The collection of collaboration information for folder.      */
DECL|method|getFolderCollaborations (String folderId)
specifier|public
name|Collection
argument_list|<
name|BoxCollaboration
operator|.
name|Info
argument_list|>
name|getFolderCollaborations
parameter_list|(
name|String
name|folderId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting collaborations for folder(id={})"
argument_list|,
name|folderId
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
return|return
name|folder
operator|.
name|getCollaborations
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Add a collaboration to this folder.      *       * @param folderId      *            - the id of folder to add collaboration to.      * @param collaborator      *            - the collaborator to add.      * @param role      *            - the role of the collaborator.      *       * @return The new collaboration.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// compiler for some reason thinks 'if
comment|// (collaborator == null)' clause is dead code.
DECL|method|addFolderCollaboration (String folderId, BoxCollaborator collaborator, BoxCollaboration.Role role)
specifier|public
name|BoxCollaboration
name|addFolderCollaboration
parameter_list|(
name|String
name|folderId
parameter_list|,
name|BoxCollaborator
name|collaborator
parameter_list|,
name|BoxCollaboration
operator|.
name|Role
name|role
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating  collaborations for folder(id="
operator|+
name|folderId
operator|+
literal|") with collaborator("
operator|+
name|collaborator
operator|.
name|getID
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|collaborator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'collaborator' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|role
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'role' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
return|return
name|folder
operator|.
name|collaborate
argument_list|(
name|collaborator
argument_list|,
name|role
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Add a collaboration to this folder. An email will be sent to the      * collaborator if they don't already have a Box account.      *       * @param folderId      *            - the id of folder to add collaboration to.      * @param email      *            - the email address of the collaborator to add.      * @param role      *            - the role of the collaborator.      *       * @return The new collaboration.      */
DECL|method|addFolderCollaborationByEmail (String folderId, String email, BoxCollaboration.Role role)
specifier|public
name|BoxCollaboration
name|addFolderCollaborationByEmail
parameter_list|(
name|String
name|folderId
parameter_list|,
name|String
name|email
parameter_list|,
name|BoxCollaboration
operator|.
name|Role
name|role
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating  collaborations for folder(id="
operator|+
name|folderId
operator|+
literal|") with collaborator("
operator|+
name|email
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|folderId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'folderId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|email
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'email' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|role
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'role' can not be null"
argument_list|)
throw|;
block|}
name|BoxFolder
name|folder
init|=
operator|new
name|BoxFolder
argument_list|(
name|boxConnection
argument_list|,
name|folderId
argument_list|)
decl_stmt|;
return|return
name|folder
operator|.
name|collaborate
argument_list|(
name|email
argument_list|,
name|role
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get collaboration information.      *       * @param collaborationId      *            - the id of collaboration.      * @return The collaboration information.      */
DECL|method|getCollaborationInfo (String collaborationId)
specifier|public
name|BoxCollaboration
operator|.
name|Info
name|getCollaborationInfo
parameter_list|(
name|String
name|collaborationId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting info for collaboration(id={})"
argument_list|,
name|collaborationId
argument_list|)
expr_stmt|;
if|if
condition|(
name|collaborationId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'collaborationId' can not be null"
argument_list|)
throw|;
block|}
name|BoxCollaboration
name|collaboration
init|=
operator|new
name|BoxCollaboration
argument_list|(
name|boxConnection
argument_list|,
name|collaborationId
argument_list|)
decl_stmt|;
return|return
name|collaboration
operator|.
name|getInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Update collaboration information.      *       * @param collaborationId      *            - the id of collaboration.      * @return The collaboration with updated information.      */
DECL|method|updateCollaborationInfo (String collaborationId, BoxCollaboration.Info info)
specifier|public
name|BoxCollaboration
name|updateCollaborationInfo
parameter_list|(
name|String
name|collaborationId
parameter_list|,
name|BoxCollaboration
operator|.
name|Info
name|info
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating info for collaboration(id={})"
argument_list|,
name|collaborationId
argument_list|)
expr_stmt|;
if|if
condition|(
name|collaborationId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'collaborationId' can not be null"
argument_list|)
throw|;
block|}
name|BoxCollaboration
name|collaboration
init|=
operator|new
name|BoxCollaboration
argument_list|(
name|boxConnection
argument_list|,
name|collaborationId
argument_list|)
decl_stmt|;
name|collaboration
operator|.
name|updateInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|collaboration
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Delete collaboration.      *       * @param collaborationId      *            - the id of comment to change.      */
DECL|method|deleteCollaboration (String collaborationId)
specifier|public
name|void
name|deleteCollaboration
parameter_list|(
name|String
name|collaborationId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting collaboration(id={})"
argument_list|,
name|collaborationId
argument_list|)
expr_stmt|;
if|if
condition|(
name|collaborationId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'collaborationId' can not be null"
argument_list|)
throw|;
block|}
name|BoxCollaboration
name|collaboration
init|=
operator|new
name|BoxCollaboration
argument_list|(
name|boxConnection
argument_list|,
name|collaborationId
argument_list|)
decl_stmt|;
name|collaboration
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get all pending collaboration invites for the current user.      *       * @return A collection of pending collaboration information.      */
DECL|method|getPendingCollaborations ()
specifier|public
name|Collection
argument_list|<
name|BoxCollaboration
operator|.
name|Info
argument_list|>
name|getPendingCollaborations
parameter_list|()
block|{
try|try
block|{
return|return
name|BoxCollaboration
operator|.
name|getPendingCollaborations
argument_list|(
name|boxConnection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

