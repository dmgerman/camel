begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.yammer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yammer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yammer
operator|.
name|model
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yammer
operator|.
name|model
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|YammerMessageAndUserRouteTest
specifier|public
class|class
name|YammerMessageAndUserRouteTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|YAMMER_CURRENT_USER_CONSUMER
specifier|private
specifier|static
specifier|final
name|String
name|YAMMER_CURRENT_USER_CONSUMER
init|=
literal|"yammer:current?consumerKey=aConsumerKey&consumerSecret=aConsumerSecretKey&accessToken=aAccessToken"
decl_stmt|;
DECL|field|YAMMER_MESSAGES_CONSUMER
specifier|private
specifier|static
specifier|final
name|String
name|YAMMER_MESSAGES_CONSUMER
init|=
literal|"yammer:messages?consumerKey=aConsumerKey&consumerSecret=aConsumerSecretKey&accessToken=aAccessToken"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|YammerEndpoint
name|messagesEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|YAMMER_MESSAGES_CONSUMER
argument_list|,
name|YammerEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|YammerEndpoint
name|usersEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|YAMMER_CURRENT_USER_CONSUMER
argument_list|,
name|YammerEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|messages
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/messages.json"
argument_list|)
argument_list|)
decl_stmt|;
name|messagesEndpoint
operator|.
name|getConfig
argument_list|()
operator|.
name|setRequestor
argument_list|(
operator|new
name|TestApiRequestor
argument_list|(
name|messages
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|users
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/user.json"
argument_list|)
argument_list|)
decl_stmt|;
name|usersEndpoint
operator|.
name|getConfig
argument_list|()
operator|.
name|setRequestor
argument_list|(
operator|new
name|TestApiRequestor
argument_list|(
name|users
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumeAllMessages ()
specifier|public
name|void
name|testConsumeAllMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|messagesMock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:messages"
argument_list|)
decl_stmt|;
name|messagesMock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|messagesMock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|messagesMock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Messages
name|messages
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Messages
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|messages
operator|.
name|getMessages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Testing yammer API..."
argument_list|,
name|messages
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBody
argument_list|()
operator|.
name|getPlain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(Principal Software Engineer) has #joined the redhat.com network. Take a moment to welcome Jonathan."
argument_list|,
name|messages
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBody
argument_list|()
operator|.
name|getPlain
argument_list|()
argument_list|)
expr_stmt|;
name|MockEndpoint
name|userMock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:user"
argument_list|)
decl_stmt|;
name|userMock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"overwrite me"
argument_list|)
expr_stmt|;
name|userMock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|exchange
operator|=
name|userMock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Joe Camel"
argument_list|,
name|user
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jcamel@redhat.com"
argument_list|,
name|user
operator|.
name|getContact
argument_list|()
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// using dummy keys here since we are mocking out calls to yammer.com with static json; in a real app, please use your own keys!
name|from
argument_list|(
name|YAMMER_MESSAGES_CONSUMER
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:messages"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|pollEnrich
argument_list|(
name|YAMMER_CURRENT_USER_CONSUMER
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:user"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

