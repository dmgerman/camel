begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.yammer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yammer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|YammerConfiguration
specifier|public
class|class
name|YammerConfiguration
block|{
annotation|@
name|UriParam
DECL|field|consumerKey
specifier|private
name|String
name|consumerKey
decl_stmt|;
annotation|@
name|UriParam
DECL|field|consumerSecret
specifier|private
name|String
name|consumerSecret
decl_stmt|;
annotation|@
name|UriParam
DECL|field|accessToken
specifier|private
name|String
name|accessToken
decl_stmt|;
DECL|field|function
specifier|private
name|String
name|function
decl_stmt|;
annotation|@
name|UriParam
DECL|field|useJson
specifier|private
name|boolean
name|useJson
decl_stmt|;
annotation|@
name|UriParam
DECL|field|delay
specifier|private
name|long
name|delay
init|=
literal|3000
operator|+
literal|2000
decl_stmt|;
comment|// 3 sec per poll is enforced by yammer; add 2 sec for safety
annotation|@
name|UriParam
DECL|field|limit
specifier|private
name|int
name|limit
init|=
operator|-
literal|1
decl_stmt|;
comment|// default is unlimited
annotation|@
name|UriParam
DECL|field|olderThan
specifier|private
name|int
name|olderThan
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
DECL|field|newerThan
specifier|private
name|int
name|newerThan
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
DECL|field|threaded
specifier|private
name|String
name|threaded
decl_stmt|;
DECL|field|requestor
specifier|private
name|ApiRequestor
name|requestor
decl_stmt|;
DECL|method|getConsumerKey ()
specifier|public
name|String
name|getConsumerKey
parameter_list|()
block|{
return|return
name|consumerKey
return|;
block|}
DECL|method|setConsumerKey (String consumerKey)
specifier|public
name|void
name|setConsumerKey
parameter_list|(
name|String
name|consumerKey
parameter_list|)
block|{
name|this
operator|.
name|consumerKey
operator|=
name|consumerKey
expr_stmt|;
block|}
DECL|method|getConsumerSecret ()
specifier|public
name|String
name|getConsumerSecret
parameter_list|()
block|{
return|return
name|consumerSecret
return|;
block|}
DECL|method|setConsumerSecret (String consumerSecret)
specifier|public
name|void
name|setConsumerSecret
parameter_list|(
name|String
name|consumerSecret
parameter_list|)
block|{
name|this
operator|.
name|consumerSecret
operator|=
name|consumerSecret
expr_stmt|;
block|}
DECL|method|getDelay ()
specifier|public
name|long
name|getDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
DECL|method|setDelay (long delay)
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
DECL|method|getAccessToken ()
specifier|public
name|String
name|getAccessToken
parameter_list|()
block|{
return|return
name|accessToken
return|;
block|}
DECL|method|setAccessToken (String accessToken)
specifier|public
name|void
name|setAccessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|this
operator|.
name|accessToken
operator|=
name|accessToken
expr_stmt|;
block|}
DECL|method|getFunction ()
specifier|public
name|String
name|getFunction
parameter_list|()
block|{
return|return
name|function
return|;
block|}
DECL|method|setFunction (String function)
specifier|public
name|void
name|setFunction
parameter_list|(
name|String
name|function
parameter_list|)
block|{
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
block|}
DECL|method|getApiUrl ()
specifier|public
name|String
name|getApiUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|url
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|YammerFunctionType
operator|.
name|fromUri
argument_list|(
name|function
argument_list|)
condition|)
block|{
case|case
name|MESSAGES
case|:
name|url
operator|.
name|append
argument_list|(
name|YammerConstants
operator|.
name|YAMMER_BASE_API_URL
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|".json"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALGO
case|:
case|case
name|FOLLOWING
case|:
case|case
name|MY_FEED
case|:
case|case
name|PRIVATE
case|:
case|case
name|SENT
case|:
name|url
operator|.
name|append
argument_list|(
name|YammerConstants
operator|.
name|YAMMER_BASE_API_URL
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"messages/"
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|".json"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s is not a valid Yammer function type."
argument_list|,
name|function
argument_list|)
argument_list|)
throw|;
block|}
name|StringBuilder
name|args
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|args
operator|.
name|append
argument_list|(
literal|"limit="
argument_list|)
expr_stmt|;
name|args
operator|.
name|append
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getOlderThan
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|args
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|append
argument_list|(
literal|"older_than="
argument_list|)
expr_stmt|;
name|args
operator|.
name|append
argument_list|(
name|getOlderThan
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getNewerThan
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|args
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|append
argument_list|(
literal|"newer_than="
argument_list|)
expr_stmt|;
name|args
operator|.
name|append
argument_list|(
name|getNewerThan
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getThreaded
argument_list|()
argument_list|)
operator|&&
operator|(
literal|"true"
operator|.
name|equals
argument_list|(
name|getThreaded
argument_list|()
argument_list|)
operator|||
literal|"extended"
operator|.
name|equals
argument_list|(
name|getThreaded
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|args
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|append
argument_list|(
literal|"threaded="
argument_list|)
expr_stmt|;
name|args
operator|.
name|append
argument_list|(
name|getThreaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|isUseJson ()
specifier|public
name|boolean
name|isUseJson
parameter_list|()
block|{
return|return
name|useJson
return|;
block|}
DECL|method|setUseJson (boolean useJson)
specifier|public
name|void
name|setUseJson
parameter_list|(
name|boolean
name|useJson
parameter_list|)
block|{
name|this
operator|.
name|useJson
operator|=
name|useJson
expr_stmt|;
block|}
DECL|method|getRequestor ()
specifier|public
name|ApiRequestor
name|getRequestor
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|requestor
operator|==
literal|null
condition|)
block|{
name|requestor
operator|=
operator|new
name|ScribeApiRequestor
argument_list|(
name|getApiUrl
argument_list|()
argument_list|,
name|getAccessToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|requestor
return|;
block|}
DECL|method|setRequestor (ApiRequestor requestor)
specifier|public
name|void
name|setRequestor
parameter_list|(
name|ApiRequestor
name|requestor
parameter_list|)
block|{
name|this
operator|.
name|requestor
operator|=
name|requestor
expr_stmt|;
block|}
DECL|method|getLimit ()
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
DECL|method|setLimit (int limit)
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
DECL|method|getOlderThan ()
specifier|public
name|int
name|getOlderThan
parameter_list|()
block|{
return|return
name|olderThan
return|;
block|}
DECL|method|setOlderThan (int olderThan)
specifier|public
name|void
name|setOlderThan
parameter_list|(
name|int
name|olderThan
parameter_list|)
block|{
name|this
operator|.
name|olderThan
operator|=
name|olderThan
expr_stmt|;
block|}
DECL|method|getNewerThan ()
specifier|public
name|int
name|getNewerThan
parameter_list|()
block|{
return|return
name|newerThan
return|;
block|}
DECL|method|setNewerThan (int newerThan)
specifier|public
name|void
name|setNewerThan
parameter_list|(
name|int
name|newerThan
parameter_list|)
block|{
name|this
operator|.
name|newerThan
operator|=
name|newerThan
expr_stmt|;
block|}
DECL|method|getThreaded ()
specifier|public
name|String
name|getThreaded
parameter_list|()
block|{
return|return
name|threaded
return|;
block|}
DECL|method|setThreaded (String threaded)
specifier|public
name|void
name|setThreaded
parameter_list|(
name|String
name|threaded
parameter_list|)
block|{
name|this
operator|.
name|threaded
operator|=
name|threaded
expr_stmt|;
block|}
block|}
end_class

end_unit

