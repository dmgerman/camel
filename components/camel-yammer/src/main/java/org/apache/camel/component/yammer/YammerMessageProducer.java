begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.yammer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yammer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|yammer
operator|.
name|model
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_class
DECL|class|YammerMessageProducer
specifier|public
class|class
name|YammerMessageProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|YammerEndpoint
name|endpoint
decl_stmt|;
DECL|field|apiUrl
specifier|private
specifier|final
name|String
name|apiUrl
decl_stmt|;
DECL|method|YammerMessageProducer (YammerEndpoint endpoint)
specifier|public
name|YammerMessageProducer
parameter_list|(
name|YammerEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|apiUrl
operator|=
name|getApiUrl
argument_list|()
expr_stmt|;
block|}
DECL|method|getApiUrl ()
specifier|private
name|String
name|getApiUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|url
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|function
init|=
name|endpoint
operator|.
name|getConfig
argument_list|()
operator|.
name|getFunction
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|YammerFunctionType
operator|.
name|fromUri
argument_list|(
name|function
argument_list|)
condition|)
block|{
case|case
name|MESSAGES
case|:
name|url
operator|.
name|append
argument_list|(
name|YammerConstants
operator|.
name|YAMMER_BASE_API_URL
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|".json"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s is not a valid Yammer message producer function type."
argument_list|,
name|function
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|jsonBody
init|=
name|endpoint
operator|.
name|getConfig
argument_list|()
operator|.
name|getRequestor
argument_list|(
name|apiUrl
argument_list|)
operator|.
name|post
argument_list|(
literal|"?body="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|body
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
comment|// we set the body to the message that was created on the server
if|if
condition|(
operator|!
name|endpoint
operator|.
name|getConfig
argument_list|()
operator|.
name|isUseJson
argument_list|()
condition|)
block|{
name|ObjectMapper
name|jsonMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Messages
name|messages
init|=
name|jsonMapper
operator|.
name|readValue
argument_list|(
name|jsonBody
argument_list|,
name|Messages
operator|.
name|class
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|messages
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|jsonBody
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

