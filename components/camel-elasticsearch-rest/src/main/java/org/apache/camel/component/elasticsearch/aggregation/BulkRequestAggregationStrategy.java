begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.elasticsearch.aggregation
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|elasticsearch
operator|.
name|aggregation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_comment
comment|/**  * Aggregates two {@link ActionRequest}s into a single {@link BulkRequest}.  */
end_comment

begin_class
DECL|class|BulkRequestAggregationStrategy
specifier|public
class|class
name|BulkRequestAggregationStrategy
implements|implements
name|AggregationStrategy
block|{
annotation|@
name|Override
DECL|method|aggregate (Exchange oldExchange, Exchange newExchange)
specifier|public
name|Exchange
name|aggregate
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
comment|// Don't use getBody(Class<T>) here as we don't want to coerce the body type using a type converter.
name|Object
name|objBody
init|=
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|objBody
operator|instanceof
name|DocWriteRequest
index|[]
operator|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPayloadRuntimeException
argument_list|(
name|newExchange
argument_list|,
name|DocWriteRequest
index|[]
operator|.
expr|class
argument_list|)
throw|;
block|}
name|DocWriteRequest
index|[]
name|newBody
init|=
operator|(
name|DocWriteRequest
index|[]
operator|)
name|objBody
decl_stmt|;
name|BulkRequest
name|request
decl_stmt|;
if|if
condition|(
name|oldExchange
operator|==
literal|null
condition|)
block|{
name|request
operator|=
operator|new
name|BulkRequest
argument_list|()
expr_stmt|;
name|request
operator|.
name|add
argument_list|(
name|newBody
argument_list|)
expr_stmt|;
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|newExchange
return|;
block|}
else|else
block|{
name|request
operator|=
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|BulkRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|.
name|add
argument_list|(
name|newBody
argument_list|)
expr_stmt|;
return|return
name|oldExchange
return|;
block|}
block|}
block|}
end_class

end_unit

