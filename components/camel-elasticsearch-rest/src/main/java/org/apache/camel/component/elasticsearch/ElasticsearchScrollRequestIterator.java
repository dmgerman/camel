begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.elasticsearch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestHighLevelClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|Scroll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|elasticsearch
operator|.
name|ElasticsearchConstants
operator|.
name|PROPERTY_SCROLL_ES_QUERY_COUNT
import|;
end_import

begin_class
DECL|class|ElasticsearchScrollRequestIterator
specifier|public
class|class
name|ElasticsearchScrollRequestIterator
implements|implements
name|Iterator
argument_list|<
name|SearchHit
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|searchRequest
specifier|private
specifier|final
name|SearchRequest
name|searchRequest
decl_stmt|;
DECL|field|restHighLevelClient
specifier|private
specifier|final
name|RestHighLevelClient
name|restHighLevelClient
decl_stmt|;
DECL|field|currentSearchHits
specifier|private
name|Iterator
argument_list|<
name|SearchHit
argument_list|>
name|currentSearchHits
decl_stmt|;
DECL|field|scrollKeepAliveMs
specifier|private
specifier|final
name|int
name|scrollKeepAliveMs
decl_stmt|;
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|scrollId
specifier|private
name|String
name|scrollId
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|requestCount
specifier|private
name|int
name|requestCount
decl_stmt|;
DECL|method|ElasticsearchScrollRequestIterator (SearchRequest searchRequest, RestHighLevelClient restHighLevelClient, int scrollKeepAliveMs, Exchange exchange)
specifier|public
name|ElasticsearchScrollRequestIterator
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|,
name|RestHighLevelClient
name|restHighLevelClient
parameter_list|,
name|int
name|scrollKeepAliveMs
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|searchRequest
operator|=
name|searchRequest
expr_stmt|;
name|this
operator|.
name|restHighLevelClient
operator|=
name|restHighLevelClient
expr_stmt|;
name|this
operator|.
name|scrollKeepAliveMs
operator|=
name|scrollKeepAliveMs
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|requestCount
operator|=
literal|0
expr_stmt|;
comment|// add scroll option on the the first query
name|searchRequest
operator|.
name|scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|scrollKeepAliveMs
argument_list|)
argument_list|)
expr_stmt|;
name|setFirstCurrentSearchHits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|hasNext
init|=
name|currentSearchHits
operator|.
name|hasNext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
name|updateCurrentSearchHits
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|currentSearchHits
operator|.
name|hasNext
argument_list|()
expr_stmt|;
block|}
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|SearchHit
name|next
parameter_list|()
block|{
return|return
name|closed
condition|?
literal|null
else|:
name|currentSearchHits
operator|.
name|next
argument_list|()
return|;
block|}
comment|/**      * Execute next Elasticsearch scroll request and update the current scroll result.      */
DECL|method|updateCurrentSearchHits ()
specifier|private
name|void
name|updateCurrentSearchHits
parameter_list|()
block|{
name|SearchResponse
name|searchResponse
init|=
name|scrollSearch
argument_list|()
decl_stmt|;
name|this
operator|.
name|currentSearchHits
operator|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
DECL|method|setFirstCurrentSearchHits ()
specifier|private
name|void
name|setFirstCurrentSearchHits
parameter_list|()
block|{
name|SearchResponse
name|searchResponse
init|=
name|firstSearch
argument_list|()
decl_stmt|;
name|this
operator|.
name|currentSearchHits
operator|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|this
operator|.
name|scrollId
operator|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
expr_stmt|;
block|}
DECL|method|firstSearch ()
specifier|private
name|SearchResponse
name|firstSearch
parameter_list|()
block|{
name|SearchResponse
name|searchResponse
decl_stmt|;
try|try
block|{
name|searchResponse
operator|=
name|restHighLevelClient
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|,
name|RequestOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|requestCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|searchResponse
return|;
block|}
DECL|method|scrollSearch ()
specifier|private
name|SearchResponse
name|scrollSearch
parameter_list|()
block|{
name|SearchResponse
name|searchResponse
decl_stmt|;
try|try
block|{
name|SearchScrollRequest
name|searchScrollRequest
init|=
operator|new
name|SearchScrollRequest
argument_list|()
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|scrollKeepAliveMs
argument_list|)
argument_list|)
argument_list|)
operator|.
name|scrollId
argument_list|(
name|scrollId
argument_list|)
decl_stmt|;
name|searchResponse
operator|=
name|restHighLevelClient
operator|.
name|scroll
argument_list|(
name|searchScrollRequest
argument_list|,
name|RequestOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|requestCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|searchResponse
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
try|try
block|{
name|ClearScrollRequest
name|clearScrollRequest
init|=
operator|new
name|ClearScrollRequest
argument_list|()
decl_stmt|;
name|clearScrollRequest
operator|.
name|addScrollId
argument_list|(
name|scrollId
argument_list|)
expr_stmt|;
name|restHighLevelClient
operator|.
name|clearScroll
argument_list|(
name|clearScrollRequest
argument_list|,
name|RequestOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|PROPERTY_SCROLL_ES_QUERY_COUNT
argument_list|,
name|requestCount
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getRequestCount ()
specifier|public
name|int
name|getRequestCount
parameter_list|()
block|{
return|return
name|requestCount
return|;
block|}
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
block|}
end_class

end_unit

