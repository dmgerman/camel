begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.elasticsearch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|delete
operator|.
name|DeleteIndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ElasticsearchIndexTest
specifier|public
class|class
name|ElasticsearchIndexTest
extends|extends
name|ElasticsearchBaseTest
block|{
annotation|@
name|Test
DECL|method|testIndex ()
specifier|public
name|void
name|testIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexDelete ()
specifier|public
name|void
name|testIndexDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
name|DeleteIndexRequest
name|index
init|=
operator|new
name|DeleteIndexRequest
argument_list|(
literal|"_all"
argument_list|)
decl_stmt|;
name|Boolean
name|status
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:deleteIndex"
argument_list|,
name|index
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"status should be 200"
argument_list|,
literal|true
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithReplication ()
specifier|public
name|void
name|testIndexWithReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:indexWithReplication"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithHeaders ()
specifier|public
name|void
name|testIndexWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConstants
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchOperation
operator|.
name|Index
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConstants
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithIDInHeader ()
specifier|public
name|void
name|testIndexWithIDInHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConstants
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchOperation
operator|.
name|Index
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConstants
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConstants
operator|.
name|PARAM_INDEX_ID
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"indexId should be equals to the provided id"
argument_list|,
literal|"123"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch-rest://elasticsearch?hostAddresses=localhost:"
operator|+
name|ES_BASE_HTTP_PORT
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:index"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch-rest://elasticsearch?operation=Index&indexName=twitter&hostAddresses=localhost:"
operator|+
name|ES_BASE_HTTP_PORT
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:deleteIndex"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch-rest://elasticsearch?operation=DeleteIndex&indexName=twitter&hostAddresses=localhost:"
operator|+
name|ES_BASE_HTTP_PORT
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:indexWithReplication"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch-rest://elasticsearch?operation=Index&indexName=twitter&hostAddresses=localhost:"
operator|+
name|ES_BASE_HTTP_PORT
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

