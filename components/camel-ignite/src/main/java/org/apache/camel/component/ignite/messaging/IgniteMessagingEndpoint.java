begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite.messaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|messaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|AbstractIgniteEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|ClusterGroupExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|IgniteComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|Ignite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|IgniteMessaging
import|;
end_import

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"ignite:messaging"
argument_list|,
name|title
operator|=
literal|"Ignite Messaging"
argument_list|,
name|syntax
operator|=
literal|"ignite:messaging:[topic]"
argument_list|,
name|label
operator|=
literal|"nosql,cache,messaging"
argument_list|)
DECL|class|IgniteMessagingEndpoint
specifier|public
class|class
name|IgniteMessagingEndpoint
extends|extends
name|AbstractIgniteEndpoint
block|{
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|topic
specifier|private
name|String
name|topic
decl_stmt|;
annotation|@
name|UriParam
DECL|field|clusterGroupExpression
specifier|private
name|ClusterGroupExpression
name|clusterGroupExpression
decl_stmt|;
annotation|@
name|UriParam
DECL|field|sendMode
specifier|private
name|IgniteMessagingSendMode
name|sendMode
init|=
name|IgniteMessagingSendMode
operator|.
name|UNORDERED
decl_stmt|;
annotation|@
name|UriParam
DECL|field|timeout
specifier|private
name|Long
name|timeout
decl_stmt|;
DECL|method|IgniteMessagingEndpoint (String endpointUri, URI remainingUri, Map<String, Object> parameters, IgniteComponent igniteComponent)
specifier|public
name|IgniteMessagingEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|URI
name|remainingUri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|IgniteComponent
name|igniteComponent
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|igniteComponent
argument_list|)
expr_stmt|;
name|topic
operator|=
name|remainingUri
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Validate options.
if|if
condition|(
name|topic
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot initialize an Ignite Messaging Producer with a null topic."
argument_list|)
throw|;
block|}
if|if
condition|(
name|sendMode
operator|==
name|IgniteMessagingSendMode
operator|.
name|ORDERED
operator|&&
name|timeout
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot initialize an Ignite Messaging Producer in ORDERED send mode without a timeout."
argument_list|)
throw|;
block|}
comment|// Initialize the Producer.
name|IgniteMessaging
name|messaging
init|=
name|createIgniteMessaging
argument_list|()
decl_stmt|;
return|return
operator|new
name|IgniteMessagingProducer
argument_list|(
name|this
argument_list|,
name|igniteComponent
argument_list|()
operator|.
name|getIgnite
argument_list|()
argument_list|,
name|messaging
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Validate options.
if|if
condition|(
name|topic
operator|==
literal|null
condition|)
block|{
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot initialize an Ignite Messaging Producer with a null topic."
argument_list|)
expr_stmt|;
block|}
comment|// Initialize the Consumer.
name|IgniteMessaging
name|messaging
init|=
name|createIgniteMessaging
argument_list|()
decl_stmt|;
name|IgniteMessagingConsumer
name|consumer
init|=
operator|new
name|IgniteMessagingConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|messaging
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
DECL|method|createIgniteMessaging ()
specifier|private
name|IgniteMessaging
name|createIgniteMessaging
parameter_list|()
block|{
name|Ignite
name|ignite
init|=
name|ignite
argument_list|()
decl_stmt|;
name|IgniteMessaging
name|messaging
init|=
name|clusterGroupExpression
operator|==
literal|null
condition|?
name|ignite
operator|.
name|message
argument_list|()
else|:
name|ignite
operator|.
name|message
argument_list|(
name|clusterGroupExpression
operator|.
name|getClusterGroup
argument_list|(
name|ignite
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|messaging
return|;
block|}
DECL|method|getTopic ()
specifier|public
name|String
name|getTopic
parameter_list|()
block|{
return|return
name|topic
return|;
block|}
DECL|method|setTopic (String topic)
specifier|public
name|void
name|setTopic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|this
operator|.
name|topic
operator|=
name|topic
expr_stmt|;
block|}
DECL|method|getClusterGroupExpression ()
specifier|public
name|ClusterGroupExpression
name|getClusterGroupExpression
parameter_list|()
block|{
return|return
name|clusterGroupExpression
return|;
block|}
DECL|method|setClusterGroupExpression (ClusterGroupExpression clusterGroupExpression)
specifier|public
name|void
name|setClusterGroupExpression
parameter_list|(
name|ClusterGroupExpression
name|clusterGroupExpression
parameter_list|)
block|{
name|this
operator|.
name|clusterGroupExpression
operator|=
name|clusterGroupExpression
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|Long
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
DECL|method|setTimeout (Long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|Long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getSendMode ()
specifier|public
name|IgniteMessagingSendMode
name|getSendMode
parameter_list|()
block|{
return|return
name|sendMode
return|;
block|}
DECL|method|setSendMode (IgniteMessagingSendMode sendMode)
specifier|public
name|void
name|setSendMode
parameter_list|(
name|IgniteMessagingSendMode
name|sendMode
parameter_list|)
block|{
name|this
operator|.
name|sendMode
operator|=
name|sendMode
expr_stmt|;
block|}
block|}
end_class

end_unit

