begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite.messaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|messaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|IgniteConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|IgniteMessaging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|lang
operator|.
name|IgniteBiPredicate
import|;
end_import

begin_comment
comment|/**  * Ignite Messaging consumer.  */
end_comment

begin_class
DECL|class|IgniteMessagingConsumer
specifier|public
class|class
name|IgniteMessagingConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|endpoint
specifier|private
name|IgniteMessagingEndpoint
name|endpoint
decl_stmt|;
DECL|field|messaging
specifier|private
name|IgniteMessaging
name|messaging
decl_stmt|;
DECL|field|predicate
specifier|private
name|IgniteBiPredicate
argument_list|<
name|UUID
argument_list|,
name|Object
argument_list|>
name|predicate
init|=
operator|new
name|IgniteBiPredicate
argument_list|<
name|UUID
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|971933058406324501L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|UUID
name|uuid
parameter_list|,
name|Object
name|payload
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
decl_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|IgniteConstants
operator|.
name|IGNITE_MESSAGING_TOPIC
argument_list|,
name|endpoint
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|IgniteConstants
operator|.
name|IGNITE_MESSAGING_UUID
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Processing Ignite message for subscription {} with payload {}."
argument_list|,
name|uuid
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception while processing Ignite Message from topic %s"
argument_list|,
name|endpoint
operator|.
name|getTopic
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
DECL|method|IgniteMessagingConsumer (IgniteMessagingEndpoint endpoint, Processor processor, IgniteMessaging messaging)
specifier|public
name|IgniteMessagingConsumer
parameter_list|(
name|IgniteMessagingEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|IgniteMessaging
name|messaging
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|messaging
operator|=
name|messaging
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|messaging
operator|.
name|localListen
argument_list|(
name|endpoint
operator|.
name|getTopic
argument_list|()
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Started Ignite Messaging consumer for topic {}."
argument_list|,
name|endpoint
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|messaging
operator|.
name|stopLocalListen
argument_list|(
name|endpoint
operator|.
name|getTopic
argument_list|()
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stopped Ignite Messaging consumer for topic {}."
argument_list|,
name|endpoint
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

