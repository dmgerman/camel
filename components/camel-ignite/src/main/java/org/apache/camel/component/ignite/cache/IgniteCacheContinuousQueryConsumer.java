begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite.cache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryListenerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryUpdatedListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|IgniteConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|IgniteCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|cache
operator|.
name|query
operator|.
name|ContinuousQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|cache
operator|.
name|query
operator|.
name|QueryCursor
import|;
end_import

begin_comment
comment|/**  * A consumer that generates {@link Exchange}s for items received from a continuous query.  */
end_comment

begin_class
DECL|class|IgniteCacheContinuousQueryConsumer
specifier|public
class|class
name|IgniteCacheContinuousQueryConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|endpoint
specifier|private
name|IgniteCacheEndpoint
name|endpoint
decl_stmt|;
DECL|field|cache
specifier|private
name|IgniteCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
decl_stmt|;
DECL|field|cursor
specifier|private
name|QueryCursor
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|cursor
decl_stmt|;
DECL|method|IgniteCacheContinuousQueryConsumer (IgniteCacheEndpoint endpoint, Processor processor, IgniteCache<Object, Object> cache)
specifier|public
name|IgniteCacheContinuousQueryConsumer
parameter_list|(
name|IgniteCacheEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|IgniteCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|launchContinuousQuery
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Started Ignite Cache Continuous Query consumer for cache {} with query:Â {}."
argument_list|,
name|cache
operator|.
name|getName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|maybeFireExistingQueryResults
argument_list|()
expr_stmt|;
block|}
DECL|method|maybeFireExistingQueryResults ()
specifier|private
name|void
name|maybeFireExistingQueryResults
parameter_list|()
block|{
if|if
condition|(
operator|!
name|endpoint
operator|.
name|isFireExistingQueryResults
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Skipping existing cache results for cache name = %s."
argument_list|,
name|endpoint
operator|.
name|getCacheName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Processing existing cache results for cache name = %s."
argument_list|,
name|endpoint
operator|.
name|getCacheName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|cursor
control|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|IgniteConstants
operator|.
name|IGNITE_CACHE_KEY
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|getAsyncProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|createExchange
argument_list|(
name|entry
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|launchContinuousQuery ()
specifier|private
name|void
name|launchContinuousQuery
parameter_list|()
block|{
name|ContinuousQuery
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|continuousQuery
init|=
operator|new
name|ContinuousQuery
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|continuousQuery
operator|.
name|setInitialQuery
argument_list|(
name|endpoint
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getRemoteFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|continuousQuery
operator|.
name|setRemoteFilter
argument_list|(
name|endpoint
operator|.
name|getRemoteFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|continuousQuery
operator|.
name|setLocalListener
argument_list|(
operator|new
name|CacheEntryUpdatedListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onUpdated
parameter_list|(
name|Iterable
argument_list|<
name|CacheEntryEvent
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|events
parameter_list|)
throws|throws
name|CacheEntryListenerException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Processing Continuous Query event(s):Â {}."
argument_list|,
name|events
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|endpoint
operator|.
name|isOneExchangePerUpdate
argument_list|()
condition|)
block|{
name|fireGroupedExchange
argument_list|(
name|events
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|CacheEntryEvent
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|entry
range|:
name|events
control|)
block|{
name|fireSingleExchange
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|continuousQuery
operator|.
name|setAutoUnsubscribe
argument_list|(
name|endpoint
operator|.
name|isAutoUnsubscribe
argument_list|()
argument_list|)
expr_stmt|;
name|continuousQuery
operator|.
name|setPageSize
argument_list|(
name|endpoint
operator|.
name|getPageSize
argument_list|()
argument_list|)
expr_stmt|;
name|continuousQuery
operator|.
name|setTimeInterval
argument_list|(
name|endpoint
operator|.
name|getTimeInterval
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|cache
operator|.
name|query
argument_list|(
name|continuousQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|close
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stopped Ignite Cache Continuous Query consumer for cache {} with query:Â {}."
argument_list|,
name|cache
operator|.
name|getName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSingleExchange (CacheEntryEvent<? extends Object, ? extends Object> entry)
specifier|private
name|void
name|fireSingleExchange
parameter_list|(
name|CacheEntryEvent
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|entry
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|IgniteConstants
operator|.
name|IGNITE_CACHE_EVENT_TYPE
argument_list|,
name|entry
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|IgniteConstants
operator|.
name|IGNITE_CACHE_OLD_VALUE
argument_list|,
name|entry
operator|.
name|getOldValue
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|IgniteConstants
operator|.
name|IGNITE_CACHE_KEY
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|getAsyncProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|fireGroupedExchange (Iterable<CacheEntryEvent<? extends Object, ? extends Object>> events)
specifier|private
name|void
name|fireGroupedExchange
parameter_list|(
name|Iterable
argument_list|<
name|CacheEntryEvent
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|events
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|(
name|events
argument_list|)
decl_stmt|;
name|getAsyncProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|createExchange (Object payload)
specifier|private
name|Exchange
name|createExchange
parameter_list|(
name|Object
name|payload
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
decl_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|IgniteConstants
operator|.
name|IGNITE_CACHE_NAME
argument_list|,
name|endpoint
operator|.
name|getCacheName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
block|}
end_class

end_unit

