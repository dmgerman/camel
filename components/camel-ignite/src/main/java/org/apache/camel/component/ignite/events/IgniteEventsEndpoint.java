begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite.events
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|AbstractIgniteEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|ClusterGroupExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|Ignite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|IgniteEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|cluster
operator|.
name|ClusterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|events
operator|.
name|EventType
import|;
end_import

begin_comment
comment|/**  * The Ignite Events endpoint is one of camel-ignite endpoints which allows you to  *<a href="https://apacheignite.readme.io/docs/events">receive events</a> from  * the Ignite cluster by creating a local event listener.  * This endpoint only supports consumers.  * The Exchanges created by this consumer put the received Event object into the body of the IN message.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.17.0"
argument_list|,
name|scheme
operator|=
literal|"ignite-events"
argument_list|,
name|title
operator|=
literal|"Ignite Events"
argument_list|,
name|syntax
operator|=
literal|"ignite-events:endpointId"
argument_list|,
name|label
operator|=
literal|"nosql,cache,compute,messaging,data"
argument_list|,
name|consumerOnly
operator|=
literal|true
argument_list|,
name|consumerClass
operator|=
name|IgniteEventsConsumer
operator|.
name|class
argument_list|)
DECL|class|IgniteEventsEndpoint
specifier|public
class|class
name|IgniteEventsEndpoint
extends|extends
name|AbstractIgniteEndpoint
block|{
annotation|@
name|UriPath
DECL|field|endpointId
specifier|private
name|String
name|endpointId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|javaType
operator|=
literal|"Set<Integer> or String"
argument_list|,
name|defaultValue
operator|=
literal|"EventType.EVTS_ALL"
argument_list|)
DECL|field|events
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|events
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|clusterGroupExpression
specifier|private
name|ClusterGroupExpression
name|clusterGroupExpression
decl_stmt|;
DECL|method|IgniteEventsEndpoint (String uri, String remaining, Map<String, Object> parameters, IgniteEventsComponent igniteComponent)
specifier|public
name|IgniteEventsEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|IgniteEventsComponent
name|igniteComponent
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|igniteComponent
argument_list|)
expr_stmt|;
comment|// Initialize subscribed event types with ALL.
name|events
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|eventType
range|:
name|EventType
operator|.
name|EVTS_ALL
control|)
block|{
name|events
operator|.
name|add
argument_list|(
name|eventType
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The Ignite Events endpoint does not support producers."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Initialize the Consumer.
name|IgniteEvents
name|events
init|=
name|createIgniteEvents
argument_list|()
decl_stmt|;
name|IgniteEventsConsumer
name|consumer
init|=
operator|new
name|IgniteEventsConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|events
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created Ignite Events consumer for event types: {}."
argument_list|,
name|events
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
DECL|method|createIgniteEvents ()
specifier|private
name|IgniteEvents
name|createIgniteEvents
parameter_list|()
block|{
name|Ignite
name|ignite
init|=
name|ignite
argument_list|()
decl_stmt|;
name|IgniteEvents
name|events
decl_stmt|;
if|if
condition|(
name|clusterGroupExpression
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignite Events endpoint for event types {} using no Cluster Group."
argument_list|,
name|this
operator|.
name|events
argument_list|)
expr_stmt|;
name|events
operator|=
name|ignite
operator|.
name|events
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ClusterGroup
name|group
init|=
name|clusterGroupExpression
operator|.
name|getClusterGroup
argument_list|(
name|ignite
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Ignite Events endpoint for event types {} using Cluster Group: {}."
argument_list|,
name|this
operator|.
name|events
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|events
operator|=
name|ignite
operator|.
name|events
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
return|return
name|events
return|;
block|}
comment|/**      * Gets the endpoint ID (not used).      *       * @return endpoint ID (not used)      */
DECL|method|getEndpointId ()
specifier|public
name|String
name|getEndpointId
parameter_list|()
block|{
return|return
name|endpointId
return|;
block|}
comment|/**      * The endpoint ID (not used).      *       * @param endpointId endpoint ID (not used)      */
DECL|method|setEndpointId (String endpointId)
specifier|public
name|void
name|setEndpointId
parameter_list|(
name|String
name|endpointId
parameter_list|)
block|{
name|this
operator|.
name|endpointId
operator|=
name|endpointId
expr_stmt|;
block|}
comment|/**      * Gets the event types to subscribe to.      *       * @return      */
DECL|method|getEvents ()
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|getEvents
parameter_list|()
block|{
return|return
name|events
return|;
block|}
comment|/**      * The event IDs to subscribe to as a Set<Integer> directly where      * the IDs are the different constants in org.apache.ignite.events.EventType.      *       * @param events      */
DECL|method|setEvents (Set<Integer> events)
specifier|public
name|void
name|setEvents
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|events
parameter_list|)
block|{
name|this
operator|.
name|events
operator|=
name|events
expr_stmt|;
block|}
comment|/**      * The event types to subscribe to as a comma-separated string of event constants as defined in {@link EventType}.      *<p>      * For example: EVT_CACHE_ENTRY_CREATED,EVT_CACHE_OBJECT_REMOVED,EVT_IGFS_DIR_CREATED.      *       * @param events      */
DECL|method|setEvents (String events)
specifier|public
name|void
name|setEvents
parameter_list|(
name|String
name|events
parameter_list|)
block|{
name|this
operator|.
name|events
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|requestedEvents
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|events
operator|.
name|toUpperCase
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Field
index|[]
name|fields
init|=
name|EventType
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|requestedEvents
operator|.
name|contains
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|this
operator|.
name|events
operator|.
name|add
argument_list|(
name|field
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Problem while resolving event type. See stacktrace."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Gets the cluster group expression.      *       * @return cluster group expression      */
DECL|method|getClusterGroupExpression ()
specifier|public
name|ClusterGroupExpression
name|getClusterGroupExpression
parameter_list|()
block|{
return|return
name|clusterGroupExpression
return|;
block|}
comment|/**      * The cluster group expression.      *       * @param clusterGroupExpression cluster group expression      */
DECL|method|setClusterGroupExpression (ClusterGroupExpression clusterGroupExpression)
specifier|public
name|void
name|setClusterGroupExpression
parameter_list|(
name|ClusterGroupExpression
name|clusterGroupExpression
parameter_list|)
block|{
name|this
operator|.
name|clusterGroupExpression
operator|=
name|clusterGroupExpression
expr_stmt|;
block|}
block|}
end_class

end_unit

