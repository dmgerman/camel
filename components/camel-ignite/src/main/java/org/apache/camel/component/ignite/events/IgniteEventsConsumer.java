begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite.events
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|IgniteEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|lang
operator|.
name|IgnitePredicate
import|;
end_import

begin_comment
comment|/**  * Ignite Events consumer.  */
end_comment

begin_class
DECL|class|IgniteEventsConsumer
specifier|public
class|class
name|IgniteEventsConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|endpoint
specifier|private
name|IgniteEventsEndpoint
name|endpoint
decl_stmt|;
DECL|field|events
specifier|private
name|IgniteEvents
name|events
decl_stmt|;
DECL|field|eventTypes
specifier|private
name|int
index|[]
name|eventTypes
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
DECL|field|predicate
specifier|private
name|IgnitePredicate
argument_list|<
name|Event
argument_list|>
name|predicate
init|=
operator|new
name|IgnitePredicate
argument_list|<
name|Event
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6738594728074592726L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
decl_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|event
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Processing Ignite Event: {}."
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
name|getAsyncProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception while processing Ignite Event: %s."
argument_list|,
name|event
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
DECL|method|IgniteEventsConsumer (IgniteEventsEndpoint endpoint, Processor processor, IgniteEvents events)
specifier|public
name|IgniteEventsConsumer
parameter_list|(
name|IgniteEventsEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|IgniteEvents
name|events
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|events
operator|=
name|events
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
name|endpoint
operator|.
name|getEventsAsIds
argument_list|()
decl_stmt|;
name|eventTypes
operator|=
operator|new
name|int
index|[
name|ids
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|ids
control|)
block|{
name|eventTypes
index|[
name|counter
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
name|events
operator|.
name|localListen
argument_list|(
name|predicate
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Started local Ignite Events consumer for events: {}."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|eventTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|events
operator|.
name|stopLocalListen
argument_list|(
name|predicate
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stopped local Ignite Events consumer for events: {}."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|eventTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

