begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|cache
operator|.
name|IgniteCacheEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|compute
operator|.
name|IgniteComputeEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|events
operator|.
name|IgniteEventsEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|idgen
operator|.
name|IgniteIdGenEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|messaging
operator|.
name|IgniteMessagingEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|queue
operator|.
name|IgniteQueueEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|set
operator|.
name|IgniteSetEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|Ignite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|Ignition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|configuration
operator|.
name|IgniteConfiguration
import|;
end_import

begin_comment
comment|/**  * This is a base class of camel-ignite components which correspond to following Apache Ignite functions:  *<ul>  *<li>{@link IgniteSetComponent}: Cache operations.</li>  *<li>{@link IgniteSetComponent}: Cluster computation.</li>  *<li>{@link IgniteSetComponent}: Messaging.</li>  *<li>{@link IgniteSetComponent}: Eventing.</li>  *<li>{@link IgniteSetComponent}: Id Generation.</li>  *<li>{@link IgniteSetComponent}: Set operations.</li>  *<li>{@link IgniteSetComponent}: Queue operations.</li>  *</ul>  */
end_comment

begin_class
DECL|class|AbstractIgniteComponent
specifier|public
specifier|abstract
class|class
name|AbstractIgniteComponent
extends|extends
name|DefaultComponent
block|{
comment|/**      * Modes of managing the underlying {@link Ignite} instance.       */
DECL|enum|IgniteLifecycleMode
specifier|public
enum|enum
name|IgniteLifecycleMode
block|{
DECL|enumConstant|USER_MANAGED
DECL|enumConstant|COMPONENT_MANAGED
name|USER_MANAGED
block|,
name|COMPONENT_MANAGED
block|}
comment|/** Ignite configuration. */
DECL|field|igniteConfiguration
specifier|private
name|IgniteConfiguration
name|igniteConfiguration
decl_stmt|;
comment|/** Resource from where to load configuration. */
DECL|field|configurationResource
specifier|private
name|Object
name|configurationResource
decl_stmt|;
comment|/** Ignite instance. */
DECL|field|ignite
specifier|private
name|Ignite
name|ignite
decl_stmt|;
comment|/** How the Ignite lifecycle is managed. */
DECL|field|lifecycleMode
specifier|private
name|IgniteLifecycleMode
name|lifecycleMode
init|=
name|IgniteLifecycleMode
operator|.
name|COMPONENT_MANAGED
decl_stmt|;
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|lifecycleMode
operator|==
name|IgniteLifecycleMode
operator|.
name|USER_MANAGED
condition|)
block|{
return|return;
block|}
comment|// Try to load the configuration from the resource.
if|if
condition|(
name|configurationResource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configurationResource
operator|instanceof
name|URL
condition|)
block|{
name|ignite
operator|=
name|Ignition
operator|.
name|start
argument_list|(
operator|(
name|URL
operator|)
name|configurationResource
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configurationResource
operator|instanceof
name|InputStream
condition|)
block|{
name|ignite
operator|=
name|Ignition
operator|.
name|start
argument_list|(
operator|(
name|InputStream
operator|)
name|configurationResource
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configurationResource
operator|instanceof
name|String
condition|)
block|{
name|ignite
operator|=
name|Ignition
operator|.
name|start
argument_list|(
operator|(
name|String
operator|)
name|configurationResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An unsupported configuration resource was provided to the Ignite component. "
operator|+
literal|"Supported types are: URL, InputStream, String."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|igniteConfiguration
operator|!=
literal|null
condition|)
block|{
name|ignite
operator|=
name|Ignition
operator|.
name|start
argument_list|(
name|igniteConfiguration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No configuration resource or IgniteConfiguration was provided to the Ignite component."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|lifecycleMode
operator|==
name|IgniteLifecycleMode
operator|.
name|USER_MANAGED
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|ignite
operator|!=
literal|null
condition|)
block|{
name|ignite
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the {@link Ignite} instance.      */
DECL|method|getIgnite ()
specifier|public
name|Ignite
name|getIgnite
parameter_list|()
block|{
return|return
name|ignite
return|;
block|}
comment|/**      * Sets the {@link Ignite} instance.      */
DECL|method|setIgnite (Ignite ignite)
specifier|public
name|void
name|setIgnite
parameter_list|(
name|Ignite
name|ignite
parameter_list|)
block|{
name|this
operator|.
name|ignite
operator|=
name|ignite
expr_stmt|;
block|}
comment|/**      * Gets the resource from where to load the configuration. It can be a: {@link URI}, {@link String} (URI)       * or an {@link InputStream}.      */
DECL|method|getConfigurationResource ()
specifier|public
name|Object
name|getConfigurationResource
parameter_list|()
block|{
return|return
name|configurationResource
return|;
block|}
comment|/**      * Sets the resource from where to load the configuration. It can be a: {@link URI}, {@link String} (URI)       * or an {@link InputStream}.      */
DECL|method|setConfigurationResource (Object configurationResource)
specifier|public
name|void
name|setConfigurationResource
parameter_list|(
name|Object
name|configurationResource
parameter_list|)
block|{
name|this
operator|.
name|configurationResource
operator|=
name|configurationResource
expr_stmt|;
block|}
comment|/**      * Gets the {@link IgniteConfiguration} if the user set it explicitly.      */
DECL|method|getIgniteConfiguration ()
specifier|public
name|IgniteConfiguration
name|getIgniteConfiguration
parameter_list|()
block|{
return|return
name|igniteConfiguration
return|;
block|}
comment|/**      * Allows the user to set a programmatic {@link IgniteConfiguration}.      */
DECL|method|setIgniteConfiguration (IgniteConfiguration igniteConfiguration)
specifier|public
name|void
name|setIgniteConfiguration
parameter_list|(
name|IgniteConfiguration
name|igniteConfiguration
parameter_list|)
block|{
name|this
operator|.
name|igniteConfiguration
operator|=
name|igniteConfiguration
expr_stmt|;
block|}
block|}
end_class

end_unit

