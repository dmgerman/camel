begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|idgen
operator|.
name|IgniteIdGenComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|idgen
operator|.
name|IgniteIdGenEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|idgen
operator|.
name|IgniteIdGenOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|IgniteAtomicSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_class
DECL|class|IgniteIdGenTest
specifier|public
class|class
name|IgniteIdGenTest
extends|extends
name|AbstractIgniteTest
block|{
annotation|@
name|Override
DECL|method|getScheme ()
specifier|protected
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"ignite-idgen"
return|;
block|}
annotation|@
name|Override
DECL|method|createComponent ()
specifier|protected
name|AbstractIgniteComponent
name|createComponent
parameter_list|()
block|{
return|return
name|IgniteIdGenComponent
operator|.
name|fromConfiguration
argument_list|(
name|createConfiguration
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testOperations ()
specifier|public
name|void
name|testOperations
parameter_list|()
block|{
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?initialValue=0&operation=GET"
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?initialValue=0&operation=GET_AND_INCREMENT"
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?initialValue=0&operation=INCREMENT_AND_GET"
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?initialValue=0&operation=ADD_AND_GET"
argument_list|,
literal|5
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?initialValue=0&operation=GET_AND_ADD"
argument_list|,
literal|5
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?initialValue=0&operation=GET"
argument_list|,
literal|5
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitialValue ()
specifier|public
name|void
name|testInitialValue
parameter_list|()
block|{
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?operation=GET&initialValue=100"
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?operation=GET_AND_INCREMENT&initialValue=100"
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?operation=INCREMENT_AND_GET&initialValue=100"
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|102
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?operation=ADD_AND_GET&initialValue=100"
argument_list|,
literal|5
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|107
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?operation=GET_AND_ADD&initialValue=100"
argument_list|,
literal|5
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|107
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?operation=GET&initialValue=100"
argument_list|,
literal|5
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|112
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDifferentOperation ()
specifier|public
name|void
name|testDifferentOperation
parameter_list|()
block|{
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-idgen:abc?operation=GET&initialValue=100"
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"ignite-idgen:abc?operation=GET_AND_INCREMENT&initialValue=100"
argument_list|,
literal|null
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_IDGEN_OPERATION
argument_list|,
name|IgniteIdGenOperation
operator|.
name|INCREMENT_AND_GET
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBatchSize ()
specifier|public
name|void
name|testBatchSize
parameter_list|()
block|{
name|IgniteIdGenEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"ignite-idgen:abc?operation=GET&initialValue=100&batchSize=100"
argument_list|,
name|IgniteIdGenEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
name|endpoint
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Cannot test much here with a single Ignite instance, let's just test that the parameter could be set.
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|endpoint
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|After
DECL|method|deleteSets ()
specifier|public
name|void
name|deleteSets
parameter_list|()
block|{
for|for
control|(
name|String
name|name
range|:
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|(
literal|"abc"
argument_list|)
control|)
block|{
name|IgniteAtomicSequence
name|seq
init|=
name|ignite
argument_list|()
operator|.
name|atomicSequence
argument_list|(
name|name
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|seq
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|seq
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

