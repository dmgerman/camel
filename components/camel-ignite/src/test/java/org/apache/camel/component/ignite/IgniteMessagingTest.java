begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ContiguousSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|DiscreteDomain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|messaging
operator|.
name|IgniteMessagingComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|lang
operator|.
name|IgniteBiPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
operator|.
name|await
import|;
end_import

begin_class
DECL|class|IgniteMessagingTest
specifier|public
class|class
name|IgniteMessagingTest
extends|extends
name|AbstractIgniteTest
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3967738538216977749L
decl_stmt|;
DECL|field|TOPIC1
specifier|private
specifier|static
specifier|final
name|String
name|TOPIC1
init|=
literal|"TOPIC1"
decl_stmt|;
DECL|field|TOPIC2
specifier|private
specifier|static
specifier|final
name|String
name|TOPIC2
init|=
literal|"TOPIC2"
decl_stmt|;
DECL|field|uuid
specifier|private
name|UUID
name|uuid
decl_stmt|;
annotation|@
name|Override
DECL|method|getScheme ()
specifier|protected
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"ignite-messaging"
return|;
block|}
annotation|@
name|Override
DECL|method|createComponent ()
specifier|protected
name|AbstractIgniteComponent
name|createComponent
parameter_list|()
block|{
return|return
name|IgniteMessagingComponent
operator|.
name|fromConfiguration
argument_list|(
name|createConfiguration
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testProducerSendMessage ()
specifier|public
name|void
name|testProducerSendMessage
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|messages
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|setupMessageListener
argument_list|(
name|TOPIC1
argument_list|,
name|messages
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-messaging:TOPIC1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|messages
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducerSendMessageTopicInHeader ()
specifier|public
name|void
name|testProducerSendMessageTopicInHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|messages1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|setupMessageListener
argument_list|(
name|TOPIC1
argument_list|,
name|messages1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|messages2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|setupMessageListener
argument_list|(
name|TOPIC2
argument_list|,
name|messages2
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"ignite-messaging:TOPIC1"
argument_list|,
literal|1
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_MESSAGING_TOPIC
argument_list|,
literal|"TOPIC2"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|messages1
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|messages2
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducerSendManyMessages ()
specifier|public
name|void
name|testProducerSendManyMessages
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|messages
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|setupMessageListener
argument_list|(
name|TOPIC1
argument_list|,
name|messages
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|request
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|,
name|DiscreteDomain
operator|.
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-messaging:TOPIC1"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|messages
operator|.
name|size
argument_list|()
operator|==
literal|100
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|messages
argument_list|)
operator|.
name|containsAllIn
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducerSendManyMessagesOrdered ()
specifier|public
name|void
name|testProducerSendManyMessagesOrdered
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|messages
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|setupMessageListener
argument_list|(
name|TOPIC1
argument_list|,
name|messages
argument_list|)
expr_stmt|;
name|ContiguousSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|,
name|DiscreteDomain
operator|.
name|integers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|set
control|)
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-messaging:TOPIC1?sendMode=ORDERED&timeout=1000"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|messages
operator|.
name|size
argument_list|()
operator|==
literal|100
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|messages
argument_list|)
operator|.
name|containsAllIn
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducerSendCollectionAsObject ()
specifier|public
name|void
name|testProducerSendCollectionAsObject
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|messages
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|setupMessageListener
argument_list|(
name|TOPIC1
argument_list|,
name|messages
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|request
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|,
name|DiscreteDomain
operator|.
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-messaging:TOPIC1?treatCollectionsAsCacheObjects=true"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|messages
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumerManyMessages ()
specifier|public
name|void
name|testConsumerManyMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|messages
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Consumer
name|consumer
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"ignite-messaging:TOPIC1"
argument_list|)
operator|.
name|createConsumer
argument_list|(
name|storeBodyInListProcessor
argument_list|(
name|messages
argument_list|)
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|messagesToSend
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|,
name|DiscreteDomain
operator|.
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|ignite
argument_list|()
operator|.
name|message
argument_list|()
operator|.
name|send
argument_list|(
name|TOPIC1
argument_list|,
name|messagesToSend
argument_list|)
expr_stmt|;
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|messages
operator|.
name|size
argument_list|()
operator|==
literal|100
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|setupMessageListener (String topic, final List<Object> messages)
specifier|private
name|void
name|setupMessageListener
parameter_list|(
name|String
name|topic
parameter_list|,
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|messages
parameter_list|)
block|{
name|uuid
operator|=
name|ignite
argument_list|()
operator|.
name|message
argument_list|()
operator|.
name|remoteListen
argument_list|(
name|topic
argument_list|,
operator|new
name|IgniteBiPredicate
argument_list|<
name|UUID
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|UUID
name|uuid
parameter_list|,
name|Object
name|message
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopMessageListener ()
specifier|public
name|void
name|stopMessageListener
parameter_list|()
block|{
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ignite
argument_list|()
operator|.
name|message
argument_list|()
operator|.
name|stopRemoteListen
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|uuid
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|storeBodyInListProcessor (final List<Object> list)
specifier|private
name|Processor
name|storeBodyInListProcessor
parameter_list|(
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|list
operator|.
name|add
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

