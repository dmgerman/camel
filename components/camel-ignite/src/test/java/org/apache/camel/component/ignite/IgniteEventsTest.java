begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|expiry
operator|.
name|CreatedExpiryPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|expiry
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|events
operator|.
name|IgniteEventsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|IgniteCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|configuration
operator|.
name|IgniteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|events
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_class
DECL|class|IgniteEventsTest
specifier|public
class|class
name|IgniteEventsTest
extends|extends
name|AbstractIgniteTest
block|{
annotation|@
name|Override
DECL|method|getScheme ()
specifier|protected
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"ignite-events"
return|;
block|}
annotation|@
name|Override
DECL|method|createComponent ()
specifier|protected
name|AbstractIgniteComponent
name|createComponent
parameter_list|()
block|{
return|return
name|IgniteEventsComponent
operator|.
name|fromConfiguration
argument_list|(
name|createConfiguration
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testConsumeAllEvents ()
specifier|public
name|void
name|testConsumeAllEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"ignite-events:abc"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test1"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:test1"
argument_list|)
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|IgniteCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|ignite
argument_list|()
operator|.
name|getOrCreateCache
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
comment|// Generate cache activity.
name|cache
operator|.
name|put
argument_list|(
literal|"abc"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|withExpiryPolicy
argument_list|(
name|CreatedExpiryPolicy
operator|.
name|factoryOf
argument_list|(
operator|new
name|Duration
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"abc"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|eventTypes
init|=
name|receivedEventTypes
argument_list|(
literal|"mock:test1"
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|eventTypes
argument_list|)
operator|.
name|containsAllOf
argument_list|(
name|EventType
operator|.
name|EVT_CACHE_STARTED
argument_list|,
name|EventType
operator|.
name|EVT_CACHE_ENTRY_CREATED
argument_list|,
name|EventType
operator|.
name|EVT_CACHE_OBJECT_PUT
argument_list|,
name|EventType
operator|.
name|EVT_CACHE_OBJECT_READ
argument_list|,
name|EventType
operator|.
name|EVT_CACHE_OBJECT_REMOVED
argument_list|,
name|EventType
operator|.
name|EVT_CACHE_OBJECT_PUT
argument_list|,
name|EventType
operator|.
name|EVT_CACHE_OBJECT_EXPIRED
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumeFilteredEventsWithRef ()
specifier|public
name|void
name|testConsumeFilteredEventsWithRef
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|getRegistry
argument_list|(
name|JndiRegistry
operator|.
name|class
argument_list|)
operator|.
name|bind
argument_list|(
literal|"filter"
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|EventType
operator|.
name|EVT_CACHE_OBJECT_PUT
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"ignite-events:abc?events=#filter"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:test2"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|IgniteCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|ignite
argument_list|()
operator|.
name|getOrCreateCache
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
comment|// Generate cache activity.
name|cache
operator|.
name|put
argument_list|(
literal|"abc"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"abc"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|eventTypes
init|=
name|receivedEventTypes
argument_list|(
literal|"mock:test2"
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|eventTypes
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EventType
operator|.
name|EVT_CACHE_OBJECT_PUT
argument_list|,
name|EventType
operator|.
name|EVT_CACHE_OBJECT_PUT
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumeFilteredEventsInline ()
specifier|public
name|void
name|testConsumeFilteredEventsInline
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"ignite-events:abc?events=EVT_CACHE_OBJECT_PUT"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test3"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:test3"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|IgniteCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|ignite
argument_list|()
operator|.
name|getOrCreateCache
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
comment|// Generate cache activity.
name|cache
operator|.
name|put
argument_list|(
literal|"abc"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"abc"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|eventTypes
init|=
name|receivedEventTypes
argument_list|(
literal|"mock:test3"
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|eventTypes
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EventType
operator|.
name|EVT_CACHE_OBJECT_PUT
argument_list|,
name|EventType
operator|.
name|EVT_CACHE_OBJECT_PUT
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|receivedEventTypes (String mockEndpoint)
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|receivedEventTypes
parameter_list|(
name|String
name|mockEndpoint
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|eventTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|getMockEndpoint
argument_list|(
name|mockEndpoint
argument_list|)
operator|.
name|getExchanges
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|Exchange
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Event
operator|.
name|class
argument_list|)
operator|.
name|type
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|eventTypes
return|;
block|}
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|After
DECL|method|stopAllRoutes ()
specifier|public
name|void
name|stopAllRoutes
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Route
name|route
range|:
name|context
operator|.
name|getRoutes
argument_list|()
control|)
block|{
if|if
condition|(
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|getRouteStatus
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
name|ServiceStatus
operator|.
name|Started
condition|)
block|{
return|return;
block|}
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resetMocks
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|IgniteConfiguration
name|createConfiguration
parameter_list|()
block|{
name|IgniteConfiguration
name|config
init|=
operator|new
name|IgniteConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setIncludeEventTypes
argument_list|(
name|EventType
operator|.
name|EVTS_ALL_MINUS_METRIC_UPDATE
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

