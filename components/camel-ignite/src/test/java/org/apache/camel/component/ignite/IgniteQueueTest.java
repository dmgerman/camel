begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|queue
operator|.
name|IgniteQueueComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|queue
operator|.
name|IgniteQueueEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
operator|.
name|queue
operator|.
name|IgniteQueueOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|cache
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|configuration
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_class
DECL|class|IgniteQueueTest
specifier|public
class|class
name|IgniteQueueTest
extends|extends
name|AbstractIgniteTest
block|{
annotation|@
name|Override
DECL|method|getScheme ()
specifier|protected
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"ignite-queue"
return|;
block|}
annotation|@
name|Override
DECL|method|createComponent ()
specifier|protected
name|AbstractIgniteComponent
name|createComponent
parameter_list|()
block|{
return|return
name|IgniteQueueComponent
operator|.
name|fromConfiguration
argument_list|(
name|createConfiguration
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testOperations ()
specifier|public
name|void
name|testOperations
parameter_list|()
block|{
name|boolean
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=ADD"
argument_list|,
literal|"hello"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|result
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=CONTAINS"
argument_list|,
literal|"hello"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|result
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=REMOVE"
argument_list|,
literal|"hello"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|result
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=CONTAINS"
argument_list|,
literal|"hello"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testOperations2 ()
specifier|public
name|void
name|testOperations2
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=ADD"
argument_list|,
literal|"hello"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// SIZE
name|int
name|size
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=SIZE"
argument_list|,
literal|"hello"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|size
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toRetain
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|toRetain
operator|.
name|add
argument_list|(
literal|"hello"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// RETAIN_ALL
name|boolean
name|retained
init|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"ignite-queue:abc?operation=CLEAR"
argument_list|,
name|toRetain
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_QUEUE_OPERATION
argument_list|,
name|IgniteQueueOperation
operator|.
name|RETAIN_ALL
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|retained
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// SIZE
name|size
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=SIZE"
argument_list|,
literal|"hello"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|size
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|50
argument_list|)
expr_stmt|;
comment|// ITERATOR
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=ITERATOR"
argument_list|,
literal|"hello"
argument_list|,
name|Iterator
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|Iterators
operator|.
name|toArray
argument_list|(
name|iterator
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|toRetain
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
comment|// ARRAY
name|String
index|[]
name|array
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=ARRAY"
argument_list|,
literal|"hello"
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|array
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|toRetain
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
comment|// CLEAR
name|Object
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=CLEAR"
argument_list|,
literal|"hello"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SIZE
name|size
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=SIZE"
argument_list|,
literal|"hello"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|size
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRetainSingle ()
specifier|public
name|void
name|testRetainSingle
parameter_list|()
block|{
comment|// Fill data.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=ADD"
argument_list|,
literal|"hello"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|boolean
name|retained
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=RETAIN_ALL"
argument_list|,
literal|"hello10"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|retained
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// ARRAY
name|String
index|[]
name|array
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=ARRAY"
argument_list|,
literal|"hello"
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|array
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"hello10"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCollectionsAsCacheObject ()
specifier|public
name|void
name|testCollectionsAsCacheObject
parameter_list|()
block|{
comment|// Fill data.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=ADD"
argument_list|,
literal|"hello"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// Add the set.
name|Set
argument_list|<
name|String
argument_list|>
name|toAdd
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"hello101"
argument_list|,
literal|"hello102"
argument_list|,
literal|"hello103"
argument_list|)
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=ADD&treatCollectionsAsCacheObjects=true"
argument_list|,
name|toAdd
argument_list|)
expr_stmt|;
comment|// Size must be 101, not 103.
name|int
name|size
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=SIZE"
argument_list|,
literal|"hello"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|size
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|toAdd
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Check whether the Set contains the Set.
name|boolean
name|contains
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=CONTAINS&treatCollectionsAsCacheObjects=true"
argument_list|,
name|toAdd
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|contains
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Delete the Set.
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=REMOVE&treatCollectionsAsCacheObjects=true"
argument_list|,
name|toAdd
argument_list|)
expr_stmt|;
comment|// Size must be 100 again.
name|size
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:abc?operation=SIZE"
argument_list|,
literal|"hello"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|size
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|toAdd
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithConfiguration ()
specifier|public
name|void
name|testWithConfiguration
parameter_list|()
block|{
name|CollectionConfiguration
name|configuration
init|=
operator|new
name|CollectionConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|PARTITIONED
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|(
name|JndiRegistry
operator|.
name|class
argument_list|)
operator|.
name|bind
argument_list|(
literal|"config"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|IgniteQueueEndpoint
name|igniteEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"ignite-queue:abc?operation=ADD&configuration=#config"
argument_list|,
name|IgniteQueueEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|igniteEndpoint
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|,
name|configuration
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|igniteEndpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoundedQueueAndOtherOperations ()
specifier|public
name|void
name|testBoundedQueueAndOtherOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Fill data.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=ADD&capacity=100"
argument_list|,
literal|"hello"
operator|+
name|i
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"hello"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: Unfortunately the behaviour of IgniteQueue doesn't adhere to the overridden ADD method. It should return an Exception.
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=ADD&capacity=100"
argument_list|,
literal|"hello101"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=OFFER&capacity=100"
argument_list|,
literal|"hello101"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=PUT&capacity=100"
argument_list|,
literal|"hello101"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait 2 seconds and check that the thread was blocked.
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// PEEK and ELEMENT.
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=PEEK&capacity=100"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hello0"
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=ELEMENT&capacity=100"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hello0"
argument_list|)
expr_stmt|;
comment|// TAKE.
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=TAKE&capacity=100"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hello0"
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=SIZE&capacity=100"
argument_list|,
literal|null
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|99
argument_list|)
expr_stmt|;
comment|// Now drain.
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=DRAIN&capacity=100"
argument_list|,
literal|null
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|99
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=SIZE&capacity=100"
argument_list|,
literal|null
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=POLL&capacity=100"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// TAKE.
name|t
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=TAKE&capacity=100"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hello102"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Element was returned.
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=ADD&capacity=100"
argument_list|,
literal|"hello102"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// POLL with a timeout.
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite-queue:def?operation=POLL&timeoutMillis=1000&capacity=100"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
return|return
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|After
DECL|method|deleteQueues ()
specifier|public
name|void
name|deleteQueues
parameter_list|()
block|{
for|for
control|(
name|String
name|queueName
range|:
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|(
literal|"abc"
argument_list|)
control|)
block|{
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
name|queueName
argument_list|,
literal|0
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Bounded queues.
for|for
control|(
name|String
name|queueName
range|:
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|(
literal|"def"
argument_list|)
control|)
block|{
name|ignite
argument_list|()
operator|.
name|queue
argument_list|(
name|queueName
argument_list|,
literal|100
argument_list|,
operator|new
name|CollectionConfiguration
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

