begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ignite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ignite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|Ignite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|Ignition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ignite
operator|.
name|events
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_class
DECL|class|IgniteComputeTest
specifier|public
class|class
name|IgniteComputeTest
extends|extends
name|AbstractIgniteTest
block|{
DECL|field|ADDITIONAL_INSTANCES
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Ignite
argument_list|>
name|ADDITIONAL_INSTANCES
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|LISTENERS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|UUID
argument_list|>
name|LISTENERS
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testExecuteWithWrongPayload ()
specifier|public
name|void
name|testExecuteWithWrongPayload
parameter_list|()
block|{
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite:compute:abc?executionType=EXECUTE"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_CALLABLE
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|ObjectHelper
operator|.
name|getException
argument_list|(
name|RuntimeCamelException
operator|.
name|class
argument_list|,
name|e
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Ignite Compute endpoint with EXECUTE"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testCall ()
specifier|public
name|void
name|testCall
parameter_list|()
block|{
name|TestIgniteComputeResources
operator|.
name|COUNTER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Single Callable.
name|String
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite:compute:abc?executionType=CALL"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_CALLABLE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
comment|// Collection of Callables.
name|Object
index|[]
name|callables
init|=
operator|new
name|Object
index|[
literal|5
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|callables
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_CALLABLE
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|colResult
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite:compute:abc?executionType=CALL"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|callables
argument_list|)
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|colResult
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"hello"
argument_list|,
literal|"hello"
argument_list|,
literal|"hello"
argument_list|,
literal|"hello"
argument_list|,
literal|"hello"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
comment|// Callables with a Reducer.
name|String
name|reduced
init|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"ignite:compute:abc?executionType=CALL"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|callables
argument_list|)
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_COMPUTE_REDUCER
argument_list|,
name|TestIgniteComputeResources
operator|.
name|STRING_JOIN_REDUCER
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|reduced
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hellohellohellohellohello"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRun ()
specifier|public
name|void
name|testRun
parameter_list|()
block|{
name|TestIgniteComputeResources
operator|.
name|COUNTER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Single Runnable.
name|Object
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite:compute:abc?executionType=RUN"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_RUNNABLE_COUNTER
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|TestIgniteComputeResources
operator|.
name|COUNTER
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Multiple Runnables.
name|Object
index|[]
name|runnables
init|=
operator|new
name|Object
index|[
literal|5
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|runnables
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_RUNNABLE_COUNTER
argument_list|)
expr_stmt|;
name|result
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite:compute:abc?executionType=RUN"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|runnables
argument_list|)
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|TestIgniteComputeResources
operator|.
name|COUNTER
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testBroadcast ()
specifier|public
name|void
name|testBroadcast
parameter_list|()
block|{
name|TestIgniteComputeResources
operator|.
name|COUNTER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|startAdditionalGridInstance
argument_list|()
expr_stmt|;
name|startAdditionalGridInstance
argument_list|()
expr_stmt|;
name|ignite
argument_list|()
operator|.
name|events
argument_list|()
operator|.
name|enableLocal
argument_list|(
name|EventType
operator|.
name|EVT_JOB_FINISHED
argument_list|)
expr_stmt|;
name|LISTENERS
operator|.
name|add
argument_list|(
name|ignite
argument_list|()
operator|.
name|events
argument_list|()
operator|.
name|remoteListen
argument_list|(
literal|null
argument_list|,
name|TestIgniteComputeResources
operator|.
name|EVENT_COUNTER
argument_list|,
name|EventType
operator|.
name|EVT_JOB_FINISHED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Single Runnable.
name|Object
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite:compute:abc?executionType=BROADCAST"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_RUNNABLE
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|TestIgniteComputeResources
operator|.
name|COUNTER
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Single Callable.
name|Collection
argument_list|<
name|String
argument_list|>
name|colResult
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"ignite:compute:abc?executionType=BROADCAST"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_CALLABLE
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|colResult
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|colResult
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"hello"
argument_list|,
literal|"hello"
argument_list|,
literal|"hello"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
comment|// Single Closure.
name|colResult
operator|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"ignite:compute:abc?executionType=BROADCAST"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_CLOSURE
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_COMPUTE_PARAMS
argument_list|,
literal|"Camel"
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|colResult
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|colResult
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"hello Camel"
argument_list|,
literal|"hello Camel"
argument_list|,
literal|"hello Camel"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecute ()
specifier|public
name|void
name|testExecute
parameter_list|()
block|{
name|TestIgniteComputeResources
operator|.
name|COUNTER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|startAdditionalGridInstance
argument_list|()
expr_stmt|;
name|startAdditionalGridInstance
argument_list|()
expr_stmt|;
name|ignite
argument_list|()
operator|.
name|events
argument_list|()
operator|.
name|enableLocal
argument_list|(
name|EventType
operator|.
name|EVT_JOB_RESULTED
argument_list|)
expr_stmt|;
name|LISTENERS
operator|.
name|add
argument_list|(
name|ignite
argument_list|()
operator|.
name|events
argument_list|()
operator|.
name|remoteListen
argument_list|(
literal|null
argument_list|,
name|TestIgniteComputeResources
operator|.
name|EVENT_COUNTER
argument_list|,
name|EventType
operator|.
name|EVT_JOB_RESULTED
argument_list|)
argument_list|)
expr_stmt|;
comment|// ComputeTask instance.
name|String
name|result
init|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"ignite:compute:abc?executionType=EXECUTE"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|COMPUTE_TASK
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_COMPUTE_PARAMS
argument_list|,
literal|10
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|splitToList
argument_list|(
name|result
argument_list|)
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"a0"
argument_list|,
literal|"a1"
argument_list|,
literal|"a2"
argument_list|,
literal|"a3"
argument_list|,
literal|"a4"
argument_list|,
literal|"a5"
argument_list|,
literal|"a6"
argument_list|,
literal|"a7"
argument_list|,
literal|"a8"
argument_list|,
literal|"a9"
argument_list|)
expr_stmt|;
comment|// ComputeTask class.
name|result
operator|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"ignite:compute:abc?executionType=EXECUTE"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|COMPUTE_TASK
operator|.
name|getClass
argument_list|()
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_COMPUTE_PARAMS
argument_list|,
literal|10
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|splitToList
argument_list|(
name|result
argument_list|)
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"a0"
argument_list|,
literal|"a1"
argument_list|,
literal|"a2"
argument_list|,
literal|"a3"
argument_list|,
literal|"a4"
argument_list|,
literal|"a5"
argument_list|,
literal|"a6"
argument_list|,
literal|"a7"
argument_list|,
literal|"a8"
argument_list|,
literal|"a9"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testApply ()
specifier|public
name|void
name|testApply
parameter_list|()
block|{
name|TestIgniteComputeResources
operator|.
name|COUNTER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Closure with a single parameter.
name|String
name|result
init|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"ignite:compute:abc?executionType=APPLY"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_CLOSURE
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_COMPUTE_PARAMS
argument_list|,
literal|"Camel"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hello Camel"
argument_list|)
expr_stmt|;
comment|// Closure with a Collection of parameters.
name|Collection
argument_list|<
name|String
argument_list|>
name|colResult
init|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"ignite:compute:abc?executionType=APPLY"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_CLOSURE
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_COMPUTE_PARAMS
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Camel1"
argument_list|,
literal|"Camel2"
argument_list|,
literal|"Camel3"
argument_list|)
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|colResult
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"hello Camel1"
argument_list|,
literal|"hello Camel2"
argument_list|,
literal|"hello Camel3"
argument_list|)
expr_stmt|;
comment|// Closure with a Collection of parameters and a Reducer.
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|of
argument_list|(
name|IgniteConstants
operator|.
name|IGNITE_COMPUTE_PARAMS
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Camel1"
argument_list|,
literal|"Camel2"
argument_list|,
literal|"Camel3"
argument_list|)
argument_list|,
name|IgniteConstants
operator|.
name|IGNITE_COMPUTE_REDUCER
argument_list|,
name|TestIgniteComputeResources
operator|.
name|STRING_JOIN_REDUCER
argument_list|)
decl_stmt|;
name|result
operator|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"ignite:compute:abc?executionType=APPLY"
argument_list|,
name|TestIgniteComputeResources
operator|.
name|TEST_CLOSURE
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hello Camel1hello Camel2hello Camel3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|startAdditionalGridInstance ()
specifier|private
name|void
name|startAdditionalGridInstance
parameter_list|()
block|{
name|ADDITIONAL_INSTANCES
operator|.
name|add
argument_list|(
name|Ignition
operator|.
name|start
argument_list|(
name|buildComponent
argument_list|()
operator|.
name|getIgniteConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopAdditionalIgniteInstances ()
specifier|public
name|void
name|stopAdditionalIgniteInstances
parameter_list|()
block|{
for|for
control|(
name|Ignite
name|ignite
range|:
name|ADDITIONAL_INSTANCES
control|)
block|{
name|ignite
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|ADDITIONAL_INSTANCES
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopRemoteListeners ()
specifier|public
name|void
name|stopRemoteListeners
parameter_list|()
block|{
for|for
control|(
name|UUID
name|uuid
range|:
name|LISTENERS
control|)
block|{
name|ignite
argument_list|()
operator|.
name|events
argument_list|()
operator|.
name|stopRemoteListen
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
name|LISTENERS
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

