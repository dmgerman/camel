begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.stream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|StreamProducer
specifier|public
class|class
name|StreamProducer
extends|extends
name|DefaultProducer
argument_list|<
name|StreamExchange
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StreamProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TYPES
specifier|private
specifier|static
specifier|final
name|String
name|TYPES
init|=
literal|"in,out,err"
decl_stmt|;
DECL|field|INVALID_URI
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_URI
init|=
literal|"Invalid uri, valid form: 'stream:{"
operator|+
name|TYPES
operator|+
literal|"}'"
decl_stmt|;
DECL|field|TYPES_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|TYPES_LIST
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TYPES
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
DECL|field|parameters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
DECL|method|StreamProducer (Endpoint<StreamExchange> endpoint, String uri, Map parameters)
specifier|public
name|StreamProducer
parameter_list|(
name|Endpoint
argument_list|<
name|StreamExchange
argument_list|>
name|endpoint
parameter_list|,
name|String
name|uri
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|validateUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"### stream producer created"
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange ex)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|ex
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|parameters
operator|.
name|get
argument_list|(
literal|"delay"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|"delay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"out"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateUri (String uri)
specifier|private
name|void
name|validateUri
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|s
init|=
name|uri
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|INVALID_URI
argument_list|)
throw|;
block|}
name|String
index|[]
name|t
init|=
name|s
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|"\\?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|INVALID_URI
argument_list|)
throw|;
block|}
name|this
operator|.
name|uri
operator|=
name|t
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|TYPES_LIST
operator|.
name|contains
argument_list|(
name|this
operator|.
name|uri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|INVALID_URI
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

