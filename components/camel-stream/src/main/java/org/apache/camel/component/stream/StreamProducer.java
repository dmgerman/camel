begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.stream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Producer that can write to streams  */
end_comment

begin_class
DECL|class|StreamProducer
specifier|public
class|class
name|StreamProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StreamProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TYPES
specifier|private
specifier|static
specifier|final
name|String
name|TYPES
init|=
literal|"out,err,file,header,url"
decl_stmt|;
DECL|field|INVALID_URI
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_URI
init|=
literal|"Invalid uri, valid form: 'stream:{"
operator|+
name|TYPES
operator|+
literal|"}'"
decl_stmt|;
DECL|field|TYPES_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|TYPES_LIST
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TYPES
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|StreamEndpoint
name|endpoint
decl_stmt|;
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
DECL|field|outputStream
specifier|private
name|OutputStream
name|outputStream
decl_stmt|;
DECL|field|count
specifier|private
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|StreamProducer (StreamEndpoint endpoint, String uri)
specifier|public
name|StreamProducer
parameter_list|(
name|StreamEndpoint
name|endpoint
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|validateUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|closeStream
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|delay
argument_list|(
name|endpoint
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|openStream
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|writeToStream
argument_list|(
name|outputStream
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeStream
argument_list|(
name|exchange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|resolveStreamFromUrl ()
specifier|private
name|OutputStream
name|resolveStreamFromUrl
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|u
init|=
name|endpoint
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|u
argument_list|,
literal|"url"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"About to write to url: {}"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|URLConnection
name|c
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
return|return
name|c
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
DECL|method|resolveStreamFromFile ()
specifier|private
name|OutputStream
name|resolveStreamFromFile
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|endpoint
operator|.
name|getFileName
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|fileName
argument_list|,
literal|"fileName"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"About to write to file: {}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// will create a new file if missing or append to existing
name|f
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
return|return
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|resolveStreamFromHeader (Object o, Exchange exchange)
specifier|private
name|OutputStream
name|resolveStreamFromHeader
parameter_list|(
name|Object
name|o
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|CamelExchangeException
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|o
argument_list|)
return|;
block|}
DECL|method|delay (long ms)
specifier|private
name|void
name|delay
parameter_list|(
name|long
name|ms
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|ms
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Delaying {} millis"
argument_list|,
name|ms
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
DECL|method|writeToStream (OutputStream outputStream, Exchange exchange)
specifier|private
name|void
name|writeToStream
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
throws|,
name|CamelExchangeException
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Body is null, cannot write it to the stream."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if not a string then try as byte array first
if|if
condition|(
operator|!
operator|(
name|body
operator|instanceof
name|String
operator|)
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing as byte[]: {} to {}"
argument_list|,
name|bytes
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// okay now fallback to mandatory converterable to string
name|String
name|s
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Charset
name|charset
init|=
name|endpoint
operator|.
name|getCharset
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bw
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
name|writer
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing as text: {} to {} using encoding: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|body
block|,
name|outputStream
block|,
name|charset
block|}
argument_list|)
expr_stmt|;
block|}
name|bw
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|bw
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|bw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|openStream ()
specifier|private
name|void
name|openStream
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|outputStream
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|"out"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|outputStream
operator|=
name|System
operator|.
name|out
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"err"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|outputStream
operator|=
name|System
operator|.
name|err
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|outputStream
operator|=
name|resolveStreamFromFile
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"url"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|outputStream
operator|=
name|resolveStreamFromUrl
argument_list|()
expr_stmt|;
block|}
name|count
operator|.
name|set
argument_list|(
name|outputStream
operator|==
literal|null
condition|?
literal|0
else|:
name|endpoint
operator|.
name|getAutoCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opened stream '{}'"
argument_list|,
name|endpoint
operator|.
name|getEndpointKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|openStream (final Exchange exchange)
specifier|private
name|void
name|openStream
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|outputStream
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|"header"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|outputStream
operator|=
name|resolveStreamFromHeader
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"stream"
argument_list|)
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opened stream '{}'"
argument_list|,
name|endpoint
operator|.
name|getEndpointKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|openStream
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isDone (Exchange exchange)
specifier|private
name|Boolean
name|isDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|SPLIT_COMPLETE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|closeStream (Exchange exchange, boolean force)
specifier|private
name|void
name|closeStream
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|outputStream
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// never close a standard stream (system.out or system.err)
comment|// always close a 'header' stream (unless it's a system stream)
name|boolean
name|systemStream
init|=
name|outputStream
operator|==
name|System
operator|.
name|out
operator|||
name|outputStream
operator|==
name|System
operator|.
name|err
decl_stmt|;
name|boolean
name|headerStream
init|=
literal|"header"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|boolean
name|reachedLimit
init|=
name|endpoint
operator|.
name|getAutoCloseCount
argument_list|()
operator|>
literal|0
operator|&&
name|count
operator|.
name|decrementAndGet
argument_list|()
operator|<=
literal|0
decl_stmt|;
name|boolean
name|isDone
init|=
name|endpoint
operator|.
name|isCloseOnDone
argument_list|()
operator|&&
name|isDone
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|boolean
name|expiredStream
init|=
name|force
operator|||
name|headerStream
operator|||
name|isDone
operator|||
name|reachedLimit
decl_stmt|;
comment|// evaluation order is important!
comment|// never ever close a system stream
if|if
condition|(
operator|!
name|systemStream
operator|&&
name|expiredStream
condition|)
block|{
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outputStream
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed stream '{}'"
argument_list|,
name|endpoint
operator|.
name|getEndpointKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateUri (String uri)
specifier|private
name|void
name|validateUri
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|s
init|=
name|uri
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|INVALID_URI
argument_list|)
throw|;
block|}
name|String
index|[]
name|t
init|=
name|s
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|"\\?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|INVALID_URI
argument_list|)
throw|;
block|}
name|this
operator|.
name|uri
operator|=
name|t
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|uri
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|this
operator|.
name|uri
operator|=
name|this
operator|.
name|uri
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|TYPES_LIST
operator|.
name|contains
argument_list|(
name|this
operator|.
name|uri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|INVALID_URI
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

