begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xj
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xj
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Templates
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stax
operator|.
name|StAXResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stax
operator|.
name|StAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skyscreamer
operator|.
name|jsonassert
operator|.
name|JSONAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|diff
operator|.
name|Diff
import|;
end_import

begin_class
DECL|class|XJTestUtils
specifier|final
class|class
name|XJTestUtils
block|{
DECL|field|TRANSFORMER_FACTORY
specifier|private
specifier|static
specifier|final
name|TransformerFactory
name|TRANSFORMER_FACTORY
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
DECL|field|XSL_TEMPLATES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Templates
argument_list|>
name|XSL_TEMPLATES
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|JSON_FACTORY
specifier|private
specifier|static
specifier|final
name|JsonFactory
name|JSON_FACTORY
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
DECL|method|XJTestUtils ()
specifier|private
name|XJTestUtils
parameter_list|()
block|{     }
comment|/**      * creates an "identity" transformer      */
DECL|method|getTransformer ()
specifier|private
specifier|static
name|Transformer
name|getTransformer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Transformer
name|transformer
init|=
name|TRANSFORMER_FACTORY
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|setPrettyPrinting
argument_list|(
name|transformer
argument_list|)
expr_stmt|;
return|return
name|transformer
return|;
block|}
comment|/**      * creates a transformer with the given stylesheet      */
DECL|method|getTransformer (String xsl)
specifier|private
specifier|static
name|Transformer
name|getTransformer
parameter_list|(
name|String
name|xsl
parameter_list|)
throws|throws
name|TransformerException
block|{
specifier|final
name|Transformer
name|transformer
decl_stmt|;
if|if
condition|(
name|XSL_TEMPLATES
operator|.
name|containsKey
argument_list|(
name|xsl
argument_list|)
condition|)
block|{
name|transformer
operator|=
name|XSL_TEMPLATES
operator|.
name|get
argument_list|(
name|xsl
argument_list|)
operator|.
name|newTransformer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|InputStream
name|xslInputStream
init|=
name|XJTestUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|xsl
argument_list|)
decl_stmt|;
specifier|final
name|Templates
name|templates
init|=
name|TRANSFORMER_FACTORY
operator|.
name|newTemplates
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|xslInputStream
argument_list|)
argument_list|)
decl_stmt|;
name|XSL_TEMPLATES
operator|.
name|put
argument_list|(
name|xsl
argument_list|,
name|templates
argument_list|)
expr_stmt|;
name|transformer
operator|=
name|templates
operator|.
name|newTransformer
argument_list|()
expr_stmt|;
block|}
name|setPrettyPrinting
argument_list|(
name|transformer
argument_list|)
expr_stmt|;
return|return
name|transformer
return|;
block|}
DECL|method|setPrettyPrinting (Transformer transformer)
specifier|private
specifier|static
name|void
name|setPrettyPrinting
parameter_list|(
name|Transformer
name|transformer
parameter_list|)
block|{
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
literal|"{http://xml.apache.org/xslt}indent-amount"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
block|}
DECL|method|transformXml2JsonAndCompare (String xsl, String testName)
specifier|static
name|void
name|transformXml2JsonAndCompare
parameter_list|(
name|String
name|xsl
parameter_list|,
name|String
name|testName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|JsonGenerator
name|jsonGenerator
init|=
name|JSON_FACTORY
operator|.
name|createGenerator
argument_list|(
name|byteArrayOutputStream
argument_list|)
decl_stmt|;
specifier|final
name|XmlJsonStreamWriter
name|xmlStreamWriter
init|=
operator|new
name|XmlJsonStreamWriter
argument_list|(
name|jsonGenerator
argument_list|)
decl_stmt|;
specifier|final
name|StAXResult
name|stAXResult
init|=
operator|new
name|StAXResult
argument_list|(
name|xmlStreamWriter
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|inputFile
init|=
name|XJTestUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testName
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|testName
operator|+
literal|".xml not found"
argument_list|)
throw|;
block|}
specifier|final
name|InputStream
name|referenceFile
init|=
name|XJTestUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testName
operator|+
literal|".json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|referenceFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|testName
operator|+
literal|".json not found"
argument_list|)
throw|;
block|}
specifier|final
name|Transformer
name|transformer
decl_stmt|;
if|if
condition|(
name|xsl
operator|==
literal|null
condition|)
block|{
name|transformer
operator|=
name|getTransformer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|transformer
operator|=
name|getTransformer
argument_list|(
name|xsl
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|transformer
operator|.
name|transform
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|inputFile
argument_list|)
argument_list|,
name|stAXResult
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|result
init|=
name|byteArrayOutputStream
operator|.
name|toString
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
specifier|final
name|String
name|expected
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|referenceFile
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|result
init|=
name|byteArrayOutputStream
operator|.
name|toString
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|JSONAssert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
name|expected
argument_list|,
name|result
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|transformJson2XmlAndCompare (String xsl, String testName)
specifier|static
name|void
name|transformJson2XmlAndCompare
parameter_list|(
name|String
name|xsl
parameter_list|,
name|String
name|testName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|InputStream
name|inputFile
init|=
name|XJTestUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testName
operator|+
literal|".json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|testName
operator|+
literal|".json not found"
argument_list|)
throw|;
block|}
specifier|final
name|InputStream
name|referenceFile
init|=
name|XJTestUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testName
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|referenceFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|testName
operator|+
literal|".xml not found"
argument_list|)
throw|;
block|}
specifier|final
name|JsonParser
name|jsonParser
init|=
name|JSON_FACTORY
operator|.
name|createParser
argument_list|(
name|inputFile
argument_list|)
decl_stmt|;
specifier|final
name|XMLStreamReader
name|xmlStreamReader
init|=
operator|new
name|JsonXmlStreamReader
argument_list|(
name|jsonParser
argument_list|)
decl_stmt|;
specifier|final
name|StAXSource
name|stAXSource
init|=
operator|new
name|StAXSource
argument_list|(
name|xmlStreamReader
argument_list|)
decl_stmt|;
specifier|final
name|Transformer
name|transformer
decl_stmt|;
if|if
condition|(
name|xsl
operator|==
literal|null
condition|)
block|{
name|transformer
operator|=
name|getTransformer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|transformer
operator|=
name|getTransformer
argument_list|(
name|xsl
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|stAXSource
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|byteArrayOutputStream
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expected
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|referenceFile
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|result
init|=
name|byteArrayOutputStream
operator|.
name|toString
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|Input
operator|.
name|fromString
argument_list|(
name|expected
argument_list|)
argument_list|)
operator|.
name|withTest
argument_list|(
name|Input
operator|.
name|fromString
argument_list|(
name|result
argument_list|)
argument_list|)
operator|.
name|ignoreElementContentWhitespace
argument_list|()
operator|.
name|withNodeFilter
argument_list|(
name|toTest
lambda|->
block|{
if|if
condition|(
name|toTest
operator|instanceof
name|Comment
condition|)
block|{
specifier|final
name|Comment
name|comment
init|=
operator|(
name|Comment
operator|)
name|toTest
decl_stmt|;
specifier|final
name|String
name|text
init|=
name|comment
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
return|return
name|text
operator|==
literal|null
operator|||
operator|!
name|text
operator|.
name|contains
argument_list|(
literal|"License"
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
operator|.
name|checkForIdentical
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"\nExpected: "
operator|+
name|expected
operator|+
literal|"\n\nGot: "
operator|+
name|result
operator|+
literal|"\n\nDiff: "
operator|+
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

