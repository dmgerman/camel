begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xj
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xj
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExpectedBodyTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeTransformException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|builder
operator|.
name|xml
operator|.
name|XMLConverterHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stax
operator|.
name|StAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_class
DECL|class|XmlSourceHandlerFactoryImpl
specifier|public
class|class
name|XmlSourceHandlerFactoryImpl
implements|implements
name|SourceHandlerFactory
block|{
DECL|field|converter
specifier|private
name|XMLConverterHelper
name|converter
init|=
operator|new
name|XMLConverterHelper
argument_list|()
decl_stmt|;
DECL|field|isFailOnNullBody
specifier|private
name|boolean
name|isFailOnNullBody
init|=
literal|true
decl_stmt|;
DECL|method|setFailOnNullBody (boolean failOnNullBody)
specifier|public
name|void
name|setFailOnNullBody
parameter_list|(
name|boolean
name|failOnNullBody
parameter_list|)
block|{
name|isFailOnNullBody
operator|=
name|failOnNullBody
expr_stmt|;
block|}
DECL|method|isFailOnNullBody ()
specifier|public
name|boolean
name|isFailOnNullBody
parameter_list|()
block|{
return|return
name|isFailOnNullBody
return|;
block|}
annotation|@
name|Override
DECL|method|getSource (Exchange exchange)
specifier|public
name|Source
name|getSource
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// only convert to input stream if really needed
if|if
condition|(
name|isInputStreamNeeded
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|InputStream
name|is
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|getSource
argument_list|(
name|exchange
argument_list|,
name|is
argument_list|)
return|;
block|}
else|else
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
return|return
name|getSource
argument_list|(
name|exchange
argument_list|,
name|body
argument_list|)
return|;
block|}
block|}
comment|/**      * Checks whether we need an {@link InputStream} to access the message body.      *<p/>      * Depending on the content in the message body, we may not need to convert      * to {@link InputStream}.      *      * @param exchange the current exchange      * @return<tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.      */
DECL|method|isInputStreamNeeded (Exchange exchange)
specifier|protected
name|boolean
name|isInputStreamNeeded
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|body
operator|instanceof
name|InputStream
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|Source
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|String
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|Node
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|//there is a direct and hopefully optimized converter to Source
return|return
literal|false
return|;
block|}
comment|// yes an input stream is needed
return|return
literal|true
return|;
block|}
comment|/**      * Converts the inbound body to a {@link Source}, if the body is<b>not</b> already a {@link Source}.      *<p/>      * This implementation will prefer to source in the following order:      *<ul>      *<li>StAX - If StAX is allowed</li>      *<li>SAX - SAX as 2nd choice</li>      *<li>Stream - Stream as 3rd choice</li>      *<li>DOM - DOM as 4th choice</li>      *</ul>      */
DECL|method|getSource (Exchange exchange, Object body)
specifier|protected
name|Source
name|getSource
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|body
parameter_list|)
block|{
comment|// body may already be a source
if|if
condition|(
name|body
operator|instanceof
name|Source
condition|)
block|{
return|return
operator|(
name|Source
operator|)
name|body
return|;
block|}
name|Source
name|source
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
comment|// try StAX if enabled
name|source
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|StAXSource
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|// then try SAX
name|source
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|SAXSource
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|// then try stream
name|source
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|StreamSource
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|// and fallback to DOM
name|source
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|DOMSource
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
comment|// as the TypeConverterRegistry will look up source the converter differently if the type converter is loaded different
comment|// now we just put the call of source converter at last
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
name|TypeConverter
name|tc
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|!=
literal|null
condition|)
block|{
name|source
operator|=
name|tc
operator|.
name|convertTo
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isFailOnNullBody
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ExpectedBodyTypeException
argument_list|(
name|exchange
argument_list|,
name|Source
operator|.
name|class
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
name|source
operator|=
name|converter
operator|.
name|toDOMSource
argument_list|(
name|converter
operator|.
name|createDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
decl||
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeTransformException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|source
return|;
block|}
block|}
end_class

end_unit

