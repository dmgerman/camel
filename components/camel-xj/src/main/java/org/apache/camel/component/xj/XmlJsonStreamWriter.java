begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xj
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xj
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonToken
import|;
end_import

begin_comment
comment|/**  * XML Json bridge. Explicitly using StreamWriter and not XMLEventWriter because saxon wants that.  */
end_comment

begin_class
DECL|class|XmlJsonStreamWriter
specifier|public
class|class
name|XmlJsonStreamWriter
implements|implements
name|XMLStreamWriter
block|{
DECL|field|jsonGenerator
specifier|private
specifier|final
name|JsonGenerator
name|jsonGenerator
decl_stmt|;
comment|/**      * Root element of the internal tree      */
DECL|field|treeRoot
specifier|private
name|TreeElement
name|treeRoot
decl_stmt|;
comment|/**      * Reference to current "level-s" element      */
DECL|field|currentTreeElement
specifier|private
name|TreeElement
name|currentTreeElement
decl_stmt|;
comment|/**      * Creates a new XmlJsonStreamWriter instance      * @param jsonGenerator the {@link JsonGenerator} to use to write the json document      */
DECL|method|XmlJsonStreamWriter (JsonGenerator jsonGenerator)
specifier|public
name|XmlJsonStreamWriter
parameter_list|(
name|JsonGenerator
name|jsonGenerator
parameter_list|)
block|{
name|this
operator|.
name|jsonGenerator
operator|=
name|jsonGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStartElement (String localName)
specifier|public
name|void
name|writeStartElement
parameter_list|(
name|String
name|localName
parameter_list|)
block|{
name|writeStartElement
argument_list|(
literal|null
argument_list|,
name|localName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStartElement (String namespaceURI, String localName)
specifier|public
name|void
name|writeStartElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|writeStartElement
argument_list|(
literal|null
argument_list|,
name|localName
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStartElement (String prefix, String localName, String namespaceURI)
specifier|public
name|void
name|writeStartElement
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|currentTreeElement
argument_list|,
name|XMLStreamConstants
operator|.
name|START_ELEMENT
argument_list|,
name|localName
argument_list|)
decl_stmt|;
name|currentTreeElement
operator|.
name|addChild
argument_list|(
name|treeElement
argument_list|)
expr_stmt|;
name|currentTreeElement
operator|=
name|treeElement
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeEmptyElement (String namespaceURI, String localName)
specifier|public
name|void
name|writeEmptyElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|writeStartElement
argument_list|(
literal|null
argument_list|,
name|namespaceURI
argument_list|,
name|localName
argument_list|)
expr_stmt|;
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeEmptyElement (String prefix, String localName, String namespaceURI)
specifier|public
name|void
name|writeEmptyElement
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|localName
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeEmptyElement (String localName)
specifier|public
name|void
name|writeEmptyElement
parameter_list|(
name|String
name|localName
parameter_list|)
block|{
name|writeStartElement
argument_list|(
literal|null
argument_list|,
name|localName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeEndElement ()
specifier|public
name|void
name|writeEndElement
parameter_list|()
block|{
name|currentTreeElement
operator|.
name|writeEnd
argument_list|()
expr_stmt|;
name|currentTreeElement
operator|=
name|currentTreeElement
operator|.
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeEndDocument ()
specifier|public
name|void
name|writeEndDocument
parameter_list|()
throws|throws
name|XMLStreamException
block|{
try|try
block|{
name|treeRoot
operator|.
name|write
argument_list|(
name|jsonGenerator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|XMLStreamException
block|{
try|try
block|{
name|jsonGenerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|XMLStreamException
block|{
try|try
block|{
name|jsonGenerator
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeAttribute (String localName, String value)
specifier|public
name|void
name|writeAttribute
parameter_list|(
name|String
name|localName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|writeAttribute
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|localName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeAttribute (String prefix, String namespaceURI, String localName, String value)
specifier|public
name|void
name|writeAttribute
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|XJConstants
operator|.
name|NS_XJ
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|XJConstants
operator|.
name|TYPE_HINT_NAME
case|:
name|currentTreeElement
operator|.
name|setName
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return;
case|case
name|XJConstants
operator|.
name|TYPE_HINT_TYPE
case|:
name|currentTreeElement
operator|.
name|setJsonToken
argument_list|(
name|XJConstants
operator|.
name|TYPE_JSONTYPE_MAP
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return;
default|default:
return|return;
block|}
block|}
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|currentTreeElement
argument_list|,
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
argument_list|,
name|JsonToken
operator|.
name|VALUE_STRING
argument_list|,
name|localName
argument_list|)
decl_stmt|;
name|treeElement
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|currentTreeElement
operator|.
name|addChild
argument_list|(
name|treeElement
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeAttribute (String namespaceURI, String localName, String value)
specifier|public
name|void
name|writeAttribute
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|writeAttribute
argument_list|(
literal|null
argument_list|,
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNamespace (String prefix, String namespaceURI)
specifier|public
name|void
name|writeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
comment|// ignore event - we don't care
block|}
annotation|@
name|Override
DECL|method|writeDefaultNamespace (String namespaceURI)
specifier|public
name|void
name|writeDefaultNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
comment|// ignore event - we don't care
block|}
annotation|@
name|Override
DECL|method|writeComment (String data)
specifier|public
name|void
name|writeComment
parameter_list|(
name|String
name|data
parameter_list|)
block|{
comment|// ignore event - we don't care
block|}
annotation|@
name|Override
DECL|method|writeProcessingInstruction (String target)
specifier|public
name|void
name|writeProcessingInstruction
parameter_list|(
name|String
name|target
parameter_list|)
block|{
comment|// ignore event - we don't care
block|}
annotation|@
name|Override
DECL|method|writeProcessingInstruction (String target, String data)
specifier|public
name|void
name|writeProcessingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
block|{
comment|// ignore event - we don't care
block|}
annotation|@
name|Override
DECL|method|writeCData (String data)
specifier|public
name|void
name|writeCData
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|writeCharacters
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDTD (String dtd)
specifier|public
name|void
name|writeDTD
parameter_list|(
name|String
name|dtd
parameter_list|)
block|{
comment|// ignore event - we don't care
block|}
annotation|@
name|Override
DECL|method|writeEntityRef (String name)
specifier|public
name|void
name|writeEntityRef
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// ignore event - we don't care
block|}
annotation|@
name|Override
DECL|method|writeStartDocument ()
specifier|public
name|void
name|writeStartDocument
parameter_list|()
block|{
name|writeStartDocument
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStartDocument (String version)
specifier|public
name|void
name|writeStartDocument
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|writeStartDocument
argument_list|(
literal|null
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStartDocument (String encoding, String version)
specifier|public
name|void
name|writeStartDocument
parameter_list|(
name|String
name|encoding
parameter_list|,
name|String
name|version
parameter_list|)
block|{
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
literal|null
argument_list|,
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
argument_list|,
name|JsonToken
operator|.
name|NOT_AVAILABLE
argument_list|)
decl_stmt|;
name|this
operator|.
name|treeRoot
operator|=
name|treeElement
expr_stmt|;
name|this
operator|.
name|currentTreeElement
operator|=
name|treeElement
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeCharacters (String text)
specifier|public
name|void
name|writeCharacters
parameter_list|(
name|String
name|text
parameter_list|)
block|{
comment|// check for non coalescing read
specifier|final
name|List
argument_list|<
name|TreeElement
argument_list|>
name|childs
init|=
name|currentTreeElement
operator|.
name|childs
decl_stmt|;
if|if
condition|(
name|childs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|TreeElement
name|child
init|=
name|childs
operator|.
name|get
argument_list|(
name|childs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getXmlEvent
argument_list|()
operator|==
name|XMLStreamConstants
operator|.
name|CHARACTERS
condition|)
block|{
name|child
operator|.
name|appendValue
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|currentTreeElement
argument_list|,
name|XMLStreamConstants
operator|.
name|CHARACTERS
argument_list|,
name|JsonToken
operator|.
name|VALUE_STRING
argument_list|)
decl_stmt|;
name|treeElement
operator|.
name|setValue
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|currentTreeElement
operator|.
name|addChild
argument_list|(
name|treeElement
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeCharacters (char[] text, int start, int len)
specifier|public
name|void
name|writeCharacters
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|writeCharacters
argument_list|(
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPrefix (String uri)
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setPrefix (String prefix, String uri)
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
comment|// ignore - ATM we don't care
block|}
annotation|@
name|Override
DECL|method|setDefaultNamespace (String uri)
specifier|public
name|void
name|setDefaultNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// ignore - ATM we don't care
block|}
annotation|@
name|Override
DECL|method|getNamespaceContext ()
specifier|public
name|NamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|XJConstants
operator|.
name|UNSUPPORTED_OPERATION_EXCEPTION_MESSAGE
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setNamespaceContext (NamespaceContext context)
specifier|public
name|void
name|setNamespaceContext
parameter_list|(
name|NamespaceContext
name|context
parameter_list|)
block|{
comment|// ignore - ATM we don't care
block|}
annotation|@
name|Override
DECL|method|getProperty (String name)
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" unsupported"
argument_list|)
throw|;
block|}
comment|/**      * Class that represents an element of the internal tree      */
DECL|class|TreeElement
specifier|private
specifier|static
class|class
name|TreeElement
block|{
DECL|field|parent
specifier|private
name|TreeElement
name|parent
decl_stmt|;
DECL|field|childs
specifier|private
name|List
argument_list|<
name|TreeElement
argument_list|>
name|childs
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
DECL|field|xmlEvent
specifier|private
name|int
name|xmlEvent
decl_stmt|;
DECL|field|jsonToken
specifier|private
name|JsonToken
name|jsonToken
decl_stmt|;
DECL|method|TreeElement (TreeElement parent, int xmlEvent, String name)
name|TreeElement
parameter_list|(
name|TreeElement
name|parent
parameter_list|,
name|int
name|xmlEvent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|xmlEvent
operator|=
name|xmlEvent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|TreeElement (TreeElement parent, int xmlEvent, JsonToken jsonToken)
name|TreeElement
parameter_list|(
name|TreeElement
name|parent
parameter_list|,
name|int
name|xmlEvent
parameter_list|,
name|JsonToken
name|jsonToken
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|xmlEvent
operator|=
name|xmlEvent
expr_stmt|;
name|this
operator|.
name|jsonToken
operator|=
name|jsonToken
expr_stmt|;
block|}
DECL|method|TreeElement (TreeElement parent, int xmlEvent, JsonToken jsonToken, String name)
name|TreeElement
parameter_list|(
name|TreeElement
name|parent
parameter_list|,
name|int
name|xmlEvent
parameter_list|,
name|JsonToken
name|jsonToken
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|xmlEvent
operator|=
name|xmlEvent
expr_stmt|;
name|this
operator|.
name|jsonToken
operator|=
name|jsonToken
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getXmlEvent ()
name|int
name|getXmlEvent
parameter_list|()
block|{
return|return
name|this
operator|.
name|xmlEvent
return|;
block|}
DECL|method|addChild (TreeElement treeElement)
name|void
name|addChild
parameter_list|(
name|TreeElement
name|treeElement
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|childs
operator|==
name|Collections
operator|.
name|EMPTY_LIST
condition|)
block|{
name|this
operator|.
name|childs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|childs
operator|.
name|add
argument_list|(
name|treeElement
argument_list|)
expr_stmt|;
block|}
DECL|method|setJsonToken (JsonToken jsonToken)
name|void
name|setJsonToken
parameter_list|(
name|JsonToken
name|jsonToken
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|jsonToken
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|jsonToken
operator|=
name|jsonToken
expr_stmt|;
block|}
block|}
DECL|method|setName (String name)
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|setValue (String value)
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|appendValue (String value)
name|void
name|appendValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|+=
name|value
expr_stmt|;
block|}
DECL|method|writeEnd ()
name|void
name|writeEnd
parameter_list|()
block|{
if|if
condition|(
name|jsonToken
operator|==
literal|null
condition|)
block|{
comment|// no type hints
name|writeEndNoTypeHints
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// type hints given
name|writeEndHaveTypeHints
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeEndNoTypeHints ()
specifier|private
name|void
name|writeEndNoTypeHints
parameter_list|()
block|{
if|if
condition|(
name|xmlEvent
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
if|if
condition|(
name|childs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// empty root element
if|if
condition|(
name|this
operator|.
name|parent
operator|.
name|jsonToken
operator|==
name|JsonToken
operator|.
name|NOT_AVAILABLE
condition|)
block|{
name|jsonToken
operator|=
name|JsonToken
operator|.
name|START_OBJECT
expr_stmt|;
block|}
else|else
block|{
name|jsonToken
operator|=
name|JsonToken
operator|.
name|FIELD_NAME
expr_stmt|;
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|this
argument_list|,
operator|-
literal|1
argument_list|,
name|JsonToken
operator|.
name|VALUE_STRING
argument_list|)
decl_stmt|;
name|treeElement
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|addChild
argument_list|(
name|treeElement
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|childs
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|childs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|xmlEvent
operator|==
name|XMLStreamConstants
operator|.
name|CHARACTERS
condition|)
block|{
comment|// just character childs.
comment|// empty root element
if|if
condition|(
name|this
operator|.
name|parent
operator|.
name|jsonToken
operator|==
name|JsonToken
operator|.
name|NOT_AVAILABLE
condition|)
block|{
name|jsonToken
operator|=
name|JsonToken
operator|.
name|START_OBJECT
expr_stmt|;
specifier|final
name|TreeElement
name|child
init|=
name|childs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWhitespace
argument_list|(
name|child
operator|.
name|value
argument_list|)
condition|)
block|{
name|childs
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create new intermediary element
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|this
argument_list|,
operator|-
literal|1
argument_list|,
name|JsonToken
operator|.
name|FIELD_NAME
argument_list|,
name|XJConstants
operator|.
name|JSON_WRITER_MIXED_CONTENT_TEXT_KEY
argument_list|)
decl_stmt|;
name|treeElement
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|childs
operator|.
name|set
argument_list|(
name|childs
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
argument_list|,
name|treeElement
argument_list|)
expr_stmt|;
name|child
operator|.
name|parent
operator|=
name|treeElement
expr_stmt|;
block|}
block|}
else|else
block|{
name|jsonToken
operator|=
name|JsonToken
operator|.
name|FIELD_NAME
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// mixed content fixup.
specifier|final
name|Iterator
argument_list|<
name|TreeElement
argument_list|>
name|iterator
init|=
name|childs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TreeElement
name|element
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|jsonToken
operator|==
name|JsonToken
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
name|isWhitespace
argument_list|(
name|element
operator|.
name|value
argument_list|)
condition|)
block|{
comment|// remove element if is (ignorable-) whitespace
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// create new intermediary element
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|this
argument_list|,
operator|-
literal|1
argument_list|,
name|JsonToken
operator|.
name|FIELD_NAME
argument_list|,
name|element
operator|.
name|name
operator|!=
literal|null
condition|?
name|element
operator|.
name|name
else|:
name|XJConstants
operator|.
name|JSON_WRITER_MIXED_CONTENT_TEXT_KEY
argument_list|)
decl_stmt|;
name|treeElement
operator|.
name|addChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|childs
operator|.
name|set
argument_list|(
name|childs
operator|.
name|indexOf
argument_list|(
name|element
argument_list|)
argument_list|,
name|treeElement
argument_list|)
expr_stmt|;
name|element
operator|.
name|parent
operator|=
name|treeElement
expr_stmt|;
name|element
operator|.
name|jsonToken
operator|=
name|JsonToken
operator|.
name|VALUE_STRING
expr_stmt|;
block|}
block|}
block|}
name|jsonToken
operator|=
name|JsonToken
operator|.
name|START_OBJECT
expr_stmt|;
name|wrapChildsInArrayIfNecessary
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"XMLEvent: "
operator|+
name|xmlEvent
operator|+
literal|"; Json Token: "
operator|+
name|jsonToken
argument_list|)
throw|;
block|}
block|}
DECL|method|writeEndHaveTypeHints ()
specifier|private
name|void
name|writeEndHaveTypeHints
parameter_list|()
block|{
switch|switch
condition|(
name|jsonToken
condition|)
block|{
case|case
name|VALUE_NULL
case|:
case|case
name|VALUE_STRING
case|:
case|case
name|VALUE_NUMBER_INT
case|:
case|case
name|VALUE_NUMBER_FLOAT
case|:
case|case
name|VALUE_TRUE
case|:
case|case
name|VALUE_FALSE
case|:
if|if
condition|(
name|childs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|this
argument_list|,
operator|-
literal|1
argument_list|,
name|jsonToken
argument_list|)
decl_stmt|;
name|treeElement
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|addChild
argument_list|(
name|treeElement
argument_list|)
expr_stmt|;
name|jsonToken
operator|=
name|JsonToken
operator|.
name|FIELD_NAME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|childs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|jsonToken
operator|=
name|jsonToken
expr_stmt|;
name|jsonToken
operator|=
name|JsonToken
operator|.
name|FIELD_NAME
expr_stmt|;
block|}
else|else
block|{
comment|// create FIELD childs if element contains text and attributes.
specifier|final
name|Iterator
argument_list|<
name|TreeElement
argument_list|>
name|iterator
init|=
name|childs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TreeElement
name|element
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isValueToken
argument_list|(
name|element
operator|.
name|jsonToken
argument_list|)
condition|)
block|{
if|if
condition|(
name|isWhitespace
argument_list|(
name|element
operator|.
name|value
argument_list|)
condition|)
block|{
comment|// remove element if is (ignorable-) whitespace
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// create new intermediary element
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|this
argument_list|,
operator|-
literal|1
argument_list|,
name|JsonToken
operator|.
name|FIELD_NAME
argument_list|,
name|element
operator|.
name|name
operator|!=
literal|null
condition|?
name|element
operator|.
name|name
else|:
name|XJConstants
operator|.
name|JSON_WRITER_MIXED_CONTENT_TEXT_KEY
argument_list|)
decl_stmt|;
name|treeElement
operator|.
name|addChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|childs
operator|.
name|set
argument_list|(
name|childs
operator|.
name|indexOf
argument_list|(
name|element
argument_list|)
argument_list|,
name|treeElement
argument_list|)
expr_stmt|;
name|element
operator|.
name|parent
operator|=
name|treeElement
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|xmlEvent
operator|==
name|XMLStreamConstants
operator|.
name|CHARACTERS
condition|)
block|{
name|element
operator|.
name|jsonToken
operator|=
name|jsonToken
expr_stmt|;
block|}
block|}
block|}
block|}
name|jsonToken
operator|=
name|JsonToken
operator|.
name|START_OBJECT
expr_stmt|;
name|wrapChildsInArrayIfNecessary
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|START_OBJECT
case|:
case|case
name|START_ARRAY
case|:
comment|// mixed content fixup.
specifier|final
name|Iterator
argument_list|<
name|TreeElement
argument_list|>
name|iterator
init|=
name|childs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TreeElement
name|element
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isValueToken
argument_list|(
name|element
operator|.
name|jsonToken
argument_list|)
condition|)
block|{
if|if
condition|(
name|isWhitespace
argument_list|(
name|element
operator|.
name|value
argument_list|)
condition|)
block|{
comment|// remove element if is (ignorable-) whitespace
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// create new intermediary element
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|this
argument_list|,
operator|-
literal|1
argument_list|,
name|JsonToken
operator|.
name|FIELD_NAME
argument_list|,
name|XJConstants
operator|.
name|JSON_WRITER_MIXED_CONTENT_TEXT_KEY
argument_list|)
decl_stmt|;
name|treeElement
operator|.
name|addChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|childs
operator|.
name|set
argument_list|(
name|childs
operator|.
name|indexOf
argument_list|(
name|element
argument_list|)
argument_list|,
name|treeElement
argument_list|)
expr_stmt|;
name|element
operator|.
name|parent
operator|=
name|treeElement
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|jsonToken
operator|!=
name|JsonToken
operator|.
name|START_ARRAY
condition|)
block|{
name|wrapChildsInArrayIfNecessary
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"XMLEvent: "
operator|+
name|xmlEvent
operator|+
literal|"; Json Token: "
operator|+
name|jsonToken
argument_list|)
throw|;
block|}
block|}
DECL|method|wrapChildsInArrayIfNecessary ()
specifier|private
name|void
name|wrapChildsInArrayIfNecessary
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TreeElement
argument_list|>
argument_list|>
name|childElementsMap
init|=
name|childs
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|o
lambda|->
name|o
operator|.
name|name
argument_list|,
name|HashMap
operator|::
operator|new
argument_list|,
name|Collectors
operator|.
name|toCollection
argument_list|(
name|LinkedHashSet
operator|::
operator|new
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// create arrays if element with the same name occurs more than once.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TreeElement
argument_list|>
argument_list|>
name|mapEntry
range|:
name|childElementsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|mapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|childElementsMap
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|jsonToken
operator|=
name|JsonToken
operator|.
name|START_ARRAY
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|TreeElement
name|treeElement
init|=
operator|new
name|TreeElement
argument_list|(
name|this
argument_list|,
operator|-
literal|1
argument_list|,
name|JsonToken
operator|.
name|START_ARRAY
argument_list|,
name|mapEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|treeElement
operator|.
name|childs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mapEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeElement
name|child
range|:
name|treeElement
operator|.
name|childs
control|)
block|{
name|child
operator|.
name|parent
operator|=
name|treeElement
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|TreeElement
argument_list|>
name|newChildList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|childs
operator|.
name|size
argument_list|()
operator|-
name|mapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|TreeElement
name|e
range|:
name|this
operator|.
name|childs
control|)
block|{
if|if
condition|(
operator|!
name|mapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|newChildList
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|childs
operator|=
name|newChildList
expr_stmt|;
name|childs
operator|.
name|add
argument_list|(
name|treeElement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|isWhitespace (String text)
specifier|private
name|boolean
name|isWhitespace
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|st
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|st
operator|<
name|len
operator|)
operator|&&
operator|(
name|text
operator|.
name|charAt
argument_list|(
name|st
argument_list|)
operator|<=
literal|' '
operator|)
condition|)
block|{
name|st
operator|++
expr_stmt|;
block|}
return|return
name|st
operator|==
name|len
return|;
block|}
DECL|method|isValueToken (JsonToken jsonToken)
specifier|private
name|boolean
name|isValueToken
parameter_list|(
name|JsonToken
name|jsonToken
parameter_list|)
block|{
return|return
name|jsonToken
operator|==
name|JsonToken
operator|.
name|VALUE_STRING
operator|||
name|jsonToken
operator|==
name|JsonToken
operator|.
name|VALUE_NUMBER_FLOAT
operator|||
name|jsonToken
operator|==
name|JsonToken
operator|.
name|VALUE_NUMBER_INT
operator|||
name|jsonToken
operator|==
name|JsonToken
operator|.
name|VALUE_TRUE
operator|||
name|jsonToken
operator|==
name|JsonToken
operator|.
name|VALUE_FALSE
operator|||
name|jsonToken
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
return|;
block|}
DECL|method|write (JsonGenerator jsonGenerator)
name|void
name|write
parameter_list|(
name|JsonGenerator
name|jsonGenerator
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|jsonToken
condition|)
block|{
case|case
name|NOT_AVAILABLE
case|:
break|break;
case|case
name|START_OBJECT
case|:
if|if
condition|(
name|parent
operator|.
name|jsonToken
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|jsonGenerator
operator|.
name|writeObjectFieldStart
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsonGenerator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|START_ARRAY
case|:
if|if
condition|(
name|parent
operator|.
name|jsonToken
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|jsonGenerator
operator|.
name|writeArrayFieldStart
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsonGenerator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|FIELD_NAME
case|:
if|if
condition|(
name|parent
operator|.
name|jsonToken
operator|!=
name|JsonToken
operator|.
name|START_ARRAY
condition|)
block|{
name|jsonGenerator
operator|.
name|writeFieldName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VALUE_STRING
case|:
name|jsonGenerator
operator|.
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|VALUE_NUMBER_INT
case|:
case|case
name|VALUE_NUMBER_FLOAT
case|:
case|case
name|VALUE_TRUE
case|:
case|case
name|VALUE_FALSE
case|:
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jsonGenerator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jsonGenerator
operator|.
name|writeRawValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VALUE_NULL
case|:
name|jsonGenerator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"XMLEvent: "
operator|+
name|xmlEvent
operator|+
literal|"; Json Token: "
operator|+
name|jsonToken
argument_list|)
throw|;
block|}
for|for
control|(
name|TreeElement
name|treeElement
range|:
name|childs
control|)
block|{
name|treeElement
operator|.
name|write
argument_list|(
name|jsonGenerator
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|jsonToken
condition|)
block|{
case|case
name|START_OBJECT
case|:
name|jsonGenerator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
case|case
name|START_ARRAY
case|:
name|jsonGenerator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
break|break;
case|case
name|VALUE_NULL
case|:
case|case
name|NOT_AVAILABLE
case|:
case|case
name|FIELD_NAME
case|:
case|case
name|VALUE_STRING
case|:
case|case
name|VALUE_NUMBER_INT
case|:
case|case
name|VALUE_NUMBER_FLOAT
case|:
case|case
name|VALUE_TRUE
case|:
case|case
name|VALUE_FALSE
case|:
comment|// nop;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"XMLEvent: "
operator|+
name|xmlEvent
operator|+
literal|"; Json Token: "
operator|+
name|jsonToken
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TreeElement{"
operator|+
literal|"name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|", value='"
operator|+
name|value
operator|+
literal|'\''
operator|+
literal|", xmlEvent="
operator|+
name|xmlEvent
operator|+
literal|", jsonToken="
operator|+
name|jsonToken
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

