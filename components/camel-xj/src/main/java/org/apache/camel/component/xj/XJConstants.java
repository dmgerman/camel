begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xj
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xj
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonToken
import|;
end_import

begin_class
DECL|class|XJConstants
specifier|public
specifier|final
class|class
name|XJConstants
block|{
comment|/**      * The namespace used by xj for typehints      */
DECL|field|NS_XJ
specifier|public
specifier|static
specifier|final
name|String
name|NS_XJ
init|=
literal|"http://camel.apache.org/component/xj"
decl_stmt|;
comment|/**      * The namespace prefix used by xj for typehints      */
DECL|field|NS_PREFIX_XJ
specifier|public
specifier|static
specifier|final
name|String
name|NS_PREFIX_XJ
init|=
literal|"xj"
decl_stmt|;
comment|/**      * Name typehint. Used to instruct xj to write a field with that name when converting to json. On the otherhand      * when converting to xml xj writes the json field name in that attribute.      */
DECL|field|TYPE_HINT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_HINT_NAME
init|=
literal|"name"
decl_stmt|;
comment|/**      * JSON-Type hint. Used to instruct xj of which type the output is when converting to json. Otherwise when converting      * to xml the attribute holds the type that was in the original json document.      */
DECL|field|TYPE_HINT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_HINT_TYPE
init|=
literal|"type"
decl_stmt|;
comment|/**      * Mapping from json-types to typehint names      */
DECL|field|JSONTYPE_TYPE_MAP
specifier|static
specifier|final
name|Map
argument_list|<
name|JsonToken
argument_list|,
name|String
argument_list|>
name|JSONTYPE_TYPE_MAP
decl_stmt|;
comment|/**      * Mapping from typehint names to json-types      */
DECL|field|TYPE_JSONTYPE_MAP
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JsonToken
argument_list|>
name|TYPE_JSONTYPE_MAP
decl_stmt|;
DECL|field|UNSUPPORTED_OPERATION_EXCEPTION_MESSAGE
specifier|static
specifier|final
name|String
name|UNSUPPORTED_OPERATION_EXCEPTION_MESSAGE
init|=
literal|"unsupported / not yet implemented"
decl_stmt|;
comment|/**      * Field name when xml contains mixed-content      */
DECL|field|JSON_WRITER_MIXED_CONTENT_TEXT_KEY
specifier|static
specifier|final
name|String
name|JSON_WRITER_MIXED_CONTENT_TEXT_KEY
init|=
literal|"#text"
decl_stmt|;
static|static
block|{
specifier|final
name|Map
argument_list|<
name|JsonToken
argument_list|,
name|String
argument_list|>
name|jsonTypeTypeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|START_OBJECT
argument_list|,
literal|"object"
argument_list|)
expr_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|END_OBJECT
argument_list|,
literal|"object"
argument_list|)
expr_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|START_ARRAY
argument_list|,
literal|"array"
argument_list|)
expr_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|END_ARRAY
argument_list|,
literal|"array"
argument_list|)
expr_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|VALUE_STRING
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|VALUE_NUMBER_INT
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|VALUE_NUMBER_FLOAT
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|VALUE_TRUE
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|VALUE_FALSE
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|jsonTypeTypeMap
operator|.
name|put
argument_list|(
name|JsonToken
operator|.
name|VALUE_NULL
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
name|JSONTYPE_TYPE_MAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|jsonTypeTypeMap
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JsonToken
argument_list|>
name|typeJsonTypeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|typeJsonTypeMap
operator|.
name|put
argument_list|(
literal|"object"
argument_list|,
name|JsonToken
operator|.
name|START_OBJECT
argument_list|)
expr_stmt|;
name|typeJsonTypeMap
operator|.
name|put
argument_list|(
literal|"array"
argument_list|,
name|JsonToken
operator|.
name|START_ARRAY
argument_list|)
expr_stmt|;
name|typeJsonTypeMap
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
name|JsonToken
operator|.
name|VALUE_STRING
argument_list|)
expr_stmt|;
name|typeJsonTypeMap
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|JsonToken
operator|.
name|VALUE_NUMBER_INT
argument_list|)
expr_stmt|;
name|typeJsonTypeMap
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|JsonToken
operator|.
name|VALUE_NUMBER_FLOAT
argument_list|)
expr_stmt|;
name|typeJsonTypeMap
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|JsonToken
operator|.
name|VALUE_TRUE
argument_list|)
expr_stmt|;
name|typeJsonTypeMap
operator|.
name|put
argument_list|(
literal|"null"
argument_list|,
name|JsonToken
operator|.
name|VALUE_NULL
argument_list|)
expr_stmt|;
name|TYPE_JSONTYPE_MAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|typeJsonTypeMap
argument_list|)
expr_stmt|;
block|}
DECL|method|XJConstants ()
specifier|private
name|XJConstants
parameter_list|()
block|{     }
block|}
end_class

end_unit

