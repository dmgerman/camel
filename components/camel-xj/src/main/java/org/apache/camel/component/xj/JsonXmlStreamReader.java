begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xj
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xj
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonToken
import|;
end_import

begin_comment
comment|/**  * XML Json bridge. Explicitly using XMLStreamReader and not XMLEventReader because saxon wants that.  */
end_comment

begin_class
DECL|class|JsonXmlStreamReader
specifier|public
class|class
name|JsonXmlStreamReader
implements|implements
name|XMLStreamReader
block|{
DECL|field|ERROR_MSG_NOT_IN_START_ELEMENT
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_MSG_NOT_IN_START_ELEMENT
init|=
literal|"Current event is not start element"
decl_stmt|;
DECL|field|ERROR_MSG_NOT_IN_START_END_ELEMENT
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_MSG_NOT_IN_START_END_ELEMENT
init|=
literal|"Current event is not start element"
decl_stmt|;
DECL|field|ERROR_MSG_NOT_IN_CHARACTERS
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_MSG_NOT_IN_CHARACTERS
init|=
literal|"Current event is not character"
decl_stmt|;
DECL|field|LOCATION
specifier|private
specifier|static
specifier|final
name|Location
name|LOCATION
init|=
operator|new
name|Location
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnNumber
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCharacterOffset
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPublicId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
DECL|field|jsonParser
specifier|private
specifier|final
name|JsonParser
name|jsonParser
decl_stmt|;
DECL|field|tokenStack
specifier|private
specifier|final
name|Deque
argument_list|<
name|StackElement
argument_list|>
name|tokenStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|eof
specifier|private
name|boolean
name|eof
decl_stmt|;
comment|/**      * Creates a new JsonXmlStreamReader instance      * @param jsonParser the {@link JsonParser} to use to read the json document.      */
DECL|method|JsonXmlStreamReader (JsonParser jsonParser)
specifier|public
name|JsonXmlStreamReader
parameter_list|(
name|JsonParser
name|jsonParser
parameter_list|)
block|{
name|this
operator|.
name|jsonParser
operator|=
name|jsonParser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProperty (String name)
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
try|try
block|{
specifier|final
name|StackElement
name|previousElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousElement
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|previousElement
operator|.
name|jsonToken
condition|)
block|{
case|case
name|VALUE_STRING
case|:
case|case
name|VALUE_NUMBER_INT
case|:
case|case
name|VALUE_NUMBER_FLOAT
case|:
case|case
name|VALUE_NULL
case|:
case|case
name|VALUE_TRUE
case|:
case|case
name|VALUE_FALSE
case|:
block|{
switch|switch
condition|(
name|previousElement
operator|.
name|xmlEvent
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
name|previousElement
operator|.
name|xmlEvent
operator|=
name|XMLStreamConstants
operator|.
name|CHARACTERS
expr_stmt|;
return|return
name|XMLStreamConstants
operator|.
name|CHARACTERS
return|;
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
name|removeStackElement
argument_list|(
name|previousElement
operator|.
name|jsonToken
argument_list|)
expr_stmt|;
name|removeStackElement
argument_list|(
name|JsonToken
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
assert|assert
name|tokenStack
operator|.
name|peek
argument_list|()
operator|!=
literal|null
assert|;
name|tokenStack
operator|.
name|peek
argument_list|()
operator|.
name|xmlEvent
operator|=
name|XMLStreamConstants
operator|.
name|END_ELEMENT
expr_stmt|;
return|return
name|XMLStreamConstants
operator|.
name|END_ELEMENT
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"illegal state"
argument_list|)
throw|;
block|}
block|}
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|eof
condition|)
block|{
return|return
name|END_DOCUMENT
return|;
block|}
name|JsonToken
name|currentToken
init|=
name|jsonParser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentToken
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"End of document"
argument_list|)
throw|;
block|}
name|StackElement
name|stackElement
init|=
operator|new
name|StackElement
argument_list|(
name|currentToken
argument_list|,
name|toXmlString
argument_list|(
name|jsonParser
operator|.
name|getCurrentName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|tokenStack
operator|.
name|push
argument_list|(
name|stackElement
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentToken
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentToken
operator|=
name|jsonParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|stackElement
operator|=
operator|new
name|StackElement
argument_list|(
name|currentToken
argument_list|,
name|toXmlString
argument_list|(
name|jsonParser
operator|.
name|getCurrentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tokenStack
operator|.
name|push
argument_list|(
name|stackElement
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|currentToken
condition|)
block|{
case|case
name|START_OBJECT
case|:
case|case
name|START_ARRAY
case|:
case|case
name|VALUE_STRING
case|:
case|case
name|VALUE_NUMBER_INT
case|:
case|case
name|VALUE_NUMBER_FLOAT
case|:
case|case
name|VALUE_NULL
case|:
case|case
name|VALUE_TRUE
case|:
case|case
name|VALUE_FALSE
case|:
name|stackElement
operator|.
name|xmlEvent
operator|=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
expr_stmt|;
return|return
name|XMLStreamConstants
operator|.
name|START_ELEMENT
return|;
case|case
name|END_OBJECT
case|:
name|removeStackElement
argument_list|(
name|JsonToken
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
name|removeStackElement
argument_list|(
name|JsonToken
operator|.
name|START_OBJECT
argument_list|)
expr_stmt|;
name|removeStackElement
argument_list|(
name|JsonToken
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|eof
operator|=
name|tokenStack
operator|.
name|size
argument_list|()
operator|==
literal|0
expr_stmt|;
return|return
name|XMLStreamConstants
operator|.
name|END_ELEMENT
return|;
case|case
name|END_ARRAY
case|:
name|removeStackElement
argument_list|(
name|JsonToken
operator|.
name|END_ARRAY
argument_list|)
expr_stmt|;
name|removeStackElement
argument_list|(
name|JsonToken
operator|.
name|START_ARRAY
argument_list|)
expr_stmt|;
name|removeStackElement
argument_list|(
name|JsonToken
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|eof
operator|=
name|tokenStack
operator|.
name|size
argument_list|()
operator|==
literal|0
expr_stmt|;
return|return
name|XMLStreamConstants
operator|.
name|END_ELEMENT
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"JsonToken: "
operator|+
name|currentToken
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|removeStackElement (JsonToken jsonToken)
specifier|private
name|void
name|removeStackElement
parameter_list|(
name|JsonToken
name|jsonToken
parameter_list|)
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|jsonToken
operator|!=
name|jsonToken
operator|)
condition|)
block|{
if|if
condition|(
name|stackElement
operator|!=
literal|null
operator|&&
name|jsonToken
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
operator|&&
operator|(
name|stackElement
operator|.
name|jsonToken
operator|==
name|JsonToken
operator|.
name|START_ARRAY
operator|)
condition|)
block|{
comment|// anonymous array
return|return;
block|}
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|&&
name|jsonToken
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
condition|)
block|{
comment|// root object / array
return|return;
block|}
specifier|final
name|String
name|stackElements
init|=
name|tokenStack
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|StackElement
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Stack element did not match expected ("
operator|+
name|jsonToken
operator|+
literal|") one. Stack:\n"
operator|+
name|stackElements
argument_list|)
throw|;
block|}
name|tokenStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|require (int type, String namespaceURI, String localName)
specifier|public
name|void
name|require
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|XJConstants
operator|.
name|UNSUPPORTED_OPERATION_EXCEPTION_MESSAGE
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getElementText ()
specifier|public
name|String
name|getElementText
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|XJConstants
operator|.
name|UNSUPPORTED_OPERATION_EXCEPTION_MESSAGE
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|nextTag ()
specifier|public
name|int
name|nextTag
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|int
name|evt
decl_stmt|;
do|do
block|{
name|evt
operator|=
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|evt
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|&&
name|evt
operator|!=
name|XMLStreamConstants
operator|.
name|END_ELEMENT
condition|)
do|;
return|return
name|evt
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|eof
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|XMLStreamException
block|{
try|try
block|{
name|jsonParser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNamespaceURI (String prefix)
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isStartElement ()
specifier|public
name|boolean
name|isStartElement
parameter_list|()
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|stackElement
operator|.
name|xmlEvent
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
return|;
block|}
annotation|@
name|Override
DECL|method|isEndElement ()
specifier|public
name|boolean
name|isEndElement
parameter_list|()
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|stackElement
operator|.
name|xmlEvent
operator|==
name|XMLStreamConstants
operator|.
name|END_ELEMENT
return|;
block|}
annotation|@
name|Override
DECL|method|isCharacters ()
specifier|public
name|boolean
name|isCharacters
parameter_list|()
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|stackElement
operator|.
name|xmlEvent
operator|==
name|XMLStreamConstants
operator|.
name|CHARACTERS
return|;
block|}
annotation|@
name|Override
DECL|method|isWhiteSpace ()
specifier|public
name|boolean
name|isWhiteSpace
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getAttributeValue (String namespaceURI, String localName)
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|XJConstants
operator|.
name|UNSUPPORTED_OPERATION_EXCEPTION_MESSAGE
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getAttributeCount ()
specifier|public
name|int
name|getAttributeCount
parameter_list|()
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_START_ELEMENT
argument_list|)
throw|;
block|}
return|return
name|stackElement
operator|.
name|getAttributeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAttributeName (int index)
specifier|public
name|QName
name|getAttributeName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_START_ELEMENT
argument_list|)
throw|;
block|}
return|return
name|stackElement
operator|.
name|getAttribute
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAttributeNamespace (int index)
specifier|public
name|String
name|getAttributeNamespace
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_START_ELEMENT
argument_list|)
throw|;
block|}
return|return
name|stackElement
operator|.
name|getAttribute
argument_list|(
name|index
argument_list|)
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAttributeLocalName (int index)
specifier|public
name|String
name|getAttributeLocalName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_START_ELEMENT
argument_list|)
throw|;
block|}
return|return
name|stackElement
operator|.
name|getAttribute
argument_list|(
name|index
argument_list|)
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAttributePrefix (int index)
specifier|public
name|String
name|getAttributePrefix
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_START_ELEMENT
argument_list|)
throw|;
block|}
return|return
name|stackElement
operator|.
name|getAttribute
argument_list|(
name|index
argument_list|)
operator|.
name|getPrefix
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAttributeType (int index)
specifier|public
name|String
name|getAttributeType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_START_ELEMENT
argument_list|)
throw|;
block|}
return|return
literal|"CDATA"
return|;
block|}
annotation|@
name|Override
DECL|method|getAttributeValue (int index)
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_START_ELEMENT
argument_list|)
throw|;
block|}
return|return
name|tokenStack
operator|.
name|peek
argument_list|()
operator|.
name|getAttributeValue
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isAttributeSpecified (int index)
specifier|public
name|boolean
name|isAttributeSpecified
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getNamespaceCount ()
specifier|public
name|int
name|getNamespaceCount
parameter_list|()
block|{
comment|// declare ns on root element
if|if
condition|(
name|tokenStack
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getNamespacePrefix (int index)
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|&&
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|END_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_START_END_ELEMENT
argument_list|)
throw|;
block|}
return|return
name|XJConstants
operator|.
name|NS_PREFIX_XJ
return|;
block|}
annotation|@
name|Override
DECL|method|getNamespaceURI (int index)
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
operator|(
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|&&
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|END_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_START_END_ELEMENT
argument_list|)
throw|;
block|}
return|return
name|XJConstants
operator|.
name|NS_XJ
return|;
block|}
annotation|@
name|Override
DECL|method|getNamespaceContext ()
specifier|public
name|NamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|XJConstants
operator|.
name|UNSUPPORTED_OPERATION_EXCEPTION_MESSAGE
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getEventType ()
specifier|public
name|int
name|getEventType
parameter_list|()
block|{
if|if
condition|(
name|eof
condition|)
block|{
return|return
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
return|;
block|}
if|if
condition|(
name|tokenStack
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
return|;
block|}
return|return
name|tokenStack
operator|.
name|peek
argument_list|()
operator|.
name|xmlEvent
return|;
block|}
annotation|@
name|Override
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|getTextCharacters
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTextCharacters ()
specifier|public
name|char
index|[]
name|getTextCharacters
parameter_list|()
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
operator|||
name|stackElement
operator|.
name|xmlEvent
operator|!=
name|XMLStreamConstants
operator|.
name|CHARACTERS
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ERROR_MSG_NOT_IN_CHARACTERS
argument_list|)
throw|;
block|}
try|try
block|{
name|setXmlText
argument_list|(
name|stackElement
argument_list|,
name|jsonParser
argument_list|)
expr_stmt|;
return|return
name|stackElement
operator|.
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTextCharacters (int sourceStart, char[] target, int targetStart, int length)
specifier|public
name|int
name|getTextCharacters
parameter_list|(
name|int
name|sourceStart
parameter_list|,
name|char
index|[]
name|target
parameter_list|,
name|int
name|targetStart
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|final
name|char
index|[]
name|text
init|=
name|getTextCharacters
argument_list|()
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|text
argument_list|,
name|sourceStart
argument_list|,
name|target
argument_list|,
name|targetStart
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|sourceStart
operator|+
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|getTextStart ()
specifier|public
name|int
name|getTextStart
parameter_list|()
block|{
comment|// always starts at 0 because we normalized the text in setXmlText();
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getTextLength ()
specifier|public
name|int
name|getTextLength
parameter_list|()
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
try|try
block|{
assert|assert
name|stackElement
operator|!=
literal|null
assert|;
name|setXmlText
argument_list|(
name|stackElement
argument_list|,
name|jsonParser
argument_list|)
expr_stmt|;
return|return
name|stackElement
operator|.
name|value
operator|.
name|length
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|setXmlText (StackElement stackElement, JsonParser jsonParser)
specifier|private
name|void
name|setXmlText
parameter_list|(
name|StackElement
name|stackElement
parameter_list|,
name|JsonParser
name|jsonParser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stackElement
operator|.
name|value
operator|==
literal|null
condition|)
block|{
name|stackElement
operator|.
name|value
operator|=
name|toXmlString
argument_list|(
name|jsonParser
operator|.
name|getTextCharacters
argument_list|()
argument_list|,
name|jsonParser
operator|.
name|getTextOffset
argument_list|()
argument_list|,
name|jsonParser
operator|.
name|getTextLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasText ()
specifier|public
name|boolean
name|hasText
parameter_list|()
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|stackElement
operator|.
name|xmlEvent
operator|==
name|XMLStreamConstants
operator|.
name|CHARACTERS
return|;
block|}
annotation|@
name|Override
DECL|method|getLocation ()
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
return|return
name|LOCATION
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
operator|new
name|QName
argument_list|(
literal|"object"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalName ()
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
literal|"object"
return|;
block|}
annotation|@
name|Override
DECL|method|hasName ()
specifier|public
name|boolean
name|hasName
parameter_list|()
block|{
specifier|final
name|StackElement
name|stackElement
init|=
name|tokenStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|stackElement
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|stackElement
operator|.
name|xmlEvent
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|||
name|stackElement
operator|.
name|xmlEvent
operator|==
name|XMLStreamConstants
operator|.
name|END_ELEMENT
return|;
block|}
annotation|@
name|Override
DECL|method|getNamespaceURI ()
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isStandalone ()
specifier|public
name|boolean
name|isStandalone
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|standaloneSet ()
specifier|public
name|boolean
name|standaloneSet
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getCharacterEncodingScheme ()
specifier|public
name|String
name|getCharacterEncodingScheme
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getPITarget ()
specifier|public
name|String
name|getPITarget
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getPIData ()
specifier|public
name|String
name|getPIData
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|toXmlString (String input)
specifier|private
name|String
name|toXmlString
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|input
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|char
index|[]
name|chars
init|=
name|input
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|toXmlString
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|chars
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toXmlString (char[] input, int offset, int length)
specifier|private
name|char
index|[]
name|toXmlString
parameter_list|(
name|char
index|[]
name|input
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|char
index|[
literal|0
index|]
return|;
block|}
name|char
index|[]
name|res
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
name|int
name|copied
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
operator|(
name|offset
operator|+
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|cur
init|=
name|input
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|cur
operator|<
literal|9
operator|)
operator|||
operator|(
name|cur
operator|>
literal|10
operator|&&
name|cur
operator|<
literal|13
operator|)
operator|||
operator|(
name|cur
operator|>
literal|13
operator|&&
name|cur
operator|<
literal|32
operator|)
condition|)
block|{
comment|// non valid xml characters
continue|continue;
block|}
name|res
index|[
name|copied
operator|++
index|]
operator|=
name|cur
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|res
argument_list|,
literal|0
argument_list|,
name|copied
argument_list|)
return|;
block|}
comment|/**      * Class that represents an element on the stack.      */
DECL|class|StackElement
specifier|private
specifier|static
class|class
name|StackElement
block|{
DECL|field|jsonToken
specifier|private
specifier|final
name|JsonToken
name|jsonToken
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|attributes
specifier|private
specifier|final
name|List
argument_list|<
name|QName
argument_list|>
name|attributes
decl_stmt|;
DECL|field|xmlEvent
specifier|private
name|int
name|xmlEvent
decl_stmt|;
DECL|field|value
specifier|private
name|char
index|[]
name|value
decl_stmt|;
DECL|method|StackElement (JsonToken jsonToken, String name)
name|StackElement
parameter_list|(
name|JsonToken
name|jsonToken
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|jsonToken
operator|=
name|jsonToken
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
specifier|final
name|QName
name|nameAttribute
init|=
operator|new
name|QName
argument_list|(
name|XJConstants
operator|.
name|NS_XJ
argument_list|,
name|XJConstants
operator|.
name|TYPE_HINT_NAME
argument_list|,
name|XJConstants
operator|.
name|NS_PREFIX_XJ
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|nameAttribute
argument_list|)
expr_stmt|;
block|}
specifier|final
name|QName
name|typeAttribute
init|=
operator|new
name|QName
argument_list|(
name|XJConstants
operator|.
name|NS_XJ
argument_list|,
name|XJConstants
operator|.
name|TYPE_HINT_TYPE
argument_list|,
name|XJConstants
operator|.
name|NS_PREFIX_XJ
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|typeAttribute
argument_list|)
expr_stmt|;
block|}
DECL|method|getAttributeCount ()
name|int
name|getAttributeCount
parameter_list|()
block|{
return|return
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getAttribute (int idx)
name|QName
name|getAttribute
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
DECL|method|getAttributeValue (int idx)
name|String
name|getAttributeValue
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
specifier|final
name|QName
name|attribute
init|=
name|getAttribute
argument_list|(
name|idx
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|attribute
operator|.
name|getLocalPart
argument_list|()
condition|)
block|{
case|case
name|XJConstants
operator|.
name|TYPE_HINT_NAME
case|:
return|return
name|this
operator|.
name|name
return|;
case|case
name|XJConstants
operator|.
name|TYPE_HINT_TYPE
case|:
return|return
name|XJConstants
operator|.
name|JSONTYPE_TYPE_MAP
operator|.
name|get
argument_list|(
name|this
operator|.
name|jsonToken
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown attribute "
operator|+
name|attribute
operator|.
name|getLocalPart
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"StackElement{"
operator|+
literal|"jsonToken="
operator|+
name|jsonToken
operator|+
literal|", name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|", xmlEvent="
operator|+
name|xmlEvent
operator|+
literal|", value="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|", attributes="
operator|+
name|attributes
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

