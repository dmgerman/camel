begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xj
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xj
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
operator|.
name|XsltBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
operator|.
name|XsltEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Transforms json/xml message back and forth using a XSLT.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed XJEndpoint"
argument_list|)
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"3.0.0"
argument_list|,
name|scheme
operator|=
literal|"xj"
argument_list|,
name|title
operator|=
literal|"XJ"
argument_list|,
name|syntax
operator|=
literal|"xj:resourceUri"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"transformation"
argument_list|)
DECL|class|XJEndpoint
specifier|public
class|class
name|XJEndpoint
extends|extends
name|XsltEndpoint
block|{
DECL|field|jsonFactory
specifier|private
specifier|final
name|JsonFactory
name|jsonFactory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Transform direction. Either XML2JSON or JSON2XML"
argument_list|)
DECL|field|transformDirection
specifier|private
name|TransformDirection
name|transformDirection
decl_stmt|;
DECL|method|XJEndpoint (String endpointUri, Component component)
specifier|public
name|XJEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Transform direction"
argument_list|)
DECL|method|getTransformDirection ()
specifier|public
name|TransformDirection
name|getTransformDirection
parameter_list|()
block|{
return|return
name|transformDirection
return|;
block|}
comment|/**      * Sets the transform direction.      */
DECL|method|setTransformDirection (TransformDirection transformDirection)
specifier|public
name|void
name|setTransformDirection
parameter_list|(
name|TransformDirection
name|transformDirection
parameter_list|)
block|{
name|this
operator|.
name|transformDirection
operator|=
name|transformDirection
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getResourceUri
argument_list|()
argument_list|)
condition|)
block|{
comment|// Using a stylesheet for "identity" transform is slow. but with a {@link TransformerFactory}
comment|// we can't get an identity transformer. But for now we leave it that way.
name|setResourceUri
argument_list|(
literal|"org/apache/camel/component/xj/identity.xsl"
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createXsltBuilder ()
specifier|protected
name|XsltBuilder
name|createXsltBuilder
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|XsltBuilder
name|xsltBuilder
init|=
name|super
operator|.
name|createXsltBuilder
argument_list|()
decl_stmt|;
name|xsltBuilder
operator|.
name|setAllowStAX
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// we rely on stax so always to true.
name|configureInput
argument_list|(
name|xsltBuilder
argument_list|)
expr_stmt|;
return|return
name|xsltBuilder
return|;
block|}
comment|/**      * Configures the source input depending on the {@link XJEndpoint#transformDirection}      */
DECL|method|configureInput (XsltBuilder xsltBuilder)
specifier|protected
name|void
name|configureInput
parameter_list|(
name|XsltBuilder
name|xsltBuilder
parameter_list|)
block|{
if|if
condition|(
name|TransformDirection
operator|.
name|JSON2XML
operator|==
name|this
operator|.
name|transformDirection
condition|)
block|{
specifier|final
name|JsonSourceHandlerFactoryImpl
name|sourceHandlerFactory
init|=
operator|new
name|JsonSourceHandlerFactoryImpl
argument_list|(
name|jsonFactory
argument_list|)
decl_stmt|;
name|sourceHandlerFactory
operator|.
name|setFailOnNullBody
argument_list|(
name|isFailOnNullBody
argument_list|()
argument_list|)
expr_stmt|;
name|xsltBuilder
operator|.
name|setSourceHandlerFactory
argument_list|(
name|sourceHandlerFactory
argument_list|)
expr_stmt|;
block|}
comment|// in the other direction, XML2JSON, the default org.apache.camel.component.xslt.XmlSourceHandlerFactoryImpl will be used
block|}
comment|/**      * Configures the result output depending on the {@link XJEndpoint#transformDirection}      */
DECL|method|configureOutput (XsltBuilder xsltBuilder, String output)
specifier|protected
name|void
name|configureOutput
parameter_list|(
name|XsltBuilder
name|xsltBuilder
parameter_list|,
name|String
name|output
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|this
operator|.
name|transformDirection
condition|)
block|{
case|case
name|JSON2XML
case|:
name|super
operator|.
name|configureOutput
argument_list|(
name|xsltBuilder
argument_list|,
name|output
argument_list|)
expr_stmt|;
break|break;
case|case
name|XML2JSON
case|:
name|configureJsonOutput
argument_list|(
name|xsltBuilder
argument_list|,
name|output
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown transformation direction: "
operator|+
name|this
operator|.
name|transformDirection
argument_list|)
throw|;
block|}
block|}
comment|/**      * Configures the result output when transforming to JSON      */
DECL|method|configureJsonOutput (XsltBuilder xsltBuilder, String output)
specifier|protected
name|void
name|configureJsonOutput
parameter_list|(
name|XsltBuilder
name|xsltBuilder
parameter_list|,
name|String
name|output
parameter_list|)
block|{
if|if
condition|(
literal|"DOM"
operator|.
name|equals
argument_list|(
name|output
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"DOM output not supported when transforming to json"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"bytes"
operator|.
name|equals
argument_list|(
name|output
argument_list|)
condition|)
block|{
name|xsltBuilder
operator|.
name|setResultHandlerFactory
argument_list|(
operator|new
name|JsonStreamResultHandlerFactory
argument_list|(
name|jsonFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|output
argument_list|)
condition|)
block|{
name|xsltBuilder
operator|.
name|setResultHandlerFactory
argument_list|(
operator|new
name|JsonFileResultHandlerFactory
argument_list|(
name|jsonFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xsltBuilder
operator|.
name|setResultHandlerFactory
argument_list|(
operator|new
name|JsonStringResultHandlerFactory
argument_list|(
name|jsonFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

