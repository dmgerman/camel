begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.master.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|master
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelClusterMember
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ha
operator|.
name|AbstractCamelClusterView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|JChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|PhysicalAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|ReceiverAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|View
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|TCP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|TCPPING
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|stack
operator|.
name|IpAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|InMemoryClusterView
specifier|public
class|class
name|InMemoryClusterView
extends|extends
name|AbstractCamelClusterView
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InMemoryClusterView
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|channel
specifier|private
name|JChannel
name|channel
decl_stmt|;
DECL|method|InMemoryClusterView (CamelClusterService cluster, String namespace)
specifier|protected
name|InMemoryClusterView
parameter_list|(
name|CamelClusterService
name|cluster
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaster ()
specifier|public
name|Optional
argument_list|<
name|CamelClusterMember
argument_list|>
name|getMaster
parameter_list|()
block|{
return|return
name|channel
operator|!=
literal|null
condition|?
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|InMemoryClusterMember
argument_list|(
name|channel
argument_list|)
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalMember ()
specifier|public
name|CamelClusterMember
name|getLocalMember
parameter_list|()
block|{
return|return
operator|new
name|LocalClusterMember
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMembers ()
specifier|public
name|List
argument_list|<
name|CamelClusterMember
argument_list|>
name|getMembers
parameter_list|()
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|getView
argument_list|()
operator|.
name|getMembers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ClusterMember
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|index
init|=
name|getClusterService
argument_list|()
operator|.
name|unwrap
argument_list|(
name|InMemoryClusterService
operator|.
name|class
argument_list|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
name|getClusterService
argument_list|()
operator|.
name|unwrap
argument_list|(
name|InMemoryClusterService
operator|.
name|class
argument_list|)
operator|.
name|getPorts
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|PhysicalAddress
argument_list|>
name|addresses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|port
range|:
name|ports
control|)
block|{
name|addresses
operator|.
name|add
argument_list|(
operator|new
name|IpAddress
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|channel
operator|=
operator|new
name|JChannel
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/jgroups-tcp.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|TCP
name|tcp
init|=
name|this
operator|.
name|channel
operator|.
name|getProtocolStack
argument_list|()
operator|.
name|findProtocol
argument_list|(
name|TCP
operator|.
name|class
argument_list|)
decl_stmt|;
name|tcp
operator|.
name|setBindAddress
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|tcp
operator|.
name|setBindPort
argument_list|(
name|ports
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|TCPPING
name|tcpping
init|=
name|this
operator|.
name|channel
operator|.
name|getProtocolStack
argument_list|()
operator|.
name|findProtocol
argument_list|(
name|TCPPING
operator|.
name|class
argument_list|)
decl_stmt|;
name|tcpping
operator|.
name|setInitialHosts
argument_list|(
name|addresses
argument_list|)
expr_stmt|;
name|this
operator|.
name|channel
operator|.
name|setReceiver
argument_list|(
operator|new
name|ReceiverAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|viewAccepted
parameter_list|(
name|View
name|view
parameter_list|)
block|{
name|fireLeadershipChangedEvent
argument_list|(
operator|new
name|ClusterMember
argument_list|(
name|view
operator|.
name|getMembers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|channel
operator|.
name|connect
argument_list|(
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ***********************************
comment|//
comment|// ***********************************
DECL|class|LocalClusterMember
specifier|private
class|class
name|LocalClusterMember
implements|implements
name|CamelClusterMember
block|{
annotation|@
name|Override
DECL|method|isMaster ()
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
if|if
condition|(
name|channel
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|Address
argument_list|>
name|members
init|=
name|channel
operator|.
name|view
argument_list|()
operator|.
name|getMembers
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|members
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"master={}, channel={}, members={}"
argument_list|,
name|members
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|channel
operator|.
name|getAddress
argument_list|()
argument_list|,
name|members
argument_list|)
expr_stmt|;
return|return
name|members
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|channel
operator|.
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|channel
operator|!=
literal|null
condition|?
name|channel
operator|.
name|getAddressAsString
argument_list|()
else|:
literal|"local"
return|;
block|}
block|}
DECL|class|ClusterMember
specifier|private
class|class
name|ClusterMember
implements|implements
name|CamelClusterMember
block|{
DECL|field|address
specifier|private
specifier|final
name|Address
name|address
decl_stmt|;
DECL|method|ClusterMember (Address address)
specifier|public
name|ClusterMember
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMaster ()
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Address
argument_list|>
name|members
init|=
name|channel
operator|.
name|view
argument_list|()
operator|.
name|getMembers
argument_list|()
decl_stmt|;
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|members
argument_list|)
condition|?
name|members
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|address
argument_list|)
else|:
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|channel
operator|.
name|getAddressAsString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

