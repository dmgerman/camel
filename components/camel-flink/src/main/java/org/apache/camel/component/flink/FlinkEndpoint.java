begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.flink
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|flink
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|flink
operator|.
name|api
operator|.
name|java
operator|.
name|DataSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|flink
operator|.
name|streaming
operator|.
name|api
operator|.
name|datastream
operator|.
name|DataStream
import|;
end_import

begin_comment
comment|/**  * The flink component can be used to send DataSet jobs to Apache Flink cluster.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.18.0"
argument_list|,
name|scheme
operator|=
literal|"flink"
argument_list|,
name|title
operator|=
literal|"Apache Flink"
argument_list|,
name|syntax
operator|=
literal|"flink:endpointType"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"hadoop"
argument_list|)
DECL|class|FlinkEndpoint
specifier|public
class|class
name|FlinkEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|endpointType
specifier|private
name|EndpointType
name|endpointType
decl_stmt|;
annotation|@
name|UriParam
DECL|field|dataSet
specifier|private
name|DataSet
name|dataSet
decl_stmt|;
annotation|@
name|UriParam
DECL|field|dataSetCallback
specifier|private
name|DataSetCallback
name|dataSetCallback
decl_stmt|;
annotation|@
name|UriParam
DECL|field|dataStream
specifier|private
name|DataStream
name|dataStream
decl_stmt|;
annotation|@
name|UriParam
DECL|field|dataStreamCallback
specifier|private
name|DataStreamCallback
name|dataStreamCallback
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|collect
specifier|private
name|boolean
name|collect
init|=
literal|true
decl_stmt|;
DECL|method|FlinkEndpoint (String endpointUri, FlinkComponent component, EndpointType endpointType)
specifier|public
name|FlinkEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|FlinkComponent
name|component
parameter_list|,
name|EndpointType
name|endpointType
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpointType
operator|=
name|endpointType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|dataSet
operator|==
literal|null
condition|)
block|{
name|dataSet
operator|=
name|getComponent
argument_list|()
operator|.
name|getDataSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dataSetCallback
operator|==
literal|null
condition|)
block|{
name|dataSetCallback
operator|=
name|getComponent
argument_list|()
operator|.
name|getDataSetCallback
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|endpointType
operator|==
name|EndpointType
operator|.
name|dataset
condition|)
block|{
return|return
operator|new
name|DataSetFlinkProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|endpointType
operator|==
name|EndpointType
operator|.
name|datastream
condition|)
block|{
return|return
operator|new
name|DataStreamFlinkProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Flink Component supports producer endpoints only."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|FlinkComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|FlinkComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
comment|/**      * Type of the endpoint (dataset, datastream).      */
DECL|method|setEndpointType (EndpointType endpointType)
specifier|public
name|void
name|setEndpointType
parameter_list|(
name|EndpointType
name|endpointType
parameter_list|)
block|{
name|this
operator|.
name|endpointType
operator|=
name|endpointType
expr_stmt|;
block|}
DECL|method|getDataSet ()
specifier|public
name|DataSet
name|getDataSet
parameter_list|()
block|{
return|return
name|dataSet
return|;
block|}
DECL|method|getDataStream ()
specifier|public
name|DataStream
name|getDataStream
parameter_list|()
block|{
return|return
name|dataStream
return|;
block|}
comment|/**      * DataSet to compute against.      */
DECL|method|setDataSet (DataSet ds)
specifier|public
name|void
name|setDataSet
parameter_list|(
name|DataSet
name|ds
parameter_list|)
block|{
name|this
operator|.
name|dataSet
operator|=
name|ds
expr_stmt|;
block|}
comment|/**      * DataStream to compute against.      */
DECL|method|setDataStream (DataStream ds)
specifier|public
name|void
name|setDataStream
parameter_list|(
name|DataStream
name|ds
parameter_list|)
block|{
name|this
operator|.
name|dataStream
operator|=
name|ds
expr_stmt|;
block|}
DECL|method|getDataSetCallback ()
specifier|public
name|DataSetCallback
name|getDataSetCallback
parameter_list|()
block|{
return|return
name|dataSetCallback
return|;
block|}
DECL|method|getDataStreamCallback ()
specifier|public
name|DataStreamCallback
name|getDataStreamCallback
parameter_list|()
block|{
return|return
name|dataStreamCallback
return|;
block|}
comment|/**      * Function performing action against a DataSet.      */
DECL|method|setDataSetCallback (DataSetCallback dataSetCallback)
specifier|public
name|void
name|setDataSetCallback
parameter_list|(
name|DataSetCallback
name|dataSetCallback
parameter_list|)
block|{
name|this
operator|.
name|dataSetCallback
operator|=
name|dataSetCallback
expr_stmt|;
block|}
comment|/**      * Function performing action against a DataStream.      */
DECL|method|setDataStreamCallback (DataStreamCallback dataStreamCallback)
specifier|public
name|void
name|setDataStreamCallback
parameter_list|(
name|DataStreamCallback
name|dataStreamCallback
parameter_list|)
block|{
name|this
operator|.
name|dataStreamCallback
operator|=
name|dataStreamCallback
expr_stmt|;
block|}
DECL|method|isCollect ()
specifier|public
name|boolean
name|isCollect
parameter_list|()
block|{
return|return
name|collect
return|;
block|}
comment|/**      * Indicates if results should be collected or counted.      */
DECL|method|setCollect (boolean collect)
specifier|public
name|void
name|setCollect
parameter_list|(
name|boolean
name|collect
parameter_list|)
block|{
name|this
operator|.
name|collect
operator|=
name|collect
expr_stmt|;
block|}
block|}
end_class

end_unit

