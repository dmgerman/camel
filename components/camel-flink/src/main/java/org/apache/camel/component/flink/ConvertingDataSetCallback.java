begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.flink
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|flink
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|flink
operator|.
name|api
operator|.
name|java
operator|.
name|DataSet
import|;
end_import

begin_class
DECL|class|ConvertingDataSetCallback
specifier|public
specifier|abstract
class|class
name|ConvertingDataSetCallback
parameter_list|<
name|T
parameter_list|>
implements|implements
name|DataSetCallback
argument_list|<
name|T
argument_list|>
block|{
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|payloadTypes
specifier|private
specifier|final
name|Class
index|[]
name|payloadTypes
decl_stmt|;
DECL|method|ConvertingDataSetCallback (CamelContext camelContext, Class... payloadTypes)
specifier|public
name|ConvertingDataSetCallback
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
modifier|...
name|payloadTypes
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|payloadTypes
operator|=
name|payloadTypes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onDataSet (DataSet ds, Object... payloads)
specifier|public
name|T
name|onDataSet
parameter_list|(
name|DataSet
name|ds
parameter_list|,
name|Object
modifier|...
name|payloads
parameter_list|)
block|{
if|if
condition|(
name|payloads
operator|.
name|length
operator|!=
name|payloadTypes
operator|.
name|length
condition|)
block|{
name|String
name|message
init|=
name|format
argument_list|(
literal|"Received %d payloads, but expected %d."
argument_list|,
name|payloads
operator|.
name|length
argument_list|,
name|payloadTypes
operator|.
name|length
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payloads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payloads
index|[
name|i
index|]
operator|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|payloadTypes
index|[
name|i
index|]
argument_list|,
name|payloads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|doOnDataSet
argument_list|(
name|ds
argument_list|,
name|payloads
argument_list|)
return|;
block|}
DECL|method|doOnDataSet (DataSet ds, Object... payloads)
specifier|public
specifier|abstract
name|T
name|doOnDataSet
parameter_list|(
name|DataSet
name|ds
parameter_list|,
name|Object
modifier|...
name|payloads
parameter_list|)
function_decl|;
block|}
end_class

end_unit

