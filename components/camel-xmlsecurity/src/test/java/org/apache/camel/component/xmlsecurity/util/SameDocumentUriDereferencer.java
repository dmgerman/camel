begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|URIDereferencer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|URIReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|URIReferenceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|XMLCryptoContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dom
operator|.
name|DOMCryptoContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dom
operator|.
name|DOMURIReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignatureFactory
import|;
end_import

begin_comment
comment|/**  * URI Dereferencer which allows only same document URI references via ids.  */
end_comment

begin_class
DECL|class|SameDocumentUriDereferencer
specifier|public
class|class
name|SameDocumentUriDereferencer
implements|implements
name|URIDereferencer
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|URIDereferencer
name|INSTANCE
init|=
operator|new
name|SameDocumentUriDereferencer
argument_list|()
decl_stmt|;
DECL|method|getInstance ()
specifier|public
specifier|static
name|URIDereferencer
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
DECL|method|SameDocumentUriDereferencer ()
specifier|private
name|SameDocumentUriDereferencer
parameter_list|()
block|{
comment|// singelton
block|}
DECL|method|dereference (URIReference uriReference, XMLCryptoContext context)
specifier|public
name|Data
name|dereference
parameter_list|(
name|URIReference
name|uriReference
parameter_list|,
name|XMLCryptoContext
name|context
parameter_list|)
throws|throws
name|URIReferenceException
block|{
if|if
condition|(
name|uriReference
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Parameter 'uriReference' cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Parameter 'context' can notbe null."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|uriReference
operator|instanceof
name|DOMURIReference
operator|&&
name|context
operator|instanceof
name|DOMCryptoContext
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"This %s implementation supports the DOM XML mechanism only."
argument_list|,
name|URIDereferencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|uriString
init|=
name|uriReference
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|uriString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|URIReferenceException
argument_list|(
literal|"Cannot resolve a URI of value 'null'."
argument_list|)
throw|;
block|}
if|if
condition|(
name|uriString
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|uriString
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
name|uriString
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
operator|)
operator|||
name|uriString
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// same document uri
name|XMLSignatureFactory
name|fac
init|=
name|XMLSignatureFactory
operator|.
name|getInstance
argument_list|(
literal|"DOM"
argument_list|)
decl_stmt|;
return|return
name|fac
operator|.
name|getURIDereferencer
argument_list|()
operator|.
name|dereference
argument_list|(
name|uriReference
argument_list|,
name|context
argument_list|)
return|;
block|}
throw|throw
operator|new
name|URIReferenceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"URI reference %s not supported"
argument_list|,
name|uriString
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

