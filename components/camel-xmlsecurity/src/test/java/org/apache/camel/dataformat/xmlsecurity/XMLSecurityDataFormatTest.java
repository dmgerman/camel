begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xmlsecurity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xmlsecurity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|encryption
operator|.
name|XMLCipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test of the encryptXML data format.  */
end_comment

begin_class
DECL|class|XMLSecurityDataFormatTest
specifier|public
class|class
name|XMLSecurityDataFormatTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|XML_FRAGMENT
specifier|private
specifier|static
specifier|final
name|String
name|XML_FRAGMENT
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<cheesesites>"
operator|+
literal|"<netherlands>"
operator|+
literal|"<source>cow</source>"
operator|+
literal|"<cheese>gouda</cheese>"
operator|+
literal|"</netherlands>"
operator|+
literal|"<italy>"
operator|+
literal|"<source>cow</source>"
operator|+
literal|"<cheese>gorgonzola</cheese>"
operator|+
literal|"</italy>"
operator|+
literal|"<france>"
operator|+
literal|"<source>goat</source>"
operator|+
literal|"<cheese>brie</cheese>"
operator|+
literal|"</france>"
operator|+
literal|"</cheesesites>"
decl_stmt|;
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|XmlConverter
operator|.
name|OUTPUT_PROPERTIES_PREFIX
operator|+
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
DECL|method|sendText ()
specifier|private
name|void
name|sendText
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Set the property of the charset encoding
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|XML_FRAGMENT
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"xmlFragment: "
operator|+
name|XML_FRAGMENT
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncryption ()
specifier|private
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|resultEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:encrypted"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|sendText
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|resultEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Document
name|inDoc
init|=
name|getDocumentForInMessage
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logMessage
argument_list|(
name|exchange
argument_list|,
name|inDoc
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"The XML message has no encrypted data."
argument_list|,
name|hasEncryptedData
argument_list|(
name|inDoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecryption ()
specifier|private
name|void
name|testDecryption
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|resultEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:decrypted"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// verify that the message was encrypted before checking that it is decrypted
name|testEncryption
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|resultEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Document
name|inDoc
init|=
name|getDocumentForInMessage
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logMessage
argument_list|(
name|exchange
argument_list|,
name|inDoc
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"The XML message has encrypted data."
argument_list|,
name|hasEncryptedData
argument_list|(
name|inDoc
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that the decrypted message matches what was sent
name|XmlConverter
name|converter
init|=
operator|new
name|XmlConverter
argument_list|()
decl_stmt|;
name|String
name|xmlStr
init|=
name|converter
operator|.
name|toString
argument_list|(
name|inDoc
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|xmlStr
operator|.
name|equals
argument_list|(
name|XML_FRAGMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|hasEncryptedData (Document doc)
specifier|private
name|boolean
name|hasEncryptedData
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeList
name|nodeList
init|=
name|doc
operator|.
name|getElementsByTagNameNS
argument_list|(
literal|"http://www.w3.org/2001/04/xmlenc#"
argument_list|,
literal|"EncryptedData"
argument_list|)
decl_stmt|;
return|return
name|nodeList
operator|.
name|getLength
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|logMessage (Exchange exchange, Document inDoc)
specifier|private
name|void
name|logMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Document
name|inDoc
parameter_list|)
throws|throws
name|Exception
block|{
name|XmlConverter
name|converter
init|=
operator|new
name|XmlConverter
argument_list|()
decl_stmt|;
name|String
name|xmlStr
init|=
name|converter
operator|.
name|toString
argument_list|(
name|inDoc
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|xmlStr
argument_list|)
expr_stmt|;
block|}
DECL|method|getDocumentForInMessage (Exchange exchange)
specifier|private
name|Document
name|getDocumentForInMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|byte
index|[]
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
name|createDocumentfromInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|body
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|d
return|;
block|}
DECL|method|createDocumentfromInputStream (InputStream is)
specifier|private
name|Document
name|createDocumentfromInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
return|return
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|is
argument_list|)
return|;
block|}
comment|/*      * Encryption Tests      */
annotation|@
name|Test
DECL|method|testFullPayloadXMLEncryption ()
specifier|public
name|void
name|testFullPayloadXMLEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testEncryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialPayloadXMLContentEncryption ()
specifier|public
name|void
name|testPartialPayloadXMLContentEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/italy/cheese"
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testEncryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialPayloadMultiNodeXMLContentEncryption ()
specifier|public
name|void
name|testPartialPayloadMultiNodeXMLContentEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/*/cheese"
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testEncryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialPayloadXMLElementEncryptionWithKey ()
specifier|public
name|void
name|testPartialPayloadXMLElementEncryptionWithKey
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/france/cheese"
argument_list|,
literal|false
argument_list|,
literal|"Just another 24 Byte key"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testEncryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialPayloadXMLElementEncryptionWithKeyAndAlgorithm ()
specifier|public
name|void
name|testPartialPayloadXMLElementEncryptionWithKeyAndAlgorithm
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|bits128
init|=
block|{
operator|(
name|byte
operator|)
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0x09
block|,
operator|(
name|byte
operator|)
literal|0x0A
block|,
operator|(
name|byte
operator|)
literal|0x0B
block|,
operator|(
name|byte
operator|)
literal|0x0C
block|,
operator|(
name|byte
operator|)
literal|0x0D
block|,
operator|(
name|byte
operator|)
literal|0x0E
block|,
operator|(
name|byte
operator|)
literal|0x0F
block|,
operator|(
name|byte
operator|)
literal|0x10
block|,
operator|(
name|byte
operator|)
literal|0x11
block|,
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x13
block|,
operator|(
name|byte
operator|)
literal|0x14
block|,
operator|(
name|byte
operator|)
literal|0x15
block|,
operator|(
name|byte
operator|)
literal|0x16
block|,
operator|(
name|byte
operator|)
literal|0x17
block|}
decl_stmt|;
specifier|final
name|String
name|passCode
init|=
operator|new
name|String
argument_list|(
name|bits128
argument_list|)
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/netherlands"
argument_list|,
literal|false
argument_list|,
name|passCode
argument_list|,
name|XMLCipher
operator|.
name|AES_128
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testEncryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testFullPayloadAsymmetricKeyEncryption ()
specifier|public
name|void
name|testFullPayloadAsymmetricKeyEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStore
name|trustStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|trustStoreUrl
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"sender.ts"
argument_list|)
decl_stmt|;
name|trustStore
operator|.
name|load
argument_list|(
name|trustStoreUrl
operator|.
name|openStream
argument_list|()
argument_list|,
literal|"password"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|XMLSecurityDataFormat
name|xmlEncDataFormat
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|()
decl_stmt|;
name|xmlEncDataFormat
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|AES_256
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setTrustStore
argument_list|(
name|trustStore
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setTrustStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setRecipientKeyAlias
argument_list|(
literal|"recipient"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|(
name|xmlEncDataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testEncryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testPartialPayloadAsymmetricKeyEncryptionWithContextTruststoreProperties ()
specifier|public
name|void
name|testPartialPayloadAsymmetricKeyEncryptionWithContextTruststoreProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contextProps
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_TRUST_STORE_URL
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"sender.ts"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_TRUST_STORE_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/italy/cheese"
argument_list|,
literal|true
argument_list|,
literal|"recipient"
argument_list|,
name|XMLCipher
operator|.
name|AES_256
argument_list|,
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testEncryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testPartialPayloadAsymmetricKeyEncryptionWithExchangeRecipientAlias ()
specifier|public
name|void
name|testPartialPayloadAsymmetricKeyEncryptionWithExchangeRecipientAlias
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|resultEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:foo"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contextProps
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_TRUST_STORE_URL
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"sender.ts"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_TRUST_STORE_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_RECIPIENT_ALIAS
argument_list|,
literal|"recipient"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/italy/cheese"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|XMLCipher
operator|.
name|AES_256
argument_list|,
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testEncryption
argument_list|()
expr_stmt|;
block|}
comment|/*     * Decryption Tests     */
annotation|@
name|Test
DECL|method|testFullPayloadXMLDecryption ()
specifier|public
name|void
name|testFullPayloadXMLDecryption
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testDecryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialPayloadXMLContentDecryption ()
specifier|public
name|void
name|testPartialPayloadXMLContentDecryption
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/italy/cheese"
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/italy/cheese"
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testDecryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialPayloadMultiNodeXMLContentDecryption ()
specifier|public
name|void
name|testPartialPayloadMultiNodeXMLContentDecryption
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/*/cheese"
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/*/cheese"
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testDecryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialPayloadXMLElementDecryptionWithKey ()
specifier|public
name|void
name|testPartialPayloadXMLElementDecryptionWithKey
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/france/cheese"
argument_list|,
literal|false
argument_list|,
literal|"Just another 24 Byte key"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/france"
argument_list|,
literal|false
argument_list|,
literal|"Just another 24 Byte key"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testDecryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialPayloadXMLContentDecryptionWithKeyAndAlgorithm ()
specifier|public
name|void
name|testPartialPayloadXMLContentDecryptionWithKeyAndAlgorithm
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|bits128
init|=
block|{
operator|(
name|byte
operator|)
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0x09
block|,
operator|(
name|byte
operator|)
literal|0x0A
block|,
operator|(
name|byte
operator|)
literal|0x0B
block|,
operator|(
name|byte
operator|)
literal|0x0C
block|,
operator|(
name|byte
operator|)
literal|0x0D
block|,
operator|(
name|byte
operator|)
literal|0x0E
block|,
operator|(
name|byte
operator|)
literal|0x0F
block|,
operator|(
name|byte
operator|)
literal|0x10
block|,
operator|(
name|byte
operator|)
literal|0x11
block|,
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x13
block|,
operator|(
name|byte
operator|)
literal|0x14
block|,
operator|(
name|byte
operator|)
literal|0x15
block|,
operator|(
name|byte
operator|)
literal|0x16
block|,
operator|(
name|byte
operator|)
literal|0x17
block|}
decl_stmt|;
specifier|final
name|String
name|passCode
init|=
operator|new
name|String
argument_list|(
name|bits128
argument_list|)
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/italy"
argument_list|,
literal|true
argument_list|,
name|passCode
argument_list|,
name|XMLCipher
operator|.
name|AES_128
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/italy"
argument_list|,
literal|true
argument_list|,
name|passCode
argument_list|,
name|XMLCipher
operator|.
name|AES_128
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testDecryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testFullPayloadAsymmetricKeyDecryption ()
specifier|public
name|void
name|testFullPayloadAsymmetricKeyDecryption
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contextProps
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|// context properties for encryption
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_TRUST_STORE_URL
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"sender.ts"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_TRUST_STORE_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_RECIPIENT_ALIAS
argument_list|,
literal|"recipient"
argument_list|)
expr_stmt|;
comment|// context properties for decryption
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_KEY_STORE_URL
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"recipient.ks"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_KEY_STORE_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_KEY_STORE_ALIAS
argument_list|,
literal|"recipient"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|XMLCipher
operator|.
name|AES_256
argument_list|,
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|XMLCipher
operator|.
name|AES_256
argument_list|,
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testDecryption
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testPartialPayloadAsymmetricKeyDecryption ()
specifier|public
name|void
name|testPartialPayloadAsymmetricKeyDecryption
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contextProps
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|// context properties for encryption
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_TRUST_STORE_URL
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"sender.ts"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_TRUST_STORE_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_RECIPIENT_ALIAS
argument_list|,
literal|"recipient"
argument_list|)
expr_stmt|;
comment|// context properties for decryption
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_KEY_STORE_URL
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"recipient.ks"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_KEY_STORE_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|contextProps
operator|.
name|put
argument_list|(
name|XMLSecurityDataFormat
operator|.
name|XML_ENC_KEY_STORE_ALIAS
argument_list|,
literal|"recipient"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/italy"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|XMLCipher
operator|.
name|AES_256
argument_list|,
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|"//cheesesites/italy"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|XMLCipher
operator|.
name|AES_256
argument_list|,
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testDecryption
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

