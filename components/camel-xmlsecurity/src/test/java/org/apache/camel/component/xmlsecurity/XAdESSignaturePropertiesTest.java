begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|DigestMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|spec
operator|.
name|XPathFilterParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|DefaultXAdESSignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XAdESEncapsulatedPKIData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XAdESSignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|TestKeystore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|XmlSignatureTest
operator|.
name|checkThrownException
import|;
end_import

begin_class
DECL|class|XAdESSignaturePropertiesTest
specifier|public
class|class
name|XAdESSignaturePropertiesTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|NOT_EMPTY
specifier|private
specifier|static
specifier|final
name|String
name|NOT_EMPTY
init|=
literal|"NOT_EMPTY"
decl_stmt|;
DECL|field|payload
specifier|private
specifier|static
name|String
name|payload
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root xmlns=\"http://test/test\"><test>Test Message</test></root>"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|disableJMX
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"keyAccessorDefault"
argument_list|,
name|TestKeystore
operator|.
name|getKeyAccessor
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"xmlSignatureProperties"
argument_list|,
name|getXmlSignatureProperties
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns"
argument_list|,
literal|"http://test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|xpaths
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|XmlSignatureHelper
operator|.
name|getXpathFilter
argument_list|(
literal|"/ns:root/a/@ID"
argument_list|,
name|namespaceMap
argument_list|)
argument_list|)
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"xpathsToIdAttributes"
argument_list|,
name|xpaths
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilders ()
specifier|protected
name|RouteBuilder
index|[]
name|createRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:enveloped"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://xades?keyAccessor=#keyAccessorDefault&properties=#xmlSignatureProperties&parentLocalName=root&parentNamespace=http://test/test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:enveloping"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://xades?keyAccessor=#keyAccessorDefault&properties=#xmlSignatureProperties"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:emptySignatureId"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://xades?keyAccessor=#keyAccessorDefault&properties=#xmlSignatureProperties&signatureId="
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:detached"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://detached?keyAccessor=#keyAccessorDefault&xpathsToIdAttributes=#xpathsToIdAttributes&"
comment|//
operator|+
literal|"schemaResourceUri=org/apache/camel/component/xmlsecurity/Test.xsd&properties=#xmlSignatureProperties"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Test
DECL|method|envelopingAllParameters ()
specifier|public
name|void
name|envelopingAllParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|testEnveloping
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
name|getPrefix2NamespaceMap
argument_list|()
decl_stmt|;
name|String
name|pathToSignatureProperties
init|=
name|getPathToSignatureProperties
argument_list|()
decl_stmt|;
comment|// signing time
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningTime/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
name|NOT_EMPTY
argument_list|)
expr_stmt|;
comment|// signing certificate
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate/etsi:Cert/etsi:CertDigest/ds:DigestMethod/@Algorithm"
argument_list|,
name|prefix2Namespace
argument_list|,
name|DigestMethod
operator|.
name|SHA256
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate/etsi:Cert/etsi:CertDigest/ds:DigestValue/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
name|NOT_EMPTY
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate/etsi:Cert/etsi:IssuerSerial/ds:X509IssuerName/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
name|NOT_EMPTY
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate/etsi:Cert/etsi:IssuerSerial/ds:X509SerialNumber/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
name|NOT_EMPTY
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate/etsi:Cert/@URI"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"http://certuri"
argument_list|)
expr_stmt|;
comment|// signature policy
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyId/etsi:Identifier/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"1.2.840.113549.1.9.16.6.1"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyId/etsi:Identifier/@Qualifier"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"OIDAsURN"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyId/etsi:Description/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"invoice version 3.1"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyHash/ds:DigestMethod/@Algorithm"
argument_list|,
name|prefix2Namespace
argument_list|,
name|DigestMethod
operator|.
name|SHA256
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyHash/ds:DigestValue/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"Ohixl6upD6av8N7pEvDABhEL6hM="
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyQualifiers/etsi:SigPolicyQualifier[1]/etsi:SPURI/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"http://test.com/sig.policy.pdf"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyQualifiers/etsi:SigPolicyQualifier[1]/etsi:SPUserNotice/etsi:ExplicitText/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"display text"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyQualifiers/etsi:SigPolicyQualifier[2]/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"category B"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyId/etsi:DocumentationReferences/etsi:DocumentationReference[1]/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"http://test.com/policy.doc.ref1.txt"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId/etsi:SigPolicyId/etsi:DocumentationReferences/etsi:DocumentationReference[2]/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"http://test.com/policy.doc.ref2.txt"
argument_list|)
expr_stmt|;
comment|// production place
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignatureProductionPlace/etsi:City/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"Munich"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignatureProductionPlace/etsi:StateOrProvince/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"Bavaria"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignatureProductionPlace/etsi:PostalCode/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"80331"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignatureProductionPlace/etsi:CountryName/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"Germany"
argument_list|)
expr_stmt|;
comment|// signer role
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignerRole/etsi:ClaimedRoles/etsi:ClaimedRole[1]/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignerRole/etsi:ClaimedRoles/etsi:ClaimedRole[2]/TestRole/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"TestRole"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignerRole/etsi:CertifiedRoles/etsi:CertifiedRole/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"Ahixl6upD6av8N7pEvDABhEL6hM="
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignerRole/etsi:CertifiedRoles/etsi:CertifiedRole/@Encoding"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"http://uri.etsi.org/01903/v1.2.2#DER"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignerRole/etsi:CertifiedRoles/etsi:CertifiedRole/@Id"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"IdCertifiedRole"
argument_list|)
expr_stmt|;
name|String
name|pathToDataObjectProperties
init|=
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties/etsi:SignedProperties/etsi:SignedDataObjectProperties/"
decl_stmt|;
comment|//DataObjectFormat
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:DataObjectFormat/etsi:Description/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"invoice"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:DataObjectFormat/etsi:MimeType/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"text/xml"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:DataObjectFormat/etsi:ObjectIdentifier/etsi:Identifier/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"1.2.840.113549.1.9.16.6.2"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:DataObjectFormat/etsi:ObjectIdentifier/etsi:Identifier/@Qualifier"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"OIDAsURN"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:DataObjectFormat/etsi:ObjectIdentifier/etsi:Description/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"identifier desc"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:DataObjectFormat/etsi:ObjectIdentifier/etsi:DocumentationReferences/etsi:DocumentationReference[1]/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"http://test.com/dataobject.format.doc.ref1.txt"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:DataObjectFormat/etsi:ObjectIdentifier/etsi:DocumentationReferences/etsi:DocumentationReference[2]/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"http://test.com/dataobject.format.doc.ref2.txt"
argument_list|)
expr_stmt|;
comment|//commitment
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:CommitmentTypeIndication/etsi:CommitmentTypeId/etsi:Identifier/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"1.2.840.113549.1.9.16.6.4"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:CommitmentTypeIndication/etsi:CommitmentTypeId/etsi:Identifier/@Qualifier"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"OIDAsURI"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:CommitmentTypeIndication/etsi:CommitmentTypeId/etsi:Description/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"description for commitment type ID"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:CommitmentTypeIndication/etsi:CommitmentTypeId/etsi:DocumentationReferences/etsi:DocumentationReference[1]/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"http://test.com/commitment.ref1.txt"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:CommitmentTypeIndication/etsi:CommitmentTypeId/etsi:DocumentationReferences/etsi:DocumentationReference[2]/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"http://test.com/commitment.ref2.txt"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:CommitmentTypeIndication/etsi:CommitmentTypeQualifiers/etsi:CommitmentTypeQualifier[1]/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"commitment qualifier"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToDataObjectProperties
operator|+
literal|"etsi:CommitmentTypeIndication/etsi:CommitmentTypeQualifiers/etsi:CommitmentTypeQualifier[2]/C/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|noSigningTime ()
specifier|public
name|void
name|noSigningTime
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setAddSigningTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|testEnveloping
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
name|getPrefix2NamespaceMap
argument_list|()
decl_stmt|;
name|String
name|pathToSignatureProperties
init|=
name|getPathToSignatureProperties
argument_list|()
decl_stmt|;
name|checkNode
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningTime"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|noSigningCertificate ()
specifier|public
name|void
name|noSigningCertificate
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|newProps
init|=
operator|new
name|XAdESSignatureProperties
argument_list|()
decl_stmt|;
name|newProps
operator|.
name|setAddSigningTime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setProperties
argument_list|(
name|newProps
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|testEnveloping
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
name|getPrefix2NamespaceMap
argument_list|()
decl_stmt|;
name|String
name|pathToSignatureProperties
init|=
name|getPathToSignatureProperties
argument_list|()
decl_stmt|;
name|checkNode
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningTime"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNode
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|certificateChain ()
specifier|public
name|void
name|certificateChain
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|endpoint
operator|.
name|setProperties
argument_list|(
operator|new
name|CertChainXAdESSignatureProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|testEnveloping
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
name|getPrefix2NamespaceMap
argument_list|()
decl_stmt|;
name|String
name|pathToSignatureProperties
init|=
name|getPathToSignatureProperties
argument_list|()
decl_stmt|;
comment|// signing certificate
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate/etsi:Cert/etsi:CertDigest/ds:DigestMethod/@Algorithm"
argument_list|,
name|prefix2Namespace
argument_list|,
name|DigestMethod
operator|.
name|SHA256
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate/etsi:Cert/etsi:CertDigest/ds:DigestValue/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
name|NOT_EMPTY
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate/etsi:Cert/etsi:IssuerSerial/ds:X509IssuerName/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
name|NOT_EMPTY
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SigningCertificate/etsi:Cert/etsi:IssuerSerial/ds:X509SerialNumber/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
name|NOT_EMPTY
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|noPropertiesSpecified ()
specifier|public
name|void
name|noPropertiesSpecified
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|new
name|XAdESSignatureProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setAddSigningTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|testEnveloping
argument_list|()
decl_stmt|;
comment|// expecting no Qualifying Properties
name|checkNode
argument_list|(
name|doc
argument_list|,
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties"
argument_list|,
name|getPrefix2NamespaceMap
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|policyImplied ()
specifier|public
name|void
name|policyImplied
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setSignaturePolicy
argument_list|(
name|XAdESSignatureProperties
operator|.
name|SIG_POLICY_IMPLIED
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|testEnveloping
argument_list|()
decl_stmt|;
name|String
name|pathToSignatureProperties
init|=
name|getPathToSignatureProperties
argument_list|()
decl_stmt|;
name|checkNode
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyId"
argument_list|,
name|getPrefix2NamespaceMap
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNode
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier/etsi:SignaturePolicyImplied"
argument_list|,
name|getPrefix2NamespaceMap
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|policyNone ()
specifier|public
name|void
name|policyNone
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setSignaturePolicy
argument_list|(
name|XAdESSignatureProperties
operator|.
name|SIG_POLICY_NONE
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|testEnveloping
argument_list|()
decl_stmt|;
name|String
name|pathToSignatureProperties
init|=
name|getPathToSignatureProperties
argument_list|()
decl_stmt|;
name|checkNode
argument_list|(
name|doc
argument_list|,
name|pathToSignatureProperties
operator|+
literal|"etsi:SignaturePolicyIdentifier"
argument_list|,
name|getPrefix2NamespaceMap
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|allPropertiesEmpty ()
specifier|public
name|void
name|allPropertiesEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|new
name|XAdESSignatureProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setAddSigningTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeIdDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeIdQualifier
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifier
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifierDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifierQualifier
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatMimeType
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDigestAlgorithmForSigningCertificate
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignaturePolicy
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyIdDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyIdQualifier
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignaturePolicyDigestAlgorithm
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignaturePolicyDigestValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignatureProductionPlaceCity
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignatureProductionPlaceCountryName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignatureProductionPlacePostalCode
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignatureProductionPlaceStateOrProvince
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|testEnveloping
argument_list|()
decl_stmt|;
comment|// expecting no Qualifying Properties
name|checkNode
argument_list|(
name|doc
argument_list|,
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties"
argument_list|,
name|getPrefix2NamespaceMap
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|emptySignatureId ()
specifier|public
name|void
name|emptySignatureId
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|testEnveloping
argument_list|(
literal|"direct:emptySignatureId"
argument_list|)
decl_stmt|;
name|checkNode
argument_list|(
name|doc
argument_list|,
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties"
argument_list|,
name|getPrefix2NamespaceMap
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|prefixAndNamespace ()
specifier|public
name|void
name|prefixAndNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setPrefix
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setNamespace
argument_list|(
name|XAdESSignatureProperties
operator|.
name|HTTP_URI_ETSI_ORG_01903_V1_1_1
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeIdDescription
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeIdDocumentationReferences
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeIdQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifierDescription
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifierDocumentationReferences
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifierQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyIdDescription
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyIdDocumentationReferences
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyIdQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// the following lists must be set to empty because otherwise they would contain XML fragments with a wrong namespace
name|props
operator|.
name|setSigPolicyQualifiers
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignerClaimedRoles
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeQualifiers
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|testEnveloping
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|prefix2Namespace
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
name|XMLSignature
operator|.
name|XMLNS
argument_list|)
expr_stmt|;
name|prefix2Namespace
operator|.
name|put
argument_list|(
literal|"etsi"
argument_list|,
name|XAdESSignatureProperties
operator|.
name|HTTP_URI_ETSI_ORG_01903_V1_1_1
argument_list|)
expr_stmt|;
name|XPathExpression
name|expr
init|=
name|getXpath
argument_list|(
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties"
argument_list|,
name|prefix2Namespace
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|expr
operator|.
name|evaluate
argument_list|(
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|result
decl_stmt|;
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|node
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XAdESSignatureProperties
operator|.
name|HTTP_URI_ETSI_ORG_01903_V1_1_1
argument_list|,
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|headers ()
specifier|public
name|void
name|headers
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|header
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_PREFIX
argument_list|,
literal|"ns1"
argument_list|)
expr_stmt|;
name|header
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_NAMESPACE
argument_list|,
name|XAdESSignatureProperties
operator|.
name|HTTP_URI_ETSI_ORG_01903_V1_2_2
argument_list|)
expr_stmt|;
name|header
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_QUALIFYING_PROPERTIES_ID
argument_list|,
literal|"QualId"
argument_list|)
expr_stmt|;
name|header
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_SIGNED_DATA_OBJECT_PROPERTIES_ID
argument_list|,
literal|"ObjId"
argument_list|)
expr_stmt|;
name|header
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_SIGNED_SIGNATURE_PROPERTIES_ID
argument_list|,
literal|"SigId"
argument_list|)
expr_stmt|;
name|header
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_DATA_OBJECT_FORMAT_ENCODING
argument_list|,
literal|"base64"
argument_list|)
expr_stmt|;
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|// the following lists must be set to empty because otherwise they would contain XML fragments with a wrong namespace
name|props
operator|.
name|setSigPolicyQualifiers
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignerClaimedRoles
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeQualifiers
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|testEnveloping
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|header
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|prefix2Namespace
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
name|XMLSignature
operator|.
name|XMLNS
argument_list|)
expr_stmt|;
name|prefix2Namespace
operator|.
name|put
argument_list|(
literal|"etsi"
argument_list|,
name|XAdESSignatureProperties
operator|.
name|HTTP_URI_ETSI_ORG_01903_V1_2_2
argument_list|)
expr_stmt|;
name|XPathExpression
name|expr
init|=
name|getXpath
argument_list|(
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties"
argument_list|,
name|prefix2Namespace
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|expr
operator|.
name|evaluate
argument_list|(
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|result
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ns1"
argument_list|,
name|node
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XAdESSignatureProperties
operator|.
name|HTTP_URI_ETSI_ORG_01903_V1_2_2
argument_list|,
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties/@Id"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"QualId"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties/etsi:SignedProperties/etsi:SignedDataObjectProperties/@Id"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"ObjId"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties/etsi:SignedProperties/etsi:SignedSignatureProperties/@Id"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"SigId"
argument_list|)
expr_stmt|;
name|checkXpath
argument_list|(
name|doc
argument_list|,
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties/etsi:SignedProperties/etsi:SignedDataObjectProperties/etsi:DataObjectFormat/etsi:Encoding/text()"
argument_list|,
name|prefix2Namespace
argument_list|,
literal|"base64"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|enveloped ()
specifier|public
name|void
name|enveloped
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloped"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|detached ()
specifier|public
name|void
name|detached
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|detachedPayload
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|+
comment|//
literal|"<ns:root xmlns:ns=\"http://test\"><a ID=\"myID\"><b>bValue</b></a></ns:root>"
decl_stmt|;
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:detached"
argument_list|,
name|detachedPayload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|sigPolicyIdEmpty ()
specifier|public
name|void
name|sigPolicyIdEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|testExceptionSigPolicyIdMissing
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|sigPolicyIdNull ()
specifier|public
name|void
name|sigPolicyIdNull
parameter_list|()
throws|throws
name|Exception
block|{
name|testExceptionSigPolicyIdMissing
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testExceptionSigPolicyIdMissing (String value)
specifier|private
name|void
name|testExceptionSigPolicyIdMissing
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setSigPolicyId
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|payload
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|"The XAdES-EPES confguration is invalid. The signature policy identifier is missing."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|sigPolicyDigestEmpty ()
specifier|public
name|void
name|sigPolicyDigestEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|testExceptionSigPolicyDigestMissing
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|sigPolicyDigestNull ()
specifier|public
name|void
name|sigPolicyDigestNull
parameter_list|()
throws|throws
name|Exception
block|{
name|testExceptionSigPolicyDigestMissing
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testExceptionSigPolicyDigestMissing (String value)
specifier|private
name|void
name|testExceptionSigPolicyDigestMissing
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setSignaturePolicyDigestValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|payload
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|"The XAdES-EPES confguration is invalid. The digest value for the signature policy is missing."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|sigPolicyDigestAlgoEmpty ()
specifier|public
name|void
name|sigPolicyDigestAlgoEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|testExceptionSigPolicyDigestAlgoMissing
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|sigPolicyDigestAlgoNull ()
specifier|public
name|void
name|sigPolicyDigestAlgoNull
parameter_list|()
throws|throws
name|Exception
block|{
name|testExceptionSigPolicyDigestAlgoMissing
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testExceptionSigPolicyDigestAlgoMissing (String value)
specifier|private
name|void
name|testExceptionSigPolicyDigestAlgoMissing
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setSignaturePolicyDigestAlgorithm
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|payload
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|"The XAdES-EPES confguration is invalid. The digest algorithm for the signature policy is missing."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|invalidXmlFragmentForClaimedRole ()
specifier|public
name|void
name|invalidXmlFragmentForClaimedRole
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setSignerClaimedRoles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"<ClaimedRole>wrong XML fragment<ClaimedRole>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Element 'ClaimedRole' is not closed correctly
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|payload
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|"The XAdES confguration is invalid. The list of the claimed roles contains the invalid entry '<ClaimedRole>wrong XML fragment<ClaimedRole>'. An entry must either be a text or"
operator|+
literal|" an XML fragment with the root element 'ClaimedRole' with the namespace 'http://uri.etsi.org/01903/v1.3.2#'."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|invalidXmlFragmentForCommitmentTypeQualifier ()
specifier|public
name|void
name|invalidXmlFragmentForCommitmentTypeQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setCommitmentTypeQualifiers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"<CommitmentTypeQualifier>wrong XML fragment<CommitmentTypeQualifier>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// end tag is not correct
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|payload
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|"The XAdES confguration is invalid. The list of the commitment type qualifiers contains the invalid entry '<CommitmentTypeQualifier>wrong XML fragment<CommitmentTypeQualifier>'."
operator|+
literal|" An entry must either be a text or an XML fragment with the root element 'CommitmentTypeQualifier' with the namespace 'http://uri.etsi.org/01903/v1.3.2#'."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|invalidXmlFragmentForSigPolicyQualifier ()
specifier|public
name|void
name|invalidXmlFragmentForSigPolicyQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setSigPolicyQualifiers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"<SigPolicyQualifier>wrong XML fragment<SigPolicyQualifier>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// end tag is not correct
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|payload
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|"The XAdES confguration is invalid. The list of the signatue policy qualifiers contains the invalid entry '<SigPolicyQualifier>wrong XML fragment<SigPolicyQualifier>'."
operator|+
literal|" An entry must either be a text or an XML fragment with the root element 'SigPolicyQualifier' with the namespace 'http://uri.etsi.org/01903/v1.3.2#'."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|invalidNamespaceForTheRootElementInXmlFragmentForSigPolicyQualifier ()
specifier|public
name|void
name|invalidNamespaceForTheRootElementInXmlFragmentForSigPolicyQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|XmlSignerEndpoint
name|endpoint
init|=
name|getSignerEndpoint
argument_list|()
decl_stmt|;
name|XAdESSignatureProperties
name|props
init|=
operator|(
name|XAdESSignatureProperties
operator|)
name|endpoint
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setSigPolicyQualifiers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"<SigPolicyQualifier xmlns=\"http://invalid.com\">XML fragment with wrong namespace for root element</SigPolicyQualifier>"
argument_list|)
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|payload
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|"The XAdES confguration is invalid. The root element 'SigPolicyQualifier' of the provided XML fragment "
operator|+
literal|"'<SigPolicyQualifier xmlns=\"http://invalid.com\">XML fragment with wrong namespace for root element</SigPolicyQualifier>' has the invalid namespace 'http://invalid.com'."
operator|+
literal|" The correct namespace is 'http://uri.etsi.org/01903/v1.3.2#'."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|namespaceNull ()
specifier|public
name|void
name|namespaceNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setNamespace
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|signingCertificateURIsNull ()
specifier|public
name|void
name|signingCertificateURIsNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSigningCertificateURIs
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|sigPolicyInvalid ()
specifier|public
name|void
name|sigPolicyInvalid
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSignaturePolicy
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|sigPolicyIdDocumentationReferencesNull ()
specifier|public
name|void
name|sigPolicyIdDocumentationReferencesNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSigPolicyIdDocumentationReferences
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|sigPolicyIdDocumentationReferencesNullEntry ()
specifier|public
name|void
name|sigPolicyIdDocumentationReferencesNullEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSigPolicyIdDocumentationReferences
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|sigPolicyIdDocumentationReferencesEmptyEntry ()
specifier|public
name|void
name|sigPolicyIdDocumentationReferencesEmptyEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSigPolicyIdDocumentationReferences
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|dataObjectFormatIdentifierDocumentationReferencesNull ()
specifier|public
name|void
name|dataObjectFormatIdentifierDocumentationReferencesNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setDataObjectFormatIdentifierDocumentationReferences
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|dataObjectFormatIdentifierDocumentationReferencesNullEntry ()
specifier|public
name|void
name|dataObjectFormatIdentifierDocumentationReferencesNullEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setDataObjectFormatIdentifierDocumentationReferences
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|dataObjectFormatIdentifierDocumentationReferencesEmptyEntry ()
specifier|public
name|void
name|dataObjectFormatIdentifierDocumentationReferencesEmptyEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setDataObjectFormatIdentifierDocumentationReferences
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|signerClaimedRolesNull ()
specifier|public
name|void
name|signerClaimedRolesNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSignerClaimedRoles
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|signerClaimedRolesNullEntry ()
specifier|public
name|void
name|signerClaimedRolesNullEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSignerClaimedRoles
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|signerClaimedRolesEmptyEntry ()
specifier|public
name|void
name|signerClaimedRolesEmptyEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSignerClaimedRoles
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|signerCertifiedRolesNull ()
specifier|public
name|void
name|signerCertifiedRolesNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSignerCertifiedRoles
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|signerCertifiedRolesNullEntry ()
specifier|public
name|void
name|signerCertifiedRolesNullEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setSignerCertifiedRoles
argument_list|(
name|Collections
operator|.
expr|<
name|XAdESEncapsulatedPKIData
operator|>
name|singletonList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|commitmentTypeIdDocumentationReferencesNull ()
specifier|public
name|void
name|commitmentTypeIdDocumentationReferencesNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setCommitmentTypeIdDocumentationReferences
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|commitmentTypeIdDocumentationReferencesNullEntry ()
specifier|public
name|void
name|commitmentTypeIdDocumentationReferencesNullEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setCommitmentTypeIdDocumentationReferences
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|commitmentTypeIdDocumentationReferencesEmptyEntry ()
specifier|public
name|void
name|commitmentTypeIdDocumentationReferencesEmptyEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setCommitmentTypeIdDocumentationReferences
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|commitmentTypeQualifiersNull ()
specifier|public
name|void
name|commitmentTypeQualifiersNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setCommitmentTypeQualifiers
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|commitmentTypeQualifiersNullEntry ()
specifier|public
name|void
name|commitmentTypeQualifiersNullEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setCommitmentTypeQualifiers
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|commitmentTypeQualifiersEmptyEntry ()
specifier|public
name|void
name|commitmentTypeQualifiersEmptyEntry
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XAdESSignatureProperties
argument_list|()
operator|.
name|setCommitmentTypeQualifiers
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|singletonList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|//
end_comment

begin_function
DECL|method|getSignerEndpoint ()
specifier|private
name|XmlSignerEndpoint
name|getSignerEndpoint
parameter_list|()
block|{
return|return
operator|(
name|XmlSignerEndpoint
operator|)
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"xmlsecurity:sign://xades?keyAccessor=#keyAccessorDefault&properties=#xmlSignatureProperties"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getPathToSignatureProperties ()
specifier|private
name|String
name|getPathToSignatureProperties
parameter_list|()
block|{
return|return
literal|"/ds:Signature/ds:Object/etsi:QualifyingProperties/etsi:SignedProperties/etsi:SignedSignatureProperties/"
return|;
block|}
end_function

begin_function
DECL|method|getPrefix2NamespaceMap ()
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPrefix2NamespaceMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|prefix2Namespace
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
name|XMLSignature
operator|.
name|XMLNS
argument_list|)
expr_stmt|;
name|prefix2Namespace
operator|.
name|put
argument_list|(
literal|"etsi"
argument_list|,
name|XAdESSignatureProperties
operator|.
name|HTTP_URI_ETSI_ORG_01903_V1_3_2
argument_list|)
expr_stmt|;
return|return
name|prefix2Namespace
return|;
block|}
end_function

begin_function
DECL|method|testEnveloping ()
specifier|private
name|Document
name|testEnveloping
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|Exception
block|{
return|return
name|testEnveloping
argument_list|(
literal|"direct:enveloping"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|testEnveloping (String fromUri)
specifier|protected
name|Document
name|testEnveloping
parameter_list|(
name|String
name|fromUri
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|Exception
block|{
return|return
name|testEnveloping
argument_list|(
name|fromUri
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|testEnveloping (String fromUri, Map<String, Object> headers)
specifier|protected
name|Document
name|testEnveloping
parameter_list|(
name|String
name|fromUri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupMock
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
name|fromUri
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
name|getMessage
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|byte
index|[]
name|body
init|=
name|message
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|XmlSignatureHelper
operator|.
name|newDocumentBuilder
argument_list|(
literal|true
argument_list|)
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|body
argument_list|)
argument_list|)
decl_stmt|;
name|validateAgainstSchema
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
end_function

begin_function
DECL|method|setupMock ()
specifier|private
name|MockEndpoint
name|setupMock
parameter_list|()
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|mock
return|;
block|}
end_function

begin_function
DECL|method|getXmlSignatureProperties (String alias)
specifier|private
specifier|static
name|XmlSignatureProperties
name|getXmlSignatureProperties
parameter_list|(
name|String
name|alias
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|DefaultXAdESSignatureProperties
name|props
init|=
operator|new
name|DefaultXAdESSignatureProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setKeystore
argument_list|(
name|TestKeystore
operator|.
name|getKeyStore
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|props
operator|.
name|setAddSigningTime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDigestAlgorithmForSigningCertificate
argument_list|(
name|DigestMethod
operator|.
name|SHA256
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigningCertificateURIs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"http://certuri"
argument_list|)
argument_list|)
expr_stmt|;
comment|// policy
name|props
operator|.
name|setSignaturePolicy
argument_list|(
name|XAdESSignatureProperties
operator|.
name|SIG_POLICY_EXPLICIT_ID
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyId
argument_list|(
literal|"1.2.840.113549.1.9.16.6.1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyIdQualifier
argument_list|(
literal|"OIDAsURN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyIdDescription
argument_list|(
literal|"invoice version 3.1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignaturePolicyDigestAlgorithm
argument_list|(
name|DigestMethod
operator|.
name|SHA256
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignaturePolicyDigestValue
argument_list|(
literal|"Ohixl6upD6av8N7pEvDABhEL6hM="
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyQualifiers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<SigPolicyQualifier xmlns=\"http://uri.etsi.org/01903/v1.3.2#\"><SPURI>http://test.com/sig.policy.pdf</SPURI><SPUserNotice><ExplicitText>display text</ExplicitText>"
operator|+
literal|"</SPUserNotice></SigPolicyQualifier>"
block|,
literal|"category B"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSigPolicyIdDocumentationReferences
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"http://test.com/policy.doc.ref1.txt"
block|,
literal|"http://test.com/policy.doc.ref2.txt"
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// production place
name|props
operator|.
name|setSignatureProductionPlaceCity
argument_list|(
literal|"Munich"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignatureProductionPlaceCountryName
argument_list|(
literal|"Germany"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignatureProductionPlacePostalCode
argument_list|(
literal|"80331"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignatureProductionPlaceStateOrProvince
argument_list|(
literal|"Bavaria"
argument_list|)
expr_stmt|;
comment|//role
name|props
operator|.
name|setSignerClaimedRoles
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|,
literal|"<a:ClaimedRole xmlns:a=\"http://uri.etsi.org/01903/v1.3.2#\"><TestRole>TestRole</TestRole></a:ClaimedRole>"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setSignerCertifiedRoles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|XAdESEncapsulatedPKIData
argument_list|(
literal|"Ahixl6upD6av8N7pEvDABhEL6hM="
argument_list|,
literal|"http://uri.etsi.org/01903/v1.2.2#DER"
argument_list|,
literal|"IdCertifiedRole"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// data object format
name|props
operator|.
name|setDataObjectFormatDescription
argument_list|(
literal|"invoice"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatMimeType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifier
argument_list|(
literal|"1.2.840.113549.1.9.16.6.2"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifierQualifier
argument_list|(
literal|"OIDAsURN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifierDescription
argument_list|(
literal|"identifier desc"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setDataObjectFormatIdentifierDocumentationReferences
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"http://test.com/dataobject.format.doc.ref1.txt"
block|,
literal|"http://test.com/dataobject.format.doc.ref2.txt"
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//commitment
name|props
operator|.
name|setCommitmentTypeId
argument_list|(
literal|"1.2.840.113549.1.9.16.6.4"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeIdQualifier
argument_list|(
literal|"OIDAsURI"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeIdDescription
argument_list|(
literal|"description for commitment type ID"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeIdDocumentationReferences
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"http://test.com/commitment.ref1.txt"
block|,
literal|"http://test.com/commitment.ref2.txt"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setCommitmentTypeQualifiers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"commitment qualifier"
block|,
literal|"<c:CommitmentTypeQualifier xmlns:c=\"http://uri.etsi.org/01903/v1.3.2#\"><C>c</C></c:CommitmentTypeQualifier>"
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
end_function

begin_function
DECL|method|validateAgainstSchema (Document doc)
specifier|private
name|void
name|validateAgainstSchema
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|SchemaFactory
name|factory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|Source
name|schema1
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test-classes/org/apache/camel/component/xmlsecurity/xades/XAdES.xsd"
argument_list|)
argument_list|)
decl_stmt|;
name|Source
name|schema2
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test-classes/org/apache/camel/component/xmlsecurity/xades/xmldsig-core-schema.xsd"
argument_list|)
argument_list|)
decl_stmt|;
name|Schema
name|schema
init|=
name|factory
operator|.
name|newSchema
argument_list|(
operator|new
name|Source
index|[]
block|{
name|schema2
block|,
name|schema1
block|}
argument_list|)
decl_stmt|;
name|Validator
name|validator
init|=
name|schema
operator|.
name|newValidator
argument_list|()
decl_stmt|;
name|validator
operator|.
name|validate
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|checkXpath (Document doc, String xpathString, final Map<String, String> prefix2Namespace, String expectedResult)
specifier|static
name|void
name|checkXpath
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|xpathString
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
parameter_list|,
name|String
name|expectedResult
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|XPathExpression
name|expr
init|=
name|getXpath
argument_list|(
name|xpathString
argument_list|,
name|prefix2Namespace
argument_list|)
decl_stmt|;
name|String
name|result
init|=
operator|(
name|String
operator|)
name|expr
operator|.
name|evaluate
argument_list|(
name|doc
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The xpath "
operator|+
name|xpathString
operator|+
literal|" returned a null value"
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|NOT_EMPTY
operator|.
name|equals
argument_list|(
name|expectedResult
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Not empty result for xpath "
operator|+
name|xpathString
operator|+
literal|" expected"
argument_list|,
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|checkNode (Document doc, String xpathString, final Map<String, String> prefix2Namespace, boolean exists)
specifier|private
name|void
name|checkNode
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|xpathString
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
parameter_list|,
name|boolean
name|exists
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|XPathExpression
name|expr
init|=
name|getXpath
argument_list|(
name|xpathString
argument_list|,
name|prefix2Namespace
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|expr
operator|.
name|evaluate
argument_list|(
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"The xpath "
operator|+
name|xpathString
operator|+
literal|" returned null, expected was a node"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"The xpath "
operator|+
name|xpathString
operator|+
literal|" returned a node, expected was none: "
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|getXpath (String xpathString, final Map<String, String> prefix2Namespace)
specifier|static
name|XPathExpression
name|getXpath
parameter_list|(
name|String
name|xpathString
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|XPathFactory
name|xpathFactory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XPath
name|xpath
init|=
name|xpathFactory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|NamespaceContext
name|nc
init|=
operator|new
name|NamespaceContext
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|Iterator
name|getPrefixes
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|prefix2Namespace
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|XPathExpression
name|expr
init|=
name|xpath
operator|.
name|compile
argument_list|(
name|xpathString
argument_list|)
decl_stmt|;
return|return
name|expr
return|;
block|}
end_function

begin_function
DECL|method|getMessage (MockEndpoint mock)
specifier|private
name|Message
name|getMessage
parameter_list|(
name|MockEndpoint
name|mock
parameter_list|)
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|exs
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|exs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|ex
init|=
name|exs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Message
name|mess
init|=
name|ex
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|mess
argument_list|)
expr_stmt|;
return|return
name|mess
return|;
block|}
end_function

begin_class
DECL|class|CertChainXAdESSignatureProperties
specifier|private
specifier|static
class|class
name|CertChainXAdESSignatureProperties
extends|extends
name|XAdESSignatureProperties
block|{
DECL|field|keystore
specifier|private
name|KeyStore
name|keystore
init|=
name|getKeystore
argument_list|()
decl_stmt|;
DECL|field|alias
specifier|private
name|String
name|alias
init|=
literal|"bob"
decl_stmt|;
DECL|method|CertChainXAdESSignatureProperties ()
specifier|public
name|CertChainXAdESSignatureProperties
parameter_list|()
block|{
name|setAddSigningTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSigningCertificate ()
specifier|protected
name|X509Certificate
name|getSigningCertificate
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOPMD
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSigningCertificateChain ()
specifier|protected
name|X509Certificate
index|[]
name|getSigningCertificateChain
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOPMD
name|Certificate
index|[]
name|certs
init|=
name|keystore
operator|.
name|getCertificateChain
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|X509Certificate
index|[]
name|result
init|=
operator|new
name|X509Certificate
index|[
name|certs
operator|.
name|length
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Certificate
name|cert
range|:
name|certs
control|)
block|{
name|result
index|[
name|counter
index|]
operator|=
operator|(
name|X509Certificate
operator|)
name|cert
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getKeystore ()
specifier|private
specifier|static
name|KeyStore
name|getKeystore
parameter_list|()
block|{
try|try
block|{
return|return
name|TestKeystore
operator|.
name|getKeyStore
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

unit|}
end_unit

