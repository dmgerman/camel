begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPairGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|AlgorithmMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelectorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelectorResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|URIDereferencer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|XMLCryptoContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|XMLStructure
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|CanonicalizationMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|SignatureMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyInfoFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|spec
operator|.
name|XPathFilterParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|KeyAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|ValidationFailedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignature2Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|EnvelopingXmlSignatureChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|SameDocumentUriDereferencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|TestKeystore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|TimestampProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|ValidationFailedHandlerIgnoreManifestFailures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|XmlSignature2Message2MessageWithTimestampProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * Test signing using all available digest methods  */
end_comment

begin_class
DECL|class|SignatureDigestMethodTest
specifier|public
class|class
name|SignatureDigestMethodTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|payload
specifier|private
specifier|static
name|String
name|payload
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|+
literal|"<root xmlns=\"http://test/test\"><test>Test Message</test></root>"
decl_stmt|;
DECL|field|keyPair
specifier|private
name|KeyPair
name|keyPair
decl_stmt|;
DECL|method|SignatureDigestMethodTest ()
specifier|public
name|SignatureDigestMethodTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// BouncyCastle is required for some algorithms
if|if
condition|(
name|Security
operator|.
name|getProvider
argument_list|(
literal|"BC"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|cons
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.bouncycastle.jce.provider.BouncyCastleProvider"
argument_list|)
decl_stmt|;
name|cons
operator|=
name|c
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Provider
name|provider
init|=
operator|(
name|java
operator|.
name|security
operator|.
name|Provider
operator|)
name|cons
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Security
operator|.
name|insertProviderAt
argument_list|(
name|provider
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"accessor"
argument_list|,
name|getKeyAccessor
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"canonicalizationMethod1"
argument_list|,
name|getCanonicalizationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"selector"
argument_list|,
name|KeySelector
operator|.
name|singletonKeySelector
argument_list|(
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"selectorKeyValue"
argument_list|,
name|getKeyValueKeySelector
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"uriDereferencer"
argument_list|,
name|getSameDocumentUriDereferencer
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"baseUri"
argument_list|,
name|getBaseUri
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"cryptoContextProperties"
argument_list|,
name|getCrytoContextProperties
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"keyAccessorDefault"
argument_list|,
name|getDefaultKeyAccessor
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"keySelectorDefault"
argument_list|,
name|getDefaultKeySelector
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"envelopingSignatureChecker"
argument_list|,
name|getEnvelopingXmlSignatureChecker
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"xmlSignature2MessageWithTimestampProperty"
argument_list|,
name|getXmlSignature2MessageWithTimestampdProperty
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"validationFailedHandlerIgnoreManifestFailures"
argument_list|,
name|getValidationFailedHandlerIgnoreManifestFailures
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"signatureProperties"
argument_list|,
name|getSignatureProperties
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"nodesearchxpath"
argument_list|,
name|getNodeSerachXPath
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns"
argument_list|,
literal|"http://test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|xpaths
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|XmlSignatureHelper
operator|.
name|getXpathFilter
argument_list|(
literal|"/ns:root/a/@ID"
argument_list|,
name|namespaceMap
argument_list|)
argument_list|)
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"xpathsToIdAttributes"
argument_list|,
name|xpaths
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"parentXpathBean"
argument_list|,
name|getParentXPathBean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilders ()
specifier|protected
name|RouteBuilder
index|[]
name|createRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:sha1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://sha1?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2000/09/xmldsig#sha1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:sha224"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://sha224?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2001/04/xmldsig-more#sha224"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:sha256"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://sha256?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2001/04/xmlenc#sha256"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:sha384"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://sha384?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2001/04/xmldsig-more#sha384"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:sha512"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://sha512?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2001/04/xmlenc#sha512"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:ripemd160"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://ripemd160?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2001/04/xmlenc#ripemd160"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:whirlpool"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://whirlpool?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2007/05/xmldsig-more#whirlpool"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:sha3_224"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://sha3_224?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2007/05/xmldsig-more#sha3-224"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:sha3_256"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://sha3_256?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2007/05/xmldsig-more#sha3-256"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:sha3_384"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://sha3_384?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2007/05/xmldsig-more#sha3-384"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:sha3_512"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://sha3_512?keyAccessor=#accessor"
operator|+
literal|"&digestAlgorithm=http://www.w3.org/2007/05/xmldsig-more#sha3-512"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Test
DECL|method|testSHA1 ()
specifier|public
name|void
name|testSHA1
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:sha1"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSHA224 ()
specifier|public
name|void
name|testSHA224
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:sha224"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSHA256 ()
specifier|public
name|void
name|testSHA256
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:sha256"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSHA384 ()
specifier|public
name|void
name|testSHA384
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:sha384"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSHA512 ()
specifier|public
name|void
name|testSHA512
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:sha512"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testRIPEMD160 ()
specifier|public
name|void
name|testRIPEMD160
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:ripemd160"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testWHIRLPOOL ()
specifier|public
name|void
name|testWHIRLPOOL
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:whirlpool"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSHA3_224 ()
specifier|public
name|void
name|testSHA3_224
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:sha3_224"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSHA3_256 ()
specifier|public
name|void
name|testSHA3_256
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:sha3_256"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSHA3_384 ()
specifier|public
name|void
name|testSHA3_384
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:sha3_384"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSHA3_512 ()
specifier|public
name|void
name|testSHA3_512
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:sha3_512"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setupMock ()
specifier|private
name|MockEndpoint
name|setupMock
parameter_list|()
block|{
return|return
name|setupMock
argument_list|(
name|payload
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|setupMock (String payload)
specifier|private
name|MockEndpoint
name|setupMock
parameter_list|(
name|String
name|payload
parameter_list|)
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|payload
argument_list|)
expr_stmt|;
return|return
name|mock
return|;
block|}
end_function

begin_function
DECL|method|doTestSignatureRoute (RouteBuilder builder)
specifier|public
name|Exchange
name|doTestSignatureRoute
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doSignatureRouteTest
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|doSignatureRouteTest (RouteBuilder builder, Exchange e, Map<String, Object> headers)
specifier|public
name|Exchange
name|doSignatureRouteTest
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|,
name|Exchange
name|e
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
try|try
block|{
name|context
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ProducerTemplate
name|template
init|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|send
argument_list|(
literal|"direct:in"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:in"
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
return|return
name|mock
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpKeys
argument_list|(
literal|"RSA"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|disableJMX
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setUpKeys (String algorithm, int keylength)
specifier|public
name|void
name|setUpKeys
parameter_list|(
name|String
name|algorithm
parameter_list|,
name|int
name|keylength
parameter_list|)
throws|throws
name|Exception
block|{
name|keyPair
operator|=
name|getKeyPair
argument_list|(
name|algorithm
argument_list|,
name|keylength
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getKeyPair (String algorithm, int keylength)
specifier|public
specifier|static
name|KeyPair
name|getKeyPair
parameter_list|(
name|String
name|algorithm
parameter_list|,
name|int
name|keylength
parameter_list|)
block|{
name|KeyPairGenerator
name|keyGen
decl_stmt|;
try|try
block|{
name|keyGen
operator|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|keyGen
operator|.
name|initialize
argument_list|(
name|keylength
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keyGen
operator|.
name|generateKeyPair
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|loadKeystore ()
specifier|public
specifier|static
name|KeyStore
name|loadKeystore
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|SignatureDigestMethodTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/bob.keystore"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
name|in
argument_list|,
literal|"letmein"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keystore
return|;
block|}
end_function

begin_function
DECL|method|getCertificateFromKeyStore ()
specifier|public
name|Certificate
name|getCertificateFromKeyStore
parameter_list|()
throws|throws
name|Exception
block|{
name|Certificate
name|c
init|=
name|loadKeystore
argument_list|()
operator|.
name|getCertificate
argument_list|(
literal|"bob"
argument_list|)
decl_stmt|;
return|return
name|c
return|;
block|}
end_function

begin_function
DECL|method|getKeyFromKeystore ()
specifier|public
name|PrivateKey
name|getKeyFromKeystore
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|PrivateKey
operator|)
name|loadKeystore
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"bob"
argument_list|,
literal|"letmein"
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getCanonicalizationMethod ()
specifier|private
name|AlgorithmMethod
name|getCanonicalizationMethod
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inclusivePrefixes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|inclusivePrefixes
operator|.
name|add
argument_list|(
literal|"ds"
argument_list|)
expr_stmt|;
return|return
name|XmlSignatureHelper
operator|.
name|getCanonicalizationMethod
argument_list|(
name|CanonicalizationMethod
operator|.
name|EXCLUSIVE
argument_list|,
name|inclusivePrefixes
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getKeyAccessor (final PrivateKey privateKey)
specifier|static
name|KeyAccessor
name|getKeyAccessor
parameter_list|(
specifier|final
name|PrivateKey
name|privateKey
parameter_list|)
block|{
name|KeyAccessor
name|accessor
init|=
operator|new
name|KeyAccessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeySelector
name|getKeySelector
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|KeySelector
operator|.
name|singletonKeySelector
argument_list|(
name|privateKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyInfo
name|getKeyInfo
parameter_list|(
name|Message
name|mess
parameter_list|,
name|Node
name|messageBody
parameter_list|,
name|KeyInfoFactory
name|keyInfoFactory
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
return|return
name|accessor
return|;
block|}
end_function

begin_function
DECL|method|getBaseUri ()
specifier|public
specifier|static
name|String
name|getBaseUri
parameter_list|()
block|{
name|String
name|uri
init|=
literal|"file:/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/src/test/resources/org/apache/camel/component/xmlsecurity/"
decl_stmt|;
return|return
name|uri
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getKeyValueKeySelector ()
specifier|public
specifier|static
name|KeySelector
name|getKeyValueKeySelector
parameter_list|()
block|{
return|return
operator|new
name|KeyValueKeySelector
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * KeySelector which retrieves the public key from the KeyValue element and      * returns it. NOTE: If the key algorithm doesn't match signature algorithm,      * then the public key will be ignored.      */
end_comment

begin_class
DECL|class|KeyValueKeySelector
specifier|static
class|class
name|KeyValueKeySelector
extends|extends
name|KeySelector
block|{
DECL|method|select (KeyInfo keyInfo, KeySelector.Purpose purpose, AlgorithmMethod method, XMLCryptoContext context)
specifier|public
name|KeySelectorResult
name|select
parameter_list|(
name|KeyInfo
name|keyInfo
parameter_list|,
name|KeySelector
operator|.
name|Purpose
name|purpose
parameter_list|,
name|AlgorithmMethod
name|method
parameter_list|,
name|XMLCryptoContext
name|context
parameter_list|)
throws|throws
name|KeySelectorException
block|{
if|if
condition|(
name|keyInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
literal|"Null KeyInfo object!"
argument_list|)
throw|;
block|}
name|SignatureMethod
name|sm
init|=
operator|(
name|SignatureMethod
operator|)
name|method
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
name|list
init|=
name|keyInfo
operator|.
name|getContent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XMLStructure
name|xmlStructure
init|=
operator|(
name|XMLStructure
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlStructure
operator|instanceof
name|KeyValue
condition|)
block|{
name|PublicKey
name|pk
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pk
operator|=
operator|(
operator|(
name|KeyValue
operator|)
name|xmlStructure
operator|)
operator|.
name|getPublicKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
comment|// make sure algorithm is compatible with method
if|if
condition|(
name|algEquals
argument_list|(
name|sm
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|pk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|SimpleKeySelectorResult
argument_list|(
name|pk
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|KeySelectorException
argument_list|(
literal|"No KeyValue element found!"
argument_list|)
throw|;
block|}
DECL|method|algEquals (String algURI, String algName)
specifier|static
name|boolean
name|algEquals
parameter_list|(
name|String
name|algURI
parameter_list|,
name|String
name|algName
parameter_list|)
block|{
return|return
operator|(
name|algName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DSA"
argument_list|)
operator|&&
name|algURI
operator|.
name|equalsIgnoreCase
argument_list|(
name|SignatureMethod
operator|.
name|DSA_SHA1
argument_list|)
operator|)
operator|||
operator|(
name|algName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"RSA"
argument_list|)
operator|&&
name|algURI
operator|.
name|equalsIgnoreCase
argument_list|(
name|SignatureMethod
operator|.
name|RSA_SHA1
argument_list|)
operator|)
return|;
block|}
block|}
end_class

begin_class
DECL|class|SimpleKeySelectorResult
specifier|private
specifier|static
class|class
name|SimpleKeySelectorResult
implements|implements
name|KeySelectorResult
block|{
DECL|field|pk
specifier|private
name|PublicKey
name|pk
decl_stmt|;
DECL|method|SimpleKeySelectorResult (PublicKey pk)
name|SimpleKeySelectorResult
parameter_list|(
name|PublicKey
name|pk
parameter_list|)
block|{
name|this
operator|.
name|pk
operator|=
name|pk
expr_stmt|;
block|}
DECL|method|getKey ()
specifier|public
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|pk
return|;
block|}
block|}
end_class

begin_function
DECL|method|getCrytoContextProperties ()
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|getCrytoContextProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"org.jcp.xml.dsig.validateManifests"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getDefaultKeyAccessor ()
specifier|public
specifier|static
name|KeyAccessor
name|getDefaultKeyAccessor
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TestKeystore
operator|.
name|getKeyAccessor
argument_list|(
literal|"bob"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getDefaultKeySelector ()
specifier|public
specifier|static
name|KeySelector
name|getDefaultKeySelector
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TestKeystore
operator|.
name|getKeySelector
argument_list|(
literal|"bob"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getDefaultKeyAccessorDsa ()
specifier|public
specifier|static
name|KeyAccessor
name|getDefaultKeyAccessorDsa
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TestKeystore
operator|.
name|getKeyAccessor
argument_list|(
literal|"bobdsa"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getDefaultKeySelectorDsa ()
specifier|public
specifier|static
name|KeySelector
name|getDefaultKeySelectorDsa
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TestKeystore
operator|.
name|getKeySelector
argument_list|(
literal|"bobdsa"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getEnvelopingXmlSignatureChecker ()
specifier|public
specifier|static
name|XmlSignatureChecker
name|getEnvelopingXmlSignatureChecker
parameter_list|()
block|{
return|return
operator|new
name|EnvelopingXmlSignatureChecker
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getXmlSignature2MessageWithTimestampdProperty ()
specifier|public
specifier|static
name|XmlSignature2Message
name|getXmlSignature2MessageWithTimestampdProperty
parameter_list|()
block|{
return|return
operator|new
name|XmlSignature2Message2MessageWithTimestampProperty
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getValidationFailedHandlerIgnoreManifestFailures ()
specifier|public
specifier|static
name|ValidationFailedHandler
name|getValidationFailedHandlerIgnoreManifestFailures
parameter_list|()
block|{
return|return
operator|new
name|ValidationFailedHandlerIgnoreManifestFailures
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getSignatureProperties ()
specifier|public
specifier|static
name|XmlSignatureProperties
name|getSignatureProperties
parameter_list|()
block|{
return|return
operator|new
name|TimestampProperty
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getNodeSerachXPath ()
specifier|public
specifier|static
name|XPathFilterParameterSpec
name|getNodeSerachXPath
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"pre"
argument_list|,
literal|"http://test/test"
argument_list|)
decl_stmt|;
return|return
name|XmlSignatureHelper
operator|.
name|getXpathFilter
argument_list|(
literal|"//pre:root"
argument_list|,
name|prefix2Namespace
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getSameDocumentUriDereferencer ()
specifier|public
specifier|static
name|URIDereferencer
name|getSameDocumentUriDereferencer
parameter_list|()
block|{
return|return
name|SameDocumentUriDereferencer
operator|.
name|getInstance
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getParentXPathBean ()
specifier|public
specifier|static
name|XPathFilterParameterSpec
name|getParentXPathBean
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns"
argument_list|,
literal|"http://test"
argument_list|)
decl_stmt|;
return|return
name|XmlSignatureHelper
operator|.
name|getXpathFilter
argument_list|(
literal|"/ns:root/a[last()]"
argument_list|,
name|prefix2Namespace
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

