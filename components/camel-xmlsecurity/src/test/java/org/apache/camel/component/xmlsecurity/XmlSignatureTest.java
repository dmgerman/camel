begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPairGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|AlgorithmMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelectorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelectorResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|URIDereferencer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|XMLCryptoContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|XMLStructure
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|CanonicalizationMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|SignatureMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyInfoFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|spec
operator|.
name|XPathFilterParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|spec
operator|.
name|XPathType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|KeyAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|ValidationFailedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignature2Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureHelper
operator|.
name|XPathAndFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureInvalidContentHashException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureInvalidKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureInvalidValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|processor
operator|.
name|XmlSignatureConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|EnvelopingXmlSignatureChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|SameDocumentUriDereferencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|TestKeystore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|TimestampProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|ValidationFailedHandlerIgnoreManifestFailures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|util
operator|.
name|XmlSignature2Message2MessageWithTimestampProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|XmlSignatureTest
specifier|public
class|class
name|XmlSignatureTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|payload
specifier|private
specifier|static
name|String
name|payload
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<root xmlns=\"http://test/test\"><test>Test Message</test></root>"
decl_stmt|;
DECL|field|keyPair
specifier|private
name|KeyPair
name|keyPair
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"accessor"
argument_list|,
name|getKeyAccessor
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"canonicalizationMethod1"
argument_list|,
name|getCanonicalizationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"selector"
argument_list|,
name|KeySelector
operator|.
name|singletonKeySelector
argument_list|(
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"selectorKeyValue"
argument_list|,
name|getKeyValueKeySelector
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"transformsXPath2"
argument_list|,
name|getTransformsXPath2
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"transformsXsltXPath"
argument_list|,
name|getTransformsXsltXpath
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"uriDereferencer"
argument_list|,
name|getSameDocumentUriDereferencer
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"baseUri"
argument_list|,
name|getBaseUri
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"cryptoContextProperties"
argument_list|,
name|getCrytoContextProperties
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"keyAccessorDefault"
argument_list|,
name|getDefaultKeyAccessor
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"keySelectorDefault"
argument_list|,
name|getDefaultKeySelector
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"envelopingSignatureChecker"
argument_list|,
name|getEnvelopingXmlSignatureChecker
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"xmlSignature2MessageWithTimestampProperty"
argument_list|,
name|getXmlSignature2MessageWithTimestampdProperty
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"validationFailedHandlerIgnoreManifestFailures"
argument_list|,
name|getValidationFailedHandlerIgnoreManifestFailures
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"signatureProperties"
argument_list|,
name|getSignatureProperties
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"nodesearchxpath"
argument_list|,
name|getNodeSerachXPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilders ()
specifier|protected
name|RouteBuilder
index|[]
name|createRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: enveloping XML signature
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:enveloping"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://enveloping?keyAccessor=#accessor"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://enveloping?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: enveloping XML signature
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: enveloping XML signature with plain text
comment|// message body
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:plaintext"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://plaintext?keyAccessor=#accessor&plainText=true&plainTextEncoding=UTF-8"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://plaintext?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: enveloping XML signature with plain text message
comment|// body
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: enveloped XML signature
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:enveloped"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://enveloped?keyAccessor=#accessor&parentLocalName=root&parentNamespace=http://test/test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://enveloped?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: enveloped XML signature
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: canonicalization
comment|// we can set the configuration properties explicitly on the
comment|// endpoint instances.
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"xmlsecurity:sign://canonicalization?canonicalizationMethod=#canonicalizationMethod1"
argument_list|,
name|XmlSignerEndpoint
operator|.
name|class
argument_list|)
operator|.
name|setKeyAccessor
argument_list|(
name|getKeyAccessor
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"xmlsecurity:sign://canonicalization?canonicalizationMethod=#canonicalizationMethod1"
argument_list|,
name|XmlSignerEndpoint
operator|.
name|class
argument_list|)
operator|.
name|setSignatureAlgorithm
argument_list|(
literal|"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"xmlsecurity:verify://canonicalization"
argument_list|,
name|XmlVerifierEndpoint
operator|.
name|class
argument_list|)
operator|.
name|setKeySelector
argument_list|(
name|KeySelector
operator|.
name|singletonKeySelector
argument_list|(
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:canonicalization"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://canonicalization?canonicalizationMethod=#canonicalizationMethod1"
argument_list|,
literal|"xmlsecurity:verify://canonicalization"
argument_list|,
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: canonicalization
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signature and digest algorithm
name|from
argument_list|(
literal|"direct:signaturedigestalgorithm"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://signaturedigestalgorithm?keyAccessor=#accessor"
operator|+
literal|"&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha512&digestAlgorithm=http://www.w3.org/2001/04/xmlenc#sha512"
argument_list|,
literal|"xmlsecurity:verify://signaturedigestalgorithm?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signature and digest algorithm
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: transforms XPath2
name|from
argument_list|(
literal|"direct:transformsXPath2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://transformsXPath2?keyAccessor=#accessor&transformMethods=#transformsXPath2"
argument_list|,
literal|"xmlsecurity:verify://transformsXPath2?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: transform XPath
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: transforms XSLT,XPath
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:transformsXsltXPath"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://transformsXsltXPath?keyAccessor=#accessor&transformMethods=#transformsXsltXPath"
argument_list|,
literal|"xmlsecurity:verify://transformsXsltXPath?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: transforms XSLT,XPath
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: transforms XSLT,XPath - secure Validation disabled
name|from
argument_list|(
literal|"direct:transformsXsltXPathSecureValDisabled"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://transformsXsltXPathSecureValDisabled?keyAccessor=#accessor&transformMethods=#transformsXsltXPath"
argument_list|,
literal|"xmlsecurity:verify://transformsXsltXPathSecureValDisabled?keySelector=#selector&secureValidation=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: transforms XSLT,XPath - secure Validation disabled
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: cryptocontextprops
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:cryptocontextprops"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://cryptocontextprops?keySelector=#selectorKeyValue&cryptoContextProperties=#cryptoContextProperties"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: cryptocontextprops
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: URI dereferencer
name|from
argument_list|(
literal|"direct:uridereferencer"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://uriderferencer?keyAccessor=#accessor&uriDereferencer=#uriDereferencer"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://uridereferencer?keySelector=#selector&uriDereferencer=#uriDereferencer"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: URI dereferencer
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: keyAccessorKeySelectorDefault
name|from
argument_list|(
literal|"direct:keyAccessorKeySelectorDefault"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://keyAccessorKeySelectorDefault?keyAccessor=#keyAccessorDefault&addKeyInfoReference=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://keyAccessorKeySelectorDefault?keySelector=#keySelectorDefault"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: keyAccessorKeySelectorDefault
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: xmlSignatureChecker
name|onException
argument_list|(
name|XmlSignatureInvalidException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:xmlSignatureChecker"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://xmlSignatureChecker?keySelector=#selectorKeyValue&xmlSignatureChecker=#envelopingSignatureChecker"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: xmlSignatureChecker
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
comment|// START SNIPPET: properties
name|from
argument_list|(
literal|"direct:props"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://properties?keyAccessor=#accessor&properties=#signatureProperties"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://properties?keySelector=#selector&xmlSignature2Message=#xmlSignature2MessageWithTimestampProperty"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: properties
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: verify output node search element name
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:outputnodesearchelementname"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://outputnodesearchelementname?keySelector=#selectorKeyValue"
operator|+
literal|"&outputNodeSearchType=ElementName&outputNodeSearch={http://test/test}root&removeSignatureElements=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: verify output node search element name
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: verify output node search xpath
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:outputnodesearchxpath"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://outputnodesearchxpath?keySelector=#selectorKeyValue&outputNodeSearchType=XPath&outputNodeSearch=#nodesearchxpath&removeSignatureElements=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: verify output node search xpath
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: validationFailedHandler
name|from
argument_list|(
literal|"direct:validationFailedHandler"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://validationFailedHandler?keySelector=#selectorKeyValue&validationFailedHandler=validationFailedHandlerIgnoreManifestFailures"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: validationFailedHandler
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: further parameters
name|from
argument_list|(
literal|"direct:furtherparams"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://furtherparams?keyAccessor=#accessor&prefixForXmlSignatureNamespace=digsig&disallowDoctypeDecl=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://bfurtherparams?keySelector=#selector&disallowDoctypeDecl=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: further parameters
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signer invalid keyexception
name|onException
argument_list|(
name|XmlSignatureInvalidKeyException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:signexceptioninvalidkey"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://signexceptioninvalidkey?signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signer invalid keyexception
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: signer exceptions
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:signexceptions"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://signexceptions?keyAccessor=#accessor&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: signer exceptions
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: NoSuchAlgorithmException
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:noSuchAlgorithmException"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:sign://noSuchAlgorithmException?keyAccessor=#accessor&signatureAlgorithm=wrongalgorithm&digestAlgorithm=http://www.w3.org/2001/04/xmlenc#sha512"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: NoSuchAlgorithmException
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: verifier exceptions
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:verifyexceptions"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://verifyexceptions?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: verifier exceptions
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: verifier InvalidKeyException
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:verifyInvalidKeyException"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://verifyInvalidKeyException?keySelector=#selector"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: verifier exceptions
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: verifier InvalidHashException
name|onException
argument_list|(
name|XmlSignatureException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:invalidhash"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlsecurity:verify://invalidhash?keySelector=#selectorKeyValue&baseUri=#baseUri&secureValidation=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: verifier InvalidHashException
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Test
DECL|method|testEnvelopingSignature ()
specifier|public
name|void
name|testEnvelopingSignature
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testEnvelopingSignatureWithPlainText ()
specifier|public
name|void
name|testEnvelopingSignatureWithPlainText
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|text
init|=
literal|"plain test text"
decl_stmt|;
name|setupMock
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:plaintext"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testEnvelopingSignatureWithPlainTextSetByHeaders ()
specifier|public
name|void
name|testEnvelopingSignatureWithPlainTextSetByHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|text
init|=
literal|"plain test text"
decl_stmt|;
name|setupMock
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_MESSAGE_IS_PLAIN_TEXT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_PLAIN_TEXT_ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|text
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testExceptionSignatureForPlainTextWithWrongEncoding ()
specifier|public
name|void
name|testExceptionSignatureForPlainTextWithWrongEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|text
init|=
literal|"plain test text"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_MESSAGE_IS_PLAIN_TEXT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_PLAIN_TEXT_ENCODING
argument_list|,
literal|"wrongEncoding"
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloping"
argument_list|,
name|text
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
name|UnsupportedEncodingException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testEnvelopedSignature ()
specifier|public
name|void
name|testEnvelopedSignature
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloped"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testExceptionEnvelopedSignatureWithWrongParent ()
specifier|public
name|void
name|testExceptionEnvelopedSignatureWithWrongParent
parameter_list|()
throws|throws
name|Exception
block|{
comment|// payload root element renamed to a -> parent name in route definition
comment|// does not fit
name|String
name|payload
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><a xmlns=\"http://test/test\"><test>Test Message</test></a>"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloped"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureFormatException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testExceptionEnvelopedSignatureWithPlainTextPayload ()
specifier|public
name|void
name|testExceptionEnvelopedSignatureWithPlainTextPayload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// payload root element renamed to a -> parent name in route definition
comment|// does not fit
name|String
name|payload
init|=
literal|"plain text Message"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_MESSAGE_IS_PLAIN_TEXT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:enveloped"
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureFormatException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * The parameter can also be configured via      * {@link XmlSignatureConfiguration#setOmitXmlDeclaration(Boolean)}      */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testOmitXmlDeclarationViaHeader ()
specifier|public
name|void
name|testOmitXmlDeclarationViaHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|payloadOut
init|=
literal|"<root xmlns=\"http://test/test\"><test>Test Message</test></root>"
decl_stmt|;
name|setupMock
argument_list|(
name|payloadOut
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_OMIT_XML_DECLARATION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopedXmlSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:outputnodesearchelementname"
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testkeyAccessorKeySelectorDefault ()
specifier|public
name|void
name|testkeyAccessorKeySelectorDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:keyAccessorKeySelectorDefault"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSetCanonicalizationMethodInRouteDefinition ()
specifier|public
name|void
name|testSetCanonicalizationMethodInRouteDefinition
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:canonicalization"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSetDigestAlgorithmInRouteDefinition ()
specifier|public
name|void
name|testSetDigestAlgorithmInRouteDefinition
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:signaturedigestalgorithm"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSetTransformMethodXpath2InRouteDefinition ()
specifier|public
name|void
name|testSetTransformMethodXpath2InRouteDefinition
parameter_list|()
throws|throws
name|Exception
block|{
comment|// example from http://www.w3.org/TR/2002/REC-xmldsig-filter2-20021108/
name|String
name|payload
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<Document xmlns=\"http://test/test\">                             "
operator|+
literal|"<ToBeSigned>                                                     "
operator|+
literal|"<!-- comment -->                                              "
operator|+
literal|"<Data>1</Data>                                                "
operator|+
literal|"<NotToBeSigned>                                               "
operator|+
literal|"<ReallyToBeSigned>                                          "
operator|+
literal|"<!-- comment -->                                          "
operator|+
literal|"<Data>2</Data>                                            "
operator|+
literal|"</ReallyToBeSigned>                                         "
operator|+
literal|"</NotToBeSigned>                                              "
operator|+
literal|"</ToBeSigned>                                                   "
operator|+
literal|"<ToBeSigned>                                                    "
operator|+
literal|"<Data>3</Data>                                                "
operator|+
literal|"<NotToBeSigned>                                               "
operator|+
literal|"<Data>4</Data>                                              "
operator|+
literal|"</NotToBeSigned>                                              "
operator|+
literal|"</ToBeSigned>                                                   "
operator|+
literal|"</Document>"
decl_stmt|;
name|setupMock
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:transformsXPath2"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|// Secure Validation is enabled and so this should fail
end_comment

begin_function
annotation|@
name|Test
DECL|method|testSetTransformMethodXsltXpathInRouteDefinition ()
specifier|public
name|void
name|testSetTransformMethodXsltXpathInRouteDefinition
parameter_list|()
throws|throws
name|Exception
block|{
comment|// byte[] encoded = Base64.encode("Test Message".getBytes("UTF-8"));
comment|// String contentBase64 = new String(encoded, "UTF-8");
comment|// String payload =
comment|// "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root xmlns=\"http://test/test\"><test></test></root>";
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:transformsXsltXPath"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSetTransformMethodXsltXpathInRouteDefinitionSecValDisabled ()
specifier|public
name|void
name|testSetTransformMethodXsltXpathInRouteDefinitionSecValDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:transformsXsltXPathSecureValDisabled"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testProperties ()
specifier|public
name|void
name|testProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:props"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyOutputNodeSearchElementName ()
specifier|public
name|void
name|testVerifyOutputNodeSearchElementName
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopedXmlSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:outputnodesearchelementname"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyExceptionOutputNodeSearchElementNameInvalidFormat1 ()
specifier|public
name|void
name|testVerifyExceptionOutputNodeSearchElementNameInvalidFormat1
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlVerifierEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"xmlsecurity:verify://outputnodesearchelementname?keySelector=#selectorKeyValue"
operator|+
literal|"&outputNodeSearchType=ElementName&outputNodeSearch={http://test/test}root&removeSignatureElements=true"
argument_list|,
name|XmlVerifierEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setOutputNodeSearch
argument_list|(
literal|"{wrongformat"
argument_list|)
expr_stmt|;
comment|// closing '}' missing
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopedXmlSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:outputnodesearchelementname"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyExceptionOutputNodeSearchElementNameInvalidFormat2 ()
specifier|public
name|void
name|testVerifyExceptionOutputNodeSearchElementNameInvalidFormat2
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"xmlsecurity:verify://outputnodesearchelementname?keySelector=#selectorKeyValue"
operator|+
literal|"&outputNodeSearchType=ElementName&outputNodeSearch={http://test/test}root&removeSignatureElements=true"
argument_list|,
name|XmlVerifierEndpoint
operator|.
name|class
argument_list|)
operator|.
name|setOutputNodeSearch
argument_list|(
literal|"{wrongformat}"
argument_list|)
expr_stmt|;
comment|// local name missing
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopedXmlSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:outputnodesearchelementname"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testExceptionVerifyOutputNodeSearchWrongElementName ()
specifier|public
name|void
name|testExceptionVerifyOutputNodeSearchWrongElementName
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopingDigSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:outputnodesearchelementname"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testExceptionVerifyOutputNodeSearchElementNameMoreThanOneOutputElement ()
specifier|public
name|void
name|testExceptionVerifyOutputNodeSearchElementNameMoreThanOneOutputElement
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopingDigSigWithSeveralElementsWithNameRoot.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:outputnodesearchelementname"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyOutputNodeSearchXPath ()
specifier|public
name|void
name|testVerifyOutputNodeSearchXPath
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopedXmlSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:outputnodesearchxpath"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testExceptionVerifyOutputNodeSearchXPathWithNoResultNode ()
specifier|public
name|void
name|testExceptionVerifyOutputNodeSearchXPathWithNoResultNode
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopingDigSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:outputnodesearchxpath"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testExceptionVerifyOutputNodeSearchXPathMoreThanOneOutputElement ()
specifier|public
name|void
name|testExceptionVerifyOutputNodeSearchXPathMoreThanOneOutputElement
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopingDigSigWithSeveralElementsWithNameRoot.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:outputnodesearchxpath"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testInvalidKeyException ()
specifier|public
name|void
name|testInvalidKeyException
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
comment|// wrong key type
name|setUpKeys
argument_list|(
literal|"DSA"
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"xmlsecurity:sign://signexceptioninvalidkey?signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
argument_list|,
name|XmlSignerEndpoint
operator|.
name|class
argument_list|)
operator|.
name|setKeyAccessor
argument_list|(
name|getKeyAccessor
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:signexceptioninvalidkey"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureInvalidKeyException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSignatureFormatException ()
specifier|public
name|void
name|testSignatureFormatException
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:signexceptions"
argument_list|,
literal|"wrongFormatedPayload"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureFormatException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testNoSuchAlgorithmException ()
specifier|public
name|void
name|testNoSuchAlgorithmException
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:noSuchAlgorithmException"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureException
operator|.
name|class
argument_list|,
name|NoSuchAlgorithmException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyFormatExceptionNoXml ()
specifier|public
name|void
name|testVerifyFormatExceptionNoXml
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:verifyexceptions"
argument_list|,
literal|"wrongFormatedPayload"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureFormatException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyFormatExceptionNoXmlWithoutSignatureElement ()
specifier|public
name|void
name|testVerifyFormatExceptionNoXmlWithoutSignatureElement
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:verifyexceptions"
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><NoSignature></NoSignature>"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureFormatException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyFormatExceptionMoreThanOneSignatureElement ()
specifier|public
name|void
name|testVerifyFormatExceptionMoreThanOneSignatureElement
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:verifyexceptions"
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><root><Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"/><Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"/></root>"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureFormatException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyInvalidContentHashException ()
specifier|public
name|void
name|testVerifyInvalidContentHashException
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleDetached.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:invalidhash"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureInvalidContentHashException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyMantifestInvalidContentHashException ()
specifier|public
name|void
name|testVerifyMantifestInvalidContentHashException
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ManifestTest_TamperedContent.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:invalidhash"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureInvalidContentHashException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifySetCryptoContextProperties ()
specifier|public
name|void
name|testVerifySetCryptoContextProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|// although the content referenced by the manifest was tempered, this is
comment|// not detected by
comment|// the core validation because the manifest validation is switched off
comment|// by the crypto context properties
name|setupMock
argument_list|(
literal|"some text tampered"
argument_list|)
expr_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ManifestTest_TamperedContent.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:cryptocontextprops"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifySignatureInvalidValueException ()
specifier|public
name|void
name|testVerifySignatureInvalidValueException
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|setUpKeys
argument_list|(
literal|"DSA"
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"xmlsecurity:verify://verifyexceptions?keySelector=#selector"
argument_list|,
name|XmlVerifierEndpoint
operator|.
name|class
argument_list|)
operator|.
name|setKeySelector
argument_list|(
name|KeySelector
operator|.
name|singletonKeySelector
argument_list|(
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// payload needs DSA key
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopingDigSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:verifyexceptions"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureInvalidValueException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyInvalidKeyException ()
specifier|public
name|void
name|testVerifyInvalidKeyException
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopingDigSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:verifyInvalidKeyException"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureInvalidKeyException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testUriDereferencerAndBaseUri ()
specifier|public
name|void
name|testUriDereferencerAndBaseUri
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|()
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:uridereferencer"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyXmlSignatureChecker ()
specifier|public
name|void
name|testVerifyXmlSignatureChecker
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|setupExceptionMock
argument_list|()
decl_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ExampleEnvelopedXmlSig.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:xmlSignatureChecker"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|checkThrownException
argument_list|(
name|mock
argument_list|,
name|XmlSignatureInvalidException
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testVerifyValidationFailedHandler ()
specifier|public
name|void
name|testVerifyValidationFailedHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|(
literal|"some text tampered"
argument_list|)
expr_stmt|;
name|InputStream
name|payload
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/ManifestTest_TamperedContent.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load payload"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:validationFailedHandler"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testFurtherParameters ()
specifier|public
name|void
name|testFurtherParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMock
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|String
name|payloadWithDTDoctype
init|=
literal|"<?xml version=\'1.0\'?>"
operator|+
literal|"<!DOCTYPE Signature SYSTEM "
operator|+
literal|"\"src/test/resources/org/apache/camel/component/xmlsecurity/xmldsig-core-schema.dtd\" [<!ENTITY dsig "
operator|+
literal|"\"http://www.w3.org/2000/09/xmldsig#\"> ]>"
operator|+
literal|"<root xmlns=\"http://test/test\"><test>Test Message</test></root>"
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:furtherparams"
argument_list|,
name|payloadWithDTDoctype
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|checkThrownException (MockEndpoint mock, Class<? extends XmlSignatureException> cl, Class<? extends Exception> expectedCauseClass)
specifier|private
name|void
name|checkThrownException
parameter_list|(
name|MockEndpoint
name|mock
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|XmlSignatureException
argument_list|>
name|cl
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|expectedCauseClass
parameter_list|)
throws|throws
name|Exception
block|{
name|Exception
name|e
init|=
operator|(
name|Exception
operator|)
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected excpetion "
operator|+
name|cl
operator|.
name|getName
argument_list|()
operator|+
literal|" missing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|!=
name|cl
condition|)
block|{
name|String
name|stackTrace
init|=
name|getStrackTrace
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Exception  "
operator|+
name|cl
operator|.
name|getName
argument_list|()
operator|+
literal|" excpected, but was "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|stackTrace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedCauseClass
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected cause exception"
operator|+
name|expectedCauseClass
operator|.
name|getName
argument_list|()
operator|+
literal|" missing"
argument_list|,
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedCauseClass
operator|!=
name|cause
operator|.
name|getClass
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Cause exception "
operator|+
name|expectedCauseClass
operator|.
name|getName
argument_list|()
operator|+
literal|" expected, but was "
operator|+
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|getStrackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|getStrackTrace (Exception e)
specifier|private
name|String
name|getStrackTrace
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|w
init|=
operator|new
name|PrintWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|stackTrace
init|=
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|stackTrace
return|;
block|}
end_function

begin_function
DECL|method|setupExceptionMock ()
specifier|private
name|MockEndpoint
name|setupExceptionMock
parameter_list|()
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockResult
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mockResult
operator|.
name|setExpectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|mock
return|;
block|}
end_function

begin_function
DECL|method|setupMock ()
specifier|private
name|MockEndpoint
name|setupMock
parameter_list|()
block|{
return|return
name|setupMock
argument_list|(
name|payload
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|setupMock (String payload)
specifier|private
name|MockEndpoint
name|setupMock
parameter_list|(
name|String
name|payload
parameter_list|)
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|payload
argument_list|)
expr_stmt|;
return|return
name|mock
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doTestSignatureRoute (RouteBuilder builder)
specifier|public
name|Exchange
name|doTestSignatureRoute
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doSignatureRouteTest
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|doSignatureRouteTest (RouteBuilder builder, Exchange e, Map<String, Object> headers)
specifier|public
name|Exchange
name|doSignatureRouteTest
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|,
name|Exchange
name|e
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
try|try
block|{
name|context
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ProducerTemplate
name|template
init|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|send
argument_list|(
literal|"direct:in"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:in"
argument_list|,
name|payload
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
return|return
name|mock
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpKeys
argument_list|(
literal|"RSA"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|disableJMX
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setUpKeys (String algorithm, int keylength)
specifier|public
name|void
name|setUpKeys
parameter_list|(
name|String
name|algorithm
parameter_list|,
name|int
name|keylength
parameter_list|)
throws|throws
name|Exception
block|{
name|keyPair
operator|=
name|getKeyPair
argument_list|(
name|algorithm
argument_list|,
name|keylength
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getKeyPair (String algorithm, int keylength)
specifier|public
specifier|static
name|KeyPair
name|getKeyPair
parameter_list|(
name|String
name|algorithm
parameter_list|,
name|int
name|keylength
parameter_list|)
block|{
name|KeyPairGenerator
name|keyGen
decl_stmt|;
try|try
block|{
name|keyGen
operator|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|keyGen
operator|.
name|initialize
argument_list|(
name|keylength
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keyGen
operator|.
name|generateKeyPair
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|loadKeystore ()
specifier|public
specifier|static
name|KeyStore
name|loadKeystore
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|XmlSignatureTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/bob.keystore"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
name|in
argument_list|,
literal|"letmein"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keystore
return|;
block|}
end_function

begin_function
DECL|method|getCertificateFromKeyStore ()
specifier|public
name|Certificate
name|getCertificateFromKeyStore
parameter_list|()
throws|throws
name|Exception
block|{
name|Certificate
name|c
init|=
name|loadKeystore
argument_list|()
operator|.
name|getCertificate
argument_list|(
literal|"bob"
argument_list|)
decl_stmt|;
return|return
name|c
return|;
block|}
end_function

begin_function
DECL|method|getKeyFromKeystore ()
specifier|public
name|PrivateKey
name|getKeyFromKeystore
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|PrivateKey
operator|)
name|loadKeystore
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"bob"
argument_list|,
literal|"letmein"
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getCanonicalizationMethod ()
specifier|private
name|AlgorithmMethod
name|getCanonicalizationMethod
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inclusivePrefixes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|inclusivePrefixes
operator|.
name|add
argument_list|(
literal|"ds"
argument_list|)
expr_stmt|;
return|return
name|XmlSignatureHelper
operator|.
name|getCanonicalizationMethod
argument_list|(
name|CanonicalizationMethod
operator|.
name|EXCLUSIVE
argument_list|,
name|inclusivePrefixes
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getTransformsXPath2 ()
specifier|private
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|getTransformsXPath2
parameter_list|()
block|{
name|List
argument_list|<
name|XPathAndFilter
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|XPathAndFilter
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|XPathAndFilter
name|xpath1
init|=
operator|new
name|XPathAndFilter
argument_list|(
literal|"//n0:ToBeSigned"
argument_list|,
name|XPathType
operator|.
name|Filter
operator|.
name|INTERSECT
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|xpath1
argument_list|)
expr_stmt|;
name|XPathAndFilter
name|xpath2
init|=
operator|new
name|XPathAndFilter
argument_list|(
literal|"//n0:NotToBeSigned"
argument_list|,
name|XPathType
operator|.
name|Filter
operator|.
name|SUBTRACT
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|xpath2
argument_list|)
expr_stmt|;
name|XPathAndFilter
name|xpath3
init|=
operator|new
name|XPathAndFilter
argument_list|(
literal|"//n0:ReallyToBeSigned"
argument_list|,
name|XPathType
operator|.
name|Filter
operator|.
name|UNION
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|xpath3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|AlgorithmMethod
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|XmlSignatureHelper
operator|.
name|getCanonicalizationMethod
argument_list|(
name|CanonicalizationMethod
operator|.
name|INCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|XmlSignatureHelper
operator|.
name|getXPath2Transform
argument_list|(
name|list
argument_list|,
name|getNamespaceMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
DECL|method|getNamespaceMap ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaceMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"n0"
argument_list|,
literal|"http://test/test"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
DECL|method|getTransformsXsltXpath ()
specifier|private
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|getTransformsXsltXpath
parameter_list|()
block|{
try|try
block|{
name|AlgorithmMethod
name|transformXslt
init|=
name|XmlSignatureHelper
operator|.
name|getXslTransform
argument_list|(
literal|"/org/apache/camel/component/xmlsecurity/xslt_test.xsl"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|namespaceMap
operator|.
name|put
argument_list|(
literal|"n0"
argument_list|,
literal|"https://org.apache/camel/xmlsecurity/test"
argument_list|)
expr_stmt|;
name|AlgorithmMethod
name|transformXpath
init|=
name|XmlSignatureHelper
operator|.
name|getXPathTransform
argument_list|(
literal|"//n0:XMLSecurity/n0:Content"
argument_list|,
name|namespaceMap
argument_list|)
decl_stmt|;
comment|// I removed base 64 transform because the JDK implementation does
comment|// not correctly support this transformation
comment|// AlgorithmMethod transformBase64 = helper.getBase64Transform();
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|AlgorithmMethod
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|XmlSignatureHelper
operator|.
name|getCanonicalizationMethod
argument_list|(
name|CanonicalizationMethod
operator|.
name|INCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|transformXslt
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|transformXpath
argument_list|)
expr_stmt|;
comment|// result.add(transformBase64);
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|getKeyAccessor (final PrivateKey privateKey)
specifier|static
name|KeyAccessor
name|getKeyAccessor
parameter_list|(
specifier|final
name|PrivateKey
name|privateKey
parameter_list|)
block|{
name|KeyAccessor
name|accessor
init|=
operator|new
name|KeyAccessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeySelector
name|getKeySelector
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|KeySelector
operator|.
name|singletonKeySelector
argument_list|(
name|privateKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyInfo
name|getKeyInfo
parameter_list|(
name|Message
name|mess
parameter_list|,
name|Node
name|messageBody
parameter_list|,
name|KeyInfoFactory
name|keyInfoFactory
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
return|return
name|accessor
return|;
block|}
end_function

begin_function
DECL|method|getBaseUri ()
specifier|public
specifier|static
name|String
name|getBaseUri
parameter_list|()
block|{
name|String
name|uri
init|=
literal|"file:/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/src/test/resources/org/apache/camel/component/xmlsecurity/"
decl_stmt|;
return|return
name|uri
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getKeyValueKeySelector ()
specifier|public
specifier|static
name|KeySelector
name|getKeyValueKeySelector
parameter_list|()
block|{
return|return
operator|new
name|KeyValueKeySelector
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * KeySelector which retrieves the public key from the KeyValue element and      * returns it. NOTE: If the key algorithm doesn't match signature algorithm,      * then the public key will be ignored.      */
end_comment

begin_class
DECL|class|KeyValueKeySelector
specifier|static
class|class
name|KeyValueKeySelector
extends|extends
name|KeySelector
block|{
DECL|method|select (KeyInfo keyInfo, KeySelector.Purpose purpose, AlgorithmMethod method, XMLCryptoContext context)
specifier|public
name|KeySelectorResult
name|select
parameter_list|(
name|KeyInfo
name|keyInfo
parameter_list|,
name|KeySelector
operator|.
name|Purpose
name|purpose
parameter_list|,
name|AlgorithmMethod
name|method
parameter_list|,
name|XMLCryptoContext
name|context
parameter_list|)
throws|throws
name|KeySelectorException
block|{
if|if
condition|(
name|keyInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
literal|"Null KeyInfo object!"
argument_list|)
throw|;
block|}
name|SignatureMethod
name|sm
init|=
operator|(
name|SignatureMethod
operator|)
name|method
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
name|list
init|=
name|keyInfo
operator|.
name|getContent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XMLStructure
name|xmlStructure
init|=
operator|(
name|XMLStructure
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlStructure
operator|instanceof
name|KeyValue
condition|)
block|{
name|PublicKey
name|pk
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pk
operator|=
operator|(
operator|(
name|KeyValue
operator|)
name|xmlStructure
operator|)
operator|.
name|getPublicKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
comment|// make sure algorithm is compatible with method
if|if
condition|(
name|algEquals
argument_list|(
name|sm
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|pk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|SimpleKeySelectorResult
argument_list|(
name|pk
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|KeySelectorException
argument_list|(
literal|"No KeyValue element found!"
argument_list|)
throw|;
block|}
DECL|method|algEquals (String algURI, String algName)
specifier|static
name|boolean
name|algEquals
parameter_list|(
name|String
name|algURI
parameter_list|,
name|String
name|algName
parameter_list|)
block|{
return|return
operator|(
name|algName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DSA"
argument_list|)
operator|&&
name|algURI
operator|.
name|equalsIgnoreCase
argument_list|(
name|SignatureMethod
operator|.
name|DSA_SHA1
argument_list|)
operator|)
operator|||
operator|(
name|algName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"RSA"
argument_list|)
operator|&&
name|algURI
operator|.
name|equalsIgnoreCase
argument_list|(
name|SignatureMethod
operator|.
name|RSA_SHA1
argument_list|)
operator|)
return|;
block|}
block|}
end_class

begin_class
DECL|class|SimpleKeySelectorResult
specifier|private
specifier|static
class|class
name|SimpleKeySelectorResult
implements|implements
name|KeySelectorResult
block|{
DECL|field|pk
specifier|private
name|PublicKey
name|pk
decl_stmt|;
DECL|method|SimpleKeySelectorResult (PublicKey pk)
name|SimpleKeySelectorResult
parameter_list|(
name|PublicKey
name|pk
parameter_list|)
block|{
name|this
operator|.
name|pk
operator|=
name|pk
expr_stmt|;
block|}
DECL|method|getKey ()
specifier|public
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|pk
return|;
block|}
block|}
end_class

begin_function
DECL|method|getCrytoContextProperties ()
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|getCrytoContextProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"org.jcp.xml.dsig.validateManifests"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getDefaultKeyAccessor ()
specifier|public
specifier|static
name|KeyAccessor
name|getDefaultKeyAccessor
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TestKeystore
operator|.
name|getKeyAccessor
argument_list|(
literal|"bob"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getDefaultKeySelector ()
specifier|public
specifier|static
name|KeySelector
name|getDefaultKeySelector
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TestKeystore
operator|.
name|getKeySelector
argument_list|(
literal|"bob"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getDefaultKeyAccessorDsa ()
specifier|public
specifier|static
name|KeyAccessor
name|getDefaultKeyAccessorDsa
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TestKeystore
operator|.
name|getKeyAccessor
argument_list|(
literal|"bobdsa"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getDefaultKeySelectorDsa ()
specifier|public
specifier|static
name|KeySelector
name|getDefaultKeySelectorDsa
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TestKeystore
operator|.
name|getKeySelector
argument_list|(
literal|"bobdsa"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getEnvelopingXmlSignatureChecker ()
specifier|public
specifier|static
name|XmlSignatureChecker
name|getEnvelopingXmlSignatureChecker
parameter_list|()
block|{
return|return
operator|new
name|EnvelopingXmlSignatureChecker
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getXmlSignature2MessageWithTimestampdProperty ()
specifier|public
specifier|static
name|XmlSignature2Message
name|getXmlSignature2MessageWithTimestampdProperty
parameter_list|()
block|{
return|return
operator|new
name|XmlSignature2Message2MessageWithTimestampProperty
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getValidationFailedHandlerIgnoreManifestFailures ()
specifier|public
specifier|static
name|ValidationFailedHandler
name|getValidationFailedHandlerIgnoreManifestFailures
parameter_list|()
block|{
return|return
operator|new
name|ValidationFailedHandlerIgnoreManifestFailures
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getSignatureProperties ()
specifier|public
specifier|static
name|XmlSignatureProperties
name|getSignatureProperties
parameter_list|()
block|{
return|return
operator|new
name|TimestampProperty
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getNodeSerachXPath ()
specifier|public
specifier|static
name|XPathFilterParameterSpec
name|getNodeSerachXPath
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Namespace
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"pre"
argument_list|,
literal|"http://test/test"
argument_list|)
decl_stmt|;
return|return
name|XmlSignatureHelper
operator|.
name|getXpathFilter
argument_list|(
literal|"//pre:root"
argument_list|,
name|prefix2Namespace
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getSameDocumentUriDereferencer ()
specifier|public
specifier|static
name|URIDereferencer
name|getSameDocumentUriDereferencer
parameter_list|()
block|{
return|return
name|SameDocumentUriDereferencer
operator|.
name|getInstance
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

