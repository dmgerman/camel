begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xmlsecurity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xmlsecurity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|encryption
operator|.
name|XMLCipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|EncryptionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Some unit tests for XML Encryption 1.1 functionality  */
end_comment

begin_class
DECL|class|XMLEncryption11Test
specifier|public
class|class
name|XMLEncryption11Test
extends|extends
name|CamelTestSupport
block|{
DECL|field|xmlsecTestHelper
name|TestHelper
name|xmlsecTestHelper
init|=
operator|new
name|TestHelper
argument_list|()
decl_stmt|;
DECL|method|XMLEncryption11Test ()
specifier|public
name|XMLEncryption11Test
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
comment|// BouncyCastle is required for GCM support
comment|//
if|if
condition|(
name|Security
operator|.
name|getProvider
argument_list|(
literal|"BC"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|cons
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.bouncycastle.jce.provider.BouncyCastleProvider"
argument_list|)
decl_stmt|;
name|cons
operator|=
name|c
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Provider
name|provider
init|=
operator|(
name|java
operator|.
name|security
operator|.
name|Provider
operator|)
name|cons
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Security
operator|.
name|insertProviderAt
argument_list|(
name|provider
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|XmlConverter
operator|.
name|OUTPUT_PROPERTIES_PREFIX
operator|+
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
comment|/*      * Encryption Tests      */
annotation|@
name|Test
DECL|method|testFullPayloadAsymmetricKeyEncryptionGCM ()
specifier|public
name|void
name|testFullPayloadAsymmetricKeyEncryptionGCM
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStoreParameters
name|tsParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|tsParameters
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|tsParameters
operator|.
name|setResource
argument_list|(
literal|"sender.ts"
argument_list|)
expr_stmt|;
specifier|final
name|XMLSecurityDataFormat
name|xmlEncDataFormat
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|()
decl_stmt|;
name|xmlEncDataFormat
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|RSA_OAEP
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setKeyOrTrustStoreParameters
argument_list|(
name|tsParameters
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|AES_128_GCM
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setRecipientKeyAlias
argument_list|(
literal|"recipient"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|(
name|xmlEncDataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|xmlsecTestHelper
operator|.
name|testEncryption
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullPayloadAsymmetricKeyEncryptionSHA256 ()
specifier|public
name|void
name|testFullPayloadAsymmetricKeyEncryptionSHA256
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStoreParameters
name|tsParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|tsParameters
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|tsParameters
operator|.
name|setResource
argument_list|(
literal|"sender.ts"
argument_list|)
expr_stmt|;
specifier|final
name|XMLSecurityDataFormat
name|xmlEncDataFormat
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|()
decl_stmt|;
name|xmlEncDataFormat
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|RSA_OAEP
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setKeyOrTrustStoreParameters
argument_list|(
name|tsParameters
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|AES_128
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setRecipientKeyAlias
argument_list|(
literal|"recipient"
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setDigestAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|SHA256
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|(
name|xmlEncDataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|xmlsecTestHelper
operator|.
name|testEncryption
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullPayloadAsymmetricKeyEncryptionMGF256 ()
specifier|public
name|void
name|testFullPayloadAsymmetricKeyEncryptionMGF256
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStoreParameters
name|tsParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|tsParameters
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|tsParameters
operator|.
name|setResource
argument_list|(
literal|"sender.ts"
argument_list|)
expr_stmt|;
specifier|final
name|XMLSecurityDataFormat
name|xmlEncDataFormat
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|()
decl_stmt|;
name|xmlEncDataFormat
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|RSA_OAEP_11
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setKeyOrTrustStoreParameters
argument_list|(
name|tsParameters
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|AES_128
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setMgfAlgorithm
argument_list|(
name|EncryptionConstants
operator|.
name|MGF1_SHA256
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setRecipientKeyAlias
argument_list|(
literal|"recipient"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|(
name|xmlEncDataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|xmlsecTestHelper
operator|.
name|testEncryption
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/*      * Decryption Tests      */
annotation|@
name|Test
DECL|method|testFullPayloadAsymmetricKeyDecryptionGCM ()
specifier|public
name|void
name|testFullPayloadAsymmetricKeyDecryptionGCM
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KeyStoreParameters
name|tsParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|tsParameters
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|tsParameters
operator|.
name|setResource
argument_list|(
literal|"sender.ts"
argument_list|)
expr_stmt|;
specifier|final
name|KeyStoreParameters
name|ksParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|ksParameters
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|ksParameters
operator|.
name|setResource
argument_list|(
literal|"recipient.ks"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|,
literal|"recipient"
argument_list|,
name|XMLCipher
operator|.
name|AES_128_GCM
argument_list|,
name|XMLCipher
operator|.
name|RSA_OAEP
argument_list|,
name|tsParameters
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|,
literal|"recipient"
argument_list|,
name|XMLCipher
operator|.
name|AES_128_GCM
argument_list|,
name|XMLCipher
operator|.
name|RSA_OAEP
argument_list|,
name|ksParameters
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|xmlsecTestHelper
operator|.
name|testDecryption
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullPayloadAsymmetricKeyDecryptionSHA256 ()
specifier|public
name|void
name|testFullPayloadAsymmetricKeyDecryptionSHA256
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KeyStoreParameters
name|tsParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|tsParameters
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|tsParameters
operator|.
name|setResource
argument_list|(
literal|"sender.ts"
argument_list|)
expr_stmt|;
specifier|final
name|KeyStoreParameters
name|ksParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|ksParameters
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|ksParameters
operator|.
name|setResource
argument_list|(
literal|"recipient.ks"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|""
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|"recipient"
argument_list|,
name|XMLCipher
operator|.
name|AES_128
argument_list|,
name|XMLCipher
operator|.
name|RSA_OAEP
argument_list|,
name|tsParameters
argument_list|,
literal|null
argument_list|,
name|XMLCipher
operator|.
name|SHA256
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|""
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|"recipient"
argument_list|,
name|XMLCipher
operator|.
name|AES_128
argument_list|,
name|XMLCipher
operator|.
name|RSA_OAEP
argument_list|,
name|ksParameters
argument_list|,
literal|null
argument_list|,
name|XMLCipher
operator|.
name|SHA256
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|xmlsecTestHelper
operator|.
name|testDecryption
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullPayloadAsymmetricKeyDecryptionMGF256 ()
specifier|public
name|void
name|testFullPayloadAsymmetricKeyDecryptionMGF256
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KeyStoreParameters
name|tsParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|tsParameters
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|tsParameters
operator|.
name|setResource
argument_list|(
literal|"sender.ts"
argument_list|)
expr_stmt|;
specifier|final
name|XMLSecurityDataFormat
name|xmlEncDataFormat
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|()
decl_stmt|;
name|xmlEncDataFormat
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|RSA_OAEP_11
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setKeyOrTrustStoreParameters
argument_list|(
name|tsParameters
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|XMLCipher
operator|.
name|AES_128
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setMgfAlgorithm
argument_list|(
name|EncryptionConstants
operator|.
name|MGF1_SHA256
argument_list|)
expr_stmt|;
name|xmlEncDataFormat
operator|.
name|setRecipientKeyAlias
argument_list|(
literal|"recipient"
argument_list|)
expr_stmt|;
specifier|final
name|KeyStoreParameters
name|ksParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|ksParameters
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|ksParameters
operator|.
name|setResource
argument_list|(
literal|"recipient.ks"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|(
name|xmlEncDataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:encrypted"
argument_list|)
comment|// .log("Body: + ${body}")
operator|.
name|unmarshal
argument_list|()
operator|.
name|secureXML
argument_list|(
literal|""
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|"recipient"
argument_list|,
name|XMLCipher
operator|.
name|AES_128
argument_list|,
name|XMLCipher
operator|.
name|RSA_OAEP
argument_list|,
name|ksParameters
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decrypted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|xmlsecTestHelper
operator|.
name|testDecryption
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

