begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|XMLCryptoContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BytesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
operator|.
name|DefaultLSResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|XmlSignatureProcessor
specifier|public
specifier|abstract
class|class
name|XmlSignatureProcessor
implements|implements
name|Processor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XmlSignatureProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
try|try
block|{
name|SantuarioUtil
operator|.
name|initializeSantuario
argument_list|()
expr_stmt|;
name|SantuarioUtil
operator|.
name|addSantuarioJSR105Provider
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//NOPMD
comment|// provider not in classpath, ignore and fall back to jre default
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot add the SantuarioJSR105Provider due to {0}, fall back to JRE default."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConfiguration ()
specifier|public
specifier|abstract
name|XmlSignatureConfiguration
name|getConfiguration
parameter_list|()
function_decl|;
DECL|method|setUriDereferencerAndBaseUri (XMLCryptoContext context)
name|void
name|setUriDereferencerAndBaseUri
parameter_list|(
name|XMLCryptoContext
name|context
parameter_list|)
block|{
name|setUriDereferencer
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|setBaseUri
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|setUriDereferencer (XMLCryptoContext context)
specifier|private
name|void
name|setUriDereferencer
parameter_list|(
name|XMLCryptoContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getUriDereferencer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setURIDereferencer
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getUriDereferencer
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"URI dereferencer set"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setBaseUri (XMLCryptoContext context)
specifier|private
name|void
name|setBaseUri
parameter_list|(
name|XMLCryptoContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getBaseUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setBaseURI
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getBaseUri
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Base URI {} set"
argument_list|,
name|context
operator|.
name|getBaseURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setCryptoContextProperties (XMLCryptoContext cryptoContext)
specifier|protected
name|void
name|setCryptoContextProperties
parameter_list|(
name|XMLCryptoContext
name|cryptoContext
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|props
init|=
name|getConfiguration
argument_list|()
operator|.
name|getCryptoContextProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|prop
range|:
name|props
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|val
init|=
name|props
operator|.
name|get
argument_list|(
name|prop
argument_list|)
decl_stmt|;
name|cryptoContext
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Context property {} set to value {}"
argument_list|,
name|prop
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clearMessageHeaders (Message message)
specifier|protected
name|void
name|clearMessageHeaders
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getClearHeaders
argument_list|()
operator|!=
literal|null
operator|&&
name|getConfiguration
argument_list|()
operator|.
name|getClearHeaders
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|XmlSignatureConstants
operator|.
name|class
operator|.
name|getFields
argument_list|()
control|)
block|{
name|headers
operator|.
name|remove
argument_list|(
name|ObjectHelper
operator|.
name|lookupConstantFieldValue
argument_list|(
name|XmlSignatureConstants
operator|.
name|class
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSchema (Message message)
specifier|protected
name|Schema
name|getSchema
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XmlSignatureException
throws|,
name|IOException
block|{
name|String
name|schemaResourceUri
init|=
name|getSchemaResourceUri
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaResourceUri
operator|==
literal|null
operator|||
name|schemaResourceUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveResourceAsInputStream
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|schemaResourceUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"XML Signature component is wrongly configured: No XML schema found for specified schema resource URI "
operator|+
name|schemaResourceUri
argument_list|)
throw|;
block|}
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bytes
operator|=
name|IOConverter
operator|.
name|toBytes
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// and make sure to close the input stream after the schema has been loaded
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|SchemaFactory
name|schemaFactory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|schemaFactory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schemaFactory
operator|.
name|setResourceResolver
argument_list|(
operator|new
name|DefaultLSResourceResolver
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getSchemaResourceUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Instantiating schema for validation"
argument_list|)
expr_stmt|;
return|return
name|schemaFactory
operator|.
name|newSchema
argument_list|(
operator|new
name|BytesSource
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSchemaResourceUri (Message message)
specifier|protected
name|String
name|getSchemaResourceUri
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|String
name|schemaResourceUri
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_SCHEMA_RESOURCE_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaResourceUri
operator|==
literal|null
condition|)
block|{
name|schemaResourceUri
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getSchemaResourceUri
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"schema resource URI: {}"
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getSchemaResourceUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|schemaResourceUri
return|;
block|}
block|}
end_class

end_unit

