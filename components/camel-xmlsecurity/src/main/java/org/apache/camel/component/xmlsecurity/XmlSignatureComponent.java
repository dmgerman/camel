begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|AlgorithmMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|URIDereferencer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|spec
operator|.
name|XPathFilterParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|KeyAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|ValidationFailedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignature2Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|processor
operator|.
name|XmlSignerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|processor
operator|.
name|XmlVerifierConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|XmlSignatureComponent
specifier|public
class|class
name|XmlSignatureComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|signerConfiguration
specifier|private
name|XmlSignerConfiguration
name|signerConfiguration
decl_stmt|;
DECL|field|verifierConfiguration
specifier|private
name|XmlVerifierConfiguration
name|verifierConfiguration
decl_stmt|;
DECL|method|XmlSignatureComponent ()
specifier|public
name|XmlSignatureComponent
parameter_list|()
block|{
name|super
argument_list|(
name|XmlSignatureEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|XmlSignatureComponent (CamelContext context)
specifier|public
name|XmlSignatureComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|XmlSignatureEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
name|String
name|scheme
decl_stmt|;
name|String
name|name
decl_stmt|;
try|try
block|{
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|scheme
operator|=
name|u
operator|.
name|getScheme
argument_list|()
expr_stmt|;
name|name
operator|=
name|u
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"An invalid xmlsecurity uri was provided '%s'."
operator|+
literal|" Check the uri matches the format xmlsecurity:sign://<name> or xmlsecurity:verify:<name>"
argument_list|,
name|uri
argument_list|)
argument_list|)
throw|;
block|}
name|XmlSignatureEndpoint
name|endpoint
decl_stmt|;
if|if
condition|(
literal|"sign"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|XmlSignerConfiguration
name|config
init|=
name|getSignerConfiguration
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
name|endpoint
operator|=
operator|new
name|XmlSignerEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"verify"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|XmlVerifierConfiguration
name|config
init|=
name|getVerifierConfiguration
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
name|endpoint
operator|=
operator|new
name|XmlVerifierEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Endpoint uri '%s'"
operator|+
literal|" is wrong configured. Operation '%s'"
operator|+
literal|" is not supported. Supported operations are: sign, verify"
argument_list|,
name|uri
argument_list|,
name|scheme
argument_list|)
argument_list|)
throw|;
block|}
name|setProperties
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setCommand
argument_list|(
name|XmlCommand
operator|.
name|valueOf
argument_list|(
name|scheme
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getSignerConfiguration ()
specifier|public
name|XmlSignerConfiguration
name|getSignerConfiguration
parameter_list|()
block|{
if|if
condition|(
name|signerConfiguration
operator|==
literal|null
condition|)
block|{
name|signerConfiguration
operator|=
operator|new
name|XmlSignerConfiguration
argument_list|()
expr_stmt|;
block|}
return|return
name|signerConfiguration
return|;
block|}
comment|/**      * To use a shared XmlSignerConfiguration configuration to use as base for configuring endpoints. Properties of the shared configuration can also be set individually.      */
DECL|method|setSignerConfiguration (XmlSignerConfiguration signerConfiguration)
specifier|public
name|void
name|setSignerConfiguration
parameter_list|(
name|XmlSignerConfiguration
name|signerConfiguration
parameter_list|)
block|{
name|this
operator|.
name|signerConfiguration
operator|=
name|signerConfiguration
expr_stmt|;
block|}
DECL|method|getVerifierConfiguration ()
specifier|public
name|XmlVerifierConfiguration
name|getVerifierConfiguration
parameter_list|()
block|{
if|if
condition|(
name|verifierConfiguration
operator|==
literal|null
condition|)
block|{
name|verifierConfiguration
operator|=
operator|new
name|XmlVerifierConfiguration
argument_list|()
expr_stmt|;
block|}
return|return
name|verifierConfiguration
return|;
block|}
comment|/**      * To use a shared XmlVerifierConfiguration configuration to use as base for configuring endpoints. Properties of the shared configuration can also be set individually.      */
DECL|method|setVerifierConfiguration (XmlVerifierConfiguration verifierConfiguration)
specifier|public
name|void
name|setVerifierConfiguration
parameter_list|(
name|XmlVerifierConfiguration
name|verifierConfiguration
parameter_list|)
block|{
name|this
operator|.
name|verifierConfiguration
operator|=
name|verifierConfiguration
expr_stmt|;
block|}
DECL|method|getSignerUriDereferencer ()
specifier|public
name|URIDereferencer
name|getSignerUriDereferencer
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getUriDereferencer
argument_list|()
return|;
block|}
comment|/**      * If you want to restrict the remote access via reference URIs, you can setSigner      * an own dereferencer. Optional parameter. If not setSigner the provider default      * dereferencer is used which can resolve URI fragments, HTTP, file and      * XPpointer URIs.      *<p>      * Attention: The implementation is provider dependent!      *      * @see XMLCryptoContext#setURIDereferencer(URIDereferencer)      * @param uriDereferencer      */
DECL|method|setSignerUriDereferencer (URIDereferencer uriDereferencer)
specifier|public
name|void
name|setSignerUriDereferencer
parameter_list|(
name|URIDereferencer
name|uriDereferencer
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setUriDereferencer
argument_list|(
name|uriDereferencer
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerBaseUri ()
specifier|public
name|String
name|getSignerBaseUri
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getBaseUri
argument_list|()
return|;
block|}
comment|/**      * You can setSigner a base URI which is used in the URI dereferencing. Relative      * URIs are then concatenated with the base URI.      *      * @see XMLCryptoContext#setBaseURI(String)      * @param baseUri      */
DECL|method|setSignerBaseUri (String baseUri)
specifier|public
name|void
name|setSignerBaseUri
parameter_list|(
name|String
name|baseUri
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setBaseUri
argument_list|(
name|baseUri
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerDisallowDoctypeDecl ()
specifier|public
name|Boolean
name|getSignerDisallowDoctypeDecl
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getDisallowDoctypeDecl
argument_list|()
return|;
block|}
DECL|method|getSignerKeyAccessor ()
specifier|public
name|KeyAccessor
name|getSignerKeyAccessor
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getKeyAccessor
argument_list|()
return|;
block|}
comment|/**      * Disallows that the incoming XML document contains DTD DOCTYPE      * declaration. The default value is {@link Boolean#TRUE}.      *      * @param disallowDoctypeDecl if setSigner to {@link Boolean#FALSE} then DOCTYPE declaration is allowed, otherwise not      */
DECL|method|setSignerDisallowDoctypeDecl (Boolean disallowDoctypeDecl)
specifier|public
name|void
name|setSignerDisallowDoctypeDecl
parameter_list|(
name|Boolean
name|disallowDoctypeDecl
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setDisallowDoctypeDecl
argument_list|(
name|disallowDoctypeDecl
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerOmitXmlDeclaration ()
specifier|public
name|Boolean
name|getSignerOmitXmlDeclaration
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getOmitXmlDeclaration
argument_list|()
return|;
block|}
comment|/**      * For the signing process, a private key is necessary. You specify a key accessor bean which provides this private key.      * The key accessor bean must implement the KeyAccessor interface. The package org.apache.camel.component.xmlsecurity.api      * contains the default implementation class DefaultKeyAccessor which reads the private key from a Java keystore.      * @param keyAccessor      */
DECL|method|setSignerKeyAccessor (KeyAccessor keyAccessor)
specifier|public
name|void
name|setSignerKeyAccessor
parameter_list|(
name|KeyAccessor
name|keyAccessor
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setKeyAccessor
argument_list|(
name|keyAccessor
argument_list|)
expr_stmt|;
block|}
comment|/**      * setSigners the reference name for a KeyAccessor that can be found in the registry.      * @param keyAccessorName      */
DECL|method|setSignerKeyAccessor (String keyAccessorName)
specifier|public
name|void
name|setSignerKeyAccessor
parameter_list|(
name|String
name|keyAccessorName
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setKeyAccessor
argument_list|(
name|keyAccessorName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Indicator whether the XML declaration in the outgoing message body should      * be omitted. Default value is<code>false</code>. Can be overwritten by      * the header {@link XmlSignatureConstants#HEADER_OMIT_XML_DECLARATION}.      * @param omitXmlDeclaration      */
DECL|method|setSignerOmitXmlDeclaration (Boolean omitXmlDeclaration)
specifier|public
name|void
name|setSignerOmitXmlDeclaration
parameter_list|(
name|Boolean
name|omitXmlDeclaration
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setOmitXmlDeclaration
argument_list|(
name|omitXmlDeclaration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if the XML signature specific headers be cleared after signing      * and verification. Defaults to true.      *      * @return true if the Signature headers should be unset, false otherwise      */
DECL|method|getSignerClearHeaders ()
specifier|public
name|Boolean
name|getSignerClearHeaders
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getClearHeaders
argument_list|()
return|;
block|}
DECL|method|getSignerCanonicalizationMethod ()
specifier|public
name|AlgorithmMethod
name|getSignerCanonicalizationMethod
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getCanonicalizationMethod
argument_list|()
return|;
block|}
comment|/**      * Determines if the XML signature specific headers be cleared after signing      * and verification. Defaults to true.      * @param clearHeaders      */
DECL|method|setSignerClearHeaders (Boolean clearHeaders)
specifier|public
name|void
name|setSignerClearHeaders
parameter_list|(
name|Boolean
name|clearHeaders
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setClearHeaders
argument_list|(
name|clearHeaders
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerSchemaResourceUri ()
specifier|public
name|String
name|getSignerSchemaResourceUri
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getSchemaResourceUri
argument_list|()
return|;
block|}
comment|/**      * Canonicalization method used to canonicalize the SignedInfo element before the digest is calculated.      * You can use the helper methods XmlSignatureHelper.getCanonicalizationMethod(String algorithm)      * or getSignerCanonicalizationMethod(String algorithm, List<String> inclusiveNamespacePrefixes) to create a canonicalization method.      * @param canonicalizationMethod      */
DECL|method|setSignerCanonicalizationMethod (AlgorithmMethod canonicalizationMethod)
specifier|public
name|void
name|setSignerCanonicalizationMethod
parameter_list|(
name|AlgorithmMethod
name|canonicalizationMethod
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setCanonicalizationMethod
argument_list|(
name|canonicalizationMethod
argument_list|)
expr_stmt|;
block|}
comment|/**      * setSigners the reference name for a AlgorithmMethod that can be found in the registry.      * @param canonicalizationMethodName      */
DECL|method|setSignerCanonicalizationMethod (String canonicalizationMethodName)
specifier|public
name|void
name|setSignerCanonicalizationMethod
parameter_list|(
name|String
name|canonicalizationMethodName
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setCanonicalizationMethod
argument_list|(
name|canonicalizationMethodName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Classpath to the XML Schema. Must be specified in the detached XML      * Signature case for determining the ID attributes, might be setSigner in the      * enveloped and enveloping case. If setSigner, then the XML document is validated      * with the specified XML schema. The schema resource URI can be overwritten      * by the header {@link XmlSignatureConstants#HEADER_SCHEMA_RESOURCE_URI}.      * @param schemaResourceUri      */
DECL|method|setSignerSchemaResourceUri (String schemaResourceUri)
specifier|public
name|void
name|setSignerSchemaResourceUri
parameter_list|(
name|String
name|schemaResourceUri
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setSchemaResourceUri
argument_list|(
name|schemaResourceUri
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerOutputXmlEncoding ()
specifier|public
name|String
name|getSignerOutputXmlEncoding
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getOutputXmlEncoding
argument_list|()
return|;
block|}
comment|/**      * The character encoding of the resulting signed XML document. If      *<code>null</code> then the encoding of the original XML document is used.      * @param outputXmlEncoding      */
DECL|method|setSignerOutputXmlEncoding (String outputXmlEncoding)
specifier|public
name|void
name|setSignerOutputXmlEncoding
parameter_list|(
name|String
name|outputXmlEncoding
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setOutputXmlEncoding
argument_list|(
name|outputXmlEncoding
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerTransformMethods ()
specifier|public
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|getSignerTransformMethods
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getTransformMethods
argument_list|()
return|;
block|}
comment|/**      * Transforms which are executed on the message body before the digest is calculated.      * By default, C14n is added and in the case of enveloped signature (see option parentLocalName) also http://www.w3.org/2000/09/xmldsig#enveloped-signature      * is added at position 0 of the list. Use methods in XmlSignatureHelper to create the transform methods.      * @param transformMethods      */
DECL|method|setSignerTransformMethods (List<AlgorithmMethod> transformMethods)
specifier|public
name|void
name|setSignerTransformMethods
parameter_list|(
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|transformMethods
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setTransformMethods
argument_list|(
name|transformMethods
argument_list|)
expr_stmt|;
block|}
comment|/**      * setSigners the reference name for a List<AlgorithmMethod> that can be found in the registry.      * @param transformMethodsName      */
DECL|method|setSignerTransformMethods (String transformMethodsName)
specifier|public
name|void
name|setSignerTransformMethods
parameter_list|(
name|String
name|transformMethodsName
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setTransformMethods
argument_list|(
name|transformMethodsName
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerSignatureAlgorithm ()
specifier|public
name|String
name|getSignerSignatureAlgorithm
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getSignatureAlgorithm
argument_list|()
return|;
block|}
comment|/**      * Signature algorithm. Default value is      * "http://www.w3.org/2000/09/xmldsig#rsa-sha1".      * @param signatureAlgorithm      */
DECL|method|setSignerSignatureAlgorithm (String signatureAlgorithm)
specifier|public
name|void
name|setSignerSignatureAlgorithm
parameter_list|(
name|String
name|signatureAlgorithm
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setSignatureAlgorithm
argument_list|(
name|signatureAlgorithm
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerDigestAlgorithm ()
specifier|public
name|String
name|getSignerDigestAlgorithm
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getDigestAlgorithm
argument_list|()
return|;
block|}
comment|/**      * Digest algorithm URI. Optional parameter. This digest algorithm is used      * for calculating the digest of the input message. If this digest algorithm      * is not specified then the digest algorithm is calculated from the      * signature algorithm. Example: "http://www.w3.org/2001/04/xmlenc#sha256"      * @param digestAlgorithm      */
DECL|method|setSignerDigestAlgorithm (String digestAlgorithm)
specifier|public
name|void
name|setSignerDigestAlgorithm
parameter_list|(
name|String
name|digestAlgorithm
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setDigestAlgorithm
argument_list|(
name|digestAlgorithm
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerAddKeyInfoReference ()
specifier|public
name|Boolean
name|getSignerAddKeyInfoReference
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getAddKeyInfoReference
argument_list|()
return|;
block|}
comment|/**      * In order to protect the KeyInfo element from tampering you can add a      * reference to the signed info element so that it is protected via the      * signature value. The default value is<tt>true</tt>.      *<p>      * Only relevant when a KeyInfo is returned by {@link KeyAccessor}. and      * {@link KeyInfo#getId()} is not<code>null</code>.      * @param addKeyInfoReference      */
DECL|method|setSignerAddKeyInfoReference (Boolean addKeyInfoReference)
specifier|public
name|void
name|setSignerAddKeyInfoReference
parameter_list|(
name|Boolean
name|addKeyInfoReference
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setAddKeyInfoReference
argument_list|(
name|addKeyInfoReference
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerPrefixForXmlSignatureNamespace ()
specifier|public
name|String
name|getSignerPrefixForXmlSignatureNamespace
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
return|;
block|}
comment|/**      * Namespace prefix for the XML signature namespace      * "http://www.w3.org/2000/09/xmldsig#". Default value is "ds".      *      * If<code>null</code> or an empty value is setSigner then no prefix is used for      * the XML signature namespace.      *<p>      * See best practice      * http://www.w3.org/TR/xmldsig-bestpractices/#signing-xml-      * without-namespaces      *      * @param prefixForXmlSignatureNamespace      *            prefix      */
DECL|method|setSignerPrefixForXmlSignatureNamespace (String prefixForXmlSignatureNamespace)
specifier|public
name|void
name|setSignerPrefixForXmlSignatureNamespace
parameter_list|(
name|String
name|prefixForXmlSignatureNamespace
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setPrefixForXmlSignatureNamespace
argument_list|(
name|prefixForXmlSignatureNamespace
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerParentLocalName ()
specifier|public
name|String
name|getSignerParentLocalName
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getParentLocalName
argument_list|()
return|;
block|}
comment|/**      * Local name of the parent element to which the XML signature element will      * be added. Only relevant for enveloped XML signature. Alternatively you can      * also use {@link #setParentXpath(XPathFilterParameterSpec)}.      *      *<p> Default value is      *<code>null</code>. The value must be<code>null</code> for enveloping and      * detached XML signature.      *<p>      * This parameter or the parameter {@link #setParentXpath(XPathFilterParameterSpec)}      * for enveloped signature and the parameter {@link #setXpathsToIdAttributes(List)}      * for detached signature must not be setSigner in the same configuration.      *<p>      * If the parameters<tt>parentXpath</tt> and<tt>parentLocalName</tt> are specified      * in the same configuration then an exception is thrown.      *      * @param parentLocalName      *            local name      */
DECL|method|setSignerParentLocalName (String parentLocalName)
specifier|public
name|void
name|setSignerParentLocalName
parameter_list|(
name|String
name|parentLocalName
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setParentLocalName
argument_list|(
name|parentLocalName
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerParentNamespace ()
specifier|public
name|String
name|getSignerParentNamespace
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getParentNamespace
argument_list|()
return|;
block|}
comment|/**      * Namespace of the parent element to which the XML signature element will      * be added.      * @param parentNamespace      */
DECL|method|setSignerParentNamespace (String parentNamespace)
specifier|public
name|void
name|setSignerParentNamespace
parameter_list|(
name|String
name|parentNamespace
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setParentNamespace
argument_list|(
name|parentNamespace
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerContentObjectId ()
specifier|public
name|String
name|getSignerContentObjectId
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getContentObjectId
argument_list|()
return|;
block|}
comment|/**      * setSigners the content object Id attribute value. By default a UUID is      * generated. If you setSigner the<code>null</code> value, then a new UUID will      * be generated. Only used in the enveloping case.      * @param contentObjectId      */
DECL|method|setSignerContentObjectId (String contentObjectId)
specifier|public
name|void
name|setSignerContentObjectId
parameter_list|(
name|String
name|contentObjectId
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setContentObjectId
argument_list|(
name|contentObjectId
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerSignatureId ()
specifier|public
name|String
name|getSignerSignatureId
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getSignatureId
argument_list|()
return|;
block|}
comment|/**      * setSigners the signature Id. If this parameter is not setSigner (null value) then a      * unique ID is generated for the signature ID (default). If this parameter      * is setSigner to "" (empty string) then no Id attribute is created in the      * signature element.      * @param signatureId      */
DECL|method|setSignerSignatureId (String signatureId)
specifier|public
name|void
name|setSignerSignatureId
parameter_list|(
name|String
name|signatureId
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setSignatureId
argument_list|(
name|signatureId
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerContentReferenceUri ()
specifier|public
name|String
name|getSignerContentReferenceUri
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getContentReferenceUri
argument_list|()
return|;
block|}
comment|/**      * Reference URI for the content to be signed. Only used in the enveloped      * case. If the reference URI contains an ID attribute value, then the      * resource schema URI ( {@link #setSchemaResourceUri(String)}) must also be      * setSigner because the schema validator will then find out which attributes are      * ID attributes. Will be ignored in the enveloping or detached case.      * @param referenceUri      */
DECL|method|setSignerContentReferenceUri (String referenceUri)
specifier|public
name|void
name|setSignerContentReferenceUri
parameter_list|(
name|String
name|referenceUri
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setContentReferenceUri
argument_list|(
name|referenceUri
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerContentReferenceType ()
specifier|public
name|String
name|getSignerContentReferenceType
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getContentReferenceType
argument_list|()
return|;
block|}
comment|/**      * Type of the content reference. The default value is<code>null</code>.      * This value can be overwritten by the header      * {@link XmlSignatureConstants#HEADER_CONTENT_REFERENCE_TYPE}.      * @param referenceType      */
DECL|method|setSignerContentReferenceType (String referenceType)
specifier|public
name|void
name|setSignerContentReferenceType
parameter_list|(
name|String
name|referenceType
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setContentReferenceType
argument_list|(
name|referenceType
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerPlainText ()
specifier|public
name|Boolean
name|getSignerPlainText
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getPlainText
argument_list|()
return|;
block|}
comment|/**      * Indicator whether the message body contains plain text. The default value      * is<code>false</code>, indicating that the message body contains XML. The      * value can be overwritten by the header      * {@link XmlSignatureConstants#HEADER_MESSAGE_IS_PLAIN_TEXT}.      * @param plainText      */
DECL|method|setSignerPlainText (Boolean plainText)
specifier|public
name|void
name|setSignerPlainText
parameter_list|(
name|Boolean
name|plainText
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setPlainText
argument_list|(
name|plainText
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerPlainTextEncoding ()
specifier|public
name|String
name|getSignerPlainTextEncoding
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getPlainTextEncoding
argument_list|()
return|;
block|}
comment|/**      * Encoding of the plain text. Only relevant if the message body is plain      * text (see parameter {@link #plainText}. Default value is "UTF-8".      * @param plainTextEncoding      */
DECL|method|setSignerPlainTextEncoding (String plainTextEncoding)
specifier|public
name|void
name|setSignerPlainTextEncoding
parameter_list|(
name|String
name|plainTextEncoding
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setPlainTextEncoding
argument_list|(
name|plainTextEncoding
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerProperties ()
specifier|public
name|XmlSignatureProperties
name|getSignerProperties
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
return|;
block|}
comment|/**      * For adding additional References and Objects to the XML signature which contain additional properties,      * you can provide a bean which implements the XmlSignatureProperties interface.      * @param properties      */
DECL|method|setSignerProperties (XmlSignatureProperties properties)
specifier|public
name|void
name|setSignerProperties
parameter_list|(
name|XmlSignatureProperties
name|properties
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * setSigners the reference name for a XmlSignatureProperties that can be found in the registry.      * @param propertiesName      */
DECL|method|setSignerProperties (String propertiesName)
specifier|public
name|void
name|setSignerProperties
parameter_list|(
name|String
name|propertiesName
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setProperties
argument_list|(
name|propertiesName
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerXpathsToIdAttributes ()
specifier|public
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|getSignerXpathsToIdAttributes
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getXpathsToIdAttributes
argument_list|()
return|;
block|}
comment|/**      * Define the elements which are signed in the detached case via XPATH      * expressions to ID attributes (attributes of type ID). For each element      * found via the XPATH expression a detached signature is created whose      * reference URI contains the corresponding attribute value (preceded by      * '#'). The signature becomes the last sibling of the signed element.      * Elements with deeper hierarchy level are signed first.      *<p>      * You can also setSigner the XPATH list dynamically via the header      * {@link XmlSignatureConstants#HEADER_XPATHS_TO_ID_ATTRIBUTES}.      *<p>      * The parameter {@link #setParentLocalName(String)} or {@link #setParentXpath(XPathFilterParameterSpec)}      * for enveloped signature and this parameter for detached signature must not      * be setSigner in the same configuration.      * @param xpathsToIdAttributes      */
DECL|method|setSignerXpathsToIdAttributes (List<XPathFilterParameterSpec> xpathsToIdAttributes)
specifier|public
name|void
name|setSignerXpathsToIdAttributes
parameter_list|(
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|xpathsToIdAttributes
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setXpathsToIdAttributes
argument_list|(
name|xpathsToIdAttributes
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerParentXpath ()
specifier|public
name|XPathFilterParameterSpec
name|getSignerParentXpath
parameter_list|()
block|{
return|return
name|getSignerConfiguration
argument_list|()
operator|.
name|getParentXpath
argument_list|()
return|;
block|}
comment|/**      * setSigners the XPath to find the parent node in the enveloped case.      * Either you specify the parent node via this method or the local name and namespace of the parent      * with the methods {@link #setParentLocalName(String)} and {@link #setParentNamespace(String)}.      *<p>      * Default value is<code>null</code>. The value must be<code>null</code> for enveloping and      * detached XML signature.      *<p>      * If the parameters<tt>parentXpath</tt> and<tt>parentLocalName</tt> are specified      * in the same configuration then an exception is thrown.      *      * @param parentXpath xpath to the parent node, if the xpath returns several values then the first Element node is used      */
DECL|method|setSignerParentXpath (XPathFilterParameterSpec parentXpath)
specifier|public
name|void
name|setSignerParentXpath
parameter_list|(
name|XPathFilterParameterSpec
name|parentXpath
parameter_list|)
block|{
name|getSignerConfiguration
argument_list|()
operator|.
name|setParentXpath
argument_list|(
name|parentXpath
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierUriDereferencer ()
specifier|public
name|URIDereferencer
name|getVerifierUriDereferencer
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getUriDereferencer
argument_list|()
return|;
block|}
comment|/**      * If you want to restrict the remote access via reference URIs, you can setVerifier      * an own dereferencer. Optional parameter. If not setVerifier the provider default      * dereferencer is used which can resolve URI fragments, HTTP, file and      * XPpointer URIs.      *<p>      * Attention: The implementation is provider dependent!      *      * @see XMLCryptoContext#setURIDereferencer(URIDereferencer)      * @param uriDereferencer      */
DECL|method|setVerifierUriDereferencer (URIDereferencer uriDereferencer)
specifier|public
name|void
name|setVerifierUriDereferencer
parameter_list|(
name|URIDereferencer
name|uriDereferencer
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setUriDereferencer
argument_list|(
name|uriDereferencer
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierBaseUri ()
specifier|public
name|String
name|getVerifierBaseUri
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getBaseUri
argument_list|()
return|;
block|}
comment|/**      * You can setVerifier a base URI which is used in the URI dereferencing. Relative      * URIs are then concatenated with the base URI.      *      * @see XMLCryptoContext#setBaseURI(String)      * @param baseUri      */
DECL|method|setVerifierBaseUri (String baseUri)
specifier|public
name|void
name|setVerifierBaseUri
parameter_list|(
name|String
name|baseUri
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setBaseUri
argument_list|(
name|baseUri
argument_list|)
expr_stmt|;
block|}
comment|/**      * Provides the key for validating the XML signature.      * @param keySelector      */
DECL|method|setVerifierKeySelector (KeySelector keySelector)
specifier|public
name|void
name|setVerifierKeySelector
parameter_list|(
name|KeySelector
name|keySelector
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setKeySelector
argument_list|(
name|keySelector
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierKeySelector ()
specifier|public
name|KeySelector
name|getVerifierKeySelector
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getKeySelector
argument_list|()
return|;
block|}
comment|/**      * setVerifiers the reference name for a KeySelector that can be found in the registry.      * @param keySelectorName      */
DECL|method|setVerifierKeySelector (String keySelectorName)
specifier|public
name|void
name|setVerifierKeySelector
parameter_list|(
name|String
name|keySelectorName
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setKeySelector
argument_list|(
name|keySelectorName
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierXmlSignatureChecker ()
specifier|public
name|XmlSignatureChecker
name|getVerifierXmlSignatureChecker
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getXmlSignatureChecker
argument_list|()
return|;
block|}
DECL|method|getVerifierDisallowDoctypeDecl ()
specifier|public
name|Boolean
name|getVerifierDisallowDoctypeDecl
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getDisallowDoctypeDecl
argument_list|()
return|;
block|}
comment|/**      * This interface allows the application to check the XML signature before the validation is executed.      * This step is recommended in http://www.w3.org/TR/xmldsig-bestpractices/#check-what-is-signed      * @param xmlSignatureChecker      */
DECL|method|setVerifierXmlSignatureChecker (XmlSignatureChecker xmlSignatureChecker)
specifier|public
name|void
name|setVerifierXmlSignatureChecker
parameter_list|(
name|XmlSignatureChecker
name|xmlSignatureChecker
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setXmlSignatureChecker
argument_list|(
name|xmlSignatureChecker
argument_list|)
expr_stmt|;
block|}
comment|/**      * Disallows that the incoming XML document contains DTD DOCTYPE      * declaration. The default value is {@link Boolean#TRUE}.      *      * @param disallowDoctypeDecl if setVerifier to {@link Boolean#FALSE} then DOCTYPE declaration is allowed, otherwise not      */
DECL|method|setVerifierDisallowDoctypeDecl (Boolean disallowDoctypeDecl)
specifier|public
name|void
name|setVerifierDisallowDoctypeDecl
parameter_list|(
name|Boolean
name|disallowDoctypeDecl
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setDisallowDoctypeDecl
argument_list|(
name|disallowDoctypeDecl
argument_list|)
expr_stmt|;
block|}
comment|/**      * setVerifiers the reference name for a application checker that can be found in the registry.      * @param xmlSignatureCheckerName      */
DECL|method|setVerifierXmlSignatureChecker (String xmlSignatureCheckerName)
specifier|public
name|void
name|setVerifierXmlSignatureChecker
parameter_list|(
name|String
name|xmlSignatureCheckerName
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setXmlSignatureChecker
argument_list|(
name|xmlSignatureCheckerName
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierOmitXmlDeclaration ()
specifier|public
name|Boolean
name|getVerifierOmitXmlDeclaration
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getOmitXmlDeclaration
argument_list|()
return|;
block|}
comment|/**      * Indicator whether the XML declaration in the outgoing message body should      * be omitted. Default value is<code>false</code>. Can be overwritten by      * the header {@link XmlSignatureConstants#HEADER_OMIT_XML_DECLARATION}.      * @param omitXmlDeclaration      */
DECL|method|setVerifierOmitXmlDeclaration (Boolean omitXmlDeclaration)
specifier|public
name|void
name|setVerifierOmitXmlDeclaration
parameter_list|(
name|Boolean
name|omitXmlDeclaration
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setOmitXmlDeclaration
argument_list|(
name|omitXmlDeclaration
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierXmlSignature2Message ()
specifier|public
name|XmlSignature2Message
name|getVerifierXmlSignature2Message
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getXmlSignature2Message
argument_list|()
return|;
block|}
comment|/**      * Determines if the XML signature specific headers be cleared after signing      * and verification. Defaults to true.      *      * @return true if the Signature headers should be unset, false otherwise      */
DECL|method|getVerifierClearHeaders ()
specifier|public
name|Boolean
name|getVerifierClearHeaders
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getClearHeaders
argument_list|()
return|;
block|}
comment|/**      * Determines if the XML signature specific headers be cleared after signing      * and verification. Defaults to true.      * @param clearHeaders      */
DECL|method|setVerifierClearHeaders (Boolean clearHeaders)
specifier|public
name|void
name|setVerifierClearHeaders
parameter_list|(
name|Boolean
name|clearHeaders
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setClearHeaders
argument_list|(
name|clearHeaders
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierSchemaResourceUri ()
specifier|public
name|String
name|getVerifierSchemaResourceUri
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getSchemaResourceUri
argument_list|()
return|;
block|}
comment|/**      * Classpath to the XML Schema. Must be specified in the detached XML      * Signature case for determining the ID attributes, might be setVerifier in the      * enveloped and enveloping case. If setVerifier, then the XML document is validated      * with the specified XML schema. The schema resource URI can be overwritten      * by the header {@link XmlSignatureConstants#HEADER_SCHEMA_RESOURCE_URI}.      * @param schemaResourceUri      */
DECL|method|setVerifierSchemaResourceUri (String schemaResourceUri)
specifier|public
name|void
name|setVerifierSchemaResourceUri
parameter_list|(
name|String
name|schemaResourceUri
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setSchemaResourceUri
argument_list|(
name|schemaResourceUri
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierOutputXmlEncoding ()
specifier|public
name|String
name|getVerifierOutputXmlEncoding
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getOutputXmlEncoding
argument_list|()
return|;
block|}
comment|/**      * The character encoding of the resulting signed XML document. If      *<code>null</code> then the encoding of the original XML document is used.      * @param outputXmlEncoding      */
DECL|method|setVerifierOutputXmlEncoding (String outputXmlEncoding)
specifier|public
name|void
name|setVerifierOutputXmlEncoding
parameter_list|(
name|String
name|outputXmlEncoding
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setOutputXmlEncoding
argument_list|(
name|outputXmlEncoding
argument_list|)
expr_stmt|;
block|}
comment|/**      * Bean which maps the XML signature to the output-message after the validation.      * How this mapping should be done can be configured by the options outputNodeSearchType, outputNodeSearch, and removeSignatureElements.      * The default implementation offers three possibilities which are related to the three output node search types "Default", "ElementName", and "XPath".      * The default implementation determines a node which is then serialized and setVerifier to the body of the output message      * If the search type is "ElementName" then the output node (which must be in this case an element) is determined      * by the local name and namespace defined in the search value (see option outputNodeSearch).      * If the search type is "XPath" then the output node is determined by the XPath specified in the search value      * (in this case the output node can be of type "Element", "TextNode" or "Document").      * If the output node search type is "Default" then the following rules apply:      * In the enveloped XML signature case (there is a reference with URI="" and transform "http://www.w3.org/2000/09/xmldsig#enveloped-signature"),      * the incoming XML document without the Signature element is setVerifier to the output message body.      * In the non-enveloped XML signature case, the message body is determined from a referenced Object;      * this is explained in more detail in chapter "Output Node Determination in Enveloping XML Signature Case".      * @param xmlSignature2Message      */
DECL|method|setVerifierXmlSignature2Message (XmlSignature2Message xmlSignature2Message)
specifier|public
name|void
name|setVerifierXmlSignature2Message
parameter_list|(
name|XmlSignature2Message
name|xmlSignature2Message
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setXmlSignature2Message
argument_list|(
name|xmlSignature2Message
argument_list|)
expr_stmt|;
block|}
comment|/**      * setVerifiers the reference name for the to-message instance that can be found in      * the registry.      * @param xmlSignature2Message      */
DECL|method|setVerifierXmlSignature2Message (String xmlSignature2Message)
specifier|public
name|void
name|setVerifierXmlSignature2Message
parameter_list|(
name|String
name|xmlSignature2Message
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setXmlSignature2Message
argument_list|(
name|xmlSignature2Message
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierValidationFailedHandler ()
specifier|public
name|ValidationFailedHandler
name|getVerifierValidationFailedHandler
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getValidationFailedHandler
argument_list|()
return|;
block|}
comment|/**      * Handles the different validation failed situations.      * The default implementation throws specific exceptions for the different situations      * (All exceptions have the package name org.apache.camel.component.xmlsecurity.api and are a sub-class of XmlSignatureInvalidException.      * If the signature value validation fails, a XmlSignatureInvalidValueException is thrown.      * If a reference validation fails, a XmlSignatureInvalidContentHashException is thrown. For more detailed information, see the JavaDoc.      * @param validationFailedHandler      */
DECL|method|setVerifierValidationFailedHandler (ValidationFailedHandler validationFailedHandler)
specifier|public
name|void
name|setVerifierValidationFailedHandler
parameter_list|(
name|ValidationFailedHandler
name|validationFailedHandler
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setValidationFailedHandler
argument_list|(
name|validationFailedHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|setVerifierValidationFailedHandler (String validationFailedHandlerName)
specifier|public
name|void
name|setVerifierValidationFailedHandler
parameter_list|(
name|String
name|validationFailedHandlerName
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setValidationFailedHandler
argument_list|(
name|validationFailedHandlerName
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierOutputNodeSearch ()
specifier|public
name|Object
name|getVerifierOutputNodeSearch
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getOutputNodeSearch
argument_list|()
return|;
block|}
comment|/**      * setVerifiers the output node search value for determining the node from the XML      * signature document which shall be setVerifier to the output message body. The      * class of the value depends on the type of the output node search. The      * output node search is forwarded to {@link XmlSignature2Message}.      * @param outputNodeSearch      */
DECL|method|setVerifierOutputNodeSearch (Object outputNodeSearch)
specifier|public
name|void
name|setVerifierOutputNodeSearch
parameter_list|(
name|Object
name|outputNodeSearch
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setOutputNodeSearch
argument_list|(
name|outputNodeSearch
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierOutputNodeSearchType ()
specifier|public
name|String
name|getVerifierOutputNodeSearchType
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getOutputNodeSearchType
argument_list|()
return|;
block|}
comment|/**      * Determines the search type for determining the output node which is      * serialized into the output message bodyF. See      * {@link #setOutputNodeSearch(Object)}. The supported default search types      * you can find in {@link DefaultXmlSignature2Message}.      * @param outputNodeSearchType      */
DECL|method|setVerifierOutputNodeSearchType (String outputNodeSearchType)
specifier|public
name|void
name|setVerifierOutputNodeSearchType
parameter_list|(
name|String
name|outputNodeSearchType
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setOutputNodeSearchType
argument_list|(
name|outputNodeSearchType
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierRemoveSignatureElements ()
specifier|public
name|Boolean
name|getVerifierRemoveSignatureElements
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getRemoveSignatureElements
argument_list|()
return|;
block|}
comment|/**      * Indicator whether the XML signature elements (elements with local name      * "Signature" and namesapce ""http://www.w3.org/2000/09/xmldsig#"") shall      * be removed from the document setVerifier to the output message. Normally, this is      * only necessary, if the XML signature is enveloped. The default value is      * {@link Boolean#FALSE}. This parameter is forwarded to      * {@link XmlSignature2Message}.      *<p>      * This indicator has no effect if the output node search is of type      * {@link DefaultXmlSignature2Message#OUTPUT_NODE_SEARCH_TYPE_DEFAULT}.F      * @param removeSignatureElements      */
DECL|method|setVerifierRemoveSignatureElements (Boolean removeSignatureElements)
specifier|public
name|void
name|setVerifierRemoveSignatureElements
parameter_list|(
name|Boolean
name|removeSignatureElements
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setRemoveSignatureElements
argument_list|(
name|removeSignatureElements
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierSecureValidation ()
specifier|public
name|Boolean
name|getVerifierSecureValidation
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getSecureValidation
argument_list|()
return|;
block|}
comment|/**      * Enables secure validation. If true then secure validation is enabled.      * @param secureValidation      */
DECL|method|setVerifierSecureValidation (Boolean secureValidation)
specifier|public
name|void
name|setVerifierSecureValidation
parameter_list|(
name|Boolean
name|secureValidation
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setSecureValidation
argument_list|(
name|secureValidation
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifierValidationFailedHandlerName ()
specifier|public
name|String
name|getVerifierValidationFailedHandlerName
parameter_list|()
block|{
return|return
name|getVerifierConfiguration
argument_list|()
operator|.
name|getValidationFailedHandlerName
argument_list|()
return|;
block|}
comment|/**      * Name of handler to      * @param validationFailedHandlerName      */
DECL|method|setVerifierValidationFailedHandlerName (String validationFailedHandlerName)
specifier|public
name|void
name|setVerifierValidationFailedHandlerName
parameter_list|(
name|String
name|validationFailedHandlerName
parameter_list|)
block|{
name|getVerifierConfiguration
argument_list|()
operator|.
name|setValidationFailedHandlerName
argument_list|(
name|validationFailedHandlerName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

