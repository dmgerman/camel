begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|UnrecoverableKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|AlgorithmMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelectorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelectorResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|XMLCryptoContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_comment
comment|/**  * Default implementation for the key selector. The key is read from a key-store  * for a given alias. Depending on the purpose a private or public key is  * returned.  */
end_comment

begin_class
DECL|class|DefaultKeySelector
specifier|public
class|class
name|DefaultKeySelector
extends|extends
name|KeySelector
implements|implements
name|CamelContextAware
block|{
DECL|field|keyStoreAndAlias
specifier|private
specifier|final
name|KeyStoreAndAlias
name|keyStoreAndAlias
init|=
operator|new
name|KeyStoreAndAlias
argument_list|()
decl_stmt|;
DECL|field|nullKeyResult
specifier|private
name|KeySelectorResult
name|nullKeyResult
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|method|setKeyStore (KeyStore keyStore)
specifier|public
name|void
name|setKeyStore
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|)
block|{
name|keyStoreAndAlias
operator|.
name|setKeyStore
argument_list|(
name|keyStore
argument_list|)
expr_stmt|;
block|}
DECL|method|setAlias (String alias)
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|keyStoreAndAlias
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|keyStoreAndAlias
operator|.
name|setPassword
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setPassword
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setPassword (char[] password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|char
index|[]
name|password
parameter_list|)
block|{
name|keyStoreAndAlias
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
DECL|method|setKeyStoreParameters (KeyStoreParameters parameters)
specifier|public
name|void
name|setKeyStoreParameters
parameter_list|(
name|KeyStoreParameters
name|parameters
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|keyStoreAndAlias
operator|.
name|setKeyStore
argument_list|(
name|parameters
operator|.
name|createKeyStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|select (KeyInfo keyInfo, KeySelector.Purpose purpose, AlgorithmMethod method, XMLCryptoContext context)
specifier|public
name|KeySelectorResult
name|select
parameter_list|(
name|KeyInfo
name|keyInfo
parameter_list|,
name|KeySelector
operator|.
name|Purpose
name|purpose
parameter_list|,
name|AlgorithmMethod
name|method
parameter_list|,
name|XMLCryptoContext
name|context
parameter_list|)
throws|throws
name|KeySelectorException
block|{
if|if
condition|(
name|keyStoreAndAlias
operator|.
name|getKeyStore
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|getNullKeyResult
argument_list|()
return|;
block|}
if|if
condition|(
name|keyStoreAndAlias
operator|.
name|getAlias
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|getNullKeyResult
argument_list|()
return|;
block|}
if|if
condition|(
name|KeySelector
operator|.
name|Purpose
operator|.
name|VERIFY
operator|.
name|equals
argument_list|(
name|purpose
argument_list|)
condition|)
block|{
name|Certificate
name|cert
decl_stmt|;
try|try
block|{
name|cert
operator|=
name|keyStoreAndAlias
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getCertificate
argument_list|(
name|keyStoreAndAlias
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|cert
operator|==
literal|null
condition|)
block|{
return|return
name|getNullKeyResult
argument_list|()
return|;
block|}
specifier|final
name|Key
name|key
init|=
name|cert
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
return|return
name|getKeySelectorResult
argument_list|(
name|key
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|KeySelector
operator|.
name|Purpose
operator|.
name|SIGN
operator|.
name|equals
argument_list|(
name|purpose
argument_list|)
condition|)
block|{
if|if
condition|(
name|keyStoreAndAlias
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|getNullKeyResult
argument_list|()
return|;
block|}
name|Key
name|key
decl_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|getCamelContext
argument_list|()
operator|!=
literal|null
operator|&&
name|keyStoreAndAlias
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|passwordProperty
init|=
name|this
operator|.
name|getCamelContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
operator|new
name|String
argument_list|(
name|keyStoreAndAlias
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|key
operator|=
name|keyStoreAndAlias
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getKey
argument_list|(
name|keyStoreAndAlias
operator|.
name|getAlias
argument_list|()
argument_list|,
name|passwordProperty
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Error parsing property value: "
operator|+
operator|new
name|String
argument_list|(
name|keyStoreAndAlias
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|key
operator|=
name|keyStoreAndAlias
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getKey
argument_list|(
name|keyStoreAndAlias
operator|.
name|getAlias
argument_list|()
argument_list|,
name|keyStoreAndAlias
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnrecoverableKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|getKeySelectorResult
argument_list|(
name|key
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Purpose "
operator|+
name|purpose
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
DECL|method|getKeyStore ()
name|KeyStore
name|getKeyStore
parameter_list|()
block|{
return|return
name|keyStoreAndAlias
operator|.
name|getKeyStore
argument_list|()
return|;
block|}
DECL|method|getAlias ()
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|keyStoreAndAlias
operator|.
name|getAlias
argument_list|()
return|;
block|}
DECL|method|getKeySelectorResult (final Key key)
specifier|private
name|KeySelectorResult
name|getKeySelectorResult
parameter_list|(
specifier|final
name|Key
name|key
parameter_list|)
block|{
return|return
operator|new
name|KeySelectorResult
argument_list|()
block|{
specifier|public
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
block|}
return|;
block|}
DECL|method|getNullKeyResult ()
specifier|private
name|KeySelectorResult
name|getNullKeyResult
parameter_list|()
block|{
if|if
condition|(
name|nullKeyResult
operator|==
literal|null
condition|)
block|{
name|nullKeyResult
operator|=
operator|new
name|KeySelectorResult
argument_list|()
block|{
specifier|public
name|Key
name|getKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|nullKeyResult
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext context)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
block|}
end_class

end_unit

