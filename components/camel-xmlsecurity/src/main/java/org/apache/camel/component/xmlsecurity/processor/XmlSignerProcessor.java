begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidAlgorithmParameterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|AlgorithmMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dom
operator|.
name|DOMStructure
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|CanonicalizationMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|DigestMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|SignatureMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|SignedInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|Transform
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignatureException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignatureFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|dom
operator|.
name|DOMSignContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|spec
operator|.
name|C14NMethodParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|spec
operator|.
name|TransformParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|spec
operator|.
name|XPathFilterParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|KeyAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|SignatureType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureInvalidKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureNoKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|validation
operator|.
name|DefaultValidationErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|validation
operator|.
name|ValidatorErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Creates from the message body a XML signature element which is returned in  * the message body of the output message. Enveloped, enveloping XML, and  * detached signatures are supported.  *<p>  * In the enveloped XML signature case, the method  * {@link XmlSignerConfiguration#getParentLocalName()} must not return  *<code>null</code>. In this case the parent element must be contained in the  * XML document provided by the message body and the signature element is added  * as last child element of the parent element. If a KeyInfo instance is  * provided by the {@link KeyAccessor} and  * {@link XmlSignerConfiguration#getAddKeyInfoReference()} is<code>true</code>,  * then also a reference to the KeyInfo element is added. The generated XML  * signature has the following structure:  *   *<pre>  * {@code  *<[parent element]>  *     ...  *<Signature Id="[signature_id]">  *<SignedInfo>  *<Reference URI="">   *<Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>  *                      (<Transform>)*  *<DigestMethod>  *<DigestValue>  *</Reference>  *                (<Reference URI="#[keyinfo_Id]">  *<Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>  *<DigestMethod>  *<DigestValue>  *</Reference>)?  *<!-- further references possible, see XmlSignerConfiguration#setProperties(XmlSignatureProperties) -->  *</SignedInfo>  *<SignatureValue>  *         (<KeyInfo Id="[keyinfo_id]">)?  *<!-- Object elements possible, see XmlSignerConfiguration#setProperties(XmlSignatureProperties) -->  *</Signature>  *</[parent element]>  * }  *</pre>  *<p>  * In the enveloping XML signature case, the generated XML signature has the  * following structure:  *   *<pre>  *  {@code  *<Signature Id="[signature_id]">  *<SignedInfo>  *<Reference URI="#[object_id]" type="[optional_type_value]">   *                  (<Transform>)*  *<DigestMethod>  *<DigestValue>  *</Reference>  *            (<Reference URI="#[keyinfo_id]">  *<Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>  *<DigestMethod>  *<DigestValue>  *</Reference>)?  *<!-- further references possible, see XmlSignerConfiguration#setProperties(XmlSignatureProperties) -->  *</SignedInfo>  *<SignatureValue>  *     (<KeyInfo Id="[keyinfo_id]">)?  *<Object Id="[object_id]"/>  *<!-- further Object elements possible, see XmlSignerConfiguration#setProperties(XmlSignatureProperties) -->  *</Signature>     *  }  *</pre>  *   * In the enveloping XML signature case, also message bodies containing plain  * text are supported. This must be indicated via the header  * {@link XmlSignatureConstants#HEADER_MESSAGE_IS_PLAIN_TEXT} or via the  * configuration {@link XmlSignerConfiguration#getPlainText()}.  *   *<p>  * Detached signatures where the signature element is a sibling element to the  * signed element are supported. Those elements can be signed which have ID  * attributes. The elements to be signed must be specified via xpath expressions  * (see {@link XmlSignerConfiguration#setXpathsToIdAttributes(List)}) and the  * XML schema must be provided via the schema resource URI (see method  * {@link XmlSignerConfiguration#setSchemaResourceUri(String)}. Elements with  * deeper hierarchy level are signed first. This procedure can result in nested  * signatures.  *   *<p>  * In all cases, the digest algorithm is either read from the configuration  * method {@link XmlSignerConfiguration#getDigestAlgorithm()} or calculated from  * the signature algorithm (  * {@link XmlSignerConfiguration#getSignatureAlgorithm()}. The optional  * transforms are read from {@link XmlSignerConfiguration#getTransformMethods()}  * .  *<p>  * In all cases, you can add additional references and objects which contain  * properties for the XML signature, see  * {@link XmlSignerConfiguration#setProperties(XmlSignatureProperties)}.  */
end_comment

begin_class
DECL|class|XmlSignerProcessor
specifier|public
class|class
name|XmlSignerProcessor
extends|extends
name|XmlSignatureProcessor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XmlSignerProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SHA512
specifier|private
specifier|static
specifier|final
name|String
name|SHA512
init|=
literal|"sha512"
decl_stmt|;
DECL|field|SHA384
specifier|private
specifier|static
specifier|final
name|String
name|SHA384
init|=
literal|"sha384"
decl_stmt|;
DECL|field|SHA256
specifier|private
specifier|static
specifier|final
name|String
name|SHA256
init|=
literal|"sha256"
decl_stmt|;
DECL|field|SHA224
specifier|private
specifier|static
specifier|final
name|String
name|SHA224
init|=
literal|"sha224"
decl_stmt|;
DECL|field|SHA1
specifier|private
specifier|static
specifier|final
name|String
name|SHA1
init|=
literal|"sha1"
decl_stmt|;
DECL|field|RIPEMD160
specifier|private
specifier|static
specifier|final
name|String
name|RIPEMD160
init|=
literal|"ripemd160"
decl_stmt|;
DECL|field|HTTP_WWW_W3_ORG_2001_04_XMLDSIG_MORE_SHA224
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_WWW_W3_ORG_2001_04_XMLDSIG_MORE_SHA224
init|=
literal|"http://www.w3.org/2001/04/xmldsig-more#sha224"
decl_stmt|;
comment|// see RFC 4051
DECL|field|HTTP_WWW_W3_ORG_2001_04_XMLDSIG_MORE_SHA384
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_WWW_W3_ORG_2001_04_XMLDSIG_MORE_SHA384
init|=
literal|"http://www.w3.org/2001/04/xmldsig-more#sha384"
decl_stmt|;
comment|// see RFC 4051
DECL|field|config
specifier|private
specifier|final
name|XmlSignerConfiguration
name|config
decl_stmt|;
DECL|method|XmlSignerProcessor (XmlSignerConfiguration config)
specifier|public
name|XmlSignerProcessor
parameter_list|(
name|XmlSignerConfiguration
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|XmlSignerConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|config
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"XML signature generation started using algorithm {} and canonicalization method {}"
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getCanonicalizationMethod
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets setup the out message before we invoke the signing
comment|// so that it can mutate it if necessary
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|out
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|outputDoc
init|=
name|sign
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|outStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|XmlSignatureHelper
operator|.
name|transformNonTextNodeToOutputStream
argument_list|(
name|outputDoc
argument_list|,
name|outStream
argument_list|,
name|omitXmlDeclaration
argument_list|(
name|out
argument_list|)
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getOutputXmlEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|outStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|out
operator|.
name|setBody
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|setOutputEncodingToMessageHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|clearMessageHeaders
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"XML signature generation finished"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// remove OUT message, as an exception occurred
name|exchange
operator|.
name|setOut
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|sign (final Message out)
specifier|protected
name|Document
name|sign
parameter_list|(
specifier|final
name|Message
name|out
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
try|try
block|{
name|XMLSignatureFactory
name|fac
decl_stmt|;
comment|// Try to install the Santuario Provider - fall back to the JDK provider if this does
comment|// not work
try|try
block|{
name|fac
operator|=
name|XMLSignatureFactory
operator|.
name|getInstance
argument_list|(
literal|"DOM"
argument_list|,
literal|"ApacheXMLDSig"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProviderException
name|ex
parameter_list|)
block|{
name|fac
operator|=
name|XMLSignatureFactory
operator|.
name|getInstance
argument_list|(
literal|"DOM"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Node
name|node
init|=
name|getMessageBodyNode
argument_list|(
name|out
argument_list|)
decl_stmt|;
specifier|final
name|KeySelector
name|keySelector
init|=
name|getConfiguration
argument_list|()
operator|.
name|getKeyAccessor
argument_list|()
operator|.
name|getKeySelector
argument_list|(
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
name|keySelector
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureNoKeyException
argument_list|(
literal|"Key selector is missing for XML signature generation. Specify a key selector in the configuration."
argument_list|)
throw|;
block|}
name|SignatureType
name|signatureType
init|=
name|determineSignatureType
argument_list|(
name|out
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|contentReferenceUris
init|=
name|getContentReferenceUris
argument_list|(
name|out
argument_list|,
name|signatureType
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|Node
name|lastParent
init|=
literal|null
decl_stmt|;
comment|// per content reference URI a signature is built; for enveloped and enveloping there is only one content reference URI;
comment|// only in the detached case there can be several
for|for
control|(
specifier|final
name|String
name|contentReferenceUri
range|:
name|contentReferenceUris
control|)
block|{
comment|// the method KeyAccessor.getKeyInfo must be called after the method KeyAccessor.getKeySelector, this is part of the interface contract!
comment|// and this method must be called within the loop over the content reference URIs, because for each signature the key info ID must be different
specifier|final
name|KeyInfo
name|keyInfo
init|=
name|getConfiguration
argument_list|()
operator|.
name|getKeyAccessor
argument_list|()
operator|.
name|getKeyInfo
argument_list|(
name|out
argument_list|,
name|node
argument_list|,
name|fac
operator|.
name|getKeyInfoFactory
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|signatureId
init|=
name|getConfiguration
argument_list|()
operator|.
name|getSignatureId
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureId
operator|==
literal|null
condition|)
block|{
name|signatureId
operator|=
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signatureId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// indicator that no signature Id attribute shall be generated
name|signatureId
operator|=
literal|null
expr_stmt|;
block|}
comment|// parent only relevant for enveloped or detached signature
name|Node
name|parent
init|=
name|getParentOfSignature
argument_list|(
name|out
argument_list|,
name|node
argument_list|,
name|contentReferenceUri
argument_list|,
name|signatureType
argument_list|)
decl_stmt|;
name|XmlSignatureProperties
operator|.
name|Input
name|input
init|=
operator|new
name|InputBuilder
argument_list|()
operator|.
name|contentDigestAlgorithm
argument_list|(
name|getDigestAlgorithmUri
argument_list|()
argument_list|)
operator|.
name|keyInfo
argument_list|(
name|keyInfo
argument_list|)
operator|.
name|message
argument_list|(
name|out
argument_list|)
operator|.
name|messageBodyNode
argument_list|(
name|node
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|signatureAlgorithm
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|)
operator|.
name|signatureFactory
argument_list|(
name|fac
argument_list|)
operator|.
name|signatureId
argument_list|(
name|signatureId
argument_list|)
operator|.
name|contentReferenceUri
argument_list|(
name|contentReferenceUri
argument_list|)
operator|.
name|signatureType
argument_list|(
name|signatureType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|XmlSignatureProperties
operator|.
name|Output
name|properties
init|=
name|getSignatureProperties
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|XMLObject
argument_list|>
name|objects
init|=
name|getObjects
argument_list|(
name|input
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Reference
argument_list|>
name|refs
init|=
name|getReferences
argument_list|(
name|input
argument_list|,
name|properties
argument_list|,
name|getKeyInfoId
argument_list|(
name|keyInfo
argument_list|)
argument_list|)
decl_stmt|;
name|SignedInfo
name|si
init|=
name|createSignedInfo
argument_list|(
name|fac
argument_list|,
name|refs
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// for enveloping signature, create new document
name|parent
operator|=
name|XmlSignatureHelper
operator|.
name|newDocumentBuilder
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|newDocument
argument_list|()
expr_stmt|;
block|}
name|lastParent
operator|=
name|parent
expr_stmt|;
name|DOMSignContext
name|dsc
init|=
name|createAndConfigureSignContext
argument_list|(
name|parent
argument_list|,
name|keySelector
argument_list|)
decl_stmt|;
name|XMLSignature
name|signature
init|=
name|fac
operator|.
name|newXMLSignature
argument_list|(
name|si
argument_list|,
name|keyInfo
argument_list|,
name|objects
argument_list|,
name|signatureId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// generate the signature
name|signature
operator|.
name|sign
argument_list|(
name|dsc
argument_list|)
expr_stmt|;
block|}
return|return
name|XmlSignatureHelper
operator|.
name|getDocument
argument_list|(
name|lastParent
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLSignatureException
name|se
parameter_list|)
block|{
if|if
condition|(
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InvalidKeyException
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureInvalidKeyException
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
comment|// like NoSuchAlgorithmException, InvalidAlgorithmParameterException, NoSuchProviderException
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|determineSignatureType (Message message)
specifier|private
name|SignatureType
name|determineSignatureType
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|XmlSignatureException
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getParentLocalName
argument_list|()
operator|!=
literal|null
operator|&&
name|getConfiguration
argument_list|()
operator|.
name|getParentXpath
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The configuration of the XML signer component is wrong. The parent local name "
operator|+
name|getConfiguration
argument_list|()
operator|.
name|getParentLocalName
argument_list|()
operator|+
literal|" and the parent XPath "
operator|+
name|getConfiguration
argument_list|()
operator|.
name|getParentXpath
argument_list|()
operator|.
name|getXPath
argument_list|()
operator|+
literal|" are specified. You must not specify both parameters."
argument_list|)
throw|;
block|}
name|boolean
name|isEnveloped
init|=
name|getConfiguration
argument_list|()
operator|.
name|getParentLocalName
argument_list|()
operator|!=
literal|null
operator|||
name|getConfiguration
argument_list|()
operator|.
name|getParentXpath
argument_list|()
operator|!=
literal|null
decl_stmt|;
name|boolean
name|isDetached
init|=
name|getXpathToIdAttributes
argument_list|(
name|message
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|isEnveloped
operator|&&
name|isDetached
condition|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getParentLocalName
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The configuration of the XML signer component is wrong. The parent local name "
operator|+
name|getConfiguration
argument_list|()
operator|.
name|getParentLocalName
argument_list|()
operator|+
literal|" for an enveloped signature and the XPATHs to ID attributes for a detached signature are specified. You must not specify both parameters."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The configuration of the XML signer component is wrong. The parent XPath "
operator|+
name|getConfiguration
argument_list|()
operator|.
name|getParentXpath
argument_list|()
operator|.
name|getXPath
argument_list|()
operator|+
literal|" for an enveloped signature and the XPATHs to ID attributes for a detached signature are specified. You must not specify both parameters."
argument_list|)
throw|;
block|}
block|}
name|SignatureType
name|result
decl_stmt|;
if|if
condition|(
name|isEnveloped
condition|)
block|{
name|result
operator|=
name|SignatureType
operator|.
name|enveloped
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isDetached
condition|)
block|{
if|if
condition|(
name|getSchemaResourceUri
argument_list|(
name|message
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The configruation of the XML Signature component is wrong: No XML schema specified in the detached case"
argument_list|)
throw|;
block|}
name|result
operator|=
name|SignatureType
operator|.
name|detached
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|SignatureType
operator|.
name|enveloping
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Signature type: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getXpathToIdAttributes (Message message)
specifier|protected
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|getXpathToIdAttributes
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|result
init|=
operator|(
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XPATHS_TO_ID_ATTRIBUTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getXpathsToIdAttributes
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getSignatureProperties (XmlSignatureProperties.Input input)
specifier|protected
name|XmlSignatureProperties
operator|.
name|Output
name|getSignatureProperties
parameter_list|(
name|XmlSignatureProperties
operator|.
name|Input
name|input
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
name|XmlSignatureProperties
name|propGetter
init|=
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|XmlSignatureProperties
operator|.
name|Output
name|propsOutput
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|propGetter
operator|!=
literal|null
condition|)
block|{
name|propsOutput
operator|=
name|propGetter
operator|.
name|get
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
return|return
name|propsOutput
return|;
block|}
DECL|method|createAndConfigureSignContext (Node parent, KeySelector keySelector)
specifier|private
name|DOMSignContext
name|createAndConfigureSignContext
parameter_list|(
name|Node
name|parent
parameter_list|,
name|KeySelector
name|keySelector
parameter_list|)
block|{
name|DOMSignContext
name|dsc
init|=
operator|new
name|DOMSignContext
argument_list|(
name|keySelector
argument_list|,
name|parent
argument_list|)
decl_stmt|;
comment|// set namespace prefix for "http://www.w3.org/2000/09/xmldsig#" according to best practice described in http://www.w3.org/TR/xmldsig-bestpractices/#signing-xml-without-namespaces
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getConfiguration
argument_list|()
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dsc
operator|.
name|putNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dsc
operator|.
name|putNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2001/10/xml-exc-c14n#"
argument_list|,
literal|"ec"
argument_list|)
expr_stmt|;
name|setCryptoContextProperties
argument_list|(
name|dsc
argument_list|)
expr_stmt|;
name|setUriDereferencerAndBaseUri
argument_list|(
name|dsc
argument_list|)
expr_stmt|;
return|return
name|dsc
return|;
block|}
DECL|method|omitXmlDeclaration (Message message)
specifier|protected
name|Boolean
name|omitXmlDeclaration
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Boolean
name|omitXmlDeclaration
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_OMIT_XML_DECLARATION
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|omitXmlDeclaration
operator|==
literal|null
condition|)
block|{
name|omitXmlDeclaration
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getOmitXmlDeclaration
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|omitXmlDeclaration
operator|==
literal|null
condition|)
block|{
name|omitXmlDeclaration
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Omit XML declaration: {}"
argument_list|,
name|omitXmlDeclaration
argument_list|)
expr_stmt|;
return|return
name|omitXmlDeclaration
return|;
block|}
DECL|method|createSignedInfo (XMLSignatureFactory fac, List<? extends Reference> refs)
specifier|protected
name|SignedInfo
name|createSignedInfo
parameter_list|(
name|XMLSignatureFactory
name|fac
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Reference
argument_list|>
name|refs
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
return|return
name|fac
operator|.
name|newSignedInfo
argument_list|(
name|fac
operator|.
name|newCanonicalizationMethod
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getCanonicalizationMethod
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
operator|(
name|C14NMethodParameterSpec
operator|)
name|getConfiguration
argument_list|()
operator|.
name|getCanonicalizationMethod
argument_list|()
operator|.
name|getParameterSpec
argument_list|()
argument_list|)
argument_list|,
name|getSignatureMethod
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|,
name|fac
argument_list|)
argument_list|,
name|refs
argument_list|)
return|;
block|}
DECL|method|getSignatureMethod (String signatureAlgorithm, XMLSignatureFactory fac)
specifier|private
name|SignatureMethod
name|getSignatureMethod
parameter_list|(
name|String
name|signatureAlgorithm
parameter_list|,
name|XMLSignatureFactory
name|fac
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|InvalidAlgorithmParameterException
block|{
return|return
name|fac
operator|.
name|newSignatureMethod
argument_list|(
name|signatureAlgorithm
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getMessageBodyNode (Message message)
specifier|protected
name|Node
name|getMessageBodyNode
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
name|InputStream
name|is
init|=
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|isPlainText
init|=
name|isPlainText
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Node
name|node
decl_stmt|;
if|if
condition|(
name|isPlainText
operator|!=
literal|null
operator|&&
name|isPlainText
condition|)
block|{
name|node
operator|=
name|getTextNode
argument_list|(
name|message
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ValidatorErrorHandler
name|errorHandler
init|=
operator|new
name|DefaultValidationErrorHandler
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
name|getSchemaForSigner
argument_list|(
name|message
argument_list|,
name|errorHandler
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|parseInput
argument_list|(
name|is
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getDisallowDoctypeDecl
argument_list|()
argument_list|,
name|schema
argument_list|,
name|errorHandler
argument_list|)
decl_stmt|;
name|errorHandler
operator|.
name|handleErrors
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
name|schema
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// throws ValidationException
name|node
operator|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Root element of document to be signed: {}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
DECL|method|getSchemaForSigner (Message message, ValidatorErrorHandler errorHandler)
specifier|protected
name|Schema
name|getSchemaForSigner
parameter_list|(
name|Message
name|message
parameter_list|,
name|ValidatorErrorHandler
name|errorHandler
parameter_list|)
throws|throws
name|XmlSignatureException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|Schema
name|schema
decl_stmt|;
name|String
name|schemaResourceUri
init|=
name|getSchemaResourceUri
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaResourceUri
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|schema
operator|=
name|getSchema
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|schema
return|;
block|}
DECL|method|isPlainText (Message message)
specifier|protected
name|Boolean
name|isPlainText
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Boolean
name|isPlainText
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_MESSAGE_IS_PLAIN_TEXT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPlainText
operator|==
literal|null
condition|)
block|{
name|isPlainText
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getPlainText
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Is plain text: {}"
argument_list|,
name|isPlainText
argument_list|)
expr_stmt|;
return|return
name|isPlainText
return|;
block|}
DECL|method|getParentOfSignature (Message inMessage, Node messageBodyNode, String contentReferenceURI, SignatureType sigType)
specifier|protected
name|Element
name|getParentOfSignature
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Node
name|messageBodyNode
parameter_list|,
name|String
name|contentReferenceURI
parameter_list|,
name|SignatureType
name|sigType
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
if|if
condition|(
name|SignatureType
operator|.
name|enveloping
operator|==
name|sigType
condition|)
block|{
comment|// enveloping case
return|return
literal|null
return|;
block|}
if|if
condition|(
name|messageBodyNode
operator|.
name|getParentNode
argument_list|()
operator|==
literal|null
operator|||
name|messageBodyNode
operator|.
name|getParentNode
argument_list|()
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureFormatException
argument_list|(
literal|"Incomming message has wrong format: It is not an XML document. Cannot create an enveloped or detached XML signature."
argument_list|)
throw|;
block|}
name|Document
name|doc
init|=
operator|(
name|Document
operator|)
name|messageBodyNode
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|SignatureType
operator|.
name|detached
operator|==
name|sigType
condition|)
block|{
return|return
name|getParentForDetachedCase
argument_list|(
name|doc
argument_list|,
name|inMessage
argument_list|,
name|contentReferenceURI
argument_list|)
return|;
block|}
else|else
block|{
comment|// enveloped case
return|return
name|getParentForEnvelopedCase
argument_list|(
name|doc
argument_list|,
name|inMessage
argument_list|)
return|;
block|}
block|}
DECL|method|getParentForEnvelopedCase (Document doc, Message inMessage)
specifier|protected
name|Element
name|getParentForEnvelopedCase
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Message
name|inMessage
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getParentXpath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XPathFilterParameterSpec
name|xp
init|=
name|getConfiguration
argument_list|()
operator|.
name|getParentXpath
argument_list|()
decl_stmt|;
name|XPathExpression
name|exp
decl_stmt|;
try|try
block|{
name|exp
operator|=
name|XmlSignatureHelper
operator|.
name|getXPathExpression
argument_list|(
name|xp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The parent XPath "
operator|+
name|getConfiguration
argument_list|()
operator|.
name|getParentXpath
argument_list|()
operator|.
name|getXPath
argument_list|()
operator|+
literal|" is wrongly configured: The XPath "
operator|+
name|xp
operator|.
name|getXPath
argument_list|()
operator|+
literal|" is invalid."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NodeList
name|list
init|=
operator|(
name|NodeList
operator|)
name|exp
operator|.
name|evaluate
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The parent XPath "
operator|+
name|xp
operator|.
name|getXPath
argument_list|()
operator|+
literal|" returned no result. Check the configuration of the XML signer component."
argument_list|)
throw|;
block|}
name|int
name|length
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
comment|// return the first element
return|return
operator|(
name|Element
operator|)
name|node
return|;
block|}
block|}
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The parent XPath "
operator|+
name|xp
operator|.
name|getXPath
argument_list|()
operator|+
literal|" returned no element. Check the configuration of the XML signer component."
argument_list|)
throw|;
block|}
else|else
block|{
comment|// parent local name is not null!
name|NodeList
name|parents
init|=
name|doc
operator|.
name|getElementsByTagNameNS
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getParentNamespace
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getParentLocalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
operator|||
name|parents
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureFormatException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incoming message has wrong format: The parent element with the local name %s and the namespace %s was not found in the message to build an enveloped XML signature."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getParentLocalName
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getParentNamespace
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// return the first element
return|return
operator|(
name|Element
operator|)
name|parents
operator|.
name|item
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
DECL|method|getParentForDetachedCase (Document doc, Message inMessage, String referenceUri)
specifier|private
name|Element
name|getParentForDetachedCase
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Message
name|inMessage
parameter_list|,
name|String
name|referenceUri
parameter_list|)
throws|throws
name|XmlSignatureException
block|{
name|String
name|elementId
init|=
name|referenceUri
decl_stmt|;
if|if
condition|(
name|elementId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|elementId
operator|=
name|elementId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Element
name|el
init|=
name|doc
operator|.
name|getElementById
argument_list|(
name|elementId
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
comment|// should not happen because has been checked before
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No element found for element ID "
operator|+
name|elementId
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sibling element of the detached XML Signature with reference URI {}: {}  {} "
argument_list|,
operator|new
name|Object
index|[]
block|{
name|referenceUri
block|,
name|el
operator|.
name|getLocalName
argument_list|()
block|,
name|el
operator|.
name|getNamespaceURI
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Element
name|result
init|=
name|getParentElement
argument_list|(
name|el
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"Either the configuration of the XML Signature component is wrong or the incoming document has an invalid structure: The element "
operator|+
name|el
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"{"
operator|+
name|el
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"} which is referenced by the reference URI "
operator|+
name|referenceUri
operator|+
literal|" has no parent element. The element must have a parent element in the configured detached case."
argument_list|)
throw|;
block|}
block|}
DECL|method|getParentElement (Node node)
specifier|private
name|Element
name|getParentElement
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
operator|&&
name|counter
operator|<
literal|10000
condition|)
block|{
comment|// counter is for avoiding security attacks
name|Node
name|parent
init|=
name|node
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|parent
return|;
block|}
name|node
operator|=
name|parent
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getReferences (XmlSignatureProperties.Input input, XmlSignatureProperties.Output properties, String keyInfoId)
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|Reference
argument_list|>
name|getReferences
parameter_list|(
name|XmlSignatureProperties
operator|.
name|Input
name|input
parameter_list|,
name|XmlSignatureProperties
operator|.
name|Output
name|properties
parameter_list|,
name|String
name|keyInfoId
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
comment|// Create Reference with URI="#<objectId>" for enveloping signature, URI="" for enveloped signature, and URI =<value from configuration> for detached signature and the transforms
name|Reference
name|ref
init|=
name|createReference
argument_list|(
name|input
operator|.
name|getSignatureFactory
argument_list|()
argument_list|,
name|input
operator|.
name|getContentReferenceUri
argument_list|()
argument_list|,
name|getContentReferenceType
argument_list|(
name|input
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|input
operator|.
name|getSignatureType
argument_list|()
argument_list|)
decl_stmt|;
name|Reference
name|keyInfoRef
init|=
name|createKeyInfoReference
argument_list|(
name|input
operator|.
name|getSignatureFactory
argument_list|()
argument_list|,
name|keyInfoId
argument_list|,
name|input
operator|.
name|getContentDigestAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|propsRefsSize
init|=
name|properties
operator|==
literal|null
operator|||
name|properties
operator|.
name|getReferences
argument_list|()
operator|==
literal|null
operator|||
name|properties
operator|.
name|getReferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|properties
operator|.
name|getReferences
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|keyInfoRef
operator|==
literal|null
condition|?
name|propsRefsSize
operator|+
literal|1
else|:
name|propsRefsSize
operator|+
literal|2
decl_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
operator|new
name|ArrayList
argument_list|<
name|Reference
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|referenceList
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyInfoRef
operator|!=
literal|null
condition|)
block|{
name|referenceList
operator|.
name|add
argument_list|(
name|keyInfoRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
name|properties
operator|.
name|getReferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|properties
operator|.
name|getReferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|referenceList
operator|.
name|addAll
argument_list|(
name|properties
operator|.
name|getReferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|referenceList
return|;
block|}
DECL|method|getObjects (XmlSignatureProperties.Input input, XmlSignatureProperties.Output properties)
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|XMLObject
argument_list|>
name|getObjects
parameter_list|(
name|XmlSignatureProperties
operator|.
name|Input
name|input
parameter_list|,
name|XmlSignatureProperties
operator|.
name|Output
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
if|if
condition|(
name|SignatureType
operator|.
name|enveloped
operator|==
name|input
operator|.
name|getSignatureType
argument_list|()
operator|||
name|SignatureType
operator|.
name|detached
operator|==
name|input
operator|.
name|getSignatureType
argument_list|()
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
operator|||
name|properties
operator|.
name|getObjects
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|properties
operator|.
name|getObjects
argument_list|()
return|;
block|}
comment|// enveloping signature --> add additional object
specifier|final
name|String
name|objectId
init|=
name|getConfiguration
argument_list|()
operator|.
name|getContentObjectId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Object Content Id {}"
argument_list|,
name|objectId
argument_list|)
expr_stmt|;
name|XMLObject
name|obj
init|=
name|createXMLObject
argument_list|(
name|input
operator|.
name|getSignatureFactory
argument_list|()
argument_list|,
name|input
operator|.
name|getMessageBodyNode
argument_list|()
argument_list|,
name|objectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
operator|||
name|properties
operator|.
name|getObjects
argument_list|()
operator|==
literal|null
operator|||
name|properties
operator|.
name|getObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|obj
argument_list|)
return|;
block|}
name|List
argument_list|<
name|XMLObject
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|XMLObject
argument_list|>
argument_list|(
name|properties
operator|.
name|getObjects
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|properties
operator|.
name|getObjects
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getTextNode (Message inMessage, InputStream is)
specifier|private
name|Node
name|getTextNode
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|XmlSignatureException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Message body to be signed is plain text"
argument_list|)
expr_stmt|;
name|String
name|encoding
init|=
name|getMessageEncoding
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|bos
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|text
init|=
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
return|return
name|XmlSignatureHelper
operator|.
name|newDocumentBuilder
argument_list|(
literal|true
argument_list|)
operator|.
name|newDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
name|text
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The message encoding %s is not supported."
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getMessageEncoding (Message inMessage)
specifier|protected
name|String
name|getMessageEncoding
parameter_list|(
name|Message
name|inMessage
parameter_list|)
block|{
name|String
name|encoding
init|=
name|inMessage
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_PLAIN_TEXT_ENCODING
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getPlainTextEncoding
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Messge encoding: {}"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|encoding
return|;
block|}
DECL|method|parseInput (InputStream is, Boolean disallowDoctypeDecl, Schema schema, ErrorHandler errorHandler)
specifier|protected
name|Document
name|parseInput
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Boolean
name|disallowDoctypeDecl
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|ErrorHandler
name|errorHandler
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|XmlSignatureFormatException
block|{
try|try
block|{
name|DocumentBuilder
name|db
init|=
name|XmlSignatureHelper
operator|.
name|newDocumentBuilder
argument_list|(
name|disallowDoctypeDecl
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|db
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
return|return
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlSignatureFormatException
argument_list|(
literal|"XML signature generation not possible. Sent message is not an XML document. Check the sent message."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|,
literal|"input stream"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createReference (XMLSignatureFactory fac, String uri, String type, SignatureType sigType)
specifier|protected
name|Reference
name|createReference
parameter_list|(
name|XMLSignatureFactory
name|fac
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|type
parameter_list|,
name|SignatureType
name|sigType
parameter_list|)
throws|throws
name|InvalidAlgorithmParameterException
throws|,
name|XmlSignatureException
block|{
try|try
block|{
name|List
argument_list|<
name|Transform
argument_list|>
name|transforms
init|=
name|getTransforms
argument_list|(
name|fac
argument_list|,
name|sigType
argument_list|)
decl_stmt|;
name|Reference
name|ref
init|=
name|fac
operator|.
name|newReference
argument_list|(
name|uri
argument_list|,
name|fac
operator|.
name|newDigestMethod
argument_list|(
name|getDigestAlgorithmUri
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|transforms
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|ref
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"Wrong algorithm specified in the configuration."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getContentReferenceType (Message message)
specifier|protected
name|String
name|getContentReferenceType
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|String
name|type
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_CONTENT_REFERENCE_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getContentReferenceType
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Content reference type: {}"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
DECL|method|getContentReferenceUris (Message message, SignatureType signatureType, Node messageBodyNode)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getContentReferenceUris
parameter_list|(
name|Message
name|message
parameter_list|,
name|SignatureType
name|signatureType
parameter_list|,
name|Node
name|messageBodyNode
parameter_list|)
throws|throws
name|XmlSignatureException
throws|,
name|XPathExpressionException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|SignatureType
operator|.
name|enveloping
operator|==
name|signatureType
condition|)
block|{
name|String
name|uri
init|=
literal|"#"
operator|+
name|getConfiguration
argument_list|()
operator|.
name|getContentObjectId
argument_list|()
decl_stmt|;
name|result
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SignatureType
operator|.
name|enveloped
operator|==
name|signatureType
condition|)
block|{
comment|// only for enveloped the parameter content reference URI is used
name|String
name|uri
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_CONTENT_REFERENCE_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getContentReferenceUri
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
literal|""
expr_stmt|;
block|}
name|result
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SignatureType
operator|.
name|detached
operator|==
name|signatureType
condition|)
block|{
name|result
operator|=
name|getContentReferenceUrisForDetachedCase
argument_list|(
name|message
argument_list|,
name|messageBodyNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// should not occur
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Signature type "
operator|+
name|signatureType
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Content reference URI(s): {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getContentReferenceUrisForDetachedCase (Message message, Node messageBodyNode)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getContentReferenceUrisForDetachedCase
parameter_list|(
name|Message
name|message
parameter_list|,
name|Node
name|messageBodyNode
parameter_list|)
throws|throws
name|XmlSignatureException
throws|,
name|XPathExpressionException
block|{
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|xpathsToIdAttributes
init|=
name|getXpathToIdAttributes
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|xpathsToIdAttributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// should not happen, has already been checked earlier
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"List of XPATHs to ID attributes is empty in detached signature case"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ComparableNode
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ComparableNode
argument_list|>
argument_list|(
name|xpathsToIdAttributes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XPathFilterParameterSpec
name|xp
range|:
name|xpathsToIdAttributes
control|)
block|{
name|XPathExpression
name|exp
decl_stmt|;
try|try
block|{
name|exp
operator|=
name|XmlSignatureHelper
operator|.
name|getXPathExpression
argument_list|(
name|xp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The configured xpath expression "
operator|+
name|xp
operator|.
name|getXPath
argument_list|()
operator|+
literal|" is invalid."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NodeList
name|list
init|=
operator|(
name|NodeList
operator|)
name|exp
operator|.
name|evaluate
argument_list|(
name|messageBodyNode
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
comment|//assume optional element, XSD validation has been done before
name|LOG
operator|.
name|warn
argument_list|(
literal|"No ID attribute found for xpath expression {}. Therfore this xpath expression will be ignored."
argument_list|,
name|xp
operator|.
name|getXPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|length
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|node
decl_stmt|;
name|String
name|value
init|=
name|attr
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// check that attribute is ID attribute
name|Element
name|element
init|=
name|messageBodyNode
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getElementById
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"Wrong configured xpath expression for ID attributes: The evaluation of the xpath expression "
operator|+
name|xp
operator|.
name|getXPath
argument_list|()
operator|+
literal|" resulted in an attribute which is not of type ID. The attribute value is "
operator|+
name|value
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|ComparableNode
argument_list|(
name|element
argument_list|,
literal|"#"
operator|+
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"ID attribute with value {} found for xpath {}"
argument_list|,
name|value
argument_list|,
name|xp
operator|.
name|getXPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"Wrong configured xpath expression for ID attributes: The evaluation of the xpath expression "
operator|+
name|xp
operator|.
name|getXPath
argument_list|()
operator|+
literal|" returned a node which was not of type Attribute."
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"No element to sign found in the detached case. No node found for the configured xpath expressions "
operator|+
name|toString
argument_list|(
name|xpathsToIdAttributes
argument_list|)
operator|+
literal|". Either the configuration of the XML signature component is wrong or the incoming message has not the correct structure."
argument_list|)
throw|;
block|}
comment|// sort so that elements with deeper hierarchy level are treated first
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|ComparableNode
operator|.
name|getReferenceUris
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|toString (List<XPathFilterParameterSpec> xpathsToIdAttributes)
specifier|private
name|String
name|toString
parameter_list|(
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|xpathsToIdAttributes
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|XPathFilterParameterSpec
name|xp
range|:
name|xpathsToIdAttributes
control|)
block|{
name|counter
operator|++
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|xp
operator|.
name|getXPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|<
name|xpathsToIdAttributes
operator|.
name|size
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createXMLObject (XMLSignatureFactory fac, Node node, String id)
specifier|protected
name|XMLObject
name|createXMLObject
parameter_list|(
name|XMLSignatureFactory
name|fac
parameter_list|,
name|Node
name|node
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|fac
operator|.
name|newXMLObject
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|DOMStructure
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|,
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getTransforms (XMLSignatureFactory fac, SignatureType sigType)
specifier|private
name|List
argument_list|<
name|Transform
argument_list|>
name|getTransforms
parameter_list|(
name|XMLSignatureFactory
name|fac
parameter_list|,
name|SignatureType
name|sigType
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|InvalidAlgorithmParameterException
block|{
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|configuredTrafos
init|=
name|getConfiguration
argument_list|()
operator|.
name|getTransformMethods
argument_list|()
decl_stmt|;
if|if
condition|(
name|SignatureType
operator|.
name|enveloped
operator|==
name|sigType
condition|)
block|{
comment|// add enveloped transform if necessary
if|if
condition|(
name|configuredTrafos
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|containsEnvelopedTransform
argument_list|(
name|configuredTrafos
argument_list|)
condition|)
block|{
name|configuredTrafos
operator|=
operator|new
name|ArrayList
argument_list|<
name|AlgorithmMethod
argument_list|>
argument_list|(
name|configuredTrafos
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|configuredTrafos
operator|.
name|add
argument_list|(
name|XmlSignatureHelper
operator|.
name|getEnvelopedTransform
argument_list|()
argument_list|)
expr_stmt|;
name|configuredTrafos
operator|.
name|addAll
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getTransformMethods
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// add enveloped and C14N trafo
name|configuredTrafos
operator|=
operator|new
name|ArrayList
argument_list|<
name|AlgorithmMethod
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|configuredTrafos
operator|.
name|add
argument_list|(
name|XmlSignatureHelper
operator|.
name|getEnvelopedTransform
argument_list|()
argument_list|)
expr_stmt|;
name|configuredTrafos
operator|.
name|add
argument_list|(
name|XmlSignatureHelper
operator|.
name|getCanonicalizationMethod
argument_list|(
name|CanonicalizationMethod
operator|.
name|INCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Transform
argument_list|>
name|transforms
init|=
operator|new
name|ArrayList
argument_list|<
name|Transform
argument_list|>
argument_list|(
name|configuredTrafos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AlgorithmMethod
name|trafo
range|:
name|configuredTrafos
control|)
block|{
name|Transform
name|transform
init|=
name|fac
operator|.
name|newTransform
argument_list|(
name|trafo
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
operator|(
name|TransformParameterSpec
operator|)
name|trafo
operator|.
name|getParameterSpec
argument_list|()
argument_list|)
decl_stmt|;
name|transforms
operator|.
name|add
argument_list|(
name|transform
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transform method: {}"
argument_list|,
name|trafo
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|transforms
return|;
block|}
DECL|method|containsEnvelopedTransform (List<AlgorithmMethod> configuredTrafos)
specifier|private
name|boolean
name|containsEnvelopedTransform
parameter_list|(
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|configuredTrafos
parameter_list|)
block|{
for|for
control|(
name|AlgorithmMethod
name|m
range|:
name|configuredTrafos
control|)
block|{
if|if
condition|(
name|Transform
operator|.
name|ENVELOPED
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getDigestAlgorithmUri ()
specifier|protected
name|String
name|getDigestAlgorithmUri
parameter_list|()
throws|throws
name|XmlSignatureException
block|{
name|String
name|result
init|=
name|getConfiguration
argument_list|()
operator|.
name|getDigestAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|String
name|signatureAlgorithm
init|=
name|getConfiguration
argument_list|()
operator|.
name|getSignatureAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureAlgorithm
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|signatureAlgorithm
operator|.
name|contains
argument_list|(
name|SHA1
argument_list|)
condition|)
block|{
name|result
operator|=
name|DigestMethod
operator|.
name|SHA1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signatureAlgorithm
operator|.
name|contains
argument_list|(
name|SHA224
argument_list|)
condition|)
block|{
name|result
operator|=
name|HTTP_WWW_W3_ORG_2001_04_XMLDSIG_MORE_SHA224
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signatureAlgorithm
operator|.
name|contains
argument_list|(
name|SHA256
argument_list|)
condition|)
block|{
name|result
operator|=
name|DigestMethod
operator|.
name|SHA256
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signatureAlgorithm
operator|.
name|contains
argument_list|(
name|SHA384
argument_list|)
condition|)
block|{
name|result
operator|=
name|HTTP_WWW_W3_ORG_2001_04_XMLDSIG_MORE_SHA384
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signatureAlgorithm
operator|.
name|contains
argument_list|(
name|SHA512
argument_list|)
condition|)
block|{
name|result
operator|=
name|DigestMethod
operator|.
name|SHA512
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signatureAlgorithm
operator|.
name|contains
argument_list|(
name|RIPEMD160
argument_list|)
condition|)
block|{
return|return
name|DigestMethod
operator|.
name|RIPEMD160
return|;
block|}
block|}
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Digest algorithm: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"Digest algorithm missing for XML signature generation. Specify the digest algorithm in the configuration."
argument_list|)
throw|;
block|}
DECL|method|createKeyInfoReference (XMLSignatureFactory fac, String keyInfoId, String digestAlgorithm)
specifier|protected
name|Reference
name|createKeyInfoReference
parameter_list|(
name|XMLSignatureFactory
name|fac
parameter_list|,
name|String
name|keyInfoId
parameter_list|,
name|String
name|digestAlgorithm
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
if|if
condition|(
name|keyInfoId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getAddKeyInfoReference
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|getConfiguration
argument_list|()
operator|.
name|getAddKeyInfoReference
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating reference to key info element with Id: {}"
argument_list|,
name|keyInfoId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Transform
argument_list|>
name|transforms
init|=
operator|new
name|ArrayList
argument_list|<
name|Transform
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Transform
name|transform
init|=
name|fac
operator|.
name|newTransform
argument_list|(
name|CanonicalizationMethod
operator|.
name|INCLUSIVE
argument_list|,
operator|(
name|TransformParameterSpec
operator|)
literal|null
argument_list|)
decl_stmt|;
name|transforms
operator|.
name|add
argument_list|(
name|transform
argument_list|)
expr_stmt|;
return|return
name|fac
operator|.
name|newReference
argument_list|(
literal|"#"
operator|+
name|keyInfoId
argument_list|,
name|fac
operator|.
name|newDigestMethod
argument_list|(
name|digestAlgorithm
argument_list|,
literal|null
argument_list|)
argument_list|,
name|transforms
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getKeyInfoId (KeyInfo keyInfo)
specifier|private
name|String
name|getKeyInfoId
parameter_list|(
name|KeyInfo
name|keyInfo
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
if|if
condition|(
name|keyInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|keyInfo
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|setOutputEncodingToMessageHeader (Message message)
specifier|protected
name|void
name|setOutputEncodingToMessageHeader
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getOutputXmlEncoding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getOutputXmlEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InputBuilder
specifier|private
specifier|static
class|class
name|InputBuilder
block|{
DECL|field|signatureFactory
specifier|private
name|XMLSignatureFactory
name|signatureFactory
decl_stmt|;
DECL|field|signatureAlgorithm
specifier|private
name|String
name|signatureAlgorithm
decl_stmt|;
DECL|field|parent
specifier|private
name|Node
name|parent
decl_stmt|;
DECL|field|messageBodyNode
specifier|private
name|Node
name|messageBodyNode
decl_stmt|;
DECL|field|message
specifier|private
name|Message
name|message
decl_stmt|;
DECL|field|keyInfo
specifier|private
name|KeyInfo
name|keyInfo
decl_stmt|;
DECL|field|contentDigestAlgorithm
specifier|private
name|String
name|contentDigestAlgorithm
decl_stmt|;
DECL|field|signatureId
specifier|private
name|String
name|signatureId
decl_stmt|;
DECL|field|contentReferenceUri
specifier|private
name|String
name|contentReferenceUri
decl_stmt|;
DECL|field|signatureType
specifier|private
name|SignatureType
name|signatureType
decl_stmt|;
DECL|method|signatureFactory (XMLSignatureFactory signatureFactory)
specifier|public
name|InputBuilder
name|signatureFactory
parameter_list|(
name|XMLSignatureFactory
name|signatureFactory
parameter_list|)
block|{
name|this
operator|.
name|signatureFactory
operator|=
name|signatureFactory
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|signatureAlgorithm (String signatureAlgorithm)
specifier|public
name|InputBuilder
name|signatureAlgorithm
parameter_list|(
name|String
name|signatureAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|signatureAlgorithm
operator|=
name|signatureAlgorithm
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|parent (Node parent)
specifier|public
name|InputBuilder
name|parent
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|messageBodyNode (Node messageBodyNode)
specifier|public
name|InputBuilder
name|messageBodyNode
parameter_list|(
name|Node
name|messageBodyNode
parameter_list|)
block|{
name|this
operator|.
name|messageBodyNode
operator|=
name|messageBodyNode
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|message (Message message)
specifier|public
name|InputBuilder
name|message
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|keyInfo (KeyInfo keyInfo)
specifier|public
name|InputBuilder
name|keyInfo
parameter_list|(
name|KeyInfo
name|keyInfo
parameter_list|)
block|{
name|this
operator|.
name|keyInfo
operator|=
name|keyInfo
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|contentDigestAlgorithm (String contentDigestAlgorithm)
specifier|public
name|InputBuilder
name|contentDigestAlgorithm
parameter_list|(
name|String
name|contentDigestAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|contentDigestAlgorithm
operator|=
name|contentDigestAlgorithm
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|signatureId (String signatureId)
specifier|public
name|InputBuilder
name|signatureId
parameter_list|(
name|String
name|signatureId
parameter_list|)
block|{
name|this
operator|.
name|signatureId
operator|=
name|signatureId
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|contentReferenceUri (String contentReferenceUri)
specifier|public
name|InputBuilder
name|contentReferenceUri
parameter_list|(
name|String
name|contentReferenceUri
parameter_list|)
block|{
name|this
operator|.
name|contentReferenceUri
operator|=
name|contentReferenceUri
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|signatureType (SignatureType signatureType)
specifier|public
name|InputBuilder
name|signatureType
parameter_list|(
name|SignatureType
name|signatureType
parameter_list|)
block|{
name|this
operator|.
name|signatureType
operator|=
name|signatureType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|XmlSignatureProperties
operator|.
name|Input
name|build
parameter_list|()
block|{
return|return
operator|new
name|XmlSignatureProperties
operator|.
name|Input
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|XMLSignatureFactory
name|getSignatureFactory
parameter_list|()
block|{
return|return
name|signatureFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSignatureAlgorithm
parameter_list|()
block|{
return|return
name|signatureAlgorithm
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getMessageBodyNode
parameter_list|()
block|{
return|return
name|messageBodyNode
return|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyInfo
name|getKeyInfo
parameter_list|()
block|{
return|return
name|keyInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentDigestAlgorithm
parameter_list|()
block|{
return|return
name|contentDigestAlgorithm
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSignatureId
parameter_list|()
block|{
return|return
name|signatureId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentReferenceUri
parameter_list|()
block|{
return|return
name|contentReferenceUri
return|;
block|}
annotation|@
name|Override
specifier|public
name|SignatureType
name|getSignatureType
parameter_list|()
block|{
return|return
name|signatureType
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Compares nodes by their hierarchy level. */
DECL|class|ComparableNode
specifier|static
class|class
name|ComparableNode
implements|implements
name|Comparable
argument_list|<
name|ComparableNode
argument_list|>
block|{
DECL|field|referenceUri
specifier|private
specifier|final
name|String
name|referenceUri
decl_stmt|;
DECL|field|level
specifier|private
specifier|final
name|int
name|level
decl_stmt|;
DECL|method|ComparableNode (Element node, String referenceUri)
name|ComparableNode
parameter_list|(
name|Element
name|node
parameter_list|,
name|String
name|referenceUri
parameter_list|)
block|{
name|this
operator|.
name|referenceUri
operator|=
name|referenceUri
expr_stmt|;
name|level
operator|=
name|calculateLevel
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|calculateLevel (Element node)
specifier|private
name|int
name|calculateLevel
parameter_list|(
name|Element
name|node
parameter_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Node
name|n
init|=
name|node
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|n
operator|.
name|getParentNode
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|counter
operator|>
literal|10000
condition|)
block|{
comment|// prevent security attack
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Hierachy level is limited to 10000"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|counter
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ComparableNode o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ComparableNode
name|o
parameter_list|)
block|{
return|return
name|o
operator|.
name|level
operator|-
name|level
return|;
block|}
DECL|method|getReferenceUri ()
name|String
name|getReferenceUri
parameter_list|()
block|{
return|return
name|referenceUri
return|;
block|}
DECL|method|getReferenceUris (List<ComparableNode> input)
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getReferenceUris
parameter_list|(
name|List
argument_list|<
name|ComparableNode
argument_list|>
name|input
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ComparableNode
name|cn
range|:
name|input
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|cn
operator|.
name|getReferenceUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

