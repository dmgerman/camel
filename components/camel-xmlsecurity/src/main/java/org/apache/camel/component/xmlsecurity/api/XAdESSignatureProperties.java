begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|x500
operator|.
name|X500Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dom
operator|.
name|DOMStructure
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|DigestMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
import|;
end_import

begin_comment
comment|/**  * Implementation of the XAdES-BES and XAdES-EPES properties defined in  * http://www.etsi.org/deliver/etsi_ts%5C101900_101999%5C101903%5C01.04  * .02_60%5Cts_101903v010402p.pdf. XAdES-T and XAdES-C is not implemented.  *<p>  * You have to overwrite the method {@link #getSigningCertificate()} or  * {@link #getSigningCertificateChain()} if you want to have a  * 'SigningCertificate' element in your XML Signature.  *<p>  * Further limitations:  *<ul>  *<li>No support for the 'QualifyingPropertiesReference' element (see section  * 6.3.2 of spec).</li>  *<li>No support for the 'Transforms' element contained in the  * 'SignaturePolicyId' element contained in 'SignaturePolicyIdentifier' element</li>  *<li>No support of the 'CounterSignature' element --> no support for the  * 'UnsignedProperties' element</li>  *<li>A 'CommitmentTypeIndication' element contains always the  * 'AllSignedDataObjects' element. The 'ObjectReference' element within the  * 'CommitmentTypeIndication' element is not supported.</li>  *<li>The 'AllDataObjectsTimeStamp' element is not supported (it requires a  * time authority)</li>  *<li>The 'IndividualDataObjectsTimeStamp' element is not supported (it  * requires a time authority)</li>  *</ul>  */
end_comment

begin_class
DECL|class|XAdESSignatureProperties
specifier|public
class|class
name|XAdESSignatureProperties
implements|implements
name|XmlSignatureProperties
block|{
DECL|field|HTTP_URI_ETSI_ORG_01903_V1_3_2
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_URI_ETSI_ORG_01903_V1_3_2
init|=
literal|"http://uri.etsi.org/01903/v1.3.2#"
decl_stmt|;
DECL|field|HTTP_URI_ETSI_ORG_01903_V1_1_1
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_URI_ETSI_ORG_01903_V1_1_1
init|=
literal|"http://uri.etsi.org/01903/v1.1.1#"
decl_stmt|;
DECL|field|HTTP_URI_ETSI_ORG_01903_V1_2_2
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_URI_ETSI_ORG_01903_V1_2_2
init|=
literal|"http://uri.etsi.org/01903/v1.2.2#"
decl_stmt|;
DECL|field|SIG_POLICY_NONE
specifier|public
specifier|static
specifier|final
name|String
name|SIG_POLICY_NONE
init|=
literal|"None"
decl_stmt|;
DECL|field|SIG_POLICY_IMPLIED
specifier|public
specifier|static
specifier|final
name|String
name|SIG_POLICY_IMPLIED
init|=
literal|"Implied"
decl_stmt|;
DECL|field|SIG_POLICY_EXPLICIT_ID
specifier|public
specifier|static
specifier|final
name|String
name|SIG_POLICY_EXPLICIT_ID
init|=
literal|"ExplicitId"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XAdESSignatureProperties
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SIG_POLICY_VALUES
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SIG_POLICY_VALUES
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|addSigningTime
specifier|private
name|boolean
name|addSigningTime
init|=
literal|true
decl_stmt|;
DECL|field|namespace
specifier|private
name|String
name|namespace
init|=
name|HTTP_URI_ETSI_ORG_01903_V1_3_2
decl_stmt|;
DECL|field|prefix
specifier|private
name|String
name|prefix
init|=
literal|"etsi"
decl_stmt|;
DECL|field|signingCertificateURIs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|signingCertificateURIs
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|digestAlgorithmForSigningCertificate
specifier|private
name|String
name|digestAlgorithmForSigningCertificate
init|=
name|DigestMethod
operator|.
name|SHA256
decl_stmt|;
comment|//"http://www.w3.org/2000/09/xmldsig#sha1";
DECL|field|signaturePolicy
specifier|private
name|String
name|signaturePolicy
init|=
name|SIG_POLICY_NONE
decl_stmt|;
DECL|field|sigPolicyId
specifier|private
name|String
name|sigPolicyId
decl_stmt|;
DECL|field|sigPolicyIdQualifier
specifier|private
name|String
name|sigPolicyIdQualifier
decl_stmt|;
DECL|field|sigPolicyIdDescription
specifier|private
name|String
name|sigPolicyIdDescription
decl_stmt|;
DECL|field|sigPolicyIdDocumentationReferences
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|sigPolicyIdDocumentationReferences
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|signaturePolicyDigestAlgorithm
specifier|private
name|String
name|signaturePolicyDigestAlgorithm
init|=
name|DigestMethod
operator|.
name|SHA256
decl_stmt|;
comment|//"http://www.w3.org/2000/09/xmldsig#sha1";
DECL|field|signaturePolicyDigestValue
specifier|private
name|String
name|signaturePolicyDigestValue
decl_stmt|;
DECL|field|sigPolicyQualifiers
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|sigPolicyQualifiers
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|dataObjectFormatDescription
specifier|private
name|String
name|dataObjectFormatDescription
decl_stmt|;
DECL|field|dataObjectFormatMimeType
specifier|private
name|String
name|dataObjectFormatMimeType
decl_stmt|;
DECL|field|dataObjectFormatIdentifier
specifier|private
name|String
name|dataObjectFormatIdentifier
decl_stmt|;
DECL|field|dataObjectFormatIdentifierQualifier
specifier|private
name|String
name|dataObjectFormatIdentifierQualifier
decl_stmt|;
DECL|field|dataObjectFormatIdentifierDescription
specifier|private
name|String
name|dataObjectFormatIdentifierDescription
decl_stmt|;
DECL|field|dataObjectFormatIdentifierDocumentationReferences
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|dataObjectFormatIdentifierDocumentationReferences
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|signerClaimedRoles
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|signerClaimedRoles
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|signerCertifiedRoles
specifier|private
name|List
argument_list|<
name|XAdESEncapsulatedPKIData
argument_list|>
name|signerCertifiedRoles
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|signatureProductionPlaceCity
specifier|private
name|String
name|signatureProductionPlaceCity
decl_stmt|;
DECL|field|signatureProductionPlaceStateOrProvince
specifier|private
name|String
name|signatureProductionPlaceStateOrProvince
decl_stmt|;
DECL|field|signatureProductionPlacePostalCode
specifier|private
name|String
name|signatureProductionPlacePostalCode
decl_stmt|;
DECL|field|signatureProductionPlaceCountryName
specifier|private
name|String
name|signatureProductionPlaceCountryName
decl_stmt|;
DECL|field|commitmentTypeId
specifier|private
name|String
name|commitmentTypeId
decl_stmt|;
DECL|field|commitmentTypeIdQualifier
specifier|private
name|String
name|commitmentTypeIdQualifier
decl_stmt|;
DECL|field|commitmentTypeIdDescription
specifier|private
name|String
name|commitmentTypeIdDescription
decl_stmt|;
DECL|field|commitmentTypeIdDocumentationReferences
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|commitmentTypeIdDocumentationReferences
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|commitmentTypeQualifiers
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|commitmentTypeQualifiers
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
static|static
block|{
name|SIG_POLICY_VALUES
operator|.
name|add
argument_list|(
name|SIG_POLICY_NONE
argument_list|)
expr_stmt|;
name|SIG_POLICY_VALUES
operator|.
name|add
argument_list|(
name|SIG_POLICY_IMPLIED
argument_list|)
expr_stmt|;
name|SIG_POLICY_VALUES
operator|.
name|add
argument_list|(
name|SIG_POLICY_EXPLICIT_ID
argument_list|)
expr_stmt|;
block|}
DECL|method|XAdESSignatureProperties ()
specifier|public
name|XAdESSignatureProperties
parameter_list|()
block|{     }
DECL|method|isAddSigningTime ()
specifier|public
name|boolean
name|isAddSigningTime
parameter_list|()
block|{
return|return
name|addSigningTime
return|;
block|}
DECL|method|setAddSigningTime (boolean addSigningTime)
specifier|public
name|void
name|setAddSigningTime
parameter_list|(
name|boolean
name|addSigningTime
parameter_list|)
block|{
name|this
operator|.
name|addSigningTime
operator|=
name|addSigningTime
expr_stmt|;
block|}
DECL|method|getNamespace ()
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
DECL|method|setNamespace (String namespace)
specifier|public
name|void
name|setNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'namespace' is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
DECL|method|findNamespace (Message message)
specifier|protected
name|String
name|findNamespace
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_NAMESPACE
argument_list|,
name|getNamespace
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
DECL|method|setPrefix (String prefix)
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
DECL|method|findPrefix (Message message)
specifier|protected
name|String
name|findPrefix
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_PREFIX
argument_list|,
name|getPrefix
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * URIs of the signing certificate or signing certificate chain. For the      * sining certificate the first URI is taken. If there is a signing      * certificate chain specified, then the URIs are assigned to the      * certificates in the chain in the order given in the provided list. You      * have to specify an empty entry (null or empty srting), if no URI should      * be assigned to a specific certificate in the list. If you specify an      * empty list, then no URIs are assigned.      *       * @throws IllegalArgumentException      *             if the parameter is<code>null</code> or one of the URIs is      *<code>null</code>      */
DECL|method|setSigningCertificateURIs (List<String> signingCertificateURIs)
specifier|public
name|void
name|setSigningCertificateURIs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|signingCertificateURIs
parameter_list|)
block|{
if|if
condition|(
name|signingCertificateURIs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'signingCertificateURIs' is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|signingCertificateURIs
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|signingCertificateURIs
argument_list|)
expr_stmt|;
block|}
DECL|method|getSigningCertificateURIs ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSigningCertificateURIs
parameter_list|()
block|{
return|return
name|signingCertificateURIs
return|;
block|}
DECL|method|getDigestAlgorithmForSigningCertificate ()
specifier|public
name|String
name|getDigestAlgorithmForSigningCertificate
parameter_list|()
block|{
return|return
name|digestAlgorithmForSigningCertificate
return|;
block|}
comment|/**      * Digest Algorithm for creating the digest of the signing certificate.      * Possible values: "http://www.w3.org/2000/09/xmldsig#sha1",      * "http://www.w3.org/2001/04/xmlenc#sha256",      * "http://www.w3.org/2001/04/xmldsig-more#sha384",      * "http://www.w3.org/2001/04/xmlenc#sha512". Default value is      * "http://www.w3.org/2001/04/xmlenc#sha256".      *       */
DECL|method|setDigestAlgorithmForSigningCertificate (String digestAlgorithm)
specifier|public
name|void
name|setDigestAlgorithmForSigningCertificate
parameter_list|(
name|String
name|digestAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|digestAlgorithmForSigningCertificate
operator|=
name|digestAlgorithm
expr_stmt|;
block|}
DECL|method|getSignaturePolicy ()
specifier|public
name|String
name|getSignaturePolicy
parameter_list|()
block|{
return|return
name|signaturePolicy
return|;
block|}
comment|/**      * Signature Policy. Possible values: {@link #SIG_POLICY_NONE},      * {@link #SIG_POLICY_IMPLIED}, {@link #SIG_POLICY_EXPLICIT_ID}. Default      * value is {@link #SIG_POLICY_NONE}.      *       */
DECL|method|setSignaturePolicy (String signaturePolicy)
specifier|public
name|void
name|setSignaturePolicy
parameter_list|(
name|String
name|signaturePolicy
parameter_list|)
block|{
if|if
condition|(
operator|!
name|SIG_POLICY_VALUES
operator|.
name|contains
argument_list|(
name|signaturePolicy
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Signature policy '%s' is invalid. Possible values are 'None', 'Implied', and 'ExplicitId'."
argument_list|,
name|signaturePolicy
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|signaturePolicy
operator|=
name|signaturePolicy
expr_stmt|;
block|}
DECL|method|getSigPolicyId ()
specifier|public
name|String
name|getSigPolicyId
parameter_list|()
block|{
return|return
name|sigPolicyId
return|;
block|}
comment|/**      * Identifier must be specified if {@link #getSignaturePolicy()} equals      * "ExplicitId". Must be an URI      */
DECL|method|setSigPolicyId (String sigPolicyId)
specifier|public
name|void
name|setSigPolicyId
parameter_list|(
name|String
name|sigPolicyId
parameter_list|)
block|{
name|this
operator|.
name|sigPolicyId
operator|=
name|sigPolicyId
expr_stmt|;
block|}
DECL|method|getSigPolicyIdQualifier ()
specifier|public
name|String
name|getSigPolicyIdQualifier
parameter_list|()
block|{
return|return
name|sigPolicyIdQualifier
return|;
block|}
comment|/**      * Qualifier for the Signature Policy Identifier. Possible values are      *<code>null</code> (which means no Qualifier element is created),      * "OIDAsURI", or "OIDAsURN". Default value is<code>null</code>. If the      * identifier is an OID then a qualifier must be set.      */
DECL|method|setSigPolicyIdQualifier (String sigPolicyIdQualifier)
specifier|public
name|void
name|setSigPolicyIdQualifier
parameter_list|(
name|String
name|sigPolicyIdQualifier
parameter_list|)
block|{
name|this
operator|.
name|sigPolicyIdQualifier
operator|=
name|sigPolicyIdQualifier
expr_stmt|;
block|}
DECL|method|getSigPolicyIdDescription ()
specifier|public
name|String
name|getSigPolicyIdDescription
parameter_list|()
block|{
return|return
name|sigPolicyIdDescription
return|;
block|}
DECL|method|setSigPolicyIdDescription (String sigPolicyIdDescription)
specifier|public
name|void
name|setSigPolicyIdDescription
parameter_list|(
name|String
name|sigPolicyIdDescription
parameter_list|)
block|{
name|this
operator|.
name|sigPolicyIdDescription
operator|=
name|sigPolicyIdDescription
expr_stmt|;
block|}
DECL|method|getSigPolicyIdDocumentationReferences ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSigPolicyIdDocumentationReferences
parameter_list|()
block|{
return|return
name|sigPolicyIdDocumentationReferences
return|;
block|}
comment|/**      *       * Sets the documentation references of the signature policy.      *       * @throws IllegalArgumentException      *             if the parameter is<code>null</code> or one of the      *             documentation references is<code>null</code> or empty      */
DECL|method|setSigPolicyIdDocumentationReferences (List<String> sigPolicyIdDocumentationReferences)
specifier|public
name|void
name|setSigPolicyIdDocumentationReferences
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|sigPolicyIdDocumentationReferences
parameter_list|)
block|{
if|if
condition|(
name|sigPolicyIdDocumentationReferences
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'sigPolicyIdDocumentationReferences' is null"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|ref
range|:
name|sigPolicyIdDocumentationReferences
control|)
block|{
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
name|ref
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one documentation reference of the signature policy is null or empty"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|sigPolicyIdDocumentationReferences
operator|=
name|sigPolicyIdDocumentationReferences
expr_stmt|;
block|}
DECL|method|getSignaturePolicyDigestAlgorithm ()
specifier|public
name|String
name|getSignaturePolicyDigestAlgorithm
parameter_list|()
block|{
return|return
name|signaturePolicyDigestAlgorithm
return|;
block|}
comment|/**      * Digest Algorithm for creating the digest of the signature policy      * document. Possible values: "http://www.w3.org/2000/09/xmldsig#sha1",      * "http://www.w3.org/2001/04/xmlenc#sha256",      * "http://www.w3.org/2001/04/xmldsig-more#sha384",      * "http://www.w3.org/2001/04/xmlenc#sha512". Default value is      * "http://www.w3.org/2001/04/xmlenc#sha256".      *       */
DECL|method|setSignaturePolicyDigestAlgorithm (String signaturePolicyDigestAlgorithm)
specifier|public
name|void
name|setSignaturePolicyDigestAlgorithm
parameter_list|(
name|String
name|signaturePolicyDigestAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|signaturePolicyDigestAlgorithm
operator|=
name|signaturePolicyDigestAlgorithm
expr_stmt|;
block|}
DECL|method|getSignaturePolicyDigestValue ()
specifier|public
name|String
name|getSignaturePolicyDigestValue
parameter_list|()
block|{
return|return
name|signaturePolicyDigestValue
return|;
block|}
comment|/** Digest value for the signature policy base 64 encoded. */
DECL|method|setSignaturePolicyDigestValue (String signaturePolicyDigestValue)
specifier|public
name|void
name|setSignaturePolicyDigestValue
parameter_list|(
name|String
name|signaturePolicyDigestValue
parameter_list|)
block|{
name|this
operator|.
name|signaturePolicyDigestValue
operator|=
name|signaturePolicyDigestValue
expr_stmt|;
block|}
DECL|method|getSigPolicyQualifiers ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSigPolicyQualifiers
parameter_list|()
block|{
return|return
name|sigPolicyQualifiers
return|;
block|}
comment|/**      * Sets the signature policy qualifiers. Each qualifier can be a text or a      * XML fragment with the root element 'SigPolicyQualifier' with the XAdES      * namespace.      *       * @throws IllegalArgumentException      *             if the input parameter is<code>null</code>, or one of the      *             qualifiers is<code>null</code> or empty      *       */
DECL|method|setSigPolicyQualifiers (List<String> sigPolicyQualifiers)
specifier|public
name|void
name|setSigPolicyQualifiers
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|sigPolicyQualifiers
parameter_list|)
block|{
if|if
condition|(
name|sigPolicyQualifiers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'sigPolicyQualifiers' is null"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|qualifier
range|:
name|sigPolicyQualifiers
control|)
block|{
if|if
condition|(
name|qualifier
operator|==
literal|null
operator|||
name|qualifier
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one of the policy qualifiers is null or empty"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|sigPolicyQualifiers
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|sigPolicyQualifiers
argument_list|)
expr_stmt|;
block|}
DECL|method|getDataObjectFormatDescription ()
specifier|public
name|String
name|getDataObjectFormatDescription
parameter_list|()
block|{
return|return
name|dataObjectFormatDescription
return|;
block|}
DECL|method|setDataObjectFormatDescription (String dataObjectFormatDescription)
specifier|public
name|void
name|setDataObjectFormatDescription
parameter_list|(
name|String
name|dataObjectFormatDescription
parameter_list|)
block|{
name|this
operator|.
name|dataObjectFormatDescription
operator|=
name|dataObjectFormatDescription
expr_stmt|;
block|}
DECL|method|getDataObjectFormatMimeType ()
specifier|public
name|String
name|getDataObjectFormatMimeType
parameter_list|()
block|{
return|return
name|dataObjectFormatMimeType
return|;
block|}
DECL|method|setDataObjectFormatMimeType (String dataObjectFormatMimeType)
specifier|public
name|void
name|setDataObjectFormatMimeType
parameter_list|(
name|String
name|dataObjectFormatMimeType
parameter_list|)
block|{
name|this
operator|.
name|dataObjectFormatMimeType
operator|=
name|dataObjectFormatMimeType
expr_stmt|;
block|}
DECL|method|getDataObjectFormatIdentifier ()
specifier|public
name|String
name|getDataObjectFormatIdentifier
parameter_list|()
block|{
return|return
name|dataObjectFormatIdentifier
return|;
block|}
DECL|method|setDataObjectFormatIdentifier (String dataObjectFormatIdentifier)
specifier|public
name|void
name|setDataObjectFormatIdentifier
parameter_list|(
name|String
name|dataObjectFormatIdentifier
parameter_list|)
block|{
name|this
operator|.
name|dataObjectFormatIdentifier
operator|=
name|dataObjectFormatIdentifier
expr_stmt|;
block|}
DECL|method|getDataObjectFormatIdentifierQualifier ()
specifier|public
name|String
name|getDataObjectFormatIdentifierQualifier
parameter_list|()
block|{
return|return
name|dataObjectFormatIdentifierQualifier
return|;
block|}
comment|/**      * Qualifier for the Format Identifier. Possible values are      *<code>null</code> (which means no Qualifier element is created),      * "OIDAsURI", or "OIDAsURN". Default value is<code>null</code>. If the      * identifier is an OID then a qualifier must be set.      */
DECL|method|setDataObjectFormatIdentifierQualifier (String dataObjectFormatIdentifierQualifier)
specifier|public
name|void
name|setDataObjectFormatIdentifierQualifier
parameter_list|(
name|String
name|dataObjectFormatIdentifierQualifier
parameter_list|)
block|{
name|this
operator|.
name|dataObjectFormatIdentifierQualifier
operator|=
name|dataObjectFormatIdentifierQualifier
expr_stmt|;
block|}
DECL|method|getDataObjectFormatIdentifierDescription ()
specifier|public
name|String
name|getDataObjectFormatIdentifierDescription
parameter_list|()
block|{
return|return
name|dataObjectFormatIdentifierDescription
return|;
block|}
DECL|method|setDataObjectFormatIdentifierDescription (String dataObjectFormatIdentifierDescription)
specifier|public
name|void
name|setDataObjectFormatIdentifierDescription
parameter_list|(
name|String
name|dataObjectFormatIdentifierDescription
parameter_list|)
block|{
name|this
operator|.
name|dataObjectFormatIdentifierDescription
operator|=
name|dataObjectFormatIdentifierDescription
expr_stmt|;
block|}
DECL|method|getDataObjectFormatIdentifierDocumentationReferences ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDataObjectFormatIdentifierDocumentationReferences
parameter_list|()
block|{
return|return
name|dataObjectFormatIdentifierDocumentationReferences
return|;
block|}
comment|/**      *       * Sets the documentation references of the data object format identifier.      *       * @throws IllegalArgumentException      *             if the parameter is<code>null</code> or one of the      *             documentation references is<code>null</code> or empty      */
DECL|method|setDataObjectFormatIdentifierDocumentationReferences (List<String> dataObjectFormatIdentifierDocumentationReferences)
specifier|public
name|void
name|setDataObjectFormatIdentifierDocumentationReferences
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dataObjectFormatIdentifierDocumentationReferences
parameter_list|)
block|{
if|if
condition|(
name|dataObjectFormatIdentifierDocumentationReferences
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'dataObjectFormatIdentifierDocumentationReferences' is null"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|ref
range|:
name|dataObjectFormatIdentifierDocumentationReferences
control|)
block|{
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
name|ref
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one reference of the identifier of the data object format is null or empty"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|dataObjectFormatIdentifierDocumentationReferences
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|dataObjectFormatIdentifierDocumentationReferences
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerClaimedRoles ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSignerClaimedRoles
parameter_list|()
block|{
return|return
name|signerClaimedRoles
return|;
block|}
comment|/**      * Sets the claimed roles list. A role can be either a text or a XML      * fragment with the root element 'ClaimedRole' with the XAdES namespace.      *       * @throws IllegalArgumentException      *             if<tt>signerClaimedRoles</tt> is<code>null</code>, or if      *             one of the roles is<code>null</code> or empty      */
DECL|method|setSignerClaimedRoles (List<String> signerClaimedRoles)
specifier|public
name|void
name|setSignerClaimedRoles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|signerClaimedRoles
parameter_list|)
block|{
if|if
condition|(
name|signerClaimedRoles
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'signerClaimedRoles' is null"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|role
range|:
name|signerClaimedRoles
control|)
block|{
if|if
condition|(
name|role
operator|==
literal|null
operator|||
name|role
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one of the signer claimed roles is null or empty"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|signerClaimedRoles
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|signerClaimedRoles
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignerCertifiedRoles ()
specifier|public
name|List
argument_list|<
name|XAdESEncapsulatedPKIData
argument_list|>
name|getSignerCertifiedRoles
parameter_list|()
block|{
return|return
name|signerCertifiedRoles
return|;
block|}
comment|/**      * Sets the certified roles.      *       * @throws IllegalArgumentException      *             if<tt>signerCertifiedRoles</tt> is<code>null</code>      */
DECL|method|setSignerCertifiedRoles (List<XAdESEncapsulatedPKIData> signerCertifiedRoles)
specifier|public
name|void
name|setSignerCertifiedRoles
parameter_list|(
name|List
argument_list|<
name|XAdESEncapsulatedPKIData
argument_list|>
name|signerCertifiedRoles
parameter_list|)
block|{
if|if
condition|(
name|signerCertifiedRoles
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'signerCertifiedRoles' is null"
argument_list|)
throw|;
block|}
for|for
control|(
name|XAdESEncapsulatedPKIData
name|role
range|:
name|signerCertifiedRoles
control|)
block|{
if|if
condition|(
name|role
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one of the signer certified roles is null"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|signerCertifiedRoles
operator|=
operator|new
name|ArrayList
argument_list|<
name|XAdESEncapsulatedPKIData
argument_list|>
argument_list|(
name|signerCertifiedRoles
argument_list|)
expr_stmt|;
block|}
DECL|method|getSignatureProductionPlaceCity ()
specifier|public
name|String
name|getSignatureProductionPlaceCity
parameter_list|()
block|{
return|return
name|signatureProductionPlaceCity
return|;
block|}
DECL|method|setSignatureProductionPlaceCity (String signatureProductionPlaceCity)
specifier|public
name|void
name|setSignatureProductionPlaceCity
parameter_list|(
name|String
name|signatureProductionPlaceCity
parameter_list|)
block|{
name|this
operator|.
name|signatureProductionPlaceCity
operator|=
name|signatureProductionPlaceCity
expr_stmt|;
block|}
DECL|method|getSignatureProductionPlaceStateOrProvince ()
specifier|public
name|String
name|getSignatureProductionPlaceStateOrProvince
parameter_list|()
block|{
return|return
name|signatureProductionPlaceStateOrProvince
return|;
block|}
DECL|method|setSignatureProductionPlaceStateOrProvince (String signatureProductionPlaceStateOrProvince)
specifier|public
name|void
name|setSignatureProductionPlaceStateOrProvince
parameter_list|(
name|String
name|signatureProductionPlaceStateOrProvince
parameter_list|)
block|{
name|this
operator|.
name|signatureProductionPlaceStateOrProvince
operator|=
name|signatureProductionPlaceStateOrProvince
expr_stmt|;
block|}
DECL|method|getSignatureProductionPlacePostalCode ()
specifier|public
name|String
name|getSignatureProductionPlacePostalCode
parameter_list|()
block|{
return|return
name|signatureProductionPlacePostalCode
return|;
block|}
DECL|method|setSignatureProductionPlacePostalCode (String signatureProductionPlacePostalCode)
specifier|public
name|void
name|setSignatureProductionPlacePostalCode
parameter_list|(
name|String
name|signatureProductionPlacePostalCode
parameter_list|)
block|{
name|this
operator|.
name|signatureProductionPlacePostalCode
operator|=
name|signatureProductionPlacePostalCode
expr_stmt|;
block|}
DECL|method|getSignatureProductionPlaceCountryName ()
specifier|public
name|String
name|getSignatureProductionPlaceCountryName
parameter_list|()
block|{
return|return
name|signatureProductionPlaceCountryName
return|;
block|}
DECL|method|setSignatureProductionPlaceCountryName (String signatureProductionPlaceCountryName)
specifier|public
name|void
name|setSignatureProductionPlaceCountryName
parameter_list|(
name|String
name|signatureProductionPlaceCountryName
parameter_list|)
block|{
name|this
operator|.
name|signatureProductionPlaceCountryName
operator|=
name|signatureProductionPlaceCountryName
expr_stmt|;
block|}
DECL|method|getCommitmentTypeId ()
specifier|public
name|String
name|getCommitmentTypeId
parameter_list|()
block|{
return|return
name|commitmentTypeId
return|;
block|}
DECL|method|setCommitmentTypeId (String commitmentTypeId)
specifier|public
name|void
name|setCommitmentTypeId
parameter_list|(
name|String
name|commitmentTypeId
parameter_list|)
block|{
name|this
operator|.
name|commitmentTypeId
operator|=
name|commitmentTypeId
expr_stmt|;
block|}
DECL|method|getCommitmentTypeIdQualifier ()
specifier|public
name|String
name|getCommitmentTypeIdQualifier
parameter_list|()
block|{
return|return
name|commitmentTypeIdQualifier
return|;
block|}
comment|/**      * Qualifier for the Commitment Type ID. Possible values are      *<code>null</code> (which means no Qualifier element is created),      * "OIDAsURI", or "OIDAsURN". Default value is<code>null</code>. If the      * identifier is an OID then a qualifier must be set.      */
DECL|method|setCommitmentTypeIdQualifier (String commitmentTypeIdQualifier)
specifier|public
name|void
name|setCommitmentTypeIdQualifier
parameter_list|(
name|String
name|commitmentTypeIdQualifier
parameter_list|)
block|{
name|this
operator|.
name|commitmentTypeIdQualifier
operator|=
name|commitmentTypeIdQualifier
expr_stmt|;
block|}
DECL|method|getCommitmentTypeIdDescription ()
specifier|public
name|String
name|getCommitmentTypeIdDescription
parameter_list|()
block|{
return|return
name|commitmentTypeIdDescription
return|;
block|}
DECL|method|setCommitmentTypeIdDescription (String commitmentTypeIdDescription)
specifier|public
name|void
name|setCommitmentTypeIdDescription
parameter_list|(
name|String
name|commitmentTypeIdDescription
parameter_list|)
block|{
name|this
operator|.
name|commitmentTypeIdDescription
operator|=
name|commitmentTypeIdDescription
expr_stmt|;
block|}
DECL|method|getCommitmentTypeIdDocumentationReferences ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCommitmentTypeIdDocumentationReferences
parameter_list|()
block|{
return|return
name|commitmentTypeIdDocumentationReferences
return|;
block|}
comment|/**      * Sets the documentation references for the Commitment Type ID:      *       * @throws IllegalArgumentException      *             if the parameter is<code>null</code> or a documentation      *             reference is<code>null</code> or empty      *       */
DECL|method|setCommitmentTypeIdDocumentationReferences (List<String> commitmentTypeIdDocumentationReferences)
specifier|public
name|void
name|setCommitmentTypeIdDocumentationReferences
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|commitmentTypeIdDocumentationReferences
parameter_list|)
block|{
if|if
condition|(
name|commitmentTypeIdDocumentationReferences
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'commitmentTypeIdDocumentationReferences' is null"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|ref
range|:
name|commitmentTypeIdDocumentationReferences
control|)
block|{
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
name|ref
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one documentation reference of the commitment type is null or empty"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|commitmentTypeIdDocumentationReferences
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|commitmentTypeIdDocumentationReferences
argument_list|)
expr_stmt|;
block|}
DECL|method|getCommitmentTypeQualifiers ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCommitmentTypeQualifiers
parameter_list|()
block|{
return|return
name|commitmentTypeQualifiers
return|;
block|}
comment|/**      * List of additional qualifying information on the commitment. Each list      * element can be a text or an XML fragment with the root element      * 'CommitmentTypeQualifier' with the XAdES namespace.      *       * @throws IllegalArgumentException      *             if the input parameter is<code>null</code>, or one qualifier      *             is<code>null</code> or empty      */
DECL|method|setCommitmentTypeQualifiers (List<String> commitmentTypeQualifiers)
specifier|public
name|void
name|setCommitmentTypeQualifiers
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|commitmentTypeQualifiers
parameter_list|)
block|{
if|if
condition|(
name|commitmentTypeQualifiers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'commitmentTypeQualifiers' is null"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|qualifier
range|:
name|commitmentTypeQualifiers
control|)
block|{
if|if
condition|(
name|qualifier
operator|==
literal|null
operator|||
name|qualifier
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one qualifier of the commitment type is null or empty"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|commitmentTypeQualifiers
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|commitmentTypeQualifiers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (Input input)
specifier|public
name|Output
name|get
parameter_list|(
name|Input
name|input
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
name|XmlSignatureProperties
operator|.
name|Output
name|result
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isAddSignedSignatureProperties
argument_list|()
operator|&&
operator|!
name|isAddSignedDataObjectPropeties
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"XAdES signature properties are empty. Therefore no XAdES element will be added to the signature."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|String
name|signedPropertiesId
init|=
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Reference
name|ref
init|=
name|input
operator|.
name|getSignatureFactory
argument_list|()
operator|.
name|newReference
argument_list|(
literal|"#"
operator|+
name|signedPropertiesId
argument_list|,
name|input
operator|.
name|getSignatureFactory
argument_list|()
operator|.
name|newDigestMethod
argument_list|(
name|input
operator|.
name|getContentDigestAlgorithm
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|"http://uri.etsi.org/01903#SignedProperties"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Node
name|parent
init|=
name|input
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Document
name|doc
decl_stmt|;
if|if
condition|(
name|Node
operator|.
name|DOCUMENT_NODE
operator|==
name|parent
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
name|doc
operator|=
operator|(
name|Document
operator|)
name|parent
expr_stmt|;
comment|// enveloping
block|}
else|else
block|{
name|doc
operator|=
name|parent
operator|.
name|getOwnerDocument
argument_list|()
expr_stmt|;
comment|// enveloped
block|}
name|Element
name|qualifyingProperties
init|=
name|createElement
argument_list|(
literal|"QualifyingProperties"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|setIdAttributeFromHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_QUALIFYING_PROPERTIES_ID
argument_list|,
name|qualifyingProperties
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|String
name|signatureId
init|=
name|input
operator|.
name|getSignatureId
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureId
operator|==
literal|null
operator|||
name|signatureId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No signature Id configured. Therefore a value is generated."
argument_list|)
expr_stmt|;
comment|// generate one
name|signatureId
operator|=
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// and set to output
name|result
operator|.
name|setSignatureId
argument_list|(
name|signatureId
argument_list|)
expr_stmt|;
block|}
name|setAttribute
argument_list|(
name|qualifyingProperties
argument_list|,
literal|"Target"
argument_list|,
literal|"#"
operator|+
name|signatureId
argument_list|)
expr_stmt|;
name|Element
name|signedProperties
init|=
name|createElement
argument_list|(
literal|"SignedProperties"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|qualifyingProperties
operator|.
name|appendChild
argument_list|(
name|signedProperties
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|signedProperties
argument_list|,
literal|"Id"
argument_list|,
name|signedPropertiesId
argument_list|)
expr_stmt|;
name|signedProperties
operator|.
name|setIdAttribute
argument_list|(
literal|"Id"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addSignedSignatureProperties
argument_list|(
name|doc
argument_list|,
name|signedProperties
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|String
name|contentReferenceId
init|=
name|addSignedDataObjectProperties
argument_list|(
name|doc
argument_list|,
name|signedProperties
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|result
operator|.
name|setContentReferenceId
argument_list|(
name|contentReferenceId
argument_list|)
expr_stmt|;
name|DOMStructure
name|structure
init|=
operator|new
name|DOMStructure
argument_list|(
name|qualifyingProperties
argument_list|)
decl_stmt|;
name|XMLObject
name|propertiesObject
init|=
name|input
operator|.
name|getSignatureFactory
argument_list|()
operator|.
name|newXMLObject
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|structure
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|result
operator|.
name|setReferences
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setObjects
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|propertiesObject
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|setAttribute (Element element, String attrName, String value)
specifier|protected
name|void
name|setAttribute
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|attrName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
comment|//  element.setAttribute(name, value); did cause NullPointerException in santuario 2.02
name|element
operator|.
name|setAttributeNS
argument_list|(
literal|""
argument_list|,
name|attrName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setIdAttributeFromHeader (String header, Element element, Input input)
specifier|protected
name|void
name|setIdAttributeFromHeader
parameter_list|(
name|String
name|header
parameter_list|,
name|Element
name|element
parameter_list|,
name|Input
name|input
parameter_list|)
block|{
name|String
name|value
init|=
name|input
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeader
argument_list|(
name|header
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setAttribute
argument_list|(
name|element
argument_list|,
literal|"Id"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|element
operator|.
name|setIdAttribute
argument_list|(
literal|"Id"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addSignedDataObjectProperties (Document doc, Element signedProperties, Input input)
specifier|protected
name|String
name|addSignedDataObjectProperties
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|signedProperties
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|XmlSignatureException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
block|{
if|if
condition|(
name|isAddSignedDataObjectPropeties
argument_list|()
condition|)
block|{
name|Element
name|signedDataObjectProperties
init|=
name|createElement
argument_list|(
literal|"SignedDataObjectProperties"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|setIdAttributeFromHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_SIGNED_DATA_OBJECT_PROPERTIES_ID
argument_list|,
name|signedDataObjectProperties
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|signedProperties
operator|.
name|appendChild
argument_list|(
name|signedDataObjectProperties
argument_list|)
expr_stmt|;
name|String
name|contentReferenceId
init|=
name|addDataObjectFormat
argument_list|(
name|signedDataObjectProperties
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|addCommitmentTypeIndication
argument_list|(
name|signedDataObjectProperties
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
expr_stmt|;
return|return
name|contentReferenceId
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|isAddSignedDataObjectPropeties ()
specifier|protected
name|boolean
name|isAddSignedDataObjectPropeties
parameter_list|()
block|{
return|return
name|isAddDataObjectFormat
argument_list|()
operator|||
name|isAddCommitmentType
argument_list|()
return|;
block|}
DECL|method|addCommitmentTypeIndication (Element signedDataObjectProperties, Document doc, Input input)
specifier|protected
name|void
name|addCommitmentTypeIndication
parameter_list|(
name|Element
name|signedDataObjectProperties
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|XmlSignatureException
block|{
if|if
condition|(
operator|!
name|isAddCommitmentType
argument_list|()
condition|)
block|{
return|return;
block|}
name|Element
name|commitmentTypeIndication
init|=
name|createElement
argument_list|(
literal|"CommitmentTypeIndication"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signedDataObjectProperties
operator|.
name|appendChild
argument_list|(
name|commitmentTypeIndication
argument_list|)
expr_stmt|;
name|Element
name|commitmentTypeIdEl
init|=
name|createElement
argument_list|(
literal|"CommitmentTypeId"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|commitmentTypeIndication
operator|.
name|appendChild
argument_list|(
name|commitmentTypeIdEl
argument_list|)
expr_stmt|;
name|Element
name|identifier
init|=
name|createElement
argument_list|(
literal|"Identifier"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|commitmentTypeIdEl
operator|.
name|appendChild
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setTextContent
argument_list|(
name|getCommitmentTypeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCommitmentTypeIdQualifier
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getCommitmentTypeIdQualifier
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setAttribute
argument_list|(
name|identifier
argument_list|,
literal|"Qualifier"
argument_list|,
name|getCommitmentTypeIdQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getCommitmentTypeIdDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getCommitmentTypeIdDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|description
init|=
name|createElement
argument_list|(
literal|"Description"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|commitmentTypeIdEl
operator|.
name|appendChild
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|description
operator|.
name|setTextContent
argument_list|(
name|getCommitmentTypeIdDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getCommitmentTypeIdDocumentationReferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|documentationReferences
init|=
name|createElement
argument_list|(
literal|"DocumentationReferences"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|commitmentTypeIdEl
operator|.
name|appendChild
argument_list|(
name|documentationReferences
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|docReferences
init|=
name|getCommitmentTypeIdDocumentationReferences
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|documentationReferenceValue
range|:
name|docReferences
control|)
block|{
name|Element
name|documentationReference
init|=
name|createElement
argument_list|(
literal|"DocumentationReference"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|documentationReferences
operator|.
name|appendChild
argument_list|(
name|documentationReference
argument_list|)
expr_stmt|;
name|documentationReference
operator|.
name|setTextContent
argument_list|(
name|documentationReferenceValue
argument_list|)
expr_stmt|;
block|}
block|}
name|Element
name|allSignedDataObjects
init|=
name|createElement
argument_list|(
literal|"AllSignedDataObjects"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|commitmentTypeIndication
operator|.
name|appendChild
argument_list|(
name|allSignedDataObjects
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|qualifiers
init|=
name|getCommitmentTypeQualifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|qualifiersEl
init|=
name|createElement
argument_list|(
literal|"CommitmentTypeQualifiers"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|commitmentTypeIndication
operator|.
name|appendChild
argument_list|(
name|qualifiersEl
argument_list|)
expr_stmt|;
name|String
name|errorMessage
init|=
literal|"The XAdES confguration is invalid. The list of the commitment type qualifiers contains the invalid entry '%s'. An entry must either be a text or an XML fragment "
operator|+
literal|"with the root element '%s' with the namespace '%s'."
decl_stmt|;
for|for
control|(
name|String
name|qualifier
range|:
name|getCommitmentTypeQualifiers
argument_list|()
control|)
block|{
name|Element
name|qualifierEl
init|=
name|createChildFromXmlFragmentOrText
argument_list|(
name|doc
argument_list|,
name|input
argument_list|,
literal|"CommitmentTypeQualifier"
argument_list|,
name|errorMessage
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
name|qualifiersEl
operator|.
name|appendChild
argument_list|(
name|qualifierEl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isAddCommitmentType ()
specifier|protected
name|boolean
name|isAddCommitmentType
parameter_list|()
block|{
return|return
name|getCommitmentTypeId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getCommitmentTypeId
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|addDataObjectFormat (Element signedDataObjectProperties, Document doc, Input input)
specifier|protected
name|String
name|addDataObjectFormat
parameter_list|(
name|Element
name|signedDataObjectProperties
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|XmlSignatureException
block|{
if|if
condition|(
operator|!
name|isAddDataObjectFormat
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Element
name|dataObjectFormat
init|=
name|createElement
argument_list|(
literal|"DataObjectFormat"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signedDataObjectProperties
operator|.
name|appendChild
argument_list|(
name|dataObjectFormat
argument_list|)
expr_stmt|;
name|String
name|contentReferenceId
init|=
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|setAttribute
argument_list|(
name|dataObjectFormat
argument_list|,
literal|"ObjectReference"
argument_list|,
name|contentReferenceId
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDataObjectFormatDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDataObjectFormatDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|description
init|=
name|createElement
argument_list|(
literal|"Description"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|dataObjectFormat
operator|.
name|appendChild
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|description
operator|.
name|setTextContent
argument_list|(
name|getDataObjectFormatDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDataObjectFormatIdentifier
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDataObjectFormatIdentifier
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|objectIdentifier
init|=
name|createElement
argument_list|(
literal|"ObjectIdentifier"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|dataObjectFormat
operator|.
name|appendChild
argument_list|(
name|objectIdentifier
argument_list|)
expr_stmt|;
name|Element
name|identifier
init|=
name|createElement
argument_list|(
literal|"Identifier"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|objectIdentifier
operator|.
name|appendChild
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setTextContent
argument_list|(
name|getDataObjectFormatIdentifier
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDataObjectFormatIdentifierQualifier
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDataObjectFormatIdentifierQualifier
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setAttribute
argument_list|(
name|identifier
argument_list|,
literal|"Qualifier"
argument_list|,
name|getDataObjectFormatIdentifierQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDataObjectFormatIdentifierDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDataObjectFormatIdentifierDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|description
init|=
name|createElement
argument_list|(
literal|"Description"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|objectIdentifier
operator|.
name|appendChild
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|description
operator|.
name|setTextContent
argument_list|(
name|getDataObjectFormatIdentifierDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getDataObjectFormatIdentifierDocumentationReferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|documentationReferences
init|=
name|createElement
argument_list|(
literal|"DocumentationReferences"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|objectIdentifier
operator|.
name|appendChild
argument_list|(
name|documentationReferences
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|docReferences
init|=
name|getDataObjectFormatIdentifierDocumentationReferences
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|documentationReferenceValue
range|:
name|docReferences
control|)
block|{
name|Element
name|documentationReference
init|=
name|createElement
argument_list|(
literal|"DocumentationReference"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|documentationReferences
operator|.
name|appendChild
argument_list|(
name|documentationReference
argument_list|)
expr_stmt|;
name|documentationReference
operator|.
name|setTextContent
argument_list|(
name|documentationReferenceValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|getDataObjectFormatMimeType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDataObjectFormatMimeType
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|mimeType
init|=
name|createElement
argument_list|(
literal|"MimeType"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|dataObjectFormat
operator|.
name|appendChild
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
name|mimeType
operator|.
name|setTextContent
argument_list|(
name|getDataObjectFormatMimeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|encoding
init|=
name|input
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_DATA_OBJECT_FORMAT_ENCODING
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
operator|&&
operator|!
name|encoding
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|encodingEl
init|=
name|createElement
argument_list|(
literal|"Encoding"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|dataObjectFormat
operator|.
name|appendChild
argument_list|(
name|encodingEl
argument_list|)
expr_stmt|;
name|encodingEl
operator|.
name|setTextContent
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
return|return
name|contentReferenceId
return|;
block|}
DECL|method|isAddDataObjectFormat ()
specifier|protected
name|boolean
name|isAddDataObjectFormat
parameter_list|()
block|{
return|return
operator|(
name|getDataObjectFormatIdentifier
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDataObjectFormatIdentifier
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|getDataObjectFormatDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDataObjectFormatDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|getDataObjectFormatMimeType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDataObjectFormatMimeType
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
DECL|method|addSignedSignatureProperties (Document doc, Element signedProperties, Input input)
specifier|protected
name|void
name|addSignedSignatureProperties
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|signedProperties
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
if|if
condition|(
name|isAddSignedSignatureProperties
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding signed signature properties"
argument_list|)
expr_stmt|;
name|Element
name|signedSignatureProperties
init|=
name|createElement
argument_list|(
literal|"SignedSignatureProperties"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|setIdAttributeFromHeader
argument_list|(
name|XmlSignatureConstants
operator|.
name|HEADER_XADES_SIGNED_SIGNATURE_PROPERTIES_ID
argument_list|,
name|signedSignatureProperties
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|signedProperties
operator|.
name|appendChild
argument_list|(
name|signedSignatureProperties
argument_list|)
expr_stmt|;
name|addSigningTime
argument_list|(
name|doc
argument_list|,
name|signedSignatureProperties
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|addSigningCertificate
argument_list|(
name|doc
argument_list|,
name|signedSignatureProperties
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|addSignaturePolicyIdentifier
argument_list|(
name|doc
argument_list|,
name|signedSignatureProperties
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|addSignatureProductionPlace
argument_list|(
name|doc
argument_list|,
name|signedSignatureProperties
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|addSignerRole
argument_list|(
name|doc
argument_list|,
name|signedSignatureProperties
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isAddSignedSignatureProperties ()
specifier|protected
name|boolean
name|isAddSignedSignatureProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOPMD
return|return
name|isAddSigningTime
argument_list|()
operator|||
name|getSigningCertificate
argument_list|()
operator|!=
literal|null
operator|||
operator|(
name|getSigningCertificateChain
argument_list|()
operator|!=
literal|null
operator|&&
name|getSigningCertificateChain
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
operator|||
name|isAddSignaturePolicy
argument_list|()
operator|||
name|isAddSignatureProductionPlace
argument_list|()
operator|||
name|isAddSignerRole
argument_list|()
return|;
block|}
DECL|method|isAddSignerRole ()
specifier|protected
name|boolean
name|isAddSignerRole
parameter_list|()
block|{
return|return
name|getSignerClaimedRoles
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|getSignerCertifiedRoles
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|addSignatureProductionPlace (Document doc, Element signedSignatureProperties, Input input)
specifier|protected
name|void
name|addSignatureProductionPlace
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|signedSignatureProperties
parameter_list|,
name|Input
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAddSignatureProductionPlace
argument_list|()
condition|)
block|{
return|return;
block|}
name|Element
name|signatureProductionPlace
init|=
name|createElement
argument_list|(
literal|"SignatureProductionPlace"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signedSignatureProperties
operator|.
name|appendChild
argument_list|(
name|signatureProductionPlace
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSignatureProductionPlaceCity
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getSignatureProductionPlaceCity
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding production city"
argument_list|)
expr_stmt|;
name|Element
name|city
init|=
name|createElement
argument_list|(
literal|"City"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signatureProductionPlace
operator|.
name|appendChild
argument_list|(
name|city
argument_list|)
expr_stmt|;
name|city
operator|.
name|setTextContent
argument_list|(
name|getSignatureProductionPlaceCity
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSignatureProductionPlaceStateOrProvince
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getSignatureProductionPlaceStateOrProvince
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding production state or province"
argument_list|)
expr_stmt|;
name|Element
name|stateOrProvince
init|=
name|createElement
argument_list|(
literal|"StateOrProvince"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signatureProductionPlace
operator|.
name|appendChild
argument_list|(
name|stateOrProvince
argument_list|)
expr_stmt|;
name|stateOrProvince
operator|.
name|setTextContent
argument_list|(
name|getSignatureProductionPlaceStateOrProvince
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSignatureProductionPlacePostalCode
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getSignatureProductionPlacePostalCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding production postal code"
argument_list|)
expr_stmt|;
name|Element
name|postalCode
init|=
name|createElement
argument_list|(
literal|"PostalCode"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signatureProductionPlace
operator|.
name|appendChild
argument_list|(
name|postalCode
argument_list|)
expr_stmt|;
name|postalCode
operator|.
name|setTextContent
argument_list|(
name|getSignatureProductionPlacePostalCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSignatureProductionPlaceCountryName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getSignatureProductionPlaceCountryName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding production country name"
argument_list|)
expr_stmt|;
name|Element
name|countryName
init|=
name|createElement
argument_list|(
literal|"CountryName"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signatureProductionPlace
operator|.
name|appendChild
argument_list|(
name|countryName
argument_list|)
expr_stmt|;
name|countryName
operator|.
name|setTextContent
argument_list|(
name|getSignatureProductionPlaceCountryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isAddSignatureProductionPlace ()
specifier|protected
name|boolean
name|isAddSignatureProductionPlace
parameter_list|()
block|{
return|return
name|isNotEmpty
argument_list|(
name|getSignatureProductionPlaceCity
argument_list|()
argument_list|)
operator|||
name|isNotEmpty
argument_list|(
name|getSignatureProductionPlaceCountryName
argument_list|()
argument_list|)
operator|||
name|isNotEmpty
argument_list|(
name|getSignatureProductionPlacePostalCode
argument_list|()
argument_list|)
operator|||
name|isNotEmpty
argument_list|(
name|getSignatureProductionPlaceStateOrProvince
argument_list|()
argument_list|)
return|;
block|}
DECL|method|addSignerRole (Document doc, Element signedSignatureProperties, Input input)
specifier|protected
name|void
name|addSignerRole
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|signedSignatureProperties
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|XmlSignatureException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
block|{
if|if
condition|(
operator|!
name|isAddSignerRole
argument_list|()
condition|)
block|{
return|return;
block|}
name|Element
name|signerRole
init|=
name|createElement
argument_list|(
literal|"SignerRole"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signedSignatureProperties
operator|.
name|appendChild
argument_list|(
name|signerRole
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|claimedRoles
init|=
name|getSignerClaimedRoles
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|claimedRoles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding claimed roles"
argument_list|)
expr_stmt|;
name|Element
name|claimedRolesEl
init|=
name|createElement
argument_list|(
literal|"ClaimedRoles"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signerRole
operator|.
name|appendChild
argument_list|(
name|claimedRolesEl
argument_list|)
expr_stmt|;
name|String
name|errorMessage
init|=
literal|"The XAdES confguration is invalid. The list of the claimed roles contains the invalid entry '%s'."
operator|+
literal|" An entry must either be a text or an XML fragment with the root element '%s' with the namespace '%s'."
decl_stmt|;
for|for
control|(
name|String
name|claimedRole
range|:
name|claimedRoles
control|)
block|{
name|Element
name|claimedRoleEl
init|=
name|createChildFromXmlFragmentOrText
argument_list|(
name|doc
argument_list|,
name|input
argument_list|,
literal|"ClaimedRole"
argument_list|,
name|errorMessage
argument_list|,
name|claimedRole
argument_list|)
decl_stmt|;
name|claimedRolesEl
operator|.
name|appendChild
argument_list|(
name|claimedRoleEl
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|XAdESEncapsulatedPKIData
argument_list|>
name|certifiedRoles
init|=
name|getSignerCertifiedRoles
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|certifiedRoles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding certified roles"
argument_list|)
expr_stmt|;
name|Element
name|certifiedRolesEl
init|=
name|createElement
argument_list|(
literal|"CertifiedRoles"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signerRole
operator|.
name|appendChild
argument_list|(
name|certifiedRolesEl
argument_list|)
expr_stmt|;
for|for
control|(
name|XAdESEncapsulatedPKIData
name|certifiedRole
range|:
name|certifiedRoles
control|)
block|{
name|Element
name|certifiedRoleEl
init|=
name|createElement
argument_list|(
literal|"CertifiedRole"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|certifiedRolesEl
operator|.
name|appendChild
argument_list|(
name|certifiedRoleEl
argument_list|)
expr_stmt|;
name|certifiedRoleEl
operator|.
name|setTextContent
argument_list|(
name|certifiedRole
operator|.
name|getBase64Conent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|certifiedRole
operator|.
name|getEncoding
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|certifiedRole
operator|.
name|getEncoding
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setAttribute
argument_list|(
name|certifiedRoleEl
argument_list|,
literal|"Encoding"
argument_list|,
name|certifiedRole
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|certifiedRole
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|certifiedRole
operator|.
name|getId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setAttribute
argument_list|(
name|certifiedRoleEl
argument_list|,
literal|"Id"
argument_list|,
name|certifiedRole
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|certifiedRoleEl
operator|.
name|setIdAttribute
argument_list|(
literal|"Id"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addSignaturePolicyIdentifier (Document doc, Element signedProperties, Input input)
specifier|protected
name|void
name|addSignaturePolicyIdentifier
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|signedProperties
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|XmlSignatureException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
block|{
if|if
condition|(
operator|!
name|isAddSignaturePolicy
argument_list|()
condition|)
block|{
return|return;
block|}
name|Element
name|signaturePolicyIdentifier
init|=
name|createElement
argument_list|(
literal|"SignaturePolicyIdentifier"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signedProperties
operator|.
name|appendChild
argument_list|(
name|signaturePolicyIdentifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|SIG_POLICY_IMPLIED
operator|.
name|equals
argument_list|(
name|getSignaturePolicy
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding implied signature policy"
argument_list|)
expr_stmt|;
name|Element
name|implied
init|=
name|createElement
argument_list|(
literal|"SignaturePolicyImplied"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signaturePolicyIdentifier
operator|.
name|appendChild
argument_list|(
name|implied
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SIG_POLICY_EXPLICIT_ID
operator|.
name|equals
argument_list|(
name|getSignaturePolicy
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding signatue policy ID"
argument_list|)
expr_stmt|;
name|Element
name|id
init|=
name|createElement
argument_list|(
literal|"SignaturePolicyId"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signaturePolicyIdentifier
operator|.
name|appendChild
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Element
name|sigPolicyId
init|=
name|createElement
argument_list|(
literal|"SigPolicyId"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|id
operator|.
name|appendChild
argument_list|(
name|sigPolicyId
argument_list|)
expr_stmt|;
name|Element
name|identifier
init|=
name|createElement
argument_list|(
literal|"Identifier"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|sigPolicyId
operator|.
name|appendChild
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSigPolicyId
argument_list|()
operator|==
literal|null
operator|||
name|getSigPolicyId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The XAdES-EPES confguration is invalid. The signature policy identifier is missing."
argument_list|)
throw|;
block|}
name|identifier
operator|.
name|setTextContent
argument_list|(
name|getSigPolicyId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSigPolicyIdQualifier
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getSigPolicyIdQualifier
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setAttribute
argument_list|(
name|identifier
argument_list|,
literal|"Qualifier"
argument_list|,
name|getSigPolicyIdQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSigPolicyIdDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getSigPolicyIdDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|description
init|=
name|createElement
argument_list|(
literal|"Description"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|sigPolicyId
operator|.
name|appendChild
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|description
operator|.
name|setTextContent
argument_list|(
name|getSigPolicyIdDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getSigPolicyIdDocumentationReferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|documentationReferences
init|=
name|createElement
argument_list|(
literal|"DocumentationReferences"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|sigPolicyId
operator|.
name|appendChild
argument_list|(
name|documentationReferences
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|docReferences
init|=
name|getSigPolicyIdDocumentationReferences
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|documentationReferenceValue
range|:
name|docReferences
control|)
block|{
name|Element
name|documentationReference
init|=
name|createElement
argument_list|(
literal|"DocumentationReference"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|documentationReferences
operator|.
name|appendChild
argument_list|(
name|documentationReference
argument_list|)
expr_stmt|;
name|documentationReference
operator|.
name|setTextContent
argument_list|(
name|documentationReferenceValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|//here we could introduce the transformations for the signature policy, which we do not yet support
name|Element
name|sigPolicyHash
init|=
name|createElement
argument_list|(
literal|"SigPolicyHash"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|id
operator|.
name|appendChild
argument_list|(
name|sigPolicyHash
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSignaturePolicyDigestAlgorithm
argument_list|()
operator|==
literal|null
operator|||
name|getSignaturePolicyDigestAlgorithm
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The XAdES-EPES confguration is invalid. The digest algorithm for the signature policy is missing."
argument_list|)
throw|;
block|}
name|Element
name|digestMethod
init|=
name|createDigSigElement
argument_list|(
literal|"DigestMethod"
argument_list|,
name|doc
argument_list|,
name|input
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|sigPolicyHash
operator|.
name|appendChild
argument_list|(
name|digestMethod
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|digestMethod
argument_list|,
literal|"Algorithm"
argument_list|,
name|getSignaturePolicyDigestAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSignaturePolicyDigestValue
argument_list|()
operator|==
literal|null
operator|||
name|getSignaturePolicyDigestValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"The XAdES-EPES confguration is invalid. The digest value for the signature policy is missing."
argument_list|)
throw|;
block|}
name|Element
name|digestValue
init|=
name|createDigSigElement
argument_list|(
literal|"DigestValue"
argument_list|,
name|doc
argument_list|,
name|input
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|sigPolicyHash
operator|.
name|appendChild
argument_list|(
name|digestValue
argument_list|)
expr_stmt|;
name|digestValue
operator|.
name|setTextContent
argument_list|(
name|getSignaturePolicyDigestValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|qualifiers
init|=
name|getSigPolicyQualifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|qualifiersEl
init|=
name|createElement
argument_list|(
literal|"SigPolicyQualifiers"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|id
operator|.
name|appendChild
argument_list|(
name|qualifiersEl
argument_list|)
expr_stmt|;
name|String
name|errorMessage
init|=
literal|"The XAdES confguration is invalid. The list of the signatue policy qualifiers contains the invalid entry '%s'."
operator|+
literal|" An entry must either be a text or an XML fragment with the root element '%s' with the namespace '%s'."
decl_stmt|;
for|for
control|(
name|String
name|elementOrText
range|:
name|getSigPolicyQualifiers
argument_list|()
control|)
block|{
name|Element
name|child
init|=
name|createChildFromXmlFragmentOrText
argument_list|(
name|doc
argument_list|,
name|input
argument_list|,
literal|"SigPolicyQualifier"
argument_list|,
name|errorMessage
argument_list|,
name|elementOrText
argument_list|)
decl_stmt|;
name|qualifiersEl
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// cannot happen
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid value '%s' for parameter 'SignaturePolicy'. Possible values are: 'None', 'Implied', and 'ExplictId'."
argument_list|,
name|getSignaturePolicy
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|createChildFromXmlFragmentOrText (Document doc, Input input, String localElementName, String errorMessage, String elementOrText)
specifier|protected
name|Element
name|createChildFromXmlFragmentOrText
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Input
name|input
parameter_list|,
name|String
name|localElementName
parameter_list|,
name|String
name|errorMessage
parameter_list|,
name|String
name|elementOrText
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|XmlSignatureException
block|{
name|String
name|ending
init|=
name|localElementName
operator|+
literal|">"
decl_stmt|;
name|Element
name|child
decl_stmt|;
if|if
condition|(
name|elementOrText
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
operator|&&
name|elementOrText
operator|.
name|endsWith
argument_list|(
name|ending
argument_list|)
condition|)
block|{
try|try
block|{
comment|// assume xml
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|elementOrText
argument_list|)
argument_list|)
decl_stmt|;
name|source
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Document
name|parsedDoc
init|=
name|XmlSignatureHelper
operator|.
name|newDocumentBuilder
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|parse
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|replacePrefixes
argument_list|(
name|parsedDoc
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|child
operator|=
operator|(
name|Element
operator|)
name|doc
operator|.
name|adoptNode
argument_list|(
name|parsedDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for correct namespace
name|String
name|ns
init|=
name|findNamespace
argument_list|(
name|input
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ns
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The XAdES confguration is invalid. The root element '%s' of the provided XML fragment '%s' has the invalid namespace '%s'. The correct namespace is '%s'."
argument_list|,
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|elementOrText
argument_list|,
name|child
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|ns
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|errorMessage
argument_list|,
name|elementOrText
argument_list|,
name|localElementName
argument_list|,
name|namespace
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|child
operator|=
name|createElement
argument_list|(
name|localElementName
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|child
operator|.
name|setTextContent
argument_list|(
name|elementOrText
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
DECL|method|replacePrefixes (Document qualifierDoc, Input input)
specifier|protected
name|void
name|replacePrefixes
parameter_list|(
name|Document
name|qualifierDoc
parameter_list|,
name|Input
name|input
parameter_list|)
block|{
name|Element
name|el
init|=
name|qualifierDoc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|replacePrefix
argument_list|(
name|el
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|childElements
init|=
name|getChildElements
argument_list|(
name|el
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|collectedNewChildElements
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
operator|!
name|childElements
operator|.
name|isEmpty
argument_list|()
condition|;
control|)
block|{
name|collectedNewChildElements
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Element
name|child
range|:
name|childElements
control|)
block|{
name|replacePrefix
argument_list|(
name|child
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|newChildElements
init|=
name|getChildElements
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|collectedNewChildElements
operator|.
name|addAll
argument_list|(
name|newChildElements
argument_list|)
expr_stmt|;
block|}
name|childElements
operator|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|(
name|collectedNewChildElements
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getChildElements (Element el)
specifier|protected
name|List
argument_list|<
name|Element
argument_list|>
name|getChildElements
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|childElements
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|NodeList
name|children
init|=
name|el
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|children
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
name|childElements
operator|.
name|add
argument_list|(
operator|(
name|Element
operator|)
name|child
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|childElements
return|;
block|}
DECL|method|replacePrefix (Element el, Input input)
specifier|protected
name|void
name|replacePrefix
parameter_list|(
name|Element
name|el
parameter_list|,
name|Input
name|input
parameter_list|)
block|{
name|replacePrefixForNode
argument_list|(
name|el
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|nnm
init|=
name|el
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Attr
argument_list|>
name|xmlnsToBeRemoved
init|=
operator|new
name|ArrayList
argument_list|<
name|Attr
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|nnm
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attr
init|=
name|nnm
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|replacePrefixForNode
argument_list|(
name|attr
argument_list|,
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|attr
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|||
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|XMLSignature
operator|.
name|XMLNS
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getTextContent
argument_list|()
argument_list|)
operator|||
name|findNamespace
argument_list|(
name|input
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getTextContent
argument_list|()
argument_list|)
condition|)
block|{
name|xmlnsToBeRemoved
operator|.
name|add
argument_list|(
operator|(
name|Attr
operator|)
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// remove xml namespace declaration for XML signature and XAdES namespace
for|for
control|(
name|Attr
name|toBeRemoved
range|:
name|xmlnsToBeRemoved
control|)
block|{
name|el
operator|.
name|removeAttributeNode
argument_list|(
name|toBeRemoved
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|replacePrefixForNode (Node node, Input input)
specifier|protected
name|void
name|replacePrefixForNode
parameter_list|(
name|Node
name|node
parameter_list|,
name|Input
name|input
parameter_list|)
block|{
if|if
condition|(
name|XMLSignature
operator|.
name|XMLNS
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|node
operator|.
name|setPrefix
argument_list|(
name|input
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|findNamespace
argument_list|(
name|input
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|node
operator|.
name|setPrefix
argument_list|(
name|findPrefix
argument_list|(
name|input
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isAddSignaturePolicy ()
specifier|protected
name|boolean
name|isAddSignaturePolicy
parameter_list|()
block|{
return|return
operator|!
name|SIG_POLICY_NONE
operator|.
name|equals
argument_list|(
name|getSignaturePolicy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|addSigningCertificate (Document doc, Element signedProperties, Input input)
specifier|protected
name|void
name|addSigningCertificate
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|signedProperties
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
if|if
condition|(
name|getSigningCertificate
argument_list|()
operator|==
literal|null
operator|&&
operator|(
name|getSigningCertificateChain
argument_list|()
operator|==
literal|null
operator|||
name|getSigningCertificateChain
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return;
block|}
comment|// signed certificate
name|Element
name|signedCertificate
init|=
name|createElement
argument_list|(
literal|"SigningCertificate"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signedProperties
operator|.
name|appendChild
argument_list|(
name|signedCertificate
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSigningCertificate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding signing certificate"
argument_list|)
expr_stmt|;
name|X509Certificate
name|cert
init|=
name|getSigningCertificate
argument_list|()
decl_stmt|;
name|addCertificate
argument_list|(
name|cert
argument_list|,
name|signedCertificate
argument_list|,
name|doc
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getSigningCertificateChain
argument_list|()
operator|!=
literal|null
operator|&&
name|getSigningCertificateChain
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Certificate
index|[]
name|certs
init|=
name|getSigningCertificateChain
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Certificate
name|cert
range|:
name|certs
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding chain certtificate {}"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|X509Certificate
name|x509Cert
init|=
operator|(
name|X509Certificate
operator|)
name|cert
decl_stmt|;
name|addCertificate
argument_list|(
name|x509Cert
argument_list|,
name|signedCertificate
argument_list|,
name|doc
argument_list|,
name|index
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// cannot happen
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected exception"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the signing certificate. If you want to have a      * "SigningCertificate" element then either this method or the method      * {@link #getSigningCertificateChain()} must return a value which is      * different from<code>null</code> or an empty array.      *<p>      * This implementation returns<code>null</code>      */
DECL|method|getSigningCertificate ()
specifier|protected
name|X509Certificate
name|getSigningCertificate
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOPMD
return|return
literal|null
return|;
block|}
comment|/**      * Returns the signing certificate. If you want to have a      * "SigningCertificate" element then either this method or the method      * {@link #getSigningCertificate()} must return a value.      *<p>      * This implementation returns<code>null</code>      */
DECL|method|getSigningCertificateChain ()
specifier|protected
name|X509Certificate
index|[]
name|getSigningCertificateChain
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOPMD
return|return
literal|null
return|;
block|}
DECL|method|addSigningTime (Document doc, Element signedProperties, Input input)
specifier|protected
name|void
name|addSigningTime
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|signedProperties
parameter_list|,
name|Input
name|input
parameter_list|)
block|{
if|if
condition|(
name|isAddSigningTime
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding signing time"
argument_list|)
expr_stmt|;
comment|//signing time
name|Element
name|signingTime
init|=
name|createElement
argument_list|(
literal|"SigningTime"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signedProperties
operator|.
name|appendChild
argument_list|(
name|signingTime
argument_list|)
expr_stmt|;
name|Date
name|current
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|signingTime
operator|.
name|setTextContent
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ssXXX"
argument_list|)
operator|.
name|format
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addCertificate (X509Certificate cert, Element signedCertificate, Document doc, int index, Input input)
specifier|protected
name|void
name|addCertificate
parameter_list|(
name|X509Certificate
name|cert
parameter_list|,
name|Element
name|signedCertificate
parameter_list|,
name|Document
name|doc
parameter_list|,
name|int
name|index
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|CertificateEncodingException
throws|,
name|NoSuchAlgorithmException
throws|,
name|XmlSignatureException
block|{
name|Element
name|elCert
init|=
name|createElement
argument_list|(
literal|"Cert"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|signedCertificate
operator|.
name|appendChild
argument_list|(
name|elCert
argument_list|)
expr_stmt|;
name|String
name|algorithm
init|=
name|getMessageDigestAlgorithm
argument_list|(
name|getDigestAlgorithmForSigningCertificate
argument_list|()
argument_list|,
literal|"The digest algorithm '%s' for the signing certificate is invalid"
argument_list|)
decl_stmt|;
name|String
name|digest
init|=
name|calculateDigest
argument_list|(
name|algorithm
argument_list|,
name|cert
operator|.
name|getEncoded
argument_list|()
argument_list|)
decl_stmt|;
name|Element
name|certDigest
init|=
name|createElement
argument_list|(
literal|"CertDigest"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|elCert
operator|.
name|appendChild
argument_list|(
name|certDigest
argument_list|)
expr_stmt|;
name|Element
name|digestMethod
init|=
name|createDigSigElement
argument_list|(
literal|"DigestMethod"
argument_list|,
name|doc
argument_list|,
name|input
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|certDigest
operator|.
name|appendChild
argument_list|(
name|digestMethod
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|digestMethod
argument_list|,
literal|"Algorithm"
argument_list|,
name|getDigestAlgorithmForSigningCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|digestValue
init|=
name|createDigSigElement
argument_list|(
literal|"DigestValue"
argument_list|,
name|doc
argument_list|,
name|input
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|certDigest
operator|.
name|appendChild
argument_list|(
name|digestValue
argument_list|)
expr_stmt|;
name|digestValue
operator|.
name|setTextContent
argument_list|(
name|digest
argument_list|)
expr_stmt|;
name|Element
name|issuerSerial
init|=
name|createElement
argument_list|(
literal|"IssuerSerial"
argument_list|,
name|doc
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|elCert
operator|.
name|appendChild
argument_list|(
name|issuerSerial
argument_list|)
expr_stmt|;
name|Element
name|x509IssuerName
init|=
name|createDigSigElement
argument_list|(
literal|"X509IssuerName"
argument_list|,
name|doc
argument_list|,
name|input
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|issuerSerial
operator|.
name|appendChild
argument_list|(
name|x509IssuerName
argument_list|)
expr_stmt|;
name|x509IssuerName
operator|.
name|setTextContent
argument_list|(
name|cert
operator|.
name|getIssuerX500Principal
argument_list|()
operator|.
name|getName
argument_list|(
name|X500Principal
operator|.
name|RFC2253
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|x509SerialNumber
init|=
name|createDigSigElement
argument_list|(
literal|"X509SerialNumber"
argument_list|,
name|doc
argument_list|,
name|input
operator|.
name|getPrefixForXmlSignatureNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|issuerSerial
operator|.
name|appendChild
argument_list|(
name|x509SerialNumber
argument_list|)
expr_stmt|;
name|x509SerialNumber
operator|.
name|setTextContent
argument_list|(
name|cert
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
name|getSigningCertificateURIs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|uris
operator|.
name|isEmpty
argument_list|()
operator|&&
name|uris
operator|.
name|size
argument_list|()
operator|>
name|index
condition|)
block|{
name|String
name|uri
init|=
name|uris
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
operator|!
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setAttribute
argument_list|(
name|elCert
argument_list|,
literal|"URI"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getMessageDigestAlgorithm (String xmlSigDigestMethod, String errorMessage)
specifier|protected
name|String
name|getMessageDigestAlgorithm
parameter_list|(
name|String
name|xmlSigDigestMethod
parameter_list|,
name|String
name|errorMessage
parameter_list|)
throws|throws
name|XmlSignatureException
block|{
name|String
name|algorithm
decl_stmt|;
if|if
condition|(
name|DigestMethod
operator|.
name|SHA1
operator|.
name|equals
argument_list|(
name|xmlSigDigestMethod
argument_list|)
condition|)
block|{
name|algorithm
operator|=
literal|"SHA-1"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DigestMethod
operator|.
name|SHA256
operator|.
name|equals
argument_list|(
name|xmlSigDigestMethod
argument_list|)
condition|)
block|{
name|algorithm
operator|=
literal|"SHA-256"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"http://www.w3.org/2001/04/xmldsig-more#sha384"
operator|.
name|equals
argument_list|(
name|xmlSigDigestMethod
argument_list|)
condition|)
block|{
name|algorithm
operator|=
literal|"SHA-384"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DigestMethod
operator|.
name|SHA512
operator|.
name|equals
argument_list|(
name|getDigestAlgorithmForSigningCertificate
argument_list|()
argument_list|)
condition|)
block|{
name|algorithm
operator|=
literal|"SHA-512"
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|errorMessage
argument_list|,
name|xmlSigDigestMethod
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|algorithm
return|;
block|}
DECL|method|calculateDigest (String algorithm, byte[] bytes)
specifier|protected
name|String
name|calculateDigest
parameter_list|(
name|String
name|algorithm
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|CertificateEncodingException
block|{
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
name|byte
index|[]
name|digestBytes
init|=
name|digest
operator|.
name|digest
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
return|return
operator|new
name|Base64
argument_list|()
operator|.
name|encodeAsString
argument_list|(
name|digestBytes
argument_list|)
return|;
block|}
DECL|method|createDigSigElement (String localName, Document doc, String prefixForXmlSignatureNamespace)
specifier|protected
name|Element
name|createDigSigElement
parameter_list|(
name|String
name|localName
parameter_list|,
name|Document
name|doc
parameter_list|,
name|String
name|prefixForXmlSignatureNamespace
parameter_list|)
block|{
name|Element
name|el
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|,
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefixForXmlSignatureNamespace
operator|!=
literal|null
operator|&&
operator|!
name|prefixForXmlSignatureNamespace
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|el
operator|.
name|setPrefix
argument_list|(
name|prefixForXmlSignatureNamespace
argument_list|)
expr_stmt|;
block|}
return|return
name|el
return|;
block|}
DECL|method|createElement (String localName, Document doc, Input input)
specifier|protected
name|Element
name|createElement
parameter_list|(
name|String
name|localName
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Input
name|input
parameter_list|)
block|{
name|Element
name|el
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|findNamespace
argument_list|(
name|input
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|localName
argument_list|)
decl_stmt|;
name|String
name|p
init|=
name|findPrefix
argument_list|(
name|input
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|el
operator|.
name|setPrefix
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|el
return|;
block|}
block|}
end_class

end_unit

