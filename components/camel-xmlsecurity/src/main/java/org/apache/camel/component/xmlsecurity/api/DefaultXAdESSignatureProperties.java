begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_comment
comment|/**  * Default implementation for the XAdES signature properties which determines  * the Signing Certificate from a keystore and an alias.  */
end_comment

begin_class
DECL|class|DefaultXAdESSignatureProperties
specifier|public
class|class
name|DefaultXAdESSignatureProperties
extends|extends
name|XAdESSignatureProperties
implements|implements
name|CamelContextAware
block|{
DECL|field|keyStoreAndAlias
specifier|private
specifier|final
name|KeyStoreAndAlias
name|keyStoreAndAlias
init|=
operator|new
name|KeyStoreAndAlias
argument_list|()
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|method|DefaultXAdESSignatureProperties ()
specifier|public
name|DefaultXAdESSignatureProperties
parameter_list|()
block|{     }
DECL|method|setKeystore (KeyStore keystore)
specifier|public
name|void
name|setKeystore
parameter_list|(
name|KeyStore
name|keystore
parameter_list|)
block|{
name|keyStoreAndAlias
operator|.
name|setKeyStore
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
block|}
DECL|method|setAlias (String alias)
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|keyStoreAndAlias
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
DECL|method|setKeyStoreParameters (KeyStoreParameters parameters)
specifier|public
name|void
name|setKeyStoreParameters
parameter_list|(
name|KeyStoreParameters
name|parameters
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|keyStoreAndAlias
operator|.
name|setKeyStore
argument_list|(
name|parameters
operator|.
name|createKeyStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSigningCertificate ()
specifier|protected
name|X509Certificate
name|getSigningCertificate
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOPMD
if|if
condition|(
name|keyStoreAndAlias
operator|.
name|getKeyStore
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
literal|"No keystore has been configured"
argument_list|)
throw|;
block|}
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|keyStoreAndAlias
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getCertificate
argument_list|(
name|keyStoreAndAlias
operator|.
name|getAlias
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmlSignatureException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No certificate found in keystore for alias '%s'"
argument_list|,
name|keyStoreAndAlias
operator|.
name|getAlias
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|cert
return|;
block|}
annotation|@
name|Override
DECL|method|getSigningCertificateChain ()
specifier|protected
name|X509Certificate
index|[]
name|getSigningCertificateChain
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOPMD
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext context)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
block|}
end_class

end_unit

