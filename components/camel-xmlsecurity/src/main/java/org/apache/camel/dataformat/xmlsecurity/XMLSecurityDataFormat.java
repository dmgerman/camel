begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xmlsecurity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xmlsecurity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKeyFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|DESedeKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
operator|.
name|DefaultNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
operator|.
name|XPathBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|encryption
operator|.
name|EncryptedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|encryption
operator|.
name|EncryptedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|encryption
operator|.
name|XMLCipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|encryption
operator|.
name|XMLEncryptionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|keys
operator|.
name|KeyInfo
import|;
end_import

begin_class
DECL|class|XMLSecurityDataFormat
specifier|public
class|class
name|XMLSecurityDataFormat
implements|implements
name|DataFormat
implements|,
name|CamelContextAware
block|{
comment|/**      * @deprecated  Use {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, KeyStoreParameters)} instead.      */
annotation|@
name|Deprecated
DECL|field|XML_ENC_RECIPIENT_ALIAS
specifier|public
specifier|static
specifier|final
name|String
name|XML_ENC_RECIPIENT_ALIAS
init|=
literal|"CamelXmlEncryptionRecipientAlias"
decl_stmt|;
comment|/**      * @deprecated  Use {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, KeyStoreParameters)} instead.      */
annotation|@
name|Deprecated
DECL|field|XML_ENC_TRUST_STORE_URL
specifier|public
specifier|static
specifier|final
name|String
name|XML_ENC_TRUST_STORE_URL
init|=
literal|"CamelXmlEncryptionTrustStoreUrl"
decl_stmt|;
comment|/**      * @deprecated  Use {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, KeyStoreParameters)} instead.      */
annotation|@
name|Deprecated
DECL|field|XML_ENC_TRUST_STORE_PASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|XML_ENC_TRUST_STORE_PASSWORD
init|=
literal|"CamelXmlEncryptionTrustStorePassword"
decl_stmt|;
comment|/**      * @deprecated  Use {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, KeyStoreParameters)} instead.      */
annotation|@
name|Deprecated
DECL|field|XML_ENC_KEY_STORE_URL
specifier|public
specifier|static
specifier|final
name|String
name|XML_ENC_KEY_STORE_URL
init|=
literal|"CamelXmlEncryptionKeyStoreUrl"
decl_stmt|;
comment|/**      * @deprecated  Use {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, KeyStoreParameters)} instead.      */
annotation|@
name|Deprecated
DECL|field|XML_ENC_KEY_STORE_PASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|XML_ENC_KEY_STORE_PASSWORD
init|=
literal|"CamelXmlEncryptionKeyStorePassword"
decl_stmt|;
comment|/**      * @deprecated  Use {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, KeyStoreParameters)} instead.      */
annotation|@
name|Deprecated
DECL|field|XML_ENC_KEY_STORE_ALIAS
specifier|public
specifier|static
specifier|final
name|String
name|XML_ENC_KEY_STORE_ALIAS
init|=
literal|"CamelXmlEncryptionKeyAlias"
decl_stmt|;
DECL|field|xmlCipherAlgorithm
specifier|private
name|String
name|xmlCipherAlgorithm
decl_stmt|;
DECL|field|keyCipherAlgorithm
specifier|private
name|String
name|keyCipherAlgorithm
decl_stmt|;
DECL|field|passPhrase
specifier|private
name|byte
index|[]
name|passPhrase
decl_stmt|;
DECL|field|secureTag
specifier|private
name|String
name|secureTag
decl_stmt|;
DECL|field|secureTagContents
specifier|private
name|boolean
name|secureTagContents
decl_stmt|;
DECL|field|keyStore
specifier|private
name|KeyStore
name|keyStore
decl_stmt|;
DECL|field|trustStore
specifier|private
name|KeyStore
name|trustStore
decl_stmt|;
DECL|field|keyStorePassword
specifier|private
name|String
name|keyStorePassword
decl_stmt|;
DECL|field|trustStorePassword
specifier|private
name|String
name|trustStorePassword
decl_stmt|;
DECL|field|recipientKeyAlias
specifier|private
name|String
name|recipientKeyAlias
decl_stmt|;
DECL|field|keyOrTrustStoreParameters
specifier|private
name|KeyStoreParameters
name|keyOrTrustStoreParameters
decl_stmt|;
DECL|field|keyOrTrustStoreParametersId
specifier|private
name|String
name|keyOrTrustStoreParametersId
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|nsContext
specifier|private
name|DefaultNamespaceContext
name|nsContext
init|=
operator|new
name|DefaultNamespaceContext
argument_list|()
decl_stmt|;
DECL|method|XMLSecurityDataFormat ()
specifier|public
name|XMLSecurityDataFormat
parameter_list|()
block|{
name|this
operator|.
name|xmlCipherAlgorithm
operator|=
name|XMLCipher
operator|.
name|TRIPLEDES
expr_stmt|;
comment|// set a default pass phrase as its required
name|this
operator|.
name|passPhrase
operator|=
literal|"Just another 24 Byte key"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|this
operator|.
name|secureTag
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|secureTagContents
operator|=
literal|true
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|Init
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|XMLSecurityDataFormat (String secureTag, boolean secureTagContents)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
block|}
DECL|method|XMLSecurityDataFormat (String secureTag, Map<String, String> namespaces, boolean secureTagContents)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
block|}
DECL|method|XMLSecurityDataFormat (String secureTag, boolean secureTagContents, byte[] passPhrase)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|byte
index|[]
name|passPhrase
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setPassPhrase
argument_list|(
name|passPhrase
argument_list|)
expr_stmt|;
block|}
DECL|method|XMLSecurityDataFormat (String secureTag, Map<String, String> namespaces, boolean secureTagContents, byte[] passPhrase)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|byte
index|[]
name|passPhrase
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setPassPhrase
argument_list|(
name|passPhrase
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
block|}
DECL|method|XMLSecurityDataFormat (String secureTag, boolean secureTagContents, byte[] passPhrase, String xmlCipherAlgorithm)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|byte
index|[]
name|passPhrase
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setPassPhrase
argument_list|(
name|passPhrase
argument_list|)
expr_stmt|;
name|this
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|xmlCipherAlgorithm
argument_list|)
expr_stmt|;
block|}
comment|/**      * @deprecated  use {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, String)} or      *                  {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, KeyStoreParameters)} instead.       */
annotation|@
name|Deprecated
DECL|method|XMLSecurityDataFormat (String secureTag, boolean secureTagContents, String xmlCipherAlgorithm, String keyCipherAlgorithm)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|xmlCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|keyCipherAlgorithm
argument_list|)
expr_stmt|;
block|}
comment|/**      * @deprecated  use {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, String)} or      *                  {@link #XMLSecurityDataFormat(String, Map, boolean, String, String, String, KeyStoreParameters)} instead.        */
annotation|@
name|Deprecated
DECL|method|XMLSecurityDataFormat (String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|xmlCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setRecipientKeyAlias
argument_list|(
name|recipientKeyAlias
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|keyCipherAlgorithm
argument_list|)
expr_stmt|;
block|}
DECL|method|XMLSecurityDataFormat (String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|String
name|keyOrTrustStoreParametersId
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|xmlCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setRecipientKeyAlias
argument_list|(
name|recipientKeyAlias
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|keyCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKeyOrTrustStoreParametersId
argument_list|(
name|keyOrTrustStoreParametersId
argument_list|)
expr_stmt|;
block|}
DECL|method|XMLSecurityDataFormat (String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|String
name|keyOrTrustStoreParametersId
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|xmlCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setRecipientKeyAlias
argument_list|(
name|recipientKeyAlias
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|keyCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|keyOrTrustStoreParametersId
operator|&&
operator|!
name|keyOrTrustStoreParametersId
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|this
operator|.
name|keyOrTrustStoreParametersId
operator|=
name|keyOrTrustStoreParametersId
expr_stmt|;
block|}
block|}
DECL|method|XMLSecurityDataFormat (String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|KeyStoreParameters
name|keyOrTrustStoreParameters
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|xmlCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setRecipientKeyAlias
argument_list|(
name|recipientKeyAlias
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|keyCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKeyOrTrustStoreParameters
argument_list|(
name|keyOrTrustStoreParameters
argument_list|)
expr_stmt|;
block|}
DECL|method|XMLSecurityDataFormat (String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters)
specifier|public
name|XMLSecurityDataFormat
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|KeyStoreParameters
name|keyOrTrustStoreParameters
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecureTag
argument_list|(
name|secureTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSecureTagContents
argument_list|(
name|secureTagContents
argument_list|)
expr_stmt|;
name|this
operator|.
name|setXmlCipherAlgorithm
argument_list|(
name|xmlCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setRecipientKeyAlias
argument_list|(
name|recipientKeyAlias
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKeyCipherAlgorithm
argument_list|(
name|keyCipherAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKeyOrTrustStoreParameters
argument_list|(
name|keyOrTrustStoreParameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
try|try
block|{
name|setDefaultsFromContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not initialize XMLSecurityDataFormat with camelContext. "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
comment|/**      * Sets missing properties that are defined in the Camel context.      * @deprecated  this operation populates the data format using depreciated properties and will be      *              removed at the end of the deprecation period      */
annotation|@
name|Deprecated
DECL|method|setDefaultsFromContext (CamelContext context)
specifier|private
name|void
name|setDefaultsFromContext
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contextProps
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|recipientKeyAlias
operator|==
literal|null
condition|)
block|{
name|recipientKeyAlias
operator|=
name|contextProps
operator|.
name|get
argument_list|(
name|XML_ENC_RECIPIENT_ALIAS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|trustStore
operator|==
literal|null
operator|&&
name|contextProps
operator|.
name|containsKey
argument_list|(
name|XML_ENC_TRUST_STORE_URL
argument_list|)
condition|)
block|{
name|trustStore
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|trustStoreUrl
init|=
operator|new
name|URL
argument_list|(
name|contextProps
operator|.
name|get
argument_list|(
name|XML_ENC_TRUST_STORE_URL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|trustStorePassword
operator|==
literal|null
condition|)
block|{
name|trustStorePassword
operator|=
name|contextProps
operator|.
name|get
argument_list|(
name|XML_ENC_TRUST_STORE_PASSWORD
argument_list|)
expr_stmt|;
block|}
name|trustStore
operator|.
name|load
argument_list|(
name|trustStoreUrl
operator|.
name|openStream
argument_list|()
argument_list|,
name|trustStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|keyStore
operator|==
literal|null
operator|&&
name|contextProps
operator|.
name|containsKey
argument_list|(
name|XML_ENC_KEY_STORE_URL
argument_list|)
condition|)
block|{
name|keyStore
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|keyStoreUrl
init|=
operator|new
name|URL
argument_list|(
name|contextProps
operator|.
name|get
argument_list|(
name|XML_ENC_KEY_STORE_URL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStorePassword
operator|==
literal|null
condition|)
block|{
name|keyStorePassword
operator|=
name|contextProps
operator|.
name|get
argument_list|(
name|XML_ENC_KEY_STORE_PASSWORD
argument_list|)
expr_stmt|;
block|}
name|keyStore
operator|.
name|load
argument_list|(
name|keyStoreUrl
operator|.
name|openStream
argument_list|()
argument_list|,
name|keyStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|XML_ENC_KEY_STORE_ALIAS
argument_list|)
operator|&&
name|this
operator|.
name|recipientKeyAlias
operator|==
literal|null
condition|)
block|{
name|recipientKeyAlias
operator|=
name|contextProps
operator|.
name|get
argument_list|(
name|XML_ENC_KEY_STORE_ALIAS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|marshal (Exchange exchange, Object graph, OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|graph
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Retrieve the message body as input stream
name|InputStream
name|is
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|graph
argument_list|)
decl_stmt|;
comment|// and covert that to XML
name|Document
name|document
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|keyCipherAlgorithm
operator|&&
operator|(
name|keyCipherAlgorithm
operator|.
name|equals
argument_list|(
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
operator|||
name|keyCipherAlgorithm
operator|.
name|equals
argument_list|(
name|XMLCipher
operator|.
name|RSA_OAEP
argument_list|)
operator|)
condition|)
block|{
name|encryptAsymmetric
argument_list|(
name|exchange
argument_list|,
name|document
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|recipientKeyAlias
condition|)
block|{
name|encryptAsymmetric
argument_list|(
name|exchange
argument_list|,
name|document
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encryptSymmetric
argument_list|(
name|exchange
argument_list|,
name|document
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Configure the public key for the asymmetric key wrap algorithm, create the key cipher, and delegate      * to common encryption method.      *       * The method first checks the exchange for a declared key alias, and will fall back to the      * statically-defined instance variable if no value is found in the exchange. This allows different      * aliases / keys to be used for multiple-recipient messaging integration patterns such as CBR      * or recipient list.      */
DECL|method|encryptAsymmetric (Exchange exchange, Document document, OutputStream stream)
specifier|private
name|void
name|encryptAsymmetric
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Document
name|document
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|exchangeRecipientAlias
init|=
name|getRecipientKeyAlias
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|exchangeRecipientAlias
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The  recipient's key alias must be defined for asymmetric key encryption."
argument_list|)
throw|;
block|}
if|if
condition|(
name|trustStore
operator|==
literal|null
operator|&&
literal|null
operator|!=
name|this
operator|.
name|keyOrTrustStoreParameters
condition|)
block|{
name|trustStore
operator|=
name|keyOrTrustStoreParameters
operator|.
name|createKeyStore
argument_list|()
expr_stmt|;
name|trustStorePassword
operator|=
name|keyOrTrustStoreParameters
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|trustStore
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"A trust store must be defined for asymmetric key encryption."
argument_list|)
throw|;
block|}
name|Key
name|keyEncryptionKey
init|=
name|getPublicKey
argument_list|(
name|this
operator|.
name|trustStore
argument_list|,
name|exchangeRecipientAlias
argument_list|,
name|this
operator|.
name|trustStorePassword
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|keyEncryptionKey
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No key for the alias [ "
operator|+
name|exchangeRecipientAlias
operator|+
literal|" ] exists in "
operator|+
literal|"the configured trust store."
argument_list|)
throw|;
block|}
name|Key
name|dataEncryptionKey
init|=
name|generateDataEncryptionKey
argument_list|()
decl_stmt|;
name|XMLCipher
name|keyCipher
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|getKeyCyperAlgorithm
argument_list|()
condition|)
block|{
name|keyCipher
operator|=
name|XMLCipher
operator|.
name|getInstance
argument_list|(
name|this
operator|.
name|getKeyCyperAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyCipher
operator|=
name|XMLCipher
operator|.
name|getInstance
argument_list|(
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
expr_stmt|;
block|}
name|keyCipher
operator|.
name|init
argument_list|(
name|XMLCipher
operator|.
name|WRAP_MODE
argument_list|,
name|keyEncryptionKey
argument_list|)
expr_stmt|;
name|encrypt
argument_list|(
name|exchange
argument_list|,
name|document
argument_list|,
name|stream
argument_list|,
name|dataEncryptionKey
argument_list|,
name|keyCipher
argument_list|)
expr_stmt|;
block|}
DECL|method|encryptSymmetric (Exchange exchange, Document document, OutputStream stream)
specifier|private
name|void
name|encryptSymmetric
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Document
name|document
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|Key
name|keyEncryptionKey
decl_stmt|;
name|Key
name|dataEncryptionKey
decl_stmt|;
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equals
argument_list|(
name|XMLCipher
operator|.
name|TRIPLEDES
argument_list|)
condition|)
block|{
name|keyEncryptionKey
operator|=
name|generateKeyEncryptionKey
argument_list|(
literal|"DESede"
argument_list|)
expr_stmt|;
name|dataEncryptionKey
operator|=
name|generateDataEncryptionKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|keyEncryptionKey
operator|=
name|generateKeyEncryptionKey
argument_list|(
literal|"AES"
argument_list|)
expr_stmt|;
name|dataEncryptionKey
operator|=
name|generateDataEncryptionKey
argument_list|()
expr_stmt|;
block|}
name|XMLCipher
name|keyCipher
init|=
name|XMLCipher
operator|.
name|getInstance
argument_list|(
name|generateXmlCipherAlgorithmKeyWrap
argument_list|()
argument_list|)
decl_stmt|;
name|keyCipher
operator|.
name|init
argument_list|(
name|XMLCipher
operator|.
name|WRAP_MODE
argument_list|,
name|keyEncryptionKey
argument_list|)
expr_stmt|;
name|encrypt
argument_list|(
name|exchange
argument_list|,
name|document
argument_list|,
name|stream
argument_list|,
name|dataEncryptionKey
argument_list|,
name|keyCipher
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the private key for the specified alias, or null if the alias or private key is not found.      */
comment|// TODO Move this to a crypto utility class
DECL|method|getPrivateKey (KeyStore keystore, String alias, String password)
specifier|private
name|Key
name|getPrivateKey
parameter_list|(
name|KeyStore
name|keystore
parameter_list|,
name|String
name|alias
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|Key
name|key
init|=
name|keystore
operator|.
name|getKey
argument_list|(
name|alias
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|PrivateKey
condition|)
block|{
return|return
name|key
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Returns the public key for the specified alias, or null if the alias or private key is not found.      */
comment|// TODO Move this to a crypto utility class
DECL|method|getPublicKey (KeyStore keystore, String alias, String password)
specifier|private
name|Key
name|getPublicKey
parameter_list|(
name|KeyStore
name|keystore
parameter_list|,
name|String
name|alias
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|Key
name|key
init|=
name|keystore
operator|.
name|getKey
argument_list|(
name|alias
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|PublicKey
condition|)
block|{
return|return
name|key
return|;
block|}
else|else
block|{
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
name|cert
init|=
name|keystore
operator|.
name|getCertificate
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|// Get public key
name|PublicKey
name|publicKey
init|=
name|cert
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
return|return
name|publicKey
return|;
block|}
block|}
DECL|method|encrypt (Exchange exchange, Document document, OutputStream stream, Key dataEncryptionKey, XMLCipher keyCipher)
specifier|private
name|void
name|encrypt
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Document
name|document
parameter_list|,
name|OutputStream
name|stream
parameter_list|,
name|Key
name|dataEncryptionKey
parameter_list|,
name|XMLCipher
name|keyCipher
parameter_list|)
throws|throws
name|Exception
block|{
name|XMLCipher
name|xmlCipher
init|=
name|XMLCipher
operator|.
name|getInstance
argument_list|(
name|xmlCipherAlgorithm
argument_list|)
decl_stmt|;
name|xmlCipher
operator|.
name|init
argument_list|(
name|XMLCipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|dataEncryptionKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|secureTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|embedKeyInfoInEncryptedData
argument_list|(
name|document
argument_list|,
name|keyCipher
argument_list|,
name|xmlCipher
argument_list|,
name|dataEncryptionKey
argument_list|)
expr_stmt|;
name|document
operator|=
name|xmlCipher
operator|.
name|doFinal
argument_list|(
name|document
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XPathBuilder
name|xpathBuilder
init|=
operator|new
name|XPathBuilder
argument_list|(
name|secureTag
argument_list|)
decl_stmt|;
name|xpathBuilder
operator|.
name|setNamespaceContext
argument_list|(
name|getNamespaceContext
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|nodeList
init|=
name|xpathBuilder
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|NodeList
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|document
operator|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
expr_stmt|;
name|embedKeyInfoInEncryptedData
argument_list|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|keyCipher
argument_list|,
name|xmlCipher
argument_list|,
name|dataEncryptionKey
argument_list|)
expr_stmt|;
name|Document
name|temp
init|=
name|xmlCipher
operator|.
name|doFinal
argument_list|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
operator|(
name|Element
operator|)
name|node
argument_list|,
name|getSecureTagContents
argument_list|()
argument_list|)
decl_stmt|;
name|document
operator|.
name|importNode
argument_list|(
name|temp
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|cloneNode
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|InputStream
name|sis
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|copy
argument_list|(
name|sis
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|unmarshal (Exchange exchange, Document document)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Document
name|document
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|ExchangeHelper
operator|.
name|getMandatoryInBody
argument_list|(
name|exchange
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|unmarshal
argument_list|(
name|exchange
argument_list|,
name|is
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|unmarshal (Exchange exchange, InputStream stream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|encodedDocument
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|keyCipherAlgorithm
operator|&&
operator|(
name|keyCipherAlgorithm
operator|.
name|equals
argument_list|(
name|XMLCipher
operator|.
name|RSA_v1dot5
argument_list|)
operator|||
name|keyCipherAlgorithm
operator|.
name|equals
argument_list|(
name|XMLCipher
operator|.
name|RSA_OAEP
argument_list|)
operator|)
condition|)
block|{
return|return
name|decodeWithAsymmetricKey
argument_list|(
name|exchange
argument_list|,
name|encodedDocument
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|decodeWithSymmetricKey
argument_list|(
name|exchange
argument_list|,
name|encodedDocument
argument_list|)
return|;
block|}
block|}
DECL|method|decodeWithSymmetricKey (Exchange exchange, Document encodedDocument)
specifier|private
name|Object
name|decodeWithSymmetricKey
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Document
name|encodedDocument
parameter_list|)
throws|throws
name|Exception
block|{
name|Key
name|keyEncryptionKey
decl_stmt|;
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equals
argument_list|(
name|XMLCipher
operator|.
name|TRIPLEDES
argument_list|)
condition|)
block|{
name|keyEncryptionKey
operator|=
name|generateKeyEncryptionKey
argument_list|(
literal|"DESede"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyEncryptionKey
operator|=
name|generateKeyEncryptionKey
argument_list|(
literal|"AES"
argument_list|)
expr_stmt|;
block|}
return|return
name|decode
argument_list|(
name|exchange
argument_list|,
name|encodedDocument
argument_list|,
name|keyEncryptionKey
argument_list|)
return|;
block|}
DECL|method|decodeWithAsymmetricKey (Exchange exchange, Document encodedDocument)
specifier|private
name|Object
name|decodeWithAsymmetricKey
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Document
name|encodedDocument
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|keyStore
operator|==
literal|null
operator|&&
literal|null
operator|!=
name|keyOrTrustStoreParameters
condition|)
block|{
name|keyStore
operator|=
name|keyOrTrustStoreParameters
operator|.
name|createKeyStore
argument_list|()
expr_stmt|;
name|keyStorePassword
operator|=
name|keyOrTrustStoreParameters
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|keyStore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"A key store must be defined for asymmetric key decryption."
argument_list|)
throw|;
block|}
name|Key
name|keyEncryptionKey
init|=
name|getPrivateKey
argument_list|(
name|this
operator|.
name|keyStore
argument_list|,
name|this
operator|.
name|recipientKeyAlias
argument_list|,
name|this
operator|.
name|keyStorePassword
argument_list|)
decl_stmt|;
return|return
name|decode
argument_list|(
name|exchange
argument_list|,
name|encodedDocument
argument_list|,
name|keyEncryptionKey
argument_list|)
return|;
block|}
DECL|method|decode (Exchange exchange, Document encodedDocument, Key keyEncryptionKey)
specifier|private
name|Object
name|decode
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Document
name|encodedDocument
parameter_list|,
name|Key
name|keyEncryptionKey
parameter_list|)
throws|throws
name|Exception
block|{
name|XMLCipher
name|xmlCipher
init|=
name|XMLCipher
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|xmlCipher
operator|.
name|init
argument_list|(
name|XMLCipher
operator|.
name|DECRYPT_MODE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|xmlCipher
operator|.
name|setKEK
argument_list|(
name|keyEncryptionKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|secureTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|encodedDocument
operator|=
name|xmlCipher
operator|.
name|doFinal
argument_list|(
name|encodedDocument
argument_list|,
name|encodedDocument
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XPathBuilder
name|xpathBuilder
init|=
operator|new
name|XPathBuilder
argument_list|(
name|secureTag
argument_list|)
decl_stmt|;
name|xpathBuilder
operator|.
name|setNamespaceContext
argument_list|(
name|getNamespaceContext
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|nodeList
init|=
name|xpathBuilder
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|NodeList
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|encodedDocument
operator|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
expr_stmt|;
if|if
condition|(
name|getSecureTagContents
argument_list|()
condition|)
block|{
name|Document
name|temp
init|=
name|xmlCipher
operator|.
name|doFinal
argument_list|(
name|encodedDocument
argument_list|,
operator|(
name|Element
operator|)
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|encodedDocument
operator|.
name|importNode
argument_list|(
name|temp
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|cloneNode
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeList
name|childNodes
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|childNode
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNode
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"EncryptedData"
argument_list|)
condition|)
block|{
name|Document
name|temp
init|=
name|xmlCipher
operator|.
name|doFinal
argument_list|(
name|encodedDocument
argument_list|,
operator|(
name|Element
operator|)
name|childNode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|encodedDocument
operator|.
name|importNode
argument_list|(
name|temp
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|cloneNode
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|encodedDocument
argument_list|)
decl_stmt|;
name|InputStream
name|sis
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|copy
argument_list|(
name|sis
argument_list|,
name|bos
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Return the decrypted data
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|generateKeyEncryptionKey (String algorithm)
specifier|private
name|Key
name|generateKeyEncryptionKey
parameter_list|(
name|String
name|algorithm
parameter_list|)
throws|throws
name|InvalidKeyException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
name|DESedeKeySpec
name|keySpec
decl_stmt|;
name|Key
name|secretKey
decl_stmt|;
try|try
block|{
if|if
condition|(
name|algorithm
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DESede"
argument_list|)
condition|)
block|{
name|keySpec
operator|=
operator|new
name|DESedeKeySpec
argument_list|(
name|passPhrase
argument_list|)
expr_stmt|;
name|SecretKeyFactory
name|keyFactory
init|=
name|SecretKeyFactory
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
name|secretKey
operator|=
name|keyFactory
operator|.
name|generateSecret
argument_list|(
name|keySpec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secretKey
operator|=
operator|new
name|SecretKeySpec
argument_list|(
name|passPhrase
argument_list|,
literal|"AES"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidKeyException
argument_list|(
literal|"InvalidKeyException due to invalid passPhrase: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|passPhrase
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchAlgorithmException
argument_list|(
literal|"NoSuchAlgorithmException while using XMLCipher.TRIPLEDES algorithm: DESede"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidKeySpecException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidKeySpecException
argument_list|(
literal|"Invalid Key generated while using passPhrase: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|passPhrase
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|secretKey
return|;
block|}
DECL|method|generateDataEncryptionKey ()
specifier|private
name|Key
name|generateDataEncryptionKey
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyGenerator
name|keyGenerator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equalsIgnoreCase
argument_list|(
name|XMLCipher
operator|.
name|TRIPLEDES
argument_list|)
condition|)
block|{
name|keyGenerator
operator|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
literal|"DESede"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyGenerator
operator|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
literal|"AES"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equalsIgnoreCase
argument_list|(
name|XMLCipher
operator|.
name|AES_128
argument_list|)
condition|)
block|{
name|keyGenerator
operator|.
name|init
argument_list|(
literal|128
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equalsIgnoreCase
argument_list|(
name|XMLCipher
operator|.
name|AES_192
argument_list|)
condition|)
block|{
name|keyGenerator
operator|.
name|init
argument_list|(
literal|192
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equalsIgnoreCase
argument_list|(
name|XMLCipher
operator|.
name|AES_256
argument_list|)
condition|)
block|{
name|keyGenerator
operator|.
name|init
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
return|return
name|keyGenerator
operator|.
name|generateKey
argument_list|()
return|;
block|}
DECL|method|embedKeyInfoInEncryptedData (Document document, XMLCipher keyCipher, XMLCipher xmlCipher, Key dataEncryptionkey)
specifier|private
name|void
name|embedKeyInfoInEncryptedData
parameter_list|(
name|Document
name|document
parameter_list|,
name|XMLCipher
name|keyCipher
parameter_list|,
name|XMLCipher
name|xmlCipher
parameter_list|,
name|Key
name|dataEncryptionkey
parameter_list|)
throws|throws
name|XMLEncryptionException
block|{
name|EncryptedKey
name|encryptedKey
init|=
name|keyCipher
operator|.
name|encryptKey
argument_list|(
name|document
argument_list|,
name|dataEncryptionkey
argument_list|)
decl_stmt|;
name|KeyInfo
name|keyInfo
init|=
operator|new
name|KeyInfo
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|keyInfo
operator|.
name|add
argument_list|(
name|encryptedKey
argument_list|)
expr_stmt|;
name|EncryptedData
name|encryptedDataElement
init|=
name|xmlCipher
operator|.
name|getEncryptedData
argument_list|()
decl_stmt|;
name|encryptedDataElement
operator|.
name|setKeyInfo
argument_list|(
name|keyInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|generateXmlCipherAlgorithmKeyWrap ()
specifier|private
name|String
name|generateXmlCipherAlgorithmKeyWrap
parameter_list|()
block|{
name|String
name|algorithmKeyWrap
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equalsIgnoreCase
argument_list|(
name|XMLCipher
operator|.
name|TRIPLEDES
argument_list|)
condition|)
block|{
name|algorithmKeyWrap
operator|=
name|XMLCipher
operator|.
name|TRIPLEDES_KeyWrap
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equalsIgnoreCase
argument_list|(
name|XMLCipher
operator|.
name|AES_128
argument_list|)
condition|)
block|{
name|algorithmKeyWrap
operator|=
name|XMLCipher
operator|.
name|AES_128_KeyWrap
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equalsIgnoreCase
argument_list|(
name|XMLCipher
operator|.
name|AES_192
argument_list|)
condition|)
block|{
name|algorithmKeyWrap
operator|=
name|XMLCipher
operator|.
name|AES_192_KeyWrap
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xmlCipherAlgorithm
operator|.
name|equalsIgnoreCase
argument_list|(
name|XMLCipher
operator|.
name|AES_256
argument_list|)
condition|)
block|{
name|algorithmKeyWrap
operator|=
name|XMLCipher
operator|.
name|AES_256_KeyWrap
expr_stmt|;
block|}
return|return
name|algorithmKeyWrap
return|;
block|}
DECL|method|getRecipientKeyAlias (Exchange exchange)
specifier|private
name|String
name|getRecipientKeyAlias
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|alias
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|XML_ENC_RECIPIENT_ALIAS
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|XML_ENC_RECIPIENT_ALIAS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|alias
operator|=
name|recipientKeyAlias
expr_stmt|;
block|}
return|return
name|alias
return|;
block|}
DECL|method|getNamespaceContext ()
specifier|private
name|DefaultNamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|nsContext
return|;
block|}
empty_stmt|;
DECL|method|getXmlCipherAlgorithm ()
specifier|public
name|String
name|getXmlCipherAlgorithm
parameter_list|()
block|{
return|return
name|xmlCipherAlgorithm
return|;
block|}
DECL|method|setXmlCipherAlgorithm (String xmlCipherAlgorithm)
specifier|public
name|void
name|setXmlCipherAlgorithm
parameter_list|(
name|String
name|xmlCipherAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|xmlCipherAlgorithm
operator|=
name|xmlCipherAlgorithm
expr_stmt|;
block|}
DECL|method|getKeyCyperAlgorithm ()
specifier|public
name|String
name|getKeyCyperAlgorithm
parameter_list|()
block|{
return|return
name|keyCipherAlgorithm
return|;
block|}
DECL|method|setKeyCipherAlgorithm (String keyCipherAlgorithm)
specifier|public
name|void
name|setKeyCipherAlgorithm
parameter_list|(
name|String
name|keyCipherAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|keyCipherAlgorithm
operator|=
name|keyCipherAlgorithm
expr_stmt|;
block|}
DECL|method|getRecipientKeyAlias ()
specifier|public
name|String
name|getRecipientKeyAlias
parameter_list|()
block|{
return|return
name|this
operator|.
name|recipientKeyAlias
return|;
block|}
DECL|method|setRecipientKeyAlias (String recipientKeyAlias)
specifier|public
name|void
name|setRecipientKeyAlias
parameter_list|(
name|String
name|recipientKeyAlias
parameter_list|)
block|{
name|this
operator|.
name|recipientKeyAlias
operator|=
name|recipientKeyAlias
expr_stmt|;
block|}
DECL|method|getPassPhrase ()
specifier|public
name|byte
index|[]
name|getPassPhrase
parameter_list|()
block|{
return|return
name|passPhrase
return|;
block|}
DECL|method|setPassPhrase (byte[] passPhrase)
specifier|public
name|void
name|setPassPhrase
parameter_list|(
name|byte
index|[]
name|passPhrase
parameter_list|)
block|{
name|this
operator|.
name|passPhrase
operator|=
name|passPhrase
expr_stmt|;
block|}
DECL|method|getSecureTag ()
specifier|public
name|String
name|getSecureTag
parameter_list|()
block|{
return|return
name|secureTag
return|;
block|}
DECL|method|setSecureTag (String secureTag)
specifier|public
name|void
name|setSecureTag
parameter_list|(
name|String
name|secureTag
parameter_list|)
block|{
name|this
operator|.
name|secureTag
operator|=
name|secureTag
expr_stmt|;
block|}
DECL|method|isSecureTagContents ()
specifier|public
name|boolean
name|isSecureTagContents
parameter_list|()
block|{
return|return
name|secureTagContents
return|;
block|}
DECL|method|getSecureTagContents ()
specifier|public
name|boolean
name|getSecureTagContents
parameter_list|()
block|{
return|return
name|secureTagContents
return|;
block|}
DECL|method|setSecureTagContents (boolean secureTagContents)
specifier|public
name|void
name|setSecureTagContents
parameter_list|(
name|boolean
name|secureTagContents
parameter_list|)
block|{
name|this
operator|.
name|secureTagContents
operator|=
name|secureTagContents
expr_stmt|;
block|}
comment|/**      * Gets the KeyStore configured for this data format.      * @deprecated  Will change to private access in the future.      */
annotation|@
name|Deprecated
DECL|method|getKeyStore ()
specifier|public
name|KeyStore
name|getKeyStore
parameter_list|()
block|{
if|if
condition|(
name|keyStore
operator|==
literal|null
operator|&&
name|this
operator|.
name|keyOrTrustStoreParameters
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|keyStore
operator|=
name|keyOrTrustStoreParameters
operator|.
name|createKeyStore
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create KeyStore with configured KeyStoreParameters. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|this
operator|.
name|keyStore
return|;
block|}
comment|/**      * @deprecated  Use {@link #getKeyOrTrustStoreParameters()} instead.      */
annotation|@
name|Deprecated
DECL|method|setKeyStore (KeyStore keyStore)
specifier|public
name|void
name|setKeyStore
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|)
block|{
name|this
operator|.
name|keyStore
operator|=
name|keyStore
expr_stmt|;
block|}
comment|/**      * @deprecated  Will change to private access in the future. Use {@link #getKeyOrTrustStoreParameters()} instead.      */
annotation|@
name|Deprecated
DECL|method|getTrustStore ()
specifier|public
name|KeyStore
name|getTrustStore
parameter_list|()
block|{
if|if
condition|(
name|trustStore
operator|==
literal|null
operator|&&
name|this
operator|.
name|keyOrTrustStoreParameters
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|trustStore
operator|=
name|keyOrTrustStoreParameters
operator|.
name|createKeyStore
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create KeyStore with configured KeyStoreParameters. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|this
operator|.
name|trustStore
return|;
block|}
comment|/**      * @deprecated  Use {@link #setKeyOrTrustStoreParameters()} instead.      */
annotation|@
name|Deprecated
DECL|method|setTrustStore (KeyStore trustStore)
specifier|public
name|void
name|setTrustStore
parameter_list|(
name|KeyStore
name|trustStore
parameter_list|)
block|{
name|this
operator|.
name|trustStore
operator|=
name|trustStore
expr_stmt|;
block|}
comment|/**      * @deprecated  Will change to private access in the future. Use {@link #getKeyOrTrustStoreParameters()} instead.      */
annotation|@
name|Deprecated
DECL|method|getKeyStorePassword ()
specifier|public
name|String
name|getKeyStorePassword
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|keyOrTrustStoreParameters
operator|!=
literal|null
condition|)
block|{
return|return
name|keyOrTrustStoreParameters
operator|.
name|getPassword
argument_list|()
return|;
block|}
return|return
name|this
operator|.
name|keyStorePassword
return|;
block|}
comment|/**      * @deprecated  Use {@link #setKeyOrTrustStoreParameters()} instead.      */
annotation|@
name|Deprecated
DECL|method|setKeyStorePassword (String keyStorePassword)
specifier|public
name|void
name|setKeyStorePassword
parameter_list|(
name|String
name|keyStorePassword
parameter_list|)
block|{
name|this
operator|.
name|keyStorePassword
operator|=
name|keyStorePassword
expr_stmt|;
block|}
comment|/**      * @deprecated  Will change to private access in the future.  Use {@link #setKeyOrTrustStoreParameters()} instead.      */
annotation|@
name|Deprecated
DECL|method|getTrustStorePassword ()
specifier|public
name|String
name|getTrustStorePassword
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|keyOrTrustStoreParameters
operator|!=
literal|null
condition|)
block|{
return|return
name|keyOrTrustStoreParameters
operator|.
name|getPassword
argument_list|()
return|;
block|}
return|return
name|this
operator|.
name|trustStorePassword
return|;
block|}
comment|/**      * @deprecated  Use {@link #setKeyOrTrustStoreParameters()} instead.      */
annotation|@
name|Deprecated
DECL|method|setTrustStorePassword (String trustStorePassword)
specifier|public
name|void
name|setTrustStorePassword
parameter_list|(
name|String
name|trustStorePassword
parameter_list|)
block|{
name|this
operator|.
name|trustStorePassword
operator|=
name|trustStorePassword
expr_stmt|;
block|}
DECL|method|setKeyOrTrustStoreParameters (KeyStoreParameters parameters)
specifier|public
name|void
name|setKeyOrTrustStoreParameters
parameter_list|(
name|KeyStoreParameters
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|keyOrTrustStoreParameters
operator|=
name|parameters
expr_stmt|;
block|}
DECL|method|getKeyOrTrustStoreParameters ()
specifier|public
name|KeyStoreParameters
name|getKeyOrTrustStoreParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyOrTrustStoreParameters
return|;
block|}
DECL|method|setKeyOrTrustStoreParametersId (String registryId)
specifier|public
name|void
name|setKeyOrTrustStoreParametersId
parameter_list|(
name|String
name|registryId
parameter_list|)
block|{
name|this
operator|.
name|keyOrTrustStoreParametersId
operator|=
name|registryId
expr_stmt|;
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|Object
name|parametersObj
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|this
operator|.
name|keyOrTrustStoreParametersId
argument_list|)
decl_stmt|;
if|if
condition|(
name|parametersObj
operator|instanceof
name|KeyStoreParameters
condition|)
block|{
name|this
operator|.
name|keyOrTrustStoreParameters
operator|=
operator|(
name|KeyStoreParameters
operator|)
name|parametersObj
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not initialize XMLSecurityDataFormat with camelContext."
operator|+
literal|"The id for the keyOrTrustStoreParameters specified [ "
operator|+
name|keyOrTrustStoreParametersId
operator|+
literal|" ] does not identify a KeyStoreParameters bean."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getKeyOrTrustStoreParametersId ()
specifier|public
name|String
name|getKeyOrTrustStoreParametersId
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyOrTrustStoreParametersId
return|;
block|}
DECL|method|setNamespaces (Map<String, String> namespaces)
specifier|public
name|void
name|setNamespaces
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
block|{
name|getNamespaceContext
argument_list|()
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

