begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignature
operator|.
name|SignatureValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignatureException
import|;
end_import

begin_comment
comment|/**  * Interrupts the validation by throwing an exception as soon as a validation  * failure occurs and gives specific error messages.  */
end_comment

begin_class
DECL|class|DefaultValidationFailedHandler
specifier|public
class|class
name|DefaultValidationFailedHandler
implements|implements
name|ValidationFailedHandler
block|{
DECL|field|error
specifier|private
name|StringBuilder
name|error
decl_stmt|;
annotation|@
name|Override
DECL|method|onXMLSignatureException (XMLSignatureException se)
specifier|public
name|Exception
name|onXMLSignatureException
parameter_list|(
name|XMLSignatureException
name|se
parameter_list|)
block|{
if|if
condition|(
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InvalidKeyException
condition|)
block|{
return|return
operator|new
name|XmlSignatureInvalidKeyException
argument_list|(
name|se
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|XmlSignatureException
argument_list|(
name|se
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|error
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
literal|"Signature validation failed. "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|signatureValueValidationFailed (SignatureValue value)
specifier|public
name|void
name|signatureValueValidationFailed
parameter_list|(
name|SignatureValue
name|value
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
name|error
operator|.
name|append
argument_list|(
literal|"The signature value could not be validated by the public key. Either the message has been tampered with or the public key is not correct."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XmlSignatureInvalidValueException
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|referenceValidationFailed (Reference ref)
specifier|public
name|void
name|referenceValidationFailed
parameter_list|(
name|Reference
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
name|error
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The calculated digest value of the document  %s is not equal to the value specified in the XML signature. The document may have been tampered with."
argument_list|,
name|getReferenceUriOrId
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XmlSignatureInvalidContentHashException
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|manifestReferenceValidationFailed (Reference ref)
specifier|public
name|void
name|manifestReferenceValidationFailed
parameter_list|(
name|Reference
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NOPMD
name|error
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The calculated digest value of the manifest  %s is not equal to the value specified in the XML signature. The document may have been tampered with."
argument_list|,
name|getReferenceUriOrId
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XmlSignatureInvalidContentHashException
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|end ()
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOPMD
name|error
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getReferenceUriOrId (Reference ref)
specifier|private
name|String
name|getReferenceUriOrId
parameter_list|(
name|Reference
name|ref
parameter_list|)
block|{
name|String
name|docId
init|=
name|ref
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|docId
operator|==
literal|null
condition|)
block|{
name|docId
operator|=
name|ref
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
return|return
name|docId
return|;
block|}
annotation|@
name|Override
DECL|method|ignoreCoreValidationFailure ()
specifier|public
name|boolean
name|ignoreCoreValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOPMD
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

