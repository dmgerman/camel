begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|ConnectionConfigFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|FtpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|FtpServerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|filesystem
operator|.
name|nativefs
operator|.
name|NativeFileSystemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|ftplet
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|listener
operator|.
name|ListenerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|usermanager
operator|.
name|ClearTextPasswordEncryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|usermanager
operator|.
name|PropertiesUserManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|SimpleLanguage
operator|.
name|simple
import|;
end_import

begin_comment
comment|/**  * Base class for unit testing using a FTPServer  */
end_comment

begin_class
DECL|class|FtpServerTestSupport
specifier|public
specifier|abstract
class|class
name|FtpServerTestSupport
extends|extends
name|BaseServerTestSupport
block|{
DECL|field|FTP_ROOT_DIR
specifier|protected
specifier|static
specifier|final
name|String
name|FTP_ROOT_DIR
init|=
literal|"./target/res/home"
decl_stmt|;
DECL|field|USERS_FILE
specifier|protected
specifier|static
specifier|final
name|File
name|USERS_FILE
init|=
operator|new
name|File
argument_list|(
literal|"./src/test/resources/users.properties"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_LISTENER
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_LISTENER
init|=
literal|"default"
decl_stmt|;
DECL|field|ftpServer
specifier|protected
name|FtpServer
name|ftpServer
decl_stmt|;
DECL|field|canTest
specifier|protected
name|boolean
name|canTest
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
name|FTP_ROOT_DIR
argument_list|)
expr_stmt|;
name|canTest
operator|=
literal|false
expr_stmt|;
name|FtpServerFactory
name|factory
init|=
name|createFtpServerFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|ftpServer
operator|=
name|factory
operator|.
name|createServer
argument_list|()
expr_stmt|;
if|if
condition|(
name|ftpServer
operator|!=
literal|null
condition|)
block|{
name|ftpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|canTest
operator|=
literal|true
expr_stmt|;
block|}
block|}
try|try
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore if algorithm is not on the OS
name|NoSuchAlgorithmException
name|nsae
init|=
name|ObjectHelper
operator|.
name|getException
argument_list|(
name|NoSuchAlgorithmException
operator|.
name|class
argument_list|,
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsae
operator|!=
literal|null
condition|)
block|{
name|canTest
operator|=
literal|false
expr_stmt|;
name|String
name|name
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|nsae
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"SunX509 is not avail on this platform [{}] Testing is skipped! Real cause: {}"
argument_list|,
name|name
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// some other error then throw it so the test can fail
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|ftpServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ftpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ftpServer
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore while shutting down as we could be polling during shutdown
comment|// and get errors when the ftp server is stopping. This is only an issue
comment|// since we host the ftp server embedded in the same jvm for unit testing
block|}
block|}
block|}
DECL|method|canTest ()
specifier|protected
name|boolean
name|canTest
parameter_list|()
block|{
return|return
name|canTest
return|;
block|}
DECL|method|createFtpServerFactory ()
specifier|protected
name|FtpServerFactory
name|createFtpServerFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|USERS_FILE
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Port number is not initialized in an expected range: "
operator|+
name|BaseServerTestSupport
operator|.
name|port
argument_list|,
name|BaseServerTestSupport
operator|.
name|port
operator|>=
literal|21000
argument_list|)
expr_stmt|;
name|NativeFileSystemFactory
name|fsf
init|=
operator|new
name|NativeFileSystemFactory
argument_list|()
decl_stmt|;
name|fsf
operator|.
name|setCreateHome
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PropertiesUserManagerFactory
name|pumf
init|=
operator|new
name|PropertiesUserManagerFactory
argument_list|()
decl_stmt|;
name|pumf
operator|.
name|setAdminName
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
name|pumf
operator|.
name|setPasswordEncryptor
argument_list|(
operator|new
name|ClearTextPasswordEncryptor
argument_list|()
argument_list|)
expr_stmt|;
name|pumf
operator|.
name|setFile
argument_list|(
name|USERS_FILE
argument_list|)
expr_stmt|;
name|UserManager
name|userMgr
init|=
name|pumf
operator|.
name|createUserManager
argument_list|()
decl_stmt|;
name|ListenerFactory
name|factory
init|=
operator|new
name|ListenerFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setPort
argument_list|(
name|BaseServerTestSupport
operator|.
name|port
argument_list|)
expr_stmt|;
name|FtpServerFactory
name|serverFactory
init|=
operator|new
name|FtpServerFactory
argument_list|()
decl_stmt|;
name|serverFactory
operator|.
name|setUserManager
argument_list|(
name|userMgr
argument_list|)
expr_stmt|;
name|serverFactory
operator|.
name|setFileSystem
argument_list|(
name|fsf
argument_list|)
expr_stmt|;
name|serverFactory
operator|.
name|setConnectionConfig
argument_list|(
operator|new
name|ConnectionConfigFactory
argument_list|()
operator|.
name|createConnectionConfig
argument_list|()
argument_list|)
expr_stmt|;
name|serverFactory
operator|.
name|addListener
argument_list|(
name|DEFAULT_LISTENER
argument_list|,
name|factory
operator|.
name|createListener
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|serverFactory
return|;
block|}
DECL|method|sendFile (String url, Object body, String fileName)
specifier|public
name|void
name|sendFile
parameter_list|(
name|String
name|url
parameter_list|,
name|Object
name|body
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|url
argument_list|,
name|body
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|simple
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

