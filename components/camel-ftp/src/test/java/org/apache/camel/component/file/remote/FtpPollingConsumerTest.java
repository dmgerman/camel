begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultUnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test that ftp consumer will exclude pre and postfixes  */
end_comment

begin_class
DECL|class|FtpPollingConsumerTest
specifier|public
class|class
name|FtpPollingConsumerTest
extends|extends
name|FtpServerTestSupport
block|{
DECL|method|getFtpUrl ()
specifier|private
name|String
name|getFtpUrl
parameter_list|()
block|{
return|return
literal|"ftp://admin@localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/polling?password=admin&move=done"
return|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
name|FTP_ROOT_DIR
operator|+
literal|"polling"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|prepareFtpServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPollingConsumer ()
specifier|public
name|void
name|testPollingConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
literal|"Message 1"
argument_list|,
literal|"Message 2"
argument_list|,
literal|"Message 3"
argument_list|,
literal|"Message 4"
argument_list|,
literal|"Message 5"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedFileExists
argument_list|(
name|FTP_ROOT_DIR
operator|+
literal|"polling/done/1.txt"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedFileExists
argument_list|(
name|FTP_ROOT_DIR
operator|+
literal|"polling/done/2.txt"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedFileExists
argument_list|(
name|FTP_ROOT_DIR
operator|+
literal|"polling/done/3.txt"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedFileExists
argument_list|(
name|FTP_ROOT_DIR
operator|+
literal|"polling/done/4.txt"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedFileExists
argument_list|(
name|FTP_ROOT_DIR
operator|+
literal|"polling/done/5.txt"
argument_list|)
expr_stmt|;
name|PollingConsumer
name|consumer
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|getFtpUrl
argument_list|()
argument_list|)
operator|.
name|createPollingConsumer
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|Exchange
name|exchange
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|String
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"mock:result"
argument_list|,
name|body
argument_list|)
expr_stmt|;
comment|// must done to move the files
if|if
condition|(
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|==
literal|null
condition|)
block|{
name|UnitOfWork
name|uow
init|=
operator|new
name|DefaultUnitOfWork
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setUnitOfWork
argument_list|(
name|uow
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|done
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|prepareFtpServer ()
specifier|private
name|void
name|prepareFtpServer
parameter_list|()
throws|throws
name|Exception
block|{
name|sendFile
argument_list|(
name|getFtpUrl
argument_list|()
argument_list|,
literal|"Message 1"
argument_list|,
literal|"1.txt"
argument_list|)
expr_stmt|;
name|sendFile
argument_list|(
name|getFtpUrl
argument_list|()
argument_list|,
literal|"Message 2"
argument_list|,
literal|"2.txt"
argument_list|)
expr_stmt|;
name|sendFile
argument_list|(
name|getFtpUrl
argument_list|()
argument_list|,
literal|"Message 3"
argument_list|,
literal|"3.txt"
argument_list|)
expr_stmt|;
name|sendFile
argument_list|(
name|getFtpUrl
argument_list|()
argument_list|,
literal|"Message 4"
argument_list|,
literal|"4.txt"
argument_list|)
expr_stmt|;
name|sendFile
argument_list|(
name|getFtpUrl
argument_list|()
argument_list|,
literal|"Message 5"
argument_list|,
literal|"5.txt"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

