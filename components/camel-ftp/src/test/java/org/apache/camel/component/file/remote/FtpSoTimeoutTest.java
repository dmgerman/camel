begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class used to demonstrate the problematic disconnect sequence of the {@link FtpOperations}.  *<p>  * Setting the logging level of {@code org.apache.camel.file.remote} to {@code TRACE} will provide useful information  *   * @author l.chiarello  *  */
end_comment

begin_class
DECL|class|FtpSoTimeoutTest
specifier|public
class|class
name|FtpSoTimeoutTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|serverSocket
specifier|private
name|ServerSocket
name|serverSocket
decl_stmt|;
comment|// --- Set up
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the created server socket makes it possible for the FTP client to establish the socket connection.
comment|// However, no message will ever be sent back, thus a read timeout should occur within FTPClient#__getReply()
name|serverSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|serverSocket
operator|!=
literal|null
condition|)
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getShutdownTimeout ()
specifier|protected
name|int
name|getShutdownTimeout
parameter_list|()
block|{
return|return
literal|5
return|;
comment|// speedup graceful shutdown
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:with"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ftp://localhost:"
operator|+
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"?ftpClient=#myftpclient&connectTimeout=300&soTimeout=300&reconnectDelay=100"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:without"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ftp://localhost:"
operator|+
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"?connectTimeout=300&soTimeout=300&reconnectDelay=100"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|BindToRegistry
argument_list|(
literal|"myftpclient"
argument_list|)
DECL|method|createFtpClient ()
specifier|public
name|FTPClient
name|createFtpClient
parameter_list|()
throws|throws
name|Exception
block|{
name|FTPClient
name|ftpClient
init|=
operator|new
name|FTPClient
argument_list|()
decl_stmt|;
name|ftpClient
operator|.
name|setDefaultTimeout
argument_list|(
literal|300
argument_list|)
expr_stmt|;
return|return
name|ftpClient
return|;
block|}
comment|// --- Tests
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|,
name|expected
operator|=
name|CamelExecutionException
operator|.
name|class
argument_list|)
DECL|method|testWithDefaultTimeout ()
specifier|public
name|void
name|testWithDefaultTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// send exchange to the route using the custom FTPClient (with a default timeout)
comment|// the soTimeout triggers in time and test is successful
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:with"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|,
name|expected
operator|=
name|CamelExecutionException
operator|.
name|class
argument_list|)
DECL|method|testWithoutDefaultTimeout ()
specifier|public
name|void
name|testWithoutDefaultTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// send exchange to the route using the default FTPClient (without a default timeout)
comment|// the soTimeout never triggers and test fails after its own timeout
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:without"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

