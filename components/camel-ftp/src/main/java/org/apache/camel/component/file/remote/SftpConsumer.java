begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|ChannelSftp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSchException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|SftpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|SftpConsumer
specifier|public
class|class
name|SftpConsumer
extends|extends
name|RemoteFileConsumer
argument_list|<
name|RemoteFileExchange
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SftpConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|SftpEndpoint
name|endpoint
decl_stmt|;
DECL|field|recursive
specifier|private
name|boolean
name|recursive
init|=
literal|true
decl_stmt|;
DECL|field|regexPattern
specifier|private
name|String
name|regexPattern
init|=
literal|""
decl_stmt|;
DECL|field|lastPollTime
specifier|private
name|long
name|lastPollTime
decl_stmt|;
DECL|field|channel
specifier|private
name|ChannelSftp
name|channel
decl_stmt|;
DECL|field|session
specifier|private
name|Session
name|session
decl_stmt|;
DECL|field|setNames
specifier|private
name|boolean
name|setNames
decl_stmt|;
DECL|field|exclusiveRead
specifier|private
name|boolean
name|exclusiveRead
init|=
literal|true
decl_stmt|;
DECL|method|SftpConsumer (SftpEndpoint endpoint, Processor processor, Session session)
specifier|public
name|SftpConsumer
parameter_list|(
name|SftpEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
DECL|method|SftpConsumer (SftpEndpoint endpoint, Processor processor, Session session, ScheduledExecutorService executor)
specifier|public
name|SftpConsumer
parameter_list|(
name|SftpEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Session
name|session
parameter_list|,
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
DECL|method|connectIfNecessary ()
specifier|protected
name|void
name|connectIfNecessary
parameter_list|()
throws|throws
name|JSchException
block|{
if|if
condition|(
name|channel
operator|==
literal|null
operator|||
operator|!
name|channel
operator|.
name|isConnected
argument_list|()
condition|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
operator|||
operator|!
name|session
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Session isn't connected, trying to recreate and connect."
argument_list|)
expr_stmt|;
name|session
operator|=
name|endpoint
operator|.
name|createSession
argument_list|()
expr_stmt|;
name|session
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Channel isn't connected, trying to recreate and connect."
argument_list|)
expr_stmt|;
name|channel
operator|=
name|endpoint
operator|.
name|createChannelSftp
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|channel
operator|.
name|connect
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected to "
operator|+
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|remoteServerInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|disconnect ()
specifier|protected
name|void
name|disconnect
parameter_list|()
throws|throws
name|JSchException
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Session is being explicitly disconnected"
argument_list|)
expr_stmt|;
name|session
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Channel is being explicitly disconnected"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|poll ()
specifier|protected
name|void
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Polling "
operator|+
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connectIfNecessary
argument_list|()
expr_stmt|;
comment|// If the attempt to connect isn't successful, then the thrown
comment|// exception will signify that we couldn't poll
try|try
block|{
specifier|final
name|String
name|fileName
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|pollDirectory
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|channel
operator|.
name|cd
argument_list|(
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ChannelSftp
operator|.
name|LsEntry
name|file
init|=
operator|(
name|ChannelSftp
operator|.
name|LsEntry
operator|)
name|channel
operator|.
name|ls
argument_list|(
name|fileName
operator|.
name|substring
argument_list|(
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|pollFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|lastPollTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSchException
name|e
parameter_list|)
block|{
comment|// If the connection has gone stale, then we must manually disconnect
comment|// the client before attempting to reconnect
name|LOG
operator|.
name|warn
argument_list|(
literal|"Disconnecting due to exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|disconnect
argument_list|()
expr_stmt|;
comment|// Rethrow to signify that we didn't poll
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// Still not sure if/when these come up and what we should do about them
comment|// client.disconnect();
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught SftpException:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Hoping an explicit disconnect/reconnect will solve the problem"
argument_list|)
expr_stmt|;
comment|// Rethrow to signify that we didn't poll
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|pollDirectory (String dir)
specifier|protected
name|void
name|pollDirectory
parameter_list|(
name|String
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|currentDir
init|=
name|channel
operator|.
name|pwd
argument_list|()
decl_stmt|;
name|channel
operator|.
name|cd
argument_list|(
name|dir
argument_list|)
expr_stmt|;
for|for
control|(
name|ChannelSftp
operator|.
name|LsEntry
name|sftpFile
range|:
operator|(
name|ChannelSftp
operator|.
name|LsEntry
index|[]
operator|)
name|channel
operator|.
name|ls
argument_list|(
literal|"."
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|ChannelSftp
operator|.
name|LsEntry
index|[]
block|{}
argument_list|)
control|)
block|{
if|if
condition|(
name|sftpFile
operator|.
name|getFilename
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// skip
block|}
elseif|else
if|if
condition|(
name|sftpFile
operator|.
name|getAttrs
argument_list|()
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
name|isRecursive
argument_list|()
condition|)
block|{
name|pollDirectory
argument_list|(
name|getFullFileName
argument_list|(
name|sftpFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|pollFile
argument_list|(
name|sftpFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|// change back to original current dir
name|channel
operator|.
name|cd
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
block|}
DECL|method|getFullFileName (ChannelSftp.LsEntry sftpFile)
specifier|protected
name|String
name|getFullFileName
parameter_list|(
name|ChannelSftp
operator|.
name|LsEntry
name|sftpFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|SftpException
block|{
return|return
name|channel
operator|.
name|pwd
argument_list|()
operator|+
literal|"/"
operator|+
name|sftpFile
operator|.
name|getFilename
argument_list|()
return|;
block|}
DECL|method|pollFile (ChannelSftp.LsEntry sftpFile)
specifier|private
name|void
name|pollFile
parameter_list|(
name|ChannelSftp
operator|.
name|LsEntry
name|sftpFile
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Polling file: "
operator|+
name|sftpFile
argument_list|)
expr_stmt|;
block|}
name|long
name|ts
init|=
name|sftpFile
operator|.
name|getAttrs
argument_list|()
operator|.
name|getMTime
argument_list|()
operator|*
literal|1000L
decl_stmt|;
comment|// TODO do we need to adjust the TZ? can we?
if|if
condition|(
name|ts
operator|>
name|lastPollTime
operator|&&
name|isMatched
argument_list|(
name|sftpFile
argument_list|)
condition|)
block|{
name|String
name|remoteServer
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|remoteServerInformation
argument_list|()
decl_stmt|;
comment|// is we use excluse read then acquire the exclusive read (waiting until we got it)
if|if
condition|(
name|exclusiveRead
condition|)
block|{
name|acquireExclusiveRead
argument_list|(
name|sftpFile
argument_list|)
expr_stmt|;
block|}
comment|// retrieve the file
specifier|final
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|channel
operator|.
name|get
argument_list|(
name|sftpFile
operator|.
name|getFilename
argument_list|()
argument_list|,
name|byteArrayOutputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieved file: "
operator|+
name|sftpFile
operator|.
name|getFilename
argument_list|()
operator|+
literal|" from: "
operator|+
name|remoteServer
argument_list|)
expr_stmt|;
block|}
name|RemoteFileExchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|getFullFileName
argument_list|(
name|sftpFile
argument_list|)
argument_list|,
name|byteArrayOutputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSetNames
argument_list|()
condition|)
block|{
name|String
name|relativePath
init|=
name|getFullFileName
argument_list|(
name|sftpFile
argument_list|)
operator|.
name|substring
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFile
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|relativePath
operator|=
name|relativePath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|FileComponent
operator|.
name|HEADER_FILE_NAME
argument_list|,
name|relativePath
argument_list|)
expr_stmt|;
block|}
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|acquireExclusiveRead (ChannelSftp.LsEntry sftpFile)
specifier|protected
name|void
name|acquireExclusiveRead
parameter_list|(
name|ChannelSftp
operator|.
name|LsEntry
name|sftpFile
parameter_list|)
throws|throws
name|SftpException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Acquiring exclusive read (avoid reading file that is in progress of being written)"
argument_list|)
expr_stmt|;
comment|// the trick is to try to rename the file, if we can rename then we have exclusive read
comment|// since its a remote file we can not use java.nio to get a RW access
name|String
name|originalName
init|=
name|sftpFile
operator|.
name|getFilename
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|originalName
operator|+
literal|"..exclusiveRead"
decl_stmt|;
name|boolean
name|exclusive
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|exclusive
condition|)
block|{
try|try
block|{
name|channel
operator|.
name|rename
argument_list|(
name|originalName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|exclusive
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// ignore we can not rename it
block|}
if|if
condition|(
name|exclusive
condition|)
block|{
comment|// rename it back so we can read it
name|channel
operator|.
name|rename
argument_list|(
name|newName
argument_list|,
name|originalName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exclusive read not granted. Sleeping for 1000 millis"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Acquired exclusive read to: "
operator|+
name|originalName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isMatched (ChannelSftp.LsEntry sftpFile)
specifier|protected
name|boolean
name|isMatched
parameter_list|(
name|ChannelSftp
operator|.
name|LsEntry
name|sftpFile
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|regexPattern
operator|!=
literal|null
operator|&&
name|regexPattern
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|sftpFile
operator|.
name|getFilename
argument_list|()
operator|.
name|matches
argument_list|(
name|getRegexPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|isRecursive ()
specifier|public
name|boolean
name|isRecursive
parameter_list|()
block|{
return|return
name|recursive
return|;
block|}
DECL|method|setRecursive (boolean recursive)
specifier|public
name|void
name|setRecursive
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
DECL|method|getLastPollTime ()
specifier|public
name|long
name|getLastPollTime
parameter_list|()
block|{
return|return
name|lastPollTime
return|;
block|}
DECL|method|setLastPollTime (long lastPollTime)
specifier|public
name|void
name|setLastPollTime
parameter_list|(
name|long
name|lastPollTime
parameter_list|)
block|{
name|this
operator|.
name|lastPollTime
operator|=
name|lastPollTime
expr_stmt|;
block|}
DECL|method|getRegexPattern ()
specifier|public
name|String
name|getRegexPattern
parameter_list|()
block|{
return|return
name|regexPattern
return|;
block|}
DECL|method|setRegexPattern (String regexPattern)
specifier|public
name|void
name|setRegexPattern
parameter_list|(
name|String
name|regexPattern
parameter_list|)
block|{
name|this
operator|.
name|regexPattern
operator|=
name|regexPattern
expr_stmt|;
block|}
DECL|method|isSetNames ()
specifier|public
name|boolean
name|isSetNames
parameter_list|()
block|{
return|return
name|setNames
return|;
block|}
DECL|method|setSetNames (boolean setNames)
specifier|public
name|void
name|setSetNames
parameter_list|(
name|boolean
name|setNames
parameter_list|)
block|{
name|this
operator|.
name|setNames
operator|=
name|setNames
expr_stmt|;
block|}
DECL|method|isExclusiveRead ()
specifier|public
name|boolean
name|isExclusiveRead
parameter_list|()
block|{
return|return
name|exclusiveRead
return|;
block|}
DECL|method|setExclusiveRead (boolean exclusiveRead)
specifier|public
name|void
name|setExclusiveRead
parameter_list|(
name|boolean
name|exclusiveRead
parameter_list|)
block|{
name|this
operator|.
name|exclusiveRead
operator|=
name|exclusiveRead
expr_stmt|;
block|}
block|}
end_class

end_unit

