begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClientConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPReply
import|;
end_import

begin_comment
comment|/**  * FTP remote file operations  */
end_comment

begin_class
DECL|class|FtpOperations
specifier|public
class|class
name|FtpOperations
implements|implements
name|RemoteFileOperations
argument_list|<
name|FTPFile
argument_list|>
block|{
DECL|field|log
specifier|protected
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|client
specifier|protected
specifier|final
name|FTPClient
name|client
decl_stmt|;
DECL|field|clientConfig
specifier|protected
specifier|final
name|FTPClientConfig
name|clientConfig
decl_stmt|;
DECL|field|endpoint
specifier|protected
name|RemoteFileEndpoint
argument_list|<
name|FTPFile
argument_list|>
name|endpoint
decl_stmt|;
DECL|method|FtpOperations (FTPClient client, FTPClientConfig clientConfig)
specifier|public
name|FtpOperations
parameter_list|(
name|FTPClient
name|client
parameter_list|,
name|FTPClientConfig
name|clientConfig
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|clientConfig
operator|=
name|clientConfig
expr_stmt|;
block|}
DECL|method|setEndpoint (GenericFileEndpoint<FTPFile> endpoint)
specifier|public
name|void
name|setEndpoint
parameter_list|(
name|GenericFileEndpoint
argument_list|<
name|FTPFile
argument_list|>
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
operator|(
name|RemoteFileEndpoint
argument_list|<
name|FTPFile
argument_list|>
operator|)
name|endpoint
expr_stmt|;
block|}
DECL|method|connect (RemoteFileConfiguration configuration)
specifier|public
name|boolean
name|connect
parameter_list|(
name|RemoteFileConfiguration
name|configuration
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Connecting using FTPClient: "
operator|+
name|client
argument_list|)
expr_stmt|;
block|}
name|String
name|host
init|=
name|configuration
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|configuration
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|String
name|username
init|=
name|configuration
operator|.
name|getUsername
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientConfig
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Configuring FTPClient with config: "
operator|+
name|clientConfig
argument_list|)
expr_stmt|;
name|client
operator|.
name|configure
argument_list|(
name|clientConfig
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Connecting to "
operator|+
name|configuration
operator|.
name|remoteServerInformation
argument_list|()
operator|+
literal|" using connection timeout: "
operator|+
name|client
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
name|int
name|attempt
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|connected
condition|)
block|{
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|attempt
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Reconnect attempt #"
operator|+
name|attempt
operator|+
literal|" connecting to + "
operator|+
name|configuration
operator|.
name|remoteServerInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|connect
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
comment|// must check reply code if we are connected
name|int
name|reply
init|=
name|client
operator|.
name|getReplyCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|FTPReply
operator|.
name|isPositiveCompletion
argument_list|(
name|reply
argument_list|)
condition|)
block|{
comment|// yes we could connect
name|connected
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// throw an exception to force the retry logic in the catch exception block
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
literal|"Server refused connection"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// check if we are interrupted so we can break out
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Interrupted during connecting"
argument_list|,
operator|new
name|InterruptedException
argument_list|(
literal|"Interrupted during connecting"
argument_list|)
argument_list|)
throw|;
block|}
name|GenericFileOperationFailedException
name|failed
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|GenericFileOperationFailedException
condition|)
block|{
name|failed
operator|=
operator|(
name|GenericFileOperationFailedException
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|failed
operator|=
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Cannot connect due: "
operator|+
name|failed
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|attempt
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|>
name|endpoint
operator|.
name|getMaximumReconnectAttempts
argument_list|()
condition|)
block|{
throw|throw
name|failed
throw|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getReconnectDelay
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|endpoint
operator|.
name|getReconnectDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// we could potentially also be interrupted during sleep
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Interrupted during sleeping"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// must enter passive mode directly after connect
if|if
condition|(
name|configuration
operator|.
name|isPassiveMode
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Using passive mode connections"
argument_list|)
expr_stmt|;
name|client
operator|.
name|enterLocalPassiveMode
argument_list|()
expr_stmt|;
block|}
comment|// must set soTimeout after connect
if|if
condition|(
name|endpoint
operator|instanceof
name|FtpEndpoint
condition|)
block|{
name|FtpEndpoint
name|ftpEndpoint
init|=
operator|(
name|FtpEndpoint
operator|)
name|endpoint
decl_stmt|;
if|if
condition|(
name|ftpEndpoint
operator|.
name|getSoTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Using SoTimeout="
operator|+
name|ftpEndpoint
operator|.
name|getSoTimeout
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|setSoTimeout
argument_list|(
name|ftpEndpoint
operator|.
name|getSoTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
try|try
block|{
name|boolean
name|login
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Attempting to login user: "
operator|+
name|username
operator|+
literal|" using password: "
operator|+
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|login
operator|=
name|client
operator|.
name|login
argument_list|(
name|username
argument_list|,
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Attempting to login anonymous"
argument_list|)
expr_stmt|;
name|login
operator|=
name|client
operator|.
name|login
argument_list|(
literal|"anonymous"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"User "
operator|+
operator|(
name|username
operator|!=
literal|null
condition|?
name|username
else|:
literal|"anonymous"
operator|)
operator|+
literal|" logged in: "
operator|+
name|login
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|login
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|)
throw|;
block|}
name|client
operator|.
name|setFileType
argument_list|(
name|configuration
operator|.
name|isBinary
argument_list|()
condition|?
name|FTPClient
operator|.
name|BINARY_FILE_TYPE
else|:
name|FTPClient
operator|.
name|ASCII_FILE_TYPE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// site commands
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSiteCommand
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// commands can be separated using new line
name|Iterator
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSiteCommand
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|command
init|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Site command to send: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
name|boolean
name|result
init|=
name|sendSiteCommand
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Site command: "
operator|+
name|command
operator|+
literal|" returned false"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
name|client
operator|.
name|isConnected
argument_list|()
return|;
block|}
DECL|method|disconnect ()
specifier|public
name|void
name|disconnect
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// logout before disconnecting
try|try
block|{
name|client
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|client
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|deleteFile (String name)
specifier|public
name|boolean
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Deleting file: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|this
operator|.
name|client
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|renameFile (String from, String to)
specifier|public
name|boolean
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Renaming file: "
operator|+
name|from
operator|+
literal|" to: "
operator|+
name|to
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|client
operator|.
name|rename
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|buildDirectory (String directory, boolean absolute)
specifier|public
name|boolean
name|buildDirectory
parameter_list|(
name|String
name|directory
parameter_list|,
name|boolean
name|absolute
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// must normalize directory first
name|directory
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|normalizePath
argument_list|(
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"buildDirectory("
operator|+
name|directory
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|originalDirectory
init|=
name|client
operator|.
name|printWorkingDirectory
argument_list|()
decl_stmt|;
name|boolean
name|success
decl_stmt|;
try|try
block|{
comment|// maybe the full directory already exists
name|success
operator|=
name|client
operator|.
name|changeWorkingDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Trying to build remote directory: "
operator|+
name|directory
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|client
operator|.
name|makeDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// we are here if the server side doesn't create intermediate folders so create the folder one by one
name|success
operator|=
name|buildDirectoryChunks
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
finally|finally
block|{
comment|// change back to original directory
if|if
condition|(
name|originalDirectory
operator|!=
literal|null
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|originalDirectory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|retrieveFile (String name, Exchange exchange)
specifier|public
name|boolean
name|retrieveFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"retrieveFile("
operator|+
name|name
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getLocalWorkDirectory
argument_list|()
argument_list|)
condition|)
block|{
comment|// local work directory is configured so we should store file content as files in this local directory
return|return
name|retrieveFileToFileInLocalWorkDirectory
argument_list|(
name|name
argument_list|,
name|exchange
argument_list|)
return|;
block|}
else|else
block|{
comment|// store file content directory as stream on the body
return|return
name|retrieveFileToStreamInBody
argument_list|(
name|name
argument_list|,
name|exchange
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|retrieveFileToStreamInBody (String name, Exchange exchange)
specifier|private
name|boolean
name|retrieveFileToStreamInBody
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
name|boolean
name|result
decl_stmt|;
try|try
block|{
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|GenericFile
argument_list|<
name|FTPFile
argument_list|>
name|target
init|=
operator|(
name|GenericFile
argument_list|<
name|FTPFile
argument_list|>
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"Exchange should have the "
operator|+
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
operator|+
literal|" set"
argument_list|)
expr_stmt|;
name|target
operator|.
name|setBody
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|String
name|remoteName
init|=
name|name
decl_stmt|;
name|String
name|currentDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
comment|// remember current directory
name|currentDir
operator|=
name|getCurrentDirectory
argument_list|()
expr_stmt|;
comment|// change directory to path where the file is to be retrieved
comment|// (must do this as some FTP servers cannot retrieve using absolute path)
name|String
name|path
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// remote name is now only the file name as we just changed directory
name|remoteName
operator|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|client
operator|.
name|retrieveFile
argument_list|(
name|remoteName
argument_list|,
name|os
argument_list|)
expr_stmt|;
comment|// change back to current directory
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|,
literal|"retrieve: "
operator|+
name|name
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|retrieveFileToFileInLocalWorkDirectory (String name, Exchange exchange)
specifier|private
name|boolean
name|retrieveFileToFileInLocalWorkDirectory
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|File
name|temp
decl_stmt|;
name|File
name|local
init|=
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|normalizePath
argument_list|(
name|endpoint
operator|.
name|getLocalWorkDirectory
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OutputStream
name|os
decl_stmt|;
try|try
block|{
comment|// use relative filename in local work directory
name|GenericFile
argument_list|<
name|FTPFile
argument_list|>
name|target
init|=
operator|(
name|GenericFile
argument_list|<
name|FTPFile
argument_list|>
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"Exchange should have the "
operator|+
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
operator|+
literal|" set"
argument_list|)
expr_stmt|;
name|String
name|relativeName
init|=
name|target
operator|.
name|getRelativeFilePath
argument_list|()
decl_stmt|;
name|temp
operator|=
operator|new
name|File
argument_list|(
name|local
argument_list|,
name|relativeName
operator|+
literal|".inprogress"
argument_list|)
expr_stmt|;
name|local
operator|=
operator|new
name|File
argument_list|(
name|local
argument_list|,
name|relativeName
argument_list|)
expr_stmt|;
comment|// create directory to local work file
name|local
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// delete any existing files
if|if
condition|(
name|temp
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|temp
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot delete existing local work file: "
operator|+
name|temp
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|local
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|local
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot delete existing local work file: "
operator|+
name|local
argument_list|)
throw|;
block|}
block|}
comment|// create new temp local work file
if|if
condition|(
operator|!
name|temp
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot create new local work file: "
operator|+
name|temp
argument_list|)
throw|;
block|}
comment|// store content as a file in the local work directory in the temp handle
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|temp
argument_list|)
expr_stmt|;
comment|// set header with the path to the local work file
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LOCAL_WORK_PATH
argument_list|,
name|local
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot create new local work file: "
operator|+
name|local
argument_list|)
throw|;
block|}
name|boolean
name|result
decl_stmt|;
try|try
block|{
name|GenericFile
argument_list|<
name|FTPFile
argument_list|>
name|target
init|=
operator|(
name|GenericFile
argument_list|<
name|FTPFile
argument_list|>
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
argument_list|)
decl_stmt|;
comment|// store the java.io.File handle as the body
name|target
operator|.
name|setBody
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|String
name|remoteName
init|=
name|name
decl_stmt|;
name|String
name|currentDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
comment|// remember current directory
name|currentDir
operator|=
name|getCurrentDirectory
argument_list|()
expr_stmt|;
comment|// change directory to path where the file is to be retrieved
comment|// (must do this as some FTP servers cannot retrieve using absolute path)
name|String
name|path
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// remote name is now only the file name as we just changed directory
name|remoteName
operator|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|client
operator|.
name|retrieveFile
argument_list|(
name|remoteName
argument_list|,
name|os
argument_list|)
expr_stmt|;
comment|// change back to current directory
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Error occurred during retrieving file: "
operator|+
name|name
operator|+
literal|" to local directory. Deleting local work file: "
operator|+
name|temp
argument_list|)
expr_stmt|;
block|}
comment|// failed to retrieve the file so we need to close streams and delete in progress file
comment|// must close stream before deleting file
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|,
literal|"retrieve: "
operator|+
name|name
argument_list|,
name|log
argument_list|)
expr_stmt|;
name|boolean
name|deleted
init|=
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|temp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred during retrieving file: "
operator|+
name|name
operator|+
literal|" to local directory. Cannot delete local work file: "
operator|+
name|temp
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// need to close the stream before rename it
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|,
literal|"retrieve: "
operator|+
name|name
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Retrieve file to local work file result: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Renaming local in progress file from: "
operator|+
name|temp
operator|+
literal|" to: "
operator|+
name|local
argument_list|)
expr_stmt|;
block|}
comment|// operation went okay so rename temp to local after we have retrieved the data
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|renameFile
argument_list|(
name|temp
argument_list|,
name|local
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot rename local work file from: "
operator|+
name|temp
operator|+
literal|" to: "
operator|+
name|local
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|storeFile (String name, Exchange exchange)
specifier|public
name|boolean
name|storeFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// must normalize name first
name|name
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|normalizePath
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"storeFile("
operator|+
name|name
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
name|String
name|currentDir
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|targetName
init|=
name|name
decl_stmt|;
try|try
block|{
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
comment|// must remember current dir so we stay in that directory after the write
name|currentDir
operator|=
name|getCurrentDirectory
argument_list|()
expr_stmt|;
comment|// change to path of name
name|changeCurrentDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// the target name should be without path, as we have changed directory
name|targetName
operator|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// store the file
name|answer
operator|=
name|doStoreFile
argument_list|(
name|name
argument_list|,
name|targetName
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// change back to current directory if we changed directory
if|if
condition|(
name|currentDir
operator|!=
literal|null
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|doStoreFile (String name, String targetName, Exchange exchange)
specifier|private
name|boolean
name|doStoreFile
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|targetName
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"doStoreFile("
operator|+
name|targetName
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|// if an existing file already exists what should we do?
if|if
condition|(
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Ignore
operator|||
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Fail
condition|)
block|{
name|boolean
name|existFile
init|=
name|existsFile
argument_list|(
name|targetName
argument_list|)
decl_stmt|;
if|if
condition|(
name|existFile
operator|&&
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Ignore
condition|)
block|{
comment|// ignore but indicate that the file was written
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"An existing file already exists: "
operator|+
name|name
operator|+
literal|". Ignore and do not override it."
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|existFile
operator|&&
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Fail
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"File already exist: "
operator|+
name|name
operator|+
literal|". Cannot write new file."
argument_list|)
throw|;
block|}
block|}
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Append
condition|)
block|{
return|return
name|client
operator|.
name|appendFile
argument_list|(
name|targetName
argument_list|,
name|is
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|client
operator|.
name|storeFile
argument_list|(
name|targetName
argument_list|,
name|is
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot store file: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|,
literal|"store: "
operator|+
name|name
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|existsFile (String name)
specifier|public
name|boolean
name|existsFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"existsFile("
operator|+
name|name
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|// check whether a file already exists
name|String
name|directory
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|onlyName
init|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|String
index|[]
name|names
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
name|names
operator|=
name|client
operator|.
name|listNames
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|=
name|client
operator|.
name|listNames
argument_list|()
expr_stmt|;
block|}
comment|// can return either null or an empty list depending on FTP servers
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|existing
range|:
name|names
control|)
block|{
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|onlyName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getCurrentDirectory ()
specifier|public
name|String
name|getCurrentDirectory
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"getCurrentDirectory()"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|client
operator|.
name|printWorkingDirectory
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|changeCurrentDirectory (String path)
specifier|public
name|void
name|changeCurrentDirectory
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"changeCurrentDirectory("
operator|+
name|path
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// must compact path so FTP server can traverse correctly
name|path
operator|=
name|FileUtil
operator|.
name|compactPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// not stepwise should change directory in one operation
if|if
condition|(
operator|!
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
name|doChangeDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if it starts with the root path then a little special handling for that
if|if
condition|(
name|FileUtil
operator|.
name|hasLeadingSeparator
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// change to root path
name|doChangeDirectory
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// split into multiple dirs
specifier|final
name|String
index|[]
name|dirs
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/|\\\\"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirs
operator|==
literal|null
operator|||
name|dirs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// path was just a relative single path
name|doChangeDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// there are multiple dirs so do this in chunks
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|doChangeDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doChangeDirectory (String path)
specifier|private
name|void
name|doChangeDirectory
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
literal|"."
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Changing directory: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|".."
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|changeToParentDirectory
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|success
operator|=
name|client
operator|.
name|changeWorkingDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
literal|"Cannot change directory to: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
DECL|method|changeToParentDirectory ()
specifier|public
name|void
name|changeToParentDirectory
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
try|try
block|{
name|client
operator|.
name|changeToParentDirectory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|listFiles ()
specifier|public
name|List
argument_list|<
name|FTPFile
argument_list|>
name|listFiles
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"listFiles()"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|FTPFile
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|FTPFile
argument_list|>
argument_list|()
decl_stmt|;
name|FTPFile
index|[]
name|files
init|=
name|client
operator|.
name|listFiles
argument_list|()
decl_stmt|;
comment|// can return either null or an empty list depending on FTP servers
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|listFiles (String path)
specifier|public
name|List
argument_list|<
name|FTPFile
argument_list|>
name|listFiles
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"listFiles("
operator|+
name|path
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|// use current directory if path not given
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"."
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|FTPFile
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|FTPFile
argument_list|>
argument_list|()
decl_stmt|;
name|FTPFile
index|[]
name|files
init|=
name|client
operator|.
name|listFiles
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// can return either null or an empty list depending on FTP servers
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|sendNoop ()
specifier|public
name|boolean
name|sendNoop
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"sendNoOp"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|client
operator|.
name|sendNoOp
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|sendSiteCommand (String command)
specifier|public
name|boolean
name|sendSiteCommand
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"sendSiteCommand("
operator|+
name|command
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|client
operator|.
name|sendSiteCommand
argument_list|(
name|command
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getFtpClient ()
specifier|protected
name|FTPClient
name|getFtpClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
DECL|method|buildDirectoryChunks (String dirName)
specifier|private
name|boolean
name|buildDirectoryChunks
parameter_list|(
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|dirName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|dirs
init|=
name|dirName
operator|.
name|split
argument_list|(
literal|"/|\\\\"
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|dir
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
comment|// must normalize the directory name
name|String
name|directory
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|normalizePath
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// do not try to build root folder (/ or \)
if|if
condition|(
operator|!
operator|(
name|directory
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|||
name|directory
operator|.
name|equals
argument_list|(
literal|"\\"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Trying to build remote directory by chunk: "
operator|+
name|directory
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|client
operator|.
name|makeDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
block|}
end_class

end_unit

