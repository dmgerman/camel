begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|io
operator|.
name|CopyStreamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|io
operator|.
name|CopyStreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DefaultFtpClientActivityListener
specifier|public
class|class
name|DefaultFtpClientActivityListener
implements|implements
name|FtpClientActivityListener
implements|,
name|CopyStreamListener
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FtpClientActivityListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|CamelLogger
name|logger
decl_stmt|;
DECL|field|host
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|FtpEndpoint
name|endpoint
decl_stmt|;
DECL|field|download
specifier|private
name|boolean
name|download
init|=
literal|true
decl_stmt|;
DECL|field|resume
specifier|private
name|boolean
name|resume
decl_stmt|;
DECL|field|resumeOffset
specifier|private
name|long
name|resumeOffset
decl_stmt|;
DECL|field|fileName
specifier|private
name|String
name|fileName
decl_stmt|;
DECL|field|fileSize
specifier|private
name|long
name|fileSize
decl_stmt|;
DECL|field|fileSizeText
specifier|private
name|String
name|fileSizeText
decl_stmt|;
DECL|field|lastLogActivity
specifier|private
name|String
name|lastLogActivity
decl_stmt|;
DECL|field|lastVerboseLogActivity
specifier|private
name|String
name|lastVerboseLogActivity
decl_stmt|;
DECL|field|lastLogActivityTimestamp
specifier|private
name|long
name|lastLogActivityTimestamp
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|lastVerboseLogActivityTimestamp
specifier|private
name|long
name|lastVerboseLogActivityTimestamp
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|transferredBytes
specifier|private
name|long
name|transferredBytes
decl_stmt|;
DECL|field|watch
specifier|private
specifier|final
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
DECL|field|interval
specifier|private
specifier|final
name|StopWatch
name|interval
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
DECL|method|DefaultFtpClientActivityListener (FtpEndpoint endpoint, String host)
specifier|public
name|DefaultFtpClientActivityListener
parameter_list|(
name|FtpEndpoint
name|endpoint
parameter_list|,
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
operator|new
name|CamelLogger
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDownload (boolean download)
specifier|public
name|void
name|setDownload
parameter_list|(
name|boolean
name|download
parameter_list|)
block|{
name|this
operator|.
name|download
operator|=
name|download
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setRemoteFileName (String fileName)
specifier|public
name|void
name|setRemoteFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setRemoteFileSize (long fileSize)
specifier|public
name|void
name|setRemoteFileSize
parameter_list|(
name|long
name|fileSize
parameter_list|)
block|{
name|this
operator|.
name|fileSize
operator|=
name|fileSize
expr_stmt|;
name|this
operator|.
name|fileSizeText
operator|=
name|StringHelper
operator|.
name|humanReadableBytes
argument_list|(
name|fileSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLastLogActivity ()
specifier|public
name|String
name|getLastLogActivity
parameter_list|()
block|{
return|return
name|lastLogActivity
return|;
block|}
annotation|@
name|Override
DECL|method|getLastLogActivityTimestamp ()
specifier|public
name|long
name|getLastLogActivityTimestamp
parameter_list|()
block|{
return|return
name|lastLogActivityTimestamp
return|;
block|}
annotation|@
name|Override
DECL|method|getLastVerboseLogActivity ()
specifier|public
name|String
name|getLastVerboseLogActivity
parameter_list|()
block|{
return|return
name|lastVerboseLogActivity
return|;
block|}
annotation|@
name|Override
DECL|method|getLastVerboseLogActivityTimestamp ()
specifier|public
name|long
name|getLastVerboseLogActivityTimestamp
parameter_list|()
block|{
return|return
name|lastVerboseLogActivityTimestamp
return|;
block|}
annotation|@
name|Override
DECL|method|onGeneralError (String host, String errorMessage)
specifier|public
name|void
name|onGeneralError
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|errorMessage
parameter_list|)
block|{
name|doLogVerbose
argument_list|(
literal|"General error when communicating with host: "
operator|+
name|host
operator|+
literal|" error: "
operator|+
name|errorMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onConnecting (String host)
specifier|public
name|void
name|onConnecting
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|doLogVerbose
argument_list|(
literal|"Connecting to host: "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onConnected (String host)
specifier|public
name|void
name|onConnected
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|doLogVerbose
argument_list|(
literal|"Connected to host: "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLogin (String host)
specifier|public
name|void
name|onLogin
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|doLogVerbose
argument_list|(
literal|"Login on host: "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoginComplete (String host)
specifier|public
name|void
name|onLoginComplete
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|doLogVerbose
argument_list|(
literal|"Login on host: "
operator|+
name|host
operator|+
literal|" complete"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoginFailed (int replyCode, String replyMessage)
specifier|public
name|void
name|onLoginFailed
parameter_list|(
name|int
name|replyCode
parameter_list|,
name|String
name|replyMessage
parameter_list|)
block|{
name|doLogVerbose
argument_list|(
literal|"Login on host: "
operator|+
name|host
operator|+
literal|" failed (code: "
operator|+
name|replyCode
operator|+
literal|", message: "
operator|+
name|replyMessage
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onDisconnecting (String host)
specifier|public
name|void
name|onDisconnecting
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|doLogVerbose
argument_list|(
literal|"Disconnecting from host: "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onDisconnected (String host)
specifier|public
name|void
name|onDisconnected
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|doLogVerbose
argument_list|(
literal|"Disconnected from host: "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onScanningForFiles (String host, String directory)
specifier|public
name|void
name|onScanningForFiles
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|directory
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|doLogVerbose
argument_list|(
literal|"Scanning for new files to download from host: "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doLogVerbose
argument_list|(
literal|"Scanning for new files to download from host: "
operator|+
name|host
operator|+
literal|" in directory: "
operator|+
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onBeginDownloading (String host, String file)
specifier|public
name|void
name|onBeginDownloading
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|download
operator|=
literal|true
expr_stmt|;
name|resume
operator|=
literal|false
expr_stmt|;
name|resumeOffset
operator|=
literal|0
expr_stmt|;
name|watch
operator|.
name|restart
argument_list|()
expr_stmt|;
name|interval
operator|.
name|restart
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"Downloading from host: "
operator|+
name|host
operator|+
literal|" file: "
operator|+
name|file
operator|+
literal|" starting "
decl_stmt|;
comment|// add extra space to align with completed
if|if
condition|(
name|fileSize
operator|>
literal|0
condition|)
block|{
name|msg
operator|+=
literal|" (size: "
operator|+
name|fileSizeText
operator|+
literal|")"
expr_stmt|;
block|}
name|doLog
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResumeDownloading (String host, String file, long position)
specifier|public
name|void
name|onResumeDownloading
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|file
parameter_list|,
name|long
name|position
parameter_list|)
block|{
name|download
operator|=
literal|true
expr_stmt|;
name|resume
operator|=
literal|true
expr_stmt|;
name|resumeOffset
operator|=
name|position
expr_stmt|;
name|watch
operator|.
name|restart
argument_list|()
expr_stmt|;
name|interval
operator|.
name|restart
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"Resume downloading from host: "
operator|+
name|host
operator|+
literal|" file: "
operator|+
name|file
operator|+
literal|" at position: "
operator|+
name|position
operator|+
literal|" bytes/"
operator|+
name|StringHelper
operator|.
name|humanReadableBytes
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSize
operator|>
literal|0
condition|)
block|{
name|float
name|percent
init|=
operator|(
operator|(
name|float
operator|)
name|resumeOffset
operator|/
operator|(
name|float
operator|)
name|fileSize
operator|)
operator|*
literal|100L
decl_stmt|;
name|String
name|num
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
name|percent
argument_list|)
decl_stmt|;
name|msg
operator|+=
literal|"/"
operator|+
name|num
operator|+
literal|"% (size: "
operator|+
name|fileSizeText
operator|+
literal|")"
expr_stmt|;
block|}
name|doLog
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onDownload (String host, String file, long chunkSize, long totalChunkSize, long fileSize)
specifier|public
name|void
name|onDownload
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|file
parameter_list|,
name|long
name|chunkSize
parameter_list|,
name|long
name|totalChunkSize
parameter_list|,
name|long
name|fileSize
parameter_list|)
block|{
name|totalChunkSize
operator|=
name|totalChunkSize
operator|+
name|resumeOffset
expr_stmt|;
name|transferredBytes
operator|=
name|totalChunkSize
expr_stmt|;
name|String
name|prefix
init|=
name|resume
condition|?
literal|"Resume downloading"
else|:
literal|"Downloading"
decl_stmt|;
name|String
name|msg
init|=
name|prefix
operator|+
literal|" from host: "
operator|+
name|host
operator|+
literal|" file: "
operator|+
name|file
operator|+
literal|" chunk ("
operator|+
name|chunkSize
operator|+
literal|"/"
operator|+
name|totalChunkSize
operator|+
literal|" bytes)"
decl_stmt|;
if|if
condition|(
name|fileSize
operator|>
literal|0
condition|)
block|{
name|float
name|percent
init|=
operator|(
operator|(
name|float
operator|)
name|totalChunkSize
operator|/
operator|(
name|float
operator|)
name|fileSize
operator|)
operator|*
literal|100L
decl_stmt|;
name|String
name|num
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
name|percent
argument_list|)
decl_stmt|;
comment|// avoid 100.0 as its only done when we get the onDownloadComplete
if|if
condition|(
name|totalChunkSize
operator|<
name|fileSize
operator|&&
literal|"100.0"
operator|.
name|equals
argument_list|(
name|num
argument_list|)
condition|)
block|{
name|num
operator|=
literal|"99.9"
expr_stmt|;
block|}
name|String
name|size
init|=
name|StringHelper
operator|.
name|humanReadableBytes
argument_list|(
name|totalChunkSize
argument_list|)
decl_stmt|;
name|msg
operator|+=
literal|" (progress: "
operator|+
name|size
operator|+
literal|"/"
operator|+
name|num
operator|+
literal|"%)"
expr_stmt|;
block|}
else|else
block|{
comment|// okay we do not know the total size, but then make what we have download so-far human readable
name|String
name|size
init|=
name|StringHelper
operator|.
name|humanReadableBytes
argument_list|(
name|totalChunkSize
argument_list|)
decl_stmt|;
name|msg
operator|+=
literal|" (downloaded: "
operator|+
name|size
operator|+
literal|")"
expr_stmt|;
block|}
name|doLogVerbose
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// however if the operation is slow then log once in a while
if|if
condition|(
name|interval
operator|.
name|taken
argument_list|()
operator|>
name|endpoint
operator|.
name|getTransferLoggingIntervalSeconds
argument_list|()
operator|*
literal|1000
condition|)
block|{
name|doLog
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|interval
operator|.
name|restart
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onDownloadComplete (String host, String file)
specifier|public
name|void
name|onDownloadComplete
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|String
name|prefix
init|=
name|resume
condition|?
literal|"Resume downloading"
else|:
literal|"Downloading"
decl_stmt|;
name|String
name|msg
init|=
name|prefix
operator|+
literal|" from host: "
operator|+
name|host
operator|+
literal|" file: "
operator|+
name|file
operator|+
literal|" completed"
decl_stmt|;
if|if
condition|(
name|transferredBytes
operator|>
literal|0
condition|)
block|{
name|msg
operator|+=
literal|" (size: "
operator|+
name|StringHelper
operator|.
name|humanReadableBytes
argument_list|(
name|transferredBytes
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
name|long
name|taken
init|=
name|watch
operator|.
name|taken
argument_list|()
decl_stmt|;
name|String
name|time
init|=
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|taken
argument_list|)
decl_stmt|;
name|msg
operator|+=
literal|" (took: "
operator|+
name|time
operator|+
literal|")"
expr_stmt|;
name|doLog
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onBeginUploading (String host, String file)
specifier|public
name|void
name|onBeginUploading
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|download
operator|=
literal|false
expr_stmt|;
name|watch
operator|.
name|restart
argument_list|()
expr_stmt|;
name|interval
operator|.
name|restart
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"Uploading to host: "
operator|+
name|host
operator|+
literal|" file: "
operator|+
name|file
operator|+
literal|" starting"
decl_stmt|;
if|if
condition|(
name|fileSize
operator|>
literal|0
condition|)
block|{
name|msg
operator|+=
literal|" (size: "
operator|+
name|fileSizeText
operator|+
literal|")"
expr_stmt|;
block|}
name|doLog
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUpload (String host, String file, long chunkSize, long totalChunkSize, long fileSize)
specifier|public
name|void
name|onUpload
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|file
parameter_list|,
name|long
name|chunkSize
parameter_list|,
name|long
name|totalChunkSize
parameter_list|,
name|long
name|fileSize
parameter_list|)
block|{
name|transferredBytes
operator|=
name|totalChunkSize
expr_stmt|;
name|String
name|msg
init|=
literal|"Uploading to host: "
operator|+
name|host
operator|+
literal|" file: "
operator|+
name|file
operator|+
literal|" chunk ("
operator|+
name|chunkSize
operator|+
literal|"/"
operator|+
name|totalChunkSize
operator|+
literal|" bytes)"
decl_stmt|;
if|if
condition|(
name|fileSize
operator|>
literal|0
condition|)
block|{
name|float
name|percent
init|=
operator|(
operator|(
name|float
operator|)
name|totalChunkSize
operator|/
operator|(
name|float
operator|)
name|fileSize
operator|)
operator|*
literal|100L
decl_stmt|;
name|String
name|num
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
name|percent
argument_list|)
decl_stmt|;
comment|// avoid 100.0 as its only done when we get the onUploadComplete
if|if
condition|(
name|totalChunkSize
operator|<
name|fileSize
operator|&&
literal|"100.0"
operator|.
name|equals
argument_list|(
name|num
argument_list|)
condition|)
block|{
name|num
operator|=
literal|"99.9"
expr_stmt|;
block|}
name|String
name|size
init|=
name|StringHelper
operator|.
name|humanReadableBytes
argument_list|(
name|totalChunkSize
argument_list|)
decl_stmt|;
name|msg
operator|+=
literal|" (progress: "
operator|+
name|size
operator|+
literal|"/"
operator|+
name|num
operator|+
literal|"%)"
expr_stmt|;
block|}
else|else
block|{
comment|// okay we do not know the total size, but then make what we have uploaded so-far human readable
name|String
name|size
init|=
name|StringHelper
operator|.
name|humanReadableBytes
argument_list|(
name|totalChunkSize
argument_list|)
decl_stmt|;
name|msg
operator|+=
literal|" (uploaded: "
operator|+
name|size
operator|+
literal|")"
expr_stmt|;
block|}
comment|// each chunk is verbose
name|doLogVerbose
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// however if the operation is slow then log once in a while
if|if
condition|(
name|interval
operator|.
name|taken
argument_list|()
operator|>
name|endpoint
operator|.
name|getTransferLoggingIntervalSeconds
argument_list|()
operator|*
literal|1000
condition|)
block|{
name|doLog
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|interval
operator|.
name|restart
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onUploadComplete (String host, String file)
specifier|public
name|void
name|onUploadComplete
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Uploading to host: "
operator|+
name|host
operator|+
literal|" file: "
operator|+
name|file
operator|+
literal|" completed"
decl_stmt|;
if|if
condition|(
name|transferredBytes
operator|>
literal|0
condition|)
block|{
name|msg
operator|+=
literal|" (size: "
operator|+
name|StringHelper
operator|.
name|humanReadableBytes
argument_list|(
name|transferredBytes
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
name|long
name|taken
init|=
name|watch
operator|.
name|taken
argument_list|()
decl_stmt|;
name|String
name|time
init|=
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|taken
argument_list|)
decl_stmt|;
name|msg
operator|+=
literal|" (took: "
operator|+
name|time
operator|+
literal|")"
expr_stmt|;
name|doLog
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bytesTransferred (CopyStreamEvent event)
specifier|public
name|void
name|bytesTransferred
parameter_list|(
name|CopyStreamEvent
name|event
parameter_list|)
block|{
comment|// not in use
block|}
annotation|@
name|Override
DECL|method|bytesTransferred (long totalBytesTransferred, int bytesTransferred, long streamSize)
specifier|public
name|void
name|bytesTransferred
parameter_list|(
name|long
name|totalBytesTransferred
parameter_list|,
name|int
name|bytesTransferred
parameter_list|,
name|long
name|streamSize
parameter_list|)
block|{
comment|// stream size is always -1, so use pre-calculated fileSize instead
if|if
condition|(
name|download
condition|)
block|{
name|onDownload
argument_list|(
name|host
argument_list|,
name|fileName
argument_list|,
name|bytesTransferred
argument_list|,
name|totalBytesTransferred
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onUpload
argument_list|(
name|host
argument_list|,
name|fileName
argument_list|,
name|bytesTransferred
argument_list|,
name|totalBytesTransferred
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doLog (String message)
specifier|protected
name|void
name|doLog
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|lastLogActivity
operator|=
name|message
expr_stmt|;
name|lastLogActivityTimestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// verbose implies regular log as well
name|lastVerboseLogActivity
operator|=
name|lastLogActivity
expr_stmt|;
name|lastVerboseLogActivityTimestamp
operator|=
name|lastLogActivityTimestamp
expr_stmt|;
name|logger
operator|.
name|log
argument_list|(
name|message
argument_list|,
name|endpoint
operator|.
name|getTransferLoggingLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doLogVerbose (String message)
specifier|protected
name|void
name|doLogVerbose
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|lastVerboseLogActivity
operator|=
name|message
expr_stmt|;
name|lastVerboseLogActivityTimestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|isTransferLoggingVerbose
argument_list|()
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|message
argument_list|,
name|endpoint
operator|.
name|getTransferLoggingLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

