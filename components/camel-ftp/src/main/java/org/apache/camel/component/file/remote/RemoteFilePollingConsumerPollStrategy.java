begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultPollingConsumerPollStrategy
import|;
end_import

begin_comment
comment|/**  * Remote file consumer polling strategy that attempts to help recovering from lost connections.  */
end_comment

begin_class
DECL|class|RemoteFilePollingConsumerPollStrategy
specifier|public
class|class
name|RemoteFilePollingConsumerPollStrategy
extends|extends
name|DefaultPollingConsumerPollStrategy
block|{
annotation|@
name|Override
DECL|method|rollback (Consumer consumer, Endpoint endpoint, int retryCounter, Exception e)
specifier|public
name|boolean
name|rollback
parameter_list|(
name|Consumer
name|consumer
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|int
name|retryCounter
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|consumer
operator|instanceof
name|RemoteFileConsumer
condition|)
block|{
name|RemoteFileConsumer
argument_list|<
name|?
argument_list|>
name|rfc
init|=
operator|(
name|RemoteFileConsumer
argument_list|<
name|?
argument_list|>
operator|)
name|consumer
decl_stmt|;
comment|// only try to recover if we are allowed to run
if|if
condition|(
name|rfc
operator|.
name|isRunAllowed
argument_list|()
condition|)
block|{
comment|// disconnect from the server to force it to re login at next poll to recover
name|log
operator|.
name|warn
argument_list|(
literal|"Trying to recover by force disconnecting from remote server and re-connecting at next poll: {}"
argument_list|,
name|rfc
operator|.
name|remoteServer
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|rfc
operator|.
name|forceDisconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore the exception
name|log
operator|.
name|debug
argument_list|(
literal|"Error occurred during force disconnecting from: "
operator|+
name|rfc
operator|.
name|remoteServer
argument_list|()
operator|+
literal|". This exception will be ignored."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|super
operator|.
name|rollback
argument_list|(
name|consumer
argument_list|,
name|endpoint
argument_list|,
name|retryCounter
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
end_class

end_unit

