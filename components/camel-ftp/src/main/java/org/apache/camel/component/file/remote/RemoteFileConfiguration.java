begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileConfiguration
import|;
end_import

begin_comment
comment|/**  * Configuration of the FTP server  */
end_comment

begin_class
DECL|class|RemoteFileConfiguration
specifier|public
specifier|abstract
class|class
name|RemoteFileConfiguration
extends|extends
name|GenericFileConfiguration
block|{
DECL|field|protocol
specifier|private
name|String
name|protocol
decl_stmt|;
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|binary
specifier|private
name|boolean
name|binary
decl_stmt|;
DECL|field|passiveMode
specifier|private
name|boolean
name|passiveMode
decl_stmt|;
DECL|field|connectTimeout
specifier|private
name|int
name|connectTimeout
init|=
literal|10000
decl_stmt|;
DECL|field|timeout
specifier|private
name|int
name|timeout
init|=
literal|30000
decl_stmt|;
DECL|field|soTimeout
specifier|private
name|int
name|soTimeout
decl_stmt|;
DECL|field|throwExceptionOnConnectFailed
specifier|private
name|boolean
name|throwExceptionOnConnectFailed
decl_stmt|;
DECL|field|siteCommand
specifier|private
name|String
name|siteCommand
decl_stmt|;
DECL|method|RemoteFileConfiguration ()
specifier|public
name|RemoteFileConfiguration
parameter_list|()
block|{     }
DECL|method|RemoteFileConfiguration (URI uri)
specifier|public
name|RemoteFileConfiguration
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|configure
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needToNormalize ()
specifier|public
name|boolean
name|needToNormalize
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|configure (URI uri)
specifier|public
name|void
name|configure
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|setProtocol
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultPort
argument_list|()
expr_stmt|;
name|setUsername
argument_list|(
name|uri
operator|.
name|getUserInfo
argument_list|()
argument_list|)
expr_stmt|;
name|setHost
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|setPort
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns human readable server information for logging purpose      */
DECL|method|remoteServerInformation ()
specifier|public
name|String
name|remoteServerInformation
parameter_list|()
block|{
return|return
name|protocol
operator|+
literal|"://"
operator|+
operator|(
name|username
operator|!=
literal|null
condition|?
name|username
else|:
literal|"anonymous"
operator|)
operator|+
literal|"@"
operator|+
name|host
operator|+
literal|":"
operator|+
name|getPort
argument_list|()
return|;
block|}
DECL|method|setDefaultPort ()
specifier|protected
specifier|abstract
name|void
name|setDefaultPort
parameter_list|()
function_decl|;
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
comment|// only set port if provided with a positive number
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
DECL|method|setProtocol (String protocol)
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|isBinary ()
specifier|public
name|boolean
name|isBinary
parameter_list|()
block|{
return|return
name|binary
return|;
block|}
DECL|method|setBinary (boolean binary)
specifier|public
name|void
name|setBinary
parameter_list|(
name|boolean
name|binary
parameter_list|)
block|{
name|this
operator|.
name|binary
operator|=
name|binary
expr_stmt|;
block|}
DECL|method|isPassiveMode ()
specifier|public
name|boolean
name|isPassiveMode
parameter_list|()
block|{
return|return
name|passiveMode
return|;
block|}
comment|/**      * Sets passive mode connections.      *<br/>      * Default is active mode connections.      */
DECL|method|setPassiveMode (boolean passiveMode)
specifier|public
name|void
name|setPassiveMode
parameter_list|(
name|boolean
name|passiveMode
parameter_list|)
block|{
name|this
operator|.
name|passiveMode
operator|=
name|passiveMode
expr_stmt|;
block|}
DECL|method|getConnectTimeout ()
specifier|public
name|int
name|getConnectTimeout
parameter_list|()
block|{
return|return
name|connectTimeout
return|;
block|}
comment|/**      * Sets the connect timeout for waiting for a connection to be established      *<p/>      * Used by both FTPClient and JSCH      */
DECL|method|setConnectTimeout (int connectTimeout)
specifier|public
name|void
name|setConnectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectTimeout
operator|=
name|connectTimeout
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|int
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
comment|/**      * Sets the data timeout for waiting for reply      *<p/>      * Used only by FTPClient      */
DECL|method|setTimeout (int timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getSoTimeout ()
specifier|public
name|int
name|getSoTimeout
parameter_list|()
block|{
return|return
name|soTimeout
return|;
block|}
comment|/**      * Sets the so timeout      *<p/>      * Used only by FTPClient      */
DECL|method|setSoTimeout (int soTimeout)
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|soTimeout
parameter_list|)
block|{
name|this
operator|.
name|soTimeout
operator|=
name|soTimeout
expr_stmt|;
block|}
DECL|method|isThrowExceptionOnConnectFailed ()
specifier|public
name|boolean
name|isThrowExceptionOnConnectFailed
parameter_list|()
block|{
return|return
name|throwExceptionOnConnectFailed
return|;
block|}
comment|/**      * Should an exception be thrown if connection failed (exhausted)      *<p/>      * By default exception is not thrown and a<tt>WARN</tt> is logged.      * You can use this to enable exception being thrown and handle the thrown exception      * from the {@link org.apache.camel.spi.PollingConsumerPollStrategy} rollback method.      */
DECL|method|setThrowExceptionOnConnectFailed (boolean throwExceptionOnConnectFailed)
specifier|public
name|void
name|setThrowExceptionOnConnectFailed
parameter_list|(
name|boolean
name|throwExceptionOnConnectFailed
parameter_list|)
block|{
name|this
operator|.
name|throwExceptionOnConnectFailed
operator|=
name|throwExceptionOnConnectFailed
expr_stmt|;
block|}
DECL|method|getSiteCommand ()
specifier|public
name|String
name|getSiteCommand
parameter_list|()
block|{
return|return
name|siteCommand
return|;
block|}
comment|/**      * Sets optional site command(s) to be executed after successful login.      *<p/>      * Multiple site commands can be separated using a new line character (\n).      *      * @param siteCommand the site command(s).      */
DECL|method|setSiteCommand (String siteCommand)
specifier|public
name|void
name|setSiteCommand
parameter_list|(
name|String
name|siteCommand
parameter_list|)
block|{
name|this
operator|.
name|siteCommand
operator|=
name|siteCommand
expr_stmt|;
block|}
block|}
end_class

end_unit

