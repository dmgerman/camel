begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|FileLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClientConfig
import|;
end_import

begin_class
DECL|class|RemoteFileConfiguration
specifier|public
class|class
name|RemoteFileConfiguration
implements|implements
name|Cloneable
block|{
DECL|field|protocol
specifier|private
name|String
name|protocol
decl_stmt|;
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|file
specifier|private
name|String
name|file
decl_stmt|;
DECL|field|binary
specifier|private
name|boolean
name|binary
decl_stmt|;
DECL|field|directory
specifier|private
name|boolean
name|directory
init|=
literal|true
decl_stmt|;
DECL|field|ftpClientConfig
specifier|private
name|FTPClientConfig
name|ftpClientConfig
decl_stmt|;
DECL|field|expression
specifier|private
name|Expression
name|expression
decl_stmt|;
DECL|field|passiveMode
specifier|private
name|boolean
name|passiveMode
decl_stmt|;
DECL|field|knownHosts
specifier|private
name|String
name|knownHosts
decl_stmt|;
DECL|field|tempPrefix
specifier|private
name|String
name|tempPrefix
decl_stmt|;
DECL|field|privateKeyFile
specifier|private
name|String
name|privateKeyFile
decl_stmt|;
DECL|field|privateKeyFilePassphrase
specifier|private
name|String
name|privateKeyFilePassphrase
decl_stmt|;
DECL|method|RemoteFileConfiguration ()
specifier|public
name|RemoteFileConfiguration
parameter_list|()
block|{     }
DECL|method|RemoteFileConfiguration (URI uri)
specifier|public
name|RemoteFileConfiguration
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|configure
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|RemoteFileConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|RemoteFileConfiguration
operator|)
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|remoteServerInformation
argument_list|()
operator|+
literal|"/"
operator|+
name|file
return|;
block|}
comment|/**      * Returns human readable server information for logging purpose      */
DECL|method|remoteServerInformation ()
specifier|public
name|String
name|remoteServerInformation
parameter_list|()
block|{
return|return
name|protocol
operator|+
literal|"://"
operator|+
operator|(
name|username
operator|!=
literal|null
condition|?
name|username
else|:
literal|"anonymous"
operator|)
operator|+
literal|"@"
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
return|;
block|}
DECL|method|configure (URI uri)
specifier|public
name|void
name|configure
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|setProtocol
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultPort
argument_list|()
expr_stmt|;
name|setUsername
argument_list|(
name|uri
operator|.
name|getUserInfo
argument_list|()
argument_list|)
expr_stmt|;
name|setHost
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|setPort
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|setFile
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setDefaultPort ()
specifier|protected
name|void
name|setDefaultPort
parameter_list|()
block|{
if|if
condition|(
literal|"ftp"
operator|.
name|equalsIgnoreCase
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
name|setPort
argument_list|(
literal|21
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sftp"
operator|.
name|equalsIgnoreCase
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
name|setPort
argument_list|(
literal|22
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFile ()
specifier|public
name|String
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
DECL|method|setFile (String file)
specifier|public
name|void
name|setFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
comment|// Avoid accidentally putting everything in root on
comment|// servers that expose the full filesystem
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|file
operator|=
name|file
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
DECL|method|getKnownHosts ()
specifier|public
name|String
name|getKnownHosts
parameter_list|()
block|{
return|return
name|knownHosts
return|;
block|}
DECL|method|setKnownHosts (String knownHosts)
specifier|public
name|void
name|setKnownHosts
parameter_list|(
name|String
name|knownHosts
parameter_list|)
block|{
name|this
operator|.
name|knownHosts
operator|=
name|knownHosts
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
if|if
condition|(
name|port
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// use default
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
DECL|method|setProtocol (String protocol)
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|isBinary ()
specifier|public
name|boolean
name|isBinary
parameter_list|()
block|{
return|return
name|binary
return|;
block|}
DECL|method|setBinary (boolean binary)
specifier|public
name|void
name|setBinary
parameter_list|(
name|boolean
name|binary
parameter_list|)
block|{
name|this
operator|.
name|binary
operator|=
name|binary
expr_stmt|;
block|}
DECL|method|isDirectory ()
specifier|public
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
DECL|method|setDirectory (boolean directory)
specifier|public
name|void
name|setDirectory
parameter_list|(
name|boolean
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
DECL|method|getFtpClientConfig ()
specifier|public
name|FTPClientConfig
name|getFtpClientConfig
parameter_list|()
block|{
return|return
name|ftpClientConfig
return|;
block|}
DECL|method|setFtpClientConfig (FTPClientConfig ftpClientConfig)
specifier|public
name|void
name|setFtpClientConfig
parameter_list|(
name|FTPClientConfig
name|ftpClientConfig
parameter_list|)
block|{
name|this
operator|.
name|ftpClientConfig
operator|=
name|ftpClientConfig
expr_stmt|;
block|}
DECL|method|getExpression ()
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
DECL|method|setExpression (Expression expression)
specifier|public
name|void
name|setExpression
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
comment|/**      * Sets the expression based on {@link org.apache.camel.language.simple.FileLanguage}      */
DECL|method|setExpression (String fileLanguageExpression)
specifier|public
name|void
name|setExpression
parameter_list|(
name|String
name|fileLanguageExpression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|FileLanguage
operator|.
name|file
argument_list|(
name|fileLanguageExpression
argument_list|)
expr_stmt|;
block|}
DECL|method|isPassiveMode ()
specifier|public
name|boolean
name|isPassiveMode
parameter_list|()
block|{
return|return
name|passiveMode
return|;
block|}
comment|/**      * Sets passive mode connections.      *<br/>      * Default is active mode connections.      */
DECL|method|setPassiveMode (boolean passiveMode)
specifier|public
name|void
name|setPassiveMode
parameter_list|(
name|boolean
name|passiveMode
parameter_list|)
block|{
name|this
operator|.
name|passiveMode
operator|=
name|passiveMode
expr_stmt|;
block|}
DECL|method|getTempPrefix ()
specifier|public
name|String
name|getTempPrefix
parameter_list|()
block|{
return|return
name|tempPrefix
return|;
block|}
comment|/**      * Enables and uses temporary prefix when writing files, after write it will be renamed to the correct name.      */
DECL|method|setTempPrefix (String tempPrefix)
specifier|public
name|void
name|setTempPrefix
parameter_list|(
name|String
name|tempPrefix
parameter_list|)
block|{
name|this
operator|.
name|tempPrefix
operator|=
name|tempPrefix
expr_stmt|;
block|}
DECL|method|getPrivateKeyFile ()
specifier|public
name|String
name|getPrivateKeyFile
parameter_list|()
block|{
return|return
name|privateKeyFile
return|;
block|}
DECL|method|setPrivateKeyFile (String privateKeyFile)
specifier|public
name|void
name|setPrivateKeyFile
parameter_list|(
name|String
name|privateKeyFile
parameter_list|)
block|{
name|this
operator|.
name|privateKeyFile
operator|=
name|privateKeyFile
expr_stmt|;
block|}
DECL|method|getPrivateKeyFilePassphrase ()
specifier|public
name|String
name|getPrivateKeyFilePassphrase
parameter_list|()
block|{
return|return
name|privateKeyFilePassphrase
return|;
block|}
DECL|method|setPrivateKeyFilePassphrase (String privateKeyFilePassphrase)
specifier|public
name|void
name|setPrivateKeyFilePassphrase
parameter_list|(
name|String
name|privateKeyFilePassphrase
parameter_list|)
block|{
name|this
operator|.
name|privateKeyFilePassphrase
operator|=
name|privateKeyFilePassphrase
expr_stmt|;
block|}
block|}
end_class

end_unit

