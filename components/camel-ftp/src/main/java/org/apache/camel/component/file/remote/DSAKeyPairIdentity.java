begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SignatureException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|DSAParams
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|DSAPublicKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|Identity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DSAKeyPairIdentity
specifier|public
class|class
name|DSAKeyPairIdentity
implements|implements
name|Identity
block|{
DECL|field|ALGORITHM_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|ALGORITHM_TYPE
init|=
literal|"ssh-dss"
decl_stmt|;
DECL|field|log
specifier|private
specifier|final
specifier|transient
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|keyPair
specifier|private
name|KeyPair
name|keyPair
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|DSAKeyPairIdentity (String name, KeyPair keyPair)
specifier|public
name|DSAKeyPairIdentity
parameter_list|(
name|String
name|name
parameter_list|,
name|KeyPair
name|keyPair
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|keyPair
operator|=
name|keyPair
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPassphrase (byte[] passphrase)
specifier|public
name|boolean
name|setPassphrase
parameter_list|(
name|byte
index|[]
name|passphrase
parameter_list|)
throws|throws
name|JSchException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getPublicKeyBlob ()
specifier|public
name|byte
index|[]
name|getPublicKeyBlob
parameter_list|()
block|{
name|DSAPublicKey
name|publicKey
init|=
operator|(
name|DSAPublicKey
operator|)
name|keyPair
operator|.
name|getPublic
argument_list|()
decl_stmt|;
name|byte
index|[]
name|sshDss
init|=
name|ALGORITHM_TYPE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|DSAParams
name|dsaParams
init|=
name|publicKey
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|byte
index|[]
name|pArray
init|=
name|dsaParams
operator|.
name|getP
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qArray
init|=
name|dsaParams
operator|.
name|getQ
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|gArray
init|=
name|dsaParams
operator|.
name|getG
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|yArray
init|=
name|publicKey
operator|.
name|getY
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|sshDss
operator|.
name|length
operator|+
literal|4
operator|+
name|pArray
operator|.
name|length
operator|+
literal|4
operator|+
name|qArray
operator|.
name|length
operator|+
literal|4
operator|+
name|gArray
operator|.
name|length
operator|+
literal|4
operator|+
name|yArray
operator|.
name|length
operator|+
literal|4
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|intAsByteArray
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|sshDss
operator|.
name|length
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|intAsByteArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|4
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|sshDss
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
name|sshDss
operator|.
name|length
argument_list|)
expr_stmt|;
name|index
operator|+=
name|sshDss
operator|.
name|length
expr_stmt|;
name|intAsByteArray
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|pArray
operator|.
name|length
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|intAsByteArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|4
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
name|pArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|index
operator|+=
name|pArray
operator|.
name|length
expr_stmt|;
name|intAsByteArray
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|qArray
operator|.
name|length
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|intAsByteArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|4
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|qArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
name|qArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|index
operator|+=
name|qArray
operator|.
name|length
expr_stmt|;
name|intAsByteArray
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|gArray
operator|.
name|length
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|intAsByteArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|4
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|gArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
name|gArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|index
operator|+=
name|gArray
operator|.
name|length
expr_stmt|;
name|intAsByteArray
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|yArray
operator|.
name|length
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|intAsByteArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|4
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|yArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
name|yArray
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getSignature (byte[] data)
specifier|public
name|byte
index|[]
name|getSignature
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
try|try
block|{
name|PrivateKey
name|prvKey
init|=
name|keyPair
operator|.
name|getPrivate
argument_list|()
decl_stmt|;
name|Signature
name|sig
decl_stmt|;
name|sig
operator|=
name|Signature
operator|.
name|getInstance
argument_list|(
literal|"SHA1withDSA"
argument_list|)
expr_stmt|;
name|sig
operator|.
name|initSign
argument_list|(
name|prvKey
argument_list|)
expr_stmt|;
name|sig
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sshDss
init|=
name|ALGORITHM_TYPE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|signature
init|=
name|sig
operator|.
name|sign
argument_list|()
decl_stmt|;
name|signature
operator|=
name|convertDERToP1363
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|sshDss
operator|.
name|length
operator|+
literal|4
operator|+
name|signature
operator|.
name|length
operator|+
literal|4
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|intAsByteArray
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|sshDss
operator|.
name|length
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|intAsByteArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|4
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|sshDss
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
name|sshDss
operator|.
name|length
argument_list|)
expr_stmt|;
name|index
operator|+=
name|sshDss
operator|.
name|length
expr_stmt|;
name|intAsByteArray
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|signature
operator|.
name|length
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|intAsByteArray
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|4
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|signature
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|index
argument_list|,
name|signature
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot sign"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot sign"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SignatureException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot sign"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * "The signature on m is (r, s). Message m and (r, s) should be sent to the      * verifier. We need to observe that both r and s are 20 bytes, since a      * modular reduction is being performed (steps 2 and 5) using q, a 160 bit      * value. This will gain significance later when we begin verifying messages      * between Crypto++ and C# (which use the IEEE P1363 signature format) and      * Java (which uses a DER encoding of a signature)." [taken from<a href=      * "http://www.codeproject.com/Articles/25590/Cryptographic-Interoperability-Digital-Signatures"      *>Cryptographic Interoperability Digital Signatures</a>]      *       * @param sig      *            signature in DER format      * @return signature in P1363 format; SEQUENCE ::= { r INTEGER, s INTEGER }      */
DECL|method|convertDERToP1363 (byte[] sig)
specifier|private
name|byte
index|[]
name|convertDERToP1363
parameter_list|(
name|byte
index|[]
name|sig
parameter_list|)
block|{
name|int
name|index
init|=
literal|3
decl_stmt|;
name|int
name|len
init|=
name|sig
index|[
name|index
operator|++
index|]
operator|&
literal|0xff
decl_stmt|;
name|byte
index|[]
name|r
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|sig
argument_list|,
name|index
argument_list|,
name|r
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|length
argument_list|)
expr_stmt|;
name|index
operator|=
name|index
operator|+
name|len
operator|+
literal|1
expr_stmt|;
name|len
operator|=
name|sig
index|[
name|index
operator|++
index|]
operator|&
literal|0xff
expr_stmt|;
name|byte
index|[]
name|s
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|sig
argument_list|,
name|index
argument_list|,
name|s
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|p1363Signature
init|=
operator|new
name|byte
index|[
literal|40
index|]
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|length
operator|>
literal|21
operator|||
operator|(
name|r
operator|.
name|length
operator|==
literal|21
operator|&&
name|r
index|[
literal|0
index|]
operator|!=
literal|0
operator|)
condition|)
block|{
comment|// Reject - signature verification failed
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|length
operator|==
literal|21
condition|)
block|{
comment|// r[0] = 0
comment|// r[1]'s high bit *should* be set
name|System
operator|.
name|arraycopy
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
name|p1363Signature
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|length
operator|==
literal|20
condition|)
block|{
comment|// r[0]'s high bit *should not* be set
name|System
operator|.
name|arraycopy
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|p1363Signature
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fewer than 20 bytes
name|len
operator|=
name|r
operator|.
name|length
expr_stmt|;
name|int
name|off
init|=
literal|20
operator|-
name|len
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|p1363Signature
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|length
operator|>
literal|21
operator|||
operator|(
name|s
operator|.
name|length
operator|==
literal|21
operator|&&
name|s
index|[
literal|0
index|]
operator|!=
literal|0
operator|)
condition|)
block|{
comment|// Reject - signature verification failed
name|p1363Signature
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|length
operator|==
literal|21
condition|)
block|{
comment|// s[0] = 0
comment|// s[1]'s high bit *should* be set
name|System
operator|.
name|arraycopy
argument_list|(
name|s
argument_list|,
literal|1
argument_list|,
name|p1363Signature
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|length
operator|==
literal|20
condition|)
block|{
comment|// s[0]'s high bit *should not* be set
name|System
operator|.
name|arraycopy
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|p1363Signature
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fewer than 20 bytes
name|len
operator|=
name|s
operator|.
name|length
expr_stmt|;
name|int
name|off
init|=
literal|40
operator|-
name|len
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|p1363Signature
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
return|return
name|p1363Signature
return|;
block|}
annotation|@
name|Override
DECL|method|decrypt ()
specifier|public
name|boolean
name|decrypt
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getAlgName ()
specifier|public
name|String
name|getAlgName
parameter_list|()
block|{
return|return
name|ALGORITHM_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|isEncrypted ()
specifier|public
name|boolean
name|isEncrypted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{     }
block|}
end_class

end_unit

