begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|RemoteFileConsumer
specifier|public
specifier|abstract
class|class
name|RemoteFileConsumer
parameter_list|<
name|T
extends|extends
name|RemoteFileExchange
parameter_list|>
extends|extends
name|ScheduledPollConsumer
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|protected
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|protected
name|RemoteFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
decl_stmt|;
DECL|field|lastPollTime
specifier|protected
name|long
name|lastPollTime
decl_stmt|;
DECL|field|recursive
specifier|protected
name|boolean
name|recursive
init|=
literal|true
decl_stmt|;
DECL|field|regexPattern
specifier|protected
name|String
name|regexPattern
decl_stmt|;
DECL|field|setNames
specifier|protected
name|boolean
name|setNames
init|=
literal|true
decl_stmt|;
DECL|field|exclusiveRead
specifier|protected
name|boolean
name|exclusiveRead
init|=
literal|true
decl_stmt|;
DECL|field|deleteFile
specifier|protected
name|boolean
name|deleteFile
decl_stmt|;
DECL|method|RemoteFileConsumer (RemoteFileEndpoint<T> endpoint, Processor processor)
specifier|public
name|RemoteFileConsumer
parameter_list|(
name|RemoteFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|RemoteFileConsumer (RemoteFileEndpoint<T> endpoint, Processor processor, ScheduledExecutorService executor)
specifier|public
name|RemoteFileConsumer
parameter_list|(
name|RemoteFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the filename.      *      * @param file the file object for the given consumer implementation.      * @return the filename as String.      */
DECL|method|getFileName (Object file)
specifier|protected
specifier|abstract
name|String
name|getFileName
parameter_list|(
name|Object
name|file
parameter_list|)
function_decl|;
comment|/**      * Is the given file matched to be consumed (will consider regexp if provided as an option).      *<p/>      * Note: Returns true if no reg exp is used.      */
DECL|method|isMatched (Object file)
specifier|protected
name|boolean
name|isMatched
parameter_list|(
name|Object
name|file
parameter_list|)
block|{
name|String
name|fileName
init|=
name|getFileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|regexPattern
operator|!=
literal|null
operator|&&
name|regexPattern
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|fileName
operator|.
name|matches
argument_list|(
name|regexPattern
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Matching file: "
operator|+
name|fileName
operator|+
literal|" is "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|remoteServer ()
specifier|protected
name|String
name|remoteServer
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|remoteServerInformation
argument_list|()
return|;
block|}
DECL|method|isRecursive ()
specifier|public
name|boolean
name|isRecursive
parameter_list|()
block|{
return|return
name|recursive
return|;
block|}
DECL|method|setRecursive (boolean recursive)
specifier|public
name|void
name|setRecursive
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
DECL|method|getLastPollTime ()
specifier|public
name|long
name|getLastPollTime
parameter_list|()
block|{
return|return
name|lastPollTime
return|;
block|}
DECL|method|setLastPollTime (long lastPollTime)
specifier|public
name|void
name|setLastPollTime
parameter_list|(
name|long
name|lastPollTime
parameter_list|)
block|{
name|this
operator|.
name|lastPollTime
operator|=
name|lastPollTime
expr_stmt|;
block|}
DECL|method|getRegexPattern ()
specifier|public
name|String
name|getRegexPattern
parameter_list|()
block|{
return|return
name|regexPattern
return|;
block|}
DECL|method|setRegexPattern (String regexPattern)
specifier|public
name|void
name|setRegexPattern
parameter_list|(
name|String
name|regexPattern
parameter_list|)
block|{
name|this
operator|.
name|regexPattern
operator|=
name|regexPattern
expr_stmt|;
block|}
DECL|method|isSetNames ()
specifier|public
name|boolean
name|isSetNames
parameter_list|()
block|{
return|return
name|setNames
return|;
block|}
DECL|method|setSetNames (boolean setNames)
specifier|public
name|void
name|setSetNames
parameter_list|(
name|boolean
name|setNames
parameter_list|)
block|{
name|this
operator|.
name|setNames
operator|=
name|setNames
expr_stmt|;
block|}
DECL|method|isExclusiveRead ()
specifier|public
name|boolean
name|isExclusiveRead
parameter_list|()
block|{
return|return
name|exclusiveRead
return|;
block|}
DECL|method|setExclusiveRead (boolean exclusiveRead)
specifier|public
name|void
name|setExclusiveRead
parameter_list|(
name|boolean
name|exclusiveRead
parameter_list|)
block|{
name|this
operator|.
name|exclusiveRead
operator|=
name|exclusiveRead
expr_stmt|;
block|}
DECL|method|isDeleteFile ()
specifier|public
name|boolean
name|isDeleteFile
parameter_list|()
block|{
return|return
name|deleteFile
return|;
block|}
DECL|method|setDeleteFile (boolean deleteFile)
specifier|public
name|void
name|setDeleteFile
parameter_list|(
name|boolean
name|deleteFile
parameter_list|)
block|{
name|this
operator|.
name|deleteFile
operator|=
name|deleteFile
expr_stmt|;
block|}
block|}
end_class

end_unit

