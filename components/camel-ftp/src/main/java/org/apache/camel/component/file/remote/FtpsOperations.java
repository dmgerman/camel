begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClientConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPSClient
import|;
end_import

begin_comment
comment|/**  * FTP Secure (FTP over SSL/TLS) operations  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|FtpsOperations
specifier|public
class|class
name|FtpsOperations
extends|extends
name|FtpOperations
block|{
DECL|method|FtpsOperations (FTPSClient client, FTPClientConfig clientConfig)
specifier|public
name|FtpsOperations
parameter_list|(
name|FTPSClient
name|client
parameter_list|,
name|FTPClientConfig
name|clientConfig
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|clientConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|connect (RemoteFileConfiguration configuration)
specifier|public
name|boolean
name|connect
parameter_list|(
name|RemoteFileConfiguration
name|configuration
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|boolean
name|answer
init|=
name|super
operator|.
name|connect
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|FtpsConfiguration
name|config
init|=
operator|(
name|FtpsConfiguration
operator|)
name|configuration
decl_stmt|;
if|if
condition|(
name|answer
operator|&&
name|config
operator|.
name|isUseSecureDataChannel
argument_list|()
condition|)
block|{
try|try
block|{
comment|// execProt must be configured
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|config
operator|.
name|getExecProt
argument_list|()
argument_list|,
literal|"execProt"
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Secure data channel being initialized with execPbsz="
operator|+
name|config
operator|.
name|getExecPbsz
argument_list|()
operator|+
literal|", execPort="
operator|+
name|config
operator|.
name|getExecProt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getFtpClient
argument_list|()
operator|.
name|execPBSZ
argument_list|(
name|config
operator|.
name|getExecPbsz
argument_list|()
argument_list|)
expr_stmt|;
name|getFtpClient
argument_list|()
operator|.
name|execPROT
argument_list|(
name|config
operator|.
name|getExecProt
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|,
name|client
operator|.
name|getReplyString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|getFtpClient ()
specifier|protected
name|FTPSClient
name|getFtpClient
parameter_list|()
block|{
return|return
operator|(
name|FTPSClient
operator|)
name|super
operator|.
name|getFtpClient
argument_list|()
return|;
block|}
block|}
end_class

end_unit

