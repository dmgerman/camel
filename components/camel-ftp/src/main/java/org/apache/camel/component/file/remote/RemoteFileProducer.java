begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServicePoolAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_comment
comment|/**  * Remote file producer. Handles connecting and disconnecting if we are not.  * Generic type F is the remote system implementation of a file.  */
end_comment

begin_class
DECL|class|RemoteFileProducer
specifier|public
class|class
name|RemoteFileProducer
parameter_list|<
name|T
parameter_list|>
extends|extends
name|GenericFileProducer
argument_list|<
name|T
argument_list|>
implements|implements
name|ServicePoolAware
block|{
DECL|field|loggedIn
specifier|private
name|boolean
name|loggedIn
decl_stmt|;
DECL|method|RemoteFileProducer (RemoteFileEndpoint<T> endpoint, RemoteFileOperations<T> operations)
specifier|protected
name|RemoteFileProducer
parameter_list|(
name|RemoteFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
parameter_list|,
name|RemoteFileOperations
argument_list|<
name|T
argument_list|>
name|operations
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|operations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileSeparator ()
specifier|protected
name|String
name|getFileSeparator
parameter_list|()
block|{
return|return
literal|"/"
return|;
block|}
annotation|@
name|Override
DECL|method|normalizePath (String name)
specifier|protected
name|String
name|normalizePath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Exchange
name|remoteExchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|processExchange
argument_list|(
operator|(
name|GenericFileExchange
argument_list|<
name|T
argument_list|>
operator|)
name|remoteExchange
argument_list|)
expr_stmt|;
name|ExchangeHelper
operator|.
name|copyResults
argument_list|(
name|exchange
argument_list|,
name|remoteExchange
argument_list|)
expr_stmt|;
block|}
comment|/**      * The file could not be written. We need to disconnect from the remote server.      */
DECL|method|handleFailedWrite (Exchange exchange, Exception exception)
specifier|protected
name|void
name|handleFailedWrite
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Exception
name|exception
parameter_list|)
throws|throws
name|Exception
block|{
name|loggedIn
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isStopping
argument_list|()
operator|||
name|isStopped
argument_list|()
condition|)
block|{
comment|// if we are stopping then ignore any exception during a poll
name|log
operator|.
name|debug
argument_list|(
literal|"Exception occured during stopping: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception occured during processing. "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|disconnect
argument_list|()
expr_stmt|;
comment|// Rethrow to signify that we didn't poll
throw|throw
name|exception
throw|;
block|}
block|}
DECL|method|disconnect ()
specifier|public
name|void
name|disconnect
parameter_list|()
throws|throws
name|IOException
block|{
name|loggedIn
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Disconnecting from: "
operator|+
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|RemoteFileOperations
operator|)
name|operations
operator|)
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preWriteCheck ()
specifier|protected
name|void
name|preWriteCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|connectIfNecessary
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|loggedIn
condition|)
block|{
comment|// must be logged in to be able to upload the file
name|String
name|message
init|=
literal|"Cannot connect/login to: "
operator|+
operator|(
operator|(
name|RemoteFileEndpoint
operator|)
name|getEndpoint
argument_list|()
operator|)
operator|.
name|remoteServerInformation
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Starting"
argument_list|)
expr_stmt|;
comment|// do not connect when component starts, just wait until we process as we will
comment|// connect at that time if needed
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception occured during disconnecting from: "
operator|+
name|getEndpoint
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|connectIfNecessary ()
specifier|protected
name|void
name|connectIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|RemoteFileOperations
operator|)
name|operations
operator|)
operator|.
name|isConnected
argument_list|()
operator|||
operator|!
name|loggedIn
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Not already connected/logged in. Connecting to: "
operator|+
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RemoteFileOperations
name|rfo
init|=
operator|(
name|RemoteFileOperations
operator|)
name|operations
decl_stmt|;
name|RemoteFileEndpoint
name|rfe
init|=
operator|(
name|RemoteFileEndpoint
operator|)
name|getEndpoint
argument_list|()
decl_stmt|;
name|RemoteFileConfiguration
name|conf
init|=
operator|(
name|RemoteFileConfiguration
operator|)
name|rfe
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|loggedIn
operator|=
name|rfo
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|loggedIn
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Connected and logged in to: "
operator|+
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
comment|// this producer is stateful because the remote file operations is not thread safe
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

