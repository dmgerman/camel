begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|FileLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Remote file producer  */
end_comment

begin_class
DECL|class|RemoteFileProducer
specifier|public
class|class
name|RemoteFileProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RemoteFileProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|RemoteFileEndpoint
name|endpoint
decl_stmt|;
DECL|field|ftp
specifier|private
name|RemoteFileOperations
name|ftp
decl_stmt|;
DECL|field|loggedIn
specifier|private
name|boolean
name|loggedIn
decl_stmt|;
DECL|method|RemoteFileProducer (RemoteFileEndpoint endpoint, RemoteFileOperations ftp)
specifier|protected
name|RemoteFileProducer
parameter_list|(
name|RemoteFileEndpoint
name|endpoint
parameter_list|,
name|RemoteFileOperations
name|ftp
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|ftp
operator|=
name|ftp
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|RemoteFileExchange
name|remoteExchange
init|=
operator|(
name|RemoteFileExchange
operator|)
name|endpoint
operator|.
name|createExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|processExchange
argument_list|(
name|remoteExchange
argument_list|)
expr_stmt|;
name|ExchangeHelper
operator|.
name|copyResults
argument_list|(
name|exchange
argument_list|,
name|remoteExchange
argument_list|)
expr_stmt|;
block|}
DECL|method|processExchange (RemoteFileExchange exchange)
specifier|protected
name|void
name|processExchange
parameter_list|(
name|RemoteFileExchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|connectIfNecessary
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|loggedIn
condition|)
block|{
comment|// must be logged in to be able to upload the file
name|String
name|message
init|=
literal|"Could not connect/login to: "
operator|+
name|endpoint
operator|.
name|remoteServerInformation
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|RemoteFileOperationFailedException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|String
name|target
init|=
name|createFileName
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|// should we write to a temporary name and then afterwards rename to real target
name|boolean
name|writeAsTempAndRename
init|=
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getTempPrefix
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tempTarget
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|writeAsTempAndRename
condition|)
block|{
comment|// compute temporary name with the temp prefix
name|tempTarget
operator|=
name|createTempFileName
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
comment|// upload the file
name|writeFile
argument_list|(
name|exchange
argument_list|,
name|tempTarget
operator|!=
literal|null
condition|?
name|tempTarget
else|:
name|target
argument_list|)
expr_stmt|;
comment|// if we did write to a temporary name then rename it to the real name after we have written the file
if|if
condition|(
name|tempTarget
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Renaming file: "
operator|+
name|tempTarget
operator|+
literal|" to: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
name|boolean
name|renamed
init|=
name|ftp
operator|.
name|renameFile
argument_list|(
name|tempTarget
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|renamed
condition|)
block|{
throw|throw
operator|new
name|RemoteFileOperationFailedException
argument_list|(
literal|"Cannot rename file from: "
operator|+
name|tempTarget
operator|+
literal|" to: "
operator|+
name|target
argument_list|)
throw|;
block|}
block|}
comment|// lets store the name we really used in the header, so end-users can retrieve it
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|FileComponent
operator|.
name|HEADER_FILE_NAME_PRODUCED
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|loggedIn
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isStopping
argument_list|()
operator|||
name|isStopped
argument_list|()
condition|)
block|{
comment|// if we are stopping then ignore any exception during a poll
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception occurd during stopping. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception occurd during processing."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|disconnect
argument_list|()
expr_stmt|;
comment|// Rethrow to signify that we didn't poll
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|writeFile (Exchange exchange, String fileName)
specifier|protected
name|void
name|writeFile
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|RemoteFileOperationFailedException
throws|,
name|IOException
block|{
name|InputStream
name|payload
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// build directory
name|int
name|lastPathIndex
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastPathIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|directory
init|=
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastPathIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ftp
operator|.
name|buildDirectory
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't build directory: "
operator|+
name|directory
operator|+
literal|" (could be because of denied permissions)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// upload
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"About to send: "
operator|+
name|fileName
operator|+
literal|" to: "
operator|+
name|remoteServer
argument_list|()
operator|+
literal|" from exchange: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|ftp
operator|.
name|storeFile
argument_list|(
name|fileName
argument_list|,
name|payload
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|RemoteFileOperationFailedException
argument_list|(
literal|"Error sending file: "
operator|+
name|fileName
operator|+
literal|" to: "
operator|+
name|remoteServer
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sent: "
operator|+
name|fileName
operator|+
literal|" to: "
operator|+
name|remoteServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ObjectHelper
operator|.
name|close
argument_list|(
name|payload
argument_list|,
literal|"Closing payload"
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFileName (Exchange exchange)
specifier|protected
name|String
name|createFileName
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|answer
decl_stmt|;
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|FileComponent
operator|.
name|HEADER_FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// expression support
name|Expression
name|expression
init|=
name|endpoint
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
comment|// the header name can be an expression too, that should override whatever configured on the endpoint
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|FileComponent
operator|.
name|HEADER_FILE_NAME
operator|+
literal|" contains a FileLanguage expression: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|expression
operator|=
name|FileLanguage
operator|.
name|file
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filename evaluated as expression: "
operator|+
name|expression
argument_list|)
expr_stmt|;
block|}
name|Object
name|result
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|name
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|String
name|endpointFile
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If the path isn't empty, we need to add a trailing / if it isn't already there
name|String
name|baseDir
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|endpointFile
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|baseDir
operator|=
name|endpointFile
operator|+
operator|(
name|endpointFile
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
expr_stmt|;
block|}
name|String
name|fileName
init|=
operator|(
name|name
operator|!=
literal|null
operator|)
condition|?
name|name
else|:
name|endpoint
operator|.
name|getGeneratedFileName
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
decl_stmt|;
name|answer
operator|=
name|baseDir
operator|+
name|fileName
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|endpointFile
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createTempFileName (String fileName)
specifier|protected
name|String
name|createTempFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|int
name|path
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
operator|-
literal|1
condition|)
block|{
comment|// no path
return|return
name|endpoint
operator|.
name|getTempPrefix
argument_list|()
operator|+
name|fileName
return|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|sb
operator|.
name|insert
argument_list|(
name|path
operator|+
literal|1
argument_list|,
name|endpoint
operator|.
name|getTempPrefix
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting"
argument_list|)
expr_stmt|;
comment|// do not connect when component starts, just wait until we process as we will
comment|// connect at that time if needed
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping"
argument_list|)
expr_stmt|;
try|try
block|{
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore by logging it
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception occured during disconnecting from "
operator|+
name|remoteServer
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|connectIfNecessary ()
specifier|protected
name|void
name|connectIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|ftp
operator|.
name|isConnected
argument_list|()
operator|||
operator|!
name|loggedIn
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not connected/logged in, connecting to "
operator|+
name|remoteServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|loggedIn
operator|=
name|ftp
operator|.
name|connect
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|loggedIn
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected and logged in to "
operator|+
name|remoteServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|disconnect ()
specifier|public
name|void
name|disconnect
parameter_list|()
throws|throws
name|IOException
block|{
name|loggedIn
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disconnecting from "
operator|+
name|remoteServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ftp
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
DECL|method|remoteServer ()
specifier|protected
name|String
name|remoteServer
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|remoteServerInformation
argument_list|()
return|;
block|}
block|}
end_class

end_unit

