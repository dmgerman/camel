begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServicePoolAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Generic remote file producer for all the FTP variations.  */
end_comment

begin_class
DECL|class|RemoteFileProducer
specifier|public
class|class
name|RemoteFileProducer
parameter_list|<
name|T
parameter_list|>
extends|extends
name|GenericFileProducer
argument_list|<
name|T
argument_list|>
implements|implements
name|ServicePoolAware
block|{
DECL|field|loggedIn
specifier|private
name|boolean
name|loggedIn
decl_stmt|;
DECL|method|RemoteFileProducer (RemoteFileEndpoint<T> endpoint, RemoteFileOperations<T> operations)
specifier|protected
name|RemoteFileProducer
parameter_list|(
name|RemoteFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
parameter_list|,
name|RemoteFileOperations
argument_list|<
name|T
argument_list|>
name|operations
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|operations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileSeparator ()
specifier|protected
name|String
name|getFileSeparator
parameter_list|()
block|{
return|return
literal|"/"
return|;
block|}
annotation|@
name|Override
DECL|method|normalizePath (String name)
specifier|protected
name|String
name|normalizePath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Exchange
name|remoteExchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|processExchange
argument_list|(
name|remoteExchange
argument_list|)
expr_stmt|;
name|ExchangeHelper
operator|.
name|copyResults
argument_list|(
name|exchange
argument_list|,
name|remoteExchange
argument_list|)
expr_stmt|;
block|}
DECL|method|getOperations ()
specifier|protected
name|RemoteFileOperations
name|getOperations
parameter_list|()
block|{
return|return
operator|(
name|RemoteFileOperations
operator|)
name|operations
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getEndpoint ()
specifier|public
name|RemoteFileEndpoint
argument_list|<
name|T
argument_list|>
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|RemoteFileEndpoint
argument_list|<
name|T
argument_list|>
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
comment|/**      * The file could not be written. We need to disconnect from the remote server.      */
DECL|method|handleFailedWrite (Exchange exchange, Exception exception)
specifier|protected
name|void
name|handleFailedWrite
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Exception
name|exception
parameter_list|)
throws|throws
name|Exception
block|{
name|loggedIn
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isStopping
argument_list|()
operator|||
name|isStopped
argument_list|()
condition|)
block|{
comment|// if we are stopping then ignore any exception during a poll
name|log
operator|.
name|debug
argument_list|(
literal|"Exception occurred during stopping: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Writing file failed with: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore exception
name|log
operator|.
name|debug
argument_list|(
literal|"Ignored exception during disconnect: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// rethrow the original exception*/
throw|throw
name|exception
throw|;
block|}
block|}
DECL|method|disconnect ()
specifier|public
name|void
name|disconnect
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
name|loggedIn
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|getOperations
argument_list|()
operator|.
name|isConnected
argument_list|()
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Disconnecting from: "
operator|+
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getOperations
argument_list|()
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|preWriteCheck ()
specifier|protected
name|void
name|preWriteCheck
parameter_list|()
throws|throws
name|Exception
block|{
comment|// before writing send a noop to see if the connection is alive and works
name|boolean
name|noop
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|loggedIn
condition|)
block|{
try|try
block|{
name|noop
operator|=
name|getOperations
argument_list|()
operator|.
name|sendNoop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore as we will try to recover connection
name|noop
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"preWriteCheck send noop success: "
operator|+
name|noop
argument_list|)
expr_stmt|;
block|}
comment|// if not alive then reconnect
if|if
condition|(
operator|!
name|noop
condition|)
block|{
try|try
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getMaximumReconnectAttempts
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only use recoverable if we are allowed any re-connect attempts
name|recoverableConnectIfNecessary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connectIfNecessary
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|loggedIn
operator|=
literal|false
expr_stmt|;
comment|// must be logged in to be able to upload the file
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|postWriteCheck ()
specifier|protected
name|void
name|postWriteCheck
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|isDisconnect
argument_list|()
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"postWriteCheck disconnect from: "
operator|+
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|GenericFileOperationFailedException
name|e
parameter_list|)
block|{
comment|// ignore just log a warning
name|log
operator|.
name|warn
argument_list|(
literal|"Exception occurred during disconnecting from: "
operator|+
name|getEndpoint
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Starting"
argument_list|)
expr_stmt|;
comment|// do not connect when component starts, just wait until we process as we will
comment|// connect at that time if needed
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception occurred during disconnecting from: "
operator|+
name|getEndpoint
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|recoverableConnectIfNecessary ()
specifier|protected
name|void
name|recoverableConnectIfNecessary
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|connectIfNecessary
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|loggedIn
operator|=
literal|false
expr_stmt|;
comment|// are we interrupted
name|InterruptedException
name|ie
init|=
name|ObjectHelper
operator|.
name|getException
argument_list|(
name|InterruptedException
operator|.
name|class
argument_list|,
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|ie
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Interrupted during connect to: "
operator|+
name|getEndpoint
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ie
throw|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Could not connect to: "
operator|+
name|getEndpoint
argument_list|()
operator|+
literal|". Will try to recover."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// recover by re-creating operations which should most likely be able to recover
if|if
condition|(
operator|!
name|loggedIn
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Trying to recover connection to: "
operator|+
name|getEndpoint
argument_list|()
operator|+
literal|" with a fresh client."
argument_list|)
expr_stmt|;
block|}
name|setOperations
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|createRemoteFileOperations
argument_list|()
argument_list|)
expr_stmt|;
name|connectIfNecessary
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|connectIfNecessary ()
specifier|protected
name|void
name|connectIfNecessary
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
operator|!
name|loggedIn
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Not already connected/logged in. Connecting to: "
operator|+
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RemoteFileConfiguration
name|config
init|=
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|loggedIn
operator|=
name|getOperations
argument_list|()
operator|.
name|connect
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|loggedIn
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Connected and logged in to: "
operator|+
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
comment|// this producer is stateful because the remote file operations is not thread safe
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

