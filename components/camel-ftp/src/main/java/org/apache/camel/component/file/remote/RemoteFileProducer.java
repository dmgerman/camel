begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_class
DECL|class|RemoteFileProducer
specifier|public
specifier|abstract
class|class
name|RemoteFileProducer
parameter_list|<
name|T
extends|extends
name|RemoteFileExchange
parameter_list|>
extends|extends
name|DefaultProducer
argument_list|<
name|T
argument_list|>
block|{
DECL|method|RemoteFileProducer (RemoteFileEndpoint<T> endpoint)
specifier|protected
name|RemoteFileProducer
parameter_list|(
name|RemoteFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|createFileName (Message message, RemoteFileConfiguration fileConfig)
specifier|protected
name|String
name|createFileName
parameter_list|(
name|Message
name|message
parameter_list|,
name|RemoteFileConfiguration
name|fileConfig
parameter_list|)
block|{
name|String
name|answer
decl_stmt|;
name|String
name|endpointFileName
init|=
name|fileConfig
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|String
name|headerFileName
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|FileComponent
operator|.
name|HEADER_FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileConfig
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If the path isn't empty, we need to add a trailing / if it isn't already there
name|String
name|baseDir
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|endpointFileName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|baseDir
operator|=
name|endpointFileName
operator|+
operator|(
name|endpointFileName
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
expr_stmt|;
block|}
name|String
name|fileName
init|=
operator|(
name|headerFileName
operator|!=
literal|null
operator|)
condition|?
name|headerFileName
else|:
name|message
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
name|answer
operator|=
name|baseDir
operator|+
name|fileName
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|endpointFileName
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|connectIfNecessary ()
specifier|abstract
specifier|protected
name|void
name|connectIfNecessary
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|disconnect ()
specifier|abstract
specifier|protected
name|void
name|disconnect
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

