begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|DSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|DSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|ChannelSftp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSchException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|SftpException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|UIKeyboardInteractive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|UserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
import|;
end_import

begin_comment
comment|/**  * SFTP remote file operations  *<p/>  * The JSCH session and channel are not thread-safe so we need to synchronize access to using this operation.  */
end_comment

begin_class
DECL|class|SftpOperations
specifier|public
class|class
name|SftpOperations
implements|implements
name|RemoteFileOperations
argument_list|<
name|SftpRemoteFile
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SftpOperations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UP_DIR_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|UP_DIR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/[^/]+"
argument_list|)
decl_stmt|;
DECL|field|proxy
specifier|private
name|Proxy
name|proxy
decl_stmt|;
DECL|field|endpoint
specifier|private
name|SftpEndpoint
name|endpoint
decl_stmt|;
DECL|field|channel
specifier|private
name|ChannelSftp
name|channel
decl_stmt|;
DECL|field|session
specifier|private
name|Session
name|session
decl_stmt|;
DECL|method|SftpOperations ()
specifier|public
name|SftpOperations
parameter_list|()
block|{     }
DECL|method|SftpOperations (Proxy proxy)
specifier|public
name|SftpOperations
parameter_list|(
name|Proxy
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
block|}
comment|/**      * Extended user info which supports interactive keyboard mode, by entering the password.      */
DECL|interface|ExtendedUserInfo
specifier|public
interface|interface
name|ExtendedUserInfo
extends|extends
name|UserInfo
extends|,
name|UIKeyboardInteractive
block|{     }
DECL|method|setEndpoint (GenericFileEndpoint<SftpRemoteFile> endpoint)
specifier|public
name|void
name|setEndpoint
parameter_list|(
name|GenericFileEndpoint
argument_list|<
name|SftpRemoteFile
argument_list|>
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
operator|(
name|SftpEndpoint
operator|)
name|endpoint
expr_stmt|;
block|}
DECL|method|connect (RemoteFileConfiguration configuration)
specifier|public
specifier|synchronized
name|boolean
name|connect
parameter_list|(
name|RemoteFileConfiguration
name|configuration
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|isConnected
argument_list|()
condition|)
block|{
comment|// already connected
return|return
literal|true
return|;
block|}
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
name|int
name|attempt
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|connected
condition|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|attempt
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Reconnect attempt #{} connecting to + {}"
argument_list|,
name|attempt
argument_list|,
name|configuration
operator|.
name|remoteServerInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|channel
operator|==
literal|null
operator|||
operator|!
name|channel
operator|.
name|isConnected
argument_list|()
condition|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
operator|||
operator|!
name|session
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Session isn't connected, trying to recreate and connect."
argument_list|)
expr_stmt|;
name|session
operator|=
name|createSession
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connecting use connectTimeout: {} ..."
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|connect
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connecting ..."
argument_list|)
expr_stmt|;
name|session
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Channel isn't connected, trying to recreate and connect."
argument_list|)
expr_stmt|;
name|channel
operator|=
operator|(
name|ChannelSftp
operator|)
name|session
operator|.
name|openChannel
argument_list|(
literal|"sftp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connecting use connectTimeout: {} ..."
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|connect
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connecting ..."
argument_list|)
expr_stmt|;
name|channel
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connected to {}"
argument_list|,
name|configuration
operator|.
name|remoteServerInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// yes we could connect
name|connected
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// check if we are interrupted so we can break out
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Interrupted during connecting"
argument_list|,
operator|new
name|InterruptedException
argument_list|(
literal|"Interrupted during connecting"
argument_list|)
argument_list|)
throw|;
block|}
name|GenericFileOperationFailedException
name|failed
init|=
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot connect to "
operator|+
name|configuration
operator|.
name|remoteServerInformation
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot connect due: {}"
argument_list|,
name|failed
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|>
name|endpoint
operator|.
name|getMaximumReconnectAttempts
argument_list|()
condition|)
block|{
throw|throw
name|failed
throw|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getReconnectDelay
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|endpoint
operator|.
name|getReconnectDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// we could potentially also be interrupted during sleep
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Interrupted during sleeping"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|configureBulkRequests
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|configureBulkRequests ()
specifier|private
name|void
name|configureBulkRequests
parameter_list|()
block|{
try|try
block|{
name|tryConfigureBulkRequests
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSchException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Failed to configure number of bulk requests"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|tryConfigureBulkRequests ()
specifier|private
name|void
name|tryConfigureBulkRequests
parameter_list|()
throws|throws
name|JSchException
block|{
name|Integer
name|bulkRequests
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBulkRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|bulkRequests
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"configuring channel to use up to {} bulk request(s)"
argument_list|,
name|bulkRequests
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setBulkRequests
argument_list|(
name|bulkRequests
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSession (final RemoteFileConfiguration configuration)
specifier|protected
name|Session
name|createSession
parameter_list|(
specifier|final
name|RemoteFileConfiguration
name|configuration
parameter_list|)
throws|throws
name|JSchException
block|{
specifier|final
name|JSch
name|jsch
init|=
operator|new
name|JSch
argument_list|()
decl_stmt|;
name|JSch
operator|.
name|setLogger
argument_list|(
operator|new
name|JSchLogger
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getJschLoggingLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SftpConfiguration
name|sftpConfig
init|=
operator|(
name|SftpConfiguration
operator|)
name|configuration
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sftpConfig
operator|.
name|getCiphers
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using ciphers: {}"
argument_list|,
name|sftpConfig
operator|.
name|getCiphers
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ciphers
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|ciphers
operator|.
name|put
argument_list|(
literal|"cipher.s2c"
argument_list|,
name|sftpConfig
operator|.
name|getCiphers
argument_list|()
argument_list|)
expr_stmt|;
name|ciphers
operator|.
name|put
argument_list|(
literal|"cipher.c2s"
argument_list|,
name|sftpConfig
operator|.
name|getCiphers
argument_list|()
argument_list|)
expr_stmt|;
name|JSch
operator|.
name|setConfig
argument_list|(
name|ciphers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sftpConfig
operator|.
name|getPrivateKeyFile
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using private keyfile: {}"
argument_list|,
name|sftpConfig
operator|.
name|getPrivateKeyFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sftpConfig
operator|.
name|getPrivateKeyPassphrase
argument_list|()
argument_list|)
condition|)
block|{
name|jsch
operator|.
name|addIdentity
argument_list|(
name|sftpConfig
operator|.
name|getPrivateKeyFile
argument_list|()
argument_list|,
name|sftpConfig
operator|.
name|getPrivateKeyPassphrase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsch
operator|.
name|addIdentity
argument_list|(
name|sftpConfig
operator|.
name|getPrivateKeyFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sftpConfig
operator|.
name|getPrivateKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using private key information from byte array"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|passphrase
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sftpConfig
operator|.
name|getPrivateKeyPassphrase
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|passphrase
operator|=
name|sftpConfig
operator|.
name|getPrivateKeyPassphrase
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JSchException
argument_list|(
literal|"Cannot transform passphrase to byte[]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|jsch
operator|.
name|addIdentity
argument_list|(
literal|"ID"
argument_list|,
name|sftpConfig
operator|.
name|getPrivateKey
argument_list|()
argument_list|,
literal|null
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sftpConfig
operator|.
name|getPrivateKeyUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using private key uri : {}"
argument_list|,
name|sftpConfig
operator|.
name|getPrivateKeyUri
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|passphrase
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sftpConfig
operator|.
name|getPrivateKeyPassphrase
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|passphrase
operator|=
name|sftpConfig
operator|.
name|getPrivateKeyPassphrase
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JSchException
argument_list|(
literal|"Cannot transform passphrase to byte[]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|sftpConfig
operator|.
name|getPrivateKeyUri
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|jsch
operator|.
name|addIdentity
argument_list|(
literal|"ID"
argument_list|,
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|null
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JSchException
argument_list|(
literal|"Cannot read resource: "
operator|+
name|sftpConfig
operator|.
name|getPrivateKeyUri
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sftpConfig
operator|.
name|getKeyPair
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using private key information from key pair"
argument_list|)
expr_stmt|;
name|KeyPair
name|keyPair
init|=
name|sftpConfig
operator|.
name|getKeyPair
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
operator|!=
literal|null
operator|&&
name|keyPair
operator|.
name|getPublic
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
operator|instanceof
name|RSAPrivateKey
operator|&&
name|keyPair
operator|.
name|getPublic
argument_list|()
operator|instanceof
name|RSAPublicKey
condition|)
block|{
name|jsch
operator|.
name|addIdentity
argument_list|(
operator|new
name|RSAKeyPairIdentity
argument_list|(
literal|"ID"
argument_list|,
name|keyPair
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
operator|instanceof
name|DSAPrivateKey
operator|&&
name|keyPair
operator|.
name|getPublic
argument_list|()
operator|instanceof
name|DSAPublicKey
condition|)
block|{
name|jsch
operator|.
name|addIdentity
argument_list|(
operator|new
name|DSAKeyPairIdentity
argument_list|(
literal|"ID"
argument_list|,
name|keyPair
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Only RSA and DSA key pairs are supported"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"PrivateKey and PublicKey in the KeyPair must be filled"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sftpConfig
operator|.
name|getKnownHostsFile
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using knownhosts file: {}"
argument_list|,
name|sftpConfig
operator|.
name|getKnownHostsFile
argument_list|()
argument_list|)
expr_stmt|;
name|jsch
operator|.
name|setKnownHosts
argument_list|(
name|sftpConfig
operator|.
name|getKnownHostsFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sftpConfig
operator|.
name|getKnownHostsUri
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using known hosts uri: {}"
argument_list|,
name|sftpConfig
operator|.
name|getKnownHostsUri
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|sftpConfig
operator|.
name|getKnownHostsUri
argument_list|()
argument_list|)
decl_stmt|;
name|jsch
operator|.
name|setKnownHosts
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JSchException
argument_list|(
literal|"Cannot read resource: "
operator|+
name|sftpConfig
operator|.
name|getKnownHostsUri
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sftpConfig
operator|.
name|getKnownHosts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using known hosts information from byte array"
argument_list|)
expr_stmt|;
name|jsch
operator|.
name|setKnownHosts
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|sftpConfig
operator|.
name|getKnownHosts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|knownHostsFile
init|=
name|sftpConfig
operator|.
name|getKnownHostsFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|knownHostsFile
operator|==
literal|null
operator|&&
name|sftpConfig
operator|.
name|isUseUserKnownHostsFile
argument_list|()
condition|)
block|{
name|knownHostsFile
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/.ssh/known_hosts"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Known host file not configured, using user known host file: {}"
argument_list|,
name|knownHostsFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|knownHostsFile
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using known hosts information from file: {}"
argument_list|,
name|knownHostsFile
argument_list|)
expr_stmt|;
name|jsch
operator|.
name|setKnownHosts
argument_list|(
name|knownHostsFile
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Session
name|session
init|=
name|jsch
operator|.
name|getSession
argument_list|(
name|configuration
operator|.
name|getUsername
argument_list|()
argument_list|,
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sftpConfig
operator|.
name|getStrictHostKeyChecking
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using StrickHostKeyChecking: {}"
argument_list|,
name|sftpConfig
operator|.
name|getStrictHostKeyChecking
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setConfig
argument_list|(
literal|"StrictHostKeyChecking"
argument_list|,
name|sftpConfig
operator|.
name|getStrictHostKeyChecking
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|setServerAliveInterval
argument_list|(
name|sftpConfig
operator|.
name|getServerAliveInterval
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setServerAliveCountMax
argument_list|(
name|sftpConfig
operator|.
name|getServerAliveCountMax
argument_list|()
argument_list|)
expr_stmt|;
comment|// compression
if|if
condition|(
name|sftpConfig
operator|.
name|getCompression
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using compression: {}"
argument_list|,
name|sftpConfig
operator|.
name|getCompression
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setConfig
argument_list|(
literal|"compression.s2c"
argument_list|,
literal|"zlib@openssh.com,zlib,none"
argument_list|)
expr_stmt|;
name|session
operator|.
name|setConfig
argument_list|(
literal|"compression.c2s"
argument_list|,
literal|"zlib@openssh.com,zlib,none"
argument_list|)
expr_stmt|;
name|session
operator|.
name|setConfig
argument_list|(
literal|"compression_level"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sftpConfig
operator|.
name|getCompression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set the PreferredAuthentications
if|if
condition|(
name|sftpConfig
operator|.
name|getPreferredAuthentications
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using PreferredAuthentications: {}"
argument_list|,
name|sftpConfig
operator|.
name|getPreferredAuthentications
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setConfig
argument_list|(
literal|"PreferredAuthentications"
argument_list|,
name|sftpConfig
operator|.
name|getPreferredAuthentications
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set user information
name|session
operator|.
name|setUserInfo
argument_list|(
operator|new
name|ExtendedUserInfo
argument_list|()
block|{
specifier|public
name|String
name|getPassphrase
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getPassword
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|promptPassword
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|promptPassphrase
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|promptYesNo
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Server asks for confirmation (yes|no): {}. Camel will answer no."
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// Return 'false' indicating modification of the hosts file is disabled.
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|showMessage
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Message received from Server: {}"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|promptKeyboardInteractive
parameter_list|(
name|String
name|destination
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|instruction
parameter_list|,
name|String
index|[]
name|prompt
parameter_list|,
name|boolean
index|[]
name|echo
parameter_list|)
block|{
comment|// must return an empty array if password is null
if|if
condition|(
name|configuration
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
name|configuration
operator|.
name|getPassword
argument_list|()
block|}
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// set the SO_TIMEOUT for the time after the connect phase
if|if
condition|(
name|configuration
operator|.
name|getSoTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|session
operator|.
name|setTimeout
argument_list|(
name|configuration
operator|.
name|getSoTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set proxy if configured
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sftpConfig
operator|.
name|getBindAddress
argument_list|()
argument_list|)
condition|)
block|{
name|session
operator|.
name|setSocketFactory
argument_list|(
operator|new
name|SocketFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|socket
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|socket
operator|.
name|getInputStream
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
return|return
name|createSocketUtil
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|sftpConfig
operator|.
name|getBindAddress
argument_list|()
argument_list|,
name|session
operator|.
name|getTimeout
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|session
return|;
block|}
DECL|class|JSchLogger
specifier|private
specifier|static
specifier|final
class|class
name|JSchLogger
implements|implements
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|Logger
block|{
DECL|field|loggingLevel
specifier|private
specifier|final
name|LoggingLevel
name|loggingLevel
decl_stmt|;
DECL|method|JSchLogger (LoggingLevel loggingLevel)
specifier|private
name|JSchLogger
parameter_list|(
name|LoggingLevel
name|loggingLevel
parameter_list|)
block|{
name|this
operator|.
name|loggingLevel
operator|=
name|loggingLevel
expr_stmt|;
block|}
DECL|method|isEnabled (int level)
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|int
name|level
parameter_list|)
block|{
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|FATAL
case|:
comment|// use ERROR as FATAL
return|return
name|loggingLevel
operator|.
name|isEnabled
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|)
operator|&&
name|LOG
operator|.
name|isErrorEnabled
argument_list|()
return|;
case|case
name|ERROR
case|:
return|return
name|loggingLevel
operator|.
name|isEnabled
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|)
operator|&&
name|LOG
operator|.
name|isErrorEnabled
argument_list|()
return|;
case|case
name|WARN
case|:
return|return
name|loggingLevel
operator|.
name|isEnabled
argument_list|(
name|LoggingLevel
operator|.
name|WARN
argument_list|)
operator|&&
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
return|;
case|case
name|INFO
case|:
return|return
name|loggingLevel
operator|.
name|isEnabled
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|)
operator|&&
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
return|;
default|default:
return|return
name|loggingLevel
operator|.
name|isEnabled
argument_list|(
name|LoggingLevel
operator|.
name|DEBUG
argument_list|)
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
return|;
block|}
block|}
DECL|method|log (int level, String message)
specifier|public
name|void
name|log
parameter_list|(
name|int
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|FATAL
case|:
comment|// use ERROR as FATAL
name|LOG
operator|.
name|error
argument_list|(
literal|"JSCH -> {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
name|LOG
operator|.
name|error
argument_list|(
literal|"JSCH -> {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|WARN
case|:
name|LOG
operator|.
name|warn
argument_list|(
literal|"JSCH -> {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"JSCH -> {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"JSCH -> {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|isConnected ()
specifier|public
specifier|synchronized
name|boolean
name|isConnected
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|isConnected
argument_list|()
operator|&&
name|channel
operator|!=
literal|null
operator|&&
name|channel
operator|.
name|isConnected
argument_list|()
return|;
block|}
DECL|method|disconnect ()
specifier|public
specifier|synchronized
name|void
name|disconnect
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|session
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|channel
operator|!=
literal|null
operator|&&
name|channel
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|channel
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|forceDisconnect ()
specifier|public
specifier|synchronized
name|void
name|forceDisconnect
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
try|try
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// ensure these
name|session
operator|=
literal|null
expr_stmt|;
name|channel
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|reconnectIfNecessary ()
specifier|private
name|void
name|reconnectIfNecessary
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isConnected
argument_list|()
condition|)
block|{
name|connect
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteFile (String name)
specifier|public
specifier|synchronized
name|boolean
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting file: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|reconnectIfNecessary
argument_list|()
expr_stmt|;
name|channel
operator|.
name|rm
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot delete file: {}"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot delete file: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|renameFile (String from, String to)
specifier|public
specifier|synchronized
name|boolean
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming file: {} to: {}"
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
try|try
block|{
name|reconnectIfNecessary
argument_list|()
expr_stmt|;
comment|//make use of the '/' separator because JSch expects this
comment|// as the file separator even on Windows
name|to
operator|=
name|FileUtil
operator|.
name|compactPath
argument_list|(
name|to
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|channel
operator|.
name|rename
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot rename file from: "
operator|+
name|from
operator|+
literal|" to: "
operator|+
name|to
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot rename file from: "
operator|+
name|from
operator|+
literal|" to: "
operator|+
name|to
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|buildDirectory (String directory, boolean absolute)
specifier|public
specifier|synchronized
name|boolean
name|buildDirectory
parameter_list|(
name|String
name|directory
parameter_list|,
name|boolean
name|absolute
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// must normalize directory first
name|directory
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|normalizePath
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"buildDirectory({},{})"
argument_list|,
name|directory
argument_list|,
name|absolute
argument_list|)
expr_stmt|;
comment|// ignore absolute as all dirs are relative with FTP
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// maybe the full directory already exists
try|try
block|{
name|channel
operator|.
name|ls
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// ignore, we could not change directory so try to create it instead
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to build remote directory: {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|mkdir
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// we are here if the server side doesn't create intermediate folders
comment|// so create the folder one by one
name|success
operator|=
name|buildDirectoryChunks
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot build directory: "
operator|+
name|directory
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|success
return|;
block|}
DECL|method|buildDirectoryChunks (String dirName)
specifier|private
name|boolean
name|buildDirectoryChunks
parameter_list|(
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SftpException
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|dirName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|dirs
init|=
name|dirName
operator|.
name|split
argument_list|(
literal|"/|\\\\"
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// must normalize the directory name
name|String
name|directory
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|normalizePath
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// do not try to build root folder (/ or \)
if|if
condition|(
operator|!
operator|(
name|directory
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|||
name|directory
operator|.
name|equals
argument_list|(
literal|"\\"
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Trying to build remote directory by chunk: {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
name|channel
operator|.
name|mkdir
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// ignore keep trying to create the rest of the path
block|}
block|}
block|}
return|return
name|success
return|;
block|}
DECL|method|getCurrentDirectory ()
specifier|public
specifier|synchronized
name|String
name|getCurrentDirectory
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getCurrentDirectory()"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|answer
init|=
name|channel
operator|.
name|pwd
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Current dir: {}"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot get current directory"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|changeCurrentDirectory (String path)
specifier|public
specifier|synchronized
name|void
name|changeCurrentDirectory
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"changeCurrentDirectory({})"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// must compact path so SFTP server can traverse correctly, make use of the '/'
comment|// separator because JSch expects this as the file separator even on Windows
name|String
name|before
init|=
name|path
decl_stmt|;
name|char
name|separatorChar
init|=
literal|'/'
decl_stmt|;
name|path
operator|=
name|FileUtil
operator|.
name|compactPath
argument_list|(
name|path
argument_list|,
name|separatorChar
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Compacted path: {} -> {} using separator: {}"
argument_list|,
name|before
argument_list|,
name|path
argument_list|,
name|separatorChar
argument_list|)
expr_stmt|;
block|}
comment|// not stepwise should change directory in one operation
if|if
condition|(
operator|!
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
name|doChangeDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|getCurrentDirectory
argument_list|()
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// extract the path segment relative to the target path and make sure it keeps the preceding '/' for the regex op
name|String
name|p
init|=
name|getCurrentDirectory
argument_list|()
operator|.
name|substring
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|-
operator|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// the first character must be '/' and hence removed
name|path
operator|=
name|UP_DIR_PATTERN
operator|.
name|matcher
argument_list|(
name|p
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"/.."
argument_list|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// if it starts with the root path then a little special handling for that
if|if
condition|(
name|FileUtil
operator|.
name|hasLeadingSeparator
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// change to root path
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|isWindows
argument_list|()
condition|)
block|{
name|doChangeDirectory
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doChangeDirectory
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
comment|// split into multiple dirs
specifier|final
name|String
index|[]
name|dirs
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/|\\\\"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirs
operator|==
literal|null
operator|||
name|dirs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// path was just a relative single path
name|doChangeDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// there are multiple dirs so do this in chunks
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|doChangeDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doChangeDirectory (String path)
specifier|private
name|void
name|doChangeDirectory
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
literal|"."
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Changing directory: {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|cd
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot change directory to: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|changeToParentDirectory ()
specifier|public
specifier|synchronized
name|void
name|changeToParentDirectory
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"changeToParentDirectory()"
argument_list|)
expr_stmt|;
name|String
name|current
init|=
name|getCurrentDirectory
argument_list|()
decl_stmt|;
name|String
name|parent
init|=
name|FileUtil
operator|.
name|compactPath
argument_list|(
name|current
operator|+
literal|"/.."
argument_list|)
decl_stmt|;
comment|// must start with absolute
if|if
condition|(
operator|!
name|parent
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|parent
operator|=
literal|"/"
operator|+
name|parent
expr_stmt|;
block|}
name|changeCurrentDirectory
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
DECL|method|listFiles ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|SftpRemoteFile
argument_list|>
name|listFiles
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
name|listFiles
argument_list|(
literal|"."
argument_list|)
return|;
block|}
DECL|method|listFiles (String path)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|SftpRemoteFile
argument_list|>
name|listFiles
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"listFiles({})"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// list current directory if file path is not given
name|path
operator|=
literal|"."
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|SftpRemoteFile
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Vector
name|files
init|=
name|channel
operator|.
name|ls
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// can return either null or an empty list depending on FTP servers
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|file
range|:
name|files
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|SftpRemoteFileJCraft
argument_list|(
operator|(
name|ChannelSftp
operator|.
name|LsEntry
operator|)
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot list directory: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|retrieveFile (String name, Exchange exchange, long size)
specifier|public
specifier|synchronized
name|boolean
name|retrieveFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"retrieveFile({})"
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getLocalWorkDirectory
argument_list|()
argument_list|)
condition|)
block|{
comment|// local work directory is configured so we should store file content as files in this local directory
return|return
name|retrieveFileToFileInLocalWorkDirectory
argument_list|(
name|name
argument_list|,
name|exchange
argument_list|)
return|;
block|}
else|else
block|{
comment|// store file content directory as stream on the body
return|return
name|retrieveFileToStreamInBody
argument_list|(
name|name
argument_list|,
name|exchange
argument_list|)
return|;
block|}
block|}
DECL|method|releaseRetrievedFileResources (Exchange exchange)
specifier|public
specifier|synchronized
name|void
name|releaseRetrievedFileResources
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|InputStream
name|is
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RemoteFileComponent
operator|.
name|REMOTE_FILE_INPUT_STREAM
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|retrieveFileToStreamInBody (String name, Exchange exchange)
specifier|private
name|boolean
name|retrieveFileToStreamInBody
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|String
name|currentDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|GenericFile
argument_list|<
name|ChannelSftp
operator|.
name|LsEntry
argument_list|>
name|target
init|=
operator|(
name|GenericFile
argument_list|<
name|ChannelSftp
operator|.
name|LsEntry
argument_list|>
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"Exchange should have the "
operator|+
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
operator|+
literal|" set"
argument_list|)
expr_stmt|;
name|String
name|remoteName
init|=
name|name
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
comment|// remember current directory
name|currentDir
operator|=
name|getCurrentDirectory
argument_list|()
expr_stmt|;
comment|// change directory to path where the file is to be retrieved
comment|// (must do this as some FTP servers cannot retrieve using absolute path)
name|String
name|path
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// remote name is now only the file name as we just changed directory
name|remoteName
operator|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// use input stream which works with Apache SSHD used for testing
name|InputStream
name|is
init|=
name|channel
operator|.
name|get
argument_list|(
name|remoteName
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStreamDownload
argument_list|()
condition|)
block|{
name|target
operator|.
name|setBody
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|RemoteFileComponent
operator|.
name|REMOTE_FILE_INPUT_STREAM
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// read the entire file into memory in the byte array
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|bos
argument_list|)
expr_stmt|;
comment|// close the stream after done
name|IOHelper
operator|.
name|close
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|target
operator|.
name|setBody
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot retrieve file: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// change back to current directory if we changed directory
if|if
condition|(
name|currentDir
operator|!=
literal|null
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|retrieveFileToFileInLocalWorkDirectory (String name, Exchange exchange)
specifier|private
name|boolean
name|retrieveFileToFileInLocalWorkDirectory
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|File
name|temp
decl_stmt|;
name|File
name|local
init|=
operator|new
name|File
argument_list|(
name|endpoint
operator|.
name|getLocalWorkDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|os
decl_stmt|;
name|GenericFile
argument_list|<
name|ChannelSftp
operator|.
name|LsEntry
argument_list|>
name|file
init|=
operator|(
name|GenericFile
argument_list|<
name|ChannelSftp
operator|.
name|LsEntry
argument_list|>
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|file
argument_list|,
literal|"Exchange should have the "
operator|+
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
operator|+
literal|" set"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// use relative filename in local work directory
name|String
name|relativeName
init|=
name|file
operator|.
name|getRelativeFilePath
argument_list|()
decl_stmt|;
name|temp
operator|=
operator|new
name|File
argument_list|(
name|local
argument_list|,
name|relativeName
operator|+
literal|".inprogress"
argument_list|)
expr_stmt|;
name|local
operator|=
operator|new
name|File
argument_list|(
name|local
argument_list|,
name|relativeName
argument_list|)
expr_stmt|;
comment|// create directory to local work file
name|local
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// delete any existing files
if|if
condition|(
name|temp
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|temp
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot delete existing local work file: "
operator|+
name|temp
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|local
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|local
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot delete existing local work file: "
operator|+
name|local
argument_list|)
throw|;
block|}
block|}
comment|// create new temp local work file
if|if
condition|(
operator|!
name|temp
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot create new local work file: "
operator|+
name|temp
argument_list|)
throw|;
block|}
comment|// store content as a file in the local work directory in the temp handle
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|temp
argument_list|)
expr_stmt|;
comment|// set header with the path to the local work file
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LOCAL_WORK_PATH
argument_list|,
name|local
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot create new local work file: "
operator|+
name|local
argument_list|)
throw|;
block|}
name|String
name|currentDir
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// store the java.io.File handle as the body
name|file
operator|.
name|setBody
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|String
name|remoteName
init|=
name|name
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
comment|// remember current directory
name|currentDir
operator|=
name|getCurrentDirectory
argument_list|()
expr_stmt|;
comment|// change directory to path where the file is to be retrieved
comment|// (must do this as some FTP servers cannot retrieve using absolute path)
name|String
name|path
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// remote name is now only the file name as we just changed directory
name|remoteName
operator|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|get
argument_list|(
name|remoteName
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Error occurred during retrieving file: {} to local directory. Deleting local work file: {}"
argument_list|,
name|name
argument_list|,
name|temp
argument_list|)
expr_stmt|;
comment|// failed to retrieve the file so we need to close streams and delete in progress file
comment|// must close stream before deleting file
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|,
literal|"retrieve: "
operator|+
name|name
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|boolean
name|deleted
init|=
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|temp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred during retrieving file: "
operator|+
name|name
operator|+
literal|" to local directory. Cannot delete local work file: "
operator|+
name|temp
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot retrieve file: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|,
literal|"retrieve: "
operator|+
name|name
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// change back to current directory if we changed directory
if|if
condition|(
name|currentDir
operator|!=
literal|null
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieve file to local work file result: true"
argument_list|)
expr_stmt|;
comment|// operation went okay so rename temp to local after we have retrieved the data
name|LOG
operator|.
name|trace
argument_list|(
literal|"Renaming local in progress file from: {} to: {}"
argument_list|,
name|temp
argument_list|,
name|local
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|renameFile
argument_list|(
name|temp
argument_list|,
name|local
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot rename local work file from: "
operator|+
name|temp
operator|+
literal|" to: "
operator|+
name|local
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot rename local work file from: "
operator|+
name|temp
operator|+
literal|" to: "
operator|+
name|local
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|storeFile (String name, Exchange exchange, long size)
specifier|public
specifier|synchronized
name|boolean
name|storeFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// must normalize name first
name|name
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|normalizePath
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"storeFile({})"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
name|String
name|currentDir
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|targetName
init|=
name|name
decl_stmt|;
try|try
block|{
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStepwise
argument_list|()
condition|)
block|{
comment|// must remember current dir so we stay in that directory after the write
name|currentDir
operator|=
name|getCurrentDirectory
argument_list|()
expr_stmt|;
comment|// change to path of name
name|changeCurrentDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// the target name should be without path, as we have changed directory
name|targetName
operator|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// store the file
name|answer
operator|=
name|doStoreFile
argument_list|(
name|name
argument_list|,
name|targetName
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// change back to current directory if we changed directory
if|if
condition|(
name|currentDir
operator|!=
literal|null
condition|)
block|{
name|changeCurrentDirectory
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|doStoreFile (String name, String targetName, Exchange exchange)
specifier|private
name|boolean
name|doStoreFile
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|targetName
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"doStoreFile({})"
argument_list|,
name|targetName
argument_list|)
expr_stmt|;
comment|// if an existing file already exists what should we do?
if|if
condition|(
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Ignore
operator|||
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Fail
operator|||
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Move
condition|)
block|{
name|boolean
name|existFile
init|=
name|existsFile
argument_list|(
name|targetName
argument_list|)
decl_stmt|;
if|if
condition|(
name|existFile
operator|&&
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Ignore
condition|)
block|{
comment|// ignore but indicate that the file was written
name|LOG
operator|.
name|trace
argument_list|(
literal|"An existing file already exists: {}. Ignore and do not override it."
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|existFile
operator|&&
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Fail
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"File already exist: "
operator|+
name|name
operator|+
literal|". Cannot write new file."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|existFile
operator|&&
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Move
condition|)
block|{
comment|// move any existing file first
name|this
operator|.
name|endpoint
operator|.
name|getMoveExistingFileStrategy
argument_list|()
operator|.
name|moveExistingFile
argument_list|(
name|endpoint
argument_list|,
name|this
argument_list|,
name|targetName
argument_list|)
expr_stmt|;
block|}
block|}
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Do an explicit test for a null body and decide what to do
if|if
condition|(
name|endpoint
operator|.
name|isAllowNullBody
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Writing empty file."
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot write null body to file: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|String
name|charset
init|=
name|endpoint
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
comment|// charset configured so we must convert to the desired
comment|// charset so we can write with encoding
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using InputStream {} with charset {}."
argument_list|,
name|is
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|is
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"About to store file: {} using stream: {}"
argument_list|,
name|targetName
argument_list|,
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Append
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Client appendFile: {}"
argument_list|,
name|targetName
argument_list|)
expr_stmt|;
name|channel
operator|.
name|put
argument_list|(
name|is
argument_list|,
name|targetName
argument_list|,
name|ChannelSftp
operator|.
name|APPEND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Client storeFile: {}"
argument_list|,
name|targetName
argument_list|)
expr_stmt|;
comment|// override is default
name|channel
operator|.
name|put
argument_list|(
name|is
argument_list|,
name|targetName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|watch
operator|.
name|taken
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Took {} ({} millis) to store file: {} and FTP client returned: true"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|time
argument_list|)
block|,
name|time
block|,
name|targetName
block|}
argument_list|)
expr_stmt|;
block|}
comment|// after storing file, we may set chmod on the file
name|String
name|mode
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getChmod
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|mode
argument_list|)
condition|)
block|{
comment|// parse to int using 8bit mode
name|int
name|permissions
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|mode
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Setting chmod: {} on file: {}"
argument_list|,
name|mode
argument_list|,
name|targetName
argument_list|)
expr_stmt|;
name|channel
operator|.
name|chmod
argument_list|(
name|permissions
argument_list|,
name|targetName
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot store file: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot store file: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot store file: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|,
literal|"store: "
operator|+
name|name
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|existsFile (String name)
specifier|public
specifier|synchronized
name|boolean
name|existsFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"existsFile({})"
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|isFastExistsCheck
argument_list|()
condition|)
block|{
return|return
name|fastExistsFile
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|// check whether a file already exists
name|String
name|directory
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|==
literal|null
condition|)
block|{
comment|// assume current dir if no path could be extracted
name|directory
operator|=
literal|"."
expr_stmt|;
block|}
name|String
name|onlyName
init|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Vector
name|files
init|=
name|channel
operator|.
name|ls
argument_list|(
name|directory
argument_list|)
decl_stmt|;
comment|// can return either null or an empty list depending on FTP servers
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Object
name|file
range|:
name|files
control|)
block|{
name|ChannelSftp
operator|.
name|LsEntry
name|entry
init|=
operator|(
name|ChannelSftp
operator|.
name|LsEntry
operator|)
name|file
decl_stmt|;
name|String
name|existing
init|=
name|entry
operator|.
name|getFilename
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Existing file: {}, target file: {}"
argument_list|,
name|existing
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|existing
operator|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|existing
argument_list|)
expr_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
operator|&&
name|existing
operator|.
name|equals
argument_list|(
name|onlyName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// or an exception can be thrown with id 2 which means file does not exists
if|if
condition|(
name|ChannelSftp
operator|.
name|SSH_FX_NO_SUCH_FILE
operator|==
name|e
operator|.
name|id
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// otherwise its a more serious error so rethrow
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|fastExistsFile (String name)
specifier|protected
name|boolean
name|fastExistsFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"fastExistsFile({})"
argument_list|,
name|name
argument_list|)
expr_stmt|;
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Vector
name|files
init|=
name|channel
operator|.
name|ls
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|files
operator|.
name|size
argument_list|()
operator|>=
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// or an exception can be thrown with id 2 which means file does not exists
if|if
condition|(
name|ChannelSftp
operator|.
name|SSH_FX_NO_SUCH_FILE
operator|==
name|e
operator|.
name|id
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// otherwise its a more serious error so rethrow
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|sendNoop ()
specifier|public
specifier|synchronized
name|boolean
name|sendNoop
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
if|if
condition|(
name|isConnected
argument_list|()
condition|)
block|{
try|try
block|{
name|session
operator|.
name|sendKeepAliveMsg
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SFTP session was closed. Ignoring this exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|sendSiteCommand (String command)
specifier|public
specifier|synchronized
name|boolean
name|sendSiteCommand
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// is not implemented
return|return
literal|true
return|;
block|}
comment|/*      * adapted from com.jcraft.jsch.Util.createSocket(String, int, int)      *      * added possibility to specify the address of the local network interface, against the      * connection should bind      */
DECL|method|createSocketUtil (final String host, final int port, final String bindAddress, final int timeout)
specifier|static
name|Socket
name|createSocketUtil
parameter_list|(
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|String
name|bindAddress
parameter_list|,
specifier|final
name|int
name|timeout
parameter_list|)
block|{
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|socket
operator|=
operator|new
name|Socket
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
argument_list|,
name|port
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|bindAddress
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|Throwable
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|message
argument_list|,
operator|(
name|Throwable
operator|)
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Socket
index|[]
name|sockp
init|=
operator|new
name|Socket
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|Exception
index|[]
name|ee
init|=
operator|new
name|Exception
index|[
literal|1
index|]
decl_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
name|Thread
name|tmp
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sockp
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|sockp
index|[
literal|0
index|]
operator|=
operator|new
name|Socket
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
argument_list|,
name|port
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|bindAddress
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ee
index|[
literal|0
index|]
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|sockp
index|[
literal|0
index|]
operator|!=
literal|null
operator|&&
name|sockp
index|[
literal|0
index|]
operator|.
name|isConnected
argument_list|()
condition|)
block|{
try|try
block|{
name|sockp
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|eee
parameter_list|)
block|{ }
block|}
name|sockp
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|setName
argument_list|(
literal|"Opening Socket "
operator|+
name|host
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|tmp
operator|.
name|join
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"timeout: "
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|InterruptedException
name|eee
parameter_list|)
block|{         }
if|if
condition|(
name|sockp
index|[
literal|0
index|]
operator|!=
literal|null
operator|&&
name|sockp
index|[
literal|0
index|]
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|socket
operator|=
name|sockp
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|message
operator|+=
literal|"socket is not established"
expr_stmt|;
if|if
condition|(
name|ee
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|message
operator|=
name|ee
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|tmp
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|tmp
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|message
argument_list|,
name|ee
index|[
literal|0
index|]
argument_list|)
throw|;
block|}
return|return
name|socket
return|;
block|}
block|}
end_class

end_unit

