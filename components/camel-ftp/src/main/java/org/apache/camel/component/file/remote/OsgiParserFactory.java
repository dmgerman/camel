begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClientConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPFileEntryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|CompositeFileEntryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|DefaultFTPFileEntryParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|MVSFTPEntryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|MacOsPeterFTPEntryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|NTFTPEntryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|NetwareFTPEntryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|OS2FTPEntryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|OS400FTPEntryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|ParserInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|UnixFTPEntryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|parser
operator|.
name|VMSVersioningFTPEntryParser
import|;
end_import

begin_comment
comment|/**  * OsgiParserFactory  *   * commons-net DefaultFTPFileEntryParserFactory uses Class.forName, and fails  * to load custom ParserFactories in OSGI. This class is an alternative ParserFactory  * that can be used when Camel is used in an OSGI environment.  */
end_comment

begin_class
DECL|class|OsgiParserFactory
specifier|public
class|class
name|OsgiParserFactory
extends|extends
name|DefaultFTPFileEntryParserFactory
block|{
comment|// Match a plain Java Identifier
DECL|field|JAVA_IDENTIFIER
specifier|private
specifier|static
specifier|final
name|String
name|JAVA_IDENTIFIER
init|=
literal|"\\p{javaJavaIdentifierStart}(\\p{javaJavaIdentifierPart})*"
decl_stmt|;
comment|// Match a qualified name, e.g. a.b.c.Name - but don't allow the default package as that would allow "VMS"/"UNIX" etc.
DECL|field|JAVA_QUALIFIED_NAME
specifier|private
specifier|static
specifier|final
name|String
name|JAVA_QUALIFIED_NAME
init|=
literal|"("
operator|+
name|JAVA_IDENTIFIER
operator|+
literal|"\\.)+"
operator|+
name|JAVA_IDENTIFIER
decl_stmt|;
comment|// Create the pattern, as it will be reused many times
DECL|field|JAVA_QUALIFIED_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|JAVA_QUALIFIED_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|JAVA_QUALIFIED_NAME
argument_list|)
decl_stmt|;
DECL|field|ocr
specifier|private
name|ClassResolver
name|ocr
decl_stmt|;
DECL|method|OsgiParserFactory (ClassResolver ocr)
specifier|public
name|OsgiParserFactory
parameter_list|(
name|ClassResolver
name|ocr
parameter_list|)
block|{
name|this
operator|.
name|ocr
operator|=
name|ocr
expr_stmt|;
block|}
comment|/**      * setClassResolver sets a class resolver which can be used instead of      * Class.forName for class resolution.      * @param ocr Class Resolver      */
DECL|method|setClassResolver (ClassResolver ocr)
specifier|public
name|void
name|setClassResolver
parameter_list|(
name|ClassResolver
name|ocr
parameter_list|)
block|{
name|this
operator|.
name|ocr
operator|=
name|ocr
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createFileEntryParser (String key)
specifier|public
name|FTPFileEntryParser
name|createFileEntryParser
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParserInitializationException
argument_list|(
literal|"Parser key cannot be null"
argument_list|)
throw|;
block|}
return|return
name|createFileEntryParser
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createFileEntryParser (FTPClientConfig config)
specifier|public
name|FTPFileEntryParser
name|createFileEntryParser
parameter_list|(
name|FTPClientConfig
name|config
parameter_list|)
throws|throws
name|ParserInitializationException
block|{
name|String
name|key
init|=
name|config
operator|.
name|getServerSystemKey
argument_list|()
decl_stmt|;
return|return
name|createFileEntryParser
argument_list|(
name|key
argument_list|,
name|config
argument_list|)
return|;
block|}
DECL|method|createFileEntryParser (String key, FTPClientConfig config)
specifier|private
name|FTPFileEntryParser
name|createFileEntryParser
parameter_list|(
name|String
name|key
parameter_list|,
name|FTPClientConfig
name|config
parameter_list|)
block|{
name|FTPFileEntryParser
name|parser
init|=
literal|null
decl_stmt|;
comment|// Is the key a possible class name?
if|if
condition|(
name|JAVA_QUALIFIED_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|key
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parserClass
init|=
name|ocr
operator|.
name|resolveClass
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|=
operator|(
name|FTPFileEntryParser
operator|)
name|parserClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParserInitializationException
argument_list|(
name|parserClass
operator|.
name|getName
argument_list|()
operator|+
literal|" does not implement the interface "
operator|+
literal|"org.apache.commons.net.ftp.FTPFileEntryParser."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
decl||
name|ExceptionInInitializerError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParserInitializationException
argument_list|(
literal|"Error initializing parser"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|String
name|ukey
init|=
name|key
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"UNIX"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|UnixFTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"LINUX"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|UnixFTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"VMS"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|VMSVersioningFTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"WINDOWS"
argument_list|)
condition|)
block|{
name|parser
operator|=
name|createNTFTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"WIN32"
argument_list|)
condition|)
block|{
name|parser
operator|=
name|createNTFTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"OS/2"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|OS2FTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"OS/400"
argument_list|)
operator|)
operator|||
operator|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"AS/400"
argument_list|)
operator|)
condition|)
block|{
name|parser
operator|=
name|createOS400FTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"MVS"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|MVSFTPEntryParser
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"NETWARE"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|NetwareFTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"MACOS PETER"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|MacOsPeterFTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ukey
operator|.
name|contains
argument_list|(
literal|"TYPE: L8"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|UnixFTPEntryParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParserInitializationException
argument_list|(
literal|"Unknown parser type: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|parser
operator|instanceof
name|Configurable
condition|)
block|{
operator|(
operator|(
name|Configurable
operator|)
name|parser
operator|)
operator|.
name|configure
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
return|return
name|parser
return|;
block|}
comment|/**      * Creates an NT FTP parser: if the config exists, and the system key equals      * {@link FTPClientConfig#SYST_NT} then a plain {@link NTFTPEntryParser} is used,      * otherwise a composite of {@link NTFTPEntryParser} and {@link UnixFTPEntryParser} is used.      * @param config the config to use, may be {@code null}      * @return the parser      */
DECL|method|createNTFTPEntryParser (FTPClientConfig config)
specifier|private
name|FTPFileEntryParser
name|createNTFTPEntryParser
parameter_list|(
name|FTPClientConfig
name|config
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|FTPClientConfig
operator|.
name|SYST_NT
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getServerSystemKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|NTFTPEntryParser
argument_list|(
name|config
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|CompositeFileEntryParser
argument_list|(
operator|new
name|FTPFileEntryParser
index|[]
block|{
operator|new
name|NTFTPEntryParser
argument_list|(
name|config
argument_list|)
block|,
operator|new
name|UnixFTPEntryParser
argument_list|(
name|config
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
comment|/**      * Creates an OS400 FTP parser: if the config exists, and the system key equals      * {@link FTPClientConfig#SYST_OS400} then a plain {@link OS400FTPEntryParser} is used,      * otherwise a composite of {@link OS400FTPEntryParser} and {@link UnixFTPEntryParser} is used.      * @param config the config to use, may be {@code null}      * @return the parser      */
DECL|method|createOS400FTPEntryParser (FTPClientConfig config)
specifier|private
name|FTPFileEntryParser
name|createOS400FTPEntryParser
parameter_list|(
name|FTPClientConfig
name|config
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|FTPClientConfig
operator|.
name|SYST_OS400
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getServerSystemKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|OS400FTPEntryParser
argument_list|(
name|config
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|CompositeFileEntryParser
argument_list|(
operator|new
name|FTPFileEntryParser
index|[]
block|{
operator|new
name|OS400FTPEntryParser
argument_list|(
name|config
argument_list|)
block|,
operator|new
name|UnixFTPEntryParser
argument_list|(
name|config
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

