begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|ChannelSftp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|SftpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Utility methods for SFTP.  */
end_comment

begin_class
DECL|class|SftpUtils
specifier|public
specifier|final
class|class
name|SftpUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SftpUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SftpUtils ()
specifier|private
name|SftpUtils
parameter_list|()
block|{     }
DECL|method|buildDirectory (ChannelSftp sftpClient, String dirName)
specifier|public
specifier|static
name|boolean
name|buildDirectory
parameter_list|(
name|ChannelSftp
name|sftpClient
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SftpException
block|{
name|String
name|originalDirectory
init|=
name|sftpClient
operator|.
name|pwd
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// maybe the full directory already exsits
try|try
block|{
name|sftpClient
operator|.
name|cd
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// ignore, we could not change directory so try to create it instead
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to build remote directory: "
operator|+
name|dirName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sftpClient
operator|.
name|mkdir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// we are here if the server side doesn't create intermediate folders
comment|// so create the folder one by one
name|success
operator|=
name|buildDirectoryChunks
argument_list|(
name|sftpClient
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
comment|// change back to original directory
name|sftpClient
operator|.
name|cd
argument_list|(
name|originalDirectory
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
DECL|method|buildDirectoryChunks (ChannelSftp sftpClient, String dirName)
specifier|public
specifier|static
name|boolean
name|buildDirectoryChunks
parameter_list|(
name|ChannelSftp
name|sftpClient
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SftpException
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|dirName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|dirs
init|=
name|dirName
operator|.
name|split
argument_list|(
literal|"\\/"
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|dir
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|directory
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Trying to build remote directory: "
operator|+
name|directory
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sftpClient
operator|.
name|mkdir
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
comment|// ignore keep trying to create the rest of the path
block|}
block|}
return|return
name|success
return|;
block|}
block|}
end_class

end_unit

