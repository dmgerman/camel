begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToCreateConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToCreateProducerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
operator|.
name|RemoteFileConfiguration
operator|.
name|PathSeparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClientConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPFile
import|;
end_import

begin_comment
comment|/**  * FTP endpoint  */
end_comment

begin_class
DECL|class|FtpEndpoint
specifier|public
class|class
name|FtpEndpoint
parameter_list|<
name|T
extends|extends
name|FTPFile
parameter_list|>
extends|extends
name|RemoteFileEndpoint
argument_list|<
name|FTPFile
argument_list|>
block|{
DECL|field|ftpClient
specifier|protected
name|FTPClient
name|ftpClient
decl_stmt|;
DECL|field|ftpClientConfig
specifier|protected
name|FTPClientConfig
name|ftpClientConfig
decl_stmt|;
DECL|field|ftpClientParameters
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ftpClientParameters
decl_stmt|;
DECL|field|ftpClientConfigParameters
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ftpClientConfigParameters
decl_stmt|;
DECL|field|soTimeout
specifier|protected
name|int
name|soTimeout
decl_stmt|;
DECL|field|dataTimeout
specifier|protected
name|int
name|dataTimeout
decl_stmt|;
DECL|method|FtpEndpoint ()
specifier|public
name|FtpEndpoint
parameter_list|()
block|{     }
DECL|method|FtpEndpoint (String uri, RemoteFileComponent<FTPFile> component, RemoteFileConfiguration configuration)
specifier|public
name|FtpEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|RemoteFileComponent
argument_list|<
name|FTPFile
argument_list|>
name|component
parameter_list|,
name|RemoteFileConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"ftp"
return|;
block|}
annotation|@
name|Override
DECL|method|buildConsumer (Processor processor)
specifier|protected
name|RemoteFileConsumer
argument_list|<
name|FTPFile
argument_list|>
name|buildConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|FtpConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|createRemoteFileOperations
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToCreateConsumerException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|buildProducer ()
specifier|protected
name|GenericFileProducer
argument_list|<
name|FTPFile
argument_list|>
name|buildProducer
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|RemoteFileProducer
argument_list|<
name|FTPFile
argument_list|>
argument_list|(
name|this
argument_list|,
name|createRemoteFileOperations
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToCreateProducerException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createRemoteFileOperations ()
specifier|public
name|RemoteFileOperations
argument_list|<
name|FTPFile
argument_list|>
name|createRemoteFileOperations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// configure ftp client
name|FTPClient
name|client
init|=
name|ftpClient
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
comment|// must use a new client if not explicit configured to use a custom client
name|client
operator|=
name|createFtpClient
argument_list|()
expr_stmt|;
block|}
comment|// set any endpoint configured timeouts
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getConnectTimeout
argument_list|()
operator|>
operator|-
literal|1
condition|)
block|{
name|client
operator|.
name|setConnectTimeout
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getSoTimeout
argument_list|()
operator|>
operator|-
literal|1
condition|)
block|{
name|soTimeout
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getSoTimeout
argument_list|()
expr_stmt|;
block|}
name|dataTimeout
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getTimeout
argument_list|()
expr_stmt|;
comment|// then lookup ftp client parameters and set those
if|if
condition|(
name|ftpClientParameters
operator|!=
literal|null
condition|)
block|{
comment|// setting soTimeout has to be done later on FTPClient (after it has connected)
name|Object
name|timeout
init|=
name|ftpClientParameters
operator|.
name|remove
argument_list|(
literal|"soTimeout"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|soTimeout
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|// and we want to keep data timeout so we can log it later
name|timeout
operator|=
name|ftpClientParameters
operator|.
name|remove
argument_list|(
literal|"dataTimeout"
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|dataTimeout
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|dataTimeout
argument_list|)
expr_stmt|;
block|}
name|setProperties
argument_list|(
name|client
argument_list|,
name|ftpClientParameters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ftpClientConfigParameters
operator|!=
literal|null
condition|)
block|{
comment|// client config is optional so create a new one if we have parameter for it
if|if
condition|(
name|ftpClientConfig
operator|==
literal|null
condition|)
block|{
name|ftpClientConfig
operator|=
operator|new
name|FTPClientConfig
argument_list|()
expr_stmt|;
block|}
name|setProperties
argument_list|(
name|ftpClientConfig
argument_list|,
name|ftpClientConfigParameters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataTimeout
operator|>
literal|0
condition|)
block|{
name|client
operator|.
name|setDataTimeout
argument_list|(
name|dataTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Created FTPClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}]: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|client
operator|.
name|getConnectTimeout
argument_list|()
block|,
name|getSoTimeout
argument_list|()
block|,
name|dataTimeout
block|,
name|client
block|}
argument_list|)
expr_stmt|;
block|}
name|FtpOperations
name|operations
init|=
operator|new
name|FtpOperations
argument_list|(
name|client
argument_list|,
name|getFtpClientConfig
argument_list|()
argument_list|)
decl_stmt|;
name|operations
operator|.
name|setEndpoint
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|operations
return|;
block|}
DECL|method|createFtpClient ()
specifier|protected
name|FTPClient
name|createFtpClient
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|FTPClient
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|FtpConfiguration
name|getConfiguration
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|configuration
operator|=
operator|new
name|FtpConfiguration
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|FtpConfiguration
operator|)
name|configuration
return|;
block|}
annotation|@
name|Override
DECL|method|setConfiguration (GenericFileConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|GenericFileConfiguration
name|configuration
parameter_list|)
block|{
name|setConfiguration
argument_list|(
operator|(
name|FtpConfiguration
operator|)
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|setConfiguration (FtpConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|FtpConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FtpConfiguration expected"
argument_list|)
throw|;
block|}
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getFtpClient ()
specifier|public
name|FTPClient
name|getFtpClient
parameter_list|()
block|{
return|return
name|ftpClient
return|;
block|}
DECL|method|setFtpClient (FTPClient ftpClient)
specifier|public
name|void
name|setFtpClient
parameter_list|(
name|FTPClient
name|ftpClient
parameter_list|)
block|{
name|this
operator|.
name|ftpClient
operator|=
name|ftpClient
expr_stmt|;
block|}
DECL|method|getFtpClientConfig ()
specifier|public
name|FTPClientConfig
name|getFtpClientConfig
parameter_list|()
block|{
return|return
name|ftpClientConfig
return|;
block|}
DECL|method|setFtpClientConfig (FTPClientConfig ftpClientConfig)
specifier|public
name|void
name|setFtpClientConfig
parameter_list|(
name|FTPClientConfig
name|ftpClientConfig
parameter_list|)
block|{
name|this
operator|.
name|ftpClientConfig
operator|=
name|ftpClientConfig
expr_stmt|;
block|}
comment|/**      * Used by FtpComponent to provide additional parameters for the FTPClient      */
DECL|method|setFtpClientParameters (Map<String, Object> ftpClientParameters)
name|void
name|setFtpClientParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ftpClientParameters
parameter_list|)
block|{
name|this
operator|.
name|ftpClientParameters
operator|=
name|ftpClientParameters
expr_stmt|;
block|}
comment|/**      * Used by FtpComponent to provide additional parameters for the FTPClientConfig      */
DECL|method|setFtpClientConfigParameters (Map<String, Object> ftpClientConfigParameters)
name|void
name|setFtpClientConfigParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ftpClientConfigParameters
parameter_list|)
block|{
name|this
operator|.
name|ftpClientConfigParameters
operator|=
name|ftpClientConfigParameters
expr_stmt|;
block|}
DECL|method|getSoTimeout ()
specifier|public
name|int
name|getSoTimeout
parameter_list|()
block|{
return|return
name|soTimeout
return|;
block|}
comment|/**      * Sets the soTimeout option.      *<p/>      * Used by FTPClient      */
DECL|method|setSoTimeout (int soTimeout)
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|soTimeout
parameter_list|)
block|{
name|this
operator|.
name|soTimeout
operator|=
name|soTimeout
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileSeparator ()
specifier|public
name|char
name|getFileSeparator
parameter_list|()
block|{
comment|// the regular ftp component should use the configured separator
comment|// as FTP servers may require you to use windows or unix style
comment|// and therefore you need to be able to control that
name|PathSeparator
name|pathSeparator
init|=
name|getConfiguration
argument_list|()
operator|.
name|getSeparator
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pathSeparator
condition|)
block|{
case|case
name|Windows
case|:
return|return
literal|'\\'
return|;
case|case
name|UNIX
case|:
return|return
literal|'/'
return|;
default|default:
return|return
name|super
operator|.
name|getFileSeparator
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

