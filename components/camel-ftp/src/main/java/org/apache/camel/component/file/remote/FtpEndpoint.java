begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClient
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|FtpEndpoint
specifier|public
class|class
name|FtpEndpoint
extends|extends
name|RemoteFileEndpoint
argument_list|<
name|RemoteFileExchange
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FtpEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FtpEndpoint (String uri, RemoteFileComponent remoteFileComponent, RemoteFileConfiguration configuration)
specifier|public
name|FtpEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|RemoteFileComponent
name|remoteFileComponent
parameter_list|,
name|RemoteFileConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|remoteFileComponent
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|FtpProducer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|FtpProducer
argument_list|(
name|this
argument_list|,
name|createFtpClient
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|FtpConsumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FtpConsumer
name|consumer
init|=
operator|new
name|FtpConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|createFtpClient
argument_list|()
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
DECL|method|createFtpClient ()
specifier|protected
name|FTPClient
name|createFtpClient
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|FTPClient
name|client
init|=
operator|new
name|FTPClient
argument_list|()
decl_stmt|;
name|RemoteFileConfiguration
name|config
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|config
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|config
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Connecting to host: "
operator|+
name|host
operator|+
literal|" port: "
operator|+
name|port
argument_list|)
expr_stmt|;
name|client
operator|.
name|connect
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|client
operator|.
name|login
argument_list|(
name|config
operator|.
name|getUsername
argument_list|()
argument_list|,
name|config
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setFileType
argument_list|(
name|config
operator|.
name|isBinary
argument_list|()
condition|?
name|FTPClient
operator|.
name|BINARY_FILE_TYPE
else|:
name|FTPClient
operator|.
name|ASCII_FILE_TYPE
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
block|}
end_class

end_unit

