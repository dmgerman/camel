begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Various FTP utils.  */
end_comment

begin_class
DECL|class|FtpUtils
specifier|public
specifier|final
class|class
name|FtpUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FtpUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FtpUtils ()
specifier|private
name|FtpUtils
parameter_list|()
block|{     }
comment|/**      * Compacts a path by stacking it and reducing<tt>..</tt>,      * and uses OS specific file separators (eg {@link java.io.File#separator}).      *<p/>      *<b>Important:</b> This implementation works for the camel-ftp component      * for various FTP clients and FTP servers using different platforms and whatnot.      * This implementation has been working for many Camel releases, and is included here      * to restore patch compatibility with the Camel releases.      */
DECL|method|compactPath (String path)
specifier|public
specifier|static
name|String
name|compactPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// only normalize if contains a path separator
if|if
condition|(
name|path
operator|.
name|indexOf
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|path
return|;
block|}
comment|// preserve ending slash if given in input path
name|boolean
name|endsWithSlash
init|=
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path
operator|.
name|endsWith
argument_list|(
literal|"\\"
argument_list|)
decl_stmt|;
comment|// preserve starting slash if given in input path
name|boolean
name|startsWithSlash
init|=
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path
operator|.
name|startsWith
argument_list|(
literal|"\\"
argument_list|)
decl_stmt|;
name|Deque
argument_list|<
name|String
argument_list|>
name|stack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|separatorRegex
init|=
name|File
operator|.
name|separator
decl_stmt|;
if|if
condition|(
name|FileUtil
operator|.
name|isWindows
argument_list|()
condition|)
block|{
name|separatorRegex
operator|=
literal|"\\\\"
expr_stmt|;
block|}
name|String
index|[]
name|parts
init|=
name|path
operator|.
name|split
argument_list|(
name|separatorRegex
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
name|part
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
operator|&&
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|".."
operator|.
name|equals
argument_list|(
name|stack
operator|.
name|peek
argument_list|()
argument_list|)
condition|)
block|{
comment|// only pop if there is a previous path, which is not a ".." path either
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|part
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// do nothing because we don't want a path like foo/./bar or foo//bar
block|}
else|else
block|{
name|stack
operator|.
name|push
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
comment|// build path based on stack
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|startsWithSlash
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|stack
operator|.
name|descendingIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endsWithSlash
operator|&&
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
block|}
comment|// there has been problems with double slashes,
comment|// so avoid this by removing any 2nd slash
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|boolean
name|firstSlash
init|=
name|sb
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
operator|||
name|sb
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\\'
decl_stmt|;
name|boolean
name|secondSlash
init|=
name|sb
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|||
name|sb
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\\'
decl_stmt|;
if|if
condition|(
name|firstSlash
operator|&&
name|secondSlash
condition|)
block|{
comment|// remove 2nd clash
name|sb
operator|=
name|sb
operator|.
name|replace
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Checks whether directory used in ftp/ftps/sftp endpoint URI is relative.      * Absolute path will be converted to relative path and a WARN will be printed.      * @see<a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>      * @param ftpComponent      * @param configuration      */
DECL|method|ensureRelativeFtpDirectory (Component ftpComponent, RemoteFileConfiguration configuration)
specifier|public
specifier|static
name|void
name|ensureRelativeFtpDirectory
parameter_list|(
name|Component
name|ftpComponent
parameter_list|,
name|RemoteFileConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|FileUtil
operator|.
name|hasLeadingSeparator
argument_list|(
name|configuration
operator|.
name|getDirectoryName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|relativePath
init|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|configuration
operator|.
name|getDirectoryName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". "
operator|+
literal|"After Camel 2.16, absolute paths will be invalid."
argument_list|,
name|ftpComponent
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|configuration
operator|.
name|getDirectoryName
argument_list|()
argument_list|,
name|relativePath
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDirectory
argument_list|(
name|relativePath
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDirectoryName
argument_list|(
name|relativePath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

