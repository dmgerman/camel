begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.service.lra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|InvocationCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|WebTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
operator|.
name|LRAConstants
operator|.
name|COORDINATOR_PATH_CANCEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
operator|.
name|LRAConstants
operator|.
name|COORDINATOR_PATH_CLOSE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
operator|.
name|LRAConstants
operator|.
name|COORDINATOR_PATH_START
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
operator|.
name|LRAConstants
operator|.
name|HEADER_LINK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
operator|.
name|LRAConstants
operator|.
name|HEADER_TIME_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
operator|.
name|LRAConstants
operator|.
name|PARTICIPANT_PATH_COMPENSATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
operator|.
name|LRAConstants
operator|.
name|PARTICIPANT_PATH_COMPLETE
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|LRAClient
specifier|public
class|class
name|LRAClient
block|{
DECL|field|sagaService
specifier|private
specifier|final
name|LRASagaService
name|sagaService
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|target
specifier|private
specifier|final
name|WebTarget
name|target
decl_stmt|;
DECL|method|LRAClient (LRASagaService sagaService)
specifier|public
name|LRAClient
parameter_list|(
name|LRASagaService
name|sagaService
parameter_list|)
block|{
name|this
operator|.
name|sagaService
operator|=
name|sagaService
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|ClientBuilder
operator|.
name|newBuilder
argument_list|()
comment|// CAMEL-12204: disabled for compatibility with JAX-RS 2.0
comment|//.executorService(sagaService.getExecutorService())
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|client
operator|.
name|target
argument_list|(
operator|new
name|LRAUrlBuilder
argument_list|()
operator|.
name|host
argument_list|(
name|sagaService
operator|.
name|getCoordinatorUrl
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
name|sagaService
operator|.
name|getCoordinatorContextPath
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|newLRA ()
specifier|public
name|CompletableFuture
argument_list|<
name|URL
argument_list|>
name|newLRA
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|Response
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|target
operator|.
name|path
argument_list|(
name|COORDINATOR_PATH_START
argument_list|)
operator|.
name|request
argument_list|()
operator|.
name|async
argument_list|()
operator|.
name|post
argument_list|(
name|Entity
operator|.
name|text
argument_list|(
literal|""
argument_list|)
argument_list|,
name|callbackToCompletableFuture
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|future
operator|.
name|thenApply
argument_list|(
name|res
lambda|->
block|{
name|URL
name|lraURL
init|=
name|toURL
argument_list|(
name|res
operator|.
name|getHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
name|Exchange
operator|.
name|SAGA_LONG_RUNNING_ACTION
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lraURL
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot obtain LRA id from LRA coordinator"
argument_list|)
throw|;
block|}
return|return
name|lraURL
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|join (URL lra, LRASagaStep step)
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|join
parameter_list|(
name|URL
name|lra
parameter_list|,
name|LRASagaStep
name|step
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
block|{
name|LRAUrlBuilder
name|participantBaseUrl
init|=
operator|new
name|LRAUrlBuilder
argument_list|()
operator|.
name|host
argument_list|(
name|sagaService
operator|.
name|getLocalParticipantUrl
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
name|sagaService
operator|.
name|getLocalParticipantContextPath
argument_list|()
argument_list|)
operator|.
name|options
argument_list|(
name|step
operator|.
name|getOptions
argument_list|()
argument_list|)
operator|.
name|compensation
argument_list|(
name|step
operator|.
name|getCompensation
argument_list|()
argument_list|)
operator|.
name|completion
argument_list|(
name|step
operator|.
name|getCompletion
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|compensationURL
init|=
name|participantBaseUrl
operator|.
name|path
argument_list|(
name|PARTICIPANT_PATH_COMPENSATE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|completionURL
init|=
name|participantBaseUrl
operator|.
name|path
argument_list|(
name|PARTICIPANT_PATH_COMPLETE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StringBuilder
name|link
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|link
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
operator|.
name|append
argument_list|(
name|compensationURL
argument_list|)
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
operator|.
name|append
argument_list|(
literal|"; rel=compensate"
argument_list|)
expr_stmt|;
name|link
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|link
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
operator|.
name|append
argument_list|(
name|completionURL
argument_list|)
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
operator|.
name|append
argument_list|(
literal|"; rel=complete"
argument_list|)
expr_stmt|;
name|WebTarget
name|joinTarget
init|=
name|client
operator|.
name|target
argument_list|(
name|lra
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|step
operator|.
name|getTimeoutInMilliseconds
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|joinTarget
operator|=
name|joinTarget
operator|.
name|queryParam
argument_list|(
name|HEADER_TIME_LIMIT
argument_list|,
name|step
operator|.
name|getTimeoutInMilliseconds
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Response
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|joinTarget
operator|.
name|request
argument_list|()
operator|.
name|header
argument_list|(
name|HEADER_LINK
argument_list|,
name|link
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|SAGA_LONG_RUNNING_ACTION
argument_list|,
name|lra
argument_list|)
operator|.
name|async
argument_list|()
operator|.
name|put
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
name|link
operator|.
name|toString
argument_list|()
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
argument_list|,
name|callbackToCompletableFuture
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
argument_list|,
name|sagaService
operator|.
name|getExecutorService
argument_list|()
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
operator|.
name|thenApply
argument_list|(
name|response
lambda|->
block|{
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
name|Response
operator|.
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot join LRA"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|complete (URL lra)
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|complete
parameter_list|(
name|URL
name|lra
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Response
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|client
operator|.
name|target
argument_list|(
name|lra
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
name|COORDINATOR_PATH_CLOSE
argument_list|)
operator|.
name|request
argument_list|()
operator|.
name|async
argument_list|()
operator|.
name|put
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
literal|""
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
argument_list|,
name|callbackToCompletableFuture
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|future
operator|.
name|thenApply
argument_list|(
name|response
lambda|->
block|{
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
name|Response
operator|.
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot complete LRA"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|compensate (URL lra)
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compensate
parameter_list|(
name|URL
name|lra
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Response
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|client
operator|.
name|target
argument_list|(
name|lra
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
name|COORDINATOR_PATH_CANCEL
argument_list|)
operator|.
name|request
argument_list|()
operator|.
name|async
argument_list|()
operator|.
name|put
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
literal|""
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
argument_list|,
name|callbackToCompletableFuture
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|future
operator|.
name|thenApply
argument_list|(
name|response
lambda|->
block|{
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
name|Response
operator|.
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot compensate LRA"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|callbackToCompletableFuture (CompletableFuture<Response> future)
specifier|private
name|InvocationCallback
argument_list|<
name|Response
argument_list|>
name|callbackToCompletableFuture
parameter_list|(
name|CompletableFuture
argument_list|<
name|Response
argument_list|>
name|future
parameter_list|)
block|{
return|return
operator|new
name|InvocationCallback
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|completed
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|toURL (Object url)
specifier|private
name|URL
name|toURL
parameter_list|(
name|Object
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|url
operator|instanceof
name|URL
condition|)
block|{
return|return
name|URL
operator|.
name|class
operator|.
name|cast
argument_list|(
name|url
argument_list|)
return|;
block|}
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

