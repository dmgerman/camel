begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.service.lra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaStep
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|LRASagaStep
specifier|public
specifier|final
class|class
name|LRASagaStep
block|{
DECL|field|compensation
specifier|private
name|Optional
argument_list|<
name|Endpoint
argument_list|>
name|compensation
decl_stmt|;
DECL|field|completion
specifier|private
name|Optional
argument_list|<
name|Endpoint
argument_list|>
name|completion
decl_stmt|;
DECL|field|options
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
decl_stmt|;
DECL|field|timeoutInMilliseconds
specifier|private
name|Optional
argument_list|<
name|Long
argument_list|>
name|timeoutInMilliseconds
decl_stmt|;
DECL|method|LRASagaStep ()
specifier|private
name|LRASagaStep
parameter_list|()
block|{     }
DECL|method|fromCamelSagaStep (CamelSagaStep step, Exchange exchange)
specifier|public
specifier|static
name|LRASagaStep
name|fromCamelSagaStep
parameter_list|(
name|CamelSagaStep
name|step
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|LRASagaStep
name|t
init|=
operator|new
name|LRASagaStep
argument_list|()
decl_stmt|;
name|t
operator|.
name|compensation
operator|=
name|step
operator|.
name|getCompensation
argument_list|()
expr_stmt|;
name|t
operator|.
name|completion
operator|=
name|step
operator|.
name|getCompletion
argument_list|()
expr_stmt|;
name|t
operator|.
name|timeoutInMilliseconds
operator|=
name|step
operator|.
name|getTimeoutInMilliseconds
argument_list|()
expr_stmt|;
name|t
operator|.
name|options
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Expression
argument_list|>
name|entry
range|:
name|step
operator|.
name|getOptions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|t
operator|.
name|options
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot evaluate saga option '"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"'"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|t
return|;
block|}
DECL|method|getCompensation ()
specifier|public
name|Optional
argument_list|<
name|Endpoint
argument_list|>
name|getCompensation
parameter_list|()
block|{
return|return
name|compensation
return|;
block|}
DECL|method|getCompletion ()
specifier|public
name|Optional
argument_list|<
name|Endpoint
argument_list|>
name|getCompletion
parameter_list|()
block|{
return|return
name|completion
return|;
block|}
DECL|method|getOptions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
DECL|method|getTimeoutInMilliseconds ()
specifier|public
name|Optional
argument_list|<
name|Long
argument_list|>
name|getTimeoutInMilliseconds
parameter_list|()
block|{
return|return
name|timeoutInMilliseconds
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LRASagaStep{"
operator|+
literal|"compensation="
operator|+
name|compensation
operator|+
literal|", completion="
operator|+
name|completion
operator|+
literal|", options="
operator|+
name|options
operator|+
literal|", timeoutInMilliseconds="
operator|+
name|timeoutInMilliseconds
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

