begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.service.lra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaStep
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_comment
comment|/**  * A Camel saga service based on LRA (https://github.com/eclipse/microprofile-sandbox/tree/master/proposals/0009-LRA).  */
end_comment

begin_class
DECL|class|LRASagaService
specifier|public
class|class
name|LRASagaService
extends|extends
name|ServiceSupport
implements|implements
name|CamelSagaService
block|{
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|executorService
specifier|private
name|ScheduledExecutorService
name|executorService
decl_stmt|;
DECL|field|client
specifier|private
name|LRAClient
name|client
decl_stmt|;
DECL|field|routes
specifier|private
name|LRASagaRoutes
name|routes
decl_stmt|;
DECL|field|coordinatorUrl
specifier|private
name|String
name|coordinatorUrl
decl_stmt|;
DECL|field|coordinatorContextPath
specifier|private
name|String
name|coordinatorContextPath
init|=
name|LRAConstants
operator|.
name|DEFAULT_COORDINATOR_CONTEXT_PATH
decl_stmt|;
DECL|field|localParticipantUrl
specifier|private
name|String
name|localParticipantUrl
decl_stmt|;
DECL|field|localParticipantContextPath
specifier|private
name|String
name|localParticipantContextPath
init|=
name|LRAConstants
operator|.
name|DEFAULT_LOCAL_PARTICIPANT_CONTEXT_PATH
decl_stmt|;
DECL|field|sagaURIs
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|sagaURIs
init|=
name|ConcurrentHashMap
operator|.
name|newKeySet
argument_list|()
decl_stmt|;
DECL|method|LRASagaService ()
specifier|public
name|LRASagaService
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|newSaga ()
specifier|public
name|CompletableFuture
argument_list|<
name|CamelSagaCoordinator
argument_list|>
name|newSaga
parameter_list|()
block|{
return|return
name|client
operator|.
name|newLRA
argument_list|()
operator|.
name|thenApply
argument_list|(
name|url
lambda|->
operator|new
name|LRASagaCoordinator
argument_list|(
name|LRASagaService
operator|.
name|this
argument_list|,
name|url
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSaga (String id)
specifier|public
name|CompletableFuture
argument_list|<
name|CamelSagaCoordinator
argument_list|>
name|getSaga
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|CamelSagaCoordinator
argument_list|>
name|coordinator
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|coordinator
operator|.
name|complete
argument_list|(
operator|new
name|LRASagaCoordinator
argument_list|(
name|this
argument_list|,
operator|new
name|URL
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|coordinator
operator|.
name|completeExceptionally
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|coordinator
return|;
block|}
annotation|@
name|Override
DECL|method|registerStep (CamelSagaStep step)
specifier|public
name|void
name|registerStep
parameter_list|(
name|CamelSagaStep
name|step
parameter_list|)
block|{
comment|// Register which uris should be exposed
name|step
operator|.
name|getCompensation
argument_list|()
operator|.
name|map
argument_list|(
name|Endpoint
operator|::
name|getEndpointUri
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|.
name|sagaURIs
operator|::
name|add
argument_list|)
expr_stmt|;
name|step
operator|.
name|getCompletion
argument_list|()
operator|.
name|map
argument_list|(
name|Endpoint
operator|::
name|getEndpointUri
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|.
name|sagaURIs
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|executorService
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|executorService
operator|=
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newDefaultScheduledThreadPool
argument_list|(
name|this
argument_list|,
literal|"saga-lra"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|client
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|client
operator|=
operator|new
name|LRAClient
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|executorService
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownGraceful
argument_list|(
name|this
operator|.
name|executorService
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|client
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|routes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|routes
operator|=
operator|new
name|LRASagaRoutes
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|camelContext
operator|.
name|addRoutes
argument_list|(
name|this
operator|.
name|routes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|camelContext
return|;
block|}
DECL|method|getExecutorService ()
specifier|public
name|ScheduledExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
DECL|method|getClient ()
specifier|public
name|LRAClient
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
DECL|method|getCoordinatorUrl ()
specifier|public
name|String
name|getCoordinatorUrl
parameter_list|()
block|{
return|return
name|coordinatorUrl
return|;
block|}
DECL|method|setCoordinatorUrl (String coordinatorUrl)
specifier|public
name|void
name|setCoordinatorUrl
parameter_list|(
name|String
name|coordinatorUrl
parameter_list|)
block|{
name|this
operator|.
name|coordinatorUrl
operator|=
name|coordinatorUrl
expr_stmt|;
block|}
DECL|method|getCoordinatorContextPath ()
specifier|public
name|String
name|getCoordinatorContextPath
parameter_list|()
block|{
return|return
name|coordinatorContextPath
return|;
block|}
DECL|method|setCoordinatorContextPath (String coordinatorContextPath)
specifier|public
name|void
name|setCoordinatorContextPath
parameter_list|(
name|String
name|coordinatorContextPath
parameter_list|)
block|{
name|this
operator|.
name|coordinatorContextPath
operator|=
name|coordinatorContextPath
expr_stmt|;
block|}
DECL|method|getLocalParticipantUrl ()
specifier|public
name|String
name|getLocalParticipantUrl
parameter_list|()
block|{
return|return
name|localParticipantUrl
return|;
block|}
DECL|method|setLocalParticipantUrl (String localParticipantUrl)
specifier|public
name|void
name|setLocalParticipantUrl
parameter_list|(
name|String
name|localParticipantUrl
parameter_list|)
block|{
name|this
operator|.
name|localParticipantUrl
operator|=
name|localParticipantUrl
expr_stmt|;
block|}
DECL|method|getLocalParticipantContextPath ()
specifier|public
name|String
name|getLocalParticipantContextPath
parameter_list|()
block|{
return|return
name|localParticipantContextPath
return|;
block|}
DECL|method|setLocalParticipantContextPath (String localParticipantContextPath)
specifier|public
name|void
name|setLocalParticipantContextPath
parameter_list|(
name|String
name|localParticipantContextPath
parameter_list|)
block|{
name|this
operator|.
name|localParticipantContextPath
operator|=
name|localParticipantContextPath
expr_stmt|;
block|}
DECL|method|getRegisteredURIs ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getRegisteredURIs
parameter_list|()
block|{
return|return
name|sagaURIs
return|;
block|}
block|}
end_class

end_unit

