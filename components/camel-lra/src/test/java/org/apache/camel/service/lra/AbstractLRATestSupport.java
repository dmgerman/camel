begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.service.lra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * Base class for LRA based tests.  */
end_comment

begin_class
DECL|class|AbstractLRATestSupport
specifier|public
specifier|abstract
class|class
name|AbstractLRATestSupport
extends|extends
name|CamelTestSupport
block|{
DECL|field|serverPort
specifier|private
name|Integer
name|serverPort
decl_stmt|;
DECL|field|activeLRAs
specifier|private
name|int
name|activeLRAs
decl_stmt|;
annotation|@
name|Before
DECL|method|getActiveLRAs ()
specifier|public
name|void
name|getActiveLRAs
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|activeLRAs
operator|=
name|getNumberOfActiveLRAs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|checkActiveLRAs ()
specifier|public
name|void
name|checkActiveLRAs
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Some LRA have been left pending"
argument_list|,
name|activeLRAs
argument_list|,
name|getNumberOfActiveLRAs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|addService
argument_list|(
name|createLRASagaService
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|restConfiguration
argument_list|()
operator|.
name|port
argument_list|(
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|createLRASagaService ()
specifier|protected
name|LRASagaService
name|createLRASagaService
parameter_list|()
block|{
name|LRASagaService
name|sagaService
init|=
operator|new
name|LRASagaService
argument_list|()
decl_stmt|;
name|sagaService
operator|.
name|setCoordinatorUrl
argument_list|(
name|getCoordinatorURL
argument_list|()
argument_list|)
expr_stmt|;
name|sagaService
operator|.
name|setLocalParticipantUrl
argument_list|(
literal|"http://localhost:"
operator|+
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sagaService
return|;
block|}
DECL|method|getNumberOfActiveLRAs ()
specifier|protected
name|int
name|getNumberOfActiveLRAs
parameter_list|()
throws|throws
name|IOException
block|{
name|Client
name|client
init|=
name|ClientBuilder
operator|.
name|newClient
argument_list|()
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|target
argument_list|(
name|getCoordinatorURL
argument_list|()
operator|+
literal|"/lra-coordinator"
argument_list|)
operator|.
name|request
argument_list|()
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|lras
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|InputStream
operator|.
name|class
operator|.
name|cast
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|lras
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getCoordinatorURL ()
specifier|private
name|String
name|getCoordinatorURL
parameter_list|()
block|{
name|String
name|url
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"LRA_COORDINATOR_URL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot run test: environment variable LRA_COORDINATOR_URL is missing"
argument_list|)
throw|;
block|}
return|return
name|url
return|;
block|}
DECL|method|getServerPort ()
specifier|protected
name|int
name|getServerPort
parameter_list|()
block|{
if|if
condition|(
name|serverPort
operator|==
literal|null
condition|)
block|{
name|serverPort
operator|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
expr_stmt|;
block|}
return|return
name|serverPort
return|;
block|}
block|}
end_class

end_unit

