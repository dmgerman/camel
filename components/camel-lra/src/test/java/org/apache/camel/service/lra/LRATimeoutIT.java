begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.service.lra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|service
operator|.
name|lra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SagaCompletionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|LRATimeoutIT
specifier|public
class|class
name|LRATimeoutIT
extends|extends
name|AbstractLRATestSupport
block|{
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"https://issues.jboss.org/browse/JBTM-2979"
argument_list|)
DECL|method|testTimeoutCalledCorrectly ()
specifier|public
name|void
name|testTimeoutCalledCorrectly
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|compensate
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:compensate"
argument_list|)
decl_stmt|;
name|compensate
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|compensate
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"id"
argument_list|,
literal|"myid"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|end
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:end"
argument_list|)
decl_stmt|;
name|end
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:saga"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|end
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|compensate
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeoutHasNoEffectIfCompleted ()
specifier|public
name|void
name|testTimeoutHasNoEffectIfCompleted
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|compensate
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:compensate"
argument_list|)
decl_stmt|;
name|compensate
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|compensate
operator|.
name|setResultWaitTime
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|MockEndpoint
name|complete
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:complete"
argument_list|)
decl_stmt|;
name|complete
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|complete
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"id"
argument_list|,
literal|"myid"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|end
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:end"
argument_list|)
decl_stmt|;
name|end
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:saga-auto"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|end
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|complete
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|compensate
operator|.
name|assertIsNotSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:saga"
argument_list|)
operator|.
name|saga
argument_list|()
operator|.
name|timeout
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|option
argument_list|(
literal|"id"
argument_list|,
name|constant
argument_list|(
literal|"myid"
argument_list|)
argument_list|)
operator|.
name|completionMode
argument_list|(
name|SagaCompletionMode
operator|.
name|MANUAL
argument_list|)
operator|.
name|compensation
argument_list|(
literal|"mock:compensate"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:saga-auto"
argument_list|)
operator|.
name|saga
argument_list|()
operator|.
name|timeout
argument_list|(
literal|350
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|option
argument_list|(
literal|"id"
argument_list|,
name|constant
argument_list|(
literal|"myid"
argument_list|)
argument_list|)
operator|.
name|compensation
argument_list|(
literal|"mock:compensate"
argument_list|)
operator|.
name|completion
argument_list|(
literal|"mock:complete"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

