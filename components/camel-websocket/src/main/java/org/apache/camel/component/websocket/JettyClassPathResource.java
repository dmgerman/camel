begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.websocket
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|websocket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * A Jetty {@link Resource} to load from the classpath using Camels {@link ClassResolver}  * which ensures loading resources works in OSGi and other containers.  */
end_comment

begin_class
DECL|class|JettyClassPathResource
specifier|public
class|class
name|JettyClassPathResource
extends|extends
name|Resource
block|{
DECL|field|resolver
specifier|private
specifier|final
name|ClassResolver
name|resolver
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|method|JettyClassPathResource (ClassResolver resolver, String path)
specifier|public
name|JettyClassPathResource
parameter_list|(
name|ClassResolver
name|resolver
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|resolver
argument_list|,
literal|"ClassResolver"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|path
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isContainedIn (Resource r)
specifier|public
name|boolean
name|isContainedIn
parameter_list|(
name|Resource
name|r
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|exists ()
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
name|InputStream
name|is
init|=
name|resolver
operator|.
name|loadResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
name|is
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isDirectory ()
specifier|public
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
name|exists
argument_list|()
operator|&&
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lastModified ()
specifier|public
name|long
name|lastModified
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getURL ()
specifier|public
name|URL
name|getURL
parameter_list|()
block|{
return|return
name|resolver
operator|.
name|loadResourceAsURL
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFile ()
specifier|public
name|File
name|getFile
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|resolver
operator|.
name|loadResourceAsStream
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete ()
specifier|public
name|boolean
name|delete
parameter_list|()
throws|throws
name|SecurityException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|renameTo (Resource dest)
specifier|public
name|boolean
name|renameTo
parameter_list|(
name|Resource
name|dest
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|list ()
specifier|public
name|String
index|[]
name|list
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|addPath (String path)
specifier|public
name|Resource
name|addPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|MalformedURLException
block|{
return|return
operator|new
name|JettyClassPathResource
argument_list|(
name|resolver
argument_list|,
name|this
operator|.
name|path
operator|+
literal|"/"
operator|+
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|getReadableByteChannel ()
specifier|public
name|ReadableByteChannel
name|getReadableByteChannel
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

