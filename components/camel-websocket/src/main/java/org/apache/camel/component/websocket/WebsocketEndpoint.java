begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.websocket
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|websocket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|WebsocketEndpoint
specifier|public
class|class
name|WebsocketEndpoint
extends|extends
name|DefaultEndpoint
block|{
comment|// Todo: Change to Options
DECL|field|sync
specifier|private
name|NodeSynchronization
name|sync
decl_stmt|;
DECL|field|remaining
specifier|private
name|String
name|remaining
decl_stmt|;
DECL|field|memoryStore
specifier|private
name|WebsocketStore
name|memoryStore
decl_stmt|;
DECL|field|globalStore
specifier|private
name|WebsocketStore
name|globalStore
decl_stmt|;
DECL|field|websocketConfiguration
specifier|private
name|WebsocketConfiguration
name|websocketConfiguration
decl_stmt|;
DECL|method|WebsocketEndpoint ()
specifier|public
name|WebsocketEndpoint
parameter_list|()
block|{      }
DECL|method|WebsocketEndpoint (String uri, WebsocketComponent component, String remaining, WebsocketConfiguration websocketConfiguration)
specifier|public
name|WebsocketEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|WebsocketComponent
name|component
parameter_list|,
name|String
name|remaining
parameter_list|,
name|WebsocketConfiguration
name|websocketConfiguration
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
name|remaining
expr_stmt|;
name|this
operator|.
name|memoryStore
operator|=
operator|new
name|MemoryWebsocketStore
argument_list|()
expr_stmt|;
comment|// TODO: init globalStore
name|this
operator|.
name|websocketConfiguration
operator|=
name|websocketConfiguration
expr_stmt|;
if|if
condition|(
name|websocketConfiguration
operator|.
name|getGlobalStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|globalStore
operator|=
operator|(
name|WebsocketStore
operator|)
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
name|this
operator|.
name|websocketConfiguration
operator|.
name|getGlobalStore
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
comment|// this.sync = new NodeSynchronizationImpl(this.memoryStore, null);
name|this
operator|.
name|sync
operator|=
operator|new
name|NodeSynchronizationImpl
argument_list|(
name|this
operator|.
name|memoryStore
argument_list|,
name|this
operator|.
name|globalStore
argument_list|)
expr_stmt|;
block|}
DECL|method|getMemoryStore ()
specifier|public
name|WebsocketStore
name|getMemoryStore
parameter_list|()
block|{
return|return
name|memoryStore
return|;
block|}
DECL|method|getGlobalStore ()
specifier|public
name|WebsocketStore
name|getGlobalStore
parameter_list|()
block|{
return|return
name|globalStore
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// init consumer
name|WebsocketConsumer
name|consumer
init|=
operator|new
name|WebsocketConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
comment|// register servlet
operator|(
operator|(
name|WebsocketComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
operator|)
operator|.
name|addServlet
argument_list|(
name|this
operator|.
name|sync
argument_list|,
name|consumer
argument_list|,
name|this
operator|.
name|remaining
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// register servlet without consumer
operator|(
operator|(
name|WebsocketComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
operator|)
operator|.
name|addServlet
argument_list|(
name|this
operator|.
name|sync
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|remaining
argument_list|)
expr_stmt|;
return|return
operator|new
name|WebsocketProducer
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|memoryStore
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|// TODO --> implement store factory
block|}
end_class

end_unit

