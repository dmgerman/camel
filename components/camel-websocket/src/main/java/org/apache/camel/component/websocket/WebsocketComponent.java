begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.websocket
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|websocket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|HashSessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|DefaultServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|WebsocketComponent
specifier|public
class|class
name|WebsocketComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WebsocketComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|ServletContextHandler
name|context
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
init|=
name|WebsocketConstants
operator|.
name|DEFAULT_HOST
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
init|=
name|WebsocketConstants
operator|.
name|DEFAULT_PORT
decl_stmt|;
DECL|field|staticResources
specifier|private
name|String
name|staticResources
decl_stmt|;
comment|/**      * Map for storing endpoints. Endpoint is identified by remaining part from endpoint URI.      * Eg.<tt>ws://foo?bar=123</tt> and<tt>ws://foo</tt> are referring to the same endpoint.      */
DECL|field|endpoints
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|WebsocketEndpoint
argument_list|>
name|endpoints
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|WebsocketEndpoint
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Map for storing servlets. {@link WebsocketComponentServlet} is identified by pathSpec {@link String}.      */
DECL|field|servlets
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
name|servlets
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|WebsocketComponent ()
specifier|public
name|WebsocketComponent
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|WebsocketEndpoint
name|endpoint
init|=
name|endpoints
operator|.
name|get
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
name|endpoint
operator|=
operator|new
name|WebsocketEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|endpoints
operator|.
name|put
argument_list|(
name|remaining
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|endpoint
return|;
block|}
DECL|method|getStaticResources ()
specifier|public
name|String
name|getStaticResources
parameter_list|()
block|{
return|return
name|staticResources
return|;
block|}
comment|/**      * Set a resource path for static resources (such as .html files etc).      *<p/>      * The resources can be loaded from classpath, if you prefix with<tt>classpath:</tt>,      * otherwise the resources is loaded from file system or from JAR files.      *<p/>      * For example to load from root classpath use<tt>classpath:.</tt>, or      *<tt>classpath:WEB-INF/static</tt>      *<p/>      * If not configured (eg<tt>null</tt>) then no static resource is in use.      *      * @param staticResources the base path      */
DECL|method|setStaticResources (String staticResources)
specifier|public
name|void
name|setStaticResources
parameter_list|(
name|String
name|staticResources
parameter_list|)
block|{
name|this
operator|.
name|staticResources
operator|=
name|staticResources
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|createServer (ServletContextHandler context, String host, int port, String home)
specifier|protected
name|Server
name|createServer
parameter_list|(
name|ServletContextHandler
name|context
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|home
parameter_list|)
block|{
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|SessionManager
name|sm
init|=
operator|new
name|HashSessionManager
argument_list|()
decl_stmt|;
name|SessionHandler
name|sh
init|=
operator|new
name|SessionHandler
argument_list|(
name|sm
argument_list|)
decl_stmt|;
name|context
operator|.
name|setSessionHandler
argument_list|(
name|sh
argument_list|)
expr_stmt|;
if|if
condition|(
name|home
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|home
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|home
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|home
argument_list|,
literal|"classpath:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using base resource from classpath: {}"
argument_list|,
name|home
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBaseResource
argument_list|(
operator|new
name|JettyClassPathResource
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|home
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using base resource: {}"
argument_list|,
name|home
argument_list|)
expr_stmt|;
name|context
operator|.
name|setResourceBase
argument_list|(
name|home
argument_list|)
expr_stmt|;
block|}
name|DefaultServlet
name|defaultServlet
init|=
operator|new
name|DefaultServlet
argument_list|()
decl_stmt|;
name|ServletHolder
name|holder
init|=
operator|new
name|ServletHolder
argument_list|(
name|defaultServlet
argument_list|)
decl_stmt|;
comment|// avoid file locking on windows
comment|// http://stackoverflow.com/questions/184312/how-to-make-jetty-dynamically-load-static-pages
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"useFileMappedBuffer"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|holder
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
DECL|method|addServlet (NodeSynchronization sync, WebsocketConsumer consumer, String remaining)
specifier|public
name|WebsocketComponentServlet
name|addServlet
parameter_list|(
name|NodeSynchronization
name|sync
parameter_list|,
name|WebsocketConsumer
name|consumer
parameter_list|,
name|String
name|remaining
parameter_list|)
block|{
name|String
name|pathSpec
init|=
name|createPathSpec
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|WebsocketComponentServlet
name|servlet
init|=
name|servlets
operator|.
name|get
argument_list|(
name|pathSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|servlet
operator|==
literal|null
condition|)
block|{
name|servlet
operator|=
name|createServlet
argument_list|(
name|sync
argument_list|,
name|pathSpec
argument_list|,
name|servlets
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|servlet
operator|.
name|getConsumer
argument_list|()
operator|==
literal|null
operator|&&
name|consumer
operator|!=
literal|null
condition|)
block|{
name|servlet
operator|.
name|setConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
return|return
name|servlet
return|;
block|}
DECL|method|createServlet (NodeSynchronization sync, String pathSpec, Map<String, WebsocketComponentServlet> servlets, ServletContextHandler handler)
name|WebsocketComponentServlet
name|createServlet
parameter_list|(
name|NodeSynchronization
name|sync
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
name|servlets
parameter_list|,
name|ServletContextHandler
name|handler
parameter_list|)
block|{
name|WebsocketComponentServlet
name|servlet
init|=
operator|new
name|WebsocketComponentServlet
argument_list|(
name|sync
argument_list|)
decl_stmt|;
name|servlets
operator|.
name|put
argument_list|(
name|pathSpec
argument_list|,
name|servlet
argument_list|)
expr_stmt|;
name|handler
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|servlet
argument_list|)
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
return|return
name|servlet
return|;
block|}
DECL|method|createContext ()
name|ServletContextHandler
name|createContext
parameter_list|()
block|{
return|return
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
return|;
block|}
DECL|method|createPathSpec (String remaining)
specifier|private
specifier|static
name|String
name|createPathSpec
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"/%s/*"
argument_list|,
name|remaining
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting server {}:{}; static resources: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|host
block|,
name|port
block|,
name|staticResources
block|}
argument_list|)
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|()
expr_stmt|;
name|server
operator|=
name|createServer
argument_list|(
name|context
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|staticResources
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|public
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping server {}:{}"
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
name|endpoints
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

