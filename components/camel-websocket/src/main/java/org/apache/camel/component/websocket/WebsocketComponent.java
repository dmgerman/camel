begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.websocket
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|websocket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|DispatcherType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|jmx
operator|.
name|MBeanContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|HashSessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|DefaultServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlets
operator|.
name|CrossOriginFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|WebsocketComponent
specifier|public
class|class
name|WebsocketComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WebsocketComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONNECTORS
specifier|protected
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
name|CONNECTORS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|sslContextParameters
specifier|protected
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
DECL|field|mbContainer
specifier|protected
name|MBeanContainer
name|mbContainer
decl_stmt|;
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|port
specifier|protected
name|Integer
name|port
init|=
literal|9292
decl_stmt|;
DECL|field|minThreads
specifier|protected
name|Integer
name|minThreads
decl_stmt|;
DECL|field|maxThreads
specifier|protected
name|Integer
name|maxThreads
decl_stmt|;
DECL|field|enableJmx
specifier|protected
name|boolean
name|enableJmx
decl_stmt|;
DECL|field|host
specifier|protected
name|String
name|host
init|=
literal|"0.0.0.0"
decl_stmt|;
DECL|field|staticResources
specifier|protected
name|String
name|staticResources
decl_stmt|;
DECL|field|staticResourcesServer
specifier|protected
name|Server
name|staticResourcesServer
decl_stmt|;
DECL|field|sslKeyPassword
specifier|protected
name|String
name|sslKeyPassword
decl_stmt|;
DECL|field|sslPassword
specifier|protected
name|String
name|sslPassword
decl_stmt|;
DECL|field|sslKeystore
specifier|protected
name|String
name|sslKeystore
decl_stmt|;
DECL|field|socketFactory
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|WebSocketFactory
argument_list|>
name|socketFactory
decl_stmt|;
comment|/**      * Map for storing servlets. {@link WebsocketComponentServlet} is identified by pathSpec {@link String}.      */
DECL|field|servlets
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
name|servlets
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
argument_list|()
decl_stmt|;
DECL|class|ConnectorRef
class|class
name|ConnectorRef
block|{
DECL|field|server
name|Server
name|server
decl_stmt|;
DECL|field|connector
name|ServerConnector
name|connector
decl_stmt|;
DECL|field|servlet
name|WebsocketComponentServlet
name|servlet
decl_stmt|;
DECL|field|memoryStore
name|MemoryWebsocketStore
name|memoryStore
decl_stmt|;
DECL|field|refCount
name|int
name|refCount
decl_stmt|;
DECL|method|ConnectorRef (Server server, ServerConnector connector, WebsocketComponentServlet servlet, MemoryWebsocketStore memoryStore)
specifier|public
name|ConnectorRef
parameter_list|(
name|Server
name|server
parameter_list|,
name|ServerConnector
name|connector
parameter_list|,
name|WebsocketComponentServlet
name|servlet
parameter_list|,
name|MemoryWebsocketStore
name|memoryStore
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|servlet
operator|=
name|servlet
expr_stmt|;
name|this
operator|.
name|memoryStore
operator|=
name|memoryStore
expr_stmt|;
name|increment
argument_list|()
expr_stmt|;
block|}
DECL|method|increment ()
specifier|public
name|int
name|increment
parameter_list|()
block|{
return|return
operator|++
name|refCount
return|;
block|}
DECL|method|decrement ()
specifier|public
name|int
name|decrement
parameter_list|()
block|{
return|return
operator|--
name|refCount
return|;
block|}
DECL|method|getRefCount ()
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
block|}
DECL|method|WebsocketComponent ()
specifier|public
name|WebsocketComponent
parameter_list|()
block|{
name|super
argument_list|(
name|WebsocketEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|socketFactory
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|socketFactory
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|WebSocketFactory
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|socketFactory
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
operator|new
name|DefaultWebsocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Connects the URL specified on the endpoint to the specified processor.      */
DECL|method|connect (WebsocketProducerConsumer prodcon)
specifier|public
name|void
name|connect
parameter_list|(
name|WebsocketProducerConsumer
name|prodcon
parameter_list|)
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
literal|null
decl_stmt|;
name|WebsocketEndpoint
name|endpoint
init|=
name|prodcon
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
name|getConnectorKey
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|CONNECTORS
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|==
literal|null
condition|)
block|{
name|ServerConnector
name|connector
decl_stmt|;
comment|// Create Server and add connector
name|server
operator|=
name|createServer
argument_list|()
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|isEnableJmx
argument_list|()
condition|)
block|{
name|enableJmx
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getSslContextParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|connector
operator|=
name|getSslSocketConnector
argument_list|(
name|server
argument_list|,
name|endpoint
operator|.
name|getSslContextParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getPort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|setPort
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|setHost
argument_list|(
name|endpoint
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Jetty Connector added: {}"
argument_list|,
name|connector
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create ServletContextHandler
name|ServletContextHandler
name|context
init|=
name|createContext
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|endpoint
operator|.
name|getHandlers
argument_list|()
argument_list|)
decl_stmt|;
comment|// setup the WebSocketComponentServlet initial parameters
name|setWebSocketComponentServletInitialParameter
argument_list|(
name|context
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Apply CORS (http://www.w3.org/TR/cors/)
name|applyCrossOriginFiltering
argument_list|(
name|endpoint
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// Create Static resources
if|if
condition|(
name|endpoint
operator|.
name|getStaticResources
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|server
operator|=
name|createStaticResourcesServer
argument_list|(
name|server
argument_list|,
name|context
argument_list|,
name|endpoint
operator|.
name|getStaticResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MemoryWebsocketStore
name|memoryStore
init|=
operator|new
name|MemoryWebsocketStore
argument_list|()
decl_stmt|;
comment|// Don't provide a Servlet object as Producer/Consumer will create them later on
name|connectorRef
operator|=
operator|new
name|ConnectorRef
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
literal|null
argument_list|,
name|memoryStore
argument_list|)
expr_stmt|;
comment|// must enable session before we start
if|if
condition|(
name|endpoint
operator|.
name|isSessionSupport
argument_list|()
condition|)
block|{
name|enableSessionSupport
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Jetty Server starting on host: {}:{}"
argument_list|,
name|connector
operator|.
name|getHost
argument_list|()
argument_list|,
name|connector
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|memoryStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|CONNECTORS
operator|.
name|put
argument_list|(
name|connectorKey
argument_list|,
name|connectorRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectorRef
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
comment|// check the session support
if|if
condition|(
name|endpoint
operator|.
name|isSessionSupport
argument_list|()
condition|)
block|{
name|enableSessionSupport
argument_list|(
name|connectorRef
operator|.
name|server
argument_list|,
name|connectorKey
argument_list|)
expr_stmt|;
block|}
name|NodeSynchronization
name|sync
init|=
operator|new
name|DefaultNodeSynchronization
argument_list|(
name|connectorRef
operator|.
name|memoryStore
argument_list|)
decl_stmt|;
name|WebsocketComponentServlet
name|servlet
init|=
name|addServlet
argument_list|(
name|sync
argument_list|,
name|prodcon
argument_list|,
name|endpoint
operator|.
name|getResourceUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prodcon
operator|instanceof
name|WebsocketConsumer
condition|)
block|{
name|WebsocketConsumer
name|consumer
init|=
name|WebsocketConsumer
operator|.
name|class
operator|.
name|cast
argument_list|(
name|prodcon
argument_list|)
decl_stmt|;
if|if
condition|(
name|servlet
operator|.
name|getConsumer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|servlet
operator|.
name|setConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
comment|// register the consumer here
name|servlet
operator|.
name|connect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prodcon
operator|instanceof
name|WebsocketProducer
condition|)
block|{
name|WebsocketProducer
name|producer
init|=
name|WebsocketProducer
operator|.
name|class
operator|.
name|cast
argument_list|(
name|prodcon
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setStore
argument_list|(
name|connectorRef
operator|.
name|memoryStore
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Disconnects the URL specified on the endpoint from the specified      * processor.      */
DECL|method|disconnect (WebsocketProducerConsumer prodcon)
specifier|public
name|void
name|disconnect
parameter_list|(
name|WebsocketProducerConsumer
name|prodcon
parameter_list|)
throws|throws
name|Exception
block|{
comment|// If the connector is not needed anymore then stop it
name|WebsocketEndpoint
name|endpoint
init|=
name|prodcon
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
name|getConnectorKey
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|CONNECTORS
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|connectorRef
operator|.
name|decrement
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Jetty Server as the last connector is disconnecting: {}:{}"
argument_list|,
name|connectorRef
operator|.
name|connector
operator|.
name|getHost
argument_list|()
argument_list|,
name|connectorRef
operator|.
name|connector
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|servlets
operator|.
name|remove
argument_list|(
name|createPathSpec
argument_list|(
name|endpoint
operator|.
name|getResourceUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|removeConnector
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectorRef
operator|.
name|connector
operator|!=
literal|null
condition|)
block|{
comment|// static server may not have set a connector
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|connectorRef
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|memoryStore
operator|.
name|stop
argument_list|()
expr_stmt|;
name|CONNECTORS
operator|.
name|remove
argument_list|(
name|connectorKey
argument_list|)
expr_stmt|;
comment|// Camel controls the lifecycle of these entities so remove the
comment|// registered MBeans when Camel is done with the managed objects.
if|if
condition|(
name|mbContainer
operator|!=
literal|null
condition|)
block|{
name|mbContainer
operator|.
name|beanRemoved
argument_list|(
literal|null
argument_list|,
name|connectorRef
operator|.
name|server
argument_list|)
expr_stmt|;
name|mbContainer
operator|.
name|beanRemoved
argument_list|(
literal|null
argument_list|,
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prodcon
operator|instanceof
name|WebsocketConsumer
condition|)
block|{
name|connectorRef
operator|.
name|servlet
operator|.
name|disconnect
argument_list|(
operator|(
name|WebsocketConsumer
operator|)
name|prodcon
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prodcon
operator|instanceof
name|WebsocketProducer
condition|)
block|{
operator|(
operator|(
name|WebsocketProducer
operator|)
name|prodcon
operator|)
operator|.
name|setStore
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getMbContainer ()
specifier|public
specifier|synchronized
name|MBeanContainer
name|getMbContainer
parameter_list|()
block|{
comment|// If null, provide the default implementation.
if|if
condition|(
name|mbContainer
operator|==
literal|null
condition|)
block|{
name|mbContainer
operator|=
operator|new
name|MBeanContainer
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|mbContainer
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO cmueller: remove the "sslContextParametersRef" look up in Camel 3.0
name|SSLContextParameters
name|sslContextParameters
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"sslContextParametersRef"
argument_list|,
name|SSLContextParameters
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslContextParameters
operator|==
literal|null
condition|)
block|{
name|sslContextParameters
operator|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"sslContextParameters"
argument_list|,
name|SSLContextParameters
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|enableJmx
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"enableJmx"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|staticResources
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"staticResources"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|extractPortNumber
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|extractHostName
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|WebsocketEndpoint
name|endpoint
init|=
operator|new
name|WebsocketEndpoint
argument_list|(
name|this
argument_list|,
name|uri
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|enableJmx
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setEnableJmx
argument_list|(
name|enableJmx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|.
name|setEnableJmx
argument_list|(
name|isEnableJmx
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*         if (sslContextParameters == null) {             sslContextParameters = this.sslContextParameters;         } */
comment|// prefer to use endpoint configured over component configured
if|if
condition|(
name|sslContextParameters
operator|==
literal|null
condition|)
block|{
comment|// fallback to component configured
name|sslContextParameters
operator|=
name|getSslContextParameters
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sslContextParameters
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setSslContextParameters
argument_list|(
name|sslContextParameters
argument_list|)
expr_stmt|;
block|}
comment|// prefer to use endpoint configured over component configured
if|if
condition|(
name|staticResources
operator|==
literal|null
condition|)
block|{
comment|// fallback to component configured
name|staticResources
operator|=
name|getStaticResources
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|staticResources
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setStaticResources
argument_list|(
name|staticResources
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setSslContextParameters
argument_list|(
name|sslContextParameters
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|setWebSocketComponentServletInitialParameter (ServletContextHandler context, WebsocketEndpoint endpoint)
specifier|protected
name|void
name|setWebSocketComponentServletInitialParameter
parameter_list|(
name|ServletContextHandler
name|context
parameter_list|,
name|WebsocketEndpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|getBufferSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setInitParameter
argument_list|(
literal|"bufferSize"
argument_list|,
name|endpoint
operator|.
name|getBufferSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getMaxIdleTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setInitParameter
argument_list|(
literal|"maxIdleTime"
argument_list|,
name|endpoint
operator|.
name|getMaxIdleTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getMaxTextMessageSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setInitParameter
argument_list|(
literal|"maxTextMessageSize"
argument_list|,
name|endpoint
operator|.
name|getMaxTextMessageSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getMaxBinaryMessageSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setInitParameter
argument_list|(
literal|"maxBinaryMessageSize"
argument_list|,
name|endpoint
operator|.
name|getMaxBinaryMessageSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getMinVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setInitParameter
argument_list|(
literal|"minVersion"
argument_list|,
name|endpoint
operator|.
name|getMinVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createServer ()
specifier|protected
name|Server
name|createServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
literal|null
decl_stmt|;
comment|// configure thread pool if min/max given
if|if
condition|(
name|minThreads
operator|!=
literal|null
operator|||
name|maxThreads
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getThreadPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You cannot configure both minThreads/maxThreads and a custom threadPool on JettyHttpComponent: "
operator|+
name|this
argument_list|)
throw|;
block|}
name|QueuedThreadPool
name|qtp
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
if|if
condition|(
name|minThreads
operator|!=
literal|null
condition|)
block|{
name|qtp
operator|.
name|setMinThreads
argument_list|(
name|minThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxThreads
operator|!=
literal|null
condition|)
block|{
name|qtp
operator|.
name|setMaxThreads
argument_list|(
name|maxThreads
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// let the thread names indicate they are from the server
name|qtp
operator|.
name|setName
argument_list|(
literal|"CamelJettyWebSocketServer("
operator|+
literal|"test"
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
name|qtp
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Error starting JettyWebSocketServer thread pool: "
operator|+
name|qtp
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|server
operator|=
operator|new
name|Server
argument_list|(
name|qtp
argument_list|)
expr_stmt|;
name|ContextHandlerCollection
name|collection
init|=
operator|new
name|ContextHandlerCollection
argument_list|()
decl_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getThreadPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|server
operator|=
operator|new
name|Server
argument_list|(
name|getThreadPool
argument_list|()
argument_list|)
expr_stmt|;
name|ContextHandlerCollection
name|collection
init|=
operator|new
name|ContextHandlerCollection
argument_list|()
decl_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
DECL|method|createStaticResourcesServer (Server server, ServletContextHandler context, String home)
specifier|protected
name|Server
name|createStaticResourcesServer
parameter_list|(
name|Server
name|server
parameter_list|,
name|ServletContextHandler
name|context
parameter_list|,
name|String
name|home
parameter_list|)
throws|throws
name|Exception
block|{
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|SessionManager
name|sm
init|=
operator|new
name|HashSessionManager
argument_list|()
decl_stmt|;
name|SessionHandler
name|sh
init|=
operator|new
name|SessionHandler
argument_list|(
name|sm
argument_list|)
decl_stmt|;
name|context
operator|.
name|setSessionHandler
argument_list|(
name|sh
argument_list|)
expr_stmt|;
if|if
condition|(
name|home
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|resources
init|=
name|home
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|">>> Protocol found: "
operator|+
name|resources
index|[
literal|0
index|]
operator|+
literal|", and resource: "
operator|+
name|resources
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resources
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"classpath"
argument_list|)
condition|)
block|{
comment|// Does not work when deployed as a bundle
comment|// context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), resources[1]));
name|URL
name|url
init|=
name|this
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|loadResourceAsURL
argument_list|(
name|resources
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|context
operator|.
name|setBaseResource
argument_list|(
name|Resource
operator|.
name|newResource
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resources
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|context
operator|.
name|setBaseResource
argument_list|(
name|Resource
operator|.
name|newResource
argument_list|(
name|resources
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DefaultServlet
name|defaultServlet
init|=
operator|new
name|DefaultServlet
argument_list|()
decl_stmt|;
name|ServletHolder
name|holder
init|=
operator|new
name|ServletHolder
argument_list|(
name|defaultServlet
argument_list|)
decl_stmt|;
comment|// avoid file locking on windows
comment|// http://stackoverflow.com/questions/184312/how-to-make-jetty-dynamically-load-static-pages
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"useFileMappedBuffer"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|holder
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
DECL|method|createStaticResourcesServer (ServletContextHandler context, String host, int port, String home)
specifier|protected
name|Server
name|createStaticResourcesServer
parameter_list|(
name|ServletContextHandler
name|context
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|home
parameter_list|)
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
name|HttpConfiguration
name|httpConfig
init|=
operator|new
name|HttpConfiguration
argument_list|()
decl_stmt|;
name|ServerConnector
name|connector
init|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|(
name|httpConfig
argument_list|)
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
return|return
name|createStaticResourcesServer
argument_list|(
name|server
argument_list|,
name|context
argument_list|,
name|home
argument_list|)
return|;
block|}
DECL|method|addServlet (NodeSynchronization sync, WebsocketProducerConsumer prodcon, String resourceUri)
specifier|protected
name|WebsocketComponentServlet
name|addServlet
parameter_list|(
name|NodeSynchronization
name|sync
parameter_list|,
name|WebsocketProducerConsumer
name|prodcon
parameter_list|,
name|String
name|resourceUri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Get Connector from one of the Jetty Instances to add WebSocket Servlet
name|WebsocketEndpoint
name|endpoint
init|=
name|prodcon
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|getConnectorKey
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|ConnectorRef
name|connectorRef
init|=
name|getConnectors
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|WebsocketComponentServlet
name|servlet
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|!=
literal|null
condition|)
block|{
name|String
name|pathSpec
init|=
name|createPathSpec
argument_list|(
name|resourceUri
argument_list|)
decl_stmt|;
name|servlet
operator|=
name|servlets
operator|.
name|get
argument_list|(
name|pathSpec
argument_list|)
expr_stmt|;
if|if
condition|(
name|servlet
operator|==
literal|null
condition|)
block|{
comment|// Retrieve Context
name|ServletContextHandler
name|context
init|=
operator|(
name|ServletContextHandler
operator|)
name|connectorRef
operator|.
name|server
operator|.
name|getHandler
argument_list|()
decl_stmt|;
name|servlet
operator|=
name|createServlet
argument_list|(
name|sync
argument_list|,
name|pathSpec
argument_list|,
name|servlets
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|servlet
operator|=
name|servlet
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"WebSocket servlet added for the following path : "
operator|+
name|pathSpec
operator|+
literal|", to the Jetty Server : "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|servlet
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Jetty instance has not been retrieved for : "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
DECL|method|createServlet (NodeSynchronization sync, String pathSpec, Map<String, WebsocketComponentServlet> servlets, ServletContextHandler handler)
specifier|protected
name|WebsocketComponentServlet
name|createServlet
parameter_list|(
name|NodeSynchronization
name|sync
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
name|servlets
parameter_list|,
name|ServletContextHandler
name|handler
parameter_list|)
block|{
name|WebsocketComponentServlet
name|servlet
init|=
operator|new
name|WebsocketComponentServlet
argument_list|(
name|sync
argument_list|,
name|socketFactory
argument_list|)
decl_stmt|;
name|servlets
operator|.
name|put
argument_list|(
name|pathSpec
argument_list|,
name|servlet
argument_list|)
expr_stmt|;
name|handler
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|servlet
argument_list|)
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
return|return
name|servlet
return|;
block|}
DECL|method|createContext (Server server, Connector connector, List<Handler> handlers)
specifier|protected
name|ServletContextHandler
name|createContext
parameter_list|(
name|Server
name|server
parameter_list|,
name|Connector
name|connector
parameter_list|,
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
parameter_list|)
throws|throws
name|Exception
block|{
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|server
argument_list|,
literal|"/"
argument_list|,
name|ServletContextHandler
operator|.
name|NO_SECURITY
operator||
name|ServletContextHandler
operator|.
name|NO_SESSIONS
argument_list|)
decl_stmt|;
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
if|if
condition|(
name|handlers
operator|!=
literal|null
operator|&&
operator|!
name|handlers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Handler
name|handler
range|:
name|handlers
control|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|HandlerWrapper
condition|)
block|{
operator|(
operator|(
name|HandlerWrapper
operator|)
name|handler
operator|)
operator|.
name|setHandler
argument_list|(
name|server
operator|.
name|getHandler
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HandlerCollection
name|handlerCollection
init|=
operator|new
name|HandlerCollection
argument_list|()
decl_stmt|;
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|server
operator|.
name|getHandler
argument_list|()
argument_list|)
expr_stmt|;
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|handlerCollection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|context
return|;
block|}
DECL|method|enableSessionSupport (Server server, String connectorKey)
specifier|private
name|void
name|enableSessionSupport
parameter_list|(
name|Server
name|server
parameter_list|,
name|String
name|connectorKey
parameter_list|)
throws|throws
name|Exception
block|{
name|ServletContextHandler
name|context
init|=
name|server
operator|.
name|getChildHandlerByClass
argument_list|(
name|ServletContextHandler
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getSessionHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SessionHandler
name|sessionHandler
init|=
operator|new
name|SessionHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isStarted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Server has already been started. Cannot enabled sessionSupport on "
operator|+
name|connectorKey
argument_list|)
throw|;
block|}
else|else
block|{
name|context
operator|.
name|setSessionHandler
argument_list|(
name|sessionHandler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSslSocketConnector (Server server, SSLContextParameters sslContextParameters)
specifier|private
name|ServerConnector
name|getSslSocketConnector
parameter_list|(
name|Server
name|server
parameter_list|,
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
throws|throws
name|Exception
block|{
name|ServerConnector
name|sslSocketConnector
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sslContextParameters
operator|!=
literal|null
condition|)
block|{
name|SslContextFactory
name|sslContextFactory
init|=
operator|new
name|WebSocketComponentSslContextFactory
argument_list|()
decl_stmt|;
name|sslContextFactory
operator|.
name|setSslContext
argument_list|(
name|sslContextParameters
operator|.
name|createSSLContext
argument_list|()
argument_list|)
expr_stmt|;
name|sslSocketConnector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
name|sslContextFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SslContextFactory
name|sslContextFactory
init|=
operator|new
name|SslContextFactory
argument_list|()
decl_stmt|;
name|sslContextFactory
operator|.
name|setKeyStorePassword
argument_list|(
name|sslKeyPassword
argument_list|)
expr_stmt|;
name|sslContextFactory
operator|.
name|setKeyManagerPassword
argument_list|(
name|sslPassword
argument_list|)
expr_stmt|;
if|if
condition|(
name|sslKeystore
operator|!=
literal|null
condition|)
block|{
name|sslContextFactory
operator|.
name|setKeyStorePath
argument_list|(
name|sslKeystore
argument_list|)
expr_stmt|;
block|}
name|sslSocketConnector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
name|sslContextFactory
argument_list|)
expr_stmt|;
block|}
return|return
name|sslSocketConnector
return|;
block|}
comment|/**      * Override the key/trust store check method as it does not account for a factory that has      * a pre-configured {@link javax.net.ssl.SSLContext}.      */
DECL|class|WebSocketComponentSslContextFactory
specifier|private
specifier|static
specifier|final
class|class
name|WebSocketComponentSslContextFactory
extends|extends
name|SslContextFactory
block|{
comment|// This method is for Jetty 7.0.x ~ 7.4.x
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|checkConfig ()
specifier|public
name|boolean
name|checkConfig
parameter_list|()
block|{
if|if
condition|(
name|getSslContext
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|checkSSLContextFactoryConfig
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
DECL|method|checkSSLContextFactoryConfig (Object instance)
specifier|private
specifier|static
name|boolean
name|checkSSLContextFactoryConfig
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"checkConfig"
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|false
return|;
block|}
DECL|method|createPathSpec (String remaining)
specifier|private
specifier|static
name|String
name|createPathSpec
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
comment|// Is not correct as it does not support to add port in the URI
comment|//return String.format("/%s/*", remaining);
name|int
name|index
init|=
name|remaining
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|remaining
operator|.
name|substring
argument_list|(
name|index
argument_list|,
name|remaining
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"/"
operator|+
name|remaining
return|;
block|}
block|}
DECL|method|extractPortNumber (String remaining)
specifier|private
name|int
name|extractPortNumber
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|int
name|index1
init|=
name|remaining
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
name|index2
init|=
name|remaining
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|index1
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
name|index2
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
name|String
name|result
init|=
name|remaining
operator|.
name|substring
argument_list|(
name|index1
operator|+
literal|1
argument_list|,
name|index2
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|result
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|port
return|;
block|}
block|}
DECL|method|extractHostName (String remaining)
specifier|private
name|String
name|extractHostName
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|int
name|index
init|=
name|remaining
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|remaining
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|host
return|;
block|}
block|}
DECL|method|getConnectorKey (WebsocketEndpoint endpoint)
specifier|private
specifier|static
name|String
name|getConnectorKey
parameter_list|(
name|WebsocketEndpoint
name|endpoint
parameter_list|)
block|{
return|return
name|endpoint
operator|.
name|getProtocol
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getPort
argument_list|()
return|;
block|}
DECL|method|enableJmx (Server server)
specifier|private
name|void
name|enableJmx
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|MBeanContainer
name|containerToRegister
init|=
name|getMbContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerToRegister
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Jetty JMX Extensions is enabled"
argument_list|)
expr_stmt|;
name|server
operator|.
name|addEventListener
argument_list|(
name|containerToRegister
argument_list|)
expr_stmt|;
comment|// Since we may have many Servers running, don't tie the MBeanContainer
comment|// to a Server lifecycle or we end up closing it while it is still in use.
comment|//server.addBean(mbContainer);
block|}
block|}
DECL|method|applyCrossOriginFiltering (WebsocketEndpoint endpoint, ServletContextHandler context)
specifier|private
name|void
name|applyCrossOriginFiltering
parameter_list|(
name|WebsocketEndpoint
name|endpoint
parameter_list|,
name|ServletContextHandler
name|context
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isCrossOriginFilterOn
argument_list|()
condition|)
block|{
name|FilterHolder
name|filterHolder
init|=
operator|new
name|FilterHolder
argument_list|()
decl_stmt|;
name|CrossOriginFilter
name|filter
init|=
operator|new
name|CrossOriginFilter
argument_list|()
decl_stmt|;
name|filterHolder
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|filterHolder
operator|.
name|setInitParameter
argument_list|(
literal|"allowedOrigins"
argument_list|,
name|endpoint
operator|.
name|getAllowedOrigins
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
name|filterHolder
argument_list|,
name|endpoint
operator|.
name|getFilterPath
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DispatcherType
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getStaticResources ()
specifier|public
name|String
name|getStaticResources
parameter_list|()
block|{
return|return
name|staticResources
return|;
block|}
comment|/**      * Set a resource path for static resources (such as .html files etc).      *<p/>      * The resources can be loaded from classpath, if you prefix with<tt>classpath:</tt>,      * otherwise the resources is loaded from file system or from JAR files.      *<p/>      * For example to load from root classpath use<tt>classpath:.</tt>, or      *<tt>classpath:WEB-INF/static</tt>      *<p/>      * If not configured (eg<tt>null</tt>) then no static resource is in use.      */
DECL|method|setStaticResources (String staticResources)
specifier|public
name|void
name|setStaticResources
parameter_list|(
name|String
name|staticResources
parameter_list|)
block|{
name|this
operator|.
name|staticResources
operator|=
name|staticResources
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * The hostname. The default value is<tt>0.0.0.0</tt>      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|Integer
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * The port number. The default value is<tt>9292</tt>      */
DECL|method|setPort (Integer port)
specifier|public
name|void
name|setPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getSslKeyPassword ()
specifier|public
name|String
name|getSslKeyPassword
parameter_list|()
block|{
return|return
name|sslKeyPassword
return|;
block|}
DECL|method|getSslPassword ()
specifier|public
name|String
name|getSslPassword
parameter_list|()
block|{
return|return
name|sslPassword
return|;
block|}
DECL|method|getSslKeystore ()
specifier|public
name|String
name|getSslKeystore
parameter_list|()
block|{
return|return
name|sslKeystore
return|;
block|}
comment|/**      * The password for the keystore when using SSL.      */
DECL|method|setSslKeyPassword (String sslKeyPassword)
specifier|public
name|void
name|setSslKeyPassword
parameter_list|(
name|String
name|sslKeyPassword
parameter_list|)
block|{
name|this
operator|.
name|sslKeyPassword
operator|=
name|sslKeyPassword
expr_stmt|;
block|}
comment|/**      * The password when using SSL.      */
DECL|method|setSslPassword (String sslPassword)
specifier|public
name|void
name|setSslPassword
parameter_list|(
name|String
name|sslPassword
parameter_list|)
block|{
name|this
operator|.
name|sslPassword
operator|=
name|sslPassword
expr_stmt|;
block|}
comment|/**      * The path to the keystore.      */
DECL|method|setSslKeystore (String sslKeystore)
specifier|public
name|void
name|setSslKeystore
parameter_list|(
name|String
name|sslKeystore
parameter_list|)
block|{
name|this
operator|.
name|sslKeystore
operator|=
name|sslKeystore
expr_stmt|;
block|}
comment|/**      * If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.      */
DECL|method|setEnableJmx (boolean enableJmx)
specifier|public
name|void
name|setEnableJmx
parameter_list|(
name|boolean
name|enableJmx
parameter_list|)
block|{
name|this
operator|.
name|enableJmx
operator|=
name|enableJmx
expr_stmt|;
block|}
DECL|method|isEnableJmx ()
specifier|public
name|boolean
name|isEnableJmx
parameter_list|()
block|{
return|return
name|enableJmx
return|;
block|}
DECL|method|getMinThreads ()
specifier|public
name|Integer
name|getMinThreads
parameter_list|()
block|{
return|return
name|minThreads
return|;
block|}
comment|/**      * To set a value for minimum number of threads in server thread pool.      */
DECL|method|setMinThreads (Integer minThreads)
specifier|public
name|void
name|setMinThreads
parameter_list|(
name|Integer
name|minThreads
parameter_list|)
block|{
name|this
operator|.
name|minThreads
operator|=
name|minThreads
expr_stmt|;
block|}
DECL|method|getMaxThreads ()
specifier|public
name|Integer
name|getMaxThreads
parameter_list|()
block|{
return|return
name|maxThreads
return|;
block|}
comment|/**      * To set a value for maximum number of threads in server thread pool.      */
DECL|method|setMaxThreads (Integer maxThreads)
specifier|public
name|void
name|setMaxThreads
parameter_list|(
name|Integer
name|maxThreads
parameter_list|)
block|{
name|this
operator|.
name|maxThreads
operator|=
name|maxThreads
expr_stmt|;
block|}
DECL|method|getThreadPool ()
specifier|public
name|ThreadPool
name|getThreadPool
parameter_list|()
block|{
return|return
name|threadPool
return|;
block|}
comment|/**      * To use a custom thread pool for the server.      */
DECL|method|setThreadPool (ThreadPool threadPool)
specifier|public
name|void
name|setThreadPool
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
comment|/**      * To configure security using SSLContextParameters      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getSocketFactory ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|WebSocketFactory
argument_list|>
name|getSocketFactory
parameter_list|()
block|{
return|return
name|socketFactory
return|;
block|}
comment|/**      * To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol.      *<p/>      * The<tt>default</tt> key is reserved for the default implementation.      */
DECL|method|setSocketFactory (Map<String, WebSocketFactory> socketFactory)
specifier|public
name|void
name|setSocketFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|WebSocketFactory
argument_list|>
name|socketFactory
parameter_list|)
block|{
name|this
operator|.
name|socketFactory
operator|=
name|socketFactory
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|socketFactory
operator|.
name|containsKey
argument_list|(
literal|"default"
argument_list|)
condition|)
block|{
name|this
operator|.
name|socketFactory
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
operator|new
name|DefaultWebsocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConnectors ()
specifier|public
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
name|getConnectors
parameter_list|()
block|{
return|return
name|CONNECTORS
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|staticResources
operator|!=
literal|null
condition|)
block|{
comment|// host and port must be configured
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|host
argument_list|,
literal|"host"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|port
argument_list|,
literal|"port"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting static resources server {}:{} with static resource: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|host
block|,
name|port
block|,
name|staticResources
block|}
argument_list|)
expr_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|staticResourcesServer
operator|=
name|createStaticResourcesServer
argument_list|(
name|context
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|staticResources
argument_list|)
expr_stmt|;
name|staticResourcesServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|ServerConnector
name|connector
init|=
operator|(
name|ServerConnector
operator|)
name|staticResourcesServer
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// must add static resource server to CONNECTORS in case the websocket producers/consumers
comment|// uses the same port number, and therefore we must be part of this
name|MemoryWebsocketStore
name|memoryStore
init|=
operator|new
name|MemoryWebsocketStore
argument_list|()
decl_stmt|;
name|ConnectorRef
name|ref
init|=
operator|new
name|ConnectorRef
argument_list|(
name|staticResourcesServer
argument_list|,
name|connector
argument_list|,
literal|null
argument_list|,
name|memoryStore
argument_list|)
decl_stmt|;
name|String
name|key
init|=
literal|"websocket:"
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
decl_stmt|;
name|CONNECTORS
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|public
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|CONNECTORS
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|connectorKey
range|:
name|CONNECTORS
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|!=
literal|null
operator|&&
name|connectorRef
operator|.
name|getRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|connectorRef
operator|.
name|server
operator|.
name|removeConnector
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|memoryStore
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|servlet
operator|=
literal|null
expr_stmt|;
block|}
name|CONNECTORS
operator|.
name|remove
argument_list|(
name|connectorKey
argument_list|)
expr_stmt|;
block|}
block|}
name|CONNECTORS
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|staticResourcesServer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping static resources server {}:{} with static resource: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|host
block|,
name|port
block|,
name|staticResources
block|}
argument_list|)
expr_stmt|;
name|staticResourcesServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|staticResourcesServer
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|staticResourcesServer
operator|=
literal|null
expr_stmt|;
block|}
name|servlets
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

