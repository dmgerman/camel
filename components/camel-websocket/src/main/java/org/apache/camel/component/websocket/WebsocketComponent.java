begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.websocket
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|websocket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|jmx
operator|.
name|MBeanContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|HashSessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|DefaultServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Servlet
import|;
end_import

begin_class
DECL|class|WebsocketComponent
specifier|public
class|class
name|WebsocketComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WebsocketComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONNECTORS
specifier|protected
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
name|CONNECTORS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|context
specifier|protected
name|ServletContextHandler
name|context
decl_stmt|;
DECL|field|sslContextParameters
specifier|protected
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
DECL|field|server
specifier|protected
name|Server
name|server
decl_stmt|;
DECL|field|mbContainer
specifier|protected
name|MBeanContainer
name|mbContainer
decl_stmt|;
DECL|field|port
specifier|protected
name|Integer
name|port
decl_stmt|;
DECL|field|host
specifier|protected
name|String
name|host
decl_stmt|;
DECL|field|enableJmx
specifier|protected
name|boolean
name|enableJmx
decl_stmt|;
DECL|field|staticResources
specifier|protected
name|String
name|staticResources
decl_stmt|;
DECL|field|sslKeyPassword
specifier|protected
name|String
name|sslKeyPassword
decl_stmt|;
DECL|field|sslPassword
specifier|protected
name|String
name|sslPassword
decl_stmt|;
DECL|field|sslKeystore
specifier|protected
name|String
name|sslKeystore
decl_stmt|;
DECL|class|ConnectorRef
class|class
name|ConnectorRef
block|{
DECL|field|server
name|Server
name|server
decl_stmt|;
DECL|field|connector
name|Connector
name|connector
decl_stmt|;
DECL|field|servlet
name|Servlet
name|servlet
decl_stmt|;
DECL|field|refCount
name|int
name|refCount
decl_stmt|;
DECL|method|ConnectorRef (Server server, Connector connector, Servlet servlet)
specifier|public
name|ConnectorRef
parameter_list|(
name|Server
name|server
parameter_list|,
name|Connector
name|connector
parameter_list|,
name|Servlet
name|servlet
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|servlet
operator|=
name|servlet
expr_stmt|;
name|increment
argument_list|()
expr_stmt|;
block|}
DECL|method|increment ()
specifier|public
name|int
name|increment
parameter_list|()
block|{
return|return
operator|++
name|refCount
return|;
block|}
DECL|method|decrement ()
specifier|public
name|int
name|decrement
parameter_list|()
block|{
return|return
operator|--
name|refCount
return|;
block|}
DECL|method|getRefCount ()
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
block|}
comment|/**      * Map for storing servlets. {@link WebsocketComponentServlet} is identified by pathSpec {@link String}.      */
DECL|field|servlets
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
name|servlets
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|WebsocketComponent ()
specifier|public
name|WebsocketComponent
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|websocketParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|Boolean
name|enableJmx
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"enableJmx"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|SSLContextParameters
name|sslContextParameters
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"sslContextParametersRef"
argument_list|,
name|SSLContextParameters
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|extractPortNumber
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|extractHostName
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|WebsocketEndpoint
name|endpoint
init|=
operator|new
name|WebsocketEndpoint
argument_list|(
name|this
argument_list|,
name|uri
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|enableJmx
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setEnableJmx
argument_list|(
name|enableJmx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|.
name|setEnableJmx
argument_list|(
name|isEnableJmx
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sslContextParameters
operator|==
literal|null
condition|)
block|{
name|sslContextParameters
operator|=
name|this
operator|.
name|sslContextParameters
expr_stmt|;
block|}
name|endpoint
operator|.
name|setSslContextParameters
argument_list|(
name|sslContextParameters
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getStaticResources ()
specifier|public
name|String
name|getStaticResources
parameter_list|()
block|{
return|return
name|staticResources
return|;
block|}
comment|/**      * Set a resource path for static resources (such as .html files etc).      *<p/>      * The resources can be loaded from classpath, if you prefix with<tt>classpath:</tt>,      * otherwise the resources is loaded from file system or from JAR files.      *<p/>      * For example to load from root classpath use<tt>classpath:.</tt>, or      *<tt>classpath:WEB-INF/static</tt>      *<p/>      * If not configured (eg<tt>null</tt>) then no static resource is in use.      *      * @param staticResources the base path      */
DECL|method|setStaticResources (String staticResources)
specifier|public
name|void
name|setStaticResources
parameter_list|(
name|String
name|staticResources
parameter_list|)
block|{
name|this
operator|.
name|staticResources
operator|=
name|staticResources
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|Integer
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (Integer port)
specifier|public
name|void
name|setPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
comment|/**      * Connects the URL specified on the endpoint to the specified processor.      */
DECL|method|connect (WebsocketProducerConsumer prodcon)
specifier|public
name|void
name|connect
parameter_list|(
name|WebsocketProducerConsumer
name|prodcon
parameter_list|)
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
literal|null
decl_stmt|;
name|DefaultServlet
name|defaultServlet
init|=
literal|null
decl_stmt|;
name|String
name|baseResource
init|=
literal|null
decl_stmt|;
name|WebsocketEndpoint
name|endpoint
init|=
name|prodcon
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
literal|"websocket"
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getPort
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|CONNECTORS
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|==
literal|null
condition|)
block|{
name|Connector
name|connector
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getSslContextParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|connector
operator|=
name|getSslSocketConnector
argument_list|(
name|endpoint
operator|.
name|getSslContextParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|=
operator|new
name|SelectChannelConnector
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|.
name|setPort
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|.
name|setHost
argument_list|(
name|endpoint
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setHost
argument_list|(
name|endpoint
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// Define Context and SessionManager
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|SessionManager
name|sm
init|=
operator|new
name|HashSessionManager
argument_list|()
decl_stmt|;
name|SessionHandler
name|sh
init|=
operator|new
name|SessionHandler
argument_list|(
name|sm
argument_list|)
decl_stmt|;
name|context
operator|.
name|setSessionHandler
argument_list|(
name|sh
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getHome
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|getHome
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|baseResource
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|endpoint
operator|.
name|getHome
argument_list|()
argument_list|,
literal|"classpath:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using base resource from classpath: {}"
argument_list|,
name|baseResource
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBaseResource
argument_list|(
operator|new
name|JettyClassPathResource
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|baseResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using base resource: {}"
argument_list|,
name|baseResource
argument_list|)
expr_stmt|;
name|context
operator|.
name|setResourceBase
argument_list|(
name|baseResource
argument_list|)
expr_stmt|;
block|}
name|defaultServlet
operator|=
operator|new
name|DefaultServlet
argument_list|()
expr_stmt|;
name|ServletHolder
name|holder
init|=
operator|new
name|ServletHolder
argument_list|(
name|defaultServlet
argument_list|)
decl_stmt|;
comment|// avoid file locking on windows
comment|// http://stackoverflow.com/questions/184312/how-to-make-jetty-dynamically-load-static-pages
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"useFileMappedBuffer"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|holder
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
comment|// Create Server and add connector
name|server
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|connectorRef
operator|=
operator|new
name|ConnectorRef
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|defaultServlet
argument_list|)
expr_stmt|;
name|CONNECTORS
operator|.
name|put
argument_list|(
name|connectorKey
argument_list|,
name|connectorRef
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connectorRef
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Disconnects the URL specified on the endpoint from the specified      * processor.      */
DECL|method|disconnect (WebsocketProducerConsumer prodcon)
specifier|public
name|void
name|disconnect
parameter_list|(
name|WebsocketProducerConsumer
name|prodcon
parameter_list|)
throws|throws
name|Exception
block|{
name|WebsocketEndpoint
name|endpoint
init|=
name|prodcon
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
literal|"websocket"
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getPort
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|CONNECTORS
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|CONNECTORS
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|connectorRef
operator|.
name|decrement
argument_list|()
operator|==
literal|0
condition|)
block|{
name|connectorRef
operator|.
name|server
operator|.
name|removeConnector
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|CONNECTORS
operator|.
name|remove
argument_list|(
name|CONNECTORS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*protected Server createServer(ServletContextHandler context, String host, int port, String home) {          String connectorKey = "websocket" + ":" + host + ":" + port;         Server server = null;         DefaultServlet defaultServlet = null;         // WebsocketComponent websocketComponent = (WebsocketComponent) this.getCamelContext().getEndpoint(connectorKey);          synchronized (CONNECTORS) {             ConnectorRef connectorRef = CONNECTORS.get(connectorKey);             if (connectorRef == null) {                 Connector connector;                 if (sslContextParameters != null) {                     connector = getSslSocketConnector();                 } else {                     connector = new SelectChannelConnector();                 }                  connector.setHost(host);                 connector.setPort(port);                  // Define Context and SessionManager                 context.setContextPath("/");                  SessionManager sm = new HashSessionManager();                 SessionHandler sh = new SessionHandler(sm);                 context.setSessionHandler(sh);                  if (home != null) {                     if (home.startsWith("classpath:")) {                         home = ObjectHelper.after(home, "classpath:");                         LOG.debug("Using base resource from classpath: {}", home);                         context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), home));                     } else {                         LOG.debug("Using base resource: {}", home);                         context.setResourceBase(home);                     }                     defaultServlet = new DefaultServlet();                     ServletHolder holder = new ServletHolder(defaultServlet);                      // avoid file locking on windows                     // http://stackoverflow.com/questions/184312/how-to-make-jetty-dynamically-load-static-pages                     holder.setInitParameter("useFileMappedBuffer", "false");                     context.addServlet(holder, "/");                 }                  // Create Server and add connector                 server = new Server();                 server.addConnector(connector);                 server.setHandler(context);                 connectorRef = new ConnectorRef(server, connector, defaultServlet);                  CONNECTORS.put(connectorKey, connectorRef);              } else {                 connectorRef.increment();             }          }          return server;     } */
DECL|method|getSslSocketConnector (SSLContextParameters sslContextParameters)
specifier|protected
name|SslConnector
name|getSslSocketConnector
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|SslSelectChannelConnector
name|sslSocketConnector
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sslContextParameters
operator|!=
literal|null
condition|)
block|{
name|SslContextFactory
name|sslContextFactory
init|=
operator|new
name|WebSocketComponentSslContextFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|sslContextFactory
operator|.
name|setSslContext
argument_list|(
name|sslContextParameters
operator|.
name|createSSLContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Error initiating SSLContext."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|sslSocketConnector
operator|=
operator|new
name|SslSelectChannelConnector
argument_list|(
name|sslContextFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sslSocketConnector
operator|=
operator|new
name|SslSelectChannelConnector
argument_list|()
expr_stmt|;
comment|// with default null values, jetty ssl system properties
comment|// and console will be read by jetty implementation
name|sslSocketConnector
operator|.
name|getSslContextFactory
argument_list|()
operator|.
name|setKeyManagerPassword
argument_list|(
name|sslPassword
argument_list|)
expr_stmt|;
name|sslSocketConnector
operator|.
name|getSslContextFactory
argument_list|()
operator|.
name|setKeyStorePassword
argument_list|(
name|sslKeyPassword
argument_list|)
expr_stmt|;
if|if
condition|(
name|sslKeystore
operator|!=
literal|null
condition|)
block|{
name|sslSocketConnector
operator|.
name|getSslContextFactory
argument_list|()
operator|.
name|setKeyStorePath
argument_list|(
name|sslKeystore
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sslSocketConnector
return|;
block|}
comment|/**      * Override the key/trust store check method as it does not account for a factory that has      * a pre-configured {@link javax.net.ssl.SSLContext}.      */
DECL|class|WebSocketComponentSslContextFactory
specifier|private
specifier|static
specifier|final
class|class
name|WebSocketComponentSslContextFactory
extends|extends
name|SslContextFactory
block|{
comment|// This method is for Jetty 7.0.x ~ 7.4.x
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|checkConfig ()
specifier|public
name|boolean
name|checkConfig
parameter_list|()
block|{
if|if
condition|(
name|getSslContext
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|checkSSLContextFactoryConfig
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// This method is for Jetty 7.5.x
DECL|method|checkKeyStore ()
specifier|public
name|void
name|checkKeyStore
parameter_list|()
block|{
comment|// here we don't check the SslContext as it is already created
block|}
block|}
DECL|method|checkSSLContextFactoryConfig (Object instance)
specifier|private
specifier|static
name|boolean
name|checkSSLContextFactoryConfig
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"checkConfig"
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|false
return|;
block|}
DECL|method|addServlet (NodeSynchronization sync, WebsocketConsumer consumer, String remaining)
specifier|public
name|WebsocketComponentServlet
name|addServlet
parameter_list|(
name|NodeSynchronization
name|sync
parameter_list|,
name|WebsocketConsumer
name|consumer
parameter_list|,
name|String
name|remaining
parameter_list|)
block|{
name|String
name|pathSpec
init|=
name|createPathSpec
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|WebsocketComponentServlet
name|servlet
init|=
name|servlets
operator|.
name|get
argument_list|(
name|pathSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|servlet
operator|==
literal|null
condition|)
block|{
name|servlet
operator|=
name|createServlet
argument_list|(
name|sync
argument_list|,
name|pathSpec
argument_list|,
name|servlets
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|servlet
operator|.
name|getConsumer
argument_list|()
operator|==
literal|null
operator|&&
name|consumer
operator|!=
literal|null
condition|)
block|{
name|servlet
operator|.
name|setConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
return|return
name|servlet
return|;
block|}
DECL|method|createServlet (NodeSynchronization sync, String pathSpec, Map<String, WebsocketComponentServlet> servlets, ServletContextHandler handler)
name|WebsocketComponentServlet
name|createServlet
parameter_list|(
name|NodeSynchronization
name|sync
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
name|servlets
parameter_list|,
name|ServletContextHandler
name|handler
parameter_list|)
block|{
name|WebsocketComponentServlet
name|servlet
init|=
operator|new
name|WebsocketComponentServlet
argument_list|(
name|sync
argument_list|)
decl_stmt|;
name|servlets
operator|.
name|put
argument_list|(
name|pathSpec
argument_list|,
name|servlet
argument_list|)
expr_stmt|;
name|handler
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|servlet
argument_list|)
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
return|return
name|servlet
return|;
block|}
DECL|method|createContext ()
name|ServletContextHandler
name|createContext
parameter_list|()
block|{
return|return
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
return|;
block|}
DECL|method|createPathSpec (String remaining)
specifier|private
specifier|static
name|String
name|createPathSpec
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
comment|// Is not correct as it does not support to add port in the URI
comment|//return String.format("/%s/*", remaining);
name|int
name|index
init|=
name|remaining
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|remaining
operator|.
name|substring
argument_list|(
name|index
argument_list|,
name|remaining
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"/"
operator|+
name|remaining
return|;
block|}
block|}
DECL|method|extractPortNumber (String remaining)
specifier|private
specifier|static
name|int
name|extractPortNumber
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|int
name|index1
init|=
name|remaining
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
name|index2
init|=
name|remaining
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|index1
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
name|index2
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
name|String
name|result
init|=
name|remaining
operator|.
name|substring
argument_list|(
name|index1
operator|+
literal|1
argument_list|,
name|index2
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|result
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|9292
return|;
block|}
block|}
DECL|method|extractHostName (String remaining)
specifier|private
specifier|static
name|String
name|extractHostName
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|int
name|index
init|=
name|remaining
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|remaining
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getSslKeyPassword ()
specifier|public
name|String
name|getSslKeyPassword
parameter_list|()
block|{
return|return
name|sslKeyPassword
return|;
block|}
DECL|method|getSslPassword ()
specifier|public
name|String
name|getSslPassword
parameter_list|()
block|{
return|return
name|sslPassword
return|;
block|}
DECL|method|getSslKeystore ()
specifier|public
name|String
name|getSslKeystore
parameter_list|()
block|{
return|return
name|sslKeystore
return|;
block|}
DECL|method|setSslKeyPassword (String sslKeyPassword)
specifier|public
name|void
name|setSslKeyPassword
parameter_list|(
name|String
name|sslKeyPassword
parameter_list|)
block|{
name|this
operator|.
name|sslKeyPassword
operator|=
name|sslKeyPassword
expr_stmt|;
block|}
DECL|method|setSslPassword (String sslPassword)
specifier|public
name|void
name|setSslPassword
parameter_list|(
name|String
name|sslPassword
parameter_list|)
block|{
name|this
operator|.
name|sslPassword
operator|=
name|sslPassword
expr_stmt|;
block|}
DECL|method|setSslKeystore (String sslKeystore)
specifier|public
name|void
name|setSslKeystore
parameter_list|(
name|String
name|sslKeystore
parameter_list|)
block|{
name|this
operator|.
name|sslKeystore
operator|=
name|sslKeystore
expr_stmt|;
block|}
DECL|method|setEnableJmx (boolean enableJmx)
specifier|public
name|void
name|setEnableJmx
parameter_list|(
name|boolean
name|enableJmx
parameter_list|)
block|{
name|this
operator|.
name|enableJmx
operator|=
name|enableJmx
expr_stmt|;
block|}
DECL|method|isEnableJmx ()
specifier|public
name|boolean
name|isEnableJmx
parameter_list|()
block|{
return|return
name|enableJmx
return|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|()
expr_stmt|;
comment|//LOG.info("Starting server {}:{}; static resources: {}", new Object[]{host, port, staticResources});
comment|//server = createServer(context, host, port, staticResources);
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|public
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
for|for
control|(
name|ConnectorRef
name|connectorRef
range|:
name|CONNECTORS
operator|.
name|values
argument_list|()
control|)
block|{
name|connectorRef
operator|.
name|server
operator|.
name|removeConnector
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectorRef
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|CONNECTORS
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

