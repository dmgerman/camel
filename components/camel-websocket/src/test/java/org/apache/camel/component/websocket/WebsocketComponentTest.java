begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.websocket
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|websocket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|WebsocketComponentTest
specifier|public
class|class
name|WebsocketComponentTest
block|{
DECL|field|PATH_ONE
specifier|private
specifier|static
specifier|final
name|String
name|PATH_ONE
init|=
literal|"foo"
decl_stmt|;
DECL|field|PATH_TWO
specifier|private
specifier|static
specifier|final
name|String
name|PATH_TWO
init|=
literal|"bar"
decl_stmt|;
DECL|field|PATH_SPEC_ONE
specifier|private
specifier|static
specifier|final
name|String
name|PATH_SPEC_ONE
init|=
literal|"/"
operator|+
name|PATH_ONE
operator|+
literal|"/*"
decl_stmt|;
annotation|@
name|Mock
DECL|field|consumer
specifier|private
name|WebsocketConsumer
name|consumer
decl_stmt|;
annotation|@
name|Mock
DECL|field|sync
specifier|private
name|NodeSynchronization
name|sync
decl_stmt|;
annotation|@
name|Mock
DECL|field|servlet
specifier|private
name|WebsocketComponentServlet
name|servlet
decl_stmt|;
annotation|@
name|Mock
DECL|field|servlets
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|WebsocketComponentServlet
argument_list|>
name|servlets
decl_stmt|;
annotation|@
name|Mock
DECL|field|handler
specifier|private
name|ServletContextHandler
name|handler
decl_stmt|;
annotation|@
name|Mock
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|component
specifier|private
name|WebsocketComponent
name|component
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|context
specifier|private
name|ServletContextHandler
name|context
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|component
operator|=
operator|new
name|WebsocketComponent
argument_list|()
expr_stmt|;
name|setUpJettyServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// TODO - Update tests as it fails now - chm - 22/05/2012
comment|/*      @Test     public void testCreateServerWithoutStaticContent() throws Exception {         assertEquals(1, server.getConnectors().length);         assertEquals("localhost", server.getConnectors()[0].getHost());         assertEquals(1988, server.getConnectors()[0].getPort());         assertFalse(server.getConnectors()[0].isStarted());         assertEquals(handler, server.getHandler());         assertEquals(1, server.getHandlers().length);         assertEquals(handler, server.getHandlers()[0]);         assertEquals("/", handler.getContextPath());         assertNotNull(handler.getSessionHandler());         assertNull(handler.getResourceBase());         assertNull(handler.getServletHandler().getHolderEntry("/"));     }       @Test     public void testCreateServerWithStaticContent() throws Exception {         ServletContextHandler handler = component.createContext();         Server server = component.createServer(handler, "localhost", 1988, "public/");         assertEquals(2, server.getConnectors().length);         assertEquals("localhost", server.getConnectors()[0].getHost());         assertEquals(1988, server.getConnectors()[0].getPort());         assertFalse(server.getConnectors()[0].isStarted());         assertEquals(handler, server.getHandler());         assertEquals(1, server.getHandlers().length);         assertEquals(handler, server.getHandlers()[0]);         assertEquals("/", handler.getContextPath());         assertNotNull(handler.getSessionHandler());         assertNotNull(handler.getResourceBase());         assertTrue(handler.getResourceBase().endsWith("public"));         assertNotNull(handler.getServletHandler().getHolderEntry("/"));     }       @Test     public void testCreateEndpoint() throws Exception {         Map<String, Object> parameters = new HashMap<String, Object>();          component.setCamelContext(camelContext);          Endpoint e1 = component.createEndpoint("websocket://foo", "foo", parameters);         Endpoint e2 = component.createEndpoint("websocket://foo", "foo", parameters);         Endpoint e3 = component.createEndpoint("websocket://bar", "bar", parameters);         assertNotNull(e1);         assertNotNull(e1);         assertNotNull(e1);         assertEquals(e1, e2);         assertNotSame(e1, e3);         assertNotSame(e2, e3);     }      @Test     public void testCreateServlet() throws Exception {         component.createServlet(sync, PATH_SPEC_ONE, servlets, handler);         InOrder inOrder = inOrder(servlet, consumer, sync, servlets, handler);         ArgumentCaptor<WebsocketComponentServlet> servletCaptor = ArgumentCaptor.forClass(WebsocketComponentServlet.class);         inOrder.verify(servlets, times(1)).put(eq(PATH_SPEC_ONE), servletCaptor.capture());         ArgumentCaptor<ServletHolder> holderCaptor = ArgumentCaptor.forClass(ServletHolder.class);         inOrder.verify(handler, times(1)).addServlet(holderCaptor.capture(), eq(PATH_SPEC_ONE));         inOrder.verifyNoMoreInteractions();         assertEquals(servletCaptor.getValue(), holderCaptor.getValue().getServlet());     }      @Test     public void testAddServletProducersOnly() throws Exception {         component.setCamelContext(camelContext);         component.doStart();         WebsocketComponentServlet s1 = component.addServlet(sync, null, PATH_ONE);         WebsocketComponentServlet s2 = component.addServlet(sync, null, PATH_TWO);         assertNotNull(s1);         assertNotNull(s2);         assertNotSame(s1, s2);         assertNull(s1.getConsumer());         assertNull(s2.getConsumer());         component.doStop();     }      @Test     public void testAddServletConsumersOnly() throws Exception {         component.setCamelContext(camelContext);         component.doStart();         WebsocketComponentServlet s1 = component.addServlet(sync, consumer, PATH_ONE);         WebsocketComponentServlet s2 = component.addServlet(sync, consumer, PATH_TWO);         assertNotNull(s1);         assertNotNull(s2);         assertNotSame(s1, s2);         assertEquals(consumer, s1.getConsumer());         assertEquals(consumer, s2.getConsumer());         component.doStop();     }      @Test     public void testAddServletProducerAndConsumer() throws Exception {         component.setCamelContext(camelContext);         component.doStart();         WebsocketComponentServlet s1 = component.addServlet(sync, null, PATH_ONE);         WebsocketComponentServlet s2 = component.addServlet(sync, consumer, PATH_ONE);         assertNotNull(s1);         assertNotNull(s2);         assertEquals(s1, s2);         assertEquals(consumer, s1.getConsumer());         component.doStop();     }      @Test     public void testAddServletConsumerAndProducer() throws Exception {         component.setCamelContext(camelContext);         component.setPort(0);         component.doStart();         WebsocketComponentServlet s1 = component.addServlet(sync, consumer, PATH_ONE);         WebsocketComponentServlet s2 = component.addServlet(sync, null, PATH_ONE);         assertNotNull(s1);         assertNotNull(s2);         assertEquals(s1, s2);         assertEquals(consumer, s1.getConsumer());         component.doStop();     }             */
DECL|method|setUpJettyServer ()
specifier|private
name|void
name|setUpJettyServer
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|=
name|component
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|Connector
name|connector
init|=
operator|new
name|SelectChannelConnector
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
literal|1988
argument_list|)
expr_stmt|;
name|context
operator|=
name|component
operator|.
name|createContext
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

