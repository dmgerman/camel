begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xslt.saxon
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
operator|.
name|saxon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|TransformerFactoryImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|lib
operator|.
name|ExtensionFunctionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|XsltSaxonHelper
specifier|final
class|class
name|XsltSaxonHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XsltSaxonHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|XsltSaxonHelper ()
specifier|private
name|XsltSaxonHelper
parameter_list|()
block|{     }
DECL|method|registerSaxonConfiguration (TransformerFactoryImpl factory, Configuration saxonConfiguration)
specifier|public
specifier|static
name|void
name|registerSaxonConfiguration
parameter_list|(
name|TransformerFactoryImpl
name|factory
parameter_list|,
name|Configuration
name|saxonConfiguration
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|saxonConfiguration
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|setConfiguration
argument_list|(
name|saxonConfiguration
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|registerSaxonConfigurationProperties (TransformerFactoryImpl factory, Map<String, Object> saxonConfigurationProperties)
specifier|public
specifier|static
name|void
name|registerSaxonConfigurationProperties
parameter_list|(
name|TransformerFactoryImpl
name|factory
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|saxonConfigurationProperties
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|saxonConfigurationProperties
operator|!=
literal|null
operator|&&
operator|!
name|saxonConfigurationProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|saxonConfigurationProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|factory
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setConfigurationProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|registerSaxonExtensionFunctions (TransformerFactoryImpl factory, List<Object> saxonExtensionFunctions)
specifier|public
specifier|static
name|void
name|registerSaxonExtensionFunctions
parameter_list|(
name|TransformerFactoryImpl
name|factory
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|saxonExtensionFunctions
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|saxonExtensionFunctions
operator|!=
literal|null
operator|&&
operator|!
name|saxonExtensionFunctions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|factory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|extensionFunction
range|:
name|saxonExtensionFunctions
control|)
block|{
if|if
condition|(
name|extensionFunction
operator|instanceof
name|ExtensionFunctionDefinition
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Saxon.registerExtensionFunction {}"
argument_list|,
name|extensionFunction
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getConfiguration
argument_list|()
operator|.
name|registerExtensionFunction
argument_list|(
operator|(
name|ExtensionFunctionDefinition
operator|)
name|extensionFunction
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

