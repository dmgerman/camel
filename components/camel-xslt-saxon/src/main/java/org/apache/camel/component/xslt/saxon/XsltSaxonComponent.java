begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xslt.saxon
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
operator|.
name|saxon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
operator|.
name|XsltComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EndpointHelper
import|;
end_import

begin_comment
comment|/**  * The XSLT Component is for performing XSLT transformations of messages using Saxon.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
literal|"xslt-saxon"
argument_list|)
DECL|class|XsltSaxonComponent
specifier|public
class|class
name|XsltSaxonComponent
extends|extends
name|XsltComponent
block|{
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|saxonConfiguration
specifier|private
name|Configuration
name|saxonConfiguration
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|saxonConfigurationProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|saxonConfigurationProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|saxonExtensionFunctions
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|saxonExtensionFunctions
decl_stmt|;
DECL|method|getSaxonExtensionFunctions ()
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getSaxonExtensionFunctions
parameter_list|()
block|{
return|return
name|saxonExtensionFunctions
return|;
block|}
comment|/**      * Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition.      * You would need to add camel-saxon to the classpath.      * The function is looked up in the registry, where you can comma to separate multiple values to lookup.      */
DECL|method|setSaxonExtensionFunctions (List<Object> extensionFunctions)
specifier|public
name|void
name|setSaxonExtensionFunctions
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|extensionFunctions
parameter_list|)
block|{
name|this
operator|.
name|saxonExtensionFunctions
operator|=
name|extensionFunctions
expr_stmt|;
block|}
comment|/**      * Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition.      * You would need to add camel-saxon to the classpath.      * The function is looked up in the registry, where you can comma to separate multiple values to lookup.      */
DECL|method|setSaxonExtensionFunctions (String extensionFunctions)
specifier|public
name|void
name|setSaxonExtensionFunctions
parameter_list|(
name|String
name|extensionFunctions
parameter_list|)
block|{
name|this
operator|.
name|saxonExtensionFunctions
operator|=
name|EndpointHelper
operator|.
name|resolveReferenceListParameter
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|extensionFunctions
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getSaxonConfiguration ()
specifier|public
name|Configuration
name|getSaxonConfiguration
parameter_list|()
block|{
return|return
name|saxonConfiguration
return|;
block|}
comment|/**      * To use a custom Saxon configuration      */
DECL|method|setSaxonConfiguration (Configuration saxonConfiguration)
specifier|public
name|void
name|setSaxonConfiguration
parameter_list|(
name|Configuration
name|saxonConfiguration
parameter_list|)
block|{
name|this
operator|.
name|saxonConfiguration
operator|=
name|saxonConfiguration
expr_stmt|;
block|}
DECL|method|getSaxonConfigurationProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSaxonConfigurationProperties
parameter_list|()
block|{
return|return
name|saxonConfigurationProperties
return|;
block|}
comment|/**      * To set custom Saxon configuration properties      */
DECL|method|setSaxonConfigurationProperties (Map<String, Object> configurationProperties)
specifier|public
name|void
name|setSaxonConfigurationProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configurationProperties
parameter_list|)
block|{
name|this
operator|.
name|saxonConfigurationProperties
operator|=
name|configurationProperties
expr_stmt|;
block|}
DECL|method|createXsltEndpoint (String uri)
specifier|protected
name|XsltSaxonEndpoint
name|createXsltEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|XsltSaxonEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|configureEndpoint (Endpoint endpoint, final String remaining, Map<String, Object> parameters)
specifier|protected
name|void
name|configureEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
specifier|final
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|XsltSaxonEndpoint
name|saxon
init|=
operator|(
name|XsltSaxonEndpoint
operator|)
name|endpoint
decl_stmt|;
name|saxon
operator|.
name|setContentCache
argument_list|(
name|isContentCache
argument_list|()
argument_list|)
expr_stmt|;
name|saxon
operator|.
name|setSaxonConfiguration
argument_list|(
name|saxonConfiguration
argument_list|)
expr_stmt|;
name|saxon
operator|.
name|setSaxonConfigurationProperties
argument_list|(
name|saxonConfigurationProperties
argument_list|)
expr_stmt|;
name|saxon
operator|.
name|setSaxonExtensionFunctions
argument_list|(
name|saxonExtensionFunctions
argument_list|)
expr_stmt|;
name|super
operator|.
name|configureEndpoint
argument_list|(
name|endpoint
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

