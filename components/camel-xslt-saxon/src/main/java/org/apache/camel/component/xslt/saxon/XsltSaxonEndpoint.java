begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xslt.saxon
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
operator|.
name|saxon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|TransformerFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
operator|.
name|XsltEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EndpointHelper
import|;
end_import

begin_comment
comment|/**  * Transforms the message using a XSLT template using Saxon.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed XsltSaxonEndpoint"
argument_list|)
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"3.0.0"
argument_list|,
name|scheme
operator|=
literal|"xslt-saxon"
argument_list|,
name|title
operator|=
literal|"XSLT Saxon"
argument_list|,
name|syntax
operator|=
literal|"xslt-saxon:resourceUri"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"core,transformation"
argument_list|)
DECL|class|XsltSaxonEndpoint
specifier|public
class|class
name|XsltSaxonEndpoint
extends|extends
name|XsltEndpoint
block|{
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|saxonConfiguration
specifier|private
name|Configuration
name|saxonConfiguration
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|saxonConfigurationProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|saxonConfigurationProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|saxonExtensionFunctions
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|saxonExtensionFunctions
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|displayName
operator|=
literal|"Allow StAX"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|allowStAX
specifier|private
name|boolean
name|allowStAX
init|=
literal|true
decl_stmt|;
DECL|method|XsltSaxonEndpoint (String endpointUri, Component component)
specifier|public
name|XsltSaxonEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|getSaxonExtensionFunctions ()
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getSaxonExtensionFunctions
parameter_list|()
block|{
return|return
name|saxonExtensionFunctions
return|;
block|}
comment|/**      * Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition.      * You would need to add camel-saxon to the classpath.      * The function is looked up in the registry, where you can comma to separate multiple values to lookup.      */
DECL|method|setSaxonExtensionFunctions (List<Object> extensionFunctions)
specifier|public
name|void
name|setSaxonExtensionFunctions
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|extensionFunctions
parameter_list|)
block|{
name|this
operator|.
name|saxonExtensionFunctions
operator|=
name|extensionFunctions
expr_stmt|;
block|}
comment|/**      * Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition.      * You would need to add camel-saxon to the classpath.      * The function is looked up in the registry, where you can comma to separate multiple values to lookup.      */
DECL|method|setSaxonExtensionFunctions (String extensionFunctions)
specifier|public
name|void
name|setSaxonExtensionFunctions
parameter_list|(
name|String
name|extensionFunctions
parameter_list|)
block|{
name|this
operator|.
name|saxonExtensionFunctions
operator|=
name|EndpointHelper
operator|.
name|resolveReferenceListParameter
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|extensionFunctions
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getSaxonConfiguration ()
specifier|public
name|Configuration
name|getSaxonConfiguration
parameter_list|()
block|{
return|return
name|saxonConfiguration
return|;
block|}
comment|/**      * To use a custom Saxon configuration      */
DECL|method|setSaxonConfiguration (Configuration saxonConfiguration)
specifier|public
name|void
name|setSaxonConfiguration
parameter_list|(
name|Configuration
name|saxonConfiguration
parameter_list|)
block|{
name|this
operator|.
name|saxonConfiguration
operator|=
name|saxonConfiguration
expr_stmt|;
block|}
DECL|method|getSaxonConfigurationProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSaxonConfigurationProperties
parameter_list|()
block|{
return|return
name|saxonConfigurationProperties
return|;
block|}
comment|/**      * To set custom Saxon configuration properties      */
DECL|method|setSaxonConfigurationProperties (Map<String, Object> configurationProperties)
specifier|public
name|void
name|setSaxonConfigurationProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configurationProperties
parameter_list|)
block|{
name|this
operator|.
name|saxonConfigurationProperties
operator|=
name|configurationProperties
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether to allow using StAX as the javax.xml.transform.Source"
argument_list|)
DECL|method|isAllowStAX ()
specifier|public
name|boolean
name|isAllowStAX
parameter_list|()
block|{
return|return
name|allowStAX
return|;
block|}
comment|/**      * Whether to allow using StAX as the javax.xml.transform.Source.      * You can enable this if the XSLT library supports StAX such as the Saxon library (camel-saxon).      * The Xalan library (default in JVM) does not support StAXSource.      */
DECL|method|setAllowStAX (boolean allowStAX)
specifier|public
name|void
name|setAllowStAX
parameter_list|(
name|boolean
name|allowStAX
parameter_list|)
block|{
name|this
operator|.
name|allowStAX
operator|=
name|allowStAX
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the processor is the xslt builder
name|setXslt
argument_list|(
name|createXsltBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|setProcessor
argument_list|(
name|getXslt
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createXsltBuilder ()
specifier|protected
name|XsltSaxonBuilder
name|createXsltBuilder
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CamelContext
name|ctx
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|ClassResolver
name|resolver
init|=
name|ctx
operator|.
name|getClassResolver
argument_list|()
decl_stmt|;
specifier|final
name|Injector
name|injector
init|=
name|ctx
operator|.
name|getInjector
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{} using schema resource: {}"
argument_list|,
name|this
argument_list|,
name|getResourceUri
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|XsltSaxonBuilder
name|xslt
init|=
name|injector
operator|.
name|newInstance
argument_list|(
name|XsltSaxonBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|TransformerFactory
name|factory
init|=
name|getTransformerFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getTransformerFactoryClass
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// create new saxon factory
name|factory
operator|=
operator|new
name|TransformerFactoryImpl
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// provide the class loader of this component to work in OSGi environments
name|Class
argument_list|<
name|TransformerFactory
argument_list|>
name|factoryClass
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
name|getTransformerFactoryClass
argument_list|()
argument_list|,
name|TransformerFactory
operator|.
name|class
argument_list|,
name|XsltSaxonComponent
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Using TransformerFactoryClass {}"
argument_list|,
name|factoryClass
argument_list|)
expr_stmt|;
name|factory
operator|=
name|injector
operator|.
name|newInstance
argument_list|(
name|factoryClass
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|factory
operator|instanceof
name|TransformerFactoryImpl
condition|)
block|{
name|TransformerFactoryImpl
name|tf
init|=
operator|(
name|TransformerFactoryImpl
operator|)
name|factory
decl_stmt|;
name|XsltSaxonHelper
operator|.
name|registerSaxonConfiguration
argument_list|(
name|tf
argument_list|,
name|saxonConfiguration
argument_list|)
expr_stmt|;
name|XsltSaxonHelper
operator|.
name|registerSaxonConfigurationProperties
argument_list|(
name|tf
argument_list|,
name|saxonConfigurationProperties
argument_list|)
expr_stmt|;
name|XsltSaxonHelper
operator|.
name|registerSaxonExtensionFunctions
argument_list|(
name|tf
argument_list|,
name|saxonExtensionFunctions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using TransformerFactory {}"
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|xslt
operator|.
name|setTransformerFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getResultHandlerFactory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xslt
operator|.
name|setResultHandlerFactory
argument_list|(
name|getResultHandlerFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getErrorListener
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xslt
operator|.
name|errorListener
argument_list|(
name|getErrorListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xslt
operator|.
name|setFailOnNullBody
argument_list|(
name|isFailOnNullBody
argument_list|()
argument_list|)
expr_stmt|;
name|xslt
operator|.
name|transformerCacheSize
argument_list|(
name|getTransformerCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|xslt
operator|.
name|setUriResolver
argument_list|(
name|getUriResolver
argument_list|()
argument_list|)
expr_stmt|;
name|xslt
operator|.
name|setEntityResolver
argument_list|(
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
name|xslt
operator|.
name|setAllowStAX
argument_list|(
name|allowStAX
argument_list|)
expr_stmt|;
name|xslt
operator|.
name|setDeleteOutputFile
argument_list|(
name|isDeleteOutputFile
argument_list|()
argument_list|)
expr_stmt|;
name|configureOutput
argument_list|(
name|xslt
argument_list|,
name|getOutput
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// any additional transformer parameters then make a copy to avoid side-effects
if|if
condition|(
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|copy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|xslt
operator|.
name|setParameters
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
comment|// must load resource first which sets a template and do a stylesheet compilation to catch errors early
name|loadResource
argument_list|(
name|getResourceUri
argument_list|()
argument_list|,
name|xslt
argument_list|)
expr_stmt|;
return|return
name|xslt
return|;
block|}
block|}
end_class

end_unit

