begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.johnzon
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|johnzon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|johnzon
operator|.
name|mapper
operator|.
name|reflection
operator|.
name|JohnzonParameterizedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|JohnzonDataFormatTest
specifier|public
class|class
name|JohnzonDataFormatTest
block|{
annotation|@
name|Test
DECL|method|testString ()
specifier|public
name|void
name|testString
parameter_list|()
throws|throws
name|Exception
block|{
name|testJson
argument_list|(
literal|"\"A string\""
argument_list|,
literal|"A string"
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMap ()
specifier|public
name|void
name|testMap
parameter_list|()
throws|throws
name|Exception
block|{
name|testJson
argument_list|(
literal|"{\"value\":123}"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"value"
argument_list|,
literal|123
argument_list|)
argument_list|,
name|Map
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testList ()
specifier|public
name|void
name|testList
parameter_list|()
throws|throws
name|Exception
block|{
name|JohnzonParameterizedType
name|type
init|=
operator|new
name|JohnzonParameterizedType
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|testJson
argument_list|(
literal|"[{\"value\":123}]"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"value"
argument_list|,
literal|123
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArray ()
specifier|public
name|void
name|testArray
parameter_list|()
throws|throws
name|Exception
block|{
name|testJson
argument_list|(
literal|"{}"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSkipEmptyArray ()
specifier|public
name|void
name|testSkipEmptyArray
parameter_list|()
throws|throws
name|Exception
block|{
name|JohnzonParameterizedType
name|type
init|=
operator|new
name|JohnzonParameterizedType
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|)
decl_stmt|;
name|testJson
argument_list|(
literal|"[{\"value\":123}]"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|testJson (String json, Object expected, Class<?> unmarshalType, JohnzonParameterizedType parameterizedType)
specifier|private
name|void
name|testJson
parameter_list|(
name|String
name|json
parameter_list|,
name|Object
name|expected
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|JohnzonParameterizedType
name|parameterizedType
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|unmarshalled
decl_stmt|;
name|JohnzonDataFormat
name|johnzonDataFormat
decl_stmt|;
if|if
condition|(
name|unmarshalType
operator|!=
literal|null
condition|)
block|{
name|johnzonDataFormat
operator|=
operator|new
name|JohnzonDataFormat
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|johnzonDataFormat
operator|=
operator|new
name|JohnzonDataFormat
argument_list|(
name|parameterizedType
argument_list|)
expr_stmt|;
block|}
name|johnzonDataFormat
operator|.
name|setSkipEmptyArray
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|johnzonDataFormat
operator|.
name|doStart
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|json
operator|.
name|getBytes
argument_list|()
argument_list|)
init|)
block|{
name|unmarshalled
operator|=
name|johnzonDataFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DefaultExchange
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|unmarshalled
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

