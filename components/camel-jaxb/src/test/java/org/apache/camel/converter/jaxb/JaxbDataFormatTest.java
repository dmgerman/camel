begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMockSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|same
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|JaxbDataFormatTest
specifier|public
class|class
name|JaxbDataFormatTest
extends|extends
name|EasyMockSupport
block|{
DECL|field|jaxbDataFormat
specifier|private
name|JaxbDataFormat
name|jaxbDataFormat
decl_stmt|;
DECL|field|exchangeMock
specifier|private
name|Exchange
name|exchangeMock
decl_stmt|;
DECL|field|marshallerMock
specifier|private
name|Marshaller
name|marshallerMock
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|jaxbDataFormat
operator|=
operator|new
name|JaxbDataFormat
argument_list|()
expr_stmt|;
name|marshallerMock
operator|=
name|createStrictMock
argument_list|(
name|Marshaller
operator|.
name|class
argument_list|)
expr_stmt|;
name|exchangeMock
operator|=
name|createStrictMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNeedFiltering ()
specifier|public
name|void
name|testNeedFiltering
parameter_list|()
block|{
comment|// tests combinations of data format option and exchange property
name|expect
argument_list|(
name|exchangeMock
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|FILTER_NON_XML_CHARS
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Not expected filtering here"
argument_list|,
name|jaxbDataFormat
operator|.
name|needFiltering
argument_list|(
name|exchangeMock
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAll
argument_list|()
expr_stmt|;
name|resetAll
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|exchangeMock
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|FILTER_NON_XML_CHARS
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected filtering here"
argument_list|,
name|jaxbDataFormat
operator|.
name|needFiltering
argument_list|(
name|exchangeMock
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAll
argument_list|()
expr_stmt|;
name|resetAll
argument_list|()
expr_stmt|;
name|jaxbDataFormat
operator|.
name|setFilterNonXmlChars
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|exchangeMock
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|FILTER_NON_XML_CHARS
argument_list|,
literal|true
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Not expected filtering here"
argument_list|,
name|jaxbDataFormat
operator|.
name|needFiltering
argument_list|(
name|exchangeMock
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAll
argument_list|()
expr_stmt|;
name|resetAll
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|exchangeMock
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|FILTER_NON_XML_CHARS
argument_list|,
literal|true
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected filtering here"
argument_list|,
name|jaxbDataFormat
operator|.
name|needFiltering
argument_list|(
name|exchangeMock
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAll
argument_list|()
expr_stmt|;
name|resetAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalFilteringDisabled ()
specifier|public
name|void
name|testMarshalFilteringDisabled
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|JAXBException
block|{
name|JaxbDataFormat
name|jaxbDataFormatMock
init|=
name|createMockBuilder
argument_list|(
name|JaxbDataFormat
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"needFiltering"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
name|Object
name|graph
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|OutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|jaxbDataFormatMock
operator|.
name|needFiltering
argument_list|(
name|exchangeMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|marshallerMock
operator|.
name|marshal
argument_list|(
name|same
argument_list|(
name|graph
argument_list|)
argument_list|,
name|same
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|jaxbDataFormatMock
operator|.
name|marshal
argument_list|(
name|exchangeMock
argument_list|,
name|graph
argument_list|,
name|stream
argument_list|,
name|marshallerMock
argument_list|)
expr_stmt|;
name|verifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalFilteringEnabled ()
specifier|public
name|void
name|testMarshalFilteringEnabled
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|JAXBException
block|{
name|JaxbDataFormat
name|jaxbDataFormatMock
init|=
name|createMockBuilder
argument_list|(
name|JaxbDataFormat
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"needFiltering"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
name|Object
name|graph
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|OutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|jaxbDataFormatMock
operator|.
name|needFiltering
argument_list|(
name|exchangeMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|marshallerMock
operator|.
name|marshal
argument_list|(
name|same
argument_list|(
name|graph
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FilteringXmlStreamWriter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|jaxbDataFormatMock
operator|.
name|marshal
argument_list|(
name|exchangeMock
argument_list|,
name|graph
argument_list|,
name|stream
argument_list|,
name|marshallerMock
argument_list|)
expr_stmt|;
name|verifyAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

