begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
operator|.
name|JaxbDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|foo
operator|.
name|bar
operator|.
name|PersonType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CamelJaxbTest
specifier|public
class|class
name|CamelJaxbTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testUnmarshalBadCharsWithFiltering ()
specifier|public
name|void
name|testUnmarshalBadCharsWithFiltering
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
literal|"<Person><firstName>FOO</firstName><lastName>BAR\u0008</lastName></Person>"
decl_stmt|;
name|PersonType
name|expected
init|=
operator|new
name|PersonType
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setFirstName
argument_list|(
literal|"FOO"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setLastName
argument_list|(
literal|"BAR "
argument_list|)
expr_stmt|;
name|MockEndpoint
name|resultEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:unmarshalFilteringEnabled"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CamelExecutionException
operator|.
name|class
argument_list|)
DECL|method|testUnmarshalBadCharsNoFiltering ()
specifier|public
name|void
name|testUnmarshalBadCharsNoFiltering
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
literal|"<Person><firstName>FOO</firstName><lastName>BAR\u0008</lastName></Person>"
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:getJAXBElementValue"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalBadCharsWithFiltering ()
specifier|public
name|void
name|testMarshalBadCharsWithFiltering
parameter_list|()
throws|throws
name|Exception
block|{
name|PersonType
name|person
init|=
operator|new
name|PersonType
argument_list|()
decl_stmt|;
name|person
operator|.
name|setFirstName
argument_list|(
literal|"foo\u0004"
argument_list|)
expr_stmt|;
name|person
operator|.
name|setLastName
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|resultEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:marshalFilteringEnabled"
argument_list|,
name|person
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|String
name|body
init|=
name|resultEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Non-xml character wasn't replaced"
argument_list|,
name|body
operator|.
name|contains
argument_list|(
literal|"\u0004"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalBadCharsNoFiltering ()
specifier|public
name|void
name|testMarshalBadCharsNoFiltering
parameter_list|()
throws|throws
name|Exception
block|{
name|PersonType
name|person
init|=
operator|new
name|PersonType
argument_list|()
decl_stmt|;
name|person
operator|.
name|setFirstName
argument_list|(
literal|"foo\u0004"
argument_list|)
expr_stmt|;
name|person
operator|.
name|setLastName
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|resultEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:marshal"
argument_list|,
name|person
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|String
name|body
init|=
name|resultEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Non-xml character unexpectedly did not get into marshalled contents"
argument_list|,
name|body
operator|.
name|contains
argument_list|(
literal|"\u0004"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalWithSchemaLocation ()
specifier|public
name|void
name|testMarshalWithSchemaLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|PersonType
name|person
init|=
operator|new
name|PersonType
argument_list|()
decl_stmt|;
name|person
operator|.
name|setFirstName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|person
operator|.
name|setLastName
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|resultEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:marshal"
argument_list|,
name|person
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|String
name|body
init|=
name|resultEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"We should get the schemaLocation here"
argument_list|,
name|body
operator|.
name|contains
argument_list|(
literal|"schemaLocation=\"person.xsd\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomXmlStreamWriter ()
specifier|public
name|void
name|testCustomXmlStreamWriter
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|PersonType
name|person
init|=
operator|new
name|PersonType
argument_list|()
decl_stmt|;
name|person
operator|.
name|setFirstName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|person
operator|.
name|setLastName
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|resultEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:marshalCustomWriter"
argument_list|,
name|person
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|String
name|body
init|=
name|resultEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Body did not get processed correctly by custom filter"
argument_list|,
name|body
operator|.
name|contains
argument_list|(
literal|"-Foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomXmlStreamWriterAndFiltering ()
specifier|public
name|void
name|testCustomXmlStreamWriterAndFiltering
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|PersonType
name|person
init|=
operator|new
name|PersonType
argument_list|()
decl_stmt|;
name|person
operator|.
name|setFirstName
argument_list|(
literal|"foo\u0004"
argument_list|)
expr_stmt|;
name|person
operator|.
name|setLastName
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|resultEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:marshalCustomWriterAndFiltering"
argument_list|,
name|person
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|String
name|body
init|=
name|resultEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Non-xml character unexpectedly did not get into marshalled contents"
argument_list|,
name|body
operator|.
name|contains
argument_list|(
literal|"\u0004"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Body did not get processed correctly by custom filter"
argument_list|,
name|body
operator|.
name|contains
argument_list|(
literal|"-Foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnmarshal ()
specifier|public
name|void
name|testUnmarshal
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|xml
init|=
literal|"<Person><firstName>FOO</firstName><lastName>BAR</lastName></Person>"
decl_stmt|;
name|PersonType
name|expected
init|=
operator|new
name|PersonType
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setFirstName
argument_list|(
literal|"FOO"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setLastName
argument_list|(
literal|"BAR"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|resultEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:getJAXBElementValue"
argument_list|,
name|xml
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:getJAXBElement"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We should get the JAXBElement here"
argument_list|,
name|resultEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|instanceof
name|JAXBElement
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:unmarshall"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxbDataFormat
name|dataFormat
init|=
operator|new
name|JaxbDataFormat
argument_list|(
literal|"org.apache.camel.foo.bar"
argument_list|)
decl_stmt|;
name|dataFormat
operator|.
name|setSchemaLocation
argument_list|(
literal|"person.xsd"
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setIgnoreJAXBElement
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JaxbDataFormat
name|filterEnabledFormat
init|=
operator|new
name|JaxbDataFormat
argument_list|(
literal|"org.apache.camel.foo.bar"
argument_list|)
decl_stmt|;
name|filterEnabledFormat
operator|.
name|setFilterNonXmlChars
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JaxbDataFormat
name|customWriterFormat
init|=
operator|new
name|JaxbDataFormat
argument_list|(
literal|"org.apache.camel.foo.bar"
argument_list|)
decl_stmt|;
name|customWriterFormat
operator|.
name|setXmlStreamWriterWrapper
argument_list|(
operator|new
name|TestXmlStreamWriter
argument_list|()
argument_list|)
expr_stmt|;
name|JaxbDataFormat
name|customWriterAndFilterFormat
init|=
operator|new
name|JaxbDataFormat
argument_list|(
literal|"org.apache.camel.foo.bar"
argument_list|)
decl_stmt|;
name|customWriterAndFilterFormat
operator|.
name|setFilterNonXmlChars
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customWriterAndFilterFormat
operator|.
name|setXmlStreamWriterWrapper
argument_list|(
operator|new
name|TestXmlStreamWriter
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getJAXBElementValue"
argument_list|)
operator|.
name|unmarshal
argument_list|(
operator|new
name|JaxbDataFormat
argument_list|(
literal|"org.apache.camel.foo.bar"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getJAXBElement"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|dataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:unmarshalFilteringEnabled"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|filterEnabledFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:marshal"
argument_list|)
operator|.
name|marshal
argument_list|(
name|dataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:marshalFilteringEnabled"
argument_list|)
operator|.
name|marshal
argument_list|(
name|filterEnabledFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:marshalCustomWriter"
argument_list|)
operator|.
name|marshal
argument_list|(
name|customWriterFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:marshalCustomWriterAndFiltering"
argument_list|)
operator|.
name|marshal
argument_list|(
name|customWriterAndFilterFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:unmarshall"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|jaxb
argument_list|(
name|PersonType
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

