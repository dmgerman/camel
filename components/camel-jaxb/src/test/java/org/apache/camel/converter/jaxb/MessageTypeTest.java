begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|ExchangeTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|MessageTypeTest
specifier|public
class|class
name|MessageTypeTest
extends|extends
name|ExchangeTestSupport
block|{
DECL|field|jaxbContext
specifier|protected
name|JAXBContext
name|jaxbContext
decl_stmt|;
annotation|@
name|Test
DECL|method|testCamelToJaxbUsingExplicitJaxbConverter ()
specifier|public
name|void
name|testCamelToJaxbUsingExplicitJaxbConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageDefinition
name|messageType
init|=
name|JaxbConverter
operator|.
name|toMessageType
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a valid message Type"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|messageType
operator|.
name|getHeaderMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|messageType
operator|.
name|getHeaderMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello id='m123'>world!</hello>"
argument_list|,
name|messageType
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|marshalMessage
argument_list|(
name|messageType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|jaxbContext
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
literal|"org.apache.camel.converter.jaxb"
argument_list|)
expr_stmt|;
block|}
DECL|method|marshalMessage (Object object)
specifier|protected
name|void
name|marshalMessage
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|Marshaller
name|marshaller
init|=
name|jaxbContext
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FORMATTED_OUTPUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|object
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should be XML"
argument_list|,
name|out
operator|.
name|startsWith
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should containt string header"
argument_list|,
name|out
operator|.
name|indexOf
argument_list|(
literal|"<header value=\"abc\" name=\"foo\"/>"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should containt int header"
argument_list|,
name|out
operator|.
name|indexOf
argument_list|(
literal|"<intHeader value=\"123\" name=\"bar\"/>"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should containt the body"
argument_list|,
name|out
operator|.
name|indexOf
argument_list|(
literal|"&lt;hello id='m123'&gt;world!&lt;/hello&gt;"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

