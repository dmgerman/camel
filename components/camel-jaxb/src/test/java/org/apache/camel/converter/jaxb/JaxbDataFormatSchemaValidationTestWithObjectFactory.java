begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
operator|.
name|message
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JaxbDataFormatSchemaValidationTestWithObjectFactory
specifier|public
class|class
name|JaxbDataFormatSchemaValidationTestWithObjectFactory
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:marshall"
argument_list|)
DECL|field|mockMarshall
specifier|private
name|MockEndpoint
name|mockMarshall
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:unmarshall"
argument_list|)
DECL|field|mockUnmarshall
specifier|private
name|MockEndpoint
name|mockUnmarshall
decl_stmt|;
DECL|field|jbCtx
specifier|private
name|JAXBContext
name|jbCtx
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|XmlRootElement
name|xmlRootElementAnnotation
init|=
name|Message
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|xmlRootElementAnnotation
argument_list|)
expr_stmt|;
name|jbCtx
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Message
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshallOfNonRootElementWithValidationException ()
specifier|public
name|void
name|testMarshallOfNonRootElementWithValidationException
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:marshall"
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CamelExecutionException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"javax.xml.bind.MarshalException"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"org.xml.sax.SAXParseException"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cvc-complex-type.2.4.b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUnmarshallOfNonRootWithValidationException ()
specifier|public
name|void
name|testUnmarshallOfNonRootWithValidationException
parameter_list|()
throws|throws
name|Exception
block|{
name|JAXBElement
argument_list|<
name|Message
argument_list|>
name|message
init|=
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createMessage
argument_list|(
operator|new
name|Message
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|xml
decl_stmt|;
try|try
init|(
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|jbCtx
operator|.
name|createMarshaller
argument_list|()
operator|.
name|marshal
argument_list|(
name|message
argument_list|,
name|baos
argument_list|)
expr_stmt|;
name|xml
operator|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:unmarshall"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CamelExecutionException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"javax.xml.bind.UnmarshalException"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"org.xml.sax.SAXParseException"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cvc-complex-type.2.4.b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxbDataFormat
name|jaxbDataFormat
init|=
operator|new
name|JaxbDataFormat
argument_list|()
decl_stmt|;
name|jaxbDataFormat
operator|.
name|setContextPath
argument_list|(
name|Message
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jaxbDataFormat
operator|.
name|setSchema
argument_list|(
literal|"classpath:message.xsd"
argument_list|)
expr_stmt|;
comment|// if the following is removed the lookup of an object factory method which can create the element
comment|// won't be done and the object won'T get marshalled
name|jaxbDataFormat
operator|.
name|setObjectFactory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:marshall"
argument_list|)
operator|.
name|marshal
argument_list|(
name|jaxbDataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:marshall"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:unmarshall"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|jaxbDataFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unmarshall"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

