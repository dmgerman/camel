begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
operator|.
name|JaxbDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version  */
end_comment

begin_class
DECL|class|DataFormatConcurrentTest
specifier|public
class|class
name|DataFormatConcurrentTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|size
specifier|private
name|int
name|size
init|=
literal|2000
decl_stmt|;
DECL|field|warmupCount
specifier|private
name|int
name|warmupCount
init|=
literal|100
decl_stmt|;
DECL|field|testCycleCount
specifier|private
name|int
name|testCycleCount
init|=
literal|10000
decl_stmt|;
DECL|field|fooBarSize
specifier|private
name|int
name|fooBarSize
init|=
literal|50
decl_stmt|;
annotation|@
name|Test
DECL|method|testUnmarshalConcurrent ()
specifier|public
name|void
name|testUnmarshalConcurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|setDefaultEndpointUri
argument_list|(
literal|"direct:unmarshal"
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|warmupCount
operator|+
name|testCycleCount
argument_list|)
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:unmarshal"
argument_list|)
operator|.
name|unmarshal
argument_list|(
operator|new
name|JaxbDataFormat
argument_list|(
literal|"org.apache.camel.example"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|unmarshal
argument_list|(
name|latch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnmarshalFallbackConcurrent ()
specifier|public
name|void
name|testUnmarshalFallbackConcurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|setDefaultEndpointUri
argument_list|(
literal|"direct:unmarshalFallback"
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|warmupCount
operator|+
name|testCycleCount
argument_list|)
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:unmarshalFallback"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|Foo
operator|.
name|class
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|unmarshal
argument_list|(
name|latch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshallConcurrent ()
specifier|public
name|void
name|testMarshallConcurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|setDefaultEndpointUri
argument_list|(
literal|"direct:marshal"
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|warmupCount
operator|+
name|testCycleCount
argument_list|)
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:marshal"
argument_list|)
operator|.
name|marshal
argument_list|(
operator|new
name|JaxbDataFormat
argument_list|(
literal|"org.apache.camel.example"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|marshal
argument_list|(
name|latch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshallFallbackConcurrent ()
specifier|public
name|void
name|testMarshallFallbackConcurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|setDefaultEndpointUri
argument_list|(
literal|"direct:marshalFallback"
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|warmupCount
operator|+
name|testCycleCount
argument_list|)
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:marshalFallback"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|marshal
argument_list|(
name|latch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendConcurrent ()
specifier|public
name|void
name|testSendConcurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// wait for seda consumer to start up properly
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|// sleep a little so we interleave with the marshaller
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PurchaseOrder
name|bean
init|=
operator|new
name|PurchaseOrder
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setName
argument_list|(
literal|"Beer"
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setAmount
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setPrice
argument_list|(
literal|2.5
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:start?size="
operator|+
name|size
operator|+
literal|"&concurrentConsumers=5"
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|unmarshal (final CountDownLatch latch)
specifier|public
name|void
name|unmarshal
parameter_list|(
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
throws|throws
name|Exception
block|{
comment|// warm up
name|ByteArrayInputStream
index|[]
name|warmUpPayloads
init|=
name|createPayloads
argument_list|(
name|warmupCount
argument_list|)
decl_stmt|;
for|for
control|(
name|ByteArrayInputStream
name|payload
range|:
name|warmUpPayloads
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ByteArrayInputStream
index|[]
name|payloads
init|=
name|createPayloads
argument_list|(
name|testCycleCount
argument_list|)
decl_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payloads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|finalI
init|=
name|i
decl_stmt|;
name|pool
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|payloads
index|[
name|finalI
index|]
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending {} messages to {} took {} ms"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|payloads
operator|.
name|length
block|,
name|template
operator|.
name|getDefaultEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
block|,
name|end
operator|-
name|start
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|marshal (final CountDownLatch latch)
specifier|public
name|void
name|marshal
parameter_list|(
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
throws|throws
name|Exception
block|{
comment|// warm up
name|Foo
index|[]
name|warmUpPayloads
init|=
name|createFoo
argument_list|(
name|warmupCount
argument_list|)
decl_stmt|;
for|for
control|(
name|Foo
name|payload
range|:
name|warmUpPayloads
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Foo
index|[]
name|payloads
init|=
name|createFoo
argument_list|(
name|testCycleCount
argument_list|)
decl_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payloads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|finalI
init|=
name|i
decl_stmt|;
name|pool
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|payloads
index|[
name|finalI
index|]
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending {} messages to {} took {} ms"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|payloads
operator|.
name|length
block|,
name|template
operator|.
name|getDefaultEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
block|,
name|end
operator|-
name|start
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * the individual size of one record is:      * fooBarSize = 1  -> 104 bytes      * fooBarSize = 50 -> 2046 bytes      * @return the payloads used for this stress test      * @throws Exception      */
DECL|method|createFoo (int testCount)
specifier|public
name|Foo
index|[]
name|createFoo
parameter_list|(
name|int
name|testCount
parameter_list|)
throws|throws
name|Exception
block|{
name|Foo
index|[]
name|foos
init|=
operator|new
name|Foo
index|[
name|testCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCount
condition|;
name|i
operator|++
control|)
block|{
name|Foo
name|foo
init|=
operator|new
name|Foo
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|fooBarSize
condition|;
name|x
operator|++
control|)
block|{
name|Bar
name|bar
init|=
operator|new
name|Bar
argument_list|()
decl_stmt|;
name|bar
operator|.
name|setName
argument_list|(
literal|"Name: "
operator|+
name|x
argument_list|)
expr_stmt|;
name|bar
operator|.
name|setValue
argument_list|(
literal|"value: "
operator|+
name|x
argument_list|)
expr_stmt|;
name|foo
operator|.
name|getBarRefs
argument_list|()
operator|.
name|add
argument_list|(
name|bar
argument_list|)
expr_stmt|;
block|}
name|foos
index|[
name|i
index|]
operator|=
name|foo
expr_stmt|;
block|}
return|return
name|foos
return|;
block|}
comment|/**      * the individual size of one record is:      * fooBarSize = 1  -> 104 bytes      * fooBarSize = 50 -> 2046 bytes      * @return the payloads used for this stress test      * @throws Exception      */
DECL|method|createPayloads (int testCount)
specifier|public
name|ByteArrayInputStream
index|[]
name|createPayloads
parameter_list|(
name|int
name|testCount
parameter_list|)
throws|throws
name|Exception
block|{
name|Foo
name|foo
init|=
operator|new
name|Foo
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|fooBarSize
condition|;
name|x
operator|++
control|)
block|{
name|Bar
name|bar
init|=
operator|new
name|Bar
argument_list|()
decl_stmt|;
name|bar
operator|.
name|setName
argument_list|(
literal|"Name: "
operator|+
name|x
argument_list|)
expr_stmt|;
name|bar
operator|.
name|setValue
argument_list|(
literal|"value: "
operator|+
name|x
argument_list|)
expr_stmt|;
name|foo
operator|.
name|getBarRefs
argument_list|()
operator|.
name|add
argument_list|(
name|bar
argument_list|)
expr_stmt|;
block|}
name|Marshaller
name|m
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Foo
operator|.
name|class
argument_list|,
name|Bar
operator|.
name|class
argument_list|)
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|m
operator|.
name|marshal
argument_list|(
name|foo
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|byte
index|[]
name|payload
init|=
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
index|[]
name|streams
init|=
operator|new
name|ByteArrayInputStream
index|[
name|testCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCount
condition|;
name|i
operator|++
control|)
block|{
name|streams
index|[
name|i
index|]
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
return|return
name|streams
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|DataFormat
name|jaxb
init|=
operator|new
name|JaxbDataFormat
argument_list|(
literal|"org.apache.camel.example"
argument_list|)
decl_stmt|;
comment|// use seda that supports concurrent consumers for concurrency
name|from
argument_list|(
literal|"seda:start?size="
operator|+
name|size
operator|+
literal|"&concurrentConsumers=5"
argument_list|)
operator|.
name|marshal
argument_list|(
name|jaxb
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

