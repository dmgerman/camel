begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyChar
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|NonXmlCharFiltererTest
specifier|public
class|class
name|NonXmlCharFiltererTest
block|{
DECL|field|nonXmlCharFilterer
specifier|private
name|NonXmlCharFilterer
name|nonXmlCharFilterer
decl_stmt|;
annotation|@
name|Mock
DECL|field|nonXmlCharFiltererMock
specifier|private
name|NonXmlCharFilterer
name|nonXmlCharFiltererMock
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|nonXmlCharFilterer
operator|=
operator|new
name|NonXmlCharFilterer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsFilteredValidChars ()
specifier|public
name|void
name|testIsFilteredValidChars
parameter_list|()
block|{
comment|// Per http://www.w3.org/TR/2004/REC-xml-20040204/#NT-Char
comment|// Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] |
comment|// [#x10000-#x10FFFF]
name|checkSingleValid
argument_list|(
literal|0x9
argument_list|)
expr_stmt|;
name|checkSingleValid
argument_list|(
literal|0xA
argument_list|)
expr_stmt|;
name|checkSingleValid
argument_list|(
literal|0xD
argument_list|)
expr_stmt|;
name|checkRangeValid
argument_list|(
literal|0x20
argument_list|,
literal|0xD7FF
argument_list|)
expr_stmt|;
name|checkRangeValid
argument_list|(
literal|0xE000
argument_list|,
literal|0xFFFD
argument_list|)
expr_stmt|;
comment|// not checking [0x10000, 0x10FFFF], as it goes beyond
comment|// Character.MAX_VALUE
block|}
annotation|@
name|Test
DECL|method|testIsFilteredInvalidChars ()
specifier|public
name|void
name|testIsFilteredInvalidChars
parameter_list|()
block|{
comment|// Per http://www.w3.org/TR/2004/REC-xml-20040204/#NT-Char
comment|// Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] |
comment|// [#x10000-#x10FFFF]
name|checkRangeInvalid
argument_list|(
literal|0x0
argument_list|,
literal|0x8
argument_list|)
expr_stmt|;
name|checkRangeInvalid
argument_list|(
literal|0xB
argument_list|,
literal|0xC
argument_list|)
expr_stmt|;
name|checkRangeInvalid
argument_list|(
literal|0xE
argument_list|,
literal|0x1F
argument_list|)
expr_stmt|;
name|checkRangeInvalid
argument_list|(
literal|0xD800
argument_list|,
literal|0xDFFF
argument_list|)
expr_stmt|;
name|checkRangeInvalid
argument_list|(
literal|0xFFFE
argument_list|,
literal|0xFFFF
argument_list|)
expr_stmt|;
comment|// no need to check beyond #x10FFFF as this is greater than
comment|// Character.MAX_VALUE
block|}
annotation|@
name|Test
DECL|method|testFilter1ArgNonFiltered ()
specifier|public
name|void
name|testFilter1ArgNonFiltered
parameter_list|()
block|{
name|when
argument_list|(
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
name|any
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|string
init|=
literal|"abc"
decl_stmt|;
name|String
name|result
init|=
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|nonXmlCharFiltererMock
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|char
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Should have returned the same string if nothing was filtered"
argument_list|,
name|string
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilter1ArgFiltered ()
specifier|public
name|void
name|testFilter1ArgFiltered
parameter_list|()
block|{
name|when
argument_list|(
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
name|eq
argument_list|(
operator|new
name|char
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|char
index|[]
name|buffer
init|=
operator|(
name|char
index|[]
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|buffer
index|[
literal|0
index|]
operator|=
literal|'i'
expr_stmt|;
name|buffer
index|[
literal|1
index|]
operator|=
literal|'o'
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|nonXmlCharFiltererMock
argument_list|)
operator|.
name|filter
argument_list|(
name|any
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have returned filtered string"
argument_list|,
literal|"ioc"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilter1ArgNullArg ()
specifier|public
name|void
name|testFilter1ArgNullArg
parameter_list|()
block|{
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nonXmlCharFiltererMock
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|any
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilter3Args ()
specifier|public
name|void
name|testFilter3Args
parameter_list|()
block|{
name|when
argument_list|(
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
name|any
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|nonXmlCharFiltererMock
operator|.
name|isFiltered
argument_list|(
name|anyChar
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[]
block|{
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|}
decl_stmt|;
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
name|buffer
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nonXmlCharFiltererMock
argument_list|)
operator|.
name|isFiltered
argument_list|(
literal|'3'
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nonXmlCharFiltererMock
argument_list|)
operator|.
name|isFiltered
argument_list|(
literal|'4'
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nonXmlCharFiltererMock
argument_list|)
operator|.
name|isFiltered
argument_list|(
literal|'5'
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Unexpected buffer contents"
argument_list|,
operator|new
name|char
index|[]
block|{
literal|'1'
block|,
literal|'2'
block|,
literal|' '
block|,
literal|'4'
block|,
literal|' '
block|,
literal|'6'
block|}
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilter3ArgsNullArg ()
specifier|public
name|void
name|testFilter3ArgsNullArg
parameter_list|()
block|{
name|nonXmlCharFilterer
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSingleValid (int charCode)
specifier|private
name|void
name|checkSingleValid
parameter_list|(
name|int
name|charCode
parameter_list|)
block|{
name|checkRangeValid
argument_list|(
name|charCode
argument_list|,
name|charCode
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRangeValid (int startCharCodeInclusive, int endCharCodeInclusive)
specifier|private
name|void
name|checkRangeValid
parameter_list|(
name|int
name|startCharCodeInclusive
parameter_list|,
name|int
name|endCharCodeInclusive
parameter_list|)
block|{
for|for
control|(
name|int
name|charCode
init|=
name|startCharCodeInclusive
init|;
name|charCode
operator|<=
name|endCharCodeInclusive
condition|;
name|charCode
operator|++
control|)
block|{
if|if
condition|(
name|nonXmlCharFilterer
operator|.
name|isFiltered
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Character "
operator|+
name|asHex
argument_list|(
name|charCode
argument_list|)
operator|+
literal|" from range ["
operator|+
name|asHex
argument_list|(
name|startCharCodeInclusive
argument_list|)
operator|+
literal|"-"
operator|+
name|asHex
argument_list|(
name|endCharCodeInclusive
argument_list|)
operator|+
literal|"] should be valid, but it is not"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkRangeInvalid (int startCharCodeInclusive, int endCharCodeInclusive)
specifier|private
name|void
name|checkRangeInvalid
parameter_list|(
name|int
name|startCharCodeInclusive
parameter_list|,
name|int
name|endCharCodeInclusive
parameter_list|)
block|{
for|for
control|(
name|int
name|charCode
init|=
name|startCharCodeInclusive
init|;
name|charCode
operator|<=
name|endCharCodeInclusive
condition|;
name|charCode
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|nonXmlCharFilterer
operator|.
name|isFiltered
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Character "
operator|+
name|asHex
argument_list|(
name|charCode
argument_list|)
operator|+
literal|" from range ["
operator|+
name|asHex
argument_list|(
name|startCharCodeInclusive
argument_list|)
operator|+
literal|"-"
operator|+
name|asHex
argument_list|(
name|endCharCodeInclusive
argument_list|)
operator|+
literal|"] should not be valid, but it is"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|asHex (int charCode)
specifier|private
name|String
name|asHex
parameter_list|(
name|int
name|charCode
parameter_list|)
block|{
return|return
literal|"#x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|charCode
argument_list|)
return|;
block|}
block|}
end_class

end_unit

