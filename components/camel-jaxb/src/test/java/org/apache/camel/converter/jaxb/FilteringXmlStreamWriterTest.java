begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|same
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|FilteringXmlStreamWriterTest
specifier|public
class|class
name|FilteringXmlStreamWriterTest
block|{
DECL|field|filteringXmlStreamWriter
specifier|private
name|FilteringXmlStreamWriter
name|filteringXmlStreamWriter
decl_stmt|;
annotation|@
name|Mock
DECL|field|nonXmlCharFiltererMock
specifier|private
name|NonXmlCharFilterer
name|nonXmlCharFiltererMock
decl_stmt|;
annotation|@
name|Mock
DECL|field|xmlStreamWriterMock
specifier|private
name|XMLStreamWriter
name|xmlStreamWriterMock
decl_stmt|;
comment|// only testing non-generated methods, those that do apply filtering
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|filteringXmlStreamWriter
operator|=
operator|new
name|FilteringXmlStreamWriter
argument_list|(
name|xmlStreamWriterMock
argument_list|)
expr_stmt|;
name|filteringXmlStreamWriter
operator|.
name|nonXmlCharFilterer
operator|=
name|nonXmlCharFiltererMock
expr_stmt|;
name|when
argument_list|(
name|nonXmlCharFiltererMock
operator|.
name|filter
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"filteredValue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteAttribute2Args ()
specifier|public
name|void
name|testWriteAttribute2Args
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|filteringXmlStreamWriter
operator|.
name|writeAttribute
argument_list|(
literal|"localName"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|xmlStreamWriterMock
argument_list|)
operator|.
name|writeAttribute
argument_list|(
literal|"localName"
argument_list|,
literal|"filteredValue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteAttribute3Args ()
specifier|public
name|void
name|testWriteAttribute3Args
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|filteringXmlStreamWriter
operator|.
name|writeAttribute
argument_list|(
literal|"namespaceURI"
argument_list|,
literal|"localName"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|xmlStreamWriterMock
argument_list|)
operator|.
name|writeAttribute
argument_list|(
literal|"namespaceURI"
argument_list|,
literal|"localName"
argument_list|,
literal|"filteredValue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteAttribute4Args ()
specifier|public
name|void
name|testWriteAttribute4Args
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|filteringXmlStreamWriter
operator|.
name|writeAttribute
argument_list|(
literal|"prefix"
argument_list|,
literal|"namespaceURI"
argument_list|,
literal|"localName"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|xmlStreamWriterMock
argument_list|)
operator|.
name|writeAttribute
argument_list|(
literal|"prefix"
argument_list|,
literal|"namespaceURI"
argument_list|,
literal|"localName"
argument_list|,
literal|"filteredValue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteCData ()
specifier|public
name|void
name|testWriteCData
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|filteringXmlStreamWriter
operator|.
name|writeCData
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|xmlStreamWriterMock
argument_list|)
operator|.
name|writeCData
argument_list|(
literal|"filteredValue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteCharacters1Arg ()
specifier|public
name|void
name|testWriteCharacters1Arg
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|filteringXmlStreamWriter
operator|.
name|writeCharacters
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|xmlStreamWriterMock
argument_list|)
operator|.
name|writeCharacters
argument_list|(
literal|"filteredValue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteComment ()
specifier|public
name|void
name|testWriteComment
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|filteringXmlStreamWriter
operator|.
name|writeComment
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|xmlStreamWriterMock
argument_list|)
operator|.
name|writeComment
argument_list|(
literal|"filteredValue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteCharacters3Args ()
specifier|public
name|void
name|testWriteCharacters3Args
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|filteringXmlStreamWriter
operator|.
name|writeCharacters
argument_list|(
name|buffer
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nonXmlCharFiltererMock
argument_list|)
operator|.
name|filter
argument_list|(
name|same
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|2
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|xmlStreamWriterMock
argument_list|)
operator|.
name|writeCharacters
argument_list|(
name|same
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|2
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

