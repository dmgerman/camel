begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb.mapper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|bind
operator|.
name|marshaller
operator|.
name|NamespacePrefixMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
operator|.
name|JaxbNamespacePrefixMapper
import|;
end_import

begin_comment
comment|/**  * A namespace prefix mapper which uses JAXB-RI 2.1 or better from SUN.  */
end_comment

begin_class
DECL|class|SunJaxb21NamespacePrefixMapper
specifier|public
class|class
name|SunJaxb21NamespacePrefixMapper
extends|extends
name|NamespacePrefixMapper
implements|implements
name|JaxbNamespacePrefixMapper
block|{
DECL|field|namespaces
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
decl_stmt|;
annotation|@
name|Override
DECL|method|setNamespaces (Map<String, String> namespaces)
specifier|public
name|void
name|setNamespaces
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
block|{
name|this
operator|.
name|namespaces
operator|=
name|namespaces
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRegistrationKey ()
specifier|public
name|String
name|getRegistrationKey
parameter_list|()
block|{
return|return
literal|"com.sun.xml.bind.namespacePrefixMapper"
return|;
block|}
annotation|@
name|Override
DECL|method|getPreferredPrefix (String namespaceUri, String suggestion, boolean requirePrefix)
specifier|public
name|String
name|getPreferredPrefix
parameter_list|(
name|String
name|namespaceUri
parameter_list|,
name|String
name|suggestion
parameter_list|,
name|boolean
name|requirePrefix
parameter_list|)
block|{
if|if
condition|(
name|namespaces
operator|!=
literal|null
condition|)
block|{
name|String
name|prefix
init|=
name|namespaces
operator|.
name|get
argument_list|(
name|namespaceUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
return|return
name|prefix
return|;
block|}
block|}
return|return
name|suggestion
return|;
block|}
block|}
end_class

end_unit

