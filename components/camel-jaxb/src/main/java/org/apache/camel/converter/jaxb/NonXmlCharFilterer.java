begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Provides filtering of characters that do fall into<a  * href="http://www.w3.org/TR/2004/REC-xml-20040204/#NT-Char">range defined by  * XML 1.0 spec</a>.<i>Filtering</i> here means replacement with space char.  *   */
end_comment

begin_class
DECL|class|NonXmlCharFilterer
class|class
name|NonXmlCharFilterer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FilteringXmlStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REPLACEMENT_CHAR
specifier|private
specifier|static
specifier|final
name|char
name|REPLACEMENT_CHAR
init|=
literal|' '
decl_stmt|;
comment|/**      * Determines whether specified character needs to be filtered.      */
DECL|method|isFiltered (char c)
name|boolean
name|isFiltered
parameter_list|(
name|char
name|c
parameter_list|)
block|{
comment|// Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] |
comment|// [#x10000-#x10FFFF]
comment|// Won't be checking last interval, as it goes beyond 0xFFFF.
if|if
condition|(
name|c
operator|==
literal|0x9
operator|||
name|c
operator|==
literal|0xA
operator|||
name|c
operator|==
literal|0xD
operator|||
operator|(
name|c
operator|>=
literal|0x20
operator|&&
name|c
operator|<=
literal|0xD7FF
operator|)
operator|||
operator|(
name|c
operator|>=
literal|0xE000
operator|&&
name|c
operator|<=
literal|0xFFFD
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Filter specified char array by replacing non-XML chars with space. Only      * part of array specified by<code>offset</code> and<code>length</code> is      * affected.      *       * @return<code>true</code> if<code>content</code> was modified,      *<code>false</code> otherwise.      */
DECL|method|filter (char[] content, int offset, int length)
specifier|public
name|boolean
name|filter
parameter_list|(
name|char
index|[]
name|content
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|filtered
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isFiltered
argument_list|(
name|content
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|filtered
operator|=
literal|true
expr_stmt|;
name|content
index|[
name|i
index|]
operator|=
name|REPLACEMENT_CHAR
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filtered
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Identified and replaced non-XML chars"
argument_list|)
expr_stmt|;
block|}
return|return
name|filtered
return|;
block|}
comment|/**      * Filter specified string by replacing illegal chars with space.      *       * @return filtered string      */
DECL|method|filter (String original)
specifier|public
name|String
name|filter
parameter_list|(
name|String
name|original
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
index|[]
name|chars
init|=
name|original
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filter
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|chars
operator|.
name|length
argument_list|)
condition|)
block|{
return|return
name|original
return|;
block|}
name|String
name|filtered
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Illegal characters were filtered; original => \""
operator|+
name|original
operator|+
literal|"\", filtered => \""
operator|+
name|filtered
operator|+
literal|"\""
argument_list|)
expr_stmt|;
return|return
name|filtered
return|;
block|}
block|}
end_class

end_unit

