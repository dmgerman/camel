begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_class
DECL|class|JaxbHelper
specifier|public
specifier|final
class|class
name|JaxbHelper
block|{
DECL|method|JaxbHelper ()
specifier|private
name|JaxbHelper
parameter_list|()
block|{     }
DECL|method|getJaxbElementFactoryMethod (CamelContext camelContext, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Method
name|getJaxbElementFactoryMethod
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// find the first method that has @XmlElementDecl with one parameter that matches the type
name|Class
name|factory
init|=
name|getObjectFactory
argument_list|(
name|camelContext
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|factory
operator|.
name|getMethods
argument_list|()
control|)
block|{
specifier|final
name|XmlElementDecl
name|a
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|XmlElementDecl
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameters
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|length
operator|==
literal|1
operator|&&
name|parameters
index|[
literal|0
index|]
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getObjectFactory (CamelContext camelContext, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Class
name|getObjectFactory
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|type
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|objectFactoryClassName
init|=
name|type
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".ObjectFactory"
decl_stmt|;
return|return
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|objectFactoryClassName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

