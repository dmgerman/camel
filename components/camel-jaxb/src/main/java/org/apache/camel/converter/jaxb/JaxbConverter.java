begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|util
operator|.
name|JAXBSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|HasAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_comment
comment|/**  * As we have the JAXB FallbackTypeConverter, so we don't need to register this converter  * @version $Revision$  */
end_comment

begin_class
DECL|class|JaxbConverter
specifier|public
specifier|final
class|class
name|JaxbConverter
block|{
DECL|field|xmlConverter
specifier|private
name|XmlConverter
name|xmlConverter
init|=
operator|new
name|XmlConverter
argument_list|()
decl_stmt|;
DECL|field|contexts
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|JAXBContext
argument_list|>
name|contexts
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|JAXBContext
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Converter
DECL|method|toSource (Object value)
specifier|public
name|JAXBSource
name|toSource
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert from null value to JAXBSource"
argument_list|)
throw|;
block|}
comment|// just need to check if the Object class has the XmlRootElement
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|context
init|=
name|getJaxbContext
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|JAXBSource
argument_list|(
name|context
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Converter
DECL|method|toDocument (Object value)
specifier|public
name|Document
name|toDocument
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|JAXBException
throws|,
name|ParserConfigurationException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert from null value to JAXBSource"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|context
init|=
name|getJaxbContext
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// must create a new instance of marshaller as its not thread safe
name|Marshaller
name|marshaller
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|xmlConverter
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|value
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Converter
DECL|method|toMessageType (Exchange exchange)
specifier|public
specifier|static
name|MessageDefinition
name|toMessageType
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|toMessageType
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toMessageType (Message in)
specifier|public
specifier|static
name|MessageDefinition
name|toMessageType
parameter_list|(
name|Message
name|in
parameter_list|)
block|{
name|MessageDefinition
name|answer
init|=
operator|new
name|MessageDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|copyFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|getJaxbContext (Object value)
specifier|private
specifier|synchronized
name|JAXBContext
name|getJaxbContext
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|value
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|JAXBContext
name|context
init|=
name|contexts
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|contexts
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
block|}
end_class

end_unit

