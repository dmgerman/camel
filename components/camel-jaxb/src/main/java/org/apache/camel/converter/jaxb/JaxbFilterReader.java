begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_comment
comment|/**  * This FilterReader will skip the ISO control character and others  *    */
end_comment

begin_class
DECL|class|JaxbFilterReader
specifier|public
class|class
name|JaxbFilterReader
extends|extends
name|FilterReader
block|{
DECL|method|JaxbFilterReader (Reader in)
specifier|protected
name|JaxbFilterReader
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads a single character.      *      * @exception  IOException  If an I/O error occurs      */
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|char
name|ch
init|=
operator|(
name|char
operator|)
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|isFiltered
argument_list|(
name|ch
argument_list|)
condition|)
block|{
comment|// Skip the character that need to be filtered.
name|ch
operator|=
operator|(
name|char
operator|)
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
name|ch
return|;
block|}
comment|/**      * Reads characters into a portion of an array.      *      * @exception  IOException  If an I/O error occurs      */
DECL|method|read (char cbuf[], int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|char
name|cbuf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|char
name|buffer
index|[]
init|=
operator|new
name|char
index|[
name|len
index|]
decl_stmt|;
name|int
name|readed
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
operator|-
name|off
argument_list|)
decl_stmt|;
if|if
condition|(
name|readed
operator|>=
literal|0
condition|)
block|{
name|int
name|copyed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readed
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isFiltered
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|cbuf
index|[
name|off
operator|+
name|copyed
index|]
operator|=
name|buffer
index|[
name|i
index|]
expr_stmt|;
name|copyed
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// Skip the character that need to be filtered.
block|}
block|}
return|return
name|copyed
return|;
block|}
else|else
block|{
return|return
name|readed
return|;
block|}
block|}
comment|// According to http://www.w3.org/TR/2004/REC-xml-20040204/#NT-Char,
comment|// we filter these Chars
DECL|method|isFiltered (char ch)
specifier|protected
name|boolean
name|isFiltered
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
name|Character
operator|.
name|isISOControl
argument_list|(
name|ch
argument_list|)
operator|||
operator|(
operator|(
name|int
operator|)
name|ch
operator|>=
literal|0xFDD0
operator|&&
operator|(
name|int
operator|)
name|ch
operator|<=
literal|0xFDDF
operator|)
return|;
block|}
block|}
end_class

end_unit

