begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_comment
comment|/**  * This FilterReader will filter out the non-XML characters, see  * {@link NonXmlCharFilterer} for details.  */
end_comment

begin_class
DECL|class|NonXmlFilterReader
specifier|public
class|class
name|NonXmlFilterReader
extends|extends
name|FilterReader
block|{
DECL|field|nonXmlCharFilterer
name|NonXmlCharFilterer
name|nonXmlCharFilterer
init|=
operator|new
name|NonXmlCharFilterer
argument_list|()
decl_stmt|;
DECL|method|NonXmlFilterReader (Reader in)
specifier|protected
name|NonXmlFilterReader
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads characters into a portion of an array.      *       * @exception IOException      *                If an I/O error occurs      */
annotation|@
name|Override
DECL|method|read (char cbuf[], int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|char
name|cbuf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|>
literal|0
condition|)
block|{
name|nonXmlCharFilterer
operator|.
name|filter
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
block|}
end_class

end_unit

