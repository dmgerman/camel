begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * A<a href="http://activemq.apache.org/camel/data-format.html">data format</a>  * ({@link DataFormat}) using JAXB2 to marshal to and from XML  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|JaxbDataFormat
specifier|public
class|class
name|JaxbDataFormat
implements|implements
name|DataFormat
block|{
DECL|field|context
specifier|private
name|JAXBContext
name|context
decl_stmt|;
DECL|field|contextPath
specifier|private
name|String
name|contextPath
decl_stmt|;
DECL|field|prettyPrint
specifier|private
name|boolean
name|prettyPrint
init|=
literal|true
decl_stmt|;
DECL|field|marshaller
specifier|private
name|Marshaller
name|marshaller
decl_stmt|;
DECL|field|unmarshaller
specifier|private
name|Unmarshaller
name|unmarshaller
decl_stmt|;
DECL|method|JaxbDataFormat ()
specifier|public
name|JaxbDataFormat
parameter_list|()
block|{     }
DECL|method|JaxbDataFormat (JAXBContext context)
specifier|public
name|JaxbDataFormat
parameter_list|(
name|JAXBContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|JaxbDataFormat (String contextPath)
specifier|public
name|JaxbDataFormat
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
name|this
operator|.
name|contextPath
operator|=
name|contextPath
expr_stmt|;
block|}
DECL|method|marshal (Exchange exchange, Object graph, OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|graph
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|getMarshaller
argument_list|()
operator|.
name|marshal
argument_list|(
name|graph
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
name|IOHelper
operator|.
name|createIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|unmarshal (Exchange exchange, InputStream stream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
return|return
name|getUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
name|stream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
name|IOHelper
operator|.
name|createIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getContext ()
specifier|public
name|JAXBContext
name|getContext
parameter_list|()
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|createContext
argument_list|()
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
DECL|method|setContext (JAXBContext context)
specifier|public
name|void
name|setContext
parameter_list|(
name|JAXBContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|getContextPath ()
specifier|public
name|String
name|getContextPath
parameter_list|()
block|{
return|return
name|contextPath
return|;
block|}
DECL|method|setContextPath (String contextPath)
specifier|public
name|void
name|setContextPath
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
name|this
operator|.
name|contextPath
operator|=
name|contextPath
expr_stmt|;
block|}
DECL|method|getMarshaller ()
specifier|public
name|Marshaller
name|getMarshaller
parameter_list|()
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|marshaller
operator|==
literal|null
condition|)
block|{
name|marshaller
operator|=
name|getContext
argument_list|()
operator|.
name|createMarshaller
argument_list|()
expr_stmt|;
block|}
return|return
name|marshaller
return|;
block|}
DECL|method|setMarshaller (Marshaller marshaller)
specifier|public
name|void
name|setMarshaller
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|)
block|{
name|this
operator|.
name|marshaller
operator|=
name|marshaller
expr_stmt|;
block|}
DECL|method|isPrettyPrint ()
specifier|public
name|boolean
name|isPrettyPrint
parameter_list|()
block|{
return|return
name|prettyPrint
return|;
block|}
DECL|method|setPrettyPrint (boolean prettyPrint)
specifier|public
name|void
name|setPrettyPrint
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|this
operator|.
name|prettyPrint
operator|=
name|prettyPrint
expr_stmt|;
block|}
DECL|method|getUnmarshaller ()
specifier|public
name|Unmarshaller
name|getUnmarshaller
parameter_list|()
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|unmarshaller
operator|==
literal|null
condition|)
block|{
name|unmarshaller
operator|=
name|getContext
argument_list|()
operator|.
name|createUnmarshaller
argument_list|()
expr_stmt|;
block|}
return|return
name|unmarshaller
return|;
block|}
DECL|method|setUnmarshaller (Unmarshaller unmarshaller)
specifier|public
name|void
name|setUnmarshaller
parameter_list|(
name|Unmarshaller
name|unmarshaller
parameter_list|)
block|{
name|this
operator|.
name|unmarshaller
operator|=
name|unmarshaller
expr_stmt|;
block|}
DECL|method|createContext ()
specifier|protected
name|JAXBContext
name|createContext
parameter_list|()
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|contextPath
operator|!=
literal|null
condition|)
block|{
return|return
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|contextPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|JAXBContext
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

