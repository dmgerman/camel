begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.swf.integration
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|swf
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|swf
operator|.
name|SWFConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|assertIsSatisfied
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Must be manually tested. Provide your own accessKey and secretKey and also create a SWF domain in advance"
argument_list|)
DECL|class|CamelSWFEndToEndTest
specifier|public
class|class
name|CamelSWFEndToEndTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|options
specifier|protected
name|String
name|options
init|=
literal|"accessKey=XXX"
operator|+
literal|"&secretKey=YYY"
operator|+
literal|"&domainName=ZZZ"
operator|+
literal|"&activityList=swf-alist"
operator|+
literal|"&workflowList=swf-wlist"
operator|+
literal|"&clientConfiguration.endpoint=swf.eu-west-1.amazonaws.com"
operator|+
literal|"&version=1.0"
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:starter"
argument_list|)
DECL|field|starter
specifier|private
name|MockEndpoint
name|starter
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:decider"
argument_list|)
DECL|field|decider
specifier|private
name|MockEndpoint
name|decider
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:worker"
argument_list|)
DECL|field|worker
specifier|private
name|MockEndpoint
name|worker
decl_stmt|;
annotation|@
name|Test
DECL|method|consumerReceivedPreAndPostEntryCreatedEventNotifications ()
specifier|public
name|void
name|consumerReceivedPreAndPostEntryCreatedEventNotifications
parameter_list|()
throws|throws
name|Exception
block|{
name|starter
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|decider
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|worker
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello world!"
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"aws-swf://activity?"
operator|+
name|options
operator|+
literal|"&eventName=processActivities"
argument_list|)
operator|.
name|log
argument_list|(
literal|"FOUND ACTIVITY TASK ${body}"
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:worker"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"aws-swf://workflow?"
operator|+
name|options
operator|+
literal|"&eventName=processWorkflows"
argument_list|)
operator|.
name|log
argument_list|(
literal|"FOUND WORKFLOW TASK ${body}"
argument_list|)
operator|.
name|filter
argument_list|(
name|header
argument_list|(
name|SWFConstants
operator|.
name|ACTION
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SWFConstants
operator|.
name|EXECUTE_ACTION
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"aws-swf://activity?"
operator|+
name|options
operator|+
literal|"&eventName=processActivities"
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
literal|"Message two"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"aws-swf://activity?"
operator|+
name|options
operator|+
literal|"&eventName=processActivities"
argument_list|)
operator|.
name|log
argument_list|(
literal|"SENT ACTIVITY TASK ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:decider"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"aws-swf://workflow?"
operator|+
name|options
operator|+
literal|"&eventName=processWorkflows"
argument_list|)
operator|.
name|log
argument_list|(
literal|"SENT WORKFLOW TASK ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:starter"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

