begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.swf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|swf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|ActivityExecutionContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|ActivityExecutionContextProviderImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|ActivityFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|DataConverter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|DataConverterException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|common
operator|.
name|WorkflowExecutionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|generic
operator|.
name|ActivityImplementationBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|worker
operator|.
name|ActivityTypeExecutionOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|worker
operator|.
name|ActivityTypeRegistrationOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|worker
operator|.
name|CurrentActivityExecutionContext
import|;
end_import

begin_class
DECL|class|CamelActivityImplementation
specifier|public
class|class
name|CamelActivityImplementation
extends|extends
name|ActivityImplementationBase
block|{
DECL|field|executionOptions
specifier|private
specifier|final
name|ActivityTypeExecutionOptions
name|executionOptions
decl_stmt|;
DECL|field|registrationOptions
specifier|private
specifier|final
name|ActivityTypeRegistrationOptions
name|registrationOptions
decl_stmt|;
DECL|field|converter
specifier|private
specifier|final
name|DataConverter
name|converter
decl_stmt|;
DECL|field|swfWorkflowConsumer
specifier|private
specifier|final
name|SWFActivityConsumer
name|swfWorkflowConsumer
decl_stmt|;
DECL|field|contextProvider
specifier|private
specifier|final
name|ActivityExecutionContextProviderImpl
name|contextProvider
init|=
operator|new
name|ActivityExecutionContextProviderImpl
argument_list|()
decl_stmt|;
DECL|method|CamelActivityImplementation (SWFActivityConsumer swfWorkflowConsumer, ActivityTypeRegistrationOptions activityTypeRegistrationOptions, ActivityTypeExecutionOptions activityTypeExecutionOptions, DataConverter converter)
specifier|public
name|CamelActivityImplementation
parameter_list|(
name|SWFActivityConsumer
name|swfWorkflowConsumer
parameter_list|,
name|ActivityTypeRegistrationOptions
name|activityTypeRegistrationOptions
parameter_list|,
name|ActivityTypeExecutionOptions
name|activityTypeExecutionOptions
parameter_list|,
name|DataConverter
name|converter
parameter_list|)
block|{
name|this
operator|.
name|swfWorkflowConsumer
operator|=
name|swfWorkflowConsumer
expr_stmt|;
name|this
operator|.
name|registrationOptions
operator|=
name|activityTypeRegistrationOptions
expr_stmt|;
name|this
operator|.
name|executionOptions
operator|=
name|activityTypeExecutionOptions
expr_stmt|;
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRegistrationOptions ()
specifier|public
name|ActivityTypeRegistrationOptions
name|getRegistrationOptions
parameter_list|()
block|{
return|return
name|registrationOptions
return|;
block|}
annotation|@
name|Override
DECL|method|getExecutionOptions ()
specifier|public
name|ActivityTypeExecutionOptions
name|getExecutionOptions
parameter_list|()
block|{
return|return
name|executionOptions
return|;
block|}
annotation|@
name|Override
DECL|method|execute (String input, ActivityExecutionContext context)
specifier|protected
name|String
name|execute
parameter_list|(
name|String
name|input
parameter_list|,
name|ActivityExecutionContext
name|context
parameter_list|)
throws|throws
name|ActivityFailureException
throws|,
name|CancellationException
block|{
name|Object
index|[]
name|inputParameters
init|=
name|converter
operator|.
name|fromData
argument_list|(
name|input
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|CurrentActivityExecutionContext
operator|.
name|set
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|ActivityExecutionContext
name|executionContext
init|=
name|contextProvider
operator|.
name|getActivityExecutionContext
argument_list|()
decl_stmt|;
name|String
name|taskToken
init|=
name|executionContext
operator|.
name|getTaskToken
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|=
name|swfWorkflowConsumer
operator|.
name|processActivity
argument_list|(
name|inputParameters
argument_list|,
name|taskToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|invocationException
parameter_list|)
block|{
name|throwActivityFailureException
argument_list|(
name|invocationException
operator|.
name|getTargetException
argument_list|()
operator|!=
literal|null
condition|?
name|invocationException
operator|.
name|getTargetException
argument_list|()
else|:
name|invocationException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|throwActivityFailureException
argument_list|(
name|illegalArgumentException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|illegalAccessException
parameter_list|)
block|{
name|throwActivityFailureException
argument_list|(
name|illegalAccessException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|throwActivityFailureException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CurrentActivityExecutionContext
operator|.
name|unset
argument_list|()
expr_stmt|;
block|}
name|String
name|resultSerialized
init|=
name|converter
operator|.
name|toData
argument_list|(
name|result
argument_list|)
decl_stmt|;
return|return
name|resultSerialized
return|;
block|}
DECL|method|throwActivityFailureException (Throwable exception)
name|void
name|throwActivityFailureException
parameter_list|(
name|Throwable
name|exception
parameter_list|)
throws|throws
name|ActivityFailureException
throws|,
name|CancellationException
block|{
if|if
condition|(
name|exception
operator|instanceof
name|CancellationException
condition|)
block|{
throw|throw
operator|(
name|CancellationException
operator|)
name|exception
throw|;
block|}
name|String
name|reason
init|=
name|WorkflowExecutionUtils
operator|.
name|truncateReason
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|details
init|=
literal|null
decl_stmt|;
try|try
block|{
name|details
operator|=
name|converter
operator|.
name|toData
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataConverterException
name|dataConverterException
parameter_list|)
block|{
if|if
condition|(
name|dataConverterException
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dataConverterException
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
throw|throw
name|dataConverterException
throw|;
block|}
throw|throw
operator|new
name|ActivityFailureException
argument_list|(
name|reason
argument_list|,
name|details
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

