begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ibatis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ibatis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ibatis
operator|.
name|strategy
operator|.
name|IBatisProcessingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ibatis
operator|.
name|strategy
operator|.
name|TransactionIsolationLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expectLastCall
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|IBatisBatchConsumerIsolationLevelTest
specifier|public
class|class
name|IBatisBatchConsumerIsolationLevelTest
extends|extends
name|IBatisTestSupport
block|{
DECL|field|strategyMock
name|IBatisProcessingStrategy
name|strategyMock
init|=
name|createMock
argument_list|(
name|IBatisProcessingStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|createTestData ()
specifier|protected
name|boolean
name|createTestData
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getStatement ()
specifier|protected
name|String
name|getStatement
parameter_list|()
block|{
return|return
literal|"create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255), PROCESSED BOOLEAN DEFAULT false)"
return|;
block|}
annotation|@
name|Test
DECL|method|testConsumeWithIsolation ()
specifier|public
name|void
name|testConsumeWithIsolation
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
name|account1
init|=
operator|new
name|Account
argument_list|()
decl_stmt|;
name|account1
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|account1
operator|.
name|setFirstName
argument_list|(
literal|"Bob"
argument_list|)
expr_stmt|;
name|account1
operator|.
name|setLastName
argument_list|(
literal|"Denver"
argument_list|)
expr_stmt|;
name|account1
operator|.
name|setEmailAddress
argument_list|(
literal|"TryGuessingGilligan@gmail.com"
argument_list|)
expr_stmt|;
name|Account
name|account2
init|=
operator|new
name|Account
argument_list|()
decl_stmt|;
name|account2
operator|.
name|setId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|account2
operator|.
name|setFirstName
argument_list|(
literal|"Alan"
argument_list|)
expr_stmt|;
name|account2
operator|.
name|setLastName
argument_list|(
literal|"Hale"
argument_list|)
expr_stmt|;
name|account2
operator|.
name|setEmailAddress
argument_list|(
literal|"TryGuessingSkipper@gmail.com"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Account
argument_list|>
name|accounts
init|=
operator|new
name|ArrayList
argument_list|<
name|Account
argument_list|>
argument_list|()
decl_stmt|;
name|accounts
operator|.
name|add
argument_list|(
name|account1
argument_list|)
expr_stmt|;
name|accounts
operator|.
name|add
argument_list|(
name|account2
argument_list|)
expr_stmt|;
name|strategyMock
operator|.
name|setIsolation
argument_list|(
name|TransactionIsolationLevel
operator|.
name|TRANSACTION_READ_COMMITTED
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|strategyMock
operator|.
name|poll
argument_list|(
name|EasyMock
operator|.
expr|<
name|IBatisConsumer
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|IBatisEndpoint
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|accounts
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|strategyMock
operator|.
name|commit
argument_list|(
name|EasyMock
operator|.
expr|<
name|IBatisEndpoint
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Exchange
operator|>
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|strategyMock
argument_list|)
expr_stmt|;
name|IBatisEndpoint
name|iBatisEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"ibatis:selectUnprocessedAccounts?consumer.onConsume=consumeAccount"
argument_list|,
name|IBatisEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|iBatisEndpoint
operator|.
name|setStrategy
argument_list|(
name|strategyMock
argument_list|)
expr_stmt|;
name|iBatisEndpoint
operator|.
name|setIsolation
argument_list|(
literal|"TRANSACTION_READ_COMMITTED"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|account1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|account2
argument_list|)
expr_stmt|;
comment|//We need to wait for the batch process to complete.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|strategyMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e1
name|from
argument_list|(
literal|"ibatis:selectUnprocessedAccounts?consumer.onConsume=consumeAccount"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:results"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e1
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ibatis:insertAccount?statementType=Insert"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

