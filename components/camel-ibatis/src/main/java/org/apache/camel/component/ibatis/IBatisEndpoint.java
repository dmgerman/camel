begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ibatis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ibatis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibatis
operator|.
name|sqlmap
operator|.
name|client
operator|.
name|SqlMapClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ibatis
operator|.
name|strategy
operator|.
name|DefaultIBatisProcessingStategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ibatis
operator|.
name|strategy
operator|.
name|IBatisProcessingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultPollingEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * An<a href="http://activemq.apache.org/camel/ibatis.html>iBatis Endpoint</a>  * for performing SQL operations using an XML mapping file to abstract away the SQL  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|IBatisEndpoint
specifier|public
class|class
name|IBatisEndpoint
extends|extends
name|DefaultPollingEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IBatisEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|strategy
specifier|private
name|IBatisProcessingStrategy
name|strategy
decl_stmt|;
comment|/**      * Indicates if transactions are necessary.  Defaulted in IBatisComponent.      */
DECL|field|useTransactions
specifier|private
name|boolean
name|useTransactions
decl_stmt|;
comment|/**      * Statement to run when polling or processing      */
DECL|field|statement
specifier|private
name|String
name|statement
decl_stmt|;
comment|/**      * Name of a strategy to use for dealing w/      * polling a database and consuming the message.  Can be a bean name      * or a class name.      */
DECL|field|consumeStrategyName
specifier|private
name|String
name|consumeStrategyName
decl_stmt|;
comment|/**      * URI parameters      */
DECL|field|params
specifier|private
name|Map
name|params
decl_stmt|;
DECL|method|IBatisEndpoint (String uri, IBatisComponent component, String statement, Map params)
specifier|public
name|IBatisEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|IBatisComponent
name|component
parameter_list|,
name|String
name|statement
parameter_list|,
name|Map
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|setUseTransactions
argument_list|(
name|component
operator|.
name|isUseTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|setStatement
argument_list|(
name|statement
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|IBatisComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|IBatisComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|IBatisProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|IBatisPollingConsumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|IBatisPollingConsumer
name|consumer
init|=
operator|new
name|IBatisPollingConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
comment|/*     @Override     public PollingConsumer<Exchange> createPollingConsumer() throws Exception {         return new IBatisPollingConsumer(this);     } */
comment|/**      * @return SqlMapClient      * @throws IOException if the component is configured with a SqlMapConfig      * and there is a problem reading the file      */
DECL|method|getSqlMapClient ()
specifier|public
name|SqlMapClient
name|getSqlMapClient
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getComponent
argument_list|()
operator|.
name|getSqlMapClient
argument_list|()
return|;
block|}
comment|/**      * Gets the IbatisProcessingStrategy to to use when consuming messages+        * from the database      * @return IbatisProcessingStrategy      * @throws Exception      */
DECL|method|getProcessingStrategy ()
specifier|public
name|IBatisProcessingStrategy
name|getProcessingStrategy
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|strategy
operator|==
literal|null
condition|)
block|{
name|String
name|strategyName
init|=
operator|(
name|String
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"consumeStrategy"
argument_list|)
decl_stmt|;
name|strategy
operator|=
name|getStrategy
argument_list|(
name|strategyName
argument_list|,
operator|new
name|DefaultIBatisProcessingStategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|strategy
return|;
block|}
comment|/**      * Statement to run when polling or processing      * @return name of the statement     */
DECL|method|getStatement ()
specifier|public
name|String
name|getStatement
parameter_list|()
block|{
return|return
name|statement
return|;
block|}
comment|/**      * Statement to run when polling or processing      * @param statement      */
DECL|method|setStatement (String statement)
specifier|public
name|void
name|setStatement
parameter_list|(
name|String
name|statement
parameter_list|)
block|{
name|this
operator|.
name|statement
operator|=
name|statement
expr_stmt|;
block|}
comment|/**      * Resolves a strategy in the camelContext or by class name      * @param name      * @param defaultStrategy      * @return IbatisProcessingStrategy      * @throws Exception      */
DECL|method|getStrategy (String name, IBatisProcessingStrategy defaultStrategy)
specifier|private
name|IBatisProcessingStrategy
name|getStrategy
parameter_list|(
name|String
name|name
parameter_list|,
name|IBatisProcessingStrategy
name|defaultStrategy
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|defaultStrategy
return|;
block|}
name|IBatisProcessingStrategy
name|strategy
init|=
name|getComponent
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|name
argument_list|,
name|IBatisProcessingStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|strategy
operator|=
name|ObjectHelper
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|IBatisProcessingStrategy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to resolve/create processing strategy ("
operator|+
name|name
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|strategy
operator|!=
literal|null
condition|?
name|strategy
else|:
name|defaultStrategy
return|;
block|}
comment|/**      * Indicates if transactions should be used when calling statements.  Useful if using a comma separated list when      * consuming records.      * @return boolean      */
DECL|method|isUseTransactions ()
specifier|public
name|boolean
name|isUseTransactions
parameter_list|()
block|{
return|return
name|useTransactions
return|;
block|}
comment|/**      * Sets indicator to use transactions for consuming and error handling statements.      * @param useTransactions      */
DECL|method|setUseTransactions (boolean useTransactions)
specifier|public
name|void
name|setUseTransactions
parameter_list|(
name|boolean
name|useTransactions
parameter_list|)
block|{
name|this
operator|.
name|useTransactions
operator|=
name|useTransactions
expr_stmt|;
block|}
DECL|method|getConsumeStrategyName ()
specifier|public
name|String
name|getConsumeStrategyName
parameter_list|()
block|{
return|return
name|consumeStrategyName
return|;
block|}
DECL|method|setConsumeStrategyName (String consumeStrategyName)
specifier|public
name|void
name|setConsumeStrategyName
parameter_list|(
name|String
name|consumeStrategyName
parameter_list|)
block|{
name|this
operator|.
name|consumeStrategyName
operator|=
name|consumeStrategyName
expr_stmt|;
block|}
block|}
end_class

end_unit

