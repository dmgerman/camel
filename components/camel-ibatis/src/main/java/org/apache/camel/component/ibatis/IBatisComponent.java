begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ibatis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ibatis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibatis
operator|.
name|sqlmap
operator|.
name|client
operator|.
name|SqlMapClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibatis
operator|.
name|sqlmap
operator|.
name|client
operator|.
name|SqlMapClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ResourceBasedComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * An<a href="http://camel.apache.org/ibatis.html>iBatis Component</a>  * for performing SQL operations using an XML mapping file to abstract away the SQL  *  * @version $Revision$  *   *<pre>  * Ibatis Component used to read/write to a database.  *  *<u>Requires one of the following:</u>  *  * 1. A Sql Map config file either on the root of  * the classpath or explicitly set.  *  *<b>OR</b>  *  * 2. A SqlMapClient explicit set.  *  * Using Ibatis as a source of data (&lt;from&gt;) you can use this component  * to treat a database table as a logical queue.  * Details are available in the {@link IBatisConsumer}  *  * Using Ibatis as a destination for data (&lt;to&gt;) you can use this  * component to run an insert statement either on a single message or if the  * delivered content contains a collection of messages it can iterate through  * the collection and run the insert on each element.  * Details are available in the {@link IBatisProducer}  *</pre>  *  * @see IBatisProducer  * @see IBatisConsumer  */
end_comment

begin_class
DECL|class|IBatisComponent
specifier|public
class|class
name|IBatisComponent
extends|extends
name|ResourceBasedComponent
block|{
DECL|field|DEFAULT_CONFIG_URI
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CONFIG_URI
init|=
literal|"classpath:SqlMapConfig.xml"
decl_stmt|;
DECL|field|sqlMapClient
specifier|private
name|SqlMapClient
name|sqlMapClient
decl_stmt|;
DECL|field|sqlMapConfig
specifier|private
name|String
name|sqlMapConfig
init|=
name|DEFAULT_CONFIG_URI
decl_stmt|;
DECL|field|useTransactions
specifier|private
name|boolean
name|useTransactions
init|=
literal|true
decl_stmt|;
DECL|method|IBatisComponent ()
specifier|public
name|IBatisComponent
parameter_list|()
block|{     }
DECL|method|IBatisComponent (SqlMapClient sqlMapClient)
specifier|public
name|IBatisComponent
parameter_list|(
name|SqlMapClient
name|sqlMapClient
parameter_list|)
block|{
name|this
operator|.
name|sqlMapClient
operator|=
name|sqlMapClient
expr_stmt|;
block|}
comment|/**      * Creates an IbatisEndpoint for use by an IbatisConsumer or IbatisProducer.      */
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|IBatisEndpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|IBatisEndpoint
name|answer
init|=
operator|new
name|IBatisEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|answer
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createSqlMapClient ()
specifier|private
name|SqlMapClient
name|createSqlMapClient
parameter_list|()
throws|throws
name|IOException
block|{
name|Resource
name|resource
init|=
name|resolveMandatoryResource
argument_list|(
name|sqlMapConfig
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|resource
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
return|return
name|SqlMapClientBuilder
operator|.
name|buildSqlMapClient
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
comment|/**      * Returns the configured SqlMapClient.      *      * @return com.ibatis.sqlmap.client.SqlMapClient      * @throws IOException If configured with a SqlMapConfig and there      * is a problem reading the resource.      */
DECL|method|getSqlMapClient ()
specifier|public
name|SqlMapClient
name|getSqlMapClient
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sqlMapClient
operator|==
literal|null
condition|)
block|{
name|sqlMapClient
operator|=
name|createSqlMapClient
argument_list|()
expr_stmt|;
block|}
return|return
name|sqlMapClient
return|;
block|}
comment|/**      * Sets the SqlMapClient      */
DECL|method|setSqlMapClient (SqlMapClient sqlMapClient)
specifier|public
name|void
name|setSqlMapClient
parameter_list|(
name|SqlMapClient
name|sqlMapClient
parameter_list|)
block|{
name|this
operator|.
name|sqlMapClient
operator|=
name|sqlMapClient
expr_stmt|;
block|}
comment|/**      * The Spring uri of the SqlMapConfig      */
DECL|method|getSqlMapConfig ()
specifier|public
name|String
name|getSqlMapConfig
parameter_list|()
block|{
return|return
name|sqlMapConfig
return|;
block|}
DECL|method|setSqlMapConfig (String sqlMapConfig)
specifier|public
name|void
name|setSqlMapConfig
parameter_list|(
name|String
name|sqlMapConfig
parameter_list|)
block|{
name|this
operator|.
name|sqlMapConfig
operator|=
name|sqlMapConfig
expr_stmt|;
block|}
DECL|method|isUseTransactions ()
specifier|public
name|boolean
name|isUseTransactions
parameter_list|()
block|{
return|return
name|useTransactions
return|;
block|}
DECL|method|setUseTransactions (boolean useTransactions)
specifier|public
name|void
name|setUseTransactions
parameter_list|(
name|boolean
name|useTransactions
parameter_list|)
block|{
name|this
operator|.
name|useTransactions
operator|=
name|useTransactions
expr_stmt|;
block|}
block|}
end_class

end_unit

