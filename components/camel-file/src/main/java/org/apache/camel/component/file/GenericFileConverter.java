begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FallbackConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A set of converter methods for working with generic file types  */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|GenericFileConverter
specifier|public
specifier|final
class|class
name|GenericFileConverter
block|{
DECL|field|defaultCharset
specifier|static
name|Supplier
argument_list|<
name|Charset
argument_list|>
name|defaultCharset
init|=
name|Charset
operator|::
name|defaultCharset
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenericFileConverter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|GenericFileConverter ()
specifier|private
name|GenericFileConverter
parameter_list|()
block|{
comment|// Helper Class
block|}
annotation|@
name|FallbackConverter
DECL|method|convertTo (Class<?> type, Exchange exchange, Object value, TypeConverterRegistry registry)
specifier|public
specifier|static
name|Object
name|convertTo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|value
parameter_list|,
name|TypeConverterRegistry
name|registry
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoTypeConversionAvailableException
block|{
comment|// use a fallback type converter so we can convert the embedded body if the value is GenericFile
if|if
condition|(
name|GenericFile
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|GenericFile
argument_list|<
name|?
argument_list|>
name|file
init|=
operator|(
name|GenericFile
argument_list|<
name|?
argument_list|>
operator|)
name|value
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|from
init|=
name|file
operator|.
name|getBody
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
comment|// maybe from is already the type we want
if|if
condition|(
name|from
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|file
operator|.
name|getBody
argument_list|()
return|;
block|}
comment|// no then try to lookup a type converter
name|TypeConverter
name|tc
init|=
name|registry
operator|.
name|lookup
argument_list|(
name|type
argument_list|,
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|!=
literal|null
condition|)
block|{
name|Object
name|body
init|=
name|file
operator|.
name|getBody
argument_list|()
decl_stmt|;
comment|// if its a file and we have a charset then use a reader to ensure we read the content using the given charset
comment|// this is a bit complicated, but a file consumer can be configured with an explicit charset, which means
comment|// we should read the file content with that given charset, and ignore any other charset properties
comment|// if the desired type is InputStream or Reader we can use the optimized methods
if|if
condition|(
name|Reader
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Reader
name|reader
init|=
name|genericFileToReader
argument_list|(
name|file
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
block|}
if|if
condition|(
name|InputStream
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|InputStream
name|is
init|=
name|genericFileToInputStream
argument_list|(
name|file
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
return|return
name|is
return|;
block|}
block|}
comment|// okay if the file has a charset configured then we must try to load the file using that charset
comment|// which mean we have to use the Reader first, and then convert from there
if|if
condition|(
name|body
operator|instanceof
name|File
operator|&&
name|file
operator|.
name|getCharset
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Reader
name|reader
init|=
name|genericFileToReader
argument_list|(
name|file
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
comment|// we dont want a reader back, so use the type converter registry to find a suitable converter
name|TypeConverter
name|readerTc
init|=
name|registry
operator|.
name|lookup
argument_list|(
name|type
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|readerTc
operator|!=
literal|null
condition|)
block|{
comment|// use the reader based type converter
return|return
name|readerTc
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|reader
argument_list|)
return|;
block|}
block|}
comment|// fallback and use the type suitable type converter
return|return
name|tc
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Converter
DECL|method|genericFileToInputStream (GenericFile<?> file, Exchange exchange)
specifier|public
specifier|static
name|InputStream
name|genericFileToInputStream
parameter_list|(
name|GenericFile
argument_list|<
name|?
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|getFile
argument_list|()
operator|instanceof
name|File
condition|)
block|{
comment|// prefer to use a file input stream if its a java.io.File
name|File
name|f
init|=
operator|(
name|File
operator|)
name|file
operator|.
name|getFile
argument_list|()
decl_stmt|;
comment|// the file must exists
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// read the file using the specified charset
name|String
name|charset
init|=
name|file
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read file {} with charset {}"
argument_list|,
name|f
argument_list|,
name|file
operator|.
name|getCharset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read file {} (no charset)"
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|toInputStream
argument_list|(
name|f
argument_list|,
name|charset
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
comment|// otherwise ensure the body is loaded as we want the input stream of the body
name|file
operator|.
name|getBinding
argument_list|()
operator|.
name|loadContent
argument_list|(
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|file
operator|.
name|getBody
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// should revert to fallback converter if we don't have an exchange
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Converter
DECL|method|genericFileToString (GenericFile<?> file, Exchange exchange)
specifier|public
specifier|static
name|String
name|genericFileToString
parameter_list|(
name|GenericFile
argument_list|<
name|?
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoTypeConversionAvailableException
block|{
comment|// use reader first as it supports the file charset
name|BufferedReader
name|reader
init|=
name|genericFileToReader
argument_list|(
name|file
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|toString
argument_list|(
name|reader
argument_list|)
return|;
block|}
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
comment|// otherwise ensure the body is loaded as we want the content of the body
name|file
operator|.
name|getBinding
argument_list|()
operator|.
name|loadContent
argument_list|(
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|file
operator|.
name|getBody
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// should revert to fallback converter if we don't have an exchange
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Converter
DECL|method|genericFileToSerializable (GenericFile<?> file, Exchange exchange)
specifier|public
specifier|static
name|Serializable
name|genericFileToSerializable
parameter_list|(
name|GenericFile
argument_list|<
name|?
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
comment|// load the file using input stream
name|InputStream
name|is
init|=
name|genericFileToInputStream
argument_list|(
name|file
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
comment|// need to double convert to convert correctly
name|byte
index|[]
name|data
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|exchange
argument_list|,
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Serializable
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|data
argument_list|)
return|;
block|}
block|}
block|}
comment|// should revert to fallback converter if we don't have an exchange
return|return
literal|null
return|;
block|}
DECL|method|genericFileToReader (GenericFile<?> file, Exchange exchange)
specifier|private
specifier|static
name|BufferedReader
name|genericFileToReader
parameter_list|(
name|GenericFile
argument_list|<
name|?
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|getFile
argument_list|()
operator|instanceof
name|File
condition|)
block|{
comment|// prefer to use a file input stream if its a java.io.File
name|File
name|f
init|=
operator|(
name|File
operator|)
name|file
operator|.
name|getFile
argument_list|()
decl_stmt|;
comment|// the file must exists
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// and use the charset if the file was explicit configured with a charset
name|String
name|charset
init|=
name|file
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read file {} with charset {}"
argument_list|,
name|f
argument_list|,
name|file
operator|.
name|getCharset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|toReader
argument_list|(
name|f
argument_list|,
name|charset
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read file {} (no charset)"
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return
name|toReader
argument_list|(
name|f
argument_list|,
name|ExchangeHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|toReader (File file, String charset)
specifier|private
specifier|static
name|BufferedReader
name|toReader
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|EncodingFileReader
argument_list|(
name|in
argument_list|,
name|charset
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toInputStream (File file, String charset)
specifier|private
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|EncodingInputStream
argument_list|(
name|file
argument_list|,
name|charset
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|toInputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
DECL|method|toInputStream (File file)
specifier|private
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toString (BufferedReader reader)
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
try|try
block|{
name|int
name|len
decl_stmt|;
comment|// read until we reach then end which is the -1 marker
while|while
condition|(
operator|(
name|len
operator|=
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|,
literal|"reader"
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Encoding-aware file reader.      */
DECL|class|EncodingFileReader
specifier|private
specifier|static
class|class
name|EncodingFileReader
extends|extends
name|InputStreamReader
block|{
DECL|field|in
specifier|private
specifier|final
name|FileInputStream
name|in
decl_stmt|;
comment|/**          * @param in file to read          * @param charset character set to use          */
DECL|method|EncodingFileReader (FileInputStream in, String charset)
name|EncodingFileReader
parameter_list|(
name|FileInputStream
name|in
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|UnsupportedEncodingException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|charset
argument_list|)
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Encoding-aware input stream.      */
DECL|class|EncodingInputStream
specifier|public
specifier|static
class|class
name|EncodingInputStream
extends|extends
name|InputStream
block|{
DECL|field|file
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
DECL|field|reader
specifier|private
specifier|final
name|BufferedReader
name|reader
decl_stmt|;
DECL|field|defaultStreamCharset
specifier|private
specifier|final
name|Charset
name|defaultStreamCharset
decl_stmt|;
DECL|field|bufferBytes
specifier|private
name|ByteBuffer
name|bufferBytes
decl_stmt|;
DECL|field|bufferedChars
specifier|private
name|CharBuffer
name|bufferedChars
init|=
name|CharBuffer
operator|.
name|allocate
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
DECL|method|EncodingInputStream (File file, String charset)
specifier|public
name|EncodingInputStream
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|reader
operator|=
name|toReader
argument_list|(
name|file
argument_list|,
name|charset
argument_list|)
expr_stmt|;
name|defaultStreamCharset
operator|=
name|defaultCharset
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bufferBytes
operator|==
literal|null
operator|||
name|bufferBytes
operator|.
name|remaining
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|bufferedChars
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|len
init|=
name|reader
operator|.
name|read
argument_list|(
name|bufferedChars
argument_list|)
decl_stmt|;
name|bufferedChars
operator|.
name|flip
argument_list|()
expr_stmt|;
if|if
condition|(
name|len
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|bufferBytes
operator|=
name|defaultStreamCharset
operator|.
name|encode
argument_list|(
name|bufferedChars
argument_list|)
expr_stmt|;
block|}
return|return
name|bufferBytes
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|toOriginalInputStream ()
specifier|public
name|InputStream
name|toOriginalInputStream
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

