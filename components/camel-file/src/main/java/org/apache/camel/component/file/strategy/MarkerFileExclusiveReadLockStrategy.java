begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.strategy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileExclusiveReadLockStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Acquires read lock to the given file using a marker file so other Camel consumers wont acquire the same file.  * This is the default behavior in Camel 1.x.  */
end_comment

begin_class
DECL|class|MarkerFileExclusiveReadLockStrategy
specifier|public
class|class
name|MarkerFileExclusiveReadLockStrategy
implements|implements
name|GenericFileExclusiveReadLockStrategy
argument_list|<
name|File
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MarkerFileExclusiveReadLockStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|markerFile
specifier|private
name|boolean
name|markerFile
init|=
literal|true
decl_stmt|;
DECL|field|deleteOrphanLockFiles
specifier|private
name|boolean
name|deleteOrphanLockFiles
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|prepareOnStartup (GenericFileOperations<File> operations, GenericFileEndpoint<File> endpoint)
specifier|public
name|void
name|prepareOnStartup
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFileEndpoint
argument_list|<
name|File
argument_list|>
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|deleteOrphanLockFiles
condition|)
block|{
name|String
name|dir
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Prepare on startup by deleting orphaned lock files from: {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|Pattern
name|excludePattern
init|=
name|endpoint
operator|.
name|getExcludePattern
argument_list|()
decl_stmt|;
name|Pattern
name|includePattern
init|=
name|endpoint
operator|.
name|getIncludePattern
argument_list|()
decl_stmt|;
name|String
name|endpointPath
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|deleteLockFiles
argument_list|(
name|file
argument_list|,
name|endpoint
operator|.
name|isRecursive
argument_list|()
argument_list|,
name|endpointPath
argument_list|,
name|endpoint
operator|.
name|getFilter
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getAntFilter
argument_list|()
argument_list|,
name|excludePattern
argument_list|,
name|includePattern
argument_list|)
expr_stmt|;
comment|// log anything that takes more than a second
if|if
condition|(
name|watch
operator|.
name|taken
argument_list|()
operator|>
literal|1000
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Prepared on startup by deleting orphaned lock files from: {} took {} millis to complete."
argument_list|,
name|dir
argument_list|,
name|watch
operator|.
name|taken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|acquireExclusiveReadLock (GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange)
specifier|public
name|boolean
name|acquireExclusiveReadLock
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|markerFile
condition|)
block|{
comment|// if not using marker file then we assume acquired
return|return
literal|true
return|;
block|}
name|String
name|lockFileName
init|=
name|getLockFileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Locking the file: {} using the lock file name: {}"
argument_list|,
name|file
argument_list|,
name|lockFileName
argument_list|)
expr_stmt|;
comment|// create a plain file as marker filer for locking (do not use FileLock)
name|boolean
name|acquired
init|=
name|FileUtil
operator|.
name|createNewFile
argument_list|(
operator|new
name|File
argument_list|(
name|lockFileName
argument_list|)
argument_list|)
decl_stmt|;
comment|// store read-lock state
name|exchange
operator|.
name|setProperty
argument_list|(
name|asReadLockKey
argument_list|(
name|file
argument_list|,
name|Exchange
operator|.
name|FILE_LOCK_FILE_ACQUIRED
argument_list|)
argument_list|,
name|acquired
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|asReadLockKey
argument_list|(
name|file
argument_list|,
name|Exchange
operator|.
name|FILE_LOCK_FILE_NAME
argument_list|)
argument_list|,
name|lockFileName
argument_list|)
expr_stmt|;
return|return
name|acquired
return|;
block|}
annotation|@
name|Override
DECL|method|releaseExclusiveReadLockOnAbort (GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange)
specifier|public
name|void
name|releaseExclusiveReadLockOnAbort
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|doReleaseExclusiveReadLock
argument_list|(
name|operations
argument_list|,
name|file
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|releaseExclusiveReadLockOnRollback (GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange)
specifier|public
name|void
name|releaseExclusiveReadLockOnRollback
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|doReleaseExclusiveReadLock
argument_list|(
name|operations
argument_list|,
name|file
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|releaseExclusiveReadLockOnCommit (GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange)
specifier|public
name|void
name|releaseExclusiveReadLockOnCommit
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|doReleaseExclusiveReadLock
argument_list|(
name|operations
argument_list|,
name|file
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|doReleaseExclusiveReadLock (GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange)
specifier|protected
name|void
name|doReleaseExclusiveReadLock
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|markerFile
condition|)
block|{
comment|// if not using marker file then nothing to release
return|return;
block|}
name|boolean
name|acquired
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|asReadLockKey
argument_list|(
name|file
argument_list|,
name|Exchange
operator|.
name|FILE_LOCK_FILE_ACQUIRED
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// only release the file if camel get the lock before
if|if
condition|(
name|acquired
condition|)
block|{
name|String
name|lockFileName
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|asReadLockKey
argument_list|(
name|file
argument_list|,
name|Exchange
operator|.
name|FILE_LOCK_FILE_NAME
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|lock
init|=
operator|new
name|File
argument_list|(
name|lockFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Unlocking file: {}"
argument_list|,
name|lockFileName
argument_list|)
expr_stmt|;
name|boolean
name|deleted
init|=
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Lock file: {} was deleted: {}"
argument_list|,
name|lockFileName
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|setCheckInterval (long checkInterval)
specifier|public
name|void
name|setCheckInterval
parameter_list|(
name|long
name|checkInterval
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|setReadLockLoggingLevel (LoggingLevel readLockLoggingLevel)
specifier|public
name|void
name|setReadLockLoggingLevel
parameter_list|(
name|LoggingLevel
name|readLockLoggingLevel
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|setMarkerFiler (boolean markerFile)
specifier|public
name|void
name|setMarkerFiler
parameter_list|(
name|boolean
name|markerFile
parameter_list|)
block|{
name|this
operator|.
name|markerFile
operator|=
name|markerFile
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDeleteOrphanLockFiles (boolean deleteOrphanLockFiles)
specifier|public
name|void
name|setDeleteOrphanLockFiles
parameter_list|(
name|boolean
name|deleteOrphanLockFiles
parameter_list|)
block|{
name|this
operator|.
name|deleteOrphanLockFiles
operator|=
name|deleteOrphanLockFiles
expr_stmt|;
block|}
DECL|method|deleteLockFiles (File dir, boolean recursive, String endpointPath, GenericFileFilter filter, GenericFileFilter antFilter, Pattern excludePattern, Pattern includePattern)
specifier|private
specifier|static
name|void
name|deleteLockFiles
parameter_list|(
name|File
name|dir
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|String
name|endpointPath
parameter_list|,
name|GenericFileFilter
name|filter
parameter_list|,
name|GenericFileFilter
name|antFilter
parameter_list|,
name|Pattern
name|excludePattern
parameter_list|,
name|Pattern
name|includePattern
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
operator|||
name|files
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// files starting with dot should be skipped
continue|continue;
block|}
comment|// filter unwanted files and directories to avoid traveling everything
if|if
condition|(
name|filter
operator|!=
literal|null
operator|||
name|antFilter
operator|!=
literal|null
operator|||
name|excludePattern
operator|!=
literal|null
operator|||
name|includePattern
operator|!=
literal|null
condition|)
block|{
name|File
name|targetFile
init|=
name|file
decl_stmt|;
comment|// if its a lock file then check if we accept its target file to know if we should delete the orphan lock file
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|FileComponent
operator|.
name|DEFAULT_LOCK_FILE_POSTFIX
argument_list|)
condition|)
block|{
name|String
name|target
init|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|-
name|FileComponent
operator|.
name|DEFAULT_LOCK_FILE_POSTFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|targetFile
operator|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targetFile
operator|=
operator|new
name|File
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|accept
init|=
name|acceptFile
argument_list|(
name|targetFile
argument_list|,
name|endpointPath
argument_list|,
name|filter
argument_list|,
name|antFilter
argument_list|,
name|excludePattern
argument_list|,
name|includePattern
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|accept
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|FileComponent
operator|.
name|DEFAULT_LOCK_FILE_POSTFIX
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deleting orphaned lock file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recursive
operator|&&
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteLockFiles
argument_list|(
name|file
argument_list|,
literal|true
argument_list|,
name|endpointPath
argument_list|,
name|filter
argument_list|,
name|antFilter
argument_list|,
name|excludePattern
argument_list|,
name|includePattern
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|acceptFile (File file, String endpointPath, GenericFileFilter filter, GenericFileFilter antFilter, Pattern excludePattern, Pattern includePattern)
specifier|private
specifier|static
name|boolean
name|acceptFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|endpointPath
parameter_list|,
name|GenericFileFilter
name|filter
parameter_list|,
name|GenericFileFilter
name|antFilter
parameter_list|,
name|Pattern
name|excludePattern
parameter_list|,
name|Pattern
name|includePattern
parameter_list|)
block|{
name|GenericFile
name|gf
init|=
operator|new
name|GenericFile
argument_list|()
decl_stmt|;
name|gf
operator|.
name|setEndpointPath
argument_list|(
name|endpointPath
argument_list|)
expr_stmt|;
name|gf
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|gf
operator|.
name|setFileNameOnly
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|gf
operator|.
name|setFileLength
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|gf
operator|.
name|setDirectory
argument_list|(
name|file
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// must use FileUtil.isAbsolute to have consistent check for whether the file is
comment|// absolute or not. As windows do not consider \ paths as absolute where as all
comment|// other OS platforms will consider \ as absolute. The logic in Camel mandates
comment|// that we align this for all OS. That is why we must use FileUtil.isAbsolute
comment|// to return a consistent answer for all OS platforms.
name|gf
operator|.
name|setAbsolute
argument_list|(
name|FileUtil
operator|.
name|isAbsolute
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|gf
operator|.
name|setAbsoluteFilePath
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|gf
operator|.
name|setLastModified
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
comment|// compute the file path as relative to the starting directory
name|File
name|path
decl_stmt|;
name|String
name|endpointNormalized
init|=
name|FileUtil
operator|.
name|normalizePath
argument_list|(
name|endpointPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|endpointNormalized
operator|+
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
comment|// skip duplicate endpoint path
name|path
operator|=
operator|new
name|File
argument_list|(
name|StringHelper
operator|.
name|after
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|endpointNormalized
operator|+
name|File
operator|.
name|separator
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|gf
operator|.
name|setRelativeFilePath
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gf
operator|.
name|setRelativeFilePath
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the file name should be the relative path
name|gf
operator|.
name|setFileName
argument_list|(
name|gf
operator|.
name|getRelativeFilePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
comment|// a custom filter can also filter directories
if|if
condition|(
operator|!
name|filter
operator|.
name|accept
argument_list|(
name|gf
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// the following filters only works on files so allow any directory from this point
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|antFilter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|antFilter
operator|.
name|accept
argument_list|(
name|gf
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// exclude take precedence over include
if|if
condition|(
name|excludePattern
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|excludePattern
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|includePattern
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|includePattern
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|getLockFileName (GenericFile<File> file)
specifier|private
specifier|static
name|String
name|getLockFileName
parameter_list|(
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
operator|+
name|FileComponent
operator|.
name|DEFAULT_LOCK_FILE_POSTFIX
return|;
block|}
DECL|method|asReadLockKey (GenericFile file, String key)
specifier|private
specifier|static
name|String
name|asReadLockKey
parameter_list|(
name|GenericFile
name|file
parameter_list|,
name|String
name|key
parameter_list|)
block|{
comment|// use the copy from absolute path as that was the original path of the file when the lock was acquired
comment|// for example if the file consumer uses preMove then the file is moved and therefore has another name
comment|// that would no longer match
name|String
name|path
init|=
name|file
operator|.
name|getCopyFromAbsoluteFilePath
argument_list|()
operator|!=
literal|null
condition|?
name|file
operator|.
name|getCopyFromAbsoluteFilePath
argument_list|()
else|:
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
return|return
name|path
operator|+
literal|"-"
operator|+
name|key
return|;
block|}
block|}
end_class

end_unit

