begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_comment
comment|/**  * File filter using AntPathMatcher.  *<p/>  * Exclude take precedence over includes. If a file match both exclude and include it will be regarded as excluded.  * @param<T>  */
end_comment

begin_class
DECL|class|AntPathMatcherGenericFileFilter
specifier|public
class|class
name|AntPathMatcherGenericFileFilter
parameter_list|<
name|T
parameter_list|>
implements|implements
name|GenericFileFilter
argument_list|<
name|T
argument_list|>
block|{
DECL|field|filter
specifier|private
specifier|final
name|AntPathMatcherFileFilter
name|filter
decl_stmt|;
DECL|method|AntPathMatcherGenericFileFilter ()
specifier|public
name|AntPathMatcherGenericFileFilter
parameter_list|()
block|{
name|filter
operator|=
operator|new
name|AntPathMatcherFileFilter
argument_list|()
expr_stmt|;
block|}
DECL|method|AntPathMatcherGenericFileFilter (String... includes)
specifier|public
name|AntPathMatcherGenericFileFilter
parameter_list|(
name|String
modifier|...
name|includes
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|AntPathMatcherFileFilter
argument_list|()
expr_stmt|;
name|filter
operator|.
name|setIncludes
argument_list|(
name|includes
argument_list|)
expr_stmt|;
block|}
DECL|method|accept (GenericFile<T> file)
specifier|public
name|boolean
name|accept
parameter_list|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|)
block|{
comment|// directories should always be accepted by ANT path matcher
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|path
init|=
name|file
operator|.
name|getRelativeFilePath
argument_list|()
decl_stmt|;
return|return
name|filter
operator|.
name|acceptPathName
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|getExcludes ()
specifier|public
name|String
index|[]
name|getExcludes
parameter_list|()
block|{
return|return
name|filter
operator|.
name|getExcludes
argument_list|()
return|;
block|}
DECL|method|setExcludes (String[] excludes)
specifier|public
name|void
name|setExcludes
parameter_list|(
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|filter
operator|.
name|setExcludes
argument_list|(
name|excludes
argument_list|)
expr_stmt|;
block|}
DECL|method|getIncludes ()
specifier|public
name|String
index|[]
name|getIncludes
parameter_list|()
block|{
return|return
name|filter
operator|.
name|getIncludes
argument_list|()
return|;
block|}
DECL|method|setIncludes (String[] includes)
specifier|public
name|void
name|setIncludes
parameter_list|(
name|String
index|[]
name|includes
parameter_list|)
block|{
name|filter
operator|.
name|setIncludes
argument_list|(
name|includes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets excludes using a single string where each element can be separated with comma      */
DECL|method|setExcludes (String excludes)
specifier|public
name|void
name|setExcludes
parameter_list|(
name|String
name|excludes
parameter_list|)
block|{
name|filter
operator|.
name|setExcludes
argument_list|(
name|excludes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets includes using a single string where each element can be separated with comma      */
DECL|method|setIncludes (String includes)
specifier|public
name|void
name|setIncludes
parameter_list|(
name|String
name|includes
parameter_list|)
block|{
name|filter
operator|.
name|setIncludes
argument_list|(
name|includes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets case sensitive flag on {@link org.apache.camel.component.file.AntPathMatcherFileFilter}      *<p/>      * Is by default turned on<tt>true</tt>.      */
DECL|method|setCaseSensitive (boolean caseSensitive)
specifier|public
name|void
name|setCaseSensitive
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|filter
operator|.
name|setCaseSensitive
argument_list|(
name|caseSensitive
argument_list|)
expr_stmt|;
block|}
DECL|method|isCaseSensitive ()
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|filter
operator|.
name|isCaseSensitive
argument_list|()
return|;
block|}
block|}
end_class

end_unit

