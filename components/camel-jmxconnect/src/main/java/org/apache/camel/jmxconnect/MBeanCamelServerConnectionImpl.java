begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jmxconnect
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jmxconnect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|MBeanCamelServerConnectionImpl
specifier|public
class|class
name|MBeanCamelServerConnectionImpl
extends|extends
name|MBeanServerConnectionDelegate
implements|implements
name|MBeanCamelServerConnection
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MBeanCamelServerConnectionImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|notificationListeners
specifier|private
name|Map
name|notificationListeners
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
DECL|field|template
specifier|private
specifier|final
name|ProducerTemplate
name|template
decl_stmt|;
DECL|method|MBeanCamelServerConnectionImpl (MBeanServerConnection connection, ProducerTemplate template)
specifier|public
name|MBeanCamelServerConnectionImpl
parameter_list|(
name|MBeanServerConnection
name|connection
parameter_list|,
name|ProducerTemplate
name|template
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
block|}
comment|/**      * Add a Notification listener      *      * @param listenerId      * @param name      * @param replyToEndpoint      */
DECL|method|addNotificationListener (String listenerId, ObjectName name, Endpoint replyToEndpoint)
specifier|public
name|void
name|addNotificationListener
parameter_list|(
name|String
name|listenerId
parameter_list|,
name|ObjectName
name|name
parameter_list|,
name|Endpoint
name|replyToEndpoint
parameter_list|)
block|{
try|try
block|{
name|ServerListenerInfo
name|info
init|=
operator|new
name|ServerListenerInfo
argument_list|(
name|listenerId
argument_list|,
name|notificationListeners
argument_list|,
name|template
argument_list|,
name|replyToEndpoint
argument_list|)
decl_stmt|;
name|notificationListeners
operator|.
name|put
argument_list|(
name|listenerId
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|connection
operator|.
name|addNotificationListener
argument_list|(
name|name
argument_list|,
name|info
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to addNotificationListener "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove a Notification listener      *      * @param listenerId      */
DECL|method|removeNotificationListener (String listenerId)
specifier|public
name|void
name|removeNotificationListener
parameter_list|(
name|String
name|listenerId
parameter_list|)
block|{
name|ServerListenerInfo
name|info
init|=
operator|(
name|ServerListenerInfo
operator|)
name|notificationListeners
operator|.
name|remove
argument_list|(
name|listenerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

