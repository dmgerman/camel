begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jmxconnect
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jmxconnect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Notification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|ServerListenerInfo
class|class
name|ServerListenerInfo
implements|implements
name|NotificationListener
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ServerListenerInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|holder
specifier|private
specifier|final
name|Map
name|holder
decl_stmt|;
DECL|field|template
specifier|private
specifier|final
name|ProducerTemplate
name|template
decl_stmt|;
DECL|field|replyToEndpoint
specifier|private
specifier|final
name|Endpoint
name|replyToEndpoint
decl_stmt|;
DECL|method|ServerListenerInfo (String id, Map holder, ProducerTemplate template, Endpoint replyToEndpoint)
name|ServerListenerInfo
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
name|holder
parameter_list|,
name|ProducerTemplate
name|template
parameter_list|,
name|Endpoint
name|replyToEndpoint
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
name|this
operator|.
name|replyToEndpoint
operator|=
name|replyToEndpoint
expr_stmt|;
block|}
comment|/**      * NotificationListener implementation      *      * @param notification      * @param handback      */
DECL|method|handleNotification (Notification notification, Object handback)
specifier|public
name|void
name|handleNotification
parameter_list|(
name|Notification
name|notification
parameter_list|,
name|Object
name|handback
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Should be sending notification: "
operator|+
name|notification
argument_list|)
expr_stmt|;
if|if
condition|(
name|replyToEndpoint
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No replyToDestination for replies to be received so cannot send notification: "
operator|+
name|notification
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|replyToEndpoint
argument_list|,
name|notification
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * close the info if the connection times out      *<p/>      * TODO we should auto-detect that id has timed out and then remove this subscription      */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|holder
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the holder.      */
DECL|method|getHolder ()
specifier|public
name|Map
name|getHolder
parameter_list|()
block|{
return|return
name|holder
return|;
block|}
comment|/**      * @return Returns the id.      */
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

