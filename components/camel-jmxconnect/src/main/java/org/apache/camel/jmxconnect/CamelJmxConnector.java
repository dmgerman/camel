begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jmxconnect
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jmxconnect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ListenerNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationBroadcaster
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationBroadcasterSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationEmitter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectionNotification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServerErrorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|remoting
operator|.
name|CamelProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  *<p>  * The client end of a JMX API connector. An object of this type can be used to establish a connection to a connector  * server.  *</p>  *<p/>  *<p>  * A newly-created object of this type is unconnected. Its {@link #connect()} method must be called before it can  * be used. However, objects created by {@link JMXConnectorFactory#connect(JMXServiceURL, Map)  * JMXConnectorFactory.connect} are already connected.  *</p>  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|CamelJmxConnector
specifier|public
class|class
name|CamelJmxConnector
implements|implements
name|JMXConnector
implements|,
name|CamelContextAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JMXConnector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connectionNotifier
specifier|private
name|NotificationBroadcasterSupport
name|connectionNotifier
init|=
operator|new
name|NotificationBroadcasterSupport
argument_list|()
decl_stmt|;
DECL|field|notificationNumber
specifier|private
name|AtomicLong
name|notificationNumber
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|env
specifier|private
name|Map
name|env
decl_stmt|;
DECL|field|endpointUri
specifier|private
name|String
name|endpointUri
decl_stmt|;
DECL|field|proxy
specifier|private
name|CamelProxyFactoryBean
name|proxy
decl_stmt|;
DECL|field|client
specifier|private
name|MBeanCamelServerConnectionClient
name|client
decl_stmt|;
DECL|field|connected
specifier|private
name|boolean
name|connected
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|connectionId
specifier|private
name|String
name|connectionId
decl_stmt|;
DECL|method|CamelJmxConnector (Map env, String endpointUri)
specifier|public
name|CamelJmxConnector
parameter_list|(
name|Map
name|env
parameter_list|,
name|String
name|endpointUri
parameter_list|)
block|{
name|this
operator|.
name|env
operator|=
name|env
expr_stmt|;
name|this
operator|.
name|endpointUri
operator|=
name|endpointUri
expr_stmt|;
block|}
DECL|method|CamelJmxConnector (Map env, JMXServiceURL url)
specifier|public
name|CamelJmxConnector
parameter_list|(
name|Map
name|env
parameter_list|,
name|JMXServiceURL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|env
argument_list|,
name|CamelJmxConnectorSupport
operator|.
name|getEndpointUri
argument_list|(
name|url
argument_list|,
literal|"camel"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set any props in the url
comment|// TODO
comment|// populateProperties(this, endpointUri);
block|}
comment|/**      *<p>      * Establishes the connection to the connector server. This method is equivalent to {@link #connect(Map)      * connect(null)}.      *</p>      *      * @throws IOException       if the connection could not be made because of a communication problem.      * @throws SecurityException if the connection could not be made for security reasons.      */
DECL|method|connect ()
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
name|connect
argument_list|(
name|this
operator|.
name|env
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>      * Establishes the connection to the connector server.      *</p>      *<p/>      *<p>      * If<code>connect</code> has already been called successfully on this object, calling it again has no effect.      * If, however, {@link #close} was called after<code>connect</code>, the new<code>connect</code> will throw      * an<code>IOException</code>.      *<p>      *<p/>      *<p>      * Otherwise, either<code>connect</code> has never been called on this object, or it has been called but produced      * an exception. Then calling<code>connect</code> will attempt to establish a connection to the connector server.      *</p>      *      * @param env the properties of the connection. Properties in this map override properties in the map specified when      *            the<code>JMXConnector</code> was created, if any. This parameter can be null, which is equivalent      *            to an empty map.      * @throws IOException       if the connection could not be made because of a communication problem.      * @throws SecurityException if the connection could not be made for security reasons.      */
DECL|method|connect (Map env)
specifier|public
name|void
name|connect
parameter_list|(
name|Map
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|connected
condition|)
block|{
try|try
block|{
name|proxy
operator|=
operator|new
name|CamelProxyFactoryBean
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|setCamelContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setServiceInterface
argument_list|(
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
operator|.
name|class
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setServiceInterface
argument_list|(
name|MBeanCamelServerConnection
operator|.
name|class
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setServiceUrl
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|client
operator|=
operator|new
name|MBeanCamelServerConnectionClient
argument_list|(
operator|(
name|MBeanCamelServerConnection
operator|)
name|proxy
operator|.
name|getObject
argument_list|()
comment|/* TODO */
argument_list|)
expr_stmt|;
name|connectionId
operator|=
name|client
operator|.
name|generateId
argument_list|()
expr_stmt|;
comment|// TODO we need to establish a replyToEndpoint and inform the server!
name|sendConnectionNotificationOpened
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to connect: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
name|ioe
throw|;
block|}
name|connected
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Returns an<code>MBeanServerConnection</code> object representing a remote MBean server. For a given      *<code>JMXConnector</code>, two successful calls to this method will usually return the same      *<code>MBeanServerConnection</code> object, though this is not required.      *</p>      *<p/>      *<p>      * For each method in the returned<code>MBeanServerConnection</code>, calling the method causes the      * corresponding method to be called in the remote MBean server. The value returned by the MBean server method is      * the value returned to the client. If the MBean server method produces an<code>Exception</code>, the same      *<code>Exception</code> is seen by the client. If the MBean server method, or the attempt to call it, produces      * an<code>Error</code>, the<code>Error</code> is wrapped in a {@link JMXServerErrorException}, which is      * seen by the client.      *</p>      *<p/>      *<p>      * Calling this method is equivalent to calling      * {@link #getMBeanServerConnection(Subject) getMBeanServerConnection(null)} meaning that no delegation subject is      * specified and that all the operations called on the<code>MBeanServerConnection</code> must use the      * authenticated subject, if any.      *</p>      *      * @return an object that implements the<code>MBeanServerConnection</code> interface by forwarding its methods to      *         the remote MBean server.      */
DECL|method|getMBeanServerConnection ()
specifier|public
name|MBeanServerConnection
name|getMBeanServerConnection
parameter_list|()
block|{
return|return
name|client
return|;
block|}
comment|/**      *<p>      * Returns an<code>MBeanServerConnection</code> object representing a remote MBean server on which operations are      * performed on behalf of the supplied delegation subject. For a given<code>JMXConnector</code> and      *<code>Subject</code>, two successful calls to this method will usually return the same      *<code>MBeanServerConnection</code> object, though this is not required.      *</p>      *<p/>      *<p>      * For each method in the returned<code>MBeanServerConnection</code>, calling the method causes the      * corresponding method to be called in the remote MBean server on behalf of the given delegation subject instead of      * the authenticated subject. The value returned by the MBean server method is the value returned to the client. If      * the MBean server method produces an<code>Exception</code>, the same<code>Exception</code> is seen by the      * client. If the MBean server method, or the attempt to call it, produces an<code>Error</code>, the      *<code>Error</code> is wrapped in a {@link JMXServerErrorException}, which is seen by the client.      *</p>      *      * @param delegationSubject the<code>Subject</code> on behalf of which requests will be performed. Can be null, in which case      *                          requests will be performed on behalf of the authenticated Subject, if any.      * @return an object that implements the<code>MBeanServerConnection</code> interface by forwarding its methods to      *         the remote MBean server on behalf of a given delegation subject.      */
DECL|method|getMBeanServerConnection (Subject delegationSubject)
specifier|public
name|MBeanServerConnection
name|getMBeanServerConnection
parameter_list|(
name|Subject
name|delegationSubject
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      *<p>      * Closes the client connection to its server. Any ongoing or new request using the MBeanServerConnection returned      * by {@link #getMBeanServerConnection()} will get an<code>IOException</code>.      *</p>      *<p/>      *<p>      * If<code>close</code> has already been called successfully on this object, calling it again has no effect. If      *<code>close</code> has never been called, or if it was called but produced an exception, an attempt will be      * made to close the connection. This attempt can succeed, in which case<code>close</code> will return normally,      * or it can generate an exception.      *</p>      *<p/>      *<p>      * Closing a connection is a potentially slow operation. For example, if the server has crashed, the close operation      * might have to wait for a network protocol timeout. Callers that do not want to block in a close operation should      * do it in a separate thread.      *</p>      *      * @throws IOException if the connection cannot be closed cleanly. If this exception is thrown, it is not known whether      *                     the server end of the connection has been cleanly closed.      */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|connected
condition|)
block|{
name|connected
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|sendConnectionNotificationClosed
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to destroy proxy: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      *<p>      * Adds a listener to be informed of changes in connection status. The listener will receive notifications of type      * {@link JMXConnectionNotification}. An implementation can send other types of notifications too.      *</p>      *<p/>      *<p>      * Any number of listeners can be added with this method. The same listener can be added more than once with the      * same or different values for the filter and handback. There is no special treatment of a duplicate entry. For      * example, if a listener is registered twice with no filter, then its<code>handleNotification</code> method will      * be called twice for each notification.      *</p>      *      * @param listener a listener to receive connection status notifications.      * @param filter   a filter to select which notifications are to be delivered to the listener, or null if all      *                 notifications are to be delivered.      * @param handback an object to be given to the listener along with each notification. Can be null.      * @throws NullPointerException if<code>listener</code> is null.      * @see #removeConnectionNotificationListener      * @see NotificationBroadcaster#addNotificationListener      */
DECL|method|addConnectionNotificationListener (NotificationListener listener, NotificationFilter filter, Object handback)
specifier|public
name|void
name|addConnectionNotificationListener
parameter_list|(
name|NotificationListener
name|listener
parameter_list|,
name|NotificationFilter
name|filter
parameter_list|,
name|Object
name|handback
parameter_list|)
block|{
name|connectionNotifier
operator|.
name|addNotificationListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>      * Removes a listener from the list to be informed of changes in status. The listener must previously have been      * added. If there is more than one matching listener, all are removed.      *</p>      *      * @param listener a listener to receive connection status notifications.      * @throws NullPointerException      if<code>listener</code> is null.      * @throws ListenerNotFoundException if the listener is not registered with this<code>JMXConnector</code>.      * @see #removeConnectionNotificationListener(NotificationListener, NotificationFilter, Object)      * @see #addConnectionNotificationListener      * @see NotificationEmitter#removeNotificationListener      */
DECL|method|removeConnectionNotificationListener (NotificationListener listener)
specifier|public
name|void
name|removeConnectionNotificationListener
parameter_list|(
name|NotificationListener
name|listener
parameter_list|)
throws|throws
name|ListenerNotFoundException
block|{
name|connectionNotifier
operator|.
name|removeNotificationListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>      * Removes a listener from the list to be informed of changes in status. The listener must previously have been      * added with the same three parameters. If there is more than one matching listener, only one is removed.      *</p>      *      * @param l        a listener to receive connection status notifications.      * @param f        a filter to select which notifications are to be delivered to the listener. Can be null.      * @param handback an object to be given to the listener along with each notification. Can be null.      * @throws ListenerNotFoundException if the listener is not registered with this<code>JMXConnector</code>, or is not registered      *                                   with the given filter and handback.      * @see #removeConnectionNotificationListener(NotificationListener)      * @see #addConnectionNotificationListener      * @see NotificationEmitter#removeNotificationListener      */
DECL|method|removeConnectionNotificationListener (NotificationListener l, NotificationFilter f, Object handback)
specifier|public
name|void
name|removeConnectionNotificationListener
parameter_list|(
name|NotificationListener
name|l
parameter_list|,
name|NotificationFilter
name|f
parameter_list|,
name|Object
name|handback
parameter_list|)
throws|throws
name|ListenerNotFoundException
block|{
name|connectionNotifier
operator|.
name|removeNotificationListener
argument_list|(
name|l
argument_list|,
name|f
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>      * Gets this connection's ID from the connector server. For a given connector server, every connection will have a      * unique id which does not change during the lifetime of the connection.      *</p>      *      * @return the unique ID of this connection. This is the same as the ID that the connector server includes in its      *         {@link JMXConnectionNotification}s. The {@link javax.management.remote package description} describes the      *         conventions for connection IDs.      */
DECL|method|getConnectionId ()
specifier|public
name|String
name|getConnectionId
parameter_list|()
block|{
return|return
name|connectionId
return|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No CamelContext injected so creating a default implementation"
argument_list|)
expr_stmt|;
comment|// TODO should we barf or create a default one?
name|camelContext
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
block|}
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|sendConnectionNotificationOpened ()
specifier|private
name|void
name|sendConnectionNotificationOpened
parameter_list|()
block|{
name|JMXConnectionNotification
name|notification
init|=
operator|new
name|JMXConnectionNotification
argument_list|(
name|JMXConnectionNotification
operator|.
name|OPENED
argument_list|,
name|this
argument_list|,
name|getConnectionId
argument_list|()
argument_list|,
name|notificationNumber
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
literal|"Connection opened"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connectionNotifier
operator|.
name|sendNotification
argument_list|(
name|notification
argument_list|)
expr_stmt|;
block|}
DECL|method|sendConnectionNotificationClosed ()
specifier|private
name|void
name|sendConnectionNotificationClosed
parameter_list|()
block|{
name|JMXConnectionNotification
name|notification
init|=
operator|new
name|JMXConnectionNotification
argument_list|(
name|JMXConnectionNotification
operator|.
name|CLOSED
argument_list|,
name|this
argument_list|,
name|getConnectionId
argument_list|()
argument_list|,
name|notificationNumber
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
literal|"Connection closed"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connectionNotifier
operator|.
name|sendNotification
argument_list|(
name|notification
argument_list|)
expr_stmt|;
block|}
DECL|method|sendConnectionNotificationFailed (String message)
specifier|private
name|void
name|sendConnectionNotificationFailed
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|JMXConnectionNotification
name|notification
init|=
operator|new
name|JMXConnectionNotification
argument_list|(
name|JMXConnectionNotification
operator|.
name|FAILED
argument_list|,
name|this
argument_list|,
name|getConnectionId
argument_list|()
argument_list|,
name|notificationNumber
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connectionNotifier
operator|.
name|sendNotification
argument_list|(
name|notification
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

