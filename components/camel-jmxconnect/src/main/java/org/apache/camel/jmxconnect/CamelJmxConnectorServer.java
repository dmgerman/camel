begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jmxconnect
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jmxconnect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|remoting
operator|.
name|CamelServiceExporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  *<p>The client end of a JMX API connector.  An object of this type can  * be used to establish a connection to a connector server.</p>  *<p/>  *<p>A newly-created object of this type is unconnected.  Its {@link#connect}  * method must be called before it can be used.  * However, objects created by {@link  * JMXConnectorFactory#connect(JMXServiceURL, Map)  * JMXConnectorFactory.connect} are already connected.</p>  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|CamelJmxConnectorServer
specifier|public
class|class
name|CamelJmxConnectorServer
extends|extends
name|JMXConnectorServer
implements|implements
name|CamelContextAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CamelJmxConnectorServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|url
specifier|private
name|JMXServiceURL
name|url
decl_stmt|;
DECL|field|env
specifier|private
specifier|final
name|Map
name|env
decl_stmt|;
DECL|field|stopped
specifier|private
specifier|volatile
name|boolean
name|stopped
init|=
literal|true
decl_stmt|;
DECL|field|service
specifier|private
name|CamelServiceExporter
name|service
decl_stmt|;
DECL|field|serverConnection
specifier|private
name|MBeanCamelServerConnectionImpl
name|serverConnection
decl_stmt|;
DECL|field|endpointUri
specifier|private
name|String
name|endpointUri
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|CamelJmxConnectorServer (JMXServiceURL url, String endpointUri, Map environment, MBeanServer server)
specifier|public
name|CamelJmxConnectorServer
parameter_list|(
name|JMXServiceURL
name|url
parameter_list|,
name|String
name|endpointUri
parameter_list|,
name|Map
name|environment
parameter_list|,
name|MBeanServer
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|env
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|endpointUri
operator|=
name|endpointUri
expr_stmt|;
block|}
DECL|method|CamelJmxConnectorServer (JMXServiceURL url, Map environment, MBeanServer server)
specifier|public
name|CamelJmxConnectorServer
parameter_list|(
name|JMXServiceURL
name|url
parameter_list|,
name|Map
name|environment
parameter_list|,
name|MBeanServer
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|url
argument_list|,
name|CamelJmxConnectorSupport
operator|.
name|getEndpointUri
argument_list|(
name|url
argument_list|,
literal|"camel"
argument_list|)
argument_list|,
name|environment
argument_list|,
name|server
argument_list|)
expr_stmt|;
comment|//set any props in the url
comment|// TODO
comment|// populateProperties(this, endpointUri);
block|}
comment|/**      * start the connector      *      * @throws IOException      */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|service
operator|=
operator|new
name|CamelServiceExporter
argument_list|()
expr_stmt|;
name|service
operator|.
name|setCamelContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|setServiceInterface
argument_list|(
name|MBeanCamelServerConnection
operator|.
name|class
argument_list|)
expr_stmt|;
name|service
operator|.
name|setUri
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverConnection
operator|=
operator|new
name|MBeanCamelServerConnectionImpl
argument_list|(
name|getMBeanServer
argument_list|()
argument_list|,
comment|/* TODO */
literal|null
argument_list|)
expr_stmt|;
name|service
operator|.
name|setService
argument_list|(
name|serverConnection
argument_list|)
expr_stmt|;
name|service
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|stopped
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * stop the connector      *      * @throws IOException      */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|stopped
condition|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
name|service
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
operator|!
name|stopped
return|;
block|}
DECL|method|getAddress ()
specifier|public
name|JMXServiceURL
name|getAddress
parameter_list|()
block|{
return|return
name|url
return|;
block|}
DECL|method|getAttributes ()
specifier|public
name|Map
name|getAttributes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|env
argument_list|)
return|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No CamelContext injected so creating a default implementation"
argument_list|)
expr_stmt|;
comment|// TODO should we barf or create a default one?
name|camelContext
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
block|}
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
block|}
end_class

end_unit

