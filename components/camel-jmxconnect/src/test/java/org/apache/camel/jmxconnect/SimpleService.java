begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jmxconnect
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jmxconnect
package|;
end_package

begin_comment
comment|/**  * This is based heavily on the DynamicService example from the mx4j project  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|SimpleService
specifier|public
class|class
name|SimpleService
implements|implements
name|Runnable
implements|,
name|SimpleServiceMBean
block|{
DECL|field|running
specifier|private
name|boolean
name|running
decl_stmt|;
DECL|field|simpleCounter
specifier|private
name|int
name|simpleCounter
init|=
literal|0
decl_stmt|;
DECL|field|simpleValue
specifier|private
name|int
name|simpleValue
init|=
literal|0
decl_stmt|;
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
operator|!
name|running
condition|)
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|simpleCounter
operator|++
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setSimpleCounter (int simpleCounter)
specifier|public
name|void
name|setSimpleCounter
parameter_list|(
name|int
name|simpleCounter
parameter_list|)
block|{
name|this
operator|.
name|simpleCounter
operator|=
name|simpleCounter
expr_stmt|;
block|}
DECL|method|getSimpleCounter ()
specifier|public
name|int
name|getSimpleCounter
parameter_list|()
block|{
return|return
name|simpleCounter
return|;
block|}
DECL|method|getSimpleValue ()
specifier|public
name|int
name|getSimpleValue
parameter_list|()
block|{
return|return
name|simpleValue
return|;
block|}
DECL|method|setSimpleValue (int simpleValue)
specifier|public
name|void
name|setSimpleValue
parameter_list|(
name|int
name|simpleValue
parameter_list|)
block|{
name|this
operator|.
name|simpleValue
operator|=
name|simpleValue
expr_stmt|;
block|}
comment|/*      protected MBeanAttributeInfo[] createMBeanAttributeInfo(){         return new MBeanAttributeInfo[] {                 new MBeanAttributeInfo("SimpleCounter","int","test simpleCounter",true,false,false),                 new MBeanAttributeInfo("SimpleValue","int","test simpleValue",true,true,false) };     }      protected MBeanOperationInfo[] createMBeanOperationInfo(){         return new MBeanOperationInfo[] {                 new MBeanOperationInfo("start","Starts the SimpleService",new MBeanParameterInfo[0],"void",                                 MBeanOperationInfo.ACTION),                 new MBeanOperationInfo("stop","Stops the SimpleService",new MBeanParameterInfo[0],"void",                                 MBeanOperationInfo.ACTION) };     }*/
block|}
end_class

end_unit

