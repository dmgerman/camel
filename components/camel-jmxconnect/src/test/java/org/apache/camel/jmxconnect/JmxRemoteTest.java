begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jmxconnect
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jmxconnect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Notification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|monitor
operator|.
name|GaugeMonitor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorServerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|JmxRemoteTest
specifier|public
class|class
name|JmxRemoteTest
extends|extends
name|TestCase
block|{
DECL|field|serverServiceUrl
specifier|protected
name|String
name|serverServiceUrl
init|=
literal|"service:jmx:camel:///activemq:foo"
decl_stmt|;
DECL|field|clientServiceUrl
specifier|protected
name|String
name|clientServiceUrl
init|=
literal|"service:jmx:camel:///activemq:foo"
decl_stmt|;
DECL|field|brokerUrl
specifier|protected
name|String
name|brokerUrl
init|=
literal|"broker:(tcp://localhost:61616)/localhost?persistent=false"
decl_stmt|;
DECL|field|server
specifier|private
name|MBeanServer
name|server
decl_stmt|;
DECL|field|broker
specifier|private
name|BrokerService
name|broker
decl_stmt|;
DECL|field|connectorServer
specifier|private
name|JMXConnectorServer
name|connectorServer
decl_stmt|;
DECL|field|connector
specifier|private
name|JMXConnector
name|connector
decl_stmt|;
DECL|field|serviceName
specifier|private
name|ObjectName
name|serviceName
decl_stmt|;
DECL|field|service
specifier|private
name|SimpleService
name|service
decl_stmt|;
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
name|brokerUrl
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|server
operator|=
name|MBeanServerFactory
operator|.
name|createMBeanServer
argument_list|()
expr_stmt|;
comment|//register a service
name|service
operator|=
operator|new
name|SimpleService
argument_list|()
expr_stmt|;
name|serviceName
operator|=
operator|new
name|ObjectName
argument_list|(
literal|"examples"
argument_list|,
literal|"mbean"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerMBean
argument_list|(
name|service
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
comment|// start the connector server
comment|//START SNIPPET: serverJMX
comment|//The url to the JMS service
name|JMXServiceURL
name|serverURL
init|=
operator|new
name|JMXServiceURL
argument_list|(
name|serverServiceUrl
argument_list|)
decl_stmt|;
name|Map
name|serverEnv
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|serverEnv
operator|.
name|put
argument_list|(
literal|"jmx.remote.protocol.provider.pkgs"
argument_list|,
literal|"org.apache.camel.jmxconnect.provider"
argument_list|)
expr_stmt|;
name|connectorServer
operator|=
name|JMXConnectorServerFactory
operator|.
name|newJMXConnectorServer
argument_list|(
name|serverURL
argument_list|,
name|serverEnv
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|connectorServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//END SNIPPET: serverJMX
comment|//START SNIPPET: clientJMX
comment|//Now connect the client-side
comment|//The URL to the JMS service
name|JMXServiceURL
name|clientURL
init|=
operator|new
name|JMXServiceURL
argument_list|(
name|clientServiceUrl
argument_list|)
decl_stmt|;
name|Map
name|clientEnv
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|clientEnv
operator|.
name|put
argument_list|(
literal|"jmx.remote.protocol.provider.pkgs"
argument_list|,
literal|"org.apache.camel.jmxconnect.provider"
argument_list|)
expr_stmt|;
name|JMXConnector
name|clientConnector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|clientURL
argument_list|,
name|clientEnv
argument_list|)
decl_stmt|;
comment|// Connect a JSR 160 JMXConnector to the server side
name|connector
operator|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|clientURL
argument_list|,
name|clientEnv
argument_list|)
expr_stmt|;
comment|//now test the Connection
name|MBeanServerConnection
name|connection
init|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
comment|//END SNIPPET: clientJMX
block|}
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|connector
operator|.
name|close
argument_list|()
expr_stmt|;
name|connectorServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleRemoteJmx ()
specifier|public
name|void
name|testSimpleRemoteJmx
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Retrieve an MBeanServerConnection that represent the MBeanServer the remote
comment|// connector server is bound to
name|MBeanServerConnection
name|connection
init|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|ObjectName
name|queryName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Set
name|names
init|=
name|connection
operator|.
name|queryNames
argument_list|(
name|queryName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
operator|(
name|ObjectName
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|MBeanInfo
name|beanInfo
init|=
name|connection
operator|.
name|getMBeanInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"bean info = "
operator|+
name|beanInfo
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"attrs = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|beanInfo
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Object
name|value
init|=
name|connection
operator|.
name|getAttribute
argument_list|(
name|serviceName
argument_list|,
literal|"SimpleValue"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SimpleValue = "
operator|+
name|value
argument_list|)
expr_stmt|;
name|Attribute
name|attr
init|=
operator|new
name|Attribute
argument_list|(
literal|"SimpleValue"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|connection
operator|.
name|setAttribute
argument_list|(
name|serviceName
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|value
operator|=
name|connection
operator|.
name|getAttribute
argument_list|(
name|serviceName
argument_list|,
literal|"SimpleValue"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SimpleValue"
argument_list|,
name|value
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"now SimpleValue = "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
comment|// TODO not implemented yet!
comment|// need server side push, the client needs to register with a replyToEndpoint
DECL|method|xtestNotificationsJmx ()
specifier|public
name|void
name|xtestNotificationsJmx
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Now let's register a Monitor
comment|// We would like to know if we have peaks in activity, so we can use JMX's
comment|// GaugeMonitor
name|GaugeMonitor
name|monitorMBean
init|=
operator|new
name|GaugeMonitor
argument_list|()
decl_stmt|;
name|ObjectName
name|monitorName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"examples"
argument_list|,
literal|"monitor"
argument_list|,
literal|"gauge"
argument_list|)
decl_stmt|;
name|server
operator|.
name|registerMBean
argument_list|(
name|monitorMBean
argument_list|,
name|monitorName
argument_list|)
expr_stmt|;
comment|// Setup the monitor: we want to be notified if we have too many clients or too less
name|monitorMBean
operator|.
name|setThresholds
argument_list|(
operator|new
name|Integer
argument_list|(
literal|8
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup the monitor: we want to know if a threshold is exceeded
name|monitorMBean
operator|.
name|setNotifyHigh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monitorMBean
operator|.
name|setNotifyLow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monitorMBean
operator|.
name|setDifferenceMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Setup the monitor: link to the service MBean
name|monitorMBean
operator|.
name|addObservedObject
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|monitorMBean
operator|.
name|setObservedAttribute
argument_list|(
literal|"SimpleCounter"
argument_list|)
expr_stmt|;
comment|// Setup the monitor: a short granularity period
name|monitorMBean
operator|.
name|setGranularityPeriod
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
comment|// Setup the monitor: register a listener
name|MBeanServerConnection
name|connection
init|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|notificationSet
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|//Add a notification listener to the connection - to
comment|//test for notifications across camel
name|connection
operator|.
name|addNotificationListener
argument_list|(
name|monitorName
argument_list|,
operator|new
name|NotificationListener
argument_list|()
block|{
specifier|public
name|void
name|handleNotification
parameter_list|(
name|Notification
name|notification
parameter_list|,
name|Object
name|handback
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Notification = "
operator|+
name|notification
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|notificationSet
init|)
block|{
name|notificationSet
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|notificationSet
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|monitorMBean
operator|.
name|start
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|notificationSet
init|)
block|{
if|if
condition|(
operator|!
name|notificationSet
operator|.
name|get
argument_list|()
condition|)
block|{
name|notificationSet
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|notificationSet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

