begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.graphql.server
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|graphql
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|graphql
operator|.
name|ExecutionInput
import|;
end_import

begin_import
import|import
name|graphql
operator|.
name|ExecutionResult
import|;
end_import

begin_import
import|import
name|graphql
operator|.
name|GraphQL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|bootstrap
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_class
DECL|class|GraphqlServer
specifier|public
class|class
name|GraphqlServer
block|{
DECL|field|graphql
specifier|private
specifier|final
name|GraphQL
name|graphql
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|HttpServer
name|server
decl_stmt|;
DECL|method|GraphqlServer ()
specifier|public
name|GraphqlServer
parameter_list|()
block|{
name|this
operator|.
name|graphql
operator|=
name|GraphqlFactory
operator|.
name|newGraphQL
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|ServerBootstrap
operator|.
name|bootstrap
argument_list|()
operator|.
name|registerHandler
argument_list|(
literal|"/graphql"
argument_list|,
operator|new
name|GraphqlHandler
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|server
operator|.
name|shutdown
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|server
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
DECL|class|GraphqlHandler
class|class
name|GraphqlHandler
implements|implements
name|HttpRequestHandler
block|{
DECL|field|objectMapper
specifier|private
specifier|final
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
DECL|method|handle (HttpRequest request, HttpResponse response, HttpContext context)
specifier|public
name|void
name|handle
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
if|if
condition|(
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
condition|)
block|{
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|jsonToMap
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|String
name|query
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|String
name|operationName
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"operationName"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variables
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"variables"
argument_list|)
decl_stmt|;
name|ExecutionInput
name|executionInput
init|=
name|ExecutionInput
operator|.
name|newExecutionInput
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|operationName
argument_list|(
name|operationName
argument_list|)
operator|.
name|variables
argument_list|(
name|variables
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ExecutionResult
name|executionResult
init|=
name|graphql
operator|.
name|execute
argument_list|(
name|executionInput
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resultMap
init|=
name|executionResult
operator|.
name|toSpecification
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|objectMapper
operator|.
name|writeValueAsString
argument_list|(
name|resultMap
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/json; charset=UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jsonToMap (String json)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonToMap
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|objectMapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{             }
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

