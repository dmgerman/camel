begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.graphql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|graphql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|graphql
operator|.
name|server
operator|.
name|GraphqlServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GraphqlComponentTest
specifier|public
class|class
name|GraphqlComponentTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|booksQueryResult
specifier|private
specifier|static
name|String
name|booksQueryResult
decl_stmt|;
DECL|field|bookByIdQueryResult
specifier|private
specifier|static
name|String
name|bookByIdQueryResult
decl_stmt|;
DECL|field|addBookMutationResult
specifier|private
specifier|static
name|String
name|addBookMutationResult
decl_stmt|;
DECL|field|server
specifier|private
specifier|static
name|GraphqlServer
name|server
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:result"
argument_list|)
DECL|field|result
specifier|private
name|MockEndpoint
name|result
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpBeforeClass ()
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|booksQueryResult
operator|=
name|readJsonFile
argument_list|(
literal|"booksQueryResult.json"
argument_list|)
expr_stmt|;
name|bookByIdQueryResult
operator|=
name|readJsonFile
argument_list|(
literal|"bookByIdQueryResult.json"
argument_list|)
expr_stmt|;
name|addBookMutationResult
operator|=
name|readJsonFile
argument_list|(
literal|"addBookMutationResult.json"
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|GraphqlServer
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|readJsonFile (String name)
specifier|private
specifier|static
name|String
name|readJsonFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|objectMapper
operator|.
name|writeValueAsString
argument_list|(
name|objectMapper
operator|.
name|readValue
argument_list|(
name|IOHelper
operator|.
name|loadText
argument_list|(
name|ObjectHelper
operator|.
name|loadResourceAsStream
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownAfterClass ()
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|BindToRegistry
argument_list|(
literal|"bookByIdQueryVariables"
argument_list|)
DECL|method|bookByIdQueryVariables ()
specifier|public
name|JsonObject
name|bookByIdQueryVariables
parameter_list|()
block|{
name|JsonObject
name|variables
init|=
operator|new
name|JsonObject
argument_list|()
decl_stmt|;
name|variables
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"book-1"
argument_list|)
expr_stmt|;
return|return
name|variables
return|;
block|}
annotation|@
name|BindToRegistry
argument_list|(
literal|"addBookMutationVariables"
argument_list|)
DECL|method|addBookMutationVariables ()
specifier|public
name|JsonObject
name|addBookMutationVariables
parameter_list|()
block|{
name|JsonObject
name|bookInput
init|=
operator|new
name|JsonObject
argument_list|()
decl_stmt|;
name|bookInput
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Typee"
argument_list|)
expr_stmt|;
name|bookInput
operator|.
name|put
argument_list|(
literal|"authorId"
argument_list|,
literal|"author-2"
argument_list|)
expr_stmt|;
name|JsonObject
name|variables
init|=
operator|new
name|JsonObject
argument_list|()
decl_stmt|;
name|variables
operator|.
name|put
argument_list|(
literal|"bookInput"
argument_list|,
name|bookInput
argument_list|)
expr_stmt|;
return|return
name|variables
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"graphql://http://localhost:"
operator|+
name|server
operator|.
name|getPort
argument_list|()
operator|+
literal|"/graphql?query={books{id name}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"graphql://http://localhost:"
operator|+
name|server
operator|.
name|getPort
argument_list|()
operator|+
literal|"/graphql?queryFile=booksQuery.graphql"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start3"
argument_list|)
operator|.
name|to
argument_list|(
literal|"graphql://http://localhost:"
operator|+
name|server
operator|.
name|getPort
argument_list|()
operator|+
literal|"/graphql?queryFile=multipleQueries.graphql&operationName=BookById&variables=#bookByIdQueryVariables"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start4"
argument_list|)
operator|.
name|to
argument_list|(
literal|"graphql://http://localhost:"
operator|+
name|server
operator|.
name|getPort
argument_list|()
operator|+
literal|"/graphql?queryFile=addBookMutation.graphql&variables=#addBookMutationVariables"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|booksQueryWithStaticQuery ()
specifier|public
name|void
name|booksQueryWithStaticQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
name|booksQueryResult
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start1"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|booksQueryWithQueryFile ()
specifier|public
name|void
name|booksQueryWithQueryFile
parameter_list|()
throws|throws
name|Exception
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
name|booksQueryResult
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start2"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bookByIdQuery ()
specifier|public
name|void
name|bookByIdQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
name|bookByIdQueryResult
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start3"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addBookMutation ()
specifier|public
name|void
name|addBookMutation
parameter_list|()
throws|throws
name|Exception
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
name|addBookMutationResult
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start4"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

