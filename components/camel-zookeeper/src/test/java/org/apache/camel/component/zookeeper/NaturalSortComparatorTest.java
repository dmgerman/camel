begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|NaturalSortComparator
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|NaturalSortComparatorTest
specifier|public
class|class
name|NaturalSortComparatorTest
block|{
annotation|@
name|Test
DECL|method|testSortOrder ()
specifier|public
name|void
name|testSortOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sorted
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"3"
block|,
literal|"4.0"
block|,
literal|"11"
block|,
literal|"30"
block|,
literal|"55"
block|,
literal|"225"
block|,
literal|"333"
block|,
literal|"camel-2.1.0"
block|,
literal|"camel-2.1.1"
block|,
literal|"camel-2.1.1-SNAPSHOT"
block|,
literal|"camel-2.2.0"
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unsorted
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sorted
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|unsorted
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|unsorted
argument_list|,
operator|new
name|NaturalSortComparator
argument_list|()
argument_list|)
expr_stmt|;
name|compareLists
argument_list|(
name|sorted
argument_list|,
name|unsorted
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|unsorted
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|unsorted
argument_list|,
operator|new
name|NaturalSortComparator
argument_list|(
name|Order
operator|.
name|Descending
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
name|compareLists
argument_list|(
name|sorted
argument_list|,
name|unsorted
argument_list|)
expr_stmt|;
block|}
DECL|method|compareLists (List<String> sorted, List<String> unsorted)
specifier|private
name|void
name|compareLists
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|sorted
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|unsorted
parameter_list|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|unsorted
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|sorted
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|,
name|unsorted
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

