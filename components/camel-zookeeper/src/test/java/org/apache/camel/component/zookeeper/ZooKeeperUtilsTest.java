begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperUtils
operator|.
name|getCreateMode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperUtils
operator|.
name|getCreateModeFromString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|ZooKeeperUtilsTest
specifier|public
class|class
name|ZooKeeperUtilsTest
block|{
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreateModeExtraction ()
specifier|public
name|void
name|testCreateModeExtraction
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|getCreateModeFromString
argument_list|(
literal|"EPHEMERAL"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|,
name|getCreateModeFromString
argument_list|(
literal|"EPHEMERAL_SEQUENTIAL"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
name|getCreateModeFromString
argument_list|(
literal|"PERSISTENT"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT_SEQUENTIAL
argument_list|,
name|getCreateModeFromString
argument_list|(
literal|"PERSISTENT_SEQUENTIAL"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|getCreateModeFromString
argument_list|(
literal|"DOESNOTEXIST"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateModeExtractionFromMessageHeader ()
specifier|public
name|void
name|testCreateModeExtractionFromMessageHeader
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|testModeInMessage
argument_list|(
literal|"EPHEMERAL"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|,
name|testModeInMessage
argument_list|(
literal|"EPHEMERAL_SEQUENTIAL"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
name|testModeInMessage
argument_list|(
literal|"PERSISTENT"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT_SEQUENTIAL
argument_list|,
name|testModeInMessage
argument_list|(
literal|"PERSISTENT_SEQUENTIAL"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|testModeInMessage
argument_list|(
literal|"DOESNOTEXIST"
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testModeInMessage (String mode, CreateMode defaultMode)
specifier|private
name|CreateMode
name|testModeInMessage
parameter_list|(
name|String
name|mode
parameter_list|,
name|CreateMode
name|defaultMode
parameter_list|)
block|{
name|Message
name|m
init|=
operator|new
name|DefaultMessage
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|m
operator|.
name|setHeader
argument_list|(
name|ZooKeeperMessage
operator|.
name|ZOOKEEPER_CREATE_MODE
argument_list|,
name|mode
argument_list|)
expr_stmt|;
return|return
name|getCreateMode
argument_list|(
name|m
argument_list|,
name|defaultMode
argument_list|)
return|;
block|}
block|}
end_class

end_unit

