begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ConsumeDataTest
specifier|public
class|class
name|ConsumeDataTest
extends|extends
name|ZooKeeperTestSupport
block|{
annotation|@
name|Override
DECL|method|createRouteBuilders ()
specifier|protected
name|RouteBuilder
index|[]
name|createRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"zookeeper://localhost:39913/camel?repeat=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:zookeeper-data"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Test
DECL|method|shouldAwaitCreationAndGetDataNotification ()
specifier|public
name|void
name|shouldAwaitCreationAndGetDataNotification
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:zookeeper-data"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|createCamelNode
argument_list|()
expr_stmt|;
name|updateNode
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|mock
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|validateExchangesReceivedInOrderWithIncreasingVersion
argument_list|(
name|mock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|deletionOfAwaitedNodeCausesNoFailure ()
specifier|public
name|void
name|deletionOfAwaitedNodeCausesNoFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:zookeeper-data"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|createCamelNode
argument_list|()
expr_stmt|;
name|delay
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|// by now we are back waiting for a change so delete the node
name|client
operator|.
name|delete
argument_list|(
literal|"/camel"
argument_list|)
expr_stmt|;
comment|// recreate and update a number of times.
name|createCamelNode
argument_list|()
expr_stmt|;
name|updateNode
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|mock
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|updateNode (int times)
specifier|private
name|void
name|updateNode
parameter_list|(
name|int
name|times
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|Exception
block|{
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
name|times
condition|;
name|x
operator|++
control|)
block|{
name|delay
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|client
operator|.
name|setData
argument_list|(
literal|"/camel"
argument_list|,
name|testPayload
operator|+
literal|"_"
operator|+
name|x
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|createCamelNode ()
specifier|private
name|void
name|createCamelNode
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|Exception
block|{
try|try
block|{
name|delay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|client
operator|.
name|create
argument_list|(
literal|"/camel"
argument_list|,
name|testPayload
operator|+
literal|"_0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|e
parameter_list|)
block|{         }
block|}
end_function

unit|}
end_unit

