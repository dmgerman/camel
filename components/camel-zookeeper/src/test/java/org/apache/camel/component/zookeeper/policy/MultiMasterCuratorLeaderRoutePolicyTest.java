begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|MultiMasterCuratorLeaderRoutePolicyTest
specifier|public
class|class
name|MultiMasterCuratorLeaderRoutePolicyTest
extends|extends
name|ZooKeeperTestSupport
block|{
DECL|field|ZNODE
specifier|public
specifier|static
specifier|final
name|String
name|ZNODE
init|=
literal|"/multimaster"
decl_stmt|;
DECL|field|BASE_ZNODE
specifier|public
specifier|static
specifier|final
name|String
name|BASE_ZNODE
init|=
literal|"/someapp"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultiMasterCuratorLeaderRoutePolicyTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|disableJMX
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|createCamelContext
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|ensureRoutesDoNotStartAutomatically ()
specifier|public
name|void
name|ensureRoutesDoNotStartAutomatically
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|CuratorMultiMasterLeaderRoutePolicy
name|policy
init|=
operator|new
name|CuratorMultiMasterLeaderRoutePolicy
argument_list|(
literal|"zookeeper:localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
name|BASE_ZNODE
operator|+
name|ZNODE
operator|+
literal|2
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"timer://foo?fixedRate=true&period=5"
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|id
argument_list|(
literal|"single_route"
argument_list|)
operator|.
name|autoStartup
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:controlled"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// this check verifies that a route marked as autostartable is not started automatically. It will be the policy responsibility to eventually start it.
name|assertThat
argument_list|(
name|context
operator|.
name|getRouteStatus
argument_list|(
literal|"single_route"
argument_list|)
operator|.
name|isStarted
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|context
operator|.
name|getRouteStatus
argument_list|(
literal|"single_route"
argument_list|)
operator|.
name|isStarting
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//concurrency can raise some InterruptedException but we don't really care in this scenario.
block|}
block|}
annotation|@
name|Test
DECL|method|oneMasterOneSlaveScenarioContolledByPolicy ()
specifier|public
name|void
name|oneMasterOneSlaveScenarioContolledByPolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|path
init|=
literal|"oneMasterOneSlaveScenarioContolledByPolicy"
decl_stmt|;
specifier|final
name|String
name|firstDestination
init|=
literal|"first"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|secondDestination
init|=
literal|"second"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|waitForSecondRouteCompletedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|activeNodesDesired
init|=
literal|1
decl_stmt|;
name|MultiMasterZookeeperPolicyEnforcedContext
name|first
init|=
name|createEnforcedContext
argument_list|(
name|firstDestination
argument_list|,
name|activeNodesDesired
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|DefaultCamelContext
name|controlledContext
init|=
operator|(
name|DefaultCamelContext
operator|)
name|first
operator|.
name|controlledContext
decl_stmt|;
comment|// get reference to the Policy object to check if it's already a master
name|CuratorMultiMasterLeaderRoutePolicy
name|routePolicy
init|=
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|controlledContext
operator|.
name|getRouteDefinition
argument_list|(
name|firstDestination
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertWeHaveMasters
argument_list|(
name|routePolicy
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting first CamelContext"
argument_list|)
expr_stmt|;
specifier|final
name|MultiMasterZookeeperPolicyEnforcedContext
index|[]
name|arr
init|=
operator|new
name|MultiMasterZookeeperPolicyEnforcedContext
index|[
literal|1
index|]
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MultiMasterZookeeperPolicyEnforcedContext
name|second
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting second CamelContext in a separate thread"
argument_list|)
expr_stmt|;
name|second
operator|=
name|createEnforcedContext
argument_list|(
name|secondDestination
argument_list|,
name|activeNodesDesired
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
name|second
expr_stmt|;
name|second
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for second"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitForSecondRouteCompletedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in the thread controlling the second context"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Error in the thread controlling the second context: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|first
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for first"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForSecondRouteCompletedLatch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Explicitly shutting down the first camel context."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down first con"
argument_list|)
expr_stmt|;
name|first
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|MultiMasterZookeeperPolicyEnforcedContext
name|second
init|=
name|arr
index|[
literal|0
index|]
decl_stmt|;
name|DefaultCamelContext
name|secondCamelContext
init|=
operator|(
name|DefaultCamelContext
operator|)
name|second
operator|.
name|controlledContext
decl_stmt|;
name|assertWeHaveMasters
argument_list|(
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|secondCamelContext
operator|.
name|getRouteDefinition
argument_list|(
name|secondDestination
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//second.mock = secondCamelContext.getEndpoint("mock:controlled", MockEndpoint.class);
name|second
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for slave"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|second
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|oneMasterOneSlaveAndFlippedAgainScenarioContolledByPolicy ()
specifier|public
name|void
name|oneMasterOneSlaveAndFlippedAgainScenarioContolledByPolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|path
init|=
literal|"oneMasterOneSlaveScenarioContolledByPolicy"
decl_stmt|;
specifier|final
name|String
name|firstDestination
init|=
literal|"first"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|secondDestination
init|=
literal|"second"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|waitForSecondRouteCompletedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|activeNodeDesired
init|=
literal|1
decl_stmt|;
name|MultiMasterZookeeperPolicyEnforcedContext
name|first
init|=
name|createEnforcedContext
argument_list|(
name|firstDestination
argument_list|,
name|activeNodeDesired
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|DefaultCamelContext
name|controlledContext
init|=
operator|(
name|DefaultCamelContext
operator|)
name|first
operator|.
name|controlledContext
decl_stmt|;
comment|// get reference to the Policy object to check if it's already a master
name|CuratorMultiMasterLeaderRoutePolicy
name|routePolicy
init|=
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|controlledContext
operator|.
name|getRouteDefinition
argument_list|(
name|firstDestination
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertWeHaveMasters
argument_list|(
name|routePolicy
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting first CamelContext"
argument_list|)
expr_stmt|;
specifier|final
name|MultiMasterZookeeperPolicyEnforcedContext
index|[]
name|arr
init|=
operator|new
name|MultiMasterZookeeperPolicyEnforcedContext
index|[
literal|1
index|]
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MultiMasterZookeeperPolicyEnforcedContext
name|slave
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting second CamelContext in a separate thread"
argument_list|)
expr_stmt|;
name|slave
operator|=
name|createEnforcedContext
argument_list|(
name|secondDestination
argument_list|,
name|activeNodeDesired
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
name|slave
expr_stmt|;
name|slave
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for second"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitForSecondRouteCompletedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in the thread controlling the second context"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Error in the thread controlling the second context: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|first
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for first"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForSecondRouteCompletedLatch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|MultiMasterZookeeperPolicyEnforcedContext
name|second
init|=
name|arr
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Explicitly shutting down the first camel context."
argument_list|)
expr_stmt|;
name|first
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|DefaultCamelContext
name|secondCamelContext
init|=
operator|(
name|DefaultCamelContext
operator|)
name|second
operator|.
name|controlledContext
decl_stmt|;
name|assertWeHaveMasters
argument_list|(
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|secondCamelContext
operator|.
name|getRouteDefinition
argument_list|(
name|secondDestination
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|CountDownLatch
name|restartFirstLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start back first context"
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|first
operator|.
name|startup
argument_list|()
expr_stmt|;
name|restartFirstLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|restartFirstLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|second
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for second"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|first
operator|.
name|mock
operator|.
name|reset
argument_list|()
expr_stmt|;
name|first
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for first"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|second
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|controlledContext
operator|=
operator|(
name|DefaultCamelContext
operator|)
name|first
operator|.
name|controlledContext
expr_stmt|;
comment|// get reference to the Policy object to check if it's already a master
name|routePolicy
operator|=
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|controlledContext
operator|.
name|getRouteDefinition
argument_list|(
name|firstDestination
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asserting route is up. context: [{}]"
argument_list|,
name|controlledContext
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertWeHaveMasters
argument_list|(
name|routePolicy
argument_list|)
expr_stmt|;
name|first
operator|.
name|controlledContext
operator|.
name|setTracing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|first
operator|.
name|mock
operator|=
name|controlledContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:controlled"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|first
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for first"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|first
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|oneMasterTwoSlavesScenarioContolledByPolicy ()
specifier|public
name|void
name|oneMasterTwoSlavesScenarioContolledByPolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|path
init|=
literal|"oneMasterTwoSlavesScenarioContolledByPolicy"
decl_stmt|;
specifier|final
name|String
name|master
init|=
literal|"master"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|secondDestination
init|=
literal|"second"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|thirdDestination
init|=
literal|"third"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|waitForNonActiveRoutesLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|activeNodesDesired
init|=
literal|1
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting first CamelContext"
argument_list|)
expr_stmt|;
name|MultiMasterZookeeperPolicyEnforcedContext
name|first
init|=
name|createEnforcedContext
argument_list|(
name|master
argument_list|,
name|activeNodesDesired
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|DefaultCamelContext
name|controlledContext
init|=
operator|(
name|DefaultCamelContext
operator|)
name|first
operator|.
name|controlledContext
decl_stmt|;
comment|// get reference to the Policy object to check if it's already a master
name|CuratorMultiMasterLeaderRoutePolicy
name|routePolicy
init|=
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|controlledContext
operator|.
name|getRouteDefinition
argument_list|(
name|master
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertWeHaveMasters
argument_list|(
name|routePolicy
argument_list|)
expr_stmt|;
specifier|final
name|MultiMasterZookeeperPolicyEnforcedContext
index|[]
name|arr
init|=
operator|new
name|MultiMasterZookeeperPolicyEnforcedContext
index|[
literal|2
index|]
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MultiMasterZookeeperPolicyEnforcedContext
name|second
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting second CamelContext"
argument_list|)
expr_stmt|;
name|second
operator|=
name|createEnforcedContext
argument_list|(
name|secondDestination
argument_list|,
name|activeNodesDesired
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
name|second
expr_stmt|;
name|second
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for second"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitForNonActiveRoutesLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in the thread controlling the second context"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Error in the thread controlling the second context: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MultiMasterZookeeperPolicyEnforcedContext
name|third
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting third CamelContext"
argument_list|)
expr_stmt|;
name|third
operator|=
name|createEnforcedContext
argument_list|(
name|thirdDestination
argument_list|,
name|activeNodesDesired
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|arr
index|[
literal|1
index|]
operator|=
name|third
expr_stmt|;
name|third
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for third"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitForNonActiveRoutesLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in the thread controlling the third context"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Error in the thread controlling the third context: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Send messages to the master and the slave.
comment|// The route is enabled in the master and gets through, but that sent to
comment|// the slave context is rejected.
name|first
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for master"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForNonActiveRoutesLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Explicitly shutting down the first camel context."
argument_list|)
expr_stmt|;
comment|// trigger failover by killing the master..
name|first
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// let's find out who's active now:
name|CuratorMultiMasterLeaderRoutePolicy
name|routePolicySecond
init|=
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|arr
index|[
literal|0
index|]
operator|.
name|controlledContext
operator|.
name|getRouteDefinition
argument_list|(
name|secondDestination
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CuratorMultiMasterLeaderRoutePolicy
name|routePolicyThird
init|=
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|arr
index|[
literal|1
index|]
operator|.
name|controlledContext
operator|.
name|getRouteDefinition
argument_list|(
name|thirdDestination
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MultiMasterZookeeperPolicyEnforcedContext
name|newMaster
init|=
literal|null
decl_stmt|;
name|MultiMasterZookeeperPolicyEnforcedContext
name|slave
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|maxWait
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxWait
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|routePolicySecond
operator|.
name|getElection
argument_list|()
operator|.
name|isMaster
argument_list|()
condition|)
block|{
name|newMaster
operator|=
name|arr
index|[
literal|0
index|]
expr_stmt|;
name|slave
operator|=
name|arr
index|[
literal|1
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[second] is the new master"
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|routePolicyThird
operator|.
name|getElection
argument_list|()
operator|.
name|isMaster
argument_list|()
condition|)
block|{
name|newMaster
operator|=
name|arr
index|[
literal|1
index|]
expr_stmt|;
name|slave
operator|=
name|arr
index|[
literal|0
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[third] is the new master"
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for a new master to be elected"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|newMaster
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newMaster
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for second"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|slave
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for third"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|slave
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|newMaster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoMasterOneSlavesScenarioContolledByPolicy ()
specifier|public
name|void
name|twoMasterOneSlavesScenarioContolledByPolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|path
init|=
literal|"twoMasterOneSlavesScenarioContolledByPolicy"
decl_stmt|;
specifier|final
name|String
name|firstDestination
init|=
literal|"first"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|secondDestination
init|=
literal|"second"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|thirdDestination
init|=
literal|"third"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|waitForThirdRouteCompletedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|activeNodeDesired
init|=
literal|2
decl_stmt|;
name|MultiMasterZookeeperPolicyEnforcedContext
name|first
init|=
name|createEnforcedContext
argument_list|(
name|firstDestination
argument_list|,
name|activeNodeDesired
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|DefaultCamelContext
name|firstControlledContext
init|=
operator|(
name|DefaultCamelContext
operator|)
name|first
operator|.
name|controlledContext
decl_stmt|;
name|CuratorMultiMasterLeaderRoutePolicy
name|firstRoutePolicy
init|=
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|firstControlledContext
operator|.
name|getRouteDefinition
argument_list|(
name|firstDestination
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MultiMasterZookeeperPolicyEnforcedContext
name|second
init|=
name|createEnforcedContext
argument_list|(
name|secondDestination
argument_list|,
name|activeNodeDesired
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|DefaultCamelContext
name|secondControlledContext
init|=
operator|(
name|DefaultCamelContext
operator|)
name|second
operator|.
name|controlledContext
decl_stmt|;
name|CuratorMultiMasterLeaderRoutePolicy
name|secondRoutePolicy
init|=
operator|(
name|CuratorMultiMasterLeaderRoutePolicy
operator|)
name|secondControlledContext
operator|.
name|getRouteDefinition
argument_list|(
name|secondDestination
argument_list|)
operator|.
name|getRoutePolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertWeHaveMasters
argument_list|(
name|firstRoutePolicy
argument_list|,
name|secondRoutePolicy
argument_list|)
expr_stmt|;
specifier|final
name|MultiMasterZookeeperPolicyEnforcedContext
index|[]
name|arr
init|=
operator|new
name|MultiMasterZookeeperPolicyEnforcedContext
index|[
literal|1
index|]
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MultiMasterZookeeperPolicyEnforcedContext
name|third
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting third CamelContext"
argument_list|)
expr_stmt|;
name|third
operator|=
name|createEnforcedContext
argument_list|(
name|thirdDestination
argument_list|,
name|activeNodeDesired
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
name|third
expr_stmt|;
name|third
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for third"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitForThirdRouteCompletedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in the thread controlling the third context"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Error in the thread controlling the third context: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|first
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for first"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|second
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for second"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForThirdRouteCompletedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Explicitly shutting down the first camel context."
argument_list|)
expr_stmt|;
name|first
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|arr
index|[
literal|0
index|]
operator|.
name|sendMessageToEnforcedRoute
argument_list|(
literal|"message for third"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|second
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|arr
index|[
literal|0
index|]
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|assertWeHaveMasters (CuratorMultiMasterLeaderRoutePolicy... routePolicies)
name|void
name|assertWeHaveMasters
parameter_list|(
name|CuratorMultiMasterLeaderRoutePolicy
modifier|...
name|routePolicies
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|maxWait
init|=
literal|20
decl_stmt|;
name|boolean
name|global
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxWait
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|iteration
init|=
literal|true
decl_stmt|;
for|for
control|(
name|CuratorMultiMasterLeaderRoutePolicy
name|policy
range|:
name|routePolicies
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Policy: {}, master: {}"
argument_list|,
name|policy
argument_list|,
name|policy
operator|.
name|getElection
argument_list|()
operator|.
name|isMaster
argument_list|()
argument_list|)
expr_stmt|;
name|iteration
operator|=
name|iteration
operator|&
name|policy
operator|.
name|getElection
argument_list|()
operator|.
name|isMaster
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iteration
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"the number of required active routes is available"
argument_list|)
expr_stmt|;
name|global
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting routes to become leader and be activated."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|global
condition|)
block|{
name|fail
argument_list|(
literal|"The expected number of route never became master"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MultiMasterZookeeperPolicyEnforcedContext
specifier|private
class|class
name|MultiMasterZookeeperPolicyEnforcedContext
block|{
DECL|field|controlledContext
name|CamelContext
name|controlledContext
decl_stmt|;
DECL|field|template
name|ProducerTemplate
name|template
decl_stmt|;
DECL|field|mock
name|MockEndpoint
name|mock
decl_stmt|;
DECL|field|routename
name|String
name|routename
decl_stmt|;
DECL|field|path
name|String
name|path
decl_stmt|;
DECL|method|MultiMasterZookeeperPolicyEnforcedContext (String name, int activeNodesDesired, String path)
name|MultiMasterZookeeperPolicyEnforcedContext
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|activeNodesDesired
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|controlledContext
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|routename
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|template
operator|=
name|controlledContext
operator|.
name|createProducerTemplate
argument_list|()
expr_stmt|;
name|mock
operator|=
name|controlledContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:controlled"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|controlledContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|FailoverRoute
argument_list|(
name|name
argument_list|,
name|activeNodesDesired
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|controlledContext
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|sendMessageToEnforcedRoute (String message, int expected)
specifier|public
name|void
name|sendMessageToEnforcedRoute
parameter_list|(
name|String
name|message
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|mock
operator|.
name|expectedMessageCount
argument_list|(
name|expected
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending message to: {}"
argument_list|,
literal|"vm:"
operator|+
name|routename
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"vm:"
operator|+
name|routename
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected messages..."
argument_list|)
expr_stmt|;
block|}
block|}
name|mock
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|.
name|debug
argument_list|(
literal|"stopping"
argument_list|)
expr_stmt|;
name|controlledContext
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|.
name|debug
argument_list|(
literal|"stopped"
argument_list|)
expr_stmt|;
block|}
DECL|method|startup ()
specifier|public
name|void
name|startup
parameter_list|()
throws|throws
name|Exception
block|{
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|.
name|debug
argument_list|(
literal|"starting"
argument_list|)
expr_stmt|;
name|controlledContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|.
name|debug
argument_list|(
literal|"started"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createEnforcedContext (String name, int activeNodesDesired, String path)
specifier|private
name|MultiMasterZookeeperPolicyEnforcedContext
name|createEnforcedContext
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|activeNodesDesired
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|MultiMasterZookeeperPolicyEnforcedContext
name|context
init|=
operator|new
name|MultiMasterZookeeperPolicyEnforcedContext
argument_list|(
name|name
argument_list|,
name|activeNodesDesired
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|delay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|class|FailoverRoute
specifier|public
class|class
name|FailoverRoute
extends|extends
name|RouteBuilder
block|{
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|routename
specifier|private
name|String
name|routename
decl_stmt|;
DECL|field|activeNodesDesired
specifier|private
name|int
name|activeNodesDesired
decl_stmt|;
DECL|method|FailoverRoute (String routename, int activeNodesDesired, String path)
specifier|public
name|FailoverRoute
parameter_list|(
name|String
name|routename
parameter_list|,
name|int
name|activeNodesDesired
parameter_list|,
name|String
name|path
parameter_list|)
block|{
comment|// need names as if we use the same direct ep name in two contexts
comment|// in the same vm shutting down one context shuts the endpoint for
comment|// both.
name|this
operator|.
name|routename
operator|=
name|routename
expr_stmt|;
name|this
operator|.
name|activeNodesDesired
operator|=
name|activeNodesDesired
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|CuratorMultiMasterLeaderRoutePolicy
name|policy
init|=
operator|new
name|CuratorMultiMasterLeaderRoutePolicy
argument_list|(
literal|"zookeeper:localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
name|BASE_ZNODE
operator|+
name|ZNODE
operator|+
literal|"/"
operator|+
name|path
argument_list|,
name|this
operator|.
name|activeNodesDesired
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"vm:"
operator|+
name|routename
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|id
argument_list|(
name|routename
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:controlled"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

