begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.operations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SetDataOperationTest
specifier|public
class|class
name|SetDataOperationTest
extends|extends
name|ZooKeeperTestSupport
block|{
DECL|field|connection
specifier|private
name|ZooKeeper
name|connection
decl_stmt|;
annotation|@
name|Before
DECL|method|setupConnection ()
specifier|public
name|void
name|setupConnection
parameter_list|()
block|{
name|connection
operator|=
name|getConnection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setData ()
specifier|public
name|void
name|setData
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|create
argument_list|(
literal|"/one"
argument_list|,
name|testPayload
argument_list|)
expr_stmt|;
name|SetDataOperation
name|operation
init|=
operator|new
name|SetDataOperation
argument_list|(
name|connection
argument_list|,
literal|"/one"
argument_list|,
literal|"Updated"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|OperationResult
argument_list|<
name|byte
index|[]
argument_list|>
name|result
init|=
name|operation
operator|.
name|get
argument_list|()
decl_stmt|;
name|verifyNodeContainsData
argument_list|(
literal|"/one"
argument_list|,
literal|"Updated"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getStatistics
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setSpecificVersionOfData ()
specifier|public
name|void
name|setSpecificVersionOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|create
argument_list|(
literal|"/two"
argument_list|,
name|testPayload
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|byte
index|[]
name|payload
init|=
operator|(
literal|"Updated_"
operator|+
name|x
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|updateDataOnNode
argument_list|(
literal|"/two"
argument_list|,
name|payload
argument_list|,
name|x
argument_list|,
name|x
operator|+
literal|1
argument_list|)
expr_stmt|;
name|verifyNodeContainsData
argument_list|(
literal|"/two"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|setWithNull ()
specifier|public
name|void
name|setWithNull
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|create
argument_list|(
literal|"/three"
argument_list|,
name|testPayload
argument_list|)
expr_stmt|;
name|updateDataOnNode
argument_list|(
literal|"/three"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|updateDataOnNode (String node, byte[] payload, int version, int expectedVersion)
specifier|private
name|void
name|updateDataOnNode
parameter_list|(
name|String
name|node
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|version
parameter_list|,
name|int
name|expectedVersion
parameter_list|)
throws|throws
name|Exception
block|{
name|SetDataOperation
name|operation
init|=
operator|new
name|SetDataOperation
argument_list|(
name|connection
argument_list|,
name|node
argument_list|,
name|payload
argument_list|)
decl_stmt|;
name|operation
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|OperationResult
argument_list|<
name|byte
index|[]
argument_list|>
name|result
init|=
name|operation
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|result
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeContainsData
argument_list|(
name|node
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedVersion
argument_list|,
name|result
operator|.
name|getStatistics
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

