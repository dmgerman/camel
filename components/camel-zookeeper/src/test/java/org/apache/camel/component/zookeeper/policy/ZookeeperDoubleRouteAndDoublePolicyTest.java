begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ZookeeperDoubleRouteAndDoublePolicyTest
specifier|public
class|class
name|ZookeeperDoubleRouteAndDoublePolicyTest
extends|extends
name|ZooKeeperTestSupport
block|{
annotation|@
name|Test
DECL|method|routeDoublePoliciesAndTwoRoutes ()
specifier|public
name|void
name|routeDoublePoliciesAndTwoRoutes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up the parent used to control the election
name|client
operator|.
name|createPersistent
argument_list|(
literal|"/someapp"
argument_list|,
literal|"App node to contain policy election nodes..."
argument_list|)
expr_stmt|;
name|client
operator|.
name|createPersistent
argument_list|(
literal|"/someapp/somepolicy"
argument_list|,
literal|"Policy node used by route policy to control routes..."
argument_list|)
expr_stmt|;
name|client
operator|.
name|createPersistent
argument_list|(
literal|"/someapp/someotherpolicy"
argument_list|,
literal|"Policy node used by route policy to control routes..."
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|ZooKeeperPolicyEnforcedRoute
argument_list|()
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockedpolicy
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:controlled"
argument_list|)
decl_stmt|;
name|mockedpolicy
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:policy-controlled"
argument_list|,
literal|"This is a test"
argument_list|)
expr_stmt|;
name|mockedpolicy
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|mockedpolicy
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|MockEndpoint
name|mockedpolicy1
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:controlled-1"
argument_list|)
decl_stmt|;
name|mockedpolicy1
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:policy-controlled-1"
argument_list|,
literal|"This is a test"
argument_list|)
expr_stmt|;
name|mockedpolicy1
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|mockedpolicy1
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|class|ZooKeeperPolicyEnforcedRoute
specifier|public
specifier|static
class|class
name|ZooKeeperPolicyEnforcedRoute
extends|extends
name|RouteBuilder
block|{
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|ZooKeeperRoutePolicy
name|policy
init|=
operator|new
name|ZooKeeperRoutePolicy
argument_list|(
literal|"zookeeper:localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
literal|"/someapp/somepolicy"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"direct:policy-controlled"
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:controlled"
argument_list|)
expr_stmt|;
name|ZooKeeperRoutePolicy
name|policy2
init|=
operator|new
name|ZooKeeperRoutePolicy
argument_list|(
literal|"zookeeper:localhost:"
operator|+
name|getServerPort
argument_list|()
operator|+
literal|"/someapp/someotherpolicy"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"direct:policy-controlled-1"
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy2
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:controlled-1"
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_class

end_unit

