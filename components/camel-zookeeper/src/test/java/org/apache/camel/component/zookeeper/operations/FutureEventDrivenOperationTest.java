begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.operations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|FutureEventDrivenOperationTest
specifier|public
class|class
name|FutureEventDrivenOperationTest
block|{
DECL|field|data
specifier|private
name|String
name|data
init|=
literal|"Event Received"
decl_stmt|;
DECL|field|statistics
specifier|private
name|Stat
name|statistics
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|shouldWaitForEvents ()
specifier|public
name|void
name|shouldWaitForEvents
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FutureEventDrivenOperation
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|FutureEventDrivenOperation
argument_list|<
name|String
argument_list|>
argument_list|(
literal|null
argument_list|,
literal|"somepath"
argument_list|,
name|EventType
operator|.
name|NodeCreated
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|installWatch
parameter_list|()
block|{             }
annotation|@
name|Override
specifier|public
name|OperationResult
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
block|{
return|return
operator|new
name|OperationResult
argument_list|<
name|String
argument_list|>
argument_list|(
name|data
argument_list|,
name|statistics
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|WatchedEvent
name|event
init|=
operator|new
name|WatchedEvent
argument_list|(
name|EventType
operator|.
name|NodeCreated
argument_list|,
literal|null
argument_list|,
literal|"somepath"
argument_list|)
decl_stmt|;
name|fireEventIn
argument_list|(
name|future
argument_list|,
name|event
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
argument_list|,
name|future
operator|.
name|get
argument_list|()
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statistics
argument_list|,
name|future
operator|.
name|get
argument_list|()
operator|.
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|event
argument_list|,
name|future
operator|.
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|fireEventIn (final FutureEventDrivenOperation<String> future, final WatchedEvent event, final int millisecondsTillFire)
specifier|private
name|void
name|fireEventIn
parameter_list|(
specifier|final
name|FutureEventDrivenOperation
argument_list|<
name|String
argument_list|>
name|future
parameter_list|,
specifier|final
name|WatchedEvent
name|event
parameter_list|,
specifier|final
name|int
name|millisecondsTillFire
parameter_list|)
block|{
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|millisecondsTillFire
argument_list|)
expr_stmt|;
name|future
operator|.
name|process
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

