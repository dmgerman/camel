begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|ExponentialBackoffRetry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|CloseableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|x
operator|.
name|discovery
operator|.
name|ServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|x
operator|.
name|discovery
operator|.
name|ServiceDiscoveryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|x
operator|.
name|discovery
operator|.
name|ServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|x
operator|.
name|discovery
operator|.
name|details
operator|.
name|JsonInstanceSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ZooKeeperServiceCallRouteTest
specifier|public
class|class
name|ZooKeeperServiceCallRouteTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|SERVER_PORT
specifier|private
specifier|static
specifier|final
name|int
name|SERVER_PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|SERVICE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"http-service"
decl_stmt|;
DECL|field|SERVICE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|SERVICE_COUNT
init|=
literal|5
decl_stmt|;
DECL|field|SERVICE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_PATH
init|=
literal|"/camel"
decl_stmt|;
DECL|field|server
specifier|private
name|ZooKeeperTestSupport
operator|.
name|TestZookeeperServer
name|server
decl_stmt|;
DECL|field|curator
specifier|private
name|CuratorFramework
name|curator
decl_stmt|;
DECL|field|discovery
specifier|private
name|ServiceDiscovery
argument_list|<
name|ZooKeeperServiceDiscovery
operator|.
name|MetaData
argument_list|>
name|discovery
decl_stmt|;
DECL|field|instances
specifier|private
name|List
argument_list|<
name|ServiceInstance
argument_list|<
name|ZooKeeperServiceDiscovery
operator|.
name|MetaData
argument_list|>
argument_list|>
name|instances
decl_stmt|;
DECL|field|expectedBodies
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|expectedBodies
decl_stmt|;
comment|// *************************************************************************
comment|// Setup / tear down
comment|// *************************************************************************
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doPreSetup
argument_list|()
expr_stmt|;
name|server
operator|=
operator|new
name|ZooKeeperTestSupport
operator|.
name|TestZookeeperServer
argument_list|(
name|SERVER_PORT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ZooKeeperTestSupport
operator|.
name|waitForServerUp
argument_list|(
literal|"127.0.0.1:"
operator|+
name|SERVER_PORT
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|curator
operator|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
literal|"127.0.0.1:"
operator|+
name|SERVER_PORT
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|ExponentialBackoffRetry
argument_list|(
literal|1000
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|discovery
operator|=
name|ServiceDiscoveryBuilder
operator|.
name|builder
argument_list|(
name|ZooKeeperServiceDiscovery
operator|.
name|MetaData
operator|.
name|class
argument_list|)
operator|.
name|client
argument_list|(
name|curator
argument_list|)
operator|.
name|basePath
argument_list|(
name|SERVICE_PATH
argument_list|)
operator|.
name|serializer
argument_list|(
operator|new
name|JsonInstanceSerializer
argument_list|<>
argument_list|(
name|ZooKeeperServiceDiscovery
operator|.
name|MetaData
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
name|discovery
operator|.
name|start
argument_list|()
expr_stmt|;
name|instances
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|SERVICE_COUNT
argument_list|)
expr_stmt|;
name|expectedBodies
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|SERVICE_COUNT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SERVICE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|ServiceInstance
argument_list|<
name|ZooKeeperServiceDiscovery
operator|.
name|MetaData
argument_list|>
name|instance
init|=
name|ServiceInstance
operator|.
expr|<
name|ZooKeeperServiceDiscovery
operator|.
name|MetaData
operator|>
name|builder
argument_list|()
operator|.
name|address
argument_list|(
literal|"127.0.0.1"
argument_list|)
operator|.
name|port
argument_list|(
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
argument_list|)
operator|.
name|name
argument_list|(
name|SERVICE_NAME
argument_list|)
operator|.
name|id
argument_list|(
literal|"service-"
operator|+
name|i
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|discovery
operator|.
name|registerService
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|expectedBodies
operator|.
name|add
argument_list|(
literal|"ping on "
operator|+
name|instance
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|ServiceInstance
argument_list|<
name|ZooKeeperServiceDiscovery
operator|.
name|MetaData
argument_list|>
name|instace
range|:
name|instances
control|)
block|{
try|try
block|{
name|discovery
operator|.
name|unregisterService
argument_list|(
name|instace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|discovery
argument_list|)
expr_stmt|;
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|curator
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// Test
comment|// *************************************************************************
annotation|@
name|Test
DECL|method|testServiceCall ()
specifier|public
name|void
name|testServiceCall
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
name|SERVICE_COUNT
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
name|expectedBodies
argument_list|)
expr_stmt|;
name|instances
operator|.
name|forEach
argument_list|(
name|r
lambda|->
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"ping"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// Route
comment|// *************************************************************************
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|serviceCall
argument_list|()
operator|.
name|name
argument_list|(
name|SERVICE_NAME
argument_list|)
operator|.
name|component
argument_list|(
literal|"jetty"
argument_list|)
operator|.
name|defaultLoadBalancer
argument_list|()
operator|.
name|zookeeperServiceDiscovery
argument_list|(
literal|"127.0.0.1:"
operator|+
name|SERVER_PORT
argument_list|,
name|SERVICE_PATH
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"log:org.apache.camel.component.zookeeper.cloud?level=INFO&showAll=true&multiline=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|instances
operator|.
name|forEach
argument_list|(
name|r
lambda|->
name|fromF
argument_list|(
literal|"jetty:http://%s:%d"
argument_list|,
name|r
operator|.
name|getAddress
argument_list|()
argument_list|,
name|r
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|simple
argument_list|(
literal|"${in.body} on "
operator|+
name|r
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

