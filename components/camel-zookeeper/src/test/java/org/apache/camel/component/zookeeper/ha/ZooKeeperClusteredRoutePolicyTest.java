begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.ha
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperTestSupport
operator|.
name|TestZookeeperServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ha
operator|.
name|ClusteredRoutePolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ZooKeeperClusteredRoutePolicyTest
specifier|public
specifier|final
class|class
name|ZooKeeperClusteredRoutePolicyTest
block|{
DECL|field|PORT
specifier|private
specifier|static
specifier|final
name|int
name|PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZooKeeperClusteredRoutePolicyTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CLIENTS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|CLIENTS
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|Integer
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|RESULTS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|RESULTS
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|SCHEDULER
specifier|private
specifier|static
specifier|final
name|ScheduledExecutorService
name|SCHEDULER
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|CLIENTS
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
DECL|field|LATCH
specifier|private
specifier|static
specifier|final
name|CountDownLatch
name|LATCH
init|=
operator|new
name|CountDownLatch
argument_list|(
name|CLIENTS
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// ************************************
comment|// Test
comment|// ************************************
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZookeeperServer
name|server
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|=
operator|new
name|TestZookeeperServer
argument_list|(
name|PORT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ZooKeeperTestSupport
operator|.
name|waitForServerUp
argument_list|(
literal|"localhost:"
operator|+
name|PORT
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|CLIENTS
control|)
block|{
name|SCHEDULER
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|run
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LATCH
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|SCHEDULER
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CLIENTS
operator|.
name|size
argument_list|()
argument_list|,
name|RESULTS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|RESULTS
operator|.
name|containsAll
argument_list|(
name|CLIENTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// ************************************
comment|// Run a Camel node
comment|// ************************************
DECL|method|run (String id)
specifier|private
specifier|static
name|void
name|run
parameter_list|(
name|String
name|id
parameter_list|)
block|{
try|try
block|{
name|CountDownLatch
name|contextLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ZooKeeperClusterService
name|service
init|=
operator|new
name|ZooKeeperClusterService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setId
argument_list|(
literal|"node-"
operator|+
name|id
argument_list|)
expr_stmt|;
name|service
operator|.
name|setNodes
argument_list|(
literal|"localhost:"
operator|+
name|PORT
argument_list|)
expr_stmt|;
name|service
operator|.
name|setBasePath
argument_list|(
literal|"/camel"
argument_list|)
expr_stmt|;
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|disableJMX
argument_list|()
expr_stmt|;
name|context
operator|.
name|setName
argument_list|(
literal|"context-"
operator|+
name|id
argument_list|)
expr_stmt|;
name|context
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutePolicyFactory
argument_list|(
name|ClusteredRoutePolicyFactory
operator|.
name|forNamespace
argument_list|(
literal|"my-ns"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"timer:zookeeper?delay=1s&period=1s&repeatCount=1"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route-"
operator|+
name|id
argument_list|)
operator|.
name|process
argument_list|(
name|e
lambda|->
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Node {} done"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|RESULTS
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// Shutdown the context later on to give a chance to
comment|// other members to catch-up
name|SCHEDULER
operator|.
name|schedule
argument_list|(
name|contextLatch
operator|::
name|countDown
argument_list|,
literal|2
operator|+
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Start the context after some random time so the startup order
comment|// changes for each test.
name|Thread
operator|.
name|sleep
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|contextLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LATCH
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

