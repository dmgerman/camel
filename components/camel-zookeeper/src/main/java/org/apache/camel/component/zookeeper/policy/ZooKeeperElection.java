begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|SequenceComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
operator|.
name|JavaUuidGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UuidGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<code>ZooKeeperElection</code> uses the leader election capabilities of a  * ZooKeeper cluster to control which nodes are enabled. It is typically used in  * fail-over scenarios controlling identical instances of an application across  * a cluster of Camel based servers.<p> The election is configured with a 'top  * n' number of servers that should be marked as master, for a simple  * master/slave scenario this would be 1. Each instance will execute the  * election algorithm to obtain its position in the hierarchy of servers, if it  * is within the 'top n' servers then the node is enabled and isMaster() will  * return 'true'. If not it waits for a change in the leader hierarchy and then  * reruns this scenario to see if it is now in the top n.<p> All instances of  * the election must also be configured with the same path on the ZooKeeper  * cluster where the election will be carried out. It is good practice for this  * to indicate the application e.g.<tt>/someapplication/someroute/</tt> note  * that these nodes should exist before using the election.<p> See<a  * href="http://hadoop.apache.org/zookeeper/docs/current/recipes.html#sc_leaderElection">  * for more on how Leader election</a> is archived with ZooKeeper.  */
end_comment

begin_class
DECL|class|ZooKeeperElection
specifier|public
class|class
name|ZooKeeperElection
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZooKeeperElection
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|producerTemplate
specifier|private
specifier|final
name|ProducerTemplate
name|producerTemplate
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
DECL|field|candidateName
specifier|private
specifier|final
name|String
name|candidateName
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|electionComplete
specifier|private
specifier|final
name|CountDownLatch
name|electionComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|masterNode
specifier|private
name|AtomicBoolean
name|masterNode
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|isCandidateCreated
specifier|private
specifier|volatile
name|boolean
name|isCandidateCreated
decl_stmt|;
DECL|field|enabledCount
specifier|private
name|int
name|enabledCount
init|=
literal|1
decl_stmt|;
DECL|field|uuidGenerator
specifier|private
name|UuidGenerator
name|uuidGenerator
init|=
operator|new
name|JavaUuidGenerator
argument_list|()
decl_stmt|;
DECL|field|watchers
specifier|private
specifier|final
name|List
argument_list|<
name|ElectionWatcher
argument_list|>
name|watchers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ZooKeeperElection (CamelContext camelContext, String uri, int enabledCount)
specifier|public
name|ZooKeeperElection
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|uri
parameter_list|,
name|int
name|enabledCount
parameter_list|)
block|{
name|this
argument_list|(
name|camelContext
operator|.
name|createProducerTemplate
argument_list|()
argument_list|,
name|camelContext
argument_list|,
name|uri
argument_list|,
name|enabledCount
argument_list|)
expr_stmt|;
block|}
DECL|method|ZooKeeperElection (ProducerTemplate producerTemplate, CamelContext camelContext, String uri, int enabledCount)
specifier|public
name|ZooKeeperElection
parameter_list|(
name|ProducerTemplate
name|producerTemplate
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|uri
parameter_list|,
name|int
name|enabledCount
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|producerTemplate
operator|=
name|producerTemplate
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|enabledCount
operator|=
name|enabledCount
expr_stmt|;
name|this
operator|.
name|candidateName
operator|=
name|createCandidateName
argument_list|()
expr_stmt|;
block|}
DECL|method|isMaster ()
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isCandidateCreated
condition|)
block|{
name|testAndCreateCandidateNode
argument_list|()
expr_stmt|;
name|awaitElectionResults
argument_list|()
expr_stmt|;
block|}
return|return
name|masterNode
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|createCandidateName ()
specifier|private
name|String
name|createCandidateName
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
comment|/* UUID would be enough, also using hostname for human readability */
name|builder
operator|.
name|append
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get the local hostname."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"unknown-host"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|uuidGenerator
operator|.
name|generateUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testAndCreateCandidateNode ()
specifier|private
name|void
name|testAndCreateCandidateNode
parameter_list|()
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isCandidateCreated
condition|)
block|{
name|createCandidateNode
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|isCandidateCreated
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|awaitElectionResults ()
specifier|private
name|void
name|awaitElectionResults
parameter_list|()
block|{
while|while
condition|(
name|electionComplete
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Awaiting election results..."
argument_list|)
expr_stmt|;
name|electionComplete
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
comment|// do nothing here
block|}
block|}
block|}
DECL|method|createCandidateNode (CamelContext camelContext)
specifier|private
name|ZooKeeperEndpoint
name|createCandidateNode
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing ZookeeperElection with uri '{}'"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|ZooKeeperEndpoint
name|zep
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|,
name|ZooKeeperEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|zep
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setCreate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|fullpath
init|=
name|createFullPathToCandidate
argument_list|(
name|zep
argument_list|)
decl_stmt|;
name|Exchange
name|e
init|=
name|zep
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|e
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|ZooKeeperMessage
operator|.
name|ZOOKEEPER_NODE
argument_list|,
name|fullpath
argument_list|)
expr_stmt|;
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|ZooKeeperMessage
operator|.
name|ZOOKEEPER_CREATE_MODE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|)
expr_stmt|;
name|producerTemplate
operator|.
name|send
argument_list|(
name|zep
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error setting up election node {}"
argument_list|,
name|fullpath
argument_list|,
name|e
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Candidate node '{}' has been created"
argument_list|,
name|fullpath
argument_list|)
expr_stmt|;
try|try
block|{
name|camelContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|ElectoralMonitorRoute
argument_list|(
name|zep
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error configuring ZookeeperElection"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|zep
return|;
block|}
DECL|method|createFullPathToCandidate (ZooKeeperEndpoint zep)
specifier|private
name|String
name|createFullPathToCandidate
parameter_list|(
name|ZooKeeperEndpoint
name|zep
parameter_list|)
block|{
name|String
name|fullpath
init|=
name|zep
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fullpath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fullpath
operator|+=
literal|"/"
expr_stmt|;
block|}
name|fullpath
operator|+=
name|candidateName
expr_stmt|;
return|return
name|fullpath
return|;
block|}
DECL|method|handleException (Exception e)
specifier|private
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
DECL|method|notifyElectionWatchers ()
specifier|private
name|void
name|notifyElectionWatchers
parameter_list|()
block|{
for|for
control|(
name|ElectionWatcher
name|watcher
range|:
name|watchers
control|)
block|{
try|try
block|{
name|watcher
operator|.
name|electionResultChanged
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Election watcher "
operator|+
name|watcher
operator|+
literal|" of type "
operator|+
name|watcher
operator|.
name|getClass
argument_list|()
operator|+
literal|" threw an exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addElectionWatcher (ElectionWatcher e)
specifier|public
name|boolean
name|addElectionWatcher
parameter_list|(
name|ElectionWatcher
name|e
parameter_list|)
block|{
return|return
name|watchers
operator|.
name|add
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|method|removeElectionWatcher (ElectionWatcher o)
specifier|public
name|boolean
name|removeElectionWatcher
parameter_list|(
name|ElectionWatcher
name|o
parameter_list|)
block|{
return|return
name|watchers
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
DECL|class|ElectoralMonitorRoute
specifier|private
class|class
name|ElectoralMonitorRoute
extends|extends
name|RouteBuilder
block|{
DECL|field|comparator
specifier|private
name|SequenceComparator
name|comparator
init|=
operator|new
name|SequenceComparator
argument_list|()
decl_stmt|;
DECL|field|zep
specifier|private
name|ZooKeeperEndpoint
name|zep
decl_stmt|;
DECL|method|ElectoralMonitorRoute (ZooKeeperEndpoint zep)
name|ElectoralMonitorRoute
parameter_list|(
name|ZooKeeperEndpoint
name|zep
parameter_list|)
block|{
name|this
operator|.
name|zep
operator|=
name|zep
expr_stmt|;
name|zep
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setListChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|zep
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setSendEmptyMessageOnDelete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|zep
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**              * TODO: this is cheap cheerful but suboptimal; it suffers from the              * 'herd effect' that on any change to the candidates list every              * policy instance will ask for the entire candidate list again.              * This is fine for small numbers of nodes (for scenarios like              * Master-Slave it is perfect) but could get noisy if large numbers              * of nodes were involved.<p> Better would be to find the position              * of this node in the list and watch the node in the position ahead              * node ahead of this and only request the candidate list when its              * status changes. This will require enhancing the consumer to allow              * custom operation lists.              */
name|from
argument_list|(
name|zep
argument_list|)
operator|.
name|id
argument_list|(
literal|"election-route-"
operator|+
name|candidateName
argument_list|)
operator|.
name|sort
argument_list|(
name|body
argument_list|()
argument_list|,
name|comparator
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|e
parameter_list|)
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|candidates
init|=
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// we cannot use the binary search here and the candidates a not sorted in the normal way
comment|/**                      * check if the item at this location starts with this nodes                      * candidate name                      */
name|int
name|location
init|=
name|findCandidateLocationInCandidatesList
argument_list|(
name|candidates
argument_list|,
name|candidateName
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// set the nodes
name|masterNode
operator|.
name|set
argument_list|(
name|location
operator|<=
name|enabledCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"This node is number '{}' on the candidate list, election is configured for the top '{}'. this node will be {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|location
block|,
name|enabledCount
block|,
name|masterNode
operator|.
name|get
argument_list|()
condition|?
literal|"enabled"
else|:
literal|"disabled"
block|}
argument_list|)
expr_stmt|;
block|}
name|electionComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|notifyElectionWatchers
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|findCandidateLocationInCandidatesList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|,
name|String
name|candidateName
parameter_list|)
block|{
for|for
control|(
name|int
name|location
init|=
literal|1
init|;
name|location
operator|<=
name|candidates
operator|.
name|size
argument_list|()
condition|;
name|location
operator|++
control|)
block|{
if|if
condition|(
name|candidates
operator|.
name|get
argument_list|(
name|location
operator|-
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
name|candidateName
argument_list|)
condition|)
block|{
return|return
name|location
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

