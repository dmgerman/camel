begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
operator|.
name|AnyOfOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
operator|.
name|ChildrenChangedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
operator|.
name|DataChangedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
operator|.
name|ExistenceChangedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
operator|.
name|ExistsOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
operator|.
name|GetChildrenOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
operator|.
name|GetDataOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
operator|.
name|OperationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
operator|.
name|ZooKeeperOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_comment
comment|/**  *<code>ZooKeeperConsumer</code> uses various {@link ZooKeeperOperation} to  * interact and consume data from a ZooKeeper cluster.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|ZooKeeperConsumer
specifier|public
class|class
name|ZooKeeperConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|zkm
specifier|private
specifier|final
name|ZooKeeperConnectionManager
name|zkm
decl_stmt|;
DECL|field|connection
specifier|private
name|ZooKeeper
name|connection
decl_stmt|;
DECL|field|configuration
specifier|private
name|ZooKeeperConfiguration
name|configuration
decl_stmt|;
DECL|field|operations
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|ZooKeeperOperation
argument_list|>
name|operations
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|shuttingDown
specifier|private
specifier|volatile
name|boolean
name|shuttingDown
decl_stmt|;
DECL|method|ZooKeeperConsumer (ZooKeeperEndpoint endpoint, Processor processor)
specifier|public
name|ZooKeeperConsumer
parameter_list|(
name|ZooKeeperEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkm
operator|=
name|endpoint
operator|.
name|getConnectionManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|connection
operator|=
name|zkm
operator|.
name|getConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Connected to Zookeeper cluster %s"
argument_list|,
name|configuration
operator|.
name|getConnectString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|initializeConsumer
argument_list|()
expr_stmt|;
name|executor
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newFixedThreadPool
argument_list|(
name|this
argument_list|,
literal|"Camel-Zookeeper OperationsExecutor"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|OperationsExecutor
name|opsService
init|=
operator|new
name|OperationsExecutor
argument_list|()
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
name|opsService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|shuttingDown
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Shutting down zookeeper consumer of '%s'"
argument_list|,
name|configuration
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|zkm
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|initializeConsumer ()
specifier|private
name|void
name|initializeConsumer
parameter_list|()
block|{
name|String
name|node
init|=
name|configuration
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isListChildren
argument_list|()
condition|)
block|{
name|initializeChildListingConsumer
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initializeDataConsumer
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializeDataConsumer (String node)
specifier|private
name|void
name|initializeDataConsumer
parameter_list|(
name|String
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shuttingDown
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Initializing consumption of data on node '%s'"
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addBasicDataConsumeSequence
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializeChildListingConsumer (String node)
specifier|private
name|void
name|initializeChildListingConsumer
parameter_list|(
name|String
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shuttingDown
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Initializing child listing of node '%s'"
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addBasicChildListingSequence
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createExchange (String path, OperationResult result, WatchedEvent watchedEvent)
specifier|private
name|Exchange
name|createExchange
parameter_list|(
name|String
name|path
parameter_list|,
name|OperationResult
name|result
parameter_list|,
name|WatchedEvent
name|watchedEvent
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|ZooKeeperMessage
name|in
init|=
operator|new
name|ZooKeeperMessage
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|path
argument_list|,
name|result
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|watchedEvent
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isOk
argument_list|()
condition|)
block|{
name|in
operator|.
name|setBody
argument_list|(
name|result
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|result
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
DECL|class|OperationsExecutor
specifier|private
class|class
name|OperationsExecutor
implements|implements
name|Runnable
block|{
DECL|field|current
specifier|private
name|ZooKeeperOperation
name|current
decl_stmt|;
DECL|field|watchedEvent
specifier|private
name|WatchedEvent
name|watchedEvent
decl_stmt|;
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|isRunAllowed
argument_list|()
condition|)
block|{
try|try
block|{
name|current
operator|=
name|operations
operator|.
name|take
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Processing '%s' operation"
argument_list|,
name|current
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
name|String
name|node
init|=
name|current
operator|.
name|getNode
argument_list|()
decl_stmt|;
try|try
block|{
name|OperationResult
name|result
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ZooKeeperUtils
operator|.
name|hasWatchedEvent
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|watchedEvent
operator|=
name|ZooKeeperUtils
operator|.
name|getWatchedEvent
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|current
operator|.
name|shouldProduceExchange
argument_list|()
condition|)
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|createExchange
argument_list|(
name|node
argument_list|,
name|result
argument_list|,
name|watchedEvent
argument_list|)
argument_list|)
expr_stmt|;
name|watchedEvent
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|backoffAndThenRestart
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|configuration
operator|.
name|isRepeat
argument_list|()
condition|)
block|{
try|try
block|{
name|operations
operator|.
name|offer
argument_list|(
name|current
operator|.
name|createCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|backoffAndThenRestart
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|backoffAndThenRestart ()
specifier|private
name|void
name|backoffAndThenRestart
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|isRunAllowed
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|configuration
operator|.
name|getBackoff
argument_list|()
argument_list|)
expr_stmt|;
name|initializeConsumer
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|method|addBasicDataConsumeSequence (String node)
specifier|private
name|void
name|addBasicDataConsumeSequence
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|operations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|AnyOfOperations
argument_list|(
name|node
argument_list|,
operator|new
name|ExistsOperation
argument_list|(
name|connection
argument_list|,
name|node
argument_list|)
argument_list|,
operator|new
name|ExistenceChangedOperation
argument_list|(
name|connection
argument_list|,
name|node
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|GetDataOperation
argument_list|(
name|connection
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|DataChangedOperation
argument_list|(
name|connection
argument_list|,
name|node
argument_list|,
literal|false
argument_list|,
name|configuration
operator|.
name|isSendEmptyMessageOnDelete
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addBasicChildListingSequence (String node)
specifier|private
name|void
name|addBasicChildListingSequence
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|operations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|AnyOfOperations
argument_list|(
name|node
argument_list|,
operator|new
name|ExistsOperation
argument_list|(
name|connection
argument_list|,
name|node
argument_list|)
argument_list|,
operator|new
name|ExistenceChangedOperation
argument_list|(
name|connection
argument_list|,
name|node
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|GetChildrenOperation
argument_list|(
name|connection
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|ChildrenChangedOperation
argument_list|(
name|connection
argument_list|,
name|node
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

