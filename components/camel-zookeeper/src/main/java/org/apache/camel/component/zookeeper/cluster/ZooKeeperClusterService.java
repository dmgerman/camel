begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.cluster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperCuratorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperCuratorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|cluster
operator|.
name|AbstractCamelClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|AuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ZooKeeperClusterService
specifier|public
class|class
name|ZooKeeperClusterService
extends|extends
name|AbstractCamelClusterService
argument_list|<
name|ZooKeeperClusterView
argument_list|>
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZooKeeperClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|curator
specifier|private
name|CuratorFramework
name|curator
decl_stmt|;
DECL|field|configuration
specifier|private
name|ZooKeeperCuratorConfiguration
name|configuration
decl_stmt|;
DECL|field|managedInstance
specifier|private
name|boolean
name|managedInstance
decl_stmt|;
DECL|method|ZooKeeperClusterService ()
specifier|public
name|ZooKeeperClusterService
parameter_list|()
block|{
name|this
operator|.
name|configuration
operator|=
operator|new
name|ZooKeeperCuratorConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|managedInstance
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|ZooKeeperClusterService (ZooKeeperCuratorConfiguration configuration)
specifier|public
name|ZooKeeperClusterService
parameter_list|(
name|ZooKeeperCuratorConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
operator|.
name|copy
argument_list|()
expr_stmt|;
name|this
operator|.
name|managedInstance
operator|=
literal|true
expr_stmt|;
block|}
comment|// *********************************************
comment|// Properties
comment|// *********************************************
DECL|method|getConfiguration ()
specifier|public
name|ZooKeeperCuratorConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (ZooKeeperCuratorConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|ZooKeeperCuratorConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
DECL|method|getCuratorFramework ()
specifier|public
name|CuratorFramework
name|getCuratorFramework
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getCuratorFramework
argument_list|()
return|;
block|}
DECL|method|setCuratorFramework (CuratorFramework curatorFramework)
specifier|public
name|void
name|setCuratorFramework
parameter_list|(
name|CuratorFramework
name|curatorFramework
parameter_list|)
block|{
name|configuration
operator|.
name|setCuratorFramework
argument_list|(
name|curatorFramework
argument_list|)
expr_stmt|;
block|}
DECL|method|getNodes ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getNodes
argument_list|()
return|;
block|}
DECL|method|setNodes (String nodes)
specifier|public
name|void
name|setNodes
parameter_list|(
name|String
name|nodes
parameter_list|)
block|{
name|configuration
operator|.
name|setNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
DECL|method|setNodes (List<String> nodes)
specifier|public
name|void
name|setNodes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
block|{
name|configuration
operator|.
name|setNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
DECL|method|getNamespace ()
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getNamespace
argument_list|()
return|;
block|}
DECL|method|setNamespace (String namespace)
specifier|public
name|void
name|setNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|configuration
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
DECL|method|getReconnectBaseSleepTime ()
specifier|public
name|long
name|getReconnectBaseSleepTime
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getReconnectBaseSleepTime
argument_list|()
return|;
block|}
DECL|method|setReconnectBaseSleepTime (long reconnectBaseSleepTime)
specifier|public
name|void
name|setReconnectBaseSleepTime
parameter_list|(
name|long
name|reconnectBaseSleepTime
parameter_list|)
block|{
name|configuration
operator|.
name|setReconnectBaseSleepTime
argument_list|(
name|reconnectBaseSleepTime
argument_list|)
expr_stmt|;
block|}
DECL|method|setReconnectBaseSleepTime (long reconnectBaseSleepTime, TimeUnit reconnectBaseSleepTimeUnit)
specifier|public
name|void
name|setReconnectBaseSleepTime
parameter_list|(
name|long
name|reconnectBaseSleepTime
parameter_list|,
name|TimeUnit
name|reconnectBaseSleepTimeUnit
parameter_list|)
block|{
name|configuration
operator|.
name|setReconnectBaseSleepTime
argument_list|(
name|reconnectBaseSleepTime
argument_list|,
name|reconnectBaseSleepTimeUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|getReconnectBaseSleepTimeUnit ()
specifier|public
name|TimeUnit
name|getReconnectBaseSleepTimeUnit
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getReconnectBaseSleepTimeUnit
argument_list|()
return|;
block|}
DECL|method|setReconnectBaseSleepTimeUnit (TimeUnit reconnectBaseSleepTimeUnit)
specifier|public
name|void
name|setReconnectBaseSleepTimeUnit
parameter_list|(
name|TimeUnit
name|reconnectBaseSleepTimeUnit
parameter_list|)
block|{
name|configuration
operator|.
name|setReconnectBaseSleepTimeUnit
argument_list|(
name|reconnectBaseSleepTimeUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|getReconnectMaxRetries ()
specifier|public
name|int
name|getReconnectMaxRetries
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getReconnectMaxRetries
argument_list|()
return|;
block|}
DECL|method|setReconnectMaxRetries (int reconnectMaxRetries)
specifier|public
name|void
name|setReconnectMaxRetries
parameter_list|(
name|int
name|reconnectMaxRetries
parameter_list|)
block|{
name|configuration
operator|.
name|setReconnectMaxRetries
argument_list|(
name|reconnectMaxRetries
argument_list|)
expr_stmt|;
block|}
DECL|method|getSessionTimeout ()
specifier|public
name|long
name|getSessionTimeout
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getSessionTimeout
argument_list|()
return|;
block|}
DECL|method|setSessionTimeout (long sessionTimeout)
specifier|public
name|void
name|setSessionTimeout
parameter_list|(
name|long
name|sessionTimeout
parameter_list|)
block|{
name|configuration
operator|.
name|setSessionTimeout
argument_list|(
name|sessionTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|setSessionTimeout (long sessionTimeout, TimeUnit sessionTimeoutUnit)
specifier|public
name|void
name|setSessionTimeout
parameter_list|(
name|long
name|sessionTimeout
parameter_list|,
name|TimeUnit
name|sessionTimeoutUnit
parameter_list|)
block|{
name|configuration
operator|.
name|setSessionTimeout
argument_list|(
name|sessionTimeout
argument_list|,
name|sessionTimeoutUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|getSessionTimeoutUnit ()
specifier|public
name|TimeUnit
name|getSessionTimeoutUnit
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getSessionTimeoutUnit
argument_list|()
return|;
block|}
DECL|method|setSessionTimeoutUnit (TimeUnit sessionTimeoutUnit)
specifier|public
name|void
name|setSessionTimeoutUnit
parameter_list|(
name|TimeUnit
name|sessionTimeoutUnit
parameter_list|)
block|{
name|configuration
operator|.
name|setSessionTimeoutUnit
argument_list|(
name|sessionTimeoutUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|long
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getConnectionTimeout
argument_list|()
return|;
block|}
DECL|method|setConnectionTimeout (long connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|long
name|connectionTimeout
parameter_list|)
block|{
name|configuration
operator|.
name|setConnectionTimeout
argument_list|(
name|connectionTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|setConnectionTimeout (long connectionTimeout, TimeUnit connectionTimeotUnit)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|long
name|connectionTimeout
parameter_list|,
name|TimeUnit
name|connectionTimeotUnit
parameter_list|)
block|{
name|configuration
operator|.
name|setConnectionTimeout
argument_list|(
name|connectionTimeout
argument_list|,
name|connectionTimeotUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnectionTimeotUnit ()
specifier|public
name|TimeUnit
name|getConnectionTimeotUnit
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getConnectionTimeoutUnit
argument_list|()
return|;
block|}
DECL|method|setConnectionTimeotUnit (TimeUnit connectionTimeotUnit)
specifier|public
name|void
name|setConnectionTimeotUnit
parameter_list|(
name|TimeUnit
name|connectionTimeotUnit
parameter_list|)
block|{
name|configuration
operator|.
name|setConnectionTimeoutUnit
argument_list|(
name|connectionTimeotUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|getAuthInfoList ()
specifier|public
name|List
argument_list|<
name|AuthInfo
argument_list|>
name|getAuthInfoList
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getAuthInfoList
argument_list|()
return|;
block|}
DECL|method|setAuthInfoList (List<AuthInfo> authInfoList)
specifier|public
name|void
name|setAuthInfoList
parameter_list|(
name|List
argument_list|<
name|AuthInfo
argument_list|>
name|authInfoList
parameter_list|)
block|{
name|configuration
operator|.
name|setAuthInfoList
argument_list|(
name|authInfoList
argument_list|)
expr_stmt|;
block|}
DECL|method|getMaxCloseWait ()
specifier|public
name|long
name|getMaxCloseWait
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getMaxCloseWait
argument_list|()
return|;
block|}
DECL|method|setMaxCloseWait (long maxCloseWait)
specifier|public
name|void
name|setMaxCloseWait
parameter_list|(
name|long
name|maxCloseWait
parameter_list|)
block|{
name|configuration
operator|.
name|setMaxCloseWait
argument_list|(
name|maxCloseWait
argument_list|)
expr_stmt|;
block|}
DECL|method|getMaxCloseWaitUnit ()
specifier|public
name|TimeUnit
name|getMaxCloseWaitUnit
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getMaxCloseWaitUnit
argument_list|()
return|;
block|}
DECL|method|setMaxCloseWaitUnit (TimeUnit maxCloseWaitUnit)
specifier|public
name|void
name|setMaxCloseWaitUnit
parameter_list|(
name|TimeUnit
name|maxCloseWaitUnit
parameter_list|)
block|{
name|configuration
operator|.
name|setMaxCloseWaitUnit
argument_list|(
name|maxCloseWaitUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|getRetryPolicy ()
specifier|public
name|RetryPolicy
name|getRetryPolicy
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getRetryPolicy
argument_list|()
return|;
block|}
DECL|method|setRetryPolicy (RetryPolicy retryPolicy)
specifier|public
name|void
name|setRetryPolicy
parameter_list|(
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
name|configuration
operator|.
name|setRetryPolicy
argument_list|(
name|retryPolicy
argument_list|)
expr_stmt|;
block|}
DECL|method|getBasePath ()
specifier|public
name|String
name|getBasePath
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getBasePath
argument_list|()
return|;
block|}
DECL|method|setBasePath (String basePath)
specifier|public
name|void
name|setBasePath
parameter_list|(
name|String
name|basePath
parameter_list|)
block|{
name|configuration
operator|.
name|setBasePath
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
block|}
comment|// *********************************************
comment|//
comment|// *********************************************
annotation|@
name|Override
DECL|method|createView (String namespace)
specifier|protected
name|ZooKeeperClusterView
name|createView
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Validation
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
literal|"Camel Context"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configuration
operator|.
name|getBasePath
argument_list|()
argument_list|,
literal|"ZooKeeper base path"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ZooKeeperClusterView
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|,
name|getOrCreateCurator
argument_list|()
argument_list|,
name|namespace
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// instantiate a new CuratorFramework
name|getOrCreateCurator
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|curator
operator|!=
literal|null
operator|&&
name|managedInstance
condition|)
block|{
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getOrCreateCurator ()
specifier|private
name|CuratorFramework
name|getOrCreateCurator
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|curator
operator|==
literal|null
condition|)
block|{
name|curator
operator|=
name|configuration
operator|.
name|getCuratorFramework
argument_list|()
expr_stmt|;
if|if
condition|(
name|curator
operator|==
literal|null
condition|)
block|{
name|managedInstance
operator|=
literal|true
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Starting ZooKeeper Curator with namespace '{}',  nodes: '{}'"
argument_list|,
name|configuration
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|configuration
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curator
operator|=
name|ZooKeeperCuratorHelper
operator|.
name|createCurator
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|managedInstance
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|curator
return|;
block|}
block|}
end_class

end_unit

