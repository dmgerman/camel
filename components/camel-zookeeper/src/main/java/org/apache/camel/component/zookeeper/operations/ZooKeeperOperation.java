begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.operations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<code>ZooKeeperOperation</code> is the base class for wrapping various  * ZooKeeper API instructions and callbacks into callable and composable operation  * objects.  */
end_comment

begin_class
DECL|class|ZooKeeperOperation
specifier|public
specifier|abstract
class|class
name|ZooKeeperOperation
parameter_list|<
name|ResultType
parameter_list|>
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZooKeeperOperation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONSTRUCTOR_ARGS
specifier|protected
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|CONSTRUCTOR_ARGS
init|=
block|{
name|ZooKeeper
operator|.
name|class
block|,
name|String
operator|.
name|class
block|}
decl_stmt|;
DECL|field|node
specifier|protected
name|String
name|node
decl_stmt|;
DECL|field|connection
specifier|protected
name|ZooKeeper
name|connection
decl_stmt|;
DECL|field|waitingThreads
specifier|protected
name|Set
argument_list|<
name|Thread
argument_list|>
name|waitingThreads
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|result
specifier|protected
name|OperationResult
argument_list|<
name|ResultType
argument_list|>
name|result
decl_stmt|;
DECL|field|producesExchange
specifier|private
name|boolean
name|producesExchange
decl_stmt|;
DECL|field|cancelled
specifier|private
name|boolean
name|cancelled
decl_stmt|;
DECL|method|ZooKeeperOperation (ZooKeeper connection, String node)
specifier|public
name|ZooKeeperOperation
parameter_list|(
name|ZooKeeper
name|connection
parameter_list|,
name|String
name|node
parameter_list|)
block|{
name|this
argument_list|(
name|connection
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|ZooKeeperOperation (ZooKeeper connection, String node, boolean producesExchange)
specifier|public
name|ZooKeeperOperation
parameter_list|(
name|ZooKeeper
name|connection
parameter_list|,
name|String
name|node
parameter_list|,
name|boolean
name|producesExchange
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|producesExchange
operator|=
name|producesExchange
expr_stmt|;
block|}
comment|/**      * Gets the result of this zookeeper operation, i.e. some data and the      * associated node stats      */
DECL|method|getResult ()
specifier|public
specifier|abstract
name|OperationResult
argument_list|<
name|ResultType
argument_list|>
name|getResult
parameter_list|()
function_decl|;
DECL|method|get ()
specifier|public
name|OperationResult
argument_list|<
name|ResultType
argument_list|>
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|waitingThreads
operator|.
name|add
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|getResult
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|OperationResult
argument_list|<
name|ResultType
argument_list|>
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
comment|// TODO perhaps set a timer here
return|return
name|get
argument_list|()
return|;
block|}
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
if|if
condition|(
name|mayInterruptIfRunning
condition|)
block|{
for|for
control|(
name|Thread
name|waiting
range|:
name|waitingThreads
control|)
block|{
name|waiting
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|cancelled
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|mayInterruptIfRunning
return|;
block|}
DECL|method|isCancelled ()
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|cancelled
return|;
block|}
DECL|method|isDone ()
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|result
operator|!=
literal|null
return|;
block|}
DECL|method|getNode ()
specifier|public
name|String
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
DECL|method|shouldProduceExchange ()
specifier|public
name|boolean
name|shouldProduceExchange
parameter_list|()
block|{
return|return
name|producesExchange
return|;
block|}
comment|// TODO slightly different to a clone as it uses the constructor
DECL|method|createCopy ()
specifier|public
name|ZooKeeperOperation
argument_list|<
name|?
argument_list|>
name|createCopy
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getConstructor
argument_list|(
name|CONSTRUCTOR_ARGS
argument_list|)
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|connection
block|,
name|node
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

