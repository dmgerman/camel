begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|SequenceComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JavaUuidGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|RoutePolicySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UuidGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_comment
comment|/**  *<code>ZooKeeperRoutePolicy</code> uses the leader election capabilities of a  * ZooKeeper cluster to control how routes are enabled. It is typically used in  * fail-over scenarios controlling identical instances of a route across a  * cluster of Camel based servers.  *<p>  * The policy is configured with a 'top n' number of routes that should be  * allowed to start, for a master/slave scenario this would be 1. Each instance  * of the policy will execute the election algorithm to obtain its position in  * the hierarchy of servers, if it is within the 'top n' servers then the policy  * is enabled and exchanges can be processed by the route. If not it waits for a  * change in the leader hierarchy and then reruns this scenario to see if it is  * now in the top n.  *<p>  * All instances of the policy must also be configured with the same path on the  * ZooKeeper cluster where the election will be carried out. It is good practice  * for this to indicate the application e.g.<tt>/someapplication/someroute/</tt> note  * that these nodes should exist before using the policy.  *<p>  * See<a href="http://hadoop.apache.org/zookeeper/docs/current/recipes.html#sc_leaderElection">  *     for more on how Leader election</a> is archived with ZooKeeper.  */
end_comment

begin_class
DECL|class|ZooKeeperRoutePolicy
specifier|public
class|class
name|ZooKeeperRoutePolicy
extends|extends
name|RoutePolicySupport
block|{
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
DECL|field|enabledCount
specifier|private
name|int
name|enabledCount
decl_stmt|;
DECL|field|candidateName
specifier|private
name|String
name|candidateName
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|electionComplete
specifier|private
specifier|final
name|CountDownLatch
name|electionComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|suspendedRoutes
specifier|private
name|Set
argument_list|<
name|Route
argument_list|>
name|suspendedRoutes
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Route
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|shouldProcessExchanges
specifier|private
name|AtomicBoolean
name|shouldProcessExchanges
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|template
specifier|private
name|ProducerTemplate
name|template
decl_stmt|;
DECL|field|shouldStopConsumer
specifier|private
name|boolean
name|shouldStopConsumer
init|=
literal|true
decl_stmt|;
DECL|field|uuidGenerator
specifier|private
name|UuidGenerator
name|uuidGenerator
init|=
operator|new
name|JavaUuidGenerator
argument_list|()
decl_stmt|;
DECL|field|isCandidateCreated
specifier|private
name|boolean
name|isCandidateCreated
decl_stmt|;
DECL|method|ZooKeeperRoutePolicy (String uri, int enabledCount)
specifier|public
name|ZooKeeperRoutePolicy
parameter_list|(
name|String
name|uri
parameter_list|,
name|int
name|enabledCount
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|enabledCount
operator|=
name|enabledCount
expr_stmt|;
name|createCandidateName
argument_list|()
expr_stmt|;
block|}
DECL|method|createCandidateName ()
specifier|private
name|void
name|createCandidateName
parameter_list|()
throws|throws
name|Exception
block|{
comment|/** UUID would be enough, also using hostname for human readability */
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|uuidGenerator
operator|.
name|generateUuid
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|candidateName
operator|=
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onExchangeBegin (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeBegin
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|testAndCreateCandidateNode
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|awaitElectionResults
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|shouldProcessExchanges
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|shouldStopConsumer
condition|)
block|{
name|stopConsumer
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
name|IllegalStateException
name|e
init|=
operator|new
name|IllegalStateException
argument_list|(
literal|"Zookeeper based route policy prohibits processing exchanges, stopping route and failing the exchange"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldStopConsumer
condition|)
block|{
name|startConsumer
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAndCreateCandidateNode (Route route)
specifier|private
name|void
name|testAndCreateCandidateNode
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isCandidateCreated
condition|)
block|{
name|createCandidateNode
argument_list|(
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|isCandidateCreated
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|awaitElectionResults ()
specifier|private
name|void
name|awaitElectionResults
parameter_list|()
block|{
while|while
condition|(
name|electionComplete
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|electionComplete
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{             }
block|}
block|}
DECL|method|startConsumer (Route route)
specifier|private
name|void
name|startConsumer
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|suspendedRoutes
operator|.
name|contains
argument_list|(
name|route
argument_list|)
condition|)
block|{
name|startConsumer
argument_list|(
name|route
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|suspendedRoutes
operator|.
name|remove
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopConsumer (Route route)
specifier|private
name|void
name|stopConsumer
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// check that we should still suspend once the lock is acquired
if|if
condition|(
operator|!
name|suspendedRoutes
operator|.
name|contains
argument_list|(
name|route
argument_list|)
operator|&&
operator|!
name|shouldProcessExchanges
operator|.
name|get
argument_list|()
condition|)
block|{
name|stopConsumer
argument_list|(
name|route
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|suspendedRoutes
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startAllStoppedConsumers ()
specifier|private
name|void
name|startAllStoppedConsumers
parameter_list|()
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|suspendedRoutes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"'%d' have been stopped previously by poilcy, restarting."
argument_list|,
name|suspendedRoutes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Route
name|suspended
range|:
name|suspendedRoutes
control|)
block|{
name|startConsumer
argument_list|(
name|suspended
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|suspendedRoutes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isShouldStopConsumer ()
specifier|public
name|boolean
name|isShouldStopConsumer
parameter_list|()
block|{
return|return
name|shouldStopConsumer
return|;
block|}
DECL|method|setShouldStopConsumer (boolean shouldStopConsumer)
specifier|public
name|void
name|setShouldStopConsumer
parameter_list|(
name|boolean
name|shouldStopConsumer
parameter_list|)
block|{
name|this
operator|.
name|shouldStopConsumer
operator|=
name|shouldStopConsumer
expr_stmt|;
block|}
DECL|method|createCandidateNode (CamelContext camelContext)
specifier|private
name|ZooKeeperEndpoint
name|createCandidateNode
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|template
operator|=
name|camelContext
operator|.
name|createProducerTemplate
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|format
argument_list|(
literal|"Initializing ZookeeperRoutePolicy with uri '%s'"
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ZooKeeperEndpoint
name|zep
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|,
name|ZooKeeperEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|zep
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setCreate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|fullpath
init|=
name|createFullPathToCandidate
argument_list|(
name|zep
argument_list|)
decl_stmt|;
name|Exchange
name|e
init|=
name|zep
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|e
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|ZooKeeperMessage
operator|.
name|ZOOKEEPER_NODE
argument_list|,
name|fullpath
argument_list|)
expr_stmt|;
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|ZooKeeperMessage
operator|.
name|ZOOKEEPER_CREATE_MODE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|zep
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error setting up election node "
operator|+
name|fullpath
argument_list|,
name|e
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|format
argument_list|(
literal|"Candidate node '%s' has been created"
argument_list|,
name|fullpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|zep
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|ElectoralMonitorRoute
argument_list|(
name|zep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error configuring ZookeeperRoutePolicy"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|zep
return|;
block|}
DECL|method|createFullPathToCandidate (ZooKeeperEndpoint zep)
specifier|private
name|String
name|createFullPathToCandidate
parameter_list|(
name|ZooKeeperEndpoint
name|zep
parameter_list|)
block|{
name|String
name|fullpath
init|=
name|zep
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fullpath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fullpath
operator|+=
literal|"/"
expr_stmt|;
block|}
name|fullpath
operator|+=
name|candidateName
expr_stmt|;
return|return
name|fullpath
return|;
block|}
DECL|class|ElectoralMonitorRoute
specifier|private
class|class
name|ElectoralMonitorRoute
extends|extends
name|RouteBuilder
block|{
DECL|field|comparator
specifier|private
name|SequenceComparator
name|comparator
init|=
operator|new
name|SequenceComparator
argument_list|()
decl_stmt|;
DECL|field|zep
specifier|private
name|ZooKeeperEndpoint
name|zep
decl_stmt|;
DECL|method|ElectoralMonitorRoute (ZooKeeperEndpoint zep)
specifier|public
name|ElectoralMonitorRoute
parameter_list|(
name|ZooKeeperEndpoint
name|zep
parameter_list|)
block|{
name|this
operator|.
name|zep
operator|=
name|zep
expr_stmt|;
name|zep
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setListChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|zep
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**              * TODO: this is cheap cheerful but suboptimal; it suffers from the              * 'herd effect' that on any change to the candidates list every              * policy instance will ask for the entire candidate list again.              * This is fine for small numbers of nodes (for scenarios              * like Master-Slave it is perfect) but could get noisy if              * large numbers of nodes were involved.              *<p>              * Better would be to find the position of this node in the list and              * watch the node in the position ahead node ahead of this and only              * request the candidate list when its status changes. This will              * require enhancing the consumer to allow custom operation lists.              */
name|from
argument_list|(
name|zep
argument_list|)
operator|.
name|sort
argument_list|(
name|body
argument_list|()
argument_list|,
name|comparator
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|e
parameter_list|)
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|candidates
init|=
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|location
init|=
name|Math
operator|.
name|abs
argument_list|(
name|Collections
operator|.
name|binarySearch
argument_list|(
name|candidates
argument_list|,
name|candidateName
argument_list|)
argument_list|)
decl_stmt|;
comment|/**                      * check if the item at this location starts with this nodes                      * candidate name                      */
if|if
condition|(
name|isOurCandidateAtLocationInCandidatesList
argument_list|(
name|candidates
argument_list|,
name|location
argument_list|)
condition|)
block|{
name|shouldProcessExchanges
operator|.
name|set
argument_list|(
name|location
operator|<=
name|enabledCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"This node is number '%d' on the candidate list, route is configured for the top '%d'. Exchange processing will be %s"
argument_list|,
name|location
argument_list|,
name|enabledCount
argument_list|,
name|shouldProcessExchanges
operator|.
name|get
argument_list|()
condition|?
literal|"enabled"
else|:
literal|"disabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|startAllStoppedConsumers
argument_list|()
expr_stmt|;
block|}
name|electionComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isOurCandidateAtLocationInCandidatesList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|,
name|int
name|location
parameter_list|)
block|{
return|return
name|location
operator|<=
name|candidates
operator|.
name|size
argument_list|()
operator|&&
name|candidates
operator|.
name|get
argument_list|(
name|location
operator|-
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
name|candidateName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

