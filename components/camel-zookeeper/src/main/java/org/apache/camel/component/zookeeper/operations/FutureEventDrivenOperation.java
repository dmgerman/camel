begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.operations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_comment
comment|/**  *<code>FutureEventDrivenOperation</code> uses ZooKeepers {@link Watcher}  * mechanism to await specific ZooKeeper events. Typically this is used to await  * changes to a particular node before retrieving the change.  */
end_comment

begin_class
DECL|class|FutureEventDrivenOperation
specifier|public
specifier|abstract
class|class
name|FutureEventDrivenOperation
parameter_list|<
name|ResultType
parameter_list|>
extends|extends
name|ZooKeeperOperation
argument_list|<
name|ResultType
argument_list|>
implements|implements
name|Watcher
implements|,
name|WatchedEventProvider
block|{
DECL|field|awaitedTypes
specifier|private
name|EventType
index|[]
name|awaitedTypes
decl_stmt|;
DECL|field|waitForAnyWatchedType
specifier|private
name|CountDownLatch
name|waitForAnyWatchedType
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|event
specifier|private
name|WatchedEvent
name|event
decl_stmt|;
DECL|method|FutureEventDrivenOperation (ZooKeeper connection, String node, EventType... awaitedTypes)
specifier|public
name|FutureEventDrivenOperation
parameter_list|(
name|ZooKeeper
name|connection
parameter_list|,
name|String
name|node
parameter_list|,
name|EventType
modifier|...
name|awaitedTypes
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|awaitedTypes
operator|=
name|awaitedTypes
expr_stmt|;
block|}
DECL|method|process (WatchedEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
name|EventType
name|received
init|=
name|event
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"Recieved event of type %s for node '%s'"
argument_list|,
name|received
argument_list|,
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventType
name|watched
range|:
name|awaitedTypes
control|)
block|{
if|if
condition|(
name|watched
operator|.
name|equals
argument_list|(
name|received
argument_list|)
condition|)
block|{
name|result
operator|=
name|getResult
argument_list|()
expr_stmt|;
name|waitForAnyWatchedType
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|waitForAnyWatchedType
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|EventType
name|type
range|:
name|awaitedTypes
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|setLength
argument_list|(
name|b
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Recieved event of type %s did not match any watched types %s"
argument_list|,
name|received
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|awaitedTypes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|get ()
specifier|public
name|OperationResult
argument_list|<
name|ResultType
argument_list|>
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|installWatch
argument_list|()
expr_stmt|;
name|waitingThreads
operator|.
name|add
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|waitForAnyWatchedType
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|OperationResult
argument_list|<
name|ResultType
argument_list|>
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|installWatch
argument_list|()
expr_stmt|;
name|waitingThreads
operator|.
name|add
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|waitForAnyWatchedType
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Install the watcher to receive {@link WatchedEvent}s. It should use the      * appropriate asynchronous ZooKeeper call to do this so as not to block the      * route from starting. Once one of the watched for types of event is      * received a call is made to getResult, which can use the appropriate      * synchronous call to retrieve the actual data.      */
DECL|method|installWatch ()
specifier|protected
specifier|abstract
name|void
name|installWatch
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getWatchedEvent ()
specifier|public
name|WatchedEvent
name|getWatchedEvent
parameter_list|()
block|{
return|return
name|event
return|;
block|}
DECL|method|getWatchedForTypes ()
specifier|public
name|EventType
index|[]
name|getWatchedForTypes
parameter_list|()
block|{
return|return
name|awaitedTypes
return|;
block|}
block|}
end_class

end_unit

