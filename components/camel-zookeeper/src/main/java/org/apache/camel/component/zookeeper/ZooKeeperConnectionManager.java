begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_comment
comment|/**  *<code>ZookeeperConnectionManager</code> is a simple class to manage  * {@link ZooKeeper} connections.  */
end_comment

begin_class
DECL|class|ZooKeeperConnectionManager
specifier|public
class|class
name|ZooKeeperConnectionManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZooKeeperConnectionManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|strategy
specifier|private
name|ZookeeperConnectionStrategy
name|strategy
decl_stmt|;
DECL|method|ZooKeeperConnectionManager (ZooKeeperEndpoint endpoint)
specifier|public
name|ZooKeeperConnectionManager
parameter_list|(
name|ZooKeeperEndpoint
name|endpoint
parameter_list|)
block|{
name|strategy
operator|=
operator|new
name|DefaultZookeeperConnectionStrategy
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnection ()
specifier|public
name|ZooKeeper
name|getConnection
parameter_list|()
block|{
return|return
name|strategy
operator|.
name|getConnection
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
return|;
block|}
DECL|interface|ZookeeperConnectionStrategy
specifier|private
interface|interface
name|ZookeeperConnectionStrategy
block|{
DECL|method|getConnection ()
name|ConnectionHolder
name|getConnection
parameter_list|()
function_decl|;
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
function_decl|;
block|}
DECL|class|DefaultZookeeperConnectionStrategy
specifier|private
class|class
name|DefaultZookeeperConnectionStrategy
implements|implements
name|ZookeeperConnectionStrategy
block|{
DECL|field|holder
specifier|private
name|ConnectionHolder
name|holder
decl_stmt|;
DECL|field|configuration
specifier|private
name|ZooKeeperConfiguration
name|configuration
decl_stmt|;
DECL|method|DefaultZookeeperConnectionStrategy (ZooKeeperEndpoint endpoint)
specifier|public
name|DefaultZookeeperConnectionStrategy
parameter_list|(
name|ZooKeeperEndpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Creating connection with static configuration of %s"
argument_list|,
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|holder
operator|=
operator|new
name|ConnectionHolder
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnection ()
specifier|public
name|ConnectionHolder
name|getConnection
parameter_list|()
block|{
return|return
name|holder
return|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|holder
operator|.
name|closeConnection
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|strategy
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

