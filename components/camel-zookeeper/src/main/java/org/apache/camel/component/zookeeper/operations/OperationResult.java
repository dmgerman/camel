begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.operations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  *<code>OperationResult</code> is used to ecapsulate the results of executing a  * {@link ZooKeeperOperation}  */
end_comment

begin_class
DECL|class|OperationResult
specifier|public
class|class
name|OperationResult
parameter_list|<
name|ResultType
parameter_list|>
block|{
DECL|field|statistics
specifier|private
name|Stat
name|statistics
decl_stmt|;
DECL|field|result
specifier|private
name|ResultType
name|result
decl_stmt|;
DECL|field|exception
specifier|private
name|Exception
name|exception
decl_stmt|;
DECL|field|ok
specifier|private
name|boolean
name|ok
decl_stmt|;
DECL|method|OperationResult (ResultType result, Stat statistics)
specifier|public
name|OperationResult
parameter_list|(
name|ResultType
name|result
parameter_list|,
name|Stat
name|statistics
parameter_list|)
block|{
name|this
argument_list|(
name|result
argument_list|,
name|statistics
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|OperationResult (ResultType result, Stat statistics, boolean ok)
specifier|public
name|OperationResult
parameter_list|(
name|ResultType
name|result
parameter_list|,
name|Stat
name|statistics
parameter_list|,
name|boolean
name|ok
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|statistics
operator|=
name|statistics
expr_stmt|;
name|this
operator|.
name|ok
operator|=
name|ok
expr_stmt|;
block|}
DECL|method|OperationResult (Exception exception)
specifier|public
name|OperationResult
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getException ()
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
DECL|method|getStatistics ()
specifier|public
name|Stat
name|getStatistics
parameter_list|()
block|{
return|return
name|statistics
return|;
block|}
DECL|method|getResult ()
specifier|public
name|ResultType
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
DECL|method|isOk ()
specifier|public
name|boolean
name|isOk
parameter_list|()
block|{
return|return
name|ok
return|;
block|}
DECL|method|failedDueTo (Code... codes)
specifier|public
name|boolean
name|failedDueTo
parameter_list|(
name|Code
modifier|...
name|codes
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|KeeperException
condition|)
block|{
for|for
control|(
name|Code
name|code
range|:
name|codes
control|)
block|{
if|if
condition|(
name|code
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|KeeperException
operator|)
name|exception
operator|)
operator|.
name|code
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

