begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.operations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|ZooKeeperUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_comment
comment|/**  *<code>AnyOfOperations</code> is a composite operation of one or more sub  * operation, executing each in turn until any one succeeds. If any execute  * successfully, this operation succeeds; if the sub operations are all executed  * without success it fails.  *<p>  * It is mostly used for test and watch scenarios where a node is tested for  * existence, data or children, falling back to a corresponding watch operation  * if the test operation fails.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|AnyOfOperations
specifier|public
class|class
name|AnyOfOperations
extends|extends
name|ZooKeeperOperation
implements|implements
name|WatchedEventProvider
block|{
DECL|field|keeperOperations
specifier|private
name|ZooKeeperOperation
index|[]
name|keeperOperations
decl_stmt|;
DECL|field|operationProvidingResult
specifier|private
name|ZooKeeperOperation
name|operationProvidingResult
decl_stmt|;
DECL|method|AnyOfOperations (String node, ZooKeeperOperation... keeperOperations)
specifier|public
name|AnyOfOperations
parameter_list|(
name|String
name|node
parameter_list|,
name|ZooKeeperOperation
modifier|...
name|keeperOperations
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|keeperOperations
operator|=
name|keeperOperations
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|OperationResult
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
for|for
control|(
name|ZooKeeperOperation
name|op
range|:
name|keeperOperations
control|)
block|{
try|try
block|{
name|OperationResult
name|result
init|=
name|op
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isOk
argument_list|()
condition|)
block|{
name|operationProvidingResult
operator|=
name|op
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
throw|throw
operator|new
name|ExecutionException
argument_list|(
literal|"All operations exhausted without one result"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|OperationResult
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
return|return
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
specifier|public
name|OperationResult
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createCopy ()
specifier|public
name|ZooKeeperOperation
name|createCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|ZooKeeperOperation
index|[]
name|copy
init|=
operator|new
name|ZooKeeperOperation
index|[
name|keeperOperations
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|keeperOperations
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|copy
index|[
name|x
index|]
operator|=
name|keeperOperations
index|[
name|x
index|]
operator|.
name|createCopy
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|AnyOfOperations
argument_list|(
name|node
argument_list|,
name|copy
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWatchedEvent ()
specifier|public
name|WatchedEvent
name|getWatchedEvent
parameter_list|()
block|{
return|return
name|ZooKeeperUtils
operator|.
name|getWatchedEvent
argument_list|(
name|operationProvidingResult
argument_list|)
return|;
block|}
block|}
end_class

end_unit

