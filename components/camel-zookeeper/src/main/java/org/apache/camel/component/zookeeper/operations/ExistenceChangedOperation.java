begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.operations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|AsyncCallback
operator|.
name|StatCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  *<code>DataChangedOperation</code> is an watch driven operation. It will wait  * for an watched event indicating that a given node has been created or  * deleted.  */
end_comment

begin_class
DECL|class|ExistenceChangedOperation
specifier|public
class|class
name|ExistenceChangedOperation
extends|extends
name|FutureEventDrivenOperation
argument_list|<
name|String
argument_list|>
block|{
DECL|method|ExistenceChangedOperation (ZooKeeper connection, String znode)
specifier|public
name|ExistenceChangedOperation
parameter_list|(
name|ZooKeeper
name|connection
parameter_list|,
name|String
name|znode
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|znode
argument_list|,
name|EventType
operator|.
name|NodeCreated
argument_list|,
name|EventType
operator|.
name|NodeDeleted
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|installWatch ()
specifier|protected
name|void
name|installWatch
parameter_list|()
block|{
name|connection
operator|.
name|exists
argument_list|(
name|getNode
argument_list|()
argument_list|,
name|this
argument_list|,
operator|new
name|StatCallback
argument_list|()
block|{
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|Stat
name|stat
parameter_list|)
block|{             }
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Installed exists watch"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getResult ()
specifier|public
name|OperationResult
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
block|{
try|try
block|{
name|String
name|path
init|=
name|getNode
argument_list|()
decl_stmt|;
name|Stat
name|statistics
init|=
name|connection
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|OperationResult
argument_list|<>
argument_list|(
name|path
argument_list|,
name|statistics
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|new
name|OperationResult
argument_list|<>
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

