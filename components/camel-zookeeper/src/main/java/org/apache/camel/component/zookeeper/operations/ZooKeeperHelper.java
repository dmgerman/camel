begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.operations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|operations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|common
operator|.
name|PathUtils
import|;
end_import

begin_class
DECL|class|ZooKeeperHelper
specifier|public
specifier|final
class|class
name|ZooKeeperHelper
block|{
DECL|method|ZooKeeperHelper ()
specifier|private
name|ZooKeeperHelper
parameter_list|()
block|{     }
DECL|method|mkdirs (ZooKeeper zookeeper, String path, boolean makeLastNode, CreateMode createMode)
specifier|public
specifier|static
name|void
name|mkdirs
parameter_list|(
name|ZooKeeper
name|zookeeper
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|makeLastNode
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|Exception
block|{
name|PathUtils
operator|.
name|validatePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
literal|1
decl_stmt|;
comment|// skip first slash, root is guaranteed to exist
do|do
block|{
name|pos
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|makeLastNode
condition|)
block|{
name|pos
operator|=
name|path
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|String
name|subPath
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|zookeeper
operator|.
name|exists
argument_list|(
name|subPath
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|zookeeper
operator|.
name|create
argument_list|(
name|subPath
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|createMode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
comment|// ignore... someone else has created it since we checked
block|}
block|}
block|}
do|while
condition|(
name|pos
operator|<
name|path
operator|.
name|length
argument_list|()
condition|)
do|;
block|}
block|}
end_class

end_unit

