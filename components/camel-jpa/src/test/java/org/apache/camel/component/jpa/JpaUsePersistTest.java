begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jpa
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PersistenceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|examples
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|JpaUsePersistTest
specifier|public
class|class
name|JpaUsePersistTest
extends|extends
name|AbstractJpaMethodTest
block|{
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|usePersist ()
specifier|public
name|boolean
name|usePersist
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Test
DECL|method|produceExistingEntityShouldThrowAnException ()
specifier|public
name|void
name|produceExistingEntityShouldThrowAnException
parameter_list|()
throws|throws
name|Exception
block|{
name|setUp
argument_list|(
literal|"jpa://"
operator|+
name|Order
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"?usePersist=true"
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
name|createOrder
argument_list|()
decl_stmt|;
name|save
argument_list|(
name|order
argument_list|)
expr_stmt|;
comment|// and adjust some values
name|order
operator|=
name|createOrder
argument_list|()
expr_stmt|;
name|order
operator|.
name|setProductName
argument_list|(
literal|"Cheese"
argument_list|)
expr_stmt|;
name|order
operator|.
name|setProductSku
argument_list|(
literal|"54321"
argument_list|)
expr_stmt|;
name|order
operator|.
name|setQuantity
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// we cannot store the 2nd order as its using the same id as the 1st
name|expectedException
operator|.
name|expectCause
argument_list|(
name|CoreMatchers
operator|.
name|instanceOf
argument_list|(
name|PersistenceException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpoint
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|assertEntitiesInDatabase
argument_list|(
literal|1
argument_list|,
name|Order
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createOrder ()
specifier|private
name|Order
name|createOrder
parameter_list|()
block|{
name|Order
name|order
init|=
operator|new
name|Order
argument_list|()
decl_stmt|;
name|order
operator|.
name|setId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|order
operator|.
name|setProductName
argument_list|(
literal|"Beer"
argument_list|)
expr_stmt|;
name|order
operator|.
name|setProductSku
argument_list|(
literal|"12345"
argument_list|)
expr_stmt|;
name|order
operator|.
name|setQuantity
argument_list|(
literal|5
argument_list|)
expr_stmt|;
return|return
name|order
return|;
block|}
block|}
end_class

end_unit

