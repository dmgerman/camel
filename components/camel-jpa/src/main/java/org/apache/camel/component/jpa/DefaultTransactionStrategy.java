begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jpa
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|JpaCallback
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultTransactionStrategy
specifier|public
class|class
name|DefaultTransactionStrategy
extends|extends
name|ServiceSupport
implements|implements
name|TransactionStrategy
block|{
DECL|field|entityManagerFactory
specifier|private
name|EntityManagerFactory
name|entityManagerFactory
decl_stmt|;
DECL|field|entityManager
specifier|private
name|EntityManager
name|entityManager
decl_stmt|;
DECL|method|DefaultTransactionStrategy (EntityManagerFactory entityManagerFactory)
specifier|public
name|DefaultTransactionStrategy
parameter_list|(
name|EntityManagerFactory
name|entityManagerFactory
parameter_list|)
block|{
name|notNull
argument_list|(
name|entityManagerFactory
argument_list|,
literal|"entityManagerFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|entityManagerFactory
operator|=
name|entityManagerFactory
expr_stmt|;
block|}
DECL|method|DefaultTransactionStrategy (EntityManager entityManager)
specifier|public
name|DefaultTransactionStrategy
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|)
block|{
name|notNull
argument_list|(
name|entityManager
argument_list|,
literal|"entityManager"
argument_list|)
expr_stmt|;
name|this
operator|.
name|entityManager
operator|=
name|entityManager
expr_stmt|;
block|}
DECL|method|execute (JpaCallback callback)
specifier|public
name|Object
name|execute
parameter_list|(
name|JpaCallback
name|callback
parameter_list|)
block|{
name|EntityManager
name|em
init|=
name|getEntityManager
argument_list|()
decl_stmt|;
name|EntityTransaction
name|transaction
init|=
name|em
operator|.
name|getTransaction
argument_list|()
decl_stmt|;
name|transaction
operator|.
name|begin
argument_list|()
expr_stmt|;
try|try
block|{
name|Object
name|answer
init|=
name|callback
operator|.
name|doInJpa
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
condition|)
block|{
name|transaction
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getEntityManager ()
specifier|public
name|EntityManager
name|getEntityManager
parameter_list|()
block|{
if|if
condition|(
name|entityManager
operator|==
literal|null
condition|)
block|{
name|entityManager
operator|=
name|entityManagerFactory
operator|.
name|createEntityManager
argument_list|()
expr_stmt|;
block|}
return|return
name|entityManager
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force lazy construction
name|getEntityManager
argument_list|()
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|entityManager
operator|!=
literal|null
condition|)
block|{
name|entityManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

