begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jpa
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * A builder of query expressions  *   * @version   */
end_comment

begin_class
DECL|class|QueryBuilder
specifier|public
specifier|abstract
class|class
name|QueryBuilder
implements|implements
name|QueryFactory
block|{
DECL|field|parameterBuilder
name|ParameterBuilder
name|parameterBuilder
decl_stmt|;
comment|/**      * Creates a query builder using the JPA query syntax      *       * @param query JPA query language to create      * @return a query builder      */
DECL|method|query (final String query)
specifier|public
specifier|static
name|QueryBuilder
name|query
parameter_list|(
specifier|final
name|String
name|query
parameter_list|)
block|{
return|return
operator|new
name|QueryBuilder
argument_list|()
block|{
specifier|protected
name|Query
name|makeQueryObject
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|)
block|{
return|return
name|entityManager
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Query: "
operator|+
name|query
operator|+
name|getParameterDescription
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**      * Creates a named query      */
DECL|method|namedQuery (final String namedQuery)
specifier|public
specifier|static
name|QueryBuilder
name|namedQuery
parameter_list|(
specifier|final
name|String
name|namedQuery
parameter_list|)
block|{
return|return
operator|new
name|QueryBuilder
argument_list|()
block|{
specifier|protected
name|Query
name|makeQueryObject
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|)
block|{
return|return
name|entityManager
operator|.
name|createNamedQuery
argument_list|(
name|namedQuery
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Named: "
operator|+
name|namedQuery
operator|+
name|getParameterDescription
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**      * Creates a native SQL query      */
DECL|method|nativeQuery (final String nativeQuery)
specifier|public
specifier|static
name|QueryBuilder
name|nativeQuery
parameter_list|(
specifier|final
name|String
name|nativeQuery
parameter_list|)
block|{
return|return
operator|new
name|QueryBuilder
argument_list|()
block|{
specifier|protected
name|Query
name|makeQueryObject
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|)
block|{
return|return
name|entityManager
operator|.
name|createNativeQuery
argument_list|(
name|nativeQuery
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NativeQuery: "
operator|+
name|nativeQuery
operator|+
name|getParameterDescription
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**      * Creates a native SQL query with a provided resultClass      */
DECL|method|nativeQuery (final String nativeQuery, final Class<?> resultClass)
specifier|public
specifier|static
name|QueryBuilder
name|nativeQuery
parameter_list|(
specifier|final
name|String
name|nativeQuery
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|resultClass
parameter_list|)
block|{
return|return
operator|new
name|QueryBuilder
argument_list|()
block|{
specifier|protected
name|Query
name|makeQueryObject
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|)
block|{
return|return
name|entityManager
operator|.
name|createNativeQuery
argument_list|(
name|nativeQuery
argument_list|,
name|resultClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NativeQuery: "
operator|+
name|nativeQuery
operator|+
literal|" resultClass:"
operator|+
name|resultClass
operator|+
name|getParameterDescription
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**      * Specifies the parameters to the query      *       * @param parameters the parameters to be configured on the query      * @return this query builder      */
DECL|method|parameters (Object... parameters)
specifier|public
name|QueryBuilder
name|parameters
parameter_list|(
name|Object
modifier|...
name|parameters
parameter_list|)
block|{
return|return
name|parameters
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parameters
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Specifies the parameters to the query as an ordered collection of      * parameters      *       * @param parameters the parameters to be configured on the query      * @return this query builder      */
DECL|method|parameters (final Collection<?> parameters)
specifier|public
name|QueryBuilder
name|parameters
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|parameters
parameter_list|)
block|{
name|checkNoParametersConfigured
argument_list|()
expr_stmt|;
name|parameterBuilder
operator|=
operator|new
name|ParameterBuilder
argument_list|()
block|{
specifier|public
name|void
name|populateQuery
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|parameter
range|:
name|parameters
control|)
block|{
name|query
operator|.
name|setParameter
argument_list|(
name|counter
operator|++
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Parameters: "
operator|+
name|parameters
return|;
block|}
block|}
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specifies the parameters to the query as a Map of key/value pairs      *       * @param parameterMap the parameters to be configured on the query      * @return this query builder      */
DECL|method|parameters (final Map<String, Object> parameterMap)
specifier|public
name|QueryBuilder
name|parameters
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameterMap
parameter_list|)
block|{
name|checkNoParametersConfigured
argument_list|()
expr_stmt|;
name|parameterBuilder
operator|=
operator|new
name|ParameterBuilder
argument_list|()
block|{
specifier|public
name|void
name|populateQuery
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
init|=
name|parameterMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|query
operator|.
name|setParameter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Parameters: "
operator|+
name|parameterMap
return|;
block|}
block|}
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|checkNoParametersConfigured ()
specifier|protected
name|void
name|checkNoParametersConfigured
parameter_list|()
block|{
if|if
condition|(
name|parameterBuilder
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add parameters to a QueryBuilder which already has parameters configured"
argument_list|)
throw|;
block|}
block|}
DECL|method|createQuery (EntityManager entityManager)
specifier|public
name|Query
name|createQuery
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|)
block|{
name|Query
name|query
init|=
name|makeQueryObject
argument_list|(
name|entityManager
argument_list|)
decl_stmt|;
name|populateQuery
argument_list|(
name|entityManager
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
DECL|method|getParameterDescription ()
specifier|protected
name|String
name|getParameterDescription
parameter_list|()
block|{
if|if
condition|(
name|parameterBuilder
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
literal|" "
operator|+
name|parameterBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|populateQuery (EntityManager entityManager, Query query)
specifier|protected
name|void
name|populateQuery
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|parameterBuilder
operator|!=
literal|null
condition|)
block|{
name|parameterBuilder
operator|.
name|populateQuery
argument_list|(
name|entityManager
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeQueryObject (EntityManager entityManager)
specifier|protected
specifier|abstract
name|Query
name|makeQueryObject
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|)
function_decl|;
comment|/**      * A plugin strategy to populate the query with parameters      */
DECL|class|ParameterBuilder
specifier|protected
specifier|abstract
specifier|static
class|class
name|ParameterBuilder
block|{
DECL|method|populateQuery (EntityManager entityManager, Query query)
specifier|public
specifier|abstract
name|void
name|populateQuery
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|,
name|Query
name|query
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

