begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.protobuf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|util
operator|.
name|JsonFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Dataformat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_class
annotation|@
name|Dataformat
argument_list|(
literal|"protobuf"
argument_list|)
DECL|class|ProtobufDataFormat
specifier|public
class|class
name|ProtobufDataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
implements|,
name|CamelContextAware
block|{
DECL|field|CONTENT_TYPE_FORMAT_NATIVE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_FORMAT_NATIVE
init|=
literal|"native"
decl_stmt|;
DECL|field|CONTENT_TYPE_FORMAT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_FORMAT_JSON
init|=
literal|"json"
decl_stmt|;
DECL|field|CONTENT_TYPE_HEADER_NATIVE
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_HEADER_NATIVE
init|=
literal|"application/octet-stream"
decl_stmt|;
DECL|field|CONTENT_TYPE_HEADER_JSON
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_HEADER_JSON
init|=
literal|"application/json"
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|defaultInstance
specifier|private
name|Message
name|defaultInstance
decl_stmt|;
DECL|field|instanceClassName
specifier|private
name|String
name|instanceClassName
decl_stmt|;
DECL|field|contentTypeHeader
specifier|private
name|boolean
name|contentTypeHeader
decl_stmt|;
DECL|field|contentTypeFormat
specifier|private
name|String
name|contentTypeFormat
init|=
name|CONTENT_TYPE_FORMAT_NATIVE
decl_stmt|;
DECL|method|ProtobufDataFormat ()
specifier|public
name|ProtobufDataFormat
parameter_list|()
block|{     }
DECL|method|ProtobufDataFormat (Message defaultInstance)
specifier|public
name|ProtobufDataFormat
parameter_list|(
name|Message
name|defaultInstance
parameter_list|)
block|{
name|this
operator|.
name|defaultInstance
operator|=
name|defaultInstance
expr_stmt|;
block|}
DECL|method|ProtobufDataFormat (Message defaultInstance, String contentTypeFormat)
specifier|public
name|ProtobufDataFormat
parameter_list|(
name|Message
name|defaultInstance
parameter_list|,
name|String
name|contentTypeFormat
parameter_list|)
block|{
name|this
operator|.
name|defaultInstance
operator|=
name|defaultInstance
expr_stmt|;
name|this
operator|.
name|contentTypeFormat
operator|=
name|contentTypeFormat
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"protobuf"
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|setDefaultInstance (Message instance)
specifier|public
name|void
name|setDefaultInstance
parameter_list|(
name|Message
name|instance
parameter_list|)
block|{
name|this
operator|.
name|defaultInstance
operator|=
name|instance
expr_stmt|;
block|}
DECL|method|setDefaultInstance (Object instance)
specifier|public
name|void
name|setDefaultInstance
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
if|if
condition|(
name|instance
operator|instanceof
name|Message
condition|)
block|{
name|this
operator|.
name|defaultInstance
operator|=
operator|(
name|Message
operator|)
name|instance
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The argument for setDefaultInstance should be subClass of com.google.protobuf.Message"
argument_list|)
throw|;
block|}
block|}
DECL|method|setInstanceClass (String className)
specifier|public
name|void
name|setInstanceClass
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|className
argument_list|,
literal|"ProtobufDataFormat instaceClass"
argument_list|)
expr_stmt|;
name|instanceClassName
operator|=
name|className
expr_stmt|;
block|}
DECL|method|setContentTypeHeader (boolean contentTypeHeader)
specifier|public
name|void
name|setContentTypeHeader
parameter_list|(
name|boolean
name|contentTypeHeader
parameter_list|)
block|{
name|this
operator|.
name|contentTypeHeader
operator|=
name|contentTypeHeader
expr_stmt|;
block|}
DECL|method|isContentTypeHeader ()
specifier|public
name|boolean
name|isContentTypeHeader
parameter_list|()
block|{
return|return
name|contentTypeHeader
return|;
block|}
comment|/*      * Defines a content type format in which protobuf message will be      * serialized/deserialized from(to) the Java been. It can be native protobuf      * format or json fields representation. The default value is 'native'.      */
DECL|method|setContentTypeFormat (String contentTypeFormat)
specifier|public
name|void
name|setContentTypeFormat
parameter_list|(
name|String
name|contentTypeFormat
parameter_list|)
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|contentTypeFormat
argument_list|,
literal|"ProtobufDataFormat contentTypeFormat"
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentTypeFormat
operator|=
name|contentTypeFormat
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.camel.spi.DataFormat#marshal(org.apache.camel.Exchange,      * java.lang.Object, java.io.OutputStream)      */
annotation|@
name|Override
DECL|method|marshal (final Exchange exchange, final Object graph, final OutputStream outputStream)
specifier|public
name|void
name|marshal
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Object
name|graph
parameter_list|,
specifier|final
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Message
name|inputMessage
init|=
name|convertGraphToMessage
argument_list|(
name|exchange
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|String
name|contentTypeHeader
init|=
name|CONTENT_TYPE_HEADER_NATIVE
decl_stmt|;
if|if
condition|(
name|contentTypeFormat
operator|.
name|equals
argument_list|(
name|CONTENT_TYPE_FORMAT_JSON
argument_list|)
condition|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|JsonFormat
operator|.
name|printer
argument_list|()
operator|.
name|print
argument_list|(
name|inputMessage
argument_list|)
argument_list|,
name|outputStream
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|contentTypeHeader
operator|=
name|CONTENT_TYPE_HEADER_JSON
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contentTypeFormat
operator|.
name|equals
argument_list|(
name|CONTENT_TYPE_FORMAT_NATIVE
argument_list|)
condition|)
block|{
name|inputMessage
operator|.
name|writeTo
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Invalid protobuf content type format: "
operator|+
name|contentTypeFormat
argument_list|)
throw|;
block|}
if|if
condition|(
name|isContentTypeHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentTypeHeader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentTypeHeader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|convertGraphToMessage (final Exchange exchange, final Object inputData)
specifier|private
name|Message
name|convertGraphToMessage
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Object
name|inputData
parameter_list|)
throws|throws
name|NoTypeConversionAvailableException
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|messageInMap
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|inputData
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageInMap
operator|!=
literal|null
condition|)
block|{
comment|//final ProtobufConverter protobufConverter = ProtobufConverter.create(defaultInstance);
return|return
name|ProtobufConverter
operator|.
name|toProto
argument_list|(
name|messageInMap
argument_list|,
name|defaultInstance
argument_list|)
return|;
block|}
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|Message
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|inputData
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.camel.spi.DataFormat#unmarshal(org.apache.camel.Exchange,      * java.io.InputStream)      */
annotation|@
name|Override
DECL|method|unmarshal (final Exchange exchange, final InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|defaultInstance
argument_list|,
literal|"defaultInstance or instanceClassName must be set"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Builder
name|builder
init|=
name|defaultInstance
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentTypeFormat
operator|.
name|equals
argument_list|(
name|CONTENT_TYPE_FORMAT_JSON
argument_list|)
condition|)
block|{
name|JsonFormat
operator|.
name|parser
argument_list|()
operator|.
name|ignoringUnknownFields
argument_list|()
operator|.
name|merge
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contentTypeFormat
operator|.
name|equals
argument_list|(
name|CONTENT_TYPE_FORMAT_NATIVE
argument_list|)
condition|)
block|{
name|builder
operator|=
name|defaultInstance
operator|.
name|newBuilderForType
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Invalid protobuf content type format: "
operator|+
name|contentTypeFormat
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|builder
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
comment|// TODO which exception should be thrown here?
throw|throw
operator|new
name|InvalidPayloadException
argument_list|(
name|exchange
argument_list|,
name|defaultInstance
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|loadDefaultInstance (final String className, final CamelContext context)
specifier|protected
name|Message
name|loadDefaultInstance
parameter_list|(
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|CamelContext
name|context
parameter_list|)
throws|throws
name|CamelException
throws|,
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|instanceClass
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|Message
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|instanceClass
argument_list|)
condition|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|instanceClass
operator|.
name|getMethod
argument_list|(
literal|"getDefaultInstance"
argument_list|)
decl_stmt|;
return|return
operator|(
name|Message
operator|)
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Can't set the defaultInstance of ProtobufferDataFormat with "
operator|+
name|className
operator|+
literal|", caused by "
operator|+
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Can't set the defaultInstance of ProtobufferDataFormat with "
operator|+
name|className
operator|+
literal|", as the class is not a subClass of com.google.protobuf.Message"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|defaultInstance
operator|==
literal|null
operator|&&
name|instanceClassName
operator|!=
literal|null
condition|)
block|{
name|defaultInstance
operator|=
name|loadDefaultInstance
argument_list|(
name|instanceClassName
argument_list|,
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

