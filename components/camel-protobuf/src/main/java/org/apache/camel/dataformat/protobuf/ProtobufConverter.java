begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.protobuf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumValueDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|ProtobufConverter
specifier|public
specifier|final
class|class
name|ProtobufConverter
block|{
DECL|method|ProtobufConverter ()
specifier|private
name|ProtobufConverter
parameter_list|()
block|{     }
DECL|method|toProto (final Map<?, ?> inputData, final Message defaultInstance)
specifier|public
specifier|static
name|Message
name|toProto
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inputData
parameter_list|,
specifier|final
name|Message
name|defaultInstance
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|inputData
argument_list|,
literal|"inputData"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|defaultInstance
argument_list|,
literal|"defaultInstance"
argument_list|)
expr_stmt|;
specifier|final
name|Descriptor
name|descriptor
init|=
name|defaultInstance
operator|.
name|getDescriptorForType
argument_list|()
decl_stmt|;
specifier|final
name|Builder
name|target
init|=
name|defaultInstance
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
return|return
name|convertMapToMessage
argument_list|(
name|descriptor
argument_list|,
name|target
argument_list|,
name|inputData
argument_list|)
return|;
block|}
DECL|method|convertMapToMessage (final Descriptor descriptor, final Builder builder, final Map<?, ?> inputData)
specifier|private
specifier|static
name|Message
name|convertMapToMessage
parameter_list|(
specifier|final
name|Descriptor
name|descriptor
parameter_list|,
specifier|final
name|Builder
name|builder
parameter_list|,
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inputData
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|descriptor
argument_list|,
literal|"descriptor"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|builder
argument_list|,
literal|"builder"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|inputData
argument_list|,
literal|"inputData"
argument_list|)
expr_stmt|;
comment|// we set our values from map to descriptor
name|inputData
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
specifier|final
name|FieldDescriptor
name|fieldDescriptor
init|=
name|descriptor
operator|.
name|findFieldByName
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// if we don't find our desired fieldDescriptor, we just ignore it
if|if
condition|(
name|fieldDescriptor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldDescriptor
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|repeatedValues
init|=
name|castValue
argument_list|(
name|value
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Not able to cast value to list, make sure you have a list for the repeated field '%s'"
argument_list|,
name|fieldDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|repeatedValues
operator|.
name|forEach
argument_list|(
name|repeatedValue
lambda|->
name|builder
operator|.
name|addRepeatedField
argument_list|(
name|fieldDescriptor
argument_list|,
name|getSuitableFieldValue
argument_list|(
name|fieldDescriptor
argument_list|,
name|builder
argument_list|,
name|repeatedValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setField
argument_list|(
name|fieldDescriptor
argument_list|,
name|getSuitableFieldValue
argument_list|(
name|fieldDescriptor
argument_list|,
name|builder
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getSuitableFieldValue (final FieldDescriptor fieldDescriptor, final Builder builder, final Object inputValue)
specifier|private
specifier|static
name|Object
name|getSuitableFieldValue
parameter_list|(
specifier|final
name|FieldDescriptor
name|fieldDescriptor
parameter_list|,
specifier|final
name|Builder
name|builder
parameter_list|,
specifier|final
name|Object
name|inputValue
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|fieldDescriptor
argument_list|,
literal|"fieldDescriptor"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|builder
argument_list|,
literal|"builder"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|inputValue
argument_list|,
literal|"inputValue"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|fieldDescriptor
operator|.
name|getJavaType
argument_list|()
condition|)
block|{
case|case
name|ENUM
case|:
return|return
name|getEnumValue
argument_list|(
name|fieldDescriptor
argument_list|,
name|inputValue
argument_list|)
return|;
case|case
name|MESSAGE
case|:
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|nestedValue
init|=
name|castValue
argument_list|(
name|inputValue
argument_list|,
name|Map
operator|.
name|class
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Not able to cast value to map, make sure you have a map for the nested field message '%s'"
argument_list|,
name|fieldDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// we do a nested call until we reach our final message
return|return
name|convertMapToMessage
argument_list|(
name|fieldDescriptor
operator|.
name|getMessageType
argument_list|()
argument_list|,
name|builder
operator|.
name|newBuilderForField
argument_list|(
name|fieldDescriptor
argument_list|)
argument_list|,
name|nestedValue
argument_list|)
return|;
default|default:
return|return
name|inputValue
return|;
block|}
block|}
DECL|method|getEnumValue (final FieldDescriptor fieldDescriptor, final Object value)
specifier|private
specifier|static
name|EnumValueDescriptor
name|getEnumValue
parameter_list|(
specifier|final
name|FieldDescriptor
name|fieldDescriptor
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
specifier|final
name|EnumValueDescriptor
name|enumValueDescriptor
init|=
name|getSuitableEnumValue
argument_list|(
name|fieldDescriptor
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|enumValueDescriptor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not retrieve enum index '%s' for enum field '%s', most likely the index does not exist in the enum indexes '%s'"
argument_list|,
name|value
argument_list|,
name|fieldDescriptor
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldDescriptor
operator|.
name|getEnumType
argument_list|()
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|enumValueDescriptor
return|;
block|}
DECL|method|getSuitableEnumValue (final FieldDescriptor fieldDescriptor, final Object value)
specifier|private
specifier|static
name|EnumValueDescriptor
name|getSuitableEnumValue
parameter_list|(
specifier|final
name|FieldDescriptor
name|fieldDescriptor
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
comment|// we check if value is string, we find index by name, otherwise by integer
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|fieldDescriptor
operator|.
name|getEnumType
argument_list|()
operator|.
name|findValueByName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|int
name|index
init|=
name|castValue
argument_list|(
name|value
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Not able to cast value to integer, make sure you have an integer index for the enum field '%s'"
argument_list|,
name|fieldDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fieldDescriptor
operator|.
name|getEnumType
argument_list|()
operator|.
name|findValueByNumber
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
DECL|method|toMap (final Message inputProto)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|(
specifier|final
name|Message
name|inputProto
parameter_list|)
block|{
return|return
name|convertProtoMessageToMap
argument_list|(
name|inputProto
argument_list|)
return|;
block|}
DECL|method|convertProtoMessageToMap (final Message inputData)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|convertProtoMessageToMap
parameter_list|(
specifier|final
name|Message
name|inputData
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|inputData
argument_list|,
literal|"inputData"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Descriptors
operator|.
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|allFields
init|=
name|inputData
operator|.
name|getAllFields
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapResult
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// we set our values from descriptors to map
name|allFields
operator|.
name|forEach
argument_list|(
parameter_list|(
name|fieldDescriptor
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
specifier|final
name|String
name|fieldName
init|=
name|fieldDescriptor
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldDescriptor
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|repeatedValues
init|=
name|castValue
argument_list|(
name|value
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Not able to cast value to list, make sure you have a list for the repeated field '%s'"
argument_list|,
name|fieldName
argument_list|)
argument_list|)
decl_stmt|;
name|mapResult
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|repeatedValues
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|singleValue
lambda|->
name|convertValueToSuitableFieldType
argument_list|(
name|singleValue
argument_list|,
name|fieldDescriptor
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapResult
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|convertValueToSuitableFieldType
argument_list|(
name|value
argument_list|,
name|fieldDescriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|mapResult
return|;
block|}
DECL|method|convertValueToSuitableFieldType (final Object value, final Descriptors.FieldDescriptor fieldDescriptor)
specifier|private
specifier|static
name|Object
name|convertValueToSuitableFieldType
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|Descriptors
operator|.
name|FieldDescriptor
name|fieldDescriptor
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|fieldDescriptor
argument_list|,
literal|"fieldDescriptor"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|value
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Object
name|result
decl_stmt|;
switch|switch
condition|(
name|fieldDescriptor
operator|.
name|getJavaType
argument_list|()
condition|)
block|{
case|case
name|ENUM
case|:
case|case
name|BYTE_STRING
case|:
name|result
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|MESSAGE
case|:
name|result
operator|=
name|convertProtoMessageToMap
argument_list|(
operator|(
name|Message
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
default|default:
name|result
operator|=
name|value
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
DECL|method|castValue (final Object value, final Class<T> type, final String errorMessage)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|castValue
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
specifier|final
name|String
name|errorMessage
parameter_list|)
block|{
try|try
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

