begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.protobuf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AddressBookProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|ProtobufConverterTest
specifier|public
class|class
name|ProtobufConverterTest
block|{
annotation|@
name|Test
DECL|method|testIfCorrectlyParseMap ()
specifier|public
name|void
name|testIfCorrectlyParseMap
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|phoneNumber
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|phoneNumber
operator|.
name|put
argument_list|(
literal|"number"
argument_list|,
literal|"011122233"
argument_list|)
expr_stmt|;
name|phoneNumber
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"MOBILE"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|phoneNumber2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|phoneNumber2
operator|.
name|put
argument_list|(
literal|"number"
argument_list|,
literal|"5542454"
argument_list|)
expr_stmt|;
name|phoneNumber2
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"street"
argument_list|,
literal|"awesome street"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"street_number"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"is_valid"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|input
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Martin"
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"phone"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|phoneNumber
argument_list|,
name|phoneNumber2
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"email"
argument_list|,
literal|"some@some.com"
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"nicknames"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"awesome1"
argument_list|,
literal|"awesome2"
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
specifier|final
name|ProtobufConverter
name|protobufConverter
init|=
name|ProtobufConverter
operator|.
name|create
argument_list|(
name|AddressBookProtos
operator|.
name|Person
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AddressBookProtos
operator|.
name|Person
name|message
init|=
operator|(
name|AddressBookProtos
operator|.
name|Person
operator|)
name|protobufConverter
operator|.
name|toProto
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|// assert primitives types and strings
name|assertEquals
argument_list|(
literal|"Martin"
argument_list|,
name|message
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|message
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some@some.com"
argument_list|,
name|message
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert nested message
name|assertEquals
argument_list|(
literal|"awesome street"
argument_list|,
name|message
operator|.
name|getAddress
argument_list|()
operator|.
name|getStreet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|message
operator|.
name|getAddress
argument_list|()
operator|.
name|getStreetNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|message
operator|.
name|getAddress
argument_list|()
operator|.
name|getIsValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert repeated messages
name|assertEquals
argument_list|(
literal|"011122233"
argument_list|,
name|message
operator|.
name|getPhone
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MOBILE"
argument_list|,
name|message
operator|.
name|getPhone
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5542454"
argument_list|,
name|message
operator|.
name|getPhone
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"WORK"
argument_list|,
name|message
operator|.
name|getPhone
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"awesome1"
argument_list|,
name|message
operator|.
name|getNicknames
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"awesome2"
argument_list|,
name|message
operator|.
name|getNicknames
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testIfThrowsErrorInCaseNestedMessageNotMap ()
specifier|public
name|void
name|testIfThrowsErrorInCaseNestedMessageNotMap
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|input
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Martin"
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"address"
argument_list|,
literal|"wrong address"
argument_list|)
expr_stmt|;
specifier|final
name|ProtobufConverter
name|protobufConverter
init|=
name|ProtobufConverter
operator|.
name|create
argument_list|(
name|AddressBookProtos
operator|.
name|Person
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AddressBookProtos
operator|.
name|Person
name|message
init|=
operator|(
name|AddressBookProtos
operator|.
name|Person
operator|)
name|protobufConverter
operator|.
name|toProto
argument_list|(
name|input
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testIfThrowsErrorInCaseRepeatedFieldIsNotList ()
specifier|public
name|void
name|testIfThrowsErrorInCaseRepeatedFieldIsNotList
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|input
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Martin"
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"nicknames"
argument_list|,
literal|"wrong nickname"
argument_list|)
expr_stmt|;
specifier|final
name|ProtobufConverter
name|protobufConverter
init|=
name|ProtobufConverter
operator|.
name|create
argument_list|(
name|AddressBookProtos
operator|.
name|Person
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AddressBookProtos
operator|.
name|Person
name|message
init|=
operator|(
name|AddressBookProtos
operator|.
name|Person
operator|)
name|protobufConverter
operator|.
name|toProto
argument_list|(
name|input
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

