begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms2
operator|.
name|jms
operator|.
name|Jms2ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_comment
comment|/**  * The sjms2 component (simple jms) allows messages to be sent to (or consumed from) a JMS Queue or Topic (uses JMS 2.x API).  *  * This component uses plain JMS 2.x API where as the jms component uses Spring JMS.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.19.0"
argument_list|,
name|scheme
operator|=
literal|"sjms2"
argument_list|,
name|extendsScheme
operator|=
literal|"sjms"
argument_list|,
name|title
operator|=
literal|"Simple JMS2"
argument_list|,
name|syntax
operator|=
literal|"sjms2:destinationType:destinationName"
argument_list|,
name|consumerClass
operator|=
name|SjmsConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"messaging"
argument_list|)
DECL|class|Sjms2Endpoint
specifier|public
class|class
name|Sjms2Endpoint
extends|extends
name|SjmsEndpoint
implements|implements
name|AsyncEndpoint
block|{
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|subscriptionId
specifier|private
name|String
name|subscriptionId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|durable
specifier|private
name|boolean
name|durable
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|shared
specifier|private
name|boolean
name|shared
decl_stmt|;
DECL|method|Sjms2Endpoint ()
specifier|public
name|Sjms2Endpoint
parameter_list|()
block|{     }
DECL|method|Sjms2Endpoint (String uri, Component component, String remaining)
specifier|public
name|Sjms2Endpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Component
name|component
parameter_list|,
name|String
name|remaining
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|setJmsObjectFactory
argument_list|(
operator|new
name|Jms2ObjectFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|Sjms2Component
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|Sjms2Component
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
comment|/**      * Sets the durable subscription Id required for durable topics.      */
annotation|@
name|Override
DECL|method|setDurableSubscriptionId (String durableSubscriptionId)
specifier|public
name|void
name|setDurableSubscriptionId
parameter_list|(
name|String
name|durableSubscriptionId
parameter_list|)
block|{
name|super
operator|.
name|setDurableSubscriptionId
argument_list|(
name|durableSubscriptionId
argument_list|)
expr_stmt|;
name|subscriptionId
operator|=
name|durableSubscriptionId
expr_stmt|;
name|durable
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getSubscriptionId ()
specifier|public
name|String
name|getSubscriptionId
parameter_list|()
block|{
return|return
name|subscriptionId
return|;
block|}
comment|/**      * Sets the subscription Id, required for durable or shared topics.      */
DECL|method|setSubscriptionId (String subscriptionId)
specifier|public
name|void
name|setSubscriptionId
parameter_list|(
name|String
name|subscriptionId
parameter_list|)
block|{
name|this
operator|.
name|subscriptionId
operator|=
name|subscriptionId
expr_stmt|;
block|}
DECL|method|isDurable ()
specifier|public
name|boolean
name|isDurable
parameter_list|()
block|{
return|return
name|durable
return|;
block|}
comment|/**      * Sets topic consumer to durable.      */
DECL|method|setDurable (boolean durable)
specifier|public
name|void
name|setDurable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|this
operator|.
name|durable
operator|=
name|durable
expr_stmt|;
block|}
DECL|method|isShared ()
specifier|public
name|boolean
name|isShared
parameter_list|()
block|{
return|return
name|shared
return|;
block|}
comment|/**      * Sets the consumer to shared.      */
DECL|method|setShared (boolean shared)
specifier|public
name|void
name|setShared
parameter_list|(
name|boolean
name|shared
parameter_list|)
block|{
name|this
operator|.
name|shared
operator|=
name|shared
expr_stmt|;
block|}
block|}
end_class

end_unit

