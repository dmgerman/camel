begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.etcd
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_enum
DECL|enum|EtcdNamespace
specifier|public
enum|enum
name|EtcdNamespace
block|{
DECL|enumConstant|STATS
name|STATS
parameter_list|(
name|EtcdConstants
operator|.
name|ETCD_PATH_STATS
parameter_list|)
operator|,
DECL|enumConstant|WATCH
constructor|WATCH(EtcdConstants.ETCD_PATH_WATCH
block|)
enum|,
DECL|enumConstant|KEYS
name|KEYS
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_PATH_KEYS
argument_list|)
enum|;
end_enum

begin_decl_stmt
DECL|field|VALUES
specifier|static
specifier|final
name|EtcdNamespace
index|[]
name|VALUES
init|=
name|values
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|path
specifier|final
name|String
name|path
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|EtcdNamespace (String path)
name|EtcdNamespace
argument_list|(
name|String
name|path
argument_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
block|;     }
DECL|method|path ()
specifier|public
name|String
name|path
argument_list|()
block|{
return|return
name|path
return|;
block|}
end_expr_stmt

begin_function
DECL|method|fromPath (String name)
specifier|static
name|EtcdNamespace
name|fromPath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|VALUES
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|VALUES
index|[
name|i
index|]
operator|.
name|path
argument_list|)
condition|)
block|{
return|return
name|VALUES
index|[
name|i
index|]
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

unit|}
end_unit

