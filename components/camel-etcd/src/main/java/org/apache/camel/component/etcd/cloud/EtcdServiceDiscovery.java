begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.etcd.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|EtcdClient
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|requests
operator|.
name|EtcdKeyGetRequest
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|responses
operator|.
name|EtcdKeysResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
operator|.
name|EtcdConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
operator|.
name|EtcdHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|EtcdServiceDiscovery
specifier|abstract
class|class
name|EtcdServiceDiscovery
extends|extends
name|DefaultServiceDiscovery
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EtcdServiceDiscovery
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAPPER
specifier|private
specifier|static
specifier|final
name|ObjectMapper
name|MAPPER
init|=
name|EtcdHelper
operator|.
name|createObjectMapper
argument_list|()
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|EtcdConfiguration
name|configuration
decl_stmt|;
DECL|field|client
specifier|private
name|EtcdClient
name|client
decl_stmt|;
DECL|method|EtcdServiceDiscovery (EtcdConfiguration configuration)
name|EtcdServiceDiscovery
parameter_list|(
name|EtcdConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|client
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|client
operator|=
name|configuration
operator|.
name|createClient
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getConfiguration ()
specifier|protected
name|EtcdConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|configuration
return|;
block|}
DECL|method|getClient ()
specifier|protected
name|EtcdClient
name|getClient
parameter_list|()
block|{
return|return
name|this
operator|.
name|client
return|;
block|}
DECL|method|nodeFromString (String value)
specifier|protected
name|EtcdServiceDefinition
name|nodeFromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|EtcdServiceDefinition
name|server
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|=
name|MAPPER
operator|.
name|readValue
argument_list|(
name|value
argument_list|,
name|EtcdServiceDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
DECL|method|getServices ()
specifier|protected
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|getServices
parameter_list|()
block|{
return|return
name|getServices
argument_list|(
name|s
lambda|->
literal|true
argument_list|)
return|;
block|}
DECL|method|getServices (Predicate<EtcdServiceDefinition> filter)
specifier|protected
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|getServices
parameter_list|(
name|Predicate
argument_list|<
name|EtcdServiceDefinition
argument_list|>
name|filter
parameter_list|)
block|{
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|servers
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRunAllowed
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|EtcdConfiguration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|EtcdKeyGetRequest
name|request
init|=
name|getClient
argument_list|()
operator|.
name|get
argument_list|(
name|conf
operator|.
name|getServicePath
argument_list|()
argument_list|)
operator|.
name|recursive
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|hasTimeout
argument_list|()
condition|)
block|{
name|request
operator|.
name|timeout
argument_list|(
name|conf
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
specifier|final
name|EtcdKeysResponse
name|response
init|=
name|request
operator|.
name|send
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|nonNull
argument_list|(
name|response
operator|.
name|node
argument_list|)
operator|&&
operator|!
name|response
operator|.
name|node
operator|.
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|servers
operator|=
name|response
operator|.
name|node
operator|.
name|nodes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|node
lambda|->
name|node
operator|.
name|value
argument_list|)
operator|.
name|filter
argument_list|(
name|ObjectHelper
operator|::
name|isNotEmpty
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|nodeFromString
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|sorted
argument_list|(
name|EtcdServiceDefinition
operator|.
name|COMPARATOR
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|servers
return|;
block|}
block|}
end_class

end_unit

