begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.etcd
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|EtcdClient
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|EtcdSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Represents a etcd endpoint.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"etcd"
argument_list|,
name|title
operator|=
literal|"etcd"
argument_list|,
name|syntax
operator|=
literal|"etcd:namespace/path"
argument_list|,
name|consumerClass
operator|=
name|AbstractEtcdConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"etcd"
argument_list|)
DECL|class|AbstractEtcdEndpoint
specifier|public
specifier|abstract
class|class
name|AbstractEtcdEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"The namespace"
argument_list|)
comment|// TODO: document me
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|namespace
specifier|private
specifier|final
name|EtcdNamespace
name|namespace
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"The path"
argument_list|)
comment|// TODO: document me
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
specifier|final
name|EtcdConfiguration
name|configuration
decl_stmt|;
DECL|method|AbstractEtcdEndpoint (String uri, EtcdComponent component, EtcdConfiguration configuration, EtcdNamespace namespace, String path)
specifier|protected
name|AbstractEtcdEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|EtcdComponent
name|component
parameter_list|,
name|EtcdConfiguration
name|configuration
parameter_list|,
name|EtcdNamespace
name|namespace
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|EtcdConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|configuration
return|;
block|}
DECL|method|getNamespace ()
specifier|public
name|EtcdNamespace
name|getNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespace
return|;
block|}
DECL|method|createClient ()
specifier|public
name|EtcdClient
name|createClient
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|uris
init|=
name|EtcdConstants
operator|.
name|ETCD_DEFAULT_URIS
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getUris
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|uris
operator|=
name|configuration
operator|.
name|getUris
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|URI
index|[]
name|etcdUriList
init|=
operator|new
name|URI
index|[
name|uris
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|etcdUriList
index|[
name|i
operator|++
index|]
operator|=
name|URI
operator|.
name|create
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EtcdClient
argument_list|(
operator|new
name|EtcdSecurityContext
argument_list|(
name|createSslContext
argument_list|(
name|configuration
argument_list|)
argument_list|,
name|configuration
operator|.
name|getUserName
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|,
name|etcdUriList
argument_list|)
return|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
DECL|method|getRemainingPath (String defaultPath)
specifier|public
name|String
name|getRemainingPath
parameter_list|(
name|String
name|defaultPath
parameter_list|)
block|{
name|String
name|path
init|=
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
name|namespace
operator|.
name|path
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
name|defaultPath
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
DECL|method|createSslContext (EtcdConfiguration configuration)
specifier|private
name|SSLContext
name|createSslContext
parameter_list|(
name|EtcdConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|configuration
operator|.
name|getSslContextParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|configuration
operator|.
name|getSslContextParameters
argument_list|()
operator|.
name|createSSLContext
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

