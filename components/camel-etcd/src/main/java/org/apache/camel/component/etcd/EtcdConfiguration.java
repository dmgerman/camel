begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.etcd
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|EtcdClient
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|EtcdSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|EtcdConfiguration
specifier|public
class|class
name|EtcdConfiguration
block|{
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
name|EtcdConstants
operator|.
name|ETCD_DEFAULT_URIS
argument_list|)
DECL|field|uris
specifier|private
name|String
name|uris
init|=
name|EtcdConstants
operator|.
name|ETCD_DEFAULT_URIS
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|sendEmptyExchangeOnTimeout
specifier|private
name|boolean
name|sendEmptyExchangeOnTimeout
decl_stmt|;
annotation|@
name|UriParam
DECL|field|recursive
specifier|private
name|boolean
name|recursive
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|timeToLive
specifier|private
name|Integer
name|timeToLive
decl_stmt|;
annotation|@
name|UriParam
DECL|field|timeout
specifier|private
name|Long
name|timeout
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"0"
argument_list|)
DECL|field|fromIndex
specifier|private
name|Long
name|fromIndex
init|=
literal|0L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"/services/"
argument_list|)
DECL|field|servicePath
specifier|private
name|String
name|servicePath
init|=
literal|"/services/"
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|EtcdConfiguration (CamelContext camelContext)
specifier|public
name|EtcdConfiguration
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|camelContext
return|;
block|}
DECL|method|getUris ()
specifier|public
name|String
name|getUris
parameter_list|()
block|{
return|return
name|uris
return|;
block|}
comment|/**      * To set the URIs the client connects.      */
DECL|method|setUris (String uris)
specifier|public
name|void
name|setUris
parameter_list|(
name|String
name|uris
parameter_list|)
block|{
name|this
operator|.
name|uris
operator|=
name|uris
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
comment|/**      * To configure security using SSLContextParameters.      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
comment|/**      * The user name to use for basic authentication.      */
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * The password to use for basic authentication.      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|isSendEmptyExchangeOnTimeout ()
specifier|public
name|boolean
name|isSendEmptyExchangeOnTimeout
parameter_list|()
block|{
return|return
name|sendEmptyExchangeOnTimeout
return|;
block|}
comment|/**      * To send an empty message in case of timeout watching for a key.      */
DECL|method|setSendEmptyExchangeOnTimeout (boolean sendEmptyExchangeOnTimeout)
specifier|public
name|void
name|setSendEmptyExchangeOnTimeout
parameter_list|(
name|boolean
name|sendEmptyExchangeOnTimeout
parameter_list|)
block|{
name|this
operator|.
name|sendEmptyExchangeOnTimeout
operator|=
name|sendEmptyExchangeOnTimeout
expr_stmt|;
block|}
DECL|method|isRecursive ()
specifier|public
name|boolean
name|isRecursive
parameter_list|()
block|{
return|return
name|recursive
return|;
block|}
comment|/**      * To apply an action recursively.      */
DECL|method|setRecursive (boolean recursive)
specifier|public
name|void
name|setRecursive
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
DECL|method|getTimeToLive ()
specifier|public
name|Integer
name|getTimeToLive
parameter_list|()
block|{
return|return
name|timeToLive
return|;
block|}
comment|/**      * To set the lifespan of a key in milliseconds.      */
DECL|method|setTimeToLive (Integer timeToLive)
specifier|public
name|void
name|setTimeToLive
parameter_list|(
name|Integer
name|timeToLive
parameter_list|)
block|{
name|this
operator|.
name|timeToLive
operator|=
name|timeToLive
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|Long
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
DECL|method|hasTimeout ()
specifier|public
name|boolean
name|hasTimeout
parameter_list|()
block|{
return|return
name|timeout
operator|!=
literal|null
operator|&&
name|timeout
operator|>
literal|0
return|;
block|}
comment|/**      * To set the maximum time an action could take to complete.      */
DECL|method|setTimeout (Long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|Long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getFromIndex ()
specifier|public
name|Long
name|getFromIndex
parameter_list|()
block|{
return|return
name|fromIndex
return|;
block|}
comment|/**      * The index to watch from      */
DECL|method|setFromIndex (Long fromIndex)
specifier|public
name|void
name|setFromIndex
parameter_list|(
name|Long
name|fromIndex
parameter_list|)
block|{
name|this
operator|.
name|fromIndex
operator|=
name|fromIndex
expr_stmt|;
block|}
DECL|method|getServicePath ()
specifier|public
name|String
name|getServicePath
parameter_list|()
block|{
return|return
name|servicePath
return|;
block|}
comment|/**      * The path to look for for service discovery      */
DECL|method|setServicePath (String servicePath)
specifier|public
name|void
name|setServicePath
parameter_list|(
name|String
name|servicePath
parameter_list|)
block|{
name|this
operator|.
name|servicePath
operator|=
name|servicePath
expr_stmt|;
block|}
DECL|method|createClient ()
specifier|public
name|EtcdClient
name|createClient
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|uris
decl_stmt|;
if|if
condition|(
name|getUris
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|uris
operator|=
name|getUris
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uris
operator|=
name|EtcdConstants
operator|.
name|ETCD_DEFAULT_URIS
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|URI
index|[]
name|etcdUriList
init|=
operator|new
name|URI
index|[
name|uris
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|etcdUriList
index|[
name|i
operator|++
index|]
operator|=
name|URI
operator|.
name|create
argument_list|(
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EtcdClient
argument_list|(
operator|new
name|EtcdSecurityContext
argument_list|(
name|sslContextParameters
operator|!=
literal|null
condition|?
name|sslContextParameters
operator|.
name|createSSLContext
argument_list|(
name|camelContext
argument_list|)
else|:
literal|null
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
argument_list|,
name|etcdUriList
argument_list|)
return|;
block|}
block|}
end_class

end_unit

