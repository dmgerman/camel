begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.etcd.processor.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
operator|.
name|processor
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|EtcdClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
operator|.
name|EtcdHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
operator|.
name|EtcdTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"An etcd server is needed for this test "
argument_list|)
DECL|class|EtcdServiceCallRouteTest
specifier|public
class|class
name|EtcdServiceCallRouteTest
extends|extends
name|EtcdTestSupport
block|{
DECL|field|MAPPER
specifier|private
specifier|static
specifier|final
name|ObjectMapper
name|MAPPER
init|=
name|EtcdHelper
operator|.
name|createObjectMapper
argument_list|()
decl_stmt|;
DECL|field|SERVICE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"http-service"
decl_stmt|;
DECL|field|SERVICE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|SERVICE_COUNT
init|=
literal|5
decl_stmt|;
DECL|field|SERVICE_PORT_BASE
specifier|private
specifier|static
specifier|final
name|int
name|SERVICE_PORT_BASE
init|=
literal|8080
decl_stmt|;
DECL|field|client
specifier|private
name|EtcdClient
name|client
decl_stmt|;
DECL|field|servers
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|servers
decl_stmt|;
DECL|field|expectedBodies
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|expectedBodies
decl_stmt|;
comment|// *************************************************************************
comment|// Setup / tear down
comment|// *************************************************************************
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|=
name|getClient
argument_list|()
expr_stmt|;
name|servers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|SERVICE_COUNT
argument_list|)
expr_stmt|;
name|expectedBodies
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|SERVICE_COUNT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SERVICE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|server
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|server
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|SERVICE_NAME
argument_list|)
expr_stmt|;
name|server
operator|.
name|put
argument_list|(
literal|"address"
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|server
operator|.
name|put
argument_list|(
literal|"port"
argument_list|,
name|SERVICE_PORT_BASE
operator|+
name|i
argument_list|)
expr_stmt|;
name|client
operator|.
name|put
argument_list|(
literal|"/services/"
operator|+
literal|"service-"
operator|+
name|i
argument_list|,
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|server
argument_list|)
argument_list|)
operator|.
name|send
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|server
argument_list|)
argument_list|)
expr_stmt|;
name|expectedBodies
operator|.
name|add
argument_list|(
literal|"ping on "
operator|+
operator|(
name|SERVICE_PORT_BASE
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|client
operator|.
name|deleteDir
argument_list|(
literal|"/services/"
argument_list|)
operator|.
name|recursive
argument_list|()
operator|.
name|send
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// Test
comment|// *************************************************************************
annotation|@
name|Test
DECL|method|testServiceCall ()
specifier|public
name|void
name|testServiceCall
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
name|SERVICE_COUNT
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
name|expectedBodies
argument_list|)
expr_stmt|;
name|servers
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"ping"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// Route
comment|// *************************************************************************
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|serviceCall
argument_list|()
operator|.
name|name
argument_list|(
name|SERVICE_NAME
argument_list|)
operator|.
name|etcdConfiguration
argument_list|()
operator|.
name|component
argument_list|(
literal|"http"
argument_list|)
operator|.
name|loadBalancer
argument_list|(
literal|"roundrobin"
argument_list|)
operator|.
name|serverListStrategy
argument_list|(
literal|"ondemand"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"log:org.apache.camel.component.etcd.processor.service?level=INFO&showAll=true&multiline=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|servers
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|fromF
argument_list|(
literal|"jetty:http://%s:%d"
argument_list|,
name|s
operator|.
name|get
argument_list|(
literal|"address"
argument_list|)
argument_list|,
name|s
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|simple
argument_list|(
literal|"${in.body} on "
operator|+
name|s
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

