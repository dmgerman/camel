begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.etcd
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
package|;
end_package

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|responses
operator|.
name|EtcdLeaderStatsResponse
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|responses
operator|.
name|EtcdSelfStatsResponse
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|responses
operator|.
name|EtcdStoreStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Etcd must be started manually"
argument_list|)
DECL|class|EtcdStatsTest
specifier|public
class|class
name|EtcdStatsTest
extends|extends
name|EtcdTest
block|{
annotation|@
name|Test
DECL|method|testStats ()
specifier|public
name|void
name|testStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testStatsConsumer
argument_list|(
literal|"mock:stats-leader-consumer"
argument_list|,
name|EtcdConstants
operator|.
name|ETCD_LEADER_STATS_PATH
argument_list|,
name|EtcdLeaderStatsResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|testStatsConsumer
argument_list|(
literal|"mock:stats-self-consumer"
argument_list|,
name|EtcdConstants
operator|.
name|ETCD_SELF_STATS_PATH
argument_list|,
name|EtcdSelfStatsResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|testStatsConsumer
argument_list|(
literal|"mock:stats-store-consumer"
argument_list|,
name|EtcdConstants
operator|.
name|ETCD_STORE_STATS_PATH
argument_list|,
name|EtcdStoreStatsResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|testStatsProducer
argument_list|(
literal|"direct:stats-leader"
argument_list|,
literal|"mock:stats-leader-producer"
argument_list|,
name|EtcdConstants
operator|.
name|ETCD_LEADER_STATS_PATH
argument_list|,
name|EtcdLeaderStatsResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|testStatsProducer
argument_list|(
literal|"direct:stats-self"
argument_list|,
literal|"mock:stats-self-producer"
argument_list|,
name|EtcdConstants
operator|.
name|ETCD_SELF_STATS_PATH
argument_list|,
name|EtcdSelfStatsResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|testStatsProducer
argument_list|(
literal|"direct:stats-store"
argument_list|,
literal|"mock:stats-store-producer"
argument_list|,
name|EtcdConstants
operator|.
name|ETCD_STORE_STATS_PATH
argument_list|,
name|EtcdStoreStatsResponse
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testStatsConsumer (String mockEnpoint, String expectedPath, final Class<?> expectedType)
specifier|protected
name|void
name|testStatsConsumer
parameter_list|(
name|String
name|mockEnpoint
parameter_list|,
name|String
name|expectedPath
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
parameter_list|)
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
name|mockEnpoint
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_NAMESPACE
argument_list|,
name|EtcdNamespace
operator|.
name|stats
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_PATH
argument_list|,
name|expectedPath
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessagesMatches
argument_list|(
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|expectedType
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testStatsProducer (String producerEnpoint, String mockEnpoint, String expectedPath, final Class<?> expectedType)
specifier|protected
name|void
name|testStatsProducer
parameter_list|(
name|String
name|producerEnpoint
parameter_list|,
name|String
name|mockEnpoint
parameter_list|,
name|String
name|expectedPath
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
parameter_list|)
throws|throws
name|Exception
block|{
name|sendBody
argument_list|(
name|producerEnpoint
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testStatsConsumer
argument_list|(
name|mockEnpoint
argument_list|,
name|expectedPath
argument_list|,
name|expectedType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// CONSUMER
name|from
argument_list|(
literal|"etcd:stats/leader?consumer.delay=50&consumer.initialDelay=0"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stats-leader-consumer"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"etcd:stats/self?consumer.delay=50&consumer.initialDelay=0"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stats-self-consumer"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"etcd:stats/store?consumer.delay=50&consumer.initialDelay=0"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stats-store-consumer"
argument_list|)
expr_stmt|;
comment|// PRODUCER
name|from
argument_list|(
literal|"direct:stats-leader"
argument_list|)
operator|.
name|to
argument_list|(
literal|"etcd:stats/leader"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stats-leader-producer"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:stats-self"
argument_list|)
operator|.
name|to
argument_list|(
literal|"etcd:stats/self"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stats-self-producer"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:stats-store"
argument_list|)
operator|.
name|to
argument_list|(
literal|"etcd:stats/store"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stats-store-producer"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

