begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.etcd
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|etcd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|EtcdClient
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|responses
operator|.
name|EtcdException
import|;
end_import

begin_import
import|import
name|mousio
operator|.
name|etcd4j
operator|.
name|responses
operator|.
name|EtcdKeysResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Etcd must be started manually"
argument_list|)
DECL|class|EtcdKeysTest
specifier|public
class|class
name|EtcdKeysTest
extends|extends
name|EtcdTest
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|EtcdException
operator|.
name|class
argument_list|)
DECL|method|testKeys ()
specifier|public
name|void
name|testKeys
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|path
init|=
literal|"/camel/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|EtcdClient
name|client
init|=
name|getClient
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// *******************************************
comment|// SET
comment|// *******************************************
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_ACTION
argument_list|,
name|EtcdConstants
operator|.
name|ETCD_KEYS_ACTION_SET
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:keys-set"
argument_list|,
name|value
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockSet
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result-set"
argument_list|)
decl_stmt|;
name|mockSet
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockSet
operator|.
name|expectedHeaderReceived
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|mockSet
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// *******************************************
comment|// GET
comment|// *******************************************
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_ACTION
argument_list|,
name|EtcdConstants
operator|.
name|ETCD_KEYS_ACTION_GET
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:keys-get"
argument_list|,
name|value
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockGet
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result-get"
argument_list|)
decl_stmt|;
name|mockGet
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockGet
operator|.
name|expectedHeaderReceived
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|mockGet
operator|.
name|expectedMessagesMatches
argument_list|(
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|EtcdKeysResponse
name|keysResponse
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|EtcdKeysResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|keysResponse
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|keysResponse
operator|.
name|node
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|keysResponse
operator|.
name|node
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|keysResponse
operator|.
name|node
operator|.
name|value
operator|.
name|equals
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mockGet
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// *******************************************
comment|// DELETE
comment|// *******************************************
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_ACTION
argument_list|,
name|EtcdConstants
operator|.
name|ETCD_KEYS_ACTION_DELETE
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:keys-del"
argument_list|,
literal|"value"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockDel
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result-del"
argument_list|)
decl_stmt|;
name|mockDel
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockDel
operator|.
name|expectedHeaderReceived
argument_list|(
name|EtcdConstants
operator|.
name|ETCD_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|mockDel
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// *******************************************
comment|// VALIDATION
comment|// *******************************************
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|send
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"EtcdException should have been thrown"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:keys-set"
argument_list|)
operator|.
name|to
argument_list|(
literal|"etcd:/keys"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result-set"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:keys-get"
argument_list|)
operator|.
name|to
argument_list|(
literal|"etcd:/keys"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result-get"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:keys-del"
argument_list|)
operator|.
name|to
argument_list|(
literal|"etcd:/keys"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result-del"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

