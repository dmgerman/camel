begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.watch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FileWatchComponentRecursiveTest
specifier|public
class|class
name|FileWatchComponentRecursiveTest
extends|extends
name|FileWatchComponentTestBase
block|{
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
operator|+
literal|"?recursive=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:recursive"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
operator|+
literal|"?recursive=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:nonRecursive"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateFileInSubdirectories ()
specifier|public
name|void
name|testCreateFileInSubdirectories
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|newDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testPath
argument_list|()
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|newDir
operator|=
name|Files
operator|.
name|createDirectories
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|newDir
operator|.
name|toFile
argument_list|()
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot create file"
argument_list|)
throw|;
block|}
name|MockEndpoint
name|recursive
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:recursive"
argument_list|)
decl_stmt|;
name|recursive
operator|.
name|expectedMessageCount
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// 4 directories and one file
name|recursive
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|MockEndpoint
name|nonRecursive
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:nonRecursive"
argument_list|)
decl_stmt|;
name|nonRecursive
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// 1 directory
name|nonRecursive
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

