begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.watch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
operator|.
name|constants
operator|.
name|FileEventEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FileWatchComponentTest
specifier|public
class|class
name|FileWatchComponentTest
extends|extends
name|FileWatchComponentTestBase
block|{
annotation|@
name|Test
DECL|method|testCreateFile ()
specifier|public
name|void
name|testCreateFile
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|watchAll
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:watchAll"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|watchCreate
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:watchCreate"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|watchModify
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:watchModify"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|watchDelete
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:watchDelete"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|watchDeleteOrCreate
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:watchDeleteOrCreate"
argument_list|)
decl_stmt|;
name|File
name|newFile
init|=
name|createFile
argument_list|(
name|testPath
argument_list|()
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|watchAll
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|watchAll
operator|.
name|setAssertPeriod
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|watchAll
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|watchCreate
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|watchCreate
operator|.
name|setAssertPeriod
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|watchCreate
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|watchDeleteOrCreate
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|watchDeleteOrCreate
operator|.
name|setAssertPeriod
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|watchDeleteOrCreate
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|watchModify
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|watchModify
operator|.
name|setAssertPeriod
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|watchModify
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|watchDelete
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|watchDelete
operator|.
name|setAssertPeriod
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|watchDelete
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertFileEvent
argument_list|(
name|newFile
operator|.
name|getName
argument_list|()
argument_list|,
name|FileEventEnum
operator|.
name|CREATE
argument_list|,
name|watchAll
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileEvent
argument_list|(
name|newFile
operator|.
name|getName
argument_list|()
argument_list|,
name|FileEventEnum
operator|.
name|CREATE
argument_list|,
name|watchCreate
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileEvent
argument_list|(
name|newFile
operator|.
name|getName
argument_list|()
argument_list|,
name|FileEventEnum
operator|.
name|CREATE
argument_list|,
name|watchDeleteOrCreate
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveFile ()
specifier|public
name|void
name|testRemoveFile
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:watchDelete"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|testFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|testFiles
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|mock
operator|.
name|setResultWaitTime
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAntMatcher ()
specifier|public
name|void
name|testAntMatcher
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|all
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:watchAll"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|onlyTxtAnywhere
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:onlyTxtAnywhere"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|onlyTxtInSubdirectory
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:onlyTxtInSubdirectory"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|onlyTxtInRoot
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:onlyTxtInRoot"
argument_list|)
decl_stmt|;
name|Path
name|root
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|a
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testPath
argument_list|()
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Path
name|b
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testPath
argument_list|()
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|root
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"inRoot.txt"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|root
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"inRoot.java"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|a
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"inA.txt"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|a
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"inA.java"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|b
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"inB.txt"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|b
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"inB.java"
argument_list|)
expr_stmt|;
name|all
operator|.
name|expectedMessageCount
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// 2 directories, 6 files
name|all
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|onlyTxtAnywhere
operator|.
name|expectedMessageCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// 3 txt files
name|onlyTxtAnywhere
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|onlyTxtInSubdirectory
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// 1 txt file in first subdirectory
name|onlyTxtInSubdirectory
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|onlyTxtInRoot
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// 1 txt file inRoot.txt (should exclude everything in subdirectories)
name|onlyTxtInRoot
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createModifyReadBodyAsString ()
specifier|public
name|void
name|createModifyReadBodyAsString
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:watchAll"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|testFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Hello"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|StandardOpenOption
operator|.
name|SYNC
argument_list|)
expr_stmt|;
name|mock
operator|.
name|setExpectedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|setResultWaitTime
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateBatch ()
specifier|public
name|void
name|testCreateBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:watchAll"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|createFile
argument_list|(
name|testPath
argument_list|()
argument_list|,
name|i
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessagesMatches
argument_list|(
name|exchange
lambda|->
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|FileWatchComponent
operator|.
name|EVENT_TYPE_HEADER
argument_list|,
name|FileEventEnum
operator|.
name|class
argument_list|)
operator|==
name|FileEventEnum
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"watchAll"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:watchAll"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
operator|+
literal|"?events=CREATE&antInclude=*.txt"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"onlyTxtInRoot"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:onlyTxtInRoot"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
operator|+
literal|"?events=CREATE&antInclude=*/*.txt"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"onlyTxtInSubdirectory"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:onlyTxtInSubdirectory"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
operator|+
literal|"?events=CREATE&antInclude=**/*.txt"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"onlyTxtAnywhere"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:onlyTxtAnywhere"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
operator|+
literal|"?events=CREATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:watchCreate"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
operator|+
literal|"?events=MODIFY"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:watchModify"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
operator|+
literal|"?events=DELETE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:watchDelete"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file-watch://"
operator|+
name|testPath
argument_list|()
operator|+
literal|"?events=DELETE,CREATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:watchDeleteOrCreate"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

