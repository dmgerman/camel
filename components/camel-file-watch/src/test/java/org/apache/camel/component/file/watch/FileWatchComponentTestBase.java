begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.watch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
operator|.
name|constants
operator|.
name|FileEventEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
DECL|class|FileWatchComponentTestBase
specifier|public
class|class
name|FileWatchComponentTestBase
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|testFiles
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|testFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|assertFileEvent (String expectedFileName, FileEventEnum expectedEventType, Exchange exchange)
specifier|static
name|void
name|assertFileEvent
parameter_list|(
name|String
name|expectedFileName
parameter_list|,
name|FileEventEnum
name|expectedEventType
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedFileName
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedEventType
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|FileWatchComponent
operator|.
name|EVENT_TYPE_HEADER
argument_list|,
name|FileEventEnum
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|isWindows ()
specifier|static
name|boolean
name|isWindows
parameter_list|()
block|{
comment|//WatchService behaves differently on Windows (Emits both MODIFY and DELETE when file deleted)
comment|//see https://stackoverflow.com/questions/33753561/java-nio-watch-service-created-both-entry-create-and-entry-modify-when-a-new
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"win"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doPostSetup
argument_list|()
expr_stmt|;
name|cleanTestDir
argument_list|(
operator|new
name|File
argument_list|(
name|testPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|testPath
argument_list|()
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|testPath
argument_list|()
argument_list|,
name|getTestName
argument_list|()
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|newFile
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|testFiles
operator|.
name|add
argument_list|(
name|newFile
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|cleanTestDir
argument_list|(
operator|new
name|File
argument_list|(
name|testPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanTestDir (File file)
specifier|private
name|void
name|cleanTestDir
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|file
operator|==
literal|null
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|listFiles
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|File
name|childFile
range|:
name|file
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|childFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|cleanTestDir
argument_list|(
name|childFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|childFile
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
DECL|method|testPath ()
specifier|protected
name|String
name|testPath
parameter_list|()
block|{
return|return
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getSeparator
argument_list|()
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"_"
operator|+
name|getTestName
argument_list|()
operator|.
name|getMethodName
argument_list|()
operator|+
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getSeparator
argument_list|()
return|;
block|}
DECL|method|createFile (File parent, String child)
specifier|protected
name|File
name|createFile
parameter_list|(
name|File
name|parent
parameter_list|,
name|String
name|child
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|parent
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File should be created but already exists"
argument_list|,
name|newFile
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newFile
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createFile (String parent, String child)
specifier|protected
name|File
name|createFile
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|child
parameter_list|)
block|{
return|return
name|createFile
argument_list|(
operator|new
name|File
argument_list|(
name|parent
argument_list|)
argument_list|,
name|child
argument_list|)
return|;
block|}
block|}
end_class

end_unit

