begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.watch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|MultipleConsumersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
operator|.
name|constants
operator|.
name|FileEventEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_comment
comment|/**  * The file-watch is used to monitor file events in directory using {@link java.nio.file.WatchService}  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"3.0.0"
argument_list|,
name|scheme
operator|=
literal|"file-watch"
argument_list|,
name|title
operator|=
literal|"file-watch"
argument_list|,
name|syntax
operator|=
literal|"file-watch:path"
argument_list|,
name|label
operator|=
literal|"file"
argument_list|,
name|consumerOnly
operator|=
literal|true
argument_list|)
DECL|class|FileWatchEndpoint
specifier|public
class|class
name|FileWatchEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|MultipleConsumersSupport
block|{
annotation|@
name|UriPath
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Path of directory to consume events from."
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Coma separated list of events to watch. Allowed values are: CREATE, MODIFY, DELETE."
argument_list|,
name|defaultValue
operator|=
literal|"CREATE,MODIFY,DELETE"
argument_list|)
DECL|field|events
specifier|private
name|Set
argument_list|<
name|FileEventEnum
argument_list|>
name|events
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|FileEventEnum
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Auto create directory if does not exists."
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|autoCreate
specifier|private
name|boolean
name|autoCreate
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"The number of concurrent consumers. Increase this value, if your route is slow to prevent buffering in queue."
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|)
DECL|field|concurrentConsumers
specifier|private
name|int
name|concurrentConsumers
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"ANT style pattern to match files. The file is matched against path relative to endpoint path. "
operator|+
literal|"Pattern must be also relative (not starting with slash)"
argument_list|,
name|defaultValue
operator|=
literal|"**"
argument_list|)
DECL|field|antInclude
specifier|private
name|String
name|antInclude
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Maximum size of queue between WatchService and consumer. Unbounded by default."
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
DECL|field|queueSize
specifier|private
name|int
name|queueSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|method|FileWatchEndpoint ()
specifier|public
name|FileWatchEndpoint
parameter_list|()
block|{     }
DECL|method|FileWatchEndpoint (String uri, FileWatchComponent component)
specifier|public
name|FileWatchEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|FileWatchComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|FileWatchEndpoint (String uri, String remaining, FileWatchComponent component)
specifier|public
name|FileWatchEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|FileWatchComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|setPath
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This component does not support producer"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FileWatchConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|setPath (String path)
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|getEvents ()
name|Set
argument_list|<
name|FileEventEnum
argument_list|>
name|getEvents
parameter_list|()
block|{
return|return
name|events
return|;
block|}
DECL|method|setEvents (Set<FileEventEnum> events)
specifier|public
name|void
name|setEvents
parameter_list|(
name|Set
argument_list|<
name|FileEventEnum
argument_list|>
name|events
parameter_list|)
block|{
name|this
operator|.
name|events
operator|=
name|events
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|//called via reflection
DECL|method|setEvents (String commaSeparatedEvents)
specifier|public
name|void
name|setEvents
parameter_list|(
name|String
name|commaSeparatedEvents
parameter_list|)
block|{
name|String
index|[]
name|stringArray
init|=
name|commaSeparatedEvents
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FileEventEnum
argument_list|>
name|eventsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|event
range|:
name|stringArray
control|)
block|{
name|eventsSet
operator|.
name|add
argument_list|(
name|FileEventEnum
operator|.
name|valueOf
argument_list|(
name|event
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|events
operator|=
name|eventsSet
operator|.
name|isEmpty
argument_list|()
condition|?
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|FileEventEnum
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
else|:
name|eventsSet
expr_stmt|;
block|}
DECL|method|isAutoCreate ()
specifier|public
name|boolean
name|isAutoCreate
parameter_list|()
block|{
return|return
name|autoCreate
return|;
block|}
DECL|method|setAutoCreate (boolean autoCreate)
specifier|public
name|void
name|setAutoCreate
parameter_list|(
name|boolean
name|autoCreate
parameter_list|)
block|{
name|this
operator|.
name|autoCreate
operator|=
name|autoCreate
expr_stmt|;
block|}
DECL|method|getConcurrentConsumers ()
specifier|public
name|int
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|concurrentConsumers
return|;
block|}
DECL|method|setConcurrentConsumers (int concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|concurrentConsumers
operator|=
name|concurrentConsumers
expr_stmt|;
block|}
DECL|method|getQueueSize ()
specifier|public
name|int
name|getQueueSize
parameter_list|()
block|{
return|return
name|queueSize
return|;
block|}
DECL|method|setQueueSize (int queueSize)
specifier|public
name|void
name|setQueueSize
parameter_list|(
name|int
name|queueSize
parameter_list|)
block|{
name|this
operator|.
name|queueSize
operator|=
name|queueSize
expr_stmt|;
block|}
DECL|method|getAntInclude ()
specifier|public
name|String
name|getAntInclude
parameter_list|()
block|{
return|return
name|antInclude
return|;
block|}
DECL|method|setAntInclude (String antInclude)
specifier|public
name|void
name|setAntInclude
parameter_list|(
name|String
name|antInclude
parameter_list|)
block|{
name|this
operator|.
name|antInclude
operator|=
name|antInclude
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|FileWatchComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|FileWatchComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isMultipleConsumersSupported ()
specifier|public
name|boolean
name|isMultipleConsumersSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

