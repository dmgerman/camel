begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.watch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|ClosedWatchServiceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardWatchEventKinds
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|WatchEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|WatchKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|WatchService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
operator|.
name|constants
operator|.
name|FileEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
operator|.
name|constants
operator|.
name|FileEventEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
operator|.
name|utils
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
operator|.
name|utils
operator|.
name|WatchServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|AntPathMatcher
import|;
end_import

begin_comment
comment|/**  * The file-watch consumer.  */
end_comment

begin_class
DECL|class|FileWatchConsumer
specifier|public
class|class
name|FileWatchConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|watchService
specifier|private
name|WatchService
name|watchService
decl_stmt|;
DECL|field|watchDirExecutorService
specifier|private
name|ExecutorService
name|watchDirExecutorService
decl_stmt|;
DECL|field|pollExecutorService
specifier|private
name|ExecutorService
name|pollExecutorService
decl_stmt|;
DECL|field|eventQueue
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|FileEvent
argument_list|>
name|eventQueue
decl_stmt|;
DECL|field|baseDirectory
specifier|private
name|Path
name|baseDirectory
decl_stmt|;
DECL|field|antPathMatcher
specifier|private
name|AntPathMatcher
name|antPathMatcher
decl_stmt|;
DECL|field|kinds
specifier|private
name|WatchEvent
operator|.
name|Kind
index|[]
name|kinds
decl_stmt|;
DECL|method|FileWatchConsumer (FileWatchEndpoint endpoint, Processor processor)
specifier|public
name|FileWatchConsumer
parameter_list|(
name|FileWatchEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getQueueSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|eventQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|eventQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|antPathMatcher
operator|=
operator|new
name|AntPathMatcher
argument_list|()
expr_stmt|;
name|baseDirectory
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|FileEventEnum
argument_list|>
name|events
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|endpoint
operator|.
name|getEvents
argument_list|()
argument_list|)
decl_stmt|;
name|kinds
operator|=
operator|new
name|WatchEvent
operator|.
name|Kind
index|[
name|endpoint
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
name|kinds
index|[
literal|0
index|]
operator|=
name|StandardWatchEventKinds
operator|.
name|OVERFLOW
expr_stmt|;
comment|//always watch Overflow event for logging purposes
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileEventEnum
name|fileEventEnum
range|:
name|events
control|)
block|{
name|kinds
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|fileEventEnum
operator|.
name|kind
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|baseDirectory
argument_list|)
condition|)
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|isAutoCreate
argument_list|()
condition|)
block|{
name|baseDirectory
operator|=
name|Files
operator|.
name|createDirectories
argument_list|(
name|baseDirectory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Path must exists when autoCreate = false"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|baseDirectory
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Parameter path must be directory, %s given"
argument_list|,
name|baseDirectory
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|watchService
operator|=
name|baseDirectory
operator|.
name|getFileSystem
argument_list|()
operator|.
name|newWatchService
argument_list|()
expr_stmt|;
name|watchDirExecutorService
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadExecutor
argument_list|(
name|this
argument_list|,
literal|"CamelFileWatchService"
argument_list|)
expr_stmt|;
name|pollExecutorService
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newFixedThreadPool
argument_list|(
name|this
argument_list|,
literal|"CamelFileWatchPoll"
argument_list|,
name|getEndpoint
argument_list|()
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|baseDirectory
argument_list|)
expr_stmt|;
name|watchDirExecutorService
operator|.
name|submit
argument_list|(
operator|new
name|WatchServiceRunnable
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getEndpoint
argument_list|()
operator|.
name|getConcurrentConsumers
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|pollExecutorService
operator|.
name|submit
argument_list|(
operator|new
name|PollRunnable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|register (Path path)
specifier|private
name|void
name|register
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|registered
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|WatchServiceUtils
operator|.
name|isPollingWatchService
argument_list|(
name|watchService
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Find enum value SensitivityWatchEventModifier.HIGH using reflection to avoid importing com.sun packages
name|Class
argument_list|<
name|?
argument_list|>
name|sensitivityWatchEventModifierClass
init|=
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
literal|"com.sun.nio.file.SensitivityWatchEventModifier"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sensitivityWatchEventModifierClass
operator|!=
literal|null
condition|)
block|{
name|Field
name|enumConstantField
init|=
name|sensitivityWatchEventModifierClass
operator|.
name|getDeclaredField
argument_list|(
literal|"HIGH"
argument_list|)
decl_stmt|;
name|WatchEvent
operator|.
name|Modifier
name|sensitivityModifier
init|=
operator|(
name|WatchEvent
operator|.
name|Modifier
operator|)
name|enumConstantField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|sensitivityModifier
operator|!=
literal|null
condition|)
block|{
name|path
operator|.
name|register
argument_list|(
name|watchService
argument_list|,
name|kinds
argument_list|,
name|sensitivityModifier
argument_list|)
expr_stmt|;
name|registered
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|NoSuchFieldException
name|ignored
parameter_list|)
block|{
comment|// This is expected on JVMs where PollingWatchService or SensitivityWatchEventModifier are not available
block|}
block|}
if|if
condition|(
operator|!
name|registered
condition|)
block|{
name|path
operator|.
name|register
argument_list|(
name|watchService
argument_list|,
name|kinds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|watchService
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|watchService
operator|.
name|close
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"WatchService closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Cannot close WatchService"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|watchDirExecutorService
operator|!=
literal|null
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownNow
argument_list|(
name|watchDirExecutorService
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pollExecutorService
operator|!=
literal|null
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownNow
argument_list|(
name|pollExecutorService
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
name|doStart
argument_list|()
expr_stmt|;
block|}
DECL|method|prepareExchange (FileEvent event)
specifier|private
name|Exchange
name|prepareExchange
parameter_list|(
name|FileEvent
name|event
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|File
name|file
init|=
name|event
operator|.
name|getEventPath
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|FileWatchComponent
operator|.
name|EVENT_TYPE_HEADER
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME_ONLY
argument_list|,
name|event
operator|.
name|getEventPath
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"CamelFileAbsolute"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|absolutePath
init|=
name|PathUtils
operator|.
name|normalizeToString
argument_list|(
name|event
operator|.
name|getEventPath
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"CamelFileAbsolutePath"
argument_list|,
name|absolutePath
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_PATH
argument_list|,
name|absolutePath
argument_list|)
expr_stmt|;
specifier|final
name|String
name|relativePath
init|=
name|PathUtils
operator|.
name|normalizeToString
argument_list|(
name|baseDirectory
operator|.
name|relativize
argument_list|(
name|event
operator|.
name|getEventPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|relativePath
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"CamelFileRelativePath"
argument_list|,
name|relativePath
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME_CONSUMED
argument_list|,
name|relativePath
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_PARENT
argument_list|,
name|PathUtils
operator|.
name|normalizeToString
argument_list|(
name|event
operator|.
name|getEventPath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|event
operator|.
name|getEventDate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
DECL|method|matchFilters (FileEvent fileEvent)
specifier|private
name|boolean
name|matchFilters
parameter_list|(
name|FileEvent
name|fileEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getEndpoint
argument_list|()
operator|.
name|getEvents
argument_list|()
operator|.
name|contains
argument_list|(
name|fileEvent
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|pattern
init|=
name|getEndpoint
argument_list|()
operator|.
name|getAntInclude
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|==
literal|null
operator|||
name|pattern
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|antPathMatcher
operator|.
name|match
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getAntInclude
argument_list|()
argument_list|,
name|PathUtils
operator|.
name|normalizeToString
argument_list|(
name|baseDirectory
operator|.
name|relativize
argument_list|(
name|fileEvent
operator|.
name|getEventPath
argument_list|()
argument_list|)
argument_list|)
comment|// match against relativized path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|FileWatchEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|FileWatchEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|class|WatchServiceRunnable
class|class
name|WatchServiceRunnable
implements|implements
name|Runnable
block|{
DECL|field|watchKey
name|WatchKey
name|watchKey
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|take
argument_list|()
operator|&&
name|isRunAllowed
argument_list|()
operator|&&
operator|!
name|isStoppingOrStopped
argument_list|()
operator|&&
operator|!
name|isSuspendingOrSuspended
argument_list|()
condition|)
block|{
for|for
control|(
name|WatchEvent
argument_list|<
name|?
argument_list|>
name|event
range|:
name|watchKey
operator|.
name|pollEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|kind
argument_list|()
operator|.
name|equals
argument_list|(
name|StandardWatchEventKinds
operator|.
name|OVERFLOW
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"OVERFLOW occurred. Some events may be lost"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Path
name|base
init|=
operator|(
name|Path
operator|)
name|watchKey
operator|.
name|watchable
argument_list|()
decl_stmt|;
name|WatchEvent
argument_list|<
name|Path
argument_list|>
name|eventCast
init|=
name|cast
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|FileEvent
name|fileEvent
init|=
operator|new
name|FileEvent
argument_list|(
name|FileEventEnum
operator|.
name|valueOf
argument_list|(
name|eventCast
operator|.
name|kind
argument_list|()
argument_list|)
argument_list|,
name|base
operator|.
name|resolve
argument_list|(
name|eventCast
operator|.
name|context
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchFilters
argument_list|(
name|fileEvent
argument_list|)
condition|)
block|{
name|eventQueue
operator|.
name|offer
argument_list|(
name|fileEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|take ()
specifier|private
name|boolean
name|take
parameter_list|()
block|{
if|if
condition|(
name|watchKey
operator|!=
literal|null
operator|&&
operator|!
name|watchKey
operator|.
name|reset
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"WatchDirRunnable stopping, because watchKey is in invalid state"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|watchKey
operator|=
name|watchService
operator|.
name|take
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ClosedWatchServiceException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"WatchDirRunnable stopping because "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|cast (WatchEvent<?> event)
specifier|private
name|WatchEvent
argument_list|<
name|Path
argument_list|>
name|cast
parameter_list|(
name|WatchEvent
argument_list|<
name|?
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|!=
literal|null
operator|&&
name|event
operator|.
name|kind
argument_list|()
operator|.
name|type
argument_list|()
operator|==
name|Path
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|WatchEvent
argument_list|<
name|Path
argument_list|>
operator|)
name|event
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|event
operator|+
literal|" to WatchEvent<Path>"
argument_list|)
throw|;
block|}
block|}
DECL|class|PollRunnable
class|class
name|PollRunnable
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isStoppingOrStopped
argument_list|()
operator|&&
operator|!
name|isSuspendingOrSuspended
argument_list|()
condition|)
block|{
name|FileEvent
name|event
decl_stmt|;
try|try
block|{
name|event
operator|=
name|eventQueue
operator|.
name|poll
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Exchange
name|exchange
init|=
name|prepareExchange
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

