begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregate.cassandra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
operator|.
name|CassandraUnitUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|util
operator|.
name|HeaderDto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_comment
comment|/**  * Unite test for {@link CassandraAggregationRepository}  */
end_comment

begin_class
DECL|class|CassandraAggregationSerializedHeadersTest
specifier|public
class|class
name|CassandraAggregationSerializedHeadersTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|cluster
specifier|private
name|Cluster
name|cluster
decl_stmt|;
DECL|field|aggregationRepository
specifier|private
name|CassandraAggregationRepository
name|aggregationRepository
decl_stmt|;
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"Skipping test running in CI server - Fails sometimes on CI server with address already in use"
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
literal|"BUILD_ID"
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|CassandraUnitUtils
operator|.
name|startEmbeddedCassandra
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|CassandraUnitUtils
operator|.
name|cassandraCluster
argument_list|()
expr_stmt|;
name|Session
name|rootSession
init|=
name|cluster
operator|.
name|connect
argument_list|()
decl_stmt|;
name|CassandraUnitUtils
operator|.
name|loadCQLDataSet
argument_list|(
name|rootSession
argument_list|,
literal|"NamedAggregationDataSet.cql"
argument_list|)
expr_stmt|;
name|rootSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|aggregationRepository
operator|=
operator|new
name|NamedCassandraAggregationRepository
argument_list|(
name|cluster
argument_list|,
name|CassandraUnitUtils
operator|.
name|KEYSPACE
argument_list|,
literal|"ID"
argument_list|)
expr_stmt|;
name|aggregationRepository
operator|.
name|setTable
argument_list|(
literal|"NAMED_CAMEL_AGGREGATION"
argument_list|)
expr_stmt|;
name|aggregationRepository
operator|.
name|setAllowSerializedHeaders
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|aggregationRepository
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|doPreSetup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|aggregationRepository
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|CassandraUnitUtils
operator|.
name|cleanEmbeddedCassandra
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore shutdown errors
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|AggregationStrategy
name|aggregationStrategy
init|=
operator|new
name|AggregationStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Exchange
name|aggregate
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
if|if
condition|(
name|oldExchange
operator|==
literal|null
condition|)
block|{
return|return
name|newExchange
return|;
block|}
name|String
name|oldBody
init|=
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|newBody
init|=
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|oldBody
operator|+
literal|","
operator|+
name|newBody
argument_list|)
expr_stmt|;
return|return
name|oldExchange
return|;
block|}
block|}
decl_stmt|;
name|from
argument_list|(
literal|"direct:input"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|header
argument_list|(
literal|"aggregationId"
argument_list|)
argument_list|,
name|aggregationStrategy
argument_list|)
operator|.
name|completionSize
argument_list|(
literal|3
argument_list|)
operator|.
name|completionTimeout
argument_list|(
literal|3000L
argument_list|)
operator|.
name|aggregationRepository
argument_list|(
name|aggregationRepository
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:output"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|send (HeaderDto aggregationId, String body)
specifier|private
name|void
name|send
parameter_list|(
name|HeaderDto
name|aggregationId
parameter_list|,
name|String
name|body
parameter_list|)
block|{
name|super
operator|.
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:input"
argument_list|,
name|body
argument_list|,
literal|"aggregationId"
argument_list|,
name|aggregationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregationRoute ()
specifier|public
name|void
name|testAggregationRoute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Given
name|MockEndpoint
name|mockOutput
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:output"
argument_list|)
decl_stmt|;
name|mockOutput
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|mockOutput
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
literal|"A,C,E"
argument_list|,
literal|"B,D"
argument_list|)
expr_stmt|;
name|HeaderDto
name|dto1
init|=
operator|new
name|HeaderDto
argument_list|(
literal|"org"
argument_list|,
literal|"company"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|HeaderDto
name|dto2
init|=
operator|new
name|HeaderDto
argument_list|(
literal|"org"
argument_list|,
literal|"company"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// When
name|send
argument_list|(
name|dto1
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|dto2
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|dto1
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|dto2
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|dto1
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
comment|// Then
name|mockOutput
operator|.
name|assertIsSatisfied
argument_list|(
literal|4000L
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

