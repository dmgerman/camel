begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cassandra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
operator|.
name|CassandraComponent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link CassandraComponent}  */
end_comment

begin_class
DECL|class|CassandraComponentClusterBuilderTest
specifier|public
class|class
name|CassandraComponentClusterBuilderTest
block|{
DECL|field|component
specifier|private
specifier|final
name|CassandraComponent
name|component
init|=
operator|new
name|CassandraComponent
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|component
operator|.
name|setCamelContext
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterBuilder_Basic ()
specifier|public
name|void
name|testClusterBuilder_Basic
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"clusterName"
argument_list|,
literal|"cluster"
argument_list|)
expr_stmt|;
name|Cluster
operator|.
name|Builder
name|clusterBuilder
init|=
name|component
operator|.
name|clusterBuilder
argument_list|(
literal|"127.0.0.1,127.0.0.2/keyspace"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|clusterBuilder
operator|.
name|getContactPoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterBuilder
operator|.
name|getContactPoints
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterBuilder
operator|.
name|getContactPoints
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
literal|"127.0.0.2"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cluster"
argument_list|,
name|clusterBuilder
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keyspace"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"keyspace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterBuilder_Port ()
specifier|public
name|void
name|testClusterBuilder_Port
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"clusterName"
argument_list|,
literal|"cluster"
argument_list|)
expr_stmt|;
name|Cluster
operator|.
name|Builder
name|clusterBuilder
init|=
name|component
operator|.
name|clusterBuilder
argument_list|(
literal|"127.0.0.1,127.0.0.2:1234/keyspace"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|clusterBuilder
operator|.
name|getContactPoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterBuilder
operator|.
name|getContactPoints
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|clusterBuilder
operator|.
name|getContactPoints
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterBuilder
operator|.
name|getContactPoints
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
literal|"127.0.0.2"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|clusterBuilder
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProtocolOptions
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cluster"
argument_list|,
name|clusterBuilder
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keyspace"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"keyspace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterBuilder_Simplest ()
specifier|public
name|void
name|testClusterBuilder_Simplest
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Cluster
operator|.
name|Builder
name|clusterBuilder
init|=
name|component
operator|.
name|clusterBuilder
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clusterBuilder
operator|.
name|getContactPoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterBuilder
operator|.
name|getContactPoints
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"keyspace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

