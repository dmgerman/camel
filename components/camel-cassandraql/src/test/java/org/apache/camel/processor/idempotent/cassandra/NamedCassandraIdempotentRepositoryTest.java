begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.idempotent.cassandra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|idempotent
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
operator|.
name|BaseCassandraTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
operator|.
name|CassandraUnitUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cassandraunit
operator|.
name|CassandraCQLUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link CassandraIdempotentRepository}  */
end_comment

begin_class
DECL|class|NamedCassandraIdempotentRepositoryTest
specifier|public
class|class
name|NamedCassandraIdempotentRepositoryTest
extends|extends
name|BaseCassandraTest
block|{
annotation|@
name|Rule
DECL|field|cassandraRule
specifier|public
name|CassandraCQLUnit
name|cassandraRule
init|=
name|CassandraUnitUtils
operator|.
name|cassandraCQLUnit
argument_list|(
literal|"NamedIdempotentDataSet.cql"
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|Cluster
name|cluster
decl_stmt|;
DECL|field|session
specifier|private
name|Session
name|session
decl_stmt|;
DECL|field|idempotentRepository
specifier|private
name|CassandraIdempotentRepository
name|idempotentRepository
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|canTest
argument_list|()
condition|)
block|{
name|cluster
operator|=
name|CassandraUnitUtils
operator|.
name|cassandraCluster
argument_list|()
expr_stmt|;
name|session
operator|=
name|cluster
operator|.
name|connect
argument_list|(
name|CassandraUnitUtils
operator|.
name|KEYSPACE
argument_list|)
expr_stmt|;
name|idempotentRepository
operator|=
operator|new
name|NamedCassandraIdempotentRepository
argument_list|(
name|session
argument_list|,
literal|"ID"
argument_list|)
expr_stmt|;
name|idempotentRepository
operator|.
name|setTable
argument_list|(
literal|"NAMED_CAMEL_IDEMPOTENT"
argument_list|)
expr_stmt|;
name|idempotentRepository
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|canTest
argument_list|()
condition|)
block|{
name|idempotentRepository
operator|.
name|stop
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|exists (String key)
specifier|private
name|boolean
name|exists
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|session
operator|.
name|execute
argument_list|(
literal|"select KEY from NAMED_CAMEL_IDEMPOTENT where NAME=? and KEY=?"
argument_list|,
literal|"ID"
argument_list|,
name|key
argument_list|)
operator|.
name|one
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|Test
DECL|method|testAddNotExists ()
specifier|public
name|void
name|testAddNotExists
parameter_list|()
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Given
name|String
name|key
init|=
literal|"Add_NotExists"
decl_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// When
name|boolean
name|result
init|=
name|idempotentRepository
operator|.
name|add
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Then
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddExists ()
specifier|public
name|void
name|testAddExists
parameter_list|()
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Given
name|String
name|key
init|=
literal|"Add_Exists"
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// When
name|boolean
name|result
init|=
name|idempotentRepository
operator|.
name|add
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Then
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainsNotExists ()
specifier|public
name|void
name|testContainsNotExists
parameter_list|()
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Given
name|String
name|key
init|=
literal|"Contains_NotExists"
decl_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// When
name|boolean
name|result
init|=
name|idempotentRepository
operator|.
name|contains
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Then
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainsExists ()
specifier|public
name|void
name|testContainsExists
parameter_list|()
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Given
name|String
name|key
init|=
literal|"Contains_Exists"
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// When
name|boolean
name|result
init|=
name|idempotentRepository
operator|.
name|contains
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Then
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveNotExists ()
specifier|public
name|void
name|testRemoveNotExists
parameter_list|()
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Given
name|String
name|key
init|=
literal|"Remove_NotExists"
decl_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// When
name|boolean
name|result
init|=
name|idempotentRepository
operator|.
name|contains
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Then
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveExists ()
specifier|public
name|void
name|testRemoveExists
parameter_list|()
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Given
name|String
name|key
init|=
literal|"Remove_Exists"
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// When
name|boolean
name|result
init|=
name|idempotentRepository
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Then
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Given
name|String
name|key
init|=
literal|"Remove_Exists"
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// When
name|idempotentRepository
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Then
name|assertFalse
argument_list|(
name|idempotentRepository
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

