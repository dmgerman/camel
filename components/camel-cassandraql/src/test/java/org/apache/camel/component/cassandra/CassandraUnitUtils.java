begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cassandra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cassandraunit
operator|.
name|CQLDataLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cassandraunit
operator|.
name|CassandraCQLUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cassandraunit
operator|.
name|dataset
operator|.
name|CQLDataSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cassandraunit
operator|.
name|dataset
operator|.
name|cql
operator|.
name|ClassPathCQLDataSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cassandraunit
operator|.
name|utils
operator|.
name|EmbeddedCassandraServerHelper
import|;
end_import

begin_comment
comment|/**  * Util methods to manage Cassandra in Unit tests  */
end_comment

begin_class
DECL|class|CassandraUnitUtils
specifier|public
specifier|final
class|class
name|CassandraUnitUtils
block|{
DECL|field|HOST
specifier|public
specifier|static
specifier|final
name|String
name|HOST
init|=
literal|"127.0.0.1"
decl_stmt|;
DECL|field|KEYSPACE
specifier|public
specifier|static
specifier|final
name|String
name|KEYSPACE
init|=
literal|"camel_ks"
decl_stmt|;
DECL|field|cassandraCQLUnit
specifier|private
specifier|static
name|CassandraCQLUnit
name|cassandraCQLUnit
decl_stmt|;
DECL|method|CassandraUnitUtils ()
specifier|private
name|CassandraUnitUtils
parameter_list|()
block|{     }
comment|/**      * Create Cassandra JUnit Rule.      */
DECL|method|cassandraCQLUnit ()
specifier|public
specifier|static
name|CassandraCQLUnit
name|cassandraCQLUnit
parameter_list|()
block|{
if|if
condition|(
name|cassandraCQLUnit
operator|==
literal|null
condition|)
block|{
name|cassandraCQLUnit
operator|=
name|cassandraCQLUnit
argument_list|(
literal|"BasicDataSet.cql"
argument_list|)
expr_stmt|;
block|}
return|return
name|cassandraCQLUnit
return|;
block|}
DECL|method|cassandraCQLUnit (String dataSetCql)
specifier|public
specifier|static
name|CassandraCQLUnit
name|cassandraCQLUnit
parameter_list|(
name|String
name|dataSetCql
parameter_list|)
block|{
return|return
name|cassandraCQLUnit
argument_list|(
name|cqlDataSet
argument_list|(
name|dataSetCql
argument_list|)
argument_list|)
return|;
block|}
DECL|method|cqlDataSet (String dataSetCql)
specifier|public
specifier|static
name|CQLDataSet
name|cqlDataSet
parameter_list|(
name|String
name|dataSetCql
parameter_list|)
block|{
return|return
operator|new
name|ClassPathCQLDataSet
argument_list|(
name|dataSetCql
argument_list|,
name|KEYSPACE
argument_list|)
return|;
block|}
DECL|method|loadCQLDataSet (Session session, String dataSetCql)
specifier|public
specifier|static
name|void
name|loadCQLDataSet
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|dataSetCql
parameter_list|)
block|{
name|CQLDataLoader
name|loader
init|=
operator|new
name|CQLDataLoader
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|loader
operator|.
name|load
argument_list|(
name|cqlDataSet
argument_list|(
name|dataSetCql
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|cassandraCQLUnit (CQLDataSet dataset)
specifier|public
specifier|static
name|CassandraCQLUnit
name|cassandraCQLUnit
parameter_list|(
name|CQLDataSet
name|dataset
parameter_list|)
block|{
return|return
operator|new
name|CassandraCQLUnit
argument_list|(
name|dataset
argument_list|,
literal|"/camel-cassandra.yaml"
argument_list|)
return|;
block|}
comment|/**      * Start embedded Cassandra.      */
DECL|method|startEmbeddedCassandra ()
specifier|public
specifier|static
name|void
name|startEmbeddedCassandra
parameter_list|()
throws|throws
name|Exception
block|{
name|EmbeddedCassandraServerHelper
operator|.
name|startEmbeddedCassandra
argument_list|(
literal|"/camel-cassandra.yaml"
argument_list|,
literal|"target/camel-cassandra"
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clean embedded Cassandra.      */
DECL|method|cleanEmbeddedCassandra ()
specifier|public
specifier|static
name|void
name|cleanEmbeddedCassandra
parameter_list|()
throws|throws
name|Exception
block|{
name|EmbeddedCassandraServerHelper
operator|.
name|cleanEmbeddedCassandra
argument_list|()
expr_stmt|;
block|}
DECL|method|cassandraCluster ()
specifier|public
specifier|static
name|Cluster
name|cassandraCluster
parameter_list|()
block|{
return|return
name|Cluster
operator|.
name|builder
argument_list|()
operator|.
name|addContactPoint
argument_list|(
name|HOST
argument_list|)
operator|.
name|withClusterName
argument_list|(
literal|"camel-cluster"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

