begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.cassandra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|ConsistencyLevel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Cassandra 2 CQL3 producer.  *<dl>  *<dt>In Message</dt>  *<dd>Bound parameters: Collection of Objects, Array of Objects, Simple Object<dd>  *<dt>Out Message</dt>  *<dd>List of all Rows<dd>  *<dl>  */
end_comment

begin_class
DECL|class|CassandraProducer
specifier|public
class|class
name|CassandraProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CassandraProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|preparedStatement
specifier|private
name|PreparedStatement
name|preparedStatement
decl_stmt|;
DECL|method|CassandraProducer (CassandraEndpoint endpoint)
specifier|public
name|CassandraProducer
parameter_list|(
name|CassandraEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|CassandraEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|CassandraEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|getCqlParams (Message message)
specifier|private
name|Object
index|[]
name|getCqlParams
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Object
name|cqlParamsObj
init|=
name|message
operator|.
name|getBody
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
index|[]
name|cqlParams
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|objectArrayClazz
init|=
name|Object
index|[]
operator|.
name|class
decl_stmt|;
if|if
condition|(
name|objectArrayClazz
operator|.
name|isInstance
argument_list|(
name|cqlParamsObj
argument_list|)
condition|)
block|{
name|cqlParams
operator|=
name|objectArrayClazz
operator|.
name|cast
argument_list|(
name|cqlParamsObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cqlParamsObj
operator|instanceof
name|Collection
condition|)
block|{
specifier|final
name|Collection
name|cqlParamsColl
init|=
operator|(
name|Collection
operator|)
name|cqlParamsObj
decl_stmt|;
name|cqlParams
operator|=
name|cqlParamsColl
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cqlParams
operator|=
operator|new
name|Object
index|[]
block|{
name|cqlParamsObj
block|}
expr_stmt|;
block|}
return|return
name|cqlParams
return|;
block|}
comment|/**      * Execute CQL query using incoming message body has statement parameters.      */
DECL|method|execute (Message message)
specifier|private
name|ResultSet
name|execute
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|String
name|messageCql
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CassandraConstants
operator|.
name|CQL_QUERY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
index|[]
name|cqlParams
init|=
name|getCqlParams
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ResultSet
name|resultSet
decl_stmt|;
name|PreparedStatement
name|lPreparedStatement
decl_stmt|;
if|if
condition|(
name|messageCql
operator|==
literal|null
operator|||
name|messageCql
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// URI CQL
if|if
condition|(
name|preparedStatement
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|preparedStatement
operator|=
name|getEndpoint
argument_list|()
operator|.
name|prepareStatement
argument_list|()
expr_stmt|;
block|}
name|lPreparedStatement
operator|=
name|this
operator|.
name|preparedStatement
expr_stmt|;
block|}
else|else
block|{
comment|// Message CQL
name|lPreparedStatement
operator|=
name|getEndpoint
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|messageCql
argument_list|)
expr_stmt|;
block|}
name|Session
name|session
init|=
name|getEndpoint
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|cqlParams
operator|==
literal|null
condition|)
block|{
name|resultSet
operator|=
name|session
operator|.
name|execute
argument_list|(
name|lPreparedStatement
operator|.
name|bind
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultSet
operator|=
name|session
operator|.
name|execute
argument_list|(
name|lPreparedStatement
operator|.
name|bind
argument_list|(
name|cqlParams
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resultSet
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultSet
name|resultSet
init|=
name|execute
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
decl_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|fillMessage
argument_list|(
name|resultSet
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

