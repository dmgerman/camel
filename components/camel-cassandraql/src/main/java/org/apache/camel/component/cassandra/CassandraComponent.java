begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cassandra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link CassandraEndpoint}. This  * component is based on Datastax Java Driver for Cassandra.  *<p/>  * URI examples:  *<ul>  *<li>cql:localhost/keyspace</li>  *<li>cql:host1,host2/keyspace</li>  *<li>cql:host1:host2:9042/keyspace</li>  *<li>cql:host1:host2</li>  *<li>cql:bean:sessionRef</li>  *<li>cql:bean:clusterRef/keyspace</li>  *</ul>  */
end_comment

begin_class
DECL|class|CassandraComponent
specifier|public
class|class
name|CassandraComponent
extends|extends
name|DefaultComponent
block|{
DECL|method|CassandraComponent ()
specifier|public
name|CassandraComponent
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|CassandraComponent (CamelContext context)
specifier|public
name|CassandraComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|beanRef
init|=
literal|null
decl_stmt|;
name|String
name|hosts
init|=
literal|null
decl_stmt|;
name|String
name|port
init|=
literal|null
decl_stmt|;
name|String
name|keyspace
init|=
literal|null
decl_stmt|;
name|int
name|pos
init|=
name|remaining
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|keyspace
operator|=
name|remaining
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|remaining
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// if its a bean reference to either a cluster/session then lookup
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
literal|"bean:"
argument_list|)
condition|)
block|{
name|beanRef
operator|=
name|remaining
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// hosts and port (port is optional)
if|if
condition|(
name|remaining
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|port
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|remaining
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|hosts
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|remaining
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hosts
operator|=
name|remaining
expr_stmt|;
block|}
block|}
name|ResultSetConversionStrategy
name|rs
init|=
literal|null
decl_stmt|;
name|String
name|strategy
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"resultSetConversionStrategy"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|!=
literal|null
condition|)
block|{
name|rs
operator|=
name|ResultSetConversionStrategies
operator|.
name|fromName
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
name|CassandraEndpoint
name|endpoint
init|=
operator|new
name|CassandraEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setBean
argument_list|(
name|beanRef
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setHosts
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
name|int
name|num
init|=
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setPort
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setKeyspace
argument_list|(
name|keyspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setResultSetConversionStrategy
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
block|}
end_class

end_unit

