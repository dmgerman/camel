begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.cassandra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link CassandraEndpoint}. This  * component is based on Datastax Java Driver for Cassandra.  *  * URI examples:  *<ul>  *<li>cql:localhost/keyspace</li>  *<li>cql:host1,host2/keyspace</li>  *<li>cql:host1:host2:9042/keyspace</li>  *<li>cql:host1:host2</li>  *<li>cql:bean:sessionRef</li>  *<li>cql:bean:clusterRef/keyspace</li>  *</ul>  */
end_comment

begin_class
DECL|class|CassandraComponent
specifier|public
class|class
name|CassandraComponent
extends|extends
name|DefaultComponent
block|{
comment|/**      * Regular expression for parsing host name      */
DECL|field|HOST_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|HOST_PATTERN
init|=
literal|"[\\w.\\-]+"
decl_stmt|;
comment|/**      * Regular expression for parsing several hosts name      */
DECL|field|HOSTS_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|HOSTS_PATTERN
init|=
name|HOST_PATTERN
operator|+
literal|"(?:,"
operator|+
name|HOST_PATTERN
operator|+
literal|")*"
decl_stmt|;
comment|/**      * Regular expression for parsing port      */
DECL|field|PORT_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|PORT_PATTERN
init|=
literal|"\\d+"
decl_stmt|;
comment|/**      * Regular expression for parsing keyspace      */
DECL|field|KEYSPACE_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|KEYSPACE_PATTERN
init|=
literal|"\\w+"
decl_stmt|;
comment|/**      * Regular expression for parsing URI host1,host2:9042/keyspace      */
DECL|field|HOSTS_PORT_KEYSPACE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|HOSTS_PORT_KEYSPACE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^("
operator|+
name|HOSTS_PATTERN
operator|+
literal|")?"
comment|// Hosts
operator|+
literal|"(?::("
operator|+
name|PORT_PATTERN
operator|+
literal|"))?"
comment|// Port
operator|+
literal|"(?:/("
operator|+
name|KEYSPACE_PATTERN
operator|+
literal|"))?$"
argument_list|)
decl_stmt|;
comment|// Keyspace
comment|/**      * Regular expression for parsing URI bean:sessionRef      */
DECL|field|BEAN_REF_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|BEAN_REF_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^bean:([\\w.\\-]+)(?:/("
operator|+
name|KEYSPACE_PATTERN
operator|+
literal|"))?$"
argument_list|)
decl_stmt|;
comment|// Keyspace
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Cluster
name|cluster
decl_stmt|;
name|Session
name|session
decl_stmt|;
name|String
name|keyspace
decl_stmt|;
comment|// Try URI of type cql:bean:session or
name|Matcher
name|beanRefMatcher
init|=
name|BEAN_REF_PATTERN
operator|.
name|matcher
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanRefMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|beanRefName
init|=
name|beanRefMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|keyspace
operator|=
name|beanRefMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Object
name|bean
init|=
name|EndpointHelper
operator|.
name|resolveParameter
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
literal|"#"
operator|+
name|beanRefName
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bean
operator|instanceof
name|Session
condition|)
block|{
name|session
operator|=
operator|(
name|Session
operator|)
name|bean
expr_stmt|;
name|cluster
operator|=
name|session
operator|.
name|getCluster
argument_list|()
expr_stmt|;
name|keyspace
operator|=
name|session
operator|.
name|getLoggedKeyspace
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bean
operator|instanceof
name|Cluster
condition|)
block|{
name|cluster
operator|=
operator|(
name|Cluster
operator|)
name|bean
expr_stmt|;
name|session
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CQL Bean type should be of type Session or Cluster but was "
operator|+
name|bean
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Try URI of type cql:host1,host2:9042/keyspace
name|cluster
operator|=
name|clusterBuilder
argument_list|(
name|remaining
argument_list|,
name|parameters
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|session
operator|=
literal|null
expr_stmt|;
name|keyspace
operator|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"keyspace"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Endpoint
name|endpoint
init|=
operator|new
name|CassandraEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|cluster
argument_list|,
name|session
argument_list|,
name|keyspace
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
comment|/**      * Parse URI of the form cql://host1,host2:9042/keyspace and create a      * {@link Cluster.Builder}      */
DECL|method|clusterBuilder (String remaining, Map<String, Object> parameters)
specifier|protected
name|Cluster
operator|.
name|Builder
name|clusterBuilder
parameter_list|(
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|Cluster
operator|.
name|Builder
name|clusterBuilder
init|=
name|Cluster
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|HOSTS_PORT_KEYSPACE_PATTERN
operator|.
name|matcher
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Parse hosts
name|String
name|hostsGroup
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostsGroup
operator|!=
literal|null
operator|&&
operator|!
name|hostsGroup
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|hosts
init|=
name|hostsGroup
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|clusterBuilder
operator|=
name|clusterBuilder
operator|.
name|addContactPoints
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
block|}
comment|// Parse port
name|String
name|portGroup
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|portGroup
operator|!=
literal|null
condition|)
block|{
name|Integer
name|port
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|portGroup
argument_list|)
decl_stmt|;
name|clusterBuilder
operator|=
name|clusterBuilder
operator|.
name|withPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
comment|// Parse keyspace
name|String
name|keyspaceGroup
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyspaceGroup
operator|!=
literal|null
operator|&&
operator|!
name|keyspaceGroup
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|keyspace
init|=
name|keyspaceGroup
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"keyspace"
argument_list|,
name|keyspace
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid CQL URI"
argument_list|)
throw|;
block|}
comment|// Cluster name parameter
name|String
name|clusterName
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"clusterName"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterName
operator|!=
literal|null
condition|)
block|{
name|clusterBuilder
operator|=
name|clusterBuilder
operator|.
name|withClusterName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
block|}
comment|// Username and password
name|String
name|username
init|=
name|getAndRemoveOrResolveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"username"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|getAndRemoveOrResolveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"password"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
operator|&&
operator|!
name|username
operator|.
name|isEmpty
argument_list|()
operator|&&
name|password
operator|!=
literal|null
condition|)
block|{
name|clusterBuilder
operator|.
name|withCredentials
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterBuilder
return|;
block|}
block|}
end_class

end_unit

