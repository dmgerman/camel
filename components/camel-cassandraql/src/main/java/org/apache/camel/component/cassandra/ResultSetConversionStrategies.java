begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cassandra
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Row
import|;
end_import

begin_comment
comment|/**  * Implementations of {@link ResultSetConversionStrategy}  */
end_comment

begin_class
DECL|class|ResultSetConversionStrategies
specifier|public
specifier|final
class|class
name|ResultSetConversionStrategies
block|{
DECL|field|LIMIT_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|LIMIT_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^LIMIT_(\\d+)$"
argument_list|)
decl_stmt|;
DECL|field|ALL
specifier|private
specifier|static
specifier|final
name|ResultSetConversionStrategy
name|ALL
init|=
operator|new
name|ResultSetConversionStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getBody
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
return|return
name|resultSet
operator|.
name|all
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|ONE
specifier|private
specifier|static
specifier|final
name|ResultSetConversionStrategy
name|ONE
init|=
operator|new
name|ResultSetConversionStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getBody
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
return|return
name|resultSet
operator|.
name|one
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|method|ResultSetConversionStrategies ()
specifier|private
name|ResultSetConversionStrategies
parameter_list|()
block|{     }
comment|/**      * Retrieve all rows.      * Message body contains a big list of {@link Row}s      */
DECL|method|all ()
specifier|public
specifier|static
name|ResultSetConversionStrategy
name|all
parameter_list|()
block|{
return|return
name|ALL
return|;
block|}
comment|/**      * Retrieve a single row.      * Message body contains a single {@link Row}      */
DECL|method|one ()
specifier|public
specifier|static
name|ResultSetConversionStrategy
name|one
parameter_list|()
block|{
return|return
name|ONE
return|;
block|}
DECL|class|LimitResultSetConversionStrategy
specifier|private
specifier|static
class|class
name|LimitResultSetConversionStrategy
implements|implements
name|ResultSetConversionStrategy
block|{
DECL|field|rowMax
specifier|private
specifier|final
name|int
name|rowMax
decl_stmt|;
DECL|method|LimitResultSetConversionStrategy (int rowMax)
specifier|public
name|LimitResultSetConversionStrategy
parameter_list|(
name|int
name|rowMax
parameter_list|)
block|{
name|this
operator|.
name|rowMax
operator|=
name|rowMax
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBody (ResultSet resultSet)
specifier|public
name|Object
name|getBody
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
name|List
argument_list|<
name|Row
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|(
name|rowMax
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Row
argument_list|>
name|rowIter
init|=
name|resultSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rowIter
operator|.
name|hasNext
argument_list|()
operator|&&
name|rowCount
operator|<
name|rowMax
condition|)
block|{
name|rows
operator|.
name|add
argument_list|(
name|rowIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
block|}
return|return
name|rows
return|;
block|}
block|}
comment|/**      * Retrieve a limited list of rows.      * Message body contains a list of {@link Row} containing at most rowMax rows.      */
DECL|method|limit (int rowMax)
specifier|public
specifier|static
name|ResultSetConversionStrategy
name|limit
parameter_list|(
name|int
name|rowMax
parameter_list|)
block|{
return|return
operator|new
name|LimitResultSetConversionStrategy
argument_list|(
name|rowMax
argument_list|)
return|;
block|}
comment|/**      * Get {@link ResultSetConversionStrategy} from String      */
DECL|method|fromName (String name)
specifier|public
specifier|static
name|ResultSetConversionStrategy
name|fromName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"ALL"
argument_list|)
condition|)
block|{
return|return
name|ResultSetConversionStrategies
operator|.
name|all
argument_list|()
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"ONE"
argument_list|)
condition|)
block|{
return|return
name|ResultSetConversionStrategies
operator|.
name|one
argument_list|()
return|;
block|}
name|Matcher
name|matcher
init|=
name|LIMIT_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|int
name|limit
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|limit
argument_list|(
name|limit
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown conversion strategy "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

