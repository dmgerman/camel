begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sip
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sip
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|ClientTransaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|Dialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|InvalidArgumentException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|ListeningPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|SipFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|SipStack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|address
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|address
operator|.
name|AddressFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|address
operator|.
name|SipURI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|CSeqHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|CallIdHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|ContactHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|ContentTypeHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|EventHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|ExpiresHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|ExtensionHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|FromHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|HeaderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|MaxForwardsHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|ToHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|ViaHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|message
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|message
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|SipConfiguration
specifier|public
class|class
name|SipConfiguration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SipConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|IMPLEMENTATION
specifier|private
specifier|static
specifier|final
name|String
name|IMPLEMENTATION
init|=
literal|"gov.nist"
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|parameters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
decl_stmt|;
DECL|field|component
specifier|private
name|SipComponent
name|component
decl_stmt|;
DECL|field|addressFactory
specifier|private
name|AddressFactory
name|addressFactory
decl_stmt|;
DECL|field|messageFactory
specifier|private
name|MessageFactory
name|messageFactory
decl_stmt|;
DECL|field|headerFactory
specifier|private
name|HeaderFactory
name|headerFactory
decl_stmt|;
DECL|field|sipStack
specifier|private
name|SipStack
name|sipStack
decl_stmt|;
DECL|field|listeningPoint
specifier|private
name|ListeningPoint
name|listeningPoint
decl_stmt|;
DECL|field|protocol
specifier|private
name|String
name|protocol
decl_stmt|;
DECL|field|sipUri
specifier|private
name|SipURI
name|sipUri
decl_stmt|;
DECL|field|stackName
specifier|private
name|String
name|stackName
decl_stmt|;
DECL|field|transport
specifier|private
name|String
name|transport
decl_stmt|;
DECL|field|maxForwards
specifier|private
name|int
name|maxForwards
decl_stmt|;
DECL|field|consumer
specifier|private
name|boolean
name|consumer
decl_stmt|;
DECL|field|eventHeaderName
specifier|private
name|String
name|eventHeaderName
decl_stmt|;
DECL|field|eventId
specifier|private
name|String
name|eventId
decl_stmt|;
DECL|field|msgExpiration
specifier|private
name|int
name|msgExpiration
decl_stmt|;
DECL|field|useRouterForAllUris
specifier|private
name|String
name|useRouterForAllUris
decl_stmt|;
DECL|field|receiveTimeoutMillis
specifier|private
name|long
name|receiveTimeoutMillis
decl_stmt|;
DECL|field|maxMessageSize
specifier|private
name|String
name|maxMessageSize
decl_stmt|;
DECL|field|cacheConnections
specifier|private
name|String
name|cacheConnections
decl_stmt|;
DECL|field|contentType
specifier|private
name|String
name|contentType
decl_stmt|;
DECL|field|contentSubType
specifier|private
name|String
name|contentSubType
decl_stmt|;
DECL|field|automaticDialogSupport
specifier|private
name|String
name|automaticDialogSupport
decl_stmt|;
DECL|field|nistServerLog
specifier|private
name|String
name|nistServerLog
decl_stmt|;
DECL|field|nistDebugLog
specifier|private
name|String
name|nistDebugLog
decl_stmt|;
DECL|field|nistTraceLevel
specifier|private
name|String
name|nistTraceLevel
decl_stmt|;
DECL|field|sipFactory
specifier|private
name|SipFactory
name|sipFactory
decl_stmt|;
DECL|field|fromUser
specifier|private
name|String
name|fromUser
decl_stmt|;
DECL|field|fromHost
specifier|private
name|String
name|fromHost
decl_stmt|;
DECL|field|fromPort
specifier|private
name|int
name|fromPort
decl_stmt|;
DECL|field|toUser
specifier|private
name|String
name|toUser
decl_stmt|;
DECL|field|toHost
specifier|private
name|String
name|toHost
decl_stmt|;
DECL|field|toPort
specifier|private
name|int
name|toPort
decl_stmt|;
DECL|field|presenceAgent
specifier|private
name|boolean
name|presenceAgent
decl_stmt|;
DECL|field|fromHeader
specifier|private
name|FromHeader
name|fromHeader
decl_stmt|;
DECL|field|toHeader
specifier|private
name|ToHeader
name|toHeader
decl_stmt|;
DECL|field|viaHeaders
specifier|private
name|ArrayList
argument_list|<
name|ViaHeader
argument_list|>
name|viaHeaders
decl_stmt|;
DECL|field|contentTypeHeader
specifier|private
name|ContentTypeHeader
name|contentTypeHeader
decl_stmt|;
DECL|field|callIdHeader
specifier|private
name|CallIdHeader
name|callIdHeader
decl_stmt|;
DECL|field|maxForwardsHeader
specifier|private
name|MaxForwardsHeader
name|maxForwardsHeader
decl_stmt|;
DECL|field|contactHeader
specifier|private
name|ContactHeader
name|contactHeader
decl_stmt|;
DECL|field|eventHeader
specifier|private
name|EventHeader
name|eventHeader
decl_stmt|;
DECL|field|extensionHeader
specifier|private
name|ExtensionHeader
name|extensionHeader
decl_stmt|;
DECL|field|expiresHeader
specifier|private
name|ExpiresHeader
name|expiresHeader
decl_stmt|;
DECL|field|clientTransactionId
specifier|private
name|ClientTransaction
name|clientTransactionId
decl_stmt|;
DECL|field|dialog
specifier|private
name|Dialog
name|dialog
decl_stmt|;
DECL|method|SipConfiguration ()
specifier|public
name|SipConfiguration
parameter_list|()
block|{
name|sipFactory
operator|=
name|SipFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|sipFactory
operator|.
name|setPathName
argument_list|(
name|IMPLEMENTATION
argument_list|)
expr_stmt|;
name|setStackName
argument_list|(
literal|"NAME_NOT_SET"
argument_list|)
expr_stmt|;
name|setTransport
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|setMaxMessageSize
argument_list|(
literal|"1048576"
argument_list|)
expr_stmt|;
name|setCacheConnections
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|setAutomaticDialogSupport
argument_list|(
literal|"off"
argument_list|)
expr_stmt|;
name|setContentType
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|setContentSubType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|setReceiveTimeoutMillis
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|setConsumer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setUseRouterForAllUris
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|setMsgExpiration
argument_list|(
literal|3600
argument_list|)
expr_stmt|;
name|setPresenceAgent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|initialize (URI uri, Map<String, Object> parameters, SipComponent component)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|SipComponent
name|component
parameter_list|)
block|{
name|this
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|this
operator|.
name|setComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
DECL|method|parseURI ()
specifier|public
name|void
name|parseURI
parameter_list|()
throws|throws
name|Exception
block|{
name|protocol
operator|=
name|uri
operator|.
name|getScheme
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|protocol
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"sip"
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|protocol
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"sips"
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized SIP protocol: "
operator|+
name|protocol
operator|+
literal|" for uri: "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|settings
init|=
name|URISupport
operator|.
name|parseParameters
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"stackName"
argument_list|)
condition|)
block|{
name|setStackName
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"stackName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"transport"
argument_list|)
condition|)
block|{
name|setTransport
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"transport"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"maxMessageSize"
argument_list|)
condition|)
block|{
name|setMaxMessageSize
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"maxMessageSize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"cacheConnections"
argument_list|)
condition|)
block|{
name|setCacheConnections
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"cacheConnections"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"contentType"
argument_list|)
condition|)
block|{
name|setContentType
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"contentType"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"contentSubType"
argument_list|)
condition|)
block|{
name|setContentSubType
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"contentSubType"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"maxForwards"
argument_list|)
condition|)
block|{
name|setMaxForwards
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"maxForwards"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"receiveTimeoutMillis"
argument_list|)
condition|)
block|{
name|setReceiveTimeoutMillis
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"receiveTimeoutMillis"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"eventHeaderName"
argument_list|)
condition|)
block|{
name|setEventHeaderName
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"eventHeaderName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"eventId"
argument_list|)
condition|)
block|{
name|setEventId
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"eventId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"useRouterForAllUris"
argument_list|)
condition|)
block|{
name|setUseRouterForAllUris
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"useRouterForAllUris"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"msgExpiration"
argument_list|)
condition|)
block|{
name|setMsgExpiration
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"msgExpiration"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"presenceAgent"
argument_list|)
condition|)
block|{
name|setPresenceAgent
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"presenceAgent"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|consumer
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"fromUser"
argument_list|)
condition|)
block|{
name|setFromUser
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"fromUser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"fromHost"
argument_list|)
condition|)
block|{
name|setFromHost
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"fromHost"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"fromPort"
argument_list|)
condition|)
block|{
name|setFromPort
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"fromPort"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setToUser
argument_list|(
name|uri
operator|.
name|getUserInfo
argument_list|()
argument_list|)
expr_stmt|;
name|setToHost
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|setToPort
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setFromUser
argument_list|(
name|uri
operator|.
name|getUserInfo
argument_list|()
argument_list|)
expr_stmt|;
name|setFromHost
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|setFromPort
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|presenceAgent
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"toUser"
argument_list|)
condition|)
block|{
name|setToUser
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"toUser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"toHost"
argument_list|)
condition|)
block|{
name|setToHost
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"toHost"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
literal|"toPort"
argument_list|)
condition|)
block|{
name|setToPort
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|settings
operator|.
name|get
argument_list|(
literal|"toPort"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|nistDebugLog
operator|=
name|component
operator|.
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"implementationDebugLogFile"
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nistServerLog
operator|=
name|component
operator|.
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"implementationServerLogFile"
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nistTraceLevel
operator|=
name|component
operator|.
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"implementationTraceLevel"
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Consumer:"
operator|+
name|consumer
operator|+
literal|" StackName:"
operator|+
name|stackName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"From User: "
operator|+
name|getFromUser
argument_list|()
operator|+
literal|" From host: "
operator|+
name|getFromHost
argument_list|()
operator|+
literal|" From Port: "
operator|+
name|getFromPort
argument_list|()
argument_list|)
expr_stmt|;
name|createFactoriesAndHeaders
argument_list|(
name|parameters
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|sipUri
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"sipUri"
argument_list|,
name|SipURI
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|sipUri
operator|==
literal|null
condition|)
block|{
name|sipUri
operator|=
name|addressFactory
operator|.
name|createSipURI
argument_list|(
name|getToUser
argument_list|()
argument_list|,
name|getToHost
argument_list|()
operator|+
literal|":"
operator|+
name|getToPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|fromUser
argument_list|,
literal|"From User"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|fromHost
argument_list|,
literal|"From Host"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|fromPort
argument_list|,
literal|"From Port"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|eventHeader
argument_list|,
literal|"Event Header"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|eventHeaderName
argument_list|,
literal|"Event Header Name"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|eventId
argument_list|,
literal|"Event Id"
argument_list|)
expr_stmt|;
block|}
DECL|method|createFactoriesAndHeaders (Map<String, Object> parameters, SipComponent component)
specifier|private
name|void
name|createFactoriesAndHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|SipComponent
name|component
parameter_list|)
throws|throws
name|Exception
block|{
name|headerFactory
operator|=
name|sipFactory
operator|.
name|createHeaderFactory
argument_list|()
expr_stmt|;
name|addressFactory
operator|=
name|sipFactory
operator|.
name|createAddressFactory
argument_list|()
expr_stmt|;
name|setMessageFactory
argument_list|(
name|sipFactory
operator|.
name|createMessageFactory
argument_list|()
argument_list|)
expr_stmt|;
name|fromHeader
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"fromHeader"
argument_list|,
name|FromHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromHeader
operator|==
literal|null
condition|)
block|{
name|createFromHeader
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|presenceAgent
condition|)
block|{
name|toHeader
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"toHeader"
argument_list|,
name|ToHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|toHeader
operator|==
literal|null
condition|)
block|{
name|createToHeader
argument_list|()
expr_stmt|;
block|}
block|}
name|viaHeaders
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"viaHeaders"
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|viaHeaders
operator|==
literal|null
condition|)
block|{
name|createViaHeaders
argument_list|()
expr_stmt|;
block|}
name|contentTypeHeader
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"contentTypeHeader"
argument_list|,
name|ContentTypeHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentTypeHeader
operator|==
literal|null
condition|)
block|{
name|createContentTypeHeader
argument_list|()
expr_stmt|;
block|}
name|callIdHeader
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"callIdHeader"
argument_list|,
name|CallIdHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|maxForwardsHeader
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"maxForwardsHeader"
argument_list|,
name|MaxForwardsHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxForwardsHeader
operator|==
literal|null
condition|)
block|{
name|createMaxForwardsHeader
argument_list|()
expr_stmt|;
block|}
comment|// Optional Headers
name|eventHeader
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"eventHeader"
argument_list|,
name|EventHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventHeader
operator|==
literal|null
condition|)
block|{
name|createEventHeader
argument_list|()
expr_stmt|;
block|}
name|contactHeader
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"contactHeader"
argument_list|,
name|ContactHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|contactHeader
operator|==
literal|null
condition|)
block|{
name|createContactHeader
argument_list|()
expr_stmt|;
block|}
name|expiresHeader
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"expiresHeader"
argument_list|,
name|ExpiresHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|expiresHeader
operator|==
literal|null
condition|)
block|{
name|createExpiresHeader
argument_list|()
expr_stmt|;
block|}
name|extensionHeader
operator|=
name|component
operator|.
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"extensionHeader"
argument_list|,
name|ExtensionHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|createSipRequest (long sequenceNumber, String requestMethod, Object body)
specifier|public
name|Request
name|createSipRequest
parameter_list|(
name|long
name|sequenceNumber
parameter_list|,
name|String
name|requestMethod
parameter_list|,
name|Object
name|body
parameter_list|)
throws|throws
name|ParseException
throws|,
name|InvalidArgumentException
block|{
comment|//SipConfiguration configuration = sipPublisher.getConfiguration();
name|CSeqHeader
name|cSeqHeader
init|=
name|getHeaderFactory
argument_list|()
operator|.
name|createCSeqHeader
argument_list|(
name|sequenceNumber
argument_list|,
name|requestMethod
argument_list|)
decl_stmt|;
comment|// Create the request.
name|Request
name|request
init|=
name|getMessageFactory
argument_list|()
operator|.
name|createRequest
argument_list|(
name|getSipUri
argument_list|()
argument_list|,
name|requestMethod
argument_list|,
name|getCallIdHeader
argument_list|()
argument_list|,
name|cSeqHeader
argument_list|,
name|getFromHeader
argument_list|()
argument_list|,
name|getToHeader
argument_list|()
argument_list|,
name|getViaHeaders
argument_list|()
argument_list|,
name|getMaxForwardsHeader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getEventHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addHeader
argument_list|(
name|getEventHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getExpiresHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addHeader
argument_list|(
name|getExpiresHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getContactHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addHeader
argument_list|(
name|getContactHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getExtensionHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addHeader
argument_list|(
name|getExtensionHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setContent
argument_list|(
name|body
argument_list|,
name|getContentTypeHeader
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
DECL|method|createFromHeader ()
specifier|private
name|void
name|createFromHeader
parameter_list|()
throws|throws
name|ParseException
block|{
name|SipURI
name|fromAddress
init|=
name|getAddressFactory
argument_list|()
operator|.
name|createSipURI
argument_list|(
name|getFromUser
argument_list|()
argument_list|,
name|getFromHost
argument_list|()
argument_list|)
decl_stmt|;
name|fromAddress
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|getFromPort
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Address
name|fromNameAddress
init|=
name|addressFactory
operator|.
name|createAddress
argument_list|(
name|fromAddress
argument_list|)
decl_stmt|;
name|fromNameAddress
operator|.
name|setDisplayName
argument_list|(
name|getFromUser
argument_list|()
argument_list|)
expr_stmt|;
name|setFromHeader
argument_list|(
name|headerFactory
operator|.
name|createFromHeader
argument_list|(
name|fromNameAddress
argument_list|,
name|getFromUser
argument_list|()
operator|+
literal|"_Header"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createToHeader ()
specifier|private
name|void
name|createToHeader
parameter_list|()
throws|throws
name|ParseException
block|{
name|SipURI
name|toAddress
init|=
name|getAddressFactory
argument_list|()
operator|.
name|createSipURI
argument_list|(
name|getToUser
argument_list|()
argument_list|,
name|getToHost
argument_list|()
argument_list|)
decl_stmt|;
name|toAddress
operator|.
name|setPort
argument_list|(
name|getToPort
argument_list|()
argument_list|)
expr_stmt|;
name|Address
name|toNameAddress
init|=
name|addressFactory
operator|.
name|createAddress
argument_list|(
name|toAddress
argument_list|)
decl_stmt|;
name|toNameAddress
operator|.
name|setDisplayName
argument_list|(
name|getToUser
argument_list|()
argument_list|)
expr_stmt|;
name|setToHeader
argument_list|(
name|headerFactory
operator|.
name|createToHeader
argument_list|(
name|toNameAddress
argument_list|,
name|getToUser
argument_list|()
operator|+
literal|"_Header"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createViaHeaders ()
specifier|private
name|void
name|createViaHeaders
parameter_list|()
throws|throws
name|ParseException
throws|,
name|InvalidArgumentException
block|{
name|viaHeaders
operator|=
operator|new
name|ArrayList
argument_list|<
name|ViaHeader
argument_list|>
argument_list|()
expr_stmt|;
name|ViaHeader
name|viaHeader
init|=
name|headerFactory
operator|.
name|createViaHeader
argument_list|(
name|getFromHost
argument_list|()
argument_list|,
name|getFromPort
argument_list|()
argument_list|,
name|getTransport
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|viaHeaders
operator|.
name|add
argument_list|(
name|viaHeader
argument_list|)
expr_stmt|;
block|}
DECL|method|createContentTypeHeader ()
specifier|private
name|void
name|createContentTypeHeader
parameter_list|()
throws|throws
name|ParseException
block|{
name|setContentTypeHeader
argument_list|(
name|headerFactory
operator|.
name|createContentTypeHeader
argument_list|(
name|getContentType
argument_list|()
argument_list|,
name|getContentSubType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createMaxForwardsHeader ()
specifier|private
name|void
name|createMaxForwardsHeader
parameter_list|()
throws|throws
name|ParseException
throws|,
name|InvalidArgumentException
block|{
name|setMaxForwardsHeader
argument_list|(
name|headerFactory
operator|.
name|createMaxForwardsHeader
argument_list|(
name|getMaxForwards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createEventHeader ()
specifier|private
name|void
name|createEventHeader
parameter_list|()
throws|throws
name|ParseException
block|{
name|eventHeader
operator|=
name|getHeaderFactory
argument_list|()
operator|.
name|createEventHeader
argument_list|(
name|getEventHeaderName
argument_list|()
argument_list|)
expr_stmt|;
name|eventHeader
operator|.
name|setEventId
argument_list|(
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createContactHeader ()
specifier|private
name|void
name|createContactHeader
parameter_list|()
throws|throws
name|ParseException
block|{
name|SipURI
name|contactURI
init|=
name|addressFactory
operator|.
name|createSipURI
argument_list|(
name|getFromUser
argument_list|()
argument_list|,
name|getFromHost
argument_list|()
argument_list|)
decl_stmt|;
name|contactURI
operator|.
name|setTransportParam
argument_list|(
name|getTransport
argument_list|()
argument_list|)
expr_stmt|;
name|contactURI
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|getFromPort
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Address
name|contactAddress
init|=
name|addressFactory
operator|.
name|createAddress
argument_list|(
name|contactURI
argument_list|)
decl_stmt|;
comment|// Add the contact address.
name|contactAddress
operator|.
name|setDisplayName
argument_list|(
name|getFromUser
argument_list|()
argument_list|)
expr_stmt|;
name|contactHeader
operator|=
name|headerFactory
operator|.
name|createContactHeader
argument_list|(
name|contactAddress
argument_list|)
expr_stmt|;
block|}
DECL|method|createExpiresHeader ()
specifier|private
name|void
name|createExpiresHeader
parameter_list|()
throws|throws
name|ParseException
throws|,
name|InvalidArgumentException
block|{
name|expiresHeader
operator|=
name|getHeaderFactory
argument_list|()
operator|.
name|createExpiresHeader
argument_list|(
name|getMsgExpiration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createInitialProperties ()
name|Properties
name|createInitialProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"javax.sip.STACK_NAME"
argument_list|,
name|getStackName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"gov.nist.javax.sip.MAX_MESSAGE_SIZE"
argument_list|,
name|getMaxMessageSize
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS"
argument_list|,
name|getCacheConnections
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"javax.sip.USE_ROUTER_FOR_ALL_URIS"
argument_list|,
name|getUseRouterForAllUris
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|nistDebugLog
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|nistServerLog
operator|!=
literal|null
operator|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"gov.nist.javax.sip.DEBUG_LOG"
argument_list|,
name|nistDebugLog
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"gov.nist.javax.sip.SERVER_LOG"
argument_list|,
name|nistServerLog
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"gov.nist.javax.sip.TRACE_LEVEL"
argument_list|,
name|nistTraceLevel
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
DECL|method|getAddressFactory ()
specifier|public
name|AddressFactory
name|getAddressFactory
parameter_list|()
block|{
return|return
name|addressFactory
return|;
block|}
DECL|method|setAddressFactory (AddressFactory addressFactory)
specifier|public
name|void
name|setAddressFactory
parameter_list|(
name|AddressFactory
name|addressFactory
parameter_list|)
block|{
name|this
operator|.
name|addressFactory
operator|=
name|addressFactory
expr_stmt|;
block|}
DECL|method|getMessageFactory ()
specifier|public
name|MessageFactory
name|getMessageFactory
parameter_list|()
block|{
return|return
name|messageFactory
return|;
block|}
DECL|method|setMessageFactory (MessageFactory messageFactory)
specifier|public
name|void
name|setMessageFactory
parameter_list|(
name|MessageFactory
name|messageFactory
parameter_list|)
block|{
name|this
operator|.
name|messageFactory
operator|=
name|messageFactory
expr_stmt|;
block|}
DECL|method|getHeaderFactory ()
specifier|public
name|HeaderFactory
name|getHeaderFactory
parameter_list|()
block|{
return|return
name|headerFactory
return|;
block|}
DECL|method|setHeaderFactory (HeaderFactory headerFactory)
specifier|public
name|void
name|setHeaderFactory
parameter_list|(
name|HeaderFactory
name|headerFactory
parameter_list|)
block|{
name|this
operator|.
name|headerFactory
operator|=
name|headerFactory
expr_stmt|;
block|}
DECL|method|getSipStack ()
specifier|public
name|SipStack
name|getSipStack
parameter_list|()
block|{
return|return
name|sipStack
return|;
block|}
DECL|method|setSipStack (SipStack sipStack)
specifier|public
name|void
name|setSipStack
parameter_list|(
name|SipStack
name|sipStack
parameter_list|)
block|{
name|this
operator|.
name|sipStack
operator|=
name|sipStack
expr_stmt|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
DECL|method|setProtocol (String protocol)
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
DECL|method|getSipUri ()
specifier|public
name|SipURI
name|getSipUri
parameter_list|()
block|{
return|return
name|sipUri
return|;
block|}
DECL|method|setSipUri (SipURI sipUri)
specifier|public
name|void
name|setSipUri
parameter_list|(
name|SipURI
name|sipUri
parameter_list|)
block|{
name|this
operator|.
name|sipUri
operator|=
name|sipUri
expr_stmt|;
block|}
DECL|method|getStackName ()
specifier|public
name|String
name|getStackName
parameter_list|()
block|{
return|return
name|stackName
return|;
block|}
DECL|method|setStackName (String stackName)
specifier|public
name|void
name|setStackName
parameter_list|(
name|String
name|stackName
parameter_list|)
block|{
name|this
operator|.
name|stackName
operator|=
name|stackName
expr_stmt|;
block|}
DECL|method|getTransport ()
specifier|public
name|String
name|getTransport
parameter_list|()
block|{
return|return
name|transport
return|;
block|}
DECL|method|setTransport (String transport)
specifier|public
name|void
name|setTransport
parameter_list|(
name|String
name|transport
parameter_list|)
block|{
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
block|}
DECL|method|getMaxMessageSize ()
specifier|public
name|String
name|getMaxMessageSize
parameter_list|()
block|{
return|return
name|maxMessageSize
return|;
block|}
DECL|method|setMaxMessageSize (String maxMessageSize)
specifier|public
name|void
name|setMaxMessageSize
parameter_list|(
name|String
name|maxMessageSize
parameter_list|)
block|{
name|this
operator|.
name|maxMessageSize
operator|=
name|maxMessageSize
expr_stmt|;
block|}
DECL|method|getAutomaticDialogSupport ()
specifier|public
name|String
name|getAutomaticDialogSupport
parameter_list|()
block|{
return|return
name|automaticDialogSupport
return|;
block|}
DECL|method|setAutomaticDialogSupport (String automaticDialogSupport)
specifier|public
name|void
name|setAutomaticDialogSupport
parameter_list|(
name|String
name|automaticDialogSupport
parameter_list|)
block|{
name|this
operator|.
name|automaticDialogSupport
operator|=
name|automaticDialogSupport
expr_stmt|;
block|}
DECL|method|getCacheConnections ()
specifier|public
name|String
name|getCacheConnections
parameter_list|()
block|{
return|return
name|cacheConnections
return|;
block|}
DECL|method|setCacheConnections (String cacheConnections)
specifier|public
name|void
name|setCacheConnections
parameter_list|(
name|String
name|cacheConnections
parameter_list|)
block|{
name|this
operator|.
name|cacheConnections
operator|=
name|cacheConnections
expr_stmt|;
block|}
DECL|method|getListeningPoint ()
specifier|public
name|ListeningPoint
name|getListeningPoint
parameter_list|()
block|{
return|return
name|listeningPoint
return|;
block|}
DECL|method|setListeningPoint (ListeningPoint listeningPoint)
specifier|public
name|void
name|setListeningPoint
parameter_list|(
name|ListeningPoint
name|listeningPoint
parameter_list|)
block|{
name|this
operator|.
name|listeningPoint
operator|=
name|listeningPoint
expr_stmt|;
block|}
DECL|method|setContentType (String contentType)
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
return|;
block|}
DECL|method|setContentSubType (String contentSubType)
specifier|public
name|void
name|setContentSubType
parameter_list|(
name|String
name|contentSubType
parameter_list|)
block|{
name|this
operator|.
name|contentSubType
operator|=
name|contentSubType
expr_stmt|;
block|}
DECL|method|getContentSubType ()
specifier|public
name|String
name|getContentSubType
parameter_list|()
block|{
return|return
name|contentSubType
return|;
block|}
DECL|method|setMaxForwards (int maxForwards)
specifier|public
name|void
name|setMaxForwards
parameter_list|(
name|int
name|maxForwards
parameter_list|)
block|{
name|this
operator|.
name|maxForwards
operator|=
name|maxForwards
expr_stmt|;
block|}
DECL|method|getMaxForwards ()
specifier|public
name|int
name|getMaxForwards
parameter_list|()
block|{
return|return
name|maxForwards
return|;
block|}
DECL|method|setReceiveTimeoutMillis (long receiveTimeoutMillis)
specifier|public
name|void
name|setReceiveTimeoutMillis
parameter_list|(
name|long
name|receiveTimeoutMillis
parameter_list|)
block|{
name|this
operator|.
name|receiveTimeoutMillis
operator|=
name|receiveTimeoutMillis
expr_stmt|;
block|}
DECL|method|getReceiveTimeoutMillis ()
specifier|public
name|long
name|getReceiveTimeoutMillis
parameter_list|()
block|{
return|return
name|receiveTimeoutMillis
return|;
block|}
DECL|method|setParameters (Map<String, Object> parameters)
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
DECL|method|getParameters ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
DECL|method|setComponent (SipComponent component)
specifier|public
name|void
name|setComponent
parameter_list|(
name|SipComponent
name|component
parameter_list|)
block|{
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
DECL|method|getComponent ()
specifier|public
name|SipComponent
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
DECL|method|getNistServerLog ()
specifier|public
name|String
name|getNistServerLog
parameter_list|()
block|{
return|return
name|nistServerLog
return|;
block|}
DECL|method|setNistServerLog (String nistServerLog)
specifier|public
name|void
name|setNistServerLog
parameter_list|(
name|String
name|nistServerLog
parameter_list|)
block|{
name|this
operator|.
name|nistServerLog
operator|=
name|nistServerLog
expr_stmt|;
block|}
DECL|method|getNistDebugLog ()
specifier|public
name|String
name|getNistDebugLog
parameter_list|()
block|{
return|return
name|nistDebugLog
return|;
block|}
DECL|method|setNistDebugLog (String nistDebugLog)
specifier|public
name|void
name|setNistDebugLog
parameter_list|(
name|String
name|nistDebugLog
parameter_list|)
block|{
name|this
operator|.
name|nistDebugLog
operator|=
name|nistDebugLog
expr_stmt|;
block|}
DECL|method|getNistTraceLevel ()
specifier|public
name|String
name|getNistTraceLevel
parameter_list|()
block|{
return|return
name|nistTraceLevel
return|;
block|}
DECL|method|setNistTraceLevel (String nistTraceLevel)
specifier|public
name|void
name|setNistTraceLevel
parameter_list|(
name|String
name|nistTraceLevel
parameter_list|)
block|{
name|this
operator|.
name|nistTraceLevel
operator|=
name|nistTraceLevel
expr_stmt|;
block|}
DECL|method|getSipFactory ()
specifier|public
name|SipFactory
name|getSipFactory
parameter_list|()
block|{
return|return
name|sipFactory
return|;
block|}
DECL|method|setSipFactory (SipFactory sipFactory)
specifier|public
name|void
name|setSipFactory
parameter_list|(
name|SipFactory
name|sipFactory
parameter_list|)
block|{
name|this
operator|.
name|sipFactory
operator|=
name|sipFactory
expr_stmt|;
block|}
DECL|method|getFromUser ()
specifier|public
name|String
name|getFromUser
parameter_list|()
block|{
return|return
name|fromUser
return|;
block|}
DECL|method|setFromUser (String fromUser)
specifier|public
name|void
name|setFromUser
parameter_list|(
name|String
name|fromUser
parameter_list|)
block|{
name|this
operator|.
name|fromUser
operator|=
name|fromUser
expr_stmt|;
block|}
DECL|method|getFromHost ()
specifier|public
name|String
name|getFromHost
parameter_list|()
block|{
return|return
name|fromHost
return|;
block|}
DECL|method|setFromHost (String fromHost)
specifier|public
name|void
name|setFromHost
parameter_list|(
name|String
name|fromHost
parameter_list|)
block|{
name|this
operator|.
name|fromHost
operator|=
name|fromHost
expr_stmt|;
block|}
DECL|method|getFromPort ()
specifier|public
name|int
name|getFromPort
parameter_list|()
block|{
return|return
name|fromPort
return|;
block|}
DECL|method|setFromPort (int fromPort)
specifier|public
name|void
name|setFromPort
parameter_list|(
name|int
name|fromPort
parameter_list|)
block|{
name|this
operator|.
name|fromPort
operator|=
name|fromPort
expr_stmt|;
block|}
DECL|method|getToUser ()
specifier|public
name|String
name|getToUser
parameter_list|()
block|{
return|return
name|toUser
return|;
block|}
DECL|method|setToUser (String toUser)
specifier|public
name|void
name|setToUser
parameter_list|(
name|String
name|toUser
parameter_list|)
block|{
name|this
operator|.
name|toUser
operator|=
name|toUser
expr_stmt|;
block|}
DECL|method|getToHost ()
specifier|public
name|String
name|getToHost
parameter_list|()
block|{
return|return
name|toHost
return|;
block|}
DECL|method|setToHost (String toHost)
specifier|public
name|void
name|setToHost
parameter_list|(
name|String
name|toHost
parameter_list|)
block|{
name|this
operator|.
name|toHost
operator|=
name|toHost
expr_stmt|;
block|}
DECL|method|getToPort ()
specifier|public
name|int
name|getToPort
parameter_list|()
block|{
return|return
name|toPort
return|;
block|}
DECL|method|setToPort (int toPort)
specifier|public
name|void
name|setToPort
parameter_list|(
name|int
name|toPort
parameter_list|)
block|{
name|this
operator|.
name|toPort
operator|=
name|toPort
expr_stmt|;
block|}
DECL|method|getFromHeader ()
specifier|public
name|FromHeader
name|getFromHeader
parameter_list|()
block|{
return|return
name|fromHeader
return|;
block|}
DECL|method|setFromHeader (FromHeader fromHeader)
specifier|public
name|void
name|setFromHeader
parameter_list|(
name|FromHeader
name|fromHeader
parameter_list|)
block|{
name|this
operator|.
name|fromHeader
operator|=
name|fromHeader
expr_stmt|;
block|}
DECL|method|getToHeader ()
specifier|public
name|ToHeader
name|getToHeader
parameter_list|()
block|{
return|return
name|toHeader
return|;
block|}
DECL|method|setToHeader (ToHeader toHeader)
specifier|public
name|void
name|setToHeader
parameter_list|(
name|ToHeader
name|toHeader
parameter_list|)
block|{
name|this
operator|.
name|toHeader
operator|=
name|toHeader
expr_stmt|;
block|}
DECL|method|getViaHeaders ()
specifier|public
name|ArrayList
argument_list|<
name|ViaHeader
argument_list|>
name|getViaHeaders
parameter_list|()
block|{
return|return
name|viaHeaders
return|;
block|}
DECL|method|setViaHeaders (ArrayList<ViaHeader> viaHeaders)
specifier|public
name|void
name|setViaHeaders
parameter_list|(
name|ArrayList
argument_list|<
name|ViaHeader
argument_list|>
name|viaHeaders
parameter_list|)
block|{
name|this
operator|.
name|viaHeaders
operator|=
name|viaHeaders
expr_stmt|;
block|}
DECL|method|getContentTypeHeader ()
specifier|public
name|ContentTypeHeader
name|getContentTypeHeader
parameter_list|()
block|{
return|return
name|contentTypeHeader
return|;
block|}
DECL|method|setContentTypeHeader (ContentTypeHeader contentTypeHeader)
specifier|public
name|void
name|setContentTypeHeader
parameter_list|(
name|ContentTypeHeader
name|contentTypeHeader
parameter_list|)
block|{
name|this
operator|.
name|contentTypeHeader
operator|=
name|contentTypeHeader
expr_stmt|;
block|}
DECL|method|getCallIdHeader ()
specifier|public
name|CallIdHeader
name|getCallIdHeader
parameter_list|()
block|{
return|return
name|callIdHeader
return|;
block|}
DECL|method|setCallIdHeader (CallIdHeader callIdHeader)
specifier|public
name|void
name|setCallIdHeader
parameter_list|(
name|CallIdHeader
name|callIdHeader
parameter_list|)
block|{
name|this
operator|.
name|callIdHeader
operator|=
name|callIdHeader
expr_stmt|;
block|}
DECL|method|getMaxForwardsHeader ()
specifier|public
name|MaxForwardsHeader
name|getMaxForwardsHeader
parameter_list|()
block|{
return|return
name|maxForwardsHeader
return|;
block|}
DECL|method|setMaxForwardsHeader (MaxForwardsHeader maxForwardsHeader)
specifier|public
name|void
name|setMaxForwardsHeader
parameter_list|(
name|MaxForwardsHeader
name|maxForwardsHeader
parameter_list|)
block|{
name|this
operator|.
name|maxForwardsHeader
operator|=
name|maxForwardsHeader
expr_stmt|;
block|}
DECL|method|getContactHeader ()
specifier|public
name|ContactHeader
name|getContactHeader
parameter_list|()
block|{
return|return
name|contactHeader
return|;
block|}
DECL|method|setContactHeader (ContactHeader contactHeader)
specifier|public
name|void
name|setContactHeader
parameter_list|(
name|ContactHeader
name|contactHeader
parameter_list|)
block|{
name|this
operator|.
name|contactHeader
operator|=
name|contactHeader
expr_stmt|;
block|}
DECL|method|getExtensionHeader ()
specifier|public
name|ExtensionHeader
name|getExtensionHeader
parameter_list|()
block|{
return|return
name|extensionHeader
return|;
block|}
DECL|method|setExtensionHeader (ExtensionHeader extensionHeader)
specifier|public
name|void
name|setExtensionHeader
parameter_list|(
name|ExtensionHeader
name|extensionHeader
parameter_list|)
block|{
name|this
operator|.
name|extensionHeader
operator|=
name|extensionHeader
expr_stmt|;
block|}
DECL|method|setUri (URI uri)
specifier|public
name|void
name|setUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
DECL|method|setConsumer (boolean consumer)
specifier|public
name|void
name|setConsumer
parameter_list|(
name|boolean
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
DECL|method|isConsumer ()
specifier|public
name|boolean
name|isConsumer
parameter_list|()
block|{
return|return
name|consumer
return|;
block|}
DECL|method|setClientTransactionId (ClientTransaction clientTransactionId)
specifier|public
name|void
name|setClientTransactionId
parameter_list|(
name|ClientTransaction
name|clientTransactionId
parameter_list|)
block|{
name|this
operator|.
name|clientTransactionId
operator|=
name|clientTransactionId
expr_stmt|;
block|}
DECL|method|getClientTransactionId ()
specifier|public
name|ClientTransaction
name|getClientTransactionId
parameter_list|()
block|{
return|return
name|clientTransactionId
return|;
block|}
DECL|method|setDialog (Dialog dialog)
specifier|public
name|void
name|setDialog
parameter_list|(
name|Dialog
name|dialog
parameter_list|)
block|{
name|this
operator|.
name|dialog
operator|=
name|dialog
expr_stmt|;
block|}
DECL|method|getDialog ()
specifier|public
name|Dialog
name|getDialog
parameter_list|()
block|{
return|return
name|dialog
return|;
block|}
DECL|method|setEventHeader (EventHeader eventHeader)
specifier|public
name|void
name|setEventHeader
parameter_list|(
name|EventHeader
name|eventHeader
parameter_list|)
block|{
name|this
operator|.
name|eventHeader
operator|=
name|eventHeader
expr_stmt|;
block|}
DECL|method|getEventHeader ()
specifier|public
name|EventHeader
name|getEventHeader
parameter_list|()
block|{
return|return
name|eventHeader
return|;
block|}
DECL|method|setEventHeaderName (String eventHeaderName)
specifier|public
name|void
name|setEventHeaderName
parameter_list|(
name|String
name|eventHeaderName
parameter_list|)
block|{
name|this
operator|.
name|eventHeaderName
operator|=
name|eventHeaderName
expr_stmt|;
block|}
DECL|method|getEventHeaderName ()
specifier|public
name|String
name|getEventHeaderName
parameter_list|()
block|{
return|return
name|eventHeaderName
return|;
block|}
DECL|method|setEventId (String eventId)
specifier|public
name|void
name|setEventId
parameter_list|(
name|String
name|eventId
parameter_list|)
block|{
name|this
operator|.
name|eventId
operator|=
name|eventId
expr_stmt|;
block|}
DECL|method|getEventId ()
specifier|public
name|String
name|getEventId
parameter_list|()
block|{
return|return
name|eventId
return|;
block|}
DECL|method|setUseRouterForAllUris (String useRouterForAllUris)
specifier|public
name|void
name|setUseRouterForAllUris
parameter_list|(
name|String
name|useRouterForAllUris
parameter_list|)
block|{
name|this
operator|.
name|useRouterForAllUris
operator|=
name|useRouterForAllUris
expr_stmt|;
block|}
DECL|method|getUseRouterForAllUris ()
specifier|public
name|String
name|getUseRouterForAllUris
parameter_list|()
block|{
return|return
name|useRouterForAllUris
return|;
block|}
DECL|method|getMsgExpiration ()
specifier|public
name|int
name|getMsgExpiration
parameter_list|()
block|{
return|return
name|msgExpiration
return|;
block|}
DECL|method|setMsgExpiration (int msgExpiration)
specifier|public
name|void
name|setMsgExpiration
parameter_list|(
name|int
name|msgExpiration
parameter_list|)
block|{
name|this
operator|.
name|msgExpiration
operator|=
name|msgExpiration
expr_stmt|;
block|}
DECL|method|getExpiresHeader ()
specifier|public
name|ExpiresHeader
name|getExpiresHeader
parameter_list|()
block|{
return|return
name|expiresHeader
return|;
block|}
DECL|method|setExpiresHeader (ExpiresHeader expiresHeader)
specifier|public
name|void
name|setExpiresHeader
parameter_list|(
name|ExpiresHeader
name|expiresHeader
parameter_list|)
block|{
name|this
operator|.
name|expiresHeader
operator|=
name|expiresHeader
expr_stmt|;
block|}
DECL|method|isPresenceAgent ()
specifier|public
name|boolean
name|isPresenceAgent
parameter_list|()
block|{
return|return
name|presenceAgent
return|;
block|}
DECL|method|setPresenceAgent (boolean presenceAgent)
specifier|public
name|void
name|setPresenceAgent
parameter_list|(
name|boolean
name|presenceAgent
parameter_list|)
block|{
name|this
operator|.
name|presenceAgent
operator|=
name|presenceAgent
expr_stmt|;
block|}
block|}
end_class

end_unit

