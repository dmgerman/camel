begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sip.listener
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sip
operator|.
name|listener
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|Dialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|DialogTerminatedEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|IOExceptionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|RequestEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|ResponseEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|ServerTransaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|SipListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|SipProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|TransactionTerminatedEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|SubscriptionStateHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|header
operator|.
name|ViaHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|message
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|message
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sip
operator|.
name|SipSubscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|SipSubscriptionListener
specifier|public
class|class
name|SipSubscriptionListener
implements|implements
name|SipListener
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SipSubscriptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sipSubscriber
specifier|private
name|SipSubscriber
name|sipSubscriber
decl_stmt|;
DECL|field|subscriberDialog
specifier|private
name|Dialog
name|subscriberDialog
decl_stmt|;
DECL|field|forkedDialog
specifier|private
name|Dialog
name|forkedDialog
decl_stmt|;
DECL|method|SipSubscriptionListener (SipSubscriber sipSubscriber)
specifier|public
name|SipSubscriptionListener
parameter_list|(
name|SipSubscriber
name|sipSubscriber
parameter_list|)
block|{
name|this
operator|.
name|setSipSubscriber
argument_list|(
name|sipSubscriber
argument_list|)
expr_stmt|;
block|}
DECL|method|dispatchExchange (Object response)
specifier|private
name|void
name|dispatchExchange
parameter_list|(
name|Object
name|response
parameter_list|)
throws|throws
name|CamelException
block|{
name|Exchange
name|exchange
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consumer Dispatching the received notification along the route"
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|=
name|sipSubscriber
operator|.
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|response
argument_list|)
expr_stmt|;
try|try
block|{
name|sipSubscriber
operator|.
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Error in consumer while dispatching exchange"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|processRequest (RequestEvent requestReceivedEvent)
specifier|public
name|void
name|processRequest
parameter_list|(
name|RequestEvent
name|requestReceivedEvent
parameter_list|)
block|{
name|Request
name|request
init|=
name|requestReceivedEvent
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ServerTransaction
name|serverTransactionId
init|=
name|requestReceivedEvent
operator|.
name|getServerTransaction
argument_list|()
decl_stmt|;
name|String
name|viaBranch
init|=
operator|(
call|(
name|ViaHeader
call|)
argument_list|(
name|request
operator|.
name|getHeaders
argument_list|(
name|ViaHeader
operator|.
name|NAME
argument_list|)
operator|.
name|next
argument_list|()
argument_list|)
operator|)
operator|.
name|getParameter
argument_list|(
literal|"branch"
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server Transaction Id:"
operator|+
name|serverTransactionId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received From Branch:"
operator|+
name|viaBranch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
name|Request
operator|.
name|NOTIFY
argument_list|)
condition|)
block|{
name|processNotify
argument_list|(
name|requestReceivedEvent
argument_list|,
name|serverTransactionId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processNotify (RequestEvent requestEvent, ServerTransaction serverTransactionId)
specifier|public
specifier|synchronized
name|void
name|processNotify
parameter_list|(
name|RequestEvent
name|requestEvent
parameter_list|,
name|ServerTransaction
name|serverTransactionId
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Notification received at Subscriber"
argument_list|)
expr_stmt|;
block|}
name|SipProvider
name|provider
init|=
operator|(
name|SipProvider
operator|)
name|requestEvent
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Request
name|notify
init|=
name|requestEvent
operator|.
name|getRequest
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|serverTransactionId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ServerTransaction is null. Creating new Server transaction"
argument_list|)
expr_stmt|;
block|}
name|serverTransactionId
operator|=
name|provider
operator|.
name|getNewServerTransaction
argument_list|(
name|notify
argument_list|)
expr_stmt|;
block|}
name|Dialog
name|dialog
init|=
name|serverTransactionId
operator|.
name|getDialog
argument_list|()
decl_stmt|;
if|if
condition|(
name|dialog
operator|!=
name|subscriberDialog
condition|)
block|{
name|forkedDialog
operator|=
name|dialog
expr_stmt|;
block|}
comment|//Dispatch the response along the route
name|dispatchExchange
argument_list|(
name|notify
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send back an success response
name|Response
name|response
init|=
name|sipSubscriber
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMessageFactory
argument_list|()
operator|.
name|createResponse
argument_list|(
literal|200
argument_list|,
name|notify
argument_list|)
decl_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
name|sipSubscriber
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getContactHeader
argument_list|()
argument_list|)
expr_stmt|;
name|serverTransactionId
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SubscriptionStateHeader
name|subscriptionState
init|=
operator|(
name|SubscriptionStateHeader
operator|)
name|notify
operator|.
name|getHeader
argument_list|(
name|SubscriptionStateHeader
operator|.
name|NAME
argument_list|)
decl_stmt|;
comment|// Subscription is terminated?
if|if
condition|(
name|subscriptionState
operator|.
name|getState
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|SubscriptionStateHeader
operator|.
name|TERMINATED
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Subscription state is terminated. Deleting the current dialog"
argument_list|)
expr_stmt|;
block|}
name|dialog
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception thrown during Notify processing in the SipSubscriptionListener."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processResponse (ResponseEvent responseReceivedEvent)
specifier|public
name|void
name|processResponse
parameter_list|(
name|ResponseEvent
name|responseReceivedEvent
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Response received at Subscriber"
argument_list|)
expr_stmt|;
block|}
name|Response
name|response
init|=
name|responseReceivedEvent
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|Transaction
name|clientTransactionId
init|=
name|responseReceivedEvent
operator|.
name|getClientTransaction
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Response received with client transaction id "
operator|+
name|clientTransactionId
operator|+
literal|":"
operator|+
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientTransactionId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stray response -- dropping"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
DECL|method|processIOException (IOExceptionEvent exceptionEvent)
specifier|public
name|void
name|processIOException
parameter_list|(
name|IOExceptionEvent
name|exceptionEvent
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IOExceptionEvent received at Sip Subscription Listener"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processTransactionTerminated ( TransactionTerminatedEvent transactionTerminatedEvent)
specifier|public
name|void
name|processTransactionTerminated
parameter_list|(
name|TransactionTerminatedEvent
name|transactionTerminatedEvent
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"TransactionTerminatedEvent received at Sip Subscription Listener"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processDialogTerminated ( DialogTerminatedEvent dialogTerminatedEvent)
specifier|public
name|void
name|processDialogTerminated
parameter_list|(
name|DialogTerminatedEvent
name|dialogTerminatedEvent
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DialogTerminatedEvent received at Sip Subscription Listener"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processTimeout (javax.sip.TimeoutEvent timeoutEvent)
specifier|public
name|void
name|processTimeout
parameter_list|(
name|javax
operator|.
name|sip
operator|.
name|TimeoutEvent
name|timeoutEvent
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"TimeoutEvent received at Sip Subscription Listener"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setSipSubscriber (SipSubscriber sipSubscriber)
specifier|public
name|void
name|setSipSubscriber
parameter_list|(
name|SipSubscriber
name|sipSubscriber
parameter_list|)
block|{
name|this
operator|.
name|sipSubscriber
operator|=
name|sipSubscriber
expr_stmt|;
block|}
DECL|method|getSipSubscriber ()
specifier|public
name|SipSubscriber
name|getSipSubscriber
parameter_list|()
block|{
return|return
name|sipSubscriber
return|;
block|}
DECL|method|getForkedDialog ()
specifier|public
name|Dialog
name|getForkedDialog
parameter_list|()
block|{
return|return
name|forkedDialog
return|;
block|}
block|}
end_class

end_unit

