begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sip
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sip
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|ClientTransaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|Dialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|ListeningPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|SipProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|SipStack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sip
operator|.
name|message
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sip
operator|.
name|listener
operator|.
name|SipSubscriptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_class
DECL|class|SipSubscriber
specifier|public
class|class
name|SipSubscriber
extends|extends
name|DefaultConsumer
block|{
DECL|field|configuration
specifier|private
name|SipConfiguration
name|configuration
decl_stmt|;
DECL|field|sipSubscriptionListener
specifier|private
name|SipSubscriptionListener
name|sipSubscriptionListener
decl_stmt|;
DECL|field|provider
specifier|private
name|SipProvider
name|provider
decl_stmt|;
DECL|field|subscriberDialog
specifier|private
name|Dialog
name|subscriberDialog
decl_stmt|;
DECL|field|sipStack
specifier|private
name|SipStack
name|sipStack
decl_stmt|;
DECL|method|SipSubscriber (SipEndpoint sipEndpoint, Processor processor, SipConfiguration configuration)
specifier|public
name|SipSubscriber
parameter_list|(
name|SipEndpoint
name|sipEndpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|SipConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|sipEndpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|sipEndpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|.
name|setConsumer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|Properties
name|properties
init|=
name|configuration
operator|.
name|createInitialProperties
argument_list|()
decl_stmt|;
name|sipStack
operator|=
name|configuration
operator|.
name|getSipFactory
argument_list|()
operator|.
name|createSipStack
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|parseURI
argument_list|()
expr_stmt|;
name|sipSubscriptionListener
operator|=
operator|new
name|SipSubscriptionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ListeningPoint
name|listeningPoint
init|=
name|sipStack
operator|.
name|createListeningPoint
argument_list|(
name|configuration
operator|.
name|getFromHost
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|configuration
operator|.
name|getFromPort
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|configuration
operator|.
name|getTransport
argument_list|()
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|setListeningPoint
argument_list|(
name|listeningPoint
argument_list|)
expr_stmt|;
name|provider
operator|=
name|sipStack
operator|.
name|createSipProvider
argument_list|(
name|configuration
operator|.
name|getListeningPoint
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|addSipListener
argument_list|(
name|sipSubscriptionListener
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getCallIdHeader
argument_list|()
operator|==
literal|null
condition|)
block|{
name|configuration
operator|.
name|setCallIdHeader
argument_list|(
name|provider
operator|.
name|getNewCallId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create the Subscription request to register with the presence agent and receive notifications.
name|configuration
operator|.
name|setCallIdHeader
argument_list|(
name|provider
operator|.
name|getNewCallId
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
name|configuration
operator|.
name|createSipRequest
argument_list|(
literal|1
argument_list|,
name|Request
operator|.
name|SUBSCRIBE
argument_list|,
name|configuration
operator|.
name|getEventHeaderName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the subscriber transaction from request.
name|ClientTransaction
name|subscriberTransactionId
init|=
name|provider
operator|.
name|getNewClientTransaction
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// Add an Event header for the subscription.
name|request
operator|.
name|addHeader
argument_list|(
name|configuration
operator|.
name|getEventHeader
argument_list|()
argument_list|)
expr_stmt|;
name|subscriberDialog
operator|=
name|subscriberTransactionId
operator|.
name|getDialog
argument_list|()
expr_stmt|;
comment|// Send the outgoing subscription request.
name|subscriberTransactionId
operator|.
name|sendRequest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|SipConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (SipConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|SipConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|setSipSubscriptionListener (SipSubscriptionListener sipSubscriptionListener)
specifier|public
name|void
name|setSipSubscriptionListener
parameter_list|(
name|SipSubscriptionListener
name|sipSubscriptionListener
parameter_list|)
block|{
name|this
operator|.
name|sipSubscriptionListener
operator|=
name|sipSubscriptionListener
expr_stmt|;
block|}
DECL|method|getSipSubscriptionListener ()
specifier|public
name|SipSubscriptionListener
name|getSipSubscriptionListener
parameter_list|()
block|{
return|return
name|sipSubscriptionListener
return|;
block|}
DECL|method|setSipStack (SipStack sipStack)
specifier|public
name|void
name|setSipStack
parameter_list|(
name|SipStack
name|sipStack
parameter_list|)
block|{
name|this
operator|.
name|sipStack
operator|=
name|sipStack
expr_stmt|;
block|}
DECL|method|getSipStack ()
specifier|public
name|SipStack
name|getSipStack
parameter_list|()
block|{
return|return
name|sipStack
return|;
block|}
DECL|method|getProvider ()
specifier|public
name|SipProvider
name|getProvider
parameter_list|()
block|{
return|return
name|provider
return|;
block|}
DECL|method|setProvider (SipProvider provider)
specifier|public
name|void
name|setProvider
parameter_list|(
name|SipProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
block|}
end_class

end_unit

