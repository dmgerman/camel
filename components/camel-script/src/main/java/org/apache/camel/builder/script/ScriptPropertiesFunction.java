begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.script
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_class
DECL|class|ScriptPropertiesFunction
specifier|public
class|class
name|ScriptPropertiesFunction
implements|implements
name|PropertiesFunction
block|{
DECL|field|context
specifier|private
specifier|final
name|CamelContext
name|context
decl_stmt|;
DECL|method|ScriptPropertiesFunction (CamelContext context)
specifier|public
name|ScriptPropertiesFunction
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolve (String key)
specifier|public
name|String
name|resolve
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|token
init|=
name|context
operator|.
name|getPropertyPrefixToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
name|key
return|;
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|contains
argument_list|(
name|token
argument_list|)
condition|)
block|{
comment|// enclose key with tokens so placeholder can lookup and resolve it
name|key
operator|=
name|context
operator|.
name|getPropertyPrefixToken
argument_list|()
operator|+
name|key
operator|+
name|context
operator|.
name|getPropertySuffixToken
argument_list|()
expr_stmt|;
block|}
return|return
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class

end_unit

