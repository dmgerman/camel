begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.script.osgi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|script
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|ScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ScriptEngineResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|Activator
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Activator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
specifier|static
name|BundleContext
name|context
decl_stmt|;
DECL|field|bundle
specifier|private
specifier|static
name|Bundle
name|bundle
decl_stmt|;
DECL|method|getBundle ()
specifier|public
specifier|static
name|Bundle
name|getBundle
parameter_list|()
block|{
return|return
name|bundle
return|;
block|}
DECL|method|getBundleContext ()
specifier|public
specifier|static
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|resolveScriptEngine (String scriptEngineName)
specifier|public
specifier|static
name|ScriptEngine
name|resolveScriptEngine
parameter_list|(
name|String
name|scriptEngineName
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|ServiceReference
index|[]
name|refs
init|=
name|context
operator|.
name|getServiceReferences
argument_list|(
name|ScriptEngineResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No OSGi script engine resolvers available!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|refs
operator|.
name|length
operator|+
literal|" OSGi ScriptEngineResolver services"
argument_list|)
expr_stmt|;
for|for
control|(
name|ServiceReference
name|ref
range|:
name|refs
control|)
block|{
name|ScriptEngineResolver
name|resolver
init|=
operator|(
name|ScriptEngineResolver
operator|)
name|context
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|ScriptEngine
name|engine
init|=
name|resolver
operator|.
name|resolveScriptEngine
argument_list|(
name|scriptEngineName
argument_list|)
decl_stmt|;
name|context
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"OSGi resolver "
operator|+
name|resolver
operator|+
literal|" produced "
operator|+
name|scriptEngineName
operator|+
literal|" engine "
operator|+
name|engine
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|!=
literal|null
condition|)
block|{
return|return
name|engine
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|start (BundleContext context)
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Activator
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|Activator
operator|.
name|bundle
operator|=
name|context
operator|.
name|getBundle
argument_list|()
expr_stmt|;
block|}
DECL|method|stop (BundleContext context)
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Activator
operator|.
name|context
operator|=
literal|null
expr_stmt|;
name|Activator
operator|.
name|bundle
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

