begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.script
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JRubyScriptThreadSafeTest
specifier|public
class|class
name|JRubyScriptThreadSafeTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|resultEndpoint
name|MockEndpoint
name|resultEndpoint
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:error"
argument_list|)
DECL|field|errorEndpoint
name|MockEndpoint
name|errorEndpoint
decl_stmt|;
DECL|field|messageCount
specifier|final
name|int
name|messageCount
init|=
literal|200
decl_stmt|;
DECL|field|latch
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|messageCount
argument_list|)
decl_stmt|;
DECL|field|start
name|long
name|start
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpEnv
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpEnv ()
specifier|protected
name|void
name|setUpEnv
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.jruby.embed.localcontext.scope"
argument_list|,
literal|"threadsafe"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|REUSE_SCRIPT_ENGINE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// Now the default the value is not use the compiled script, as it could introduce some concurrent issue
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|COMPILE_SCRIPT
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"seda:parallel?concurrentConsumers=5"
argument_list|)
operator|.
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Throwable
name|ex
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"CamelExceptionCaught"
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
name|errorEndpoint
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"language:ruby:result = $request.body?cacheScript=true"
argument_list|)
operator|.
name|to
argument_list|(
name|resultEndpoint
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"seda:sequential?concurrentConsumers=1"
argument_list|)
operator|.
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
name|errorEndpoint
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"language:ruby:result = $request.body?cacheScript=true"
argument_list|)
operator|.
name|to
argument_list|(
name|resultEndpoint
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testParallelLocalContext ()
specifier|public
name|void
name|testParallelLocalContext
parameter_list|()
throws|throws
name|Exception
block|{
name|resultEndpoint
operator|.
name|setExpectedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|startStopWatch
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|messageCount
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:parallel"
argument_list|,
literal|"BODY"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|stopStopWatch
argument_list|()
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|checkResult
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSequentialLocalContext ()
specifier|public
name|void
name|testSequentialLocalContext
parameter_list|()
throws|throws
name|Exception
block|{
name|resultEndpoint
operator|.
name|setExpectedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|startStopWatch
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|messageCount
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:sequential"
argument_list|,
literal|"BODY"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|stopStopWatch
argument_list|()
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|checkResult
argument_list|()
expr_stmt|;
block|}
DECL|method|checkResult ()
specifier|private
name|void
name|checkResult
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|bodies
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exchange
name|exchange
range|:
name|resultEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
control|)
block|{
name|bodies
operator|.
name|add
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"duplicate bodies:"
argument_list|,
name|messageCount
argument_list|,
name|bodies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|startStopWatch ()
specifier|private
name|void
name|startStopWatch
parameter_list|()
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
DECL|method|stopStopWatch ()
specifier|private
name|void
name|stopStopWatch
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|this
operator|.
name|getTestMethodName
argument_list|()
operator|+
literal|" processing time: "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

