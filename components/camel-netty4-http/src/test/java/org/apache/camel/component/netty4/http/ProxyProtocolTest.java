begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 Red Hat, Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|ProxyProtocolTest
specifier|public
class|class
name|ProxyProtocolTest
block|{
DECL|field|context
specifier|private
specifier|final
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|method|ProxyProtocolTest ()
specifier|public
name|ProxyProtocolTest
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|originPort
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
comment|// proxy from http://localhost:port to
comment|// http://localhost:originPort/path
name|from
argument_list|(
literal|"netty-http:proxy://localhost:"
operator|+
name|port
argument_list|)
operator|.
name|to
argument_list|(
literal|"netty-http:http://localhost:"
operator|+
name|originPort
argument_list|)
expr_stmt|;
comment|// origin service that serves `"origin server"` on
comment|// http://localhost:originPort/path
name|from
argument_list|(
literal|"netty-http:http://localhost:"
operator|+
name|originPort
operator|+
literal|"/path"
argument_list|)
operator|.
name|setBody
argument_list|()
operator|.
name|constant
argument_list|(
literal|"origin server"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldProvideProxyProtocolSupport ()
specifier|public
name|void
name|shouldProvideProxyProtocolSupport
parameter_list|()
block|{
specifier|final
name|NettyHttpEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"netty-http:proxy://localhost"
argument_list|,
name|NettyHttpEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isHttpProxy
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldServeAsHttpProxy ()
specifier|public
name|void
name|shouldServeAsHttpProxy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|Proxy
operator|.
name|Type
operator|.
name|HTTP
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
argument_list|)
decl_stmt|;
comment|// request for http://test/path will be proxied by http://localhost:port
comment|// and diverted to http://localhost:originPort/path
specifier|final
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
literal|"http://test/path"
argument_list|)
operator|.
name|openConnection
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|IOUtils
operator|.
name|readLines
argument_list|(
name|stream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|containsOnly
argument_list|(
literal|"origin server"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|shutdownCamel ()
specifier|public
name|void
name|shutdownCamel
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

