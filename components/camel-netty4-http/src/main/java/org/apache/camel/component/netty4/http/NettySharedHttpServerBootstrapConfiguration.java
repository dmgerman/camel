begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyServerBootstrapConfiguration
import|;
end_import

begin_class
DECL|class|NettySharedHttpServerBootstrapConfiguration
specifier|public
class|class
name|NettySharedHttpServerBootstrapConfiguration
extends|extends
name|NettyServerBootstrapConfiguration
block|{
DECL|field|chunkedMaxContentLength
specifier|private
name|int
name|chunkedMaxContentLength
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|chunked
specifier|private
name|boolean
name|chunked
init|=
literal|true
decl_stmt|;
DECL|field|compression
specifier|private
name|boolean
name|compression
decl_stmt|;
DECL|field|maxHeaderSize
specifier|private
name|int
name|maxHeaderSize
init|=
literal|8192
decl_stmt|;
DECL|method|isChunked ()
specifier|public
name|boolean
name|isChunked
parameter_list|()
block|{
return|return
name|chunked
return|;
block|}
DECL|method|setChunked (boolean chunked)
specifier|public
name|void
name|setChunked
parameter_list|(
name|boolean
name|chunked
parameter_list|)
block|{
name|this
operator|.
name|chunked
operator|=
name|chunked
expr_stmt|;
block|}
DECL|method|getChunkedMaxContentLength ()
specifier|public
name|int
name|getChunkedMaxContentLength
parameter_list|()
block|{
return|return
name|chunkedMaxContentLength
return|;
block|}
DECL|method|setChunkedMaxContentLength (int chunkedMaxContentLength)
specifier|public
name|void
name|setChunkedMaxContentLength
parameter_list|(
name|int
name|chunkedMaxContentLength
parameter_list|)
block|{
name|this
operator|.
name|chunkedMaxContentLength
operator|=
name|chunkedMaxContentLength
expr_stmt|;
block|}
DECL|method|isCompression ()
specifier|public
name|boolean
name|isCompression
parameter_list|()
block|{
return|return
name|compression
return|;
block|}
DECL|method|setCompression (boolean compression)
specifier|public
name|void
name|setCompression
parameter_list|(
name|boolean
name|compression
parameter_list|)
block|{
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
block|}
DECL|method|getMaxHeaderSize ()
specifier|public
name|int
name|getMaxHeaderSize
parameter_list|()
block|{
return|return
name|maxHeaderSize
return|;
block|}
DECL|method|setMaxHeaderSize (int maxHeaderSize)
specifier|public
name|void
name|setMaxHeaderSize
parameter_list|(
name|int
name|maxHeaderSize
parameter_list|)
block|{
name|this
operator|.
name|maxHeaderSize
operator|=
name|maxHeaderSize
expr_stmt|;
block|}
block|}
end_class

end_unit

