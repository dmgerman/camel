begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_comment
comment|/**  * Extended configuration for using HTTP with Netty.  */
end_comment

begin_class
annotation|@
name|UriParams
DECL|class|NettyHttpConfiguration
specifier|public
class|class
name|NettyHttpConfiguration
extends|extends
name|NettyConfiguration
block|{
annotation|@
name|UriParam
DECL|field|urlDecodeHeaders
specifier|private
name|boolean
name|urlDecodeHeaders
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|mapHeaders
specifier|private
name|boolean
name|mapHeaders
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|compression
specifier|private
name|boolean
name|compression
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|throwExceptionOnFailure
specifier|private
name|boolean
name|throwExceptionOnFailure
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|transferException
specifier|private
name|boolean
name|transferException
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|matchOnUriPrefix
specifier|private
name|boolean
name|matchOnUriPrefix
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|bridgeEndpoint
specifier|private
name|boolean
name|bridgeEndpoint
decl_stmt|;
annotation|@
name|UriParam
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|disableStreamCache
specifier|private
name|boolean
name|disableStreamCache
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|send503whenSuspended
specifier|private
name|boolean
name|send503whenSuspended
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
literal|1024
operator|*
literal|1024
argument_list|)
DECL|field|chunkedMaxContentLength
specifier|private
name|int
name|chunkedMaxContentLength
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|chunked
specifier|private
name|boolean
name|chunked
init|=
literal|true
decl_stmt|;
DECL|method|NettyHttpConfiguration ()
specifier|public
name|NettyHttpConfiguration
parameter_list|()
block|{
comment|// we need sync=true as http is request/reply by nature
name|setSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setServerInitializerFactory
argument_list|(
operator|new
name|HttpServerInitializerFactory
argument_list|()
argument_list|)
expr_stmt|;
name|setClientInitializerFactory
argument_list|(
operator|new
name|HttpClientInitializerFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copy ()
specifier|public
name|NettyHttpConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
comment|// clone as NettyHttpConfiguration
name|NettyHttpConfiguration
name|answer
init|=
operator|(
name|NettyHttpConfiguration
operator|)
name|clone
argument_list|()
decl_stmt|;
comment|// make sure the lists is copied in its own instance
name|List
argument_list|<
name|ChannelHandler
argument_list|>
name|encodersCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|ChannelHandler
argument_list|>
argument_list|(
name|getEncoders
argument_list|()
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setEncoders
argument_list|(
name|encodersCopy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChannelHandler
argument_list|>
name|decodersCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|ChannelHandler
argument_list|>
argument_list|(
name|getDecoders
argument_list|()
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setDecoders
argument_list|(
name|decodersCopy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|isCompression ()
specifier|public
name|boolean
name|isCompression
parameter_list|()
block|{
return|return
name|compression
return|;
block|}
DECL|method|setCompression (boolean compression)
specifier|public
name|void
name|setCompression
parameter_list|(
name|boolean
name|compression
parameter_list|)
block|{
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
block|}
DECL|method|isThrowExceptionOnFailure ()
specifier|public
name|boolean
name|isThrowExceptionOnFailure
parameter_list|()
block|{
return|return
name|throwExceptionOnFailure
return|;
block|}
DECL|method|setThrowExceptionOnFailure (boolean throwExceptionOnFailure)
specifier|public
name|void
name|setThrowExceptionOnFailure
parameter_list|(
name|boolean
name|throwExceptionOnFailure
parameter_list|)
block|{
name|this
operator|.
name|throwExceptionOnFailure
operator|=
name|throwExceptionOnFailure
expr_stmt|;
block|}
DECL|method|isTransferException ()
specifier|public
name|boolean
name|isTransferException
parameter_list|()
block|{
return|return
name|transferException
return|;
block|}
DECL|method|setTransferException (boolean transferException)
specifier|public
name|void
name|setTransferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|this
operator|.
name|transferException
operator|=
name|transferException
expr_stmt|;
block|}
DECL|method|isUrlDecodeHeaders ()
specifier|public
name|boolean
name|isUrlDecodeHeaders
parameter_list|()
block|{
return|return
name|urlDecodeHeaders
return|;
block|}
DECL|method|setUrlDecodeHeaders (boolean urlDecodeHeaders)
specifier|public
name|void
name|setUrlDecodeHeaders
parameter_list|(
name|boolean
name|urlDecodeHeaders
parameter_list|)
block|{
name|this
operator|.
name|urlDecodeHeaders
operator|=
name|urlDecodeHeaders
expr_stmt|;
block|}
DECL|method|isMapHeaders ()
specifier|public
name|boolean
name|isMapHeaders
parameter_list|()
block|{
return|return
name|mapHeaders
return|;
block|}
DECL|method|setMapHeaders (boolean mapHeaders)
specifier|public
name|void
name|setMapHeaders
parameter_list|(
name|boolean
name|mapHeaders
parameter_list|)
block|{
name|this
operator|.
name|mapHeaders
operator|=
name|mapHeaders
expr_stmt|;
block|}
DECL|method|isMatchOnUriPrefix ()
specifier|public
name|boolean
name|isMatchOnUriPrefix
parameter_list|()
block|{
return|return
name|matchOnUriPrefix
return|;
block|}
DECL|method|setMatchOnUriPrefix (boolean matchOnUriPrefix)
specifier|public
name|void
name|setMatchOnUriPrefix
parameter_list|(
name|boolean
name|matchOnUriPrefix
parameter_list|)
block|{
name|this
operator|.
name|matchOnUriPrefix
operator|=
name|matchOnUriPrefix
expr_stmt|;
block|}
DECL|method|isBridgeEndpoint ()
specifier|public
name|boolean
name|isBridgeEndpoint
parameter_list|()
block|{
return|return
name|bridgeEndpoint
return|;
block|}
DECL|method|setBridgeEndpoint (boolean bridgeEndpoint)
specifier|public
name|void
name|setBridgeEndpoint
parameter_list|(
name|boolean
name|bridgeEndpoint
parameter_list|)
block|{
name|this
operator|.
name|bridgeEndpoint
operator|=
name|bridgeEndpoint
expr_stmt|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|setPath (String path)
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|isDisableStreamCache ()
specifier|public
name|boolean
name|isDisableStreamCache
parameter_list|()
block|{
return|return
name|disableStreamCache
return|;
block|}
DECL|method|setDisableStreamCache (boolean disableStreamCache)
specifier|public
name|void
name|setDisableStreamCache
parameter_list|(
name|boolean
name|disableStreamCache
parameter_list|)
block|{
name|this
operator|.
name|disableStreamCache
operator|=
name|disableStreamCache
expr_stmt|;
block|}
DECL|method|isSend503whenSuspended ()
specifier|public
name|boolean
name|isSend503whenSuspended
parameter_list|()
block|{
return|return
name|send503whenSuspended
return|;
block|}
DECL|method|setSend503whenSuspended (boolean send503whenSuspended)
specifier|public
name|void
name|setSend503whenSuspended
parameter_list|(
name|boolean
name|send503whenSuspended
parameter_list|)
block|{
name|this
operator|.
name|send503whenSuspended
operator|=
name|send503whenSuspended
expr_stmt|;
block|}
DECL|method|isChunked ()
specifier|public
name|boolean
name|isChunked
parameter_list|()
block|{
return|return
name|chunked
return|;
block|}
DECL|method|setChunked (boolean chunked)
specifier|public
name|void
name|setChunked
parameter_list|(
name|boolean
name|chunked
parameter_list|)
block|{
name|this
operator|.
name|chunked
operator|=
name|chunked
expr_stmt|;
block|}
DECL|method|getChunkedMaxContentLength ()
specifier|public
name|int
name|getChunkedMaxContentLength
parameter_list|()
block|{
return|return
name|chunkedMaxContentLength
return|;
block|}
DECL|method|setChunkedMaxContentLength (int chunkedMaxContentLength)
specifier|public
name|void
name|setChunkedMaxContentLength
parameter_list|(
name|int
name|chunkedMaxContentLength
parameter_list|)
block|{
name|this
operator|.
name|chunkedMaxContentLength
operator|=
name|chunkedMaxContentLength
expr_stmt|;
block|}
comment|// Don't support allowDefaultCodec
DECL|method|isAllowDefaultCodec ()
specifier|public
name|boolean
name|isAllowDefaultCodec
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|setAllowDefaultCodec (boolean allowDefaultCodec)
specifier|public
name|void
name|setAllowDefaultCodec
parameter_list|(
name|boolean
name|allowDefaultCodec
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot setAllowDefaultCodec here."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

