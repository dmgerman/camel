begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default {@link NettyHttpBinding}.  */
end_comment

begin_class
DECL|class|DefaultNettyHttpBinding
specifier|public
class|class
name|DefaultNettyHttpBinding
implements|implements
name|NettyHttpBinding
implements|,
name|Cloneable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultNettyHttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
init|=
operator|new
name|NettyHttpHeaderFilterStrategy
argument_list|()
decl_stmt|;
DECL|method|DefaultNettyHttpBinding ()
specifier|public
name|DefaultNettyHttpBinding
parameter_list|()
block|{     }
DECL|method|DefaultNettyHttpBinding (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|DefaultNettyHttpBinding
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|DefaultNettyHttpBinding
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|DefaultNettyHttpBinding
operator|)
name|this
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toCamelMessage (FullHttpRequest request, Exchange exchange, NettyHttpConfiguration configuration)
specifier|public
name|Message
name|toCamelMessage
parameter_list|(
name|FullHttpRequest
name|request
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|NettyHttpConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"toCamelMessage: {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|NettyHttpMessage
name|answer
init|=
operator|new
name|NettyHttpMessage
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isMapHeaders
argument_list|()
condition|)
block|{
name|populateCamelHeaders
argument_list|(
name|request
argument_list|,
name|answer
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|isDisableStreamCache
argument_list|()
condition|)
block|{
comment|// keep the body as is, and use type converters
name|answer
operator|.
name|setBody
argument_list|(
name|request
operator|.
name|content
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// turn the body into stream cached
name|NettyChannelBufferStreamCache
name|cache
init|=
operator|new
name|NettyChannelBufferStreamCache
argument_list|(
name|request
operator|.
name|content
argument_list|()
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setBody
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|populateCamelHeaders (FullHttpRequest request, Map<String, Object> headers, Exchange exchange, NettyHttpConfiguration configuration)
specifier|public
name|void
name|populateCamelHeaders
parameter_list|(
name|FullHttpRequest
name|request
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|NettyHttpConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"populateCamelHeaders: {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// NOTE: these headers is applied using the same logic as camel-http/camel-jetty to be consistent
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// strip query parameters from the uri
name|String
name|s
init|=
name|request
operator|.
name|getUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|s
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|s
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
block|}
comment|// we want the full path for the url, as the client may provide the url in the HTTP headers as absolute or relative, eg
comment|//   /foo
comment|//   http://servername/foo
name|String
name|http
init|=
name|configuration
operator|.
name|isSsl
argument_list|()
condition|?
literal|"https://"
else|:
literal|"http://"
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|startsWith
argument_list|(
name|http
argument_list|)
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getPort
argument_list|()
operator|!=
literal|80
condition|)
block|{
name|s
operator|=
name|http
operator|+
name|configuration
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|configuration
operator|.
name|getPort
argument_list|()
operator|+
name|s
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|http
operator|+
name|configuration
operator|.
name|getHost
argument_list|()
operator|+
name|s
expr_stmt|;
block|}
block|}
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_URL
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// uri is without the host and port
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|request
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
comment|// uri is path and query parameters
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_RAW_QUERY
argument_list|,
name|uri
operator|.
name|getRawQuery
argument_list|()
argument_list|)
expr_stmt|;
comment|// strip the starting endpoint path so the path is relative to the endpoint uri
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|configuration
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|configuration
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Method {}"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Uri {}"
argument_list|,
name|request
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|request
operator|.
name|headers
argument_list|()
operator|.
name|names
argument_list|()
control|)
block|{
comment|// mapping the content-type
if|if
condition|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|equals
argument_list|(
literal|"content-type"
argument_list|)
condition|)
block|{
name|name
operator|=
name|Exchange
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|equals
argument_list|(
literal|"authorization"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|request
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// store a special header that this request was authenticated using HTTP Basic
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Basic"
argument_list|)
condition|)
block|{
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|NettyHttpConstants
operator|.
name|HTTP_AUTHENTICATION
argument_list|,
literal|"Basic"
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|NettyHttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|NettyHttpConstants
operator|.
name|HTTP_AUTHENTICATION
argument_list|,
literal|"Basic"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add the headers one by one, and use the header filter strategy
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|request
operator|.
name|headers
argument_list|()
operator|.
name|getAll
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|values
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|extracted
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|decoded
init|=
name|shouldUrlDecodeHeader
argument_list|(
name|configuration
argument_list|,
name|name
argument_list|,
name|extracted
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-header: {}"
argument_list|,
name|extracted
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|decoded
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|NettyHttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add uri parameters as headers to the Camel message
if|if
condition|(
name|request
operator|.
name|getUri
argument_list|()
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|String
name|query
init|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|request
operator|.
name|getUri
argument_list|()
argument_list|,
literal|"?"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|uriParameters
init|=
name|URISupport
operator|.
name|parseQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|uriParameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|values
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|values
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|extracted
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|decoded
init|=
name|shouldUrlDecodeHeader
argument_list|(
name|configuration
argument_list|,
name|name
argument_list|,
name|extracted
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"URI-Parameter: {}"
argument_list|,
name|extracted
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|decoded
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|NettyHttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// if body is application/x-www-form-urlencoded then extract the body as query string and append as headers
comment|// if it is a bridgeEndpoint we need to skip this part of work
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
operator|&&
name|request
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|startsWith
argument_list|(
name|NettyHttpConstants
operator|.
name|CONTENT_TYPE_WWW_FORM_URLENCODED
argument_list|)
operator|&&
operator|!
name|configuration
operator|.
name|isBridgeEndpoint
argument_list|()
condition|)
block|{
name|String
name|charset
init|=
literal|"UTF-8"
decl_stmt|;
comment|// Push POST form params into the headers to retain compatibility with DefaultHttpBinding
name|String
name|body
init|=
name|request
operator|.
name|content
argument_list|()
operator|.
name|toString
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
name|charset
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|body
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|param
range|:
name|body
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
index|[]
name|pair
init|=
name|param
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|name
init|=
name|shouldUrlDecodeHeader
argument_list|(
name|configuration
argument_list|,
literal|""
argument_list|,
name|pair
index|[
literal|0
index|]
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|shouldUrlDecodeHeader
argument_list|(
name|configuration
argument_list|,
name|name
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|,
name|charset
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|NettyHttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid parameter, expected to be a pair but was "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Decodes the header if needed to, or returns the header value as is.      *      * @param configuration  the configuration      * @param headerName     the header name      * @param value          the current header value      * @param charset        the charset to use for decoding      * @return  the decoded value (if decoded was needed) or a<tt>toString</tt> representation of the value.      * @throws UnsupportedEncodingException is thrown if error decoding.      */
DECL|method|shouldUrlDecodeHeader (NettyHttpConfiguration configuration, String headerName, Object value, String charset)
specifier|protected
name|String
name|shouldUrlDecodeHeader
parameter_list|(
name|NettyHttpConfiguration
name|configuration
parameter_list|,
name|String
name|headerName
parameter_list|,
name|Object
name|value
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
comment|// do not decode Content-Type
if|if
condition|(
name|Exchange
operator|.
name|CONTENT_TYPE
operator|.
name|equals
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|isUrlDecodeHeaders
argument_list|()
condition|)
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|charset
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toCamelMessage (FullHttpResponse response, Exchange exchange, NettyHttpConfiguration configuration)
specifier|public
name|Message
name|toCamelMessage
parameter_list|(
name|FullHttpResponse
name|response
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|NettyHttpConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"toCamelMessage: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|NettyHttpMessage
name|answer
init|=
operator|new
name|NettyHttpMessage
argument_list|(
literal|null
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isMapHeaders
argument_list|()
condition|)
block|{
name|populateCamelHeaders
argument_list|(
name|response
argument_list|,
name|answer
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|// keep the body as is, and use type converters
name|answer
operator|.
name|setBody
argument_list|(
name|response
operator|.
name|content
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|populateCamelHeaders (FullHttpResponse response, Map<String, Object> headers, Exchange exchange, NettyHttpConfiguration configuration)
specifier|public
name|void
name|populateCamelHeaders
parameter_list|(
name|FullHttpResponse
name|response
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|NettyHttpConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"populateCamelHeaders: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|NettyHttpConstants
operator|.
name|HTTP_RESPONSE_TEXT
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|reasonPhrase
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|response
operator|.
name|headers
argument_list|()
operator|.
name|names
argument_list|()
control|)
block|{
comment|// mapping the content-type
if|if
condition|(
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"content-type"
argument_list|)
condition|)
block|{
name|name
operator|=
name|Exchange
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
comment|// add the headers one by one, and use the header filter strategy
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|response
operator|.
name|headers
argument_list|()
operator|.
name|getAll
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|values
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|extracted
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-header: {}"
argument_list|,
name|extracted
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|extracted
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|NettyHttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|extracted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toNettyResponse (Message message, NettyHttpConfiguration configuration)
specifier|public
name|HttpResponse
name|toNettyResponse
parameter_list|(
name|Message
name|message
parameter_list|,
name|NettyHttpConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"toNettyResponse: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// the message body may already be a Netty HTTP response
if|if
condition|(
name|message
operator|.
name|getBody
argument_list|()
operator|instanceof
name|HttpResponse
condition|)
block|{
return|return
operator|(
name|HttpResponse
operator|)
name|message
operator|.
name|getBody
argument_list|()
return|;
block|}
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|Exception
name|cause
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|// support bodies as native Netty
name|ByteBuf
name|buffer
decl_stmt|;
comment|// the response code is 200 for OK and 500 for failed
name|boolean
name|failed
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isFailed
argument_list|()
decl_stmt|;
name|int
name|defaultCode
init|=
name|failed
condition|?
literal|500
else|:
literal|200
decl_stmt|;
name|int
name|code
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|defaultCode
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP Status Code: {}"
argument_list|,
name|code
argument_list|)
expr_stmt|;
comment|// if there was an exception then use that as body
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isTransferException
argument_list|()
condition|)
block|{
comment|// we failed due an exception, and transfer it as java serialized object
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|oos
argument_list|,
name|bos
argument_list|)
expr_stmt|;
comment|// the body should be the serialized java object of the exception
name|body
operator|=
name|NettyConverter
operator|.
name|toByteBuffer
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// force content type to be serialized java object
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|NettyHttpConstants
operator|.
name|CONTENT_TYPE_JAVA_SERIALIZED_OBJECT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we failed due an exception so print it as plain text
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|cause
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
comment|// the body should then be the stacktrace
name|body
operator|=
name|NettyConverter
operator|.
name|toByteBuffer
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// force content type to be text/plain as that is what the stacktrace is
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
block|}
comment|// and mark the exception as failure handled, as we handled it by returning it as the response
name|ExchangeHelper
operator|.
name|setFailureHandled
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|instanceof
name|ByteBuf
condition|)
block|{
name|buffer
operator|=
operator|(
name|ByteBuf
operator|)
name|body
expr_stmt|;
block|}
else|else
block|{
comment|// try to convert to buffer first
name|buffer
operator|=
name|message
operator|.
name|getBody
argument_list|(
name|ByteBuf
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
comment|// fallback to byte array as last resort
name|byte
index|[]
name|data
init|=
name|message
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|=
name|NettyConverter
operator|.
name|toByteBuffer
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// and if byte array fails then try String
name|String
name|str
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|str
operator|=
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
literal|""
expr_stmt|;
block|}
name|buffer
operator|=
name|NettyConverter
operator|.
name|toByteBuffer
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|HttpResponse
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|response
operator|=
operator|new
name|DefaultFullHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|valueOf
argument_list|(
name|code
argument_list|)
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
comment|// We just need to reset the readerIndex this time
if|if
condition|(
name|buffer
operator|.
name|readerIndex
argument_list|()
operator|==
name|buffer
operator|.
name|writerIndex
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|setIndex
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|writerIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO How to enable the chunk transport
name|int
name|len
init|=
name|buffer
operator|.
name|readableBytes
argument_list|()
decl_stmt|;
comment|// set content-length
name|response
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Length: {}"
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
operator|new
name|DefaultFullHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|valueOf
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TypeConverter
name|tc
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
comment|// append headers
comment|// must use entrySet to ensure case of keys is preserved
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// use an iterator as there can be multiple values. (must not use a delimiter)
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|headerValue
init|=
name|tc
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValue
operator|!=
literal|null
operator|&&
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Header: {}={}"
argument_list|,
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
name|response
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set the content type in the response.
name|String
name|contentType
init|=
name|MessageHelper
operator|.
name|getContentType
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
comment|// set content-type
name|response
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Type: {}"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
comment|// configure connection to accordingly to keep alive configuration
comment|// favor using the header from the message
name|String
name|connection
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
comment|// fallback and use the keep alive from the configuration
if|if
condition|(
name|configuration
operator|.
name|isKeepAlive
argument_list|()
condition|)
block|{
name|connection
operator|=
name|HttpHeaders
operator|.
name|Values
operator|.
name|KEEP_ALIVE
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|=
name|HttpHeaders
operator|.
name|Values
operator|.
name|CLOSE
expr_stmt|;
block|}
block|}
name|response
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
argument_list|,
name|connection
argument_list|)
expr_stmt|;
comment|// Just make sure we close the channel when the connection value is close
if|if
condition|(
name|connection
operator|.
name|equalsIgnoreCase
argument_list|(
name|HttpHeaders
operator|.
name|Values
operator|.
name|CLOSE
argument_list|)
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|NettyConstants
operator|.
name|NETTY_CLOSE_CHANNEL_WHEN_COMPLETE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connection: {}"
argument_list|,
name|connection
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|toNettyRequest (Message message, String uri, NettyHttpConfiguration configuration)
specifier|public
name|HttpRequest
name|toNettyRequest
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|uri
parameter_list|,
name|NettyHttpConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"toNettyRequest: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// the message body may already be a Netty HTTP response
if|if
condition|(
name|message
operator|.
name|getBody
argument_list|()
operator|instanceof
name|HttpRequest
condition|)
block|{
return|return
operator|(
name|HttpRequest
operator|)
name|message
operator|.
name|getBody
argument_list|()
return|;
block|}
comment|// just assume GET for now, we will later change that to the actual method to use
name|HttpRequest
name|request
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
comment|// support bodies as native Netty
name|ByteBuf
name|buffer
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|ByteBuf
condition|)
block|{
name|buffer
operator|=
operator|(
name|ByteBuf
operator|)
name|body
expr_stmt|;
block|}
else|else
block|{
comment|// try to convert to buffer first
name|buffer
operator|=
name|message
operator|.
name|getBody
argument_list|(
name|ByteBuf
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
comment|// fallback to byte array as last resort
name|byte
index|[]
name|data
init|=
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|buffer
operator|=
name|NettyConverter
operator|.
name|toByteBuffer
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|request
operator|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|POST
argument_list|,
name|uri
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|buffer
operator|.
name|readableBytes
argument_list|()
decl_stmt|;
comment|// set content-length
name|request
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Length: {}"
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we do not support this kind of body
throw|throw
operator|new
name|NoTypeConversionAvailableException
argument_list|(
name|body
argument_list|,
name|ByteBuf
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|// update HTTP method accordingly as we know if we have a body or not
name|HttpMethod
name|method
init|=
name|NettyHttpHelper
operator|.
name|createMethod
argument_list|(
name|message
argument_list|,
name|body
operator|!=
literal|null
argument_list|)
decl_stmt|;
name|request
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|TypeConverter
name|tc
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
comment|// if we bridge endpoint then we need to skip matching headers with the HTTP_QUERY to avoid sending
comment|// duplicated headers to the receiver, so use this skipRequestHeaders as the list of headers to skip
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|skipRequestHeaders
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isBridgeEndpoint
argument_list|()
condition|)
block|{
name|String
name|queryString
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryString
operator|!=
literal|null
condition|)
block|{
name|skipRequestHeaders
operator|=
name|URISupport
operator|.
name|parseQuery
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
comment|// Need to remove the Host key as it should be not used
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|remove
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
block|}
comment|// append headers
comment|// must use entrySet to ensure case of keys is preserved
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// we should not add headers for the parameters in the uri if we bridge the endpoint
comment|// as then we would duplicate headers on both the endpoint uri, and in HTTP headers as well
if|if
condition|(
name|skipRequestHeaders
operator|!=
literal|null
operator|&&
name|skipRequestHeaders
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// use an iterator as there can be multiple values. (must not use a delimiter)
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|headerValue
init|=
name|tc
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValue
operator|!=
literal|null
operator|&&
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Header: {}={}"
argument_list|,
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
name|request
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set the content type in the response.
name|String
name|contentType
init|=
name|MessageHelper
operator|.
name|getContentType
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
comment|// set content-type
name|request
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Type: {}"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
comment|// must include HOST header as required by HTTP 1.1
comment|// use URI as its faster than URL (no DNS lookup)
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|u
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|request
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|HOST
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Host: {}"
argument_list|,
name|host
argument_list|)
expr_stmt|;
comment|// configure connection to accordingly to keep alive configuration
comment|// favor using the header from the message
name|String
name|connection
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
comment|// fallback and use the keep alive from the configuration
if|if
condition|(
name|configuration
operator|.
name|isKeepAlive
argument_list|()
condition|)
block|{
name|connection
operator|=
name|HttpHeaders
operator|.
name|Values
operator|.
name|KEEP_ALIVE
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|=
name|HttpHeaders
operator|.
name|Values
operator|.
name|CLOSE
expr_stmt|;
block|}
block|}
name|request
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
argument_list|,
name|connection
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connection: {}"
argument_list|,
name|connection
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|Override
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
annotation|@
name|Override
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
block|}
end_class

end_unit

