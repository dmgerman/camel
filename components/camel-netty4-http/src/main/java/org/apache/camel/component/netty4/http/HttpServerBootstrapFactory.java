begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|http
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyServerBootstrapConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|SingleTCPNettyServerBootstrapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|HttpServerBootstrapFactory
specifier|public
class|class
name|HttpServerBootstrapFactory
extends|extends
name|SingleTCPNettyServerBootstrapFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpServerBootstrapFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|channelFactory
specifier|private
specifier|final
name|HttpServerConsumerChannelFactory
name|channelFactory
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|bootstrapConfiguration
specifier|private
name|NettyServerBootstrapConfiguration
name|bootstrapConfiguration
decl_stmt|;
DECL|field|compatibleCheck
specifier|private
name|boolean
name|compatibleCheck
decl_stmt|;
DECL|method|HttpServerBootstrapFactory (HttpServerConsumerChannelFactory channelFactory)
specifier|public
name|HttpServerBootstrapFactory
parameter_list|(
name|HttpServerConsumerChannelFactory
name|channelFactory
parameter_list|)
block|{
name|this
argument_list|(
name|channelFactory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|HttpServerBootstrapFactory (HttpServerConsumerChannelFactory channelFactory, boolean compatibleCheck)
specifier|public
name|HttpServerBootstrapFactory
parameter_list|(
name|HttpServerConsumerChannelFactory
name|channelFactory
parameter_list|,
name|boolean
name|compatibleCheck
parameter_list|)
block|{
name|this
operator|.
name|channelFactory
operator|=
name|channelFactory
expr_stmt|;
name|this
operator|.
name|compatibleCheck
operator|=
name|compatibleCheck
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (CamelContext camelContext, NettyServerBootstrapConfiguration configuration, ChannelInitializer<Channel> pipelineFactory)
specifier|public
name|void
name|init
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|NettyServerBootstrapConfiguration
name|configuration
parameter_list|,
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
name|pipelineFactory
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|camelContext
argument_list|,
name|configuration
argument_list|,
name|pipelineFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|configuration
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|bootstrapConfiguration
operator|=
name|configuration
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"BootstrapFactory on port {} is using bootstrap configuration: [{}]"
argument_list|,
name|port
argument_list|,
name|bootstrapConfiguration
operator|.
name|toStringBootstrapConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addConsumer (NettyConsumer consumer)
specifier|public
name|void
name|addConsumer
parameter_list|(
name|NettyConsumer
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|compatibleCheck
condition|)
block|{
comment|// when adding additional consumers on the same port (eg to reuse port for multiple routes etc) then the Netty server bootstrap
comment|// configuration must match, as its the 1st consumer that calls the init method, which configuration is used for the Netty server bootstrap
comment|// we do this to avoid mis configuration, so people configure SSL and plain configuration on the same port etc.
comment|// first it may be the same instance, so only check for compatibility of different instance
if|if
condition|(
name|bootstrapConfiguration
operator|!=
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|&&
operator|!
name|bootstrapConfiguration
operator|.
name|compatible
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bootstrap configuration must be identical when adding additional consumer: "
operator|+
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|+
literal|" on same port: "
operator|+
name|port
operator|+
literal|".\n  Existing "
operator|+
name|bootstrapConfiguration
operator|.
name|toStringBootstrapConfiguration
argument_list|()
operator|+
literal|"\n       New "
operator|+
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|toStringBootstrapConfiguration
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NettyHttpConsumer
name|httpConsumer
init|=
operator|(
name|NettyHttpConsumer
operator|)
name|consumer
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"BootstrapFactory on port {} is adding consumer with context-path {}"
argument_list|,
name|port
argument_list|,
name|httpConsumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channelFactory
operator|.
name|addConsumer
argument_list|(
operator|(
name|NettyHttpConsumer
operator|)
name|consumer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeConsumer (NettyConsumer consumer)
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|NettyConsumer
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NettyHttpConsumer
name|httpConsumer
init|=
operator|(
name|NettyHttpConsumer
operator|)
name|consumer
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"BootstrapFactory on port {} is removing consumer with context-path {}"
argument_list|,
name|port
argument_list|,
name|httpConsumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channelFactory
operator|.
name|removeConsumer
argument_list|(
operator|(
name|NettyHttpConsumer
operator|)
name|consumer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"BootstrapFactory on port {} is starting"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// only stop if no more active consumers
name|int
name|consumers
init|=
name|channelFactory
operator|.
name|consumers
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumers
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"BootstrapFactory on port {} is stopping"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"BootstrapFactory on port {} has {} registered consumers, so cannot stop yet."
argument_list|,
name|port
argument_list|,
name|consumers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

