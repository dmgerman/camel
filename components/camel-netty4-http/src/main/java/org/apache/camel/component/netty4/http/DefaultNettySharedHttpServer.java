begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyServerBootstrapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|http
operator|.
name|handlers
operator|.
name|HttpServerMultiplexChannelHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CamelThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A default {@link NettySharedHttpServer} to make sharing Netty server in Camel applications easier.  */
end_comment

begin_class
DECL|class|DefaultNettySharedHttpServer
specifier|public
class|class
name|DefaultNettySharedHttpServer
extends|extends
name|ServiceSupport
implements|implements
name|NettySharedHttpServer
block|{
comment|// TODO: option to enlist in JMX
DECL|field|DEFAULT_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PATTERN
init|=
literal|"Camel Thread ##counter# - #name#:#port#"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultNettySharedHttpServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
name|NettySharedHttpServerBootstrapConfiguration
name|configuration
decl_stmt|;
DECL|field|channelFactory
specifier|private
name|HttpServerConsumerChannelFactory
name|channelFactory
decl_stmt|;
DECL|field|bootstrapFactory
specifier|private
name|HttpServerBootstrapFactory
name|bootstrapFactory
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|startServer
specifier|private
name|boolean
name|startServer
init|=
literal|true
decl_stmt|;
DECL|field|threadPattern
specifier|private
name|String
name|threadPattern
init|=
name|DEFAULT_PATTERN
decl_stmt|;
DECL|method|setNettyServerBootstrapConfiguration (NettySharedHttpServerBootstrapConfiguration configuration)
specifier|public
name|void
name|setNettyServerBootstrapConfiguration
parameter_list|(
name|NettySharedHttpServerBootstrapConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|configuration
operator|!=
literal|null
condition|?
name|configuration
operator|.
name|getPort
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
DECL|method|getConsumerChannelFactory ()
specifier|public
name|HttpServerConsumerChannelFactory
name|getConsumerChannelFactory
parameter_list|()
block|{
return|return
name|channelFactory
return|;
block|}
DECL|method|getServerBootstrapFactory ()
specifier|public
name|NettyServerBootstrapFactory
name|getServerBootstrapFactory
parameter_list|()
block|{
return|return
name|bootstrapFactory
return|;
block|}
DECL|method|getConsumersSize ()
specifier|public
name|int
name|getConsumersSize
parameter_list|()
block|{
if|if
condition|(
name|channelFactory
operator|!=
literal|null
condition|)
block|{
return|return
name|channelFactory
operator|.
name|consumers
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|setStartServer (boolean startServer)
specifier|public
name|void
name|setStartServer
parameter_list|(
name|boolean
name|startServer
parameter_list|)
block|{
name|this
operator|.
name|startServer
operator|=
name|startServer
expr_stmt|;
block|}
DECL|method|setThreadNamePattern (String pattern)
specifier|public
name|void
name|setThreadNamePattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|threadPattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configuration
argument_list|,
literal|"setNettyServerBootstrapConfiguration() must be called with a NettyServerBootstrapConfiguration instance"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// port must be set
if|if
condition|(
name|configuration
operator|.
name|getPort
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Port must be configured on NettySharedHttpServerBootstrapConfiguration "
operator|+
name|configuration
argument_list|)
throw|;
block|}
comment|// hostname must be set
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Host must be configured on NettySharedHttpServerBootstrapConfiguration "
operator|+
name|configuration
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"NettySharedHttpServer using configuration: {}"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
comment|// force using tcp as the underlying transport
name|configuration
operator|.
name|setProtocol
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|channelFactory
operator|=
operator|new
name|HttpServerMultiplexChannelHandler
argument_list|()
expr_stmt|;
name|channelFactory
operator|.
name|init
argument_list|(
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
name|pipelineFactory
init|=
operator|new
name|HttpServerSharedInitializerFactory
argument_list|(
name|configuration
argument_list|,
name|channelFactory
argument_list|,
name|camelContext
argument_list|)
decl_stmt|;
comment|// thread factory and pattern
name|String
name|port
init|=
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
literal|""
operator|+
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pattern
init|=
name|threadPattern
decl_stmt|;
name|pattern
operator|=
name|pattern
operator|.
name|replaceFirst
argument_list|(
literal|"#port#"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|ThreadFactory
name|tf
init|=
operator|new
name|CamelThreadFactory
argument_list|(
name|pattern
argument_list|,
literal|"NettySharedHttpServer"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// create bootstrap factory and disable compatible check as its shared among the consumers
name|bootstrapFactory
operator|=
operator|new
name|HttpServerBootstrapFactory
argument_list|(
name|channelFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|bootstrapFactory
operator|.
name|init
argument_list|(
name|tf
argument_list|,
name|configuration
argument_list|,
name|pipelineFactory
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|channelFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|startServer
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting NettySharedHttpServer on {}:{}"
argument_list|,
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|bootstrapFactory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping NettySharedHttpServer on {}:{}"
argument_list|,
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|bootstrapFactory
argument_list|,
name|channelFactory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

