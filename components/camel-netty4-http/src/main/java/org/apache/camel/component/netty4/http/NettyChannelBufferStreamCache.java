begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * A {@link ByteBuf} which is exposed as an {@link InputStream} which makes it very  * easy to use by Camel and other Camel components. Also supported is {@link StreamCache}  * which allows the data to be re-read for example when doing content based routing with XPath.  */
end_comment

begin_class
DECL|class|NettyChannelBufferStreamCache
specifier|public
specifier|final
class|class
name|NettyChannelBufferStreamCache
extends|extends
name|InputStream
implements|implements
name|StreamCache
block|{
DECL|field|buffer
specifier|private
specifier|final
name|ByteBuf
name|buffer
decl_stmt|;
DECL|method|NettyChannelBufferStreamCache (ByteBuf buffer)
specifier|public
name|NettyChannelBufferStreamCache
parameter_list|(
name|ByteBuf
name|buffer
parameter_list|)
block|{
comment|// retain the buffer so we keep it in use until we release it when we are done
name|this
operator|.
name|buffer
operator|=
name|buffer
operator|.
name|retain
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|markReaderIndex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|buffer
operator|.
name|readByte
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// are we at end, then return -1
if|if
condition|(
name|buffer
operator|.
name|readerIndex
argument_list|()
operator|==
name|buffer
operator|.
name|capacity
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// ensure we don't read more than what we have in the buffer
name|int
name|before
init|=
name|buffer
operator|.
name|readerIndex
argument_list|()
decl_stmt|;
name|int
name|max
init|=
name|buffer
operator|.
name|capacity
argument_list|()
operator|-
name|before
decl_stmt|;
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
name|max
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|readerIndex
argument_list|()
operator|-
name|before
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|buffer
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo (OutputStream os)
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
comment|// must remember current index so we can reset back to it after the copy
name|int
name|idx
init|=
name|buffer
operator|.
name|readerIndex
argument_list|()
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|copy
argument_list|(
name|this
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|buffer
operator|.
name|readerIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy (Exchange exchange)
specifier|public
name|StreamCache
name|copy
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|NettyChannelBufferStreamCache
argument_list|(
name|buffer
operator|.
name|copy
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|inMemory ()
specifier|public
name|boolean
name|inMemory
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|readableBytes
argument_list|()
return|;
block|}
comment|/**      * Release the buffer when we are done using it.      */
DECL|method|release ()
specifier|public
name|void
name|release
parameter_list|()
block|{
name|buffer
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

