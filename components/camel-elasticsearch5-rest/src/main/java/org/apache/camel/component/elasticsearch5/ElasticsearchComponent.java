begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.elasticsearch5
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|elasticsearch5
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link ElasticsearchEndpoint}.  */
end_comment

begin_class
DECL|class|ElasticsearchComponent
specifier|public
class|class
name|ElasticsearchComponent
extends|extends
name|DefaultComponent
block|{
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|client
specifier|private
name|RestClient
name|client
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|hostAddresses
specifier|private
name|String
name|hostAddresses
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ElasticsearchConstants
operator|.
name|DEFAULT_SOCKET_TIMEOUT
argument_list|)
DECL|field|socketTimeout
specifier|private
name|int
name|socketTimeout
init|=
name|ElasticsearchConstants
operator|.
name|DEFAULT_SOCKET_TIMEOUT
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ElasticsearchConstants
operator|.
name|MAX_RETRY_TIMEOUT
argument_list|)
DECL|field|maxRetryTimeout
specifier|private
name|int
name|maxRetryTimeout
init|=
name|ElasticsearchConstants
operator|.
name|MAX_RETRY_TIMEOUT
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ElasticsearchConstants
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
DECL|field|connectionTimeout
specifier|private
name|int
name|connectionTimeout
init|=
name|ElasticsearchConstants
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advance"
argument_list|)
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|enableSSL
specifier|private
name|boolean
name|enableSSL
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|enableSniffer
specifier|private
name|boolean
name|enableSniffer
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ElasticsearchConstants
operator|.
name|DEFAULT_SNIFFER_INTERVAL
argument_list|)
DECL|field|snifferInterval
specifier|private
name|int
name|snifferInterval
init|=
name|ElasticsearchConstants
operator|.
name|DEFAULT_SNIFFER_INTERVAL
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ElasticsearchConstants
operator|.
name|DEFAULT_AFTER_FAILURE_DELAY
argument_list|)
DECL|field|sniffAfterFailureDelay
specifier|private
name|int
name|sniffAfterFailureDelay
init|=
name|ElasticsearchConstants
operator|.
name|DEFAULT_AFTER_FAILURE_DELAY
decl_stmt|;
DECL|method|ElasticsearchComponent ()
specifier|public
name|ElasticsearchComponent
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|ElasticsearchComponent (CamelContext context)
specifier|public
name|ElasticsearchComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|ElasticsearchConfiguration
name|config
init|=
operator|new
name|ElasticsearchConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setHostAddresses
argument_list|(
name|this
operator|.
name|getHostAddresses
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSocketTimeout
argument_list|(
name|this
operator|.
name|getSocketTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMaxRetryTimeout
argument_list|(
name|this
operator|.
name|getMaxRetryTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setConnectionTimeout
argument_list|(
name|this
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUser
argument_list|(
name|this
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setEnableSSL
argument_list|(
name|this
operator|.
name|getEnableSSL
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setPassword
argument_list|(
name|this
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setEnableSniffer
argument_list|(
name|this
operator|.
name|getEnableSniffer
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSnifferInterval
argument_list|(
name|this
operator|.
name|getSnifferInterval
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSniffAfterFailureDelay
argument_list|(
name|this
operator|.
name|getSniffAfterFailureDelay
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setClusterName
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|config
operator|.
name|setHostAddressesList
argument_list|(
name|parseHostAddresses
argument_list|(
name|config
operator|.
name|getHostAddresses
argument_list|()
argument_list|,
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
operator|new
name|ElasticsearchEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|,
name|client
argument_list|)
decl_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|parseHostAddresses (String ipsString, ElasticsearchConfiguration config)
specifier|private
name|List
argument_list|<
name|HttpHost
argument_list|>
name|parseHostAddresses
parameter_list|(
name|String
name|ipsString
parameter_list|,
name|ElasticsearchConfiguration
name|config
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
name|ipsString
operator|==
literal|null
operator|||
name|ipsString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|addressesStr
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ipsString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HttpHost
argument_list|>
name|addressesTrAd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|addressesStr
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|address
range|:
name|addressesStr
control|)
block|{
name|String
index|[]
name|split
init|=
name|address
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|hostname
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|hostname
operator|=
name|split
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|Integer
name|port
init|=
name|split
operator|.
name|length
operator|>
literal|1
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
else|:
name|ElasticsearchConstants
operator|.
name|DEFAULT_PORT
decl_stmt|;
name|addressesTrAd
operator|.
name|add
argument_list|(
operator|new
name|HttpHost
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
name|config
operator|.
name|getEnableSSL
argument_list|()
condition|?
literal|"HTTPS"
else|:
literal|"HTTP"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addressesTrAd
return|;
block|}
DECL|method|getClient ()
specifier|public
name|RestClient
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
comment|/**      * To use an existing configured Elasticsearch client, instead of creating a client per endpoint.      * This allow to customize the client with specific settings.      */
DECL|method|setClient (RestClient client)
specifier|public
name|void
name|setClient
parameter_list|(
name|RestClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
comment|/**      * Comma separated list with ip:port formatted remote transport addresses to use.      * The ip and port options must be left blank for hostAddresses to be considered instead.      */
DECL|method|getHostAddresses ()
specifier|public
name|String
name|getHostAddresses
parameter_list|()
block|{
return|return
name|hostAddresses
return|;
block|}
DECL|method|setHostAddresses (String hostAddresses)
specifier|public
name|void
name|setHostAddresses
parameter_list|(
name|String
name|hostAddresses
parameter_list|)
block|{
name|this
operator|.
name|hostAddresses
operator|=
name|hostAddresses
expr_stmt|;
block|}
comment|/**      * The timeout in ms to wait before the socket will timeout.      */
DECL|method|getSocketTimeout ()
specifier|public
name|int
name|getSocketTimeout
parameter_list|()
block|{
return|return
name|socketTimeout
return|;
block|}
DECL|method|setSocketTimeout (int socketTimeout)
specifier|public
name|void
name|setSocketTimeout
parameter_list|(
name|int
name|socketTimeout
parameter_list|)
block|{
name|this
operator|.
name|socketTimeout
operator|=
name|socketTimeout
expr_stmt|;
block|}
comment|/**      *  The time in ms to wait before connection will timeout.      */
DECL|method|getConnectionTimeout ()
specifier|public
name|int
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
DECL|method|setConnectionTimeout (int connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
comment|/**      *  Basic authenticate user      */
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|setUser (String user)
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
comment|/**      *  Password for authenticate      */
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
comment|/**      * Enable SSL      */
DECL|method|getEnableSSL ()
specifier|public
name|Boolean
name|getEnableSSL
parameter_list|()
block|{
return|return
name|enableSSL
return|;
block|}
DECL|method|setEnableSSL (Boolean enableSSL)
specifier|public
name|void
name|setEnableSSL
parameter_list|(
name|Boolean
name|enableSSL
parameter_list|)
block|{
name|this
operator|.
name|enableSSL
operator|=
name|enableSSL
expr_stmt|;
block|}
comment|/**      * The time in ms before retry      */
DECL|method|getMaxRetryTimeout ()
specifier|public
name|int
name|getMaxRetryTimeout
parameter_list|()
block|{
return|return
name|maxRetryTimeout
return|;
block|}
DECL|method|setMaxRetryTimeout (int maxRetryTimeout)
specifier|public
name|void
name|setMaxRetryTimeout
parameter_list|(
name|int
name|maxRetryTimeout
parameter_list|)
block|{
name|this
operator|.
name|maxRetryTimeout
operator|=
name|maxRetryTimeout
expr_stmt|;
block|}
comment|/**      * Enable automatically discover nodes from a running Elasticsearch cluster      */
DECL|method|getEnableSniffer ()
specifier|public
name|Boolean
name|getEnableSniffer
parameter_list|()
block|{
return|return
name|enableSniffer
return|;
block|}
DECL|method|setEnableSniffer (Boolean enableSniffer)
specifier|public
name|void
name|setEnableSniffer
parameter_list|(
name|Boolean
name|enableSniffer
parameter_list|)
block|{
name|this
operator|.
name|enableSniffer
operator|=
name|enableSniffer
expr_stmt|;
block|}
comment|/**      * The interval between consecutive ordinary sniff executions in milliseconds. Will be honoured when      * sniffOnFailure is disabled or when there are no failures between consecutive sniff executions      */
DECL|method|getSnifferInterval ()
specifier|public
name|int
name|getSnifferInterval
parameter_list|()
block|{
return|return
name|snifferInterval
return|;
block|}
DECL|method|setSnifferInterval (int snifferInterval)
specifier|public
name|void
name|setSnifferInterval
parameter_list|(
name|int
name|snifferInterval
parameter_list|)
block|{
name|this
operator|.
name|snifferInterval
operator|=
name|snifferInterval
expr_stmt|;
block|}
comment|/**      * The delay of a sniff execution scheduled after a failure (in milliseconds)      */
DECL|method|getSniffAfterFailureDelay ()
specifier|public
name|int
name|getSniffAfterFailureDelay
parameter_list|()
block|{
return|return
name|sniffAfterFailureDelay
return|;
block|}
DECL|method|setSniffAfterFailureDelay (int sniffAfterFailureDelay)
specifier|public
name|void
name|setSniffAfterFailureDelay
parameter_list|(
name|int
name|sniffAfterFailureDelay
parameter_list|)
block|{
name|this
operator|.
name|sniffAfterFailureDelay
operator|=
name|sniffAfterFailureDelay
expr_stmt|;
block|}
block|}
end_class

end_unit

