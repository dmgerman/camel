begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jt400
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jt400
package|;
end_package

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|as400
operator|.
name|access
operator|.
name|BaseDataQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|as400
operator|.
name|access
operator|.
name|DataQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|as400
operator|.
name|access
operator|.
name|KeyedDataQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_comment
comment|/**  * {@link Producer} to send data to an AS/400 data queue.  */
end_comment

begin_class
DECL|class|Jt400DataQueueProducer
specifier|public
class|class
name|Jt400DataQueueProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|Jt400Endpoint
name|endpoint
decl_stmt|;
comment|/**      * Performs the lifecycle logic of this producer.      */
DECL|field|queueService
specifier|private
specifier|final
name|Jt400DataQueueService
name|queueService
decl_stmt|;
DECL|method|Jt400DataQueueProducer (Jt400Endpoint endpoint)
specifier|protected
name|Jt400DataQueueProducer
parameter_list|(
name|Jt400Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|queueService
operator|=
operator|new
name|Jt400DataQueueService
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends the {@link Exchange}'s in body to the AS/400 data queue. If the      * endpoint's format is set to {@link org.apache.camel.component.jt400.Jt400Configuration.Format#binary}, the data queue entry's      * data will be sent as a<code>byte[]</code>. If the endpoint's format is      * set to {@link org.apache.camel.component.jt400.Jt400Configuration.Format#text}, the data queue entry's data will be sent as a      *<code>String</code>.      *<p/>      * If the endpoint is configured to publish to a {@link KeyedDataQueue},      * then the {@link org.apache.camel.Message} header<code>KEY</code> must be set.      */
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|BaseDataQueue
name|queue
init|=
name|queueService
operator|.
name|getDataQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|isKeyed
argument_list|()
condition|)
block|{
name|process
argument_list|(
operator|(
name|KeyedDataQueue
operator|)
name|queue
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|process
argument_list|(
operator|(
name|DataQueue
operator|)
name|queue
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|process (DataQueue queue, Exchange exchange)
specifier|private
name|void
name|process
parameter_list|(
name|DataQueue
name|queue
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|endpoint
operator|.
name|getFormat
argument_list|()
operator|==
name|Jt400Configuration
operator|.
name|Format
operator|.
name|binary
condition|)
block|{
name|queue
operator|.
name|write
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|.
name|write
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|process (KeyedDataQueue queue, Exchange exchange)
specifier|private
name|void
name|process
parameter_list|(
name|KeyedDataQueue
name|queue
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|endpoint
operator|.
name|getFormat
argument_list|()
operator|==
name|Jt400Configuration
operator|.
name|Format
operator|.
name|binary
condition|)
block|{
name|queue
operator|.
name|write
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Jt400Endpoint
operator|.
name|KEY
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|.
name|write
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Jt400Endpoint
operator|.
name|KEY
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|queueService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|queueService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

