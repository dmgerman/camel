begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jt400
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jt400
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|as400
operator|.
name|access
operator|.
name|AS400ConnectionPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@link org.apache.camel.Component} to provide integration with AS/400 objects.  *   * Current implementation supports working with data queues (*DTAQ) and Program calls (*PGM)  */
end_comment

begin_class
DECL|class|Jt400Component
specifier|public
class|class
name|Jt400Component
extends|extends
name|DefaultComponent
block|{
comment|/**      * Name of the connection pool URI option.      */
DECL|field|CONNECTION_POOL
specifier|static
specifier|final
name|String
name|CONNECTION_POOL
init|=
literal|"connectionPool"
decl_stmt|;
comment|/**      * Logging tool used by this class.      */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Jt400Component
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATA_QUEUE
specifier|private
specifier|static
specifier|final
name|String
name|DATA_QUEUE
init|=
literal|"DTAQ"
decl_stmt|;
DECL|field|PGM
specifier|private
specifier|static
specifier|final
name|String
name|PGM
init|=
literal|"PGM"
decl_stmt|;
comment|/**      * Default connection pool used by the component. Note that this pool is      * lazily initialized. This is because in a scenario where the user always      * provides a pool, it would be wasteful for Camel to initialize and keep an      * idle pool.      */
DECL|field|connectionPool
specifier|private
name|AS400ConnectionPool
name|connectionPool
decl_stmt|;
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> properties)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|type
init|=
name|remaining
operator|.
name|substring
argument_list|(
name|remaining
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|AS400ConnectionPool
name|connectionPool
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
name|CONNECTION_POOL
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"AS400ConnectionPool instance specified in the URI - will look it up."
argument_list|)
expr_stmt|;
comment|// We have chosen to handle the connectionPool option ourselves, so
comment|// we must remove it from the given parameter list (see
comment|// http://camel.apache.org/writing-components.html)
name|String
name|poolId
init|=
name|properties
operator|.
name|remove
argument_list|(
name|CONNECTION_POOL
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|connectionPool
operator|=
name|EndpointHelper
operator|.
name|resolveReferenceParameter
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|poolId
argument_list|,
name|AS400ConnectionPool
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No AS400ConnectionPool instance specified in the URI - one will be provided."
argument_list|)
expr_stmt|;
name|connectionPool
operator|=
name|getConnectionPool
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|DATA_QUEUE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|Jt400DataQueueEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|connectionPool
argument_list|)
return|;
block|}
if|if
condition|(
name|PGM
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|Jt400PgmEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|connectionPool
argument_list|)
return|;
block|}
throw|throw
operator|new
name|CamelException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"AS/400 Object type %s is not supported"
argument_list|,
name|type
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Returns the default connection pool used by this component.      *       * @return the default connection pool used by this component      */
DECL|method|getConnectionPool ()
specifier|public
specifier|synchronized
name|AS400ConnectionPool
name|getConnectionPool
parameter_list|()
block|{
if|if
condition|(
name|connectionPool
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Instantiating the default connection pool ..."
argument_list|)
expr_stmt|;
name|connectionPool
operator|=
operator|new
name|AS400ConnectionPool
argument_list|()
expr_stmt|;
block|}
return|return
name|connectionPool
return|;
block|}
DECL|method|setConnectionPool (AS400ConnectionPool connectionPool)
specifier|public
name|void
name|setConnectionPool
parameter_list|(
name|AS400ConnectionPool
name|connectionPool
parameter_list|)
block|{
name|this
operator|.
name|connectionPool
operator|=
name|connectionPool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doShutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|connectionPool
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down the default connection pool "
operator|+
name|connectionPool
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|connectionPool
operator|.
name|close
argument_list|()
expr_stmt|;
name|connectionPool
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

