begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jt400
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jt400
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyVetoException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|as400
operator|.
name|access
operator|.
name|AS400
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|as400
operator|.
name|access
operator|.
name|AS400ConnectionPool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|as400
operator|.
name|access
operator|.
name|ConnectionPoolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jt400
operator|.
name|Jt400DataQueueEndpoint
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Pseudo-abstract base JT400 endpoint. This class provides the options that  * supported by both the {@link Jt400DataQueueEndpoint} and  * {@link Jt400PgmEndpoint}, and also serves as a factory of connections to the  * system.  */
end_comment

begin_class
DECL|class|Jt400Endpoint
class|class
name|Jt400Endpoint
block|{
comment|/**      * Logging tool.      */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Jt400Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Constant used to specify that the default system CCSID be used (a      * negative CCSID is otherwise invalid).      */
DECL|field|DEFAULT_SYSTEM_CCSID
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SYSTEM_CCSID
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Name of the AS/400 system.      */
DECL|field|systemName
specifier|private
specifier|final
name|String
name|systemName
decl_stmt|;
comment|/**      * ID of the AS/400 user.      */
DECL|field|userID
specifier|private
specifier|final
name|String
name|userID
decl_stmt|;
comment|/**      * Password of the AS/400 user.      */
DECL|field|password
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
comment|/**      * Fully qualified integrated file system path name of the target object of      * this endpoint (either data queue or program).      */
DECL|field|objectPath
specifier|private
specifier|final
name|String
name|objectPath
decl_stmt|;
comment|/**      * Pool from which physical connections to the system are obtained.      */
DECL|field|connectionPool
specifier|private
specifier|final
name|AS400ConnectionPool
name|connectionPool
decl_stmt|;
comment|/**      * CCSID to use for the connection with the AS/400 system.      */
DECL|field|ccsid
specifier|private
name|int
name|ccsid
init|=
name|DEFAULT_SYSTEM_CCSID
decl_stmt|;
comment|/**      * Data format for sending messages.      */
DECL|field|format
specifier|private
name|Format
name|format
init|=
name|Format
operator|.
name|text
decl_stmt|;
comment|/**      * Whether AS/400 prompting is enabled in the environment running Camel.      */
DECL|field|guiAvailable
specifier|private
name|boolean
name|guiAvailable
decl_stmt|;
comment|/**      * Creates a new endpoint instance for the specified URI, which will use the      * specified pool for obtaining physical connections to the system.      *       * @param endpointUri URI of the endpoint      * @param connectionPool pool for obtaining physical connections to the      *            system      * @throws URISyntaxException if unable to parse {@code endpointUri}      * @throws IllegalArgumentException if either {@code endpointUri} or      *             {@code connectionPool} are null      */
DECL|method|Jt400Endpoint (String endpointUri, AS400ConnectionPool connectionPool)
name|Jt400Endpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|AS400ConnectionPool
name|connectionPool
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|endpointUri
argument_list|,
literal|"endpointUri"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|connectionPool
argument_list|,
literal|"connectionPool"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|endpointUri
argument_list|)
decl_stmt|;
name|String
index|[]
name|credentials
init|=
name|uri
operator|.
name|getUserInfo
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|systemName
operator|=
name|uri
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|userID
operator|=
name|credentials
index|[
literal|0
index|]
expr_stmt|;
name|password
operator|=
name|credentials
index|[
literal|1
index|]
expr_stmt|;
name|objectPath
operator|=
name|uri
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|this
operator|.
name|connectionPool
operator|=
name|connectionPool
expr_stmt|;
block|}
comment|/**      * Returns the name of the AS/400 system.      *       * @return the name of the AS/400 system      */
DECL|method|getSystemName ()
specifier|public
name|String
name|getSystemName
parameter_list|()
block|{
return|return
name|systemName
return|;
block|}
comment|/**      * Returns the ID of the AS/400 user.      *       * @return the ID of the AS/400 user      */
DECL|method|getUserID ()
specifier|public
name|String
name|getUserID
parameter_list|()
block|{
return|return
name|userID
return|;
block|}
comment|/**      * Returns the password of the AS/400 user.      *       * @return the password of the AS/400 user      */
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * Returns the fully qualified integrated file system path name of the      * target object of this endpoint.      *       * @return the fully qualified integrated file system path name of the      *         target object of this endpoint      */
DECL|method|getObjectPath ()
specifier|public
name|String
name|getObjectPath
parameter_list|()
block|{
return|return
name|objectPath
return|;
block|}
comment|// Options
comment|/**      * Returns the CCSID to use for the connection with the AS/400 system.      * Returns -1 if the CCSID to use is the default system CCSID.      *       * @return the CCSID to use for the connection with the AS/400 system, or -1      *         if that is the default system CCSID      */
DECL|method|getCssid ()
specifier|public
name|int
name|getCssid
parameter_list|()
block|{
return|return
name|ccsid
return|;
block|}
comment|/**      * Sets the CCSID to use for the connection with the AS/400 system.      *       * @param ccsid the CCSID to use for the connection with the AS/400 system      */
DECL|method|setCcsid (int ccsid)
specifier|public
name|void
name|setCcsid
parameter_list|(
name|int
name|ccsid
parameter_list|)
block|{
name|this
operator|.
name|ccsid
operator|=
operator|(
name|ccsid
operator|<
literal|0
operator|)
condition|?
name|DEFAULT_SYSTEM_CCSID
else|:
name|ccsid
expr_stmt|;
block|}
comment|/**      * Returns the data format for sending messages.      *       * @return the data format for sending messages      */
DECL|method|getFormat ()
specifier|public
name|Format
name|getFormat
parameter_list|()
block|{
return|return
name|format
return|;
block|}
comment|/**      * Sets the data format for sending messages.      *       * @param format the data format for sending messages      * @throws IllegalArgumentException if {@code format} is null      */
DECL|method|setFormat (Format format)
specifier|public
name|void
name|setFormat
parameter_list|(
name|Format
name|format
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|format
argument_list|,
literal|"format"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
comment|/**      * Returns whether AS/400 prompting is enabled in the environment running      * Camel.      *       * @return whether AS/400 prompting is enabled in the environment running      *         Camel      */
DECL|method|isGuiAvailable ()
specifier|public
name|boolean
name|isGuiAvailable
parameter_list|()
block|{
return|return
name|guiAvailable
return|;
block|}
comment|/**      * Sets whether AS/400 prompting is enabled in the environment running      * Camel.      *       * @param guiAvailable whether AS/400 prompting is enabled in the      *            environment running Camel      */
DECL|method|setGuiAvailable (boolean guiAvailable)
specifier|public
name|void
name|setGuiAvailable
parameter_list|(
name|boolean
name|guiAvailable
parameter_list|)
block|{
name|this
operator|.
name|guiAvailable
operator|=
name|guiAvailable
expr_stmt|;
block|}
comment|// AS400 connections
comment|/**      * Obtains an {@code AS400} object that connects to this endpoint. Since      * these objects represent limited resources, clients have the      * responsibility of {@link #releaseConnection(AS400) releasing them} when      * done.      *       * @return an {@code AS400} object that connects to this endpoint      */
DECL|method|getConnection ()
specifier|public
name|AS400
name|getConnection
parameter_list|()
block|{
name|AS400
name|system
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting an AS400 object for '{}' from {}."
argument_list|,
name|systemName
operator|+
literal|'/'
operator|+
name|userID
argument_list|,
name|connectionPool
argument_list|)
expr_stmt|;
block|}
name|system
operator|=
name|connectionPool
operator|.
name|getConnection
argument_list|(
name|systemName
argument_list|,
name|userID
argument_list|,
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|ccsid
operator|!=
name|DEFAULT_SYSTEM_CCSID
condition|)
block|{
name|system
operator|.
name|setCcsid
argument_list|(
name|ccsid
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|system
operator|.
name|setGuiAvailable
argument_list|(
name|guiAvailable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PropertyVetoException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to disable AS/400 prompting in the environment running Camel. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|system
return|;
comment|// Not null here.
block|}
catch|catch
parameter_list|(
name|ConnectionPoolException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to obtain an AS/400 connection for system name '%s' and user ID '%s'"
argument_list|,
name|systemName
argument_list|,
name|userID
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PropertyVetoException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Unable to set the CSSID to use with "
operator|+
name|system
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Releases a previously obtained {@code AS400} object from use.      *       * @param connection a previously obtained {@code AS400} object to release      */
DECL|method|releaseConnection (AS400 connection)
specifier|public
name|void
name|releaseConnection
parameter_list|(
name|AS400
name|connection
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|connection
argument_list|,
literal|"connection"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connectionPool
operator|.
name|returnConnectionToPool
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

