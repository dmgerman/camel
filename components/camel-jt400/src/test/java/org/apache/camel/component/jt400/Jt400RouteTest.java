begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jt400
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jt400
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test case for routes that contain<code>jt400:</code> endpoints This test  * case does nothing by default -- you can use it to test integration when there  * is a real AS/400 system available by filling in correct values for  * {@link #USER}, {@link #PASSWORD}, {@link #SYSTEM}, {@link #LIBRARY} and  * {@link #QUEUE}  */
end_comment

begin_class
DECL|class|Jt400RouteTest
specifier|public
class|class
name|Jt400RouteTest
extends|extends
name|CamelTestSupport
block|{
comment|// fill in correct values for all constants to test with a real AS/400
comment|// system
DECL|field|USER
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"username"
decl_stmt|;
DECL|field|PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
DECL|field|SYSTEM
specifier|private
specifier|static
specifier|final
name|String
name|SYSTEM
init|=
literal|null
decl_stmt|;
DECL|field|LIBRARY
specifier|private
specifier|static
specifier|final
name|String
name|LIBRARY
init|=
literal|"library"
decl_stmt|;
DECL|field|QUEUE
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE
init|=
literal|"queue"
decl_stmt|;
annotation|@
name|Test
DECL|method|testBasicTest ()
specifier|public
name|void
name|testBasicTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|SYSTEM
operator|!=
literal|null
condition|)
block|{
name|MockEndpoint
name|endpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Test message"
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:a"
argument_list|,
literal|"Test message"
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|SYSTEM
operator|!=
literal|null
condition|)
block|{
name|String
name|uri
init|=
name|String
operator|.
name|format
argument_list|(
literal|"jt400://%s:%s@%s/QSYS.LIB/%s.LIB/%s.DTAQ"
argument_list|,
name|USER
argument_list|,
name|PASSWORD
argument_list|,
name|SYSTEM
argument_list|,
name|LIBRARY
argument_list|,
name|QUEUE
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"direct:a"
argument_list|)
operator|.
name|to
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|uri
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:a"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

