begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jt400
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jt400
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test case for {@link Jt400Component}  */
end_comment

begin_class
DECL|class|Jt400ComponentTest
specifier|public
class|class
name|Jt400ComponentTest
extends|extends
name|Jt400TestSupport
block|{
DECL|field|component
specifier|private
name|Jt400Component
name|component
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|component
operator|=
operator|new
name|Jt400Component
argument_list|()
expr_stmt|;
name|component
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test creation of a {@link Jt400Endpoint} for Datq      */
annotation|@
name|Test
DECL|method|testCreateDatqEndpoint ()
specifier|public
name|void
name|testCreateDatqEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"jt400://user:password@host/qsys.lib/library.lib/queue.dtaq?connectionPool=#mockPool"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|instanceof
name|Jt400Endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test creation of a {@link Jt400Endpoint} for pgm calls      */
annotation|@
name|Test
DECL|method|testCreatePgmEndpoint ()
specifier|public
name|void
name|testCreatePgmEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"jt400://user:password@host/qsys.lib/library.lib/queue.pgm?connectionPool=#mockPool"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|instanceof
name|Jt400Endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test exception when trying to access any other object type on AS/400      */
annotation|@
name|Test
DECL|method|testCreateEndpointForOtherObjectType ()
specifier|public
name|void
name|testCreateEndpointForOtherObjectType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"jt400://user:password@host/qsys.lib/library.lib/program.xxx"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should been thrown when trying to create an endpoint for an unsupported object type"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// this is just what we expected
block|}
block|}
comment|/**      * Test creation of a {@link Jt400Endpoint} secured for Datq      */
annotation|@
name|Test
DECL|method|testCreateDatqSecuredEndpoint ()
specifier|public
name|void
name|testCreateDatqSecuredEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"jt400://user:password@host/qsys.lib/library.lib/queue.dtaq?connectionPool=#mockPool&secured=true"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|instanceof
name|Jt400Endpoint
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Jt400Endpoint
operator|)
name|endpoint
operator|)
operator|.
name|isSecured
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test creation of a {@link Jt400Endpoint} secured for pgm calls      */
annotation|@
name|Test
DECL|method|testCreatePgmSecuredEndpoint ()
specifier|public
name|void
name|testCreatePgmSecuredEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"jt400://user:password@host/qsys.lib/library.lib/queue.pgm?connectionPool=#mockPool&secured=true"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|instanceof
name|Jt400Endpoint
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Jt400Endpoint
operator|)
name|endpoint
operator|)
operator|.
name|isSecured
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

