begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
operator|.
name|publicLookup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|SerializableParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|ObjectAssert
import|;
end_import

begin_class
DECL|class|ParameterAssert
specifier|public
specifier|final
class|class
name|ParameterAssert
extends|extends
name|ObjectAssert
argument_list|<
name|Parameter
argument_list|>
block|{
DECL|method|ParameterAssert (final Parameter actual)
specifier|private
name|ParameterAssert
parameter_list|(
specifier|final
name|Parameter
name|actual
parameter_list|)
block|{
name|super
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|hasArrayEnumSpecifiedWith (@uppressWarningsR) final T... values)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ParameterAssert
name|hasArrayEnumSpecifiedWith
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|T
modifier|...
name|values
parameter_list|)
block|{
name|isSerializable
argument_list|()
expr_stmt|;
specifier|final
name|SerializableParameter
name|serializableParameter
init|=
operator|(
name|SerializableParameter
operator|)
name|actual
decl_stmt|;
specifier|final
name|Property
name|items
init|=
name|serializableParameter
operator|.
name|getItems
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|arrayItems
init|=
name|fetchEnums
argument_list|(
name|items
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|arrayItems
argument_list|)
operator|.
name|containsOnly
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|hasEnumSpecifiedWith (final String... values)
specifier|public
name|ParameterAssert
name|hasEnumSpecifiedWith
parameter_list|(
specifier|final
name|String
modifier|...
name|values
parameter_list|)
block|{
name|isSerializable
argument_list|()
expr_stmt|;
specifier|final
name|SerializableParameter
name|serializableParameter
init|=
operator|(
name|SerializableParameter
operator|)
name|actual
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|actualEnum
init|=
name|serializableParameter
operator|.
name|getEnum
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|actualEnum
argument_list|)
operator|.
name|containsOnly
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|hasName (final String name)
specifier|public
name|ParameterAssert
name|hasName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|String
name|actualName
init|=
name|actual
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|actualName
argument_list|)
operator|.
name|as
argument_list|(
literal|"Parameter name should equal %s, but it's %s"
argument_list|,
name|name
argument_list|,
name|actualName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isGivenIn (final String in)
specifier|public
name|ParameterAssert
name|isGivenIn
parameter_list|(
specifier|final
name|String
name|in
parameter_list|)
block|{
specifier|final
name|String
name|actualIn
init|=
name|actual
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|actualIn
argument_list|)
operator|.
name|as
argument_list|(
literal|"Parameter should be specified in %s, but it's in %s"
argument_list|,
name|in
argument_list|,
name|actualIn
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isOfArrayType (final String type)
specifier|public
name|ParameterAssert
name|isOfArrayType
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
name|isSerializable
argument_list|()
expr_stmt|;
specifier|final
name|SerializableParameter
name|serializableParameter
init|=
operator|(
name|SerializableParameter
operator|)
name|actual
decl_stmt|;
specifier|final
name|Property
name|items
init|=
name|serializableParameter
operator|.
name|getItems
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|items
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
specifier|final
name|String
name|actualArrayType
init|=
name|items
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|actualArrayType
argument_list|)
operator|.
name|as
argument_list|(
literal|"Parameter array should be of %s type, but it's of %s"
argument_list|,
name|type
argument_list|,
name|actualArrayType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isOfType (final String type)
specifier|public
name|ParameterAssert
name|isOfType
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
name|isSerializable
argument_list|()
expr_stmt|;
specifier|final
name|SerializableParameter
name|serializableParameter
init|=
operator|(
name|SerializableParameter
operator|)
name|actual
decl_stmt|;
specifier|final
name|String
name|actualType
init|=
name|serializableParameter
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|actualType
argument_list|)
operator|.
name|as
argument_list|(
literal|"Parameter should be of %s type, but it's of %s"
argument_list|,
name|type
argument_list|,
name|actualType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isSerializable ()
specifier|public
name|ParameterAssert
name|isSerializable
parameter_list|()
block|{
name|isInstanceOf
argument_list|(
name|SerializableParameter
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|assertThat (final Parameter actual)
specifier|public
specifier|static
name|ParameterAssert
name|assertThat
parameter_list|(
specifier|final
name|Parameter
name|actual
parameter_list|)
block|{
return|return
operator|new
name|ParameterAssert
argument_list|(
name|actual
argument_list|)
return|;
block|}
DECL|method|fetchEnums (final Property items)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|fetchEnums
parameter_list|(
specifier|final
name|Property
name|items
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|List
argument_list|<
name|T
argument_list|>
operator|)
name|publicLookup
argument_list|()
operator|.
name|bind
argument_list|(
name|items
argument_list|,
literal|"getEnum"
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|invoke
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

