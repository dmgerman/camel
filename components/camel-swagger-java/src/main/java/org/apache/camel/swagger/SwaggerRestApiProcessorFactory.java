begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestApiProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_class
DECL|class|SwaggerRestApiProcessorFactory
specifier|public
class|class
name|SwaggerRestApiProcessorFactory
implements|implements
name|RestApiProcessorFactory
block|{
annotation|@
name|Override
DECL|method|createApiProcessor (CamelContext camelContext, String contextPath, String contextIdPattern, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Processor
name|createApiProcessor
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|String
name|contextIdPattern
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|options
operator|.
name|putAll
argument_list|(
name|configuration
operator|.
name|getApiProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// need to include host in options
name|String
name|host
init|=
operator|(
name|String
operator|)
name|options
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
name|configuration
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|int
name|port
init|=
name|configuration
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
operator|&&
name|port
operator|>
literal|0
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|host
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|options
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// and context path is the base.path
name|String
name|path
init|=
name|configuration
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"base.path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|RestSwaggerProcessor
argument_list|(
name|contextIdPattern
argument_list|,
name|options
argument_list|)
return|;
block|}
block|}
end_class

end_unit

