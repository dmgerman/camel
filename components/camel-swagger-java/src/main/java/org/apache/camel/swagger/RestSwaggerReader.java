begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|jaxrs
operator|.
name|config
operator|.
name|BeanConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|ModelImpl
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|RefModel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Swagger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|AbstractSerializableParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|BodyParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|FormParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|HeaderParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|PathParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|QueryParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|SerializableParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|BooleanProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|DoubleProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|FloatProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|IntegerProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|LongProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|RefProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestOperationParamDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestOperationResponseHeaderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestOperationResponseMsgDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|VerbDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A Camel REST-DSL swagger reader that parse the rest-dsl into a swagger model representation.  *<p/>  * This reader supports the<a href="http://swagger.io/specification/">Swagger Specification 2.0</a>  */
end_comment

begin_class
DECL|class|RestSwaggerReader
specifier|public
class|class
name|RestSwaggerReader
block|{
comment|/**      * Read the REST-DSL definition's and parse that as a Swagger model representation      *      * @param rests             the rest-dsl      * @param route             optional route path to filter the rest-dsl to only include from the chose route      * @param config            the swagger configuration      * @param classResolver     class resolver to use      * @return the swagger model      */
DECL|method|read (List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver)
specifier|public
name|Swagger
name|read
parameter_list|(
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|rests
parameter_list|,
name|String
name|route
parameter_list|,
name|BeanConfig
name|config
parameter_list|,
name|String
name|camelContextId
parameter_list|,
name|ClassResolver
name|classResolver
parameter_list|)
block|{
name|Swagger
name|swagger
init|=
operator|new
name|Swagger
argument_list|()
decl_stmt|;
for|for
control|(
name|RestDefinition
name|rest
range|:
name|rests
control|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|route
argument_list|)
operator|&&
operator|!
name|route
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// filter by route
if|if
condition|(
operator|!
name|rest
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|route
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|parse
argument_list|(
name|swagger
argument_list|,
name|rest
argument_list|,
name|camelContextId
argument_list|,
name|classResolver
argument_list|)
expr_stmt|;
block|}
comment|// configure before returning
name|swagger
operator|=
name|config
operator|.
name|configure
argument_list|(
name|swagger
argument_list|)
expr_stmt|;
return|return
name|swagger
return|;
block|}
DECL|method|parse (Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver)
specifier|private
name|void
name|parse
parameter_list|(
name|Swagger
name|swagger
parameter_list|,
name|RestDefinition
name|rest
parameter_list|,
name|String
name|camelContextId
parameter_list|,
name|ClassResolver
name|classResolver
parameter_list|)
block|{
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rest
operator|.
name|getVerbs
argument_list|()
argument_list|)
decl_stmt|;
comment|// must sort the verbs by uri so we group them together when an uri has multiple operations
name|Collections
operator|.
name|sort
argument_list|(
name|verbs
argument_list|,
operator|new
name|VerbOrdering
argument_list|()
argument_list|)
expr_stmt|;
comment|// we need to group the operations within the same tag, so use the path as default if not configured
name|String
name|pathAsTag
init|=
name|rest
operator|.
name|getTag
argument_list|()
operator|!=
literal|null
condition|?
name|rest
operator|.
name|getTag
argument_list|()
else|:
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|rest
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|summary
init|=
name|rest
operator|.
name|getDescriptionText
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pathAsTag
argument_list|)
condition|)
block|{
comment|// add rest as tag
name|Tag
name|tag
init|=
operator|new
name|Tag
argument_list|()
decl_stmt|;
name|tag
operator|.
name|description
argument_list|(
name|summary
argument_list|)
expr_stmt|;
name|tag
operator|.
name|name
argument_list|(
name|pathAsTag
argument_list|)
expr_stmt|;
name|swagger
operator|.
name|addTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
comment|// gather all types in use
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|VerbDefinition
name|verb
range|:
name|verbs
control|)
block|{
comment|// check if the Verb Definition must be excluded from documentation
name|Boolean
name|apiDocs
decl_stmt|;
if|if
condition|(
name|verb
operator|.
name|getApiDocs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|apiDocs
operator|=
name|verb
operator|.
name|getApiDocs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to option on rest
name|apiDocs
operator|=
name|rest
operator|.
name|getApiDocs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|apiDocs
operator|!=
literal|null
operator|&&
operator|!
name|apiDocs
condition|)
block|{
continue|continue;
block|}
name|String
name|type
init|=
name|verb
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
name|verb
operator|.
name|getOutType
argument_list|()
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|// there can also be types in response messages
if|if
condition|(
name|verb
operator|.
name|getResponseMsgs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestOperationResponseMsgDefinition
name|def
range|:
name|verb
operator|.
name|getResponseMsgs
argument_list|()
control|)
block|{
name|type
operator|=
name|def
operator|.
name|getResponseModel
argument_list|()
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// use annotation scanner to find models (annotated classes)
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|classResolver
operator|.
name|resolveClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|appendModels
argument_list|(
name|clazz
argument_list|,
name|swagger
argument_list|)
expr_stmt|;
block|}
name|doParseVerbs
argument_list|(
name|swagger
argument_list|,
name|rest
argument_list|,
name|camelContextId
argument_list|,
name|verbs
argument_list|,
name|pathAsTag
argument_list|)
expr_stmt|;
block|}
DECL|method|doParseVerbs (Swagger swagger, RestDefinition rest, String camelContextId, List<VerbDefinition> verbs, String pathAsTag)
specifier|private
name|void
name|doParseVerbs
parameter_list|(
name|Swagger
name|swagger
parameter_list|,
name|RestDefinition
name|rest
parameter_list|,
name|String
name|camelContextId
parameter_list|,
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
parameter_list|,
name|String
name|pathAsTag
parameter_list|)
block|{
comment|// used during gathering of apis
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|basePath
init|=
name|rest
operator|.
name|getPath
argument_list|()
decl_stmt|;
for|for
control|(
name|VerbDefinition
name|verb
range|:
name|verbs
control|)
block|{
comment|// check if the Verb Definition must be excluded from documentation
name|Boolean
name|apiDocs
decl_stmt|;
if|if
condition|(
name|verb
operator|.
name|getApiDocs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|apiDocs
operator|=
name|verb
operator|.
name|getApiDocs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to option on rest
name|apiDocs
operator|=
name|rest
operator|.
name|getApiDocs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|apiDocs
operator|!=
literal|null
operator|&&
operator|!
name|apiDocs
condition|)
block|{
continue|continue;
block|}
comment|// the method must be in lower case
name|String
name|method
init|=
name|verb
operator|.
name|asVerb
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
comment|// operation path is a key
name|String
name|opPath
init|=
name|SwaggerHelper
operator|.
name|buildUrl
argument_list|(
name|basePath
argument_list|,
name|verb
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pathAsTag
argument_list|)
condition|)
block|{
comment|// group in the same tag
name|op
operator|.
name|addTag
argument_list|(
name|pathAsTag
argument_list|)
expr_stmt|;
block|}
comment|// add id as vendor extensions
name|op
operator|.
name|getVendorExtensions
argument_list|()
operator|.
name|put
argument_list|(
literal|"x-camelContextId"
argument_list|,
name|camelContextId
argument_list|)
expr_stmt|;
name|op
operator|.
name|getVendorExtensions
argument_list|()
operator|.
name|put
argument_list|(
literal|"x-routeId"
argument_list|,
name|verb
operator|.
name|getRouteId
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|swagger
operator|.
name|getPath
argument_list|(
name|opPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|()
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|set
argument_list|(
name|method
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|String
name|consumes
init|=
name|verb
operator|.
name|getConsumes
argument_list|()
operator|!=
literal|null
condition|?
name|verb
operator|.
name|getConsumes
argument_list|()
else|:
name|rest
operator|.
name|getConsumes
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumes
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|consumes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|op
operator|.
name|addConsumes
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|produces
init|=
name|verb
operator|.
name|getProduces
argument_list|()
operator|!=
literal|null
condition|?
name|verb
operator|.
name|getProduces
argument_list|()
else|:
name|rest
operator|.
name|getProduces
argument_list|()
decl_stmt|;
if|if
condition|(
name|produces
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|produces
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|op
operator|.
name|addProduces
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|verb
operator|.
name|getDescriptionText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|summary
argument_list|(
name|verb
operator|.
name|getDescriptionText
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RestOperationParamDefinition
name|param
range|:
name|verb
operator|.
name|getParams
argument_list|()
control|)
block|{
name|Parameter
name|parameter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|body
argument_list|)
condition|)
block|{
name|parameter
operator|=
operator|new
name|BodyParameter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|formData
argument_list|)
condition|)
block|{
name|parameter
operator|=
operator|new
name|FormParameter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|header
argument_list|)
condition|)
block|{
name|parameter
operator|=
operator|new
name|HeaderParameter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|path
argument_list|)
condition|)
block|{
name|parameter
operator|=
operator|new
name|PathParameter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|query
argument_list|)
condition|)
block|{
name|parameter
operator|=
operator|new
name|QueryParameter
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parameter
operator|!=
literal|null
condition|)
block|{
name|parameter
operator|.
name|setName
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|parameter
operator|.
name|setDescription
argument_list|(
name|param
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|parameter
operator|.
name|setRequired
argument_list|(
name|param
operator|.
name|getRequired
argument_list|()
argument_list|)
expr_stmt|;
comment|// set type on parameter
if|if
condition|(
name|parameter
operator|instanceof
name|SerializableParameter
condition|)
block|{
name|SerializableParameter
name|serializableParameter
init|=
operator|(
name|SerializableParameter
operator|)
name|parameter
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|getDataType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serializableParameter
operator|.
name|setType
argument_list|(
name|param
operator|.
name|getDataType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|param
operator|.
name|getDataType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"array"
argument_list|)
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|serializableParameter
operator|.
name|setItems
argument_list|(
operator|new
name|StringProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"int"
argument_list|)
operator|||
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"integer"
argument_list|)
condition|)
block|{
name|serializableParameter
operator|.
name|setItems
argument_list|(
operator|new
name|IntegerProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|serializableParameter
operator|.
name|setItems
argument_list|(
operator|new
name|LongProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|serializableParameter
operator|.
name|setItems
argument_list|(
operator|new
name|FloatProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
name|serializableParameter
operator|.
name|setItems
argument_list|(
operator|new
name|DoubleProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|serializableParameter
operator|.
name|setItems
argument_list|(
operator|new
name|BooleanProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|param
operator|.
name|getCollectionFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serializableParameter
operator|.
name|setCollectionFormat
argument_list|(
name|param
operator|.
name|getCollectionFormat
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getAllowableValues
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|param
operator|.
name|getAllowableValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|serializableParameter
operator|.
name|setEnum
argument_list|(
name|param
operator|.
name|getAllowableValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set default value on parameter
if|if
condition|(
name|parameter
operator|instanceof
name|AbstractSerializableParameter
condition|)
block|{
name|AbstractSerializableParameter
name|qp
init|=
operator|(
name|AbstractSerializableParameter
operator|)
name|parameter
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|getDefaultValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|qp
operator|.
name|setDefaultValue
argument_list|(
name|param
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set schema on body parameter
if|if
condition|(
name|parameter
operator|instanceof
name|BodyParameter
condition|)
block|{
name|BodyParameter
name|bp
init|=
operator|(
name|BodyParameter
operator|)
name|parameter
decl_stmt|;
if|if
condition|(
name|verb
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|verb
operator|.
name|getType
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|String
name|typeName
init|=
name|verb
operator|.
name|getType
argument_list|()
decl_stmt|;
name|typeName
operator|=
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|typeName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|Property
name|prop
init|=
name|modelTypeAsProperty
argument_list|(
name|typeName
argument_list|,
name|swagger
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|ArrayModel
name|arrayModel
init|=
operator|new
name|ArrayModel
argument_list|()
decl_stmt|;
name|arrayModel
operator|.
name|setItems
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setSchema
argument_list|(
name|arrayModel
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|ref
init|=
name|modelTypeAsRef
argument_list|(
name|verb
operator|.
name|getType
argument_list|()
argument_list|,
name|swagger
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|bp
operator|.
name|setSchema
argument_list|(
operator|new
name|RefModel
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|op
operator|.
name|addParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we have an out type then set that as response message
if|if
condition|(
name|verb
operator|.
name|getOutType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Response
name|response
init|=
operator|new
name|Response
argument_list|()
decl_stmt|;
name|Property
name|prop
init|=
name|modelTypeAsProperty
argument_list|(
name|verb
operator|.
name|getOutType
argument_list|()
argument_list|,
name|swagger
argument_list|)
decl_stmt|;
name|response
operator|.
name|setSchema
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDescription
argument_list|(
literal|"Output type"
argument_list|)
expr_stmt|;
name|op
operator|.
name|addResponse
argument_list|(
literal|"200"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
comment|// enrich with configured response messages from the rest-dsl
name|doParseResponseMessages
argument_list|(
name|swagger
argument_list|,
name|verb
argument_list|,
name|op
argument_list|)
expr_stmt|;
comment|// add path
name|swagger
operator|.
name|path
argument_list|(
name|opPath
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParseResponseMessages (Swagger swagger, VerbDefinition verb, Operation op)
specifier|private
name|void
name|doParseResponseMessages
parameter_list|(
name|Swagger
name|swagger
parameter_list|,
name|VerbDefinition
name|verb
parameter_list|,
name|Operation
name|op
parameter_list|)
block|{
for|for
control|(
name|RestOperationResponseMsgDefinition
name|msg
range|:
name|verb
operator|.
name|getResponseMsgs
argument_list|()
control|)
block|{
name|Response
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getResponses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|response
operator|=
name|op
operator|.
name|getResponses
argument_list|()
operator|.
name|get
argument_list|(
name|msg
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|msg
operator|.
name|getResponseModel
argument_list|()
argument_list|)
condition|)
block|{
name|Property
name|prop
init|=
name|modelTypeAsProperty
argument_list|(
name|msg
operator|.
name|getResponseModel
argument_list|()
argument_list|,
name|swagger
argument_list|)
decl_stmt|;
name|response
operator|.
name|setSchema
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setDescription
argument_list|(
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// add headers
if|if
condition|(
name|msg
operator|.
name|getHeaders
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestOperationResponseHeaderDefinition
name|header
range|:
name|msg
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|header
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|header
operator|.
name|getDataType
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"string"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|StringProperty
name|sp
init|=
operator|new
name|StringProperty
argument_list|()
decl_stmt|;
name|sp
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setDescription
argument_list|(
name|header
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|.
name|getAllowableValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sp
operator|.
name|setEnum
argument_list|(
name|header
operator|.
name|getAllowableValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|sp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"integer"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|IntegerProperty
name|ip
init|=
operator|new
name|IntegerProperty
argument_list|()
decl_stmt|;
name|ip
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ip
operator|.
name|setDescription
argument_list|(
name|header
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|getAllowableValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|text
range|:
name|header
operator|.
name|getAllowableValues
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ip
operator|.
name|setEnum
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|ip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|LongProperty
name|lp
init|=
operator|new
name|LongProperty
argument_list|()
decl_stmt|;
name|lp
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lp
operator|.
name|setDescription
argument_list|(
name|header
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|getAllowableValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|text
range|:
name|header
operator|.
name|getAllowableValues
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lp
operator|.
name|setEnum
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|lp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|FloatProperty
name|lp
init|=
operator|new
name|FloatProperty
argument_list|()
decl_stmt|;
name|lp
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lp
operator|.
name|setDescription
argument_list|(
name|header
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|getAllowableValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|text
range|:
name|header
operator|.
name|getAllowableValues
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lp
operator|.
name|setEnum
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|lp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|DoubleProperty
name|dp
init|=
operator|new
name|DoubleProperty
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setDescription
argument_list|(
name|header
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|getAllowableValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|text
range|:
name|header
operator|.
name|getAllowableValues
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dp
operator|.
name|setEnum
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|dp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|BooleanProperty
name|bp
init|=
operator|new
name|BooleanProperty
argument_list|()
decl_stmt|;
name|bp
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setDescription
argument_list|(
name|header
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|bp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"array"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|ArrayProperty
name|ap
init|=
operator|new
name|ArrayProperty
argument_list|()
decl_stmt|;
name|ap
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ap
operator|.
name|setDescription
argument_list|(
name|header
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setItems
argument_list|(
operator|new
name|StringProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"int"
argument_list|)
operator|||
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"integer"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setItems
argument_list|(
operator|new
name|IntegerProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setItems
argument_list|(
operator|new
name|LongProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setItems
argument_list|(
operator|new
name|FloatProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setItems
argument_list|(
operator|new
name|DoubleProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setItems
argument_list|(
operator|new
name|BooleanProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|ap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|op
operator|.
name|addResponse
argument_list|(
name|msg
operator|.
name|getCode
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|asModel (String typeName, Swagger swagger)
specifier|private
name|Model
name|asModel
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Swagger
name|swagger
parameter_list|)
block|{
name|boolean
name|array
init|=
name|typeName
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|typeName
operator|=
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|typeName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|swagger
operator|.
name|getDefinitions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Model
name|model
range|:
name|swagger
operator|.
name|getDefinitions
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|StringProperty
name|modelType
init|=
operator|(
name|StringProperty
operator|)
name|model
operator|.
name|getVendorExtensions
argument_list|()
operator|.
name|get
argument_list|(
literal|"x-className"
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelType
operator|!=
literal|null
operator|&&
name|typeName
operator|.
name|equals
argument_list|(
name|modelType
operator|.
name|getFormat
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|model
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|modelTypeAsRef (String typeName, Swagger swagger)
specifier|private
name|String
name|modelTypeAsRef
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Swagger
name|swagger
parameter_list|)
block|{
name|boolean
name|array
init|=
name|typeName
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|typeName
operator|=
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|typeName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|Model
name|model
init|=
name|asModel
argument_list|(
name|typeName
argument_list|,
name|swagger
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
name|typeName
operator|=
operator|(
operator|(
name|ModelImpl
operator|)
name|model
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
return|return
name|typeName
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|modelTypeAsProperty (String typeName, Swagger swagger)
specifier|private
name|Property
name|modelTypeAsProperty
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Swagger
name|swagger
parameter_list|)
block|{
name|boolean
name|array
init|=
name|typeName
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|typeName
operator|=
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|typeName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|String
name|ref
init|=
name|modelTypeAsRef
argument_list|(
name|typeName
argument_list|,
name|swagger
argument_list|)
decl_stmt|;
name|Property
name|prop
init|=
name|ref
operator|!=
literal|null
condition|?
operator|new
name|RefProperty
argument_list|(
name|ref
argument_list|)
else|:
operator|new
name|StringProperty
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
return|return
operator|new
name|ArrayProperty
argument_list|(
name|prop
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|prop
return|;
block|}
block|}
comment|/**      * If the class is annotated with swagger annotations its parsed into a Swagger model representation      * which is added to swagger      *      * @param clazz   the class such as pojo with swagger annotation      * @param swagger the swagger model      */
DECL|method|appendModels (Class clazz, Swagger swagger)
specifier|private
name|void
name|appendModels
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Swagger
name|swagger
parameter_list|)
block|{
name|RestModelConverters
name|converters
init|=
operator|new
name|RestModelConverters
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Model
argument_list|>
name|models
init|=
name|converters
operator|.
name|readClass
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Model
argument_list|>
name|entry
range|:
name|models
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// favor keeping any existing model that has the vendor extension in the model
name|boolean
name|oldExt
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|swagger
operator|.
name|getDefinitions
argument_list|()
operator|!=
literal|null
operator|&&
name|swagger
operator|.
name|getDefinitions
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Model
name|oldModel
init|=
name|swagger
operator|.
name|getDefinitions
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldModel
operator|.
name|getVendorExtensions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|oldExt
operator|=
name|oldModel
operator|.
name|getVendorExtensions
argument_list|()
operator|.
name|get
argument_list|(
literal|"x-className"
argument_list|)
operator|==
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|oldExt
condition|)
block|{
name|swagger
operator|.
name|model
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * To sort the rest operations      */
DECL|class|VerbOrdering
specifier|private
specifier|static
class|class
name|VerbOrdering
implements|implements
name|Comparator
argument_list|<
name|VerbDefinition
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (VerbDefinition a, VerbDefinition b)
specifier|public
name|int
name|compare
parameter_list|(
name|VerbDefinition
name|a
parameter_list|,
name|VerbDefinition
name|b
parameter_list|)
block|{
name|String
name|u1
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// replace { with _ which comes before a when soring by char
name|u1
operator|=
name|a
operator|.
name|getUri
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
block|}
name|String
name|u2
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// replace { with _ which comes before a when soring by char
name|u2
operator|=
name|b
operator|.
name|getUri
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
block|}
name|int
name|num
init|=
name|u1
operator|.
name|compareTo
argument_list|(
name|u2
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|0
condition|)
block|{
comment|// same uri, so use http method as sorting
name|num
operator|=
name|a
operator|.
name|asVerb
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|asVerb
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|num
return|;
block|}
block|}
block|}
end_class

end_unit

