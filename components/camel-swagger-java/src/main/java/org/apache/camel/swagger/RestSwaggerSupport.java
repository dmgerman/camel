begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|SerializationFeature
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|jaxrs
operator|.
name|config
operator|.
name|BeanConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Contact
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Info
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|License
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Scheme
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Swagger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|util
operator|.
name|Yaml
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelVersionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|XmlLineNumberParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|swagger
operator|.
name|SwaggerHelper
operator|.
name|clearVendorExtensions
import|;
end_import

begin_comment
comment|/**  * A support class for that allows SPI to plugin  * and offer Swagger API service listings as part of the Camel component. This allows rest-dsl components  * such as servlet/jetty/netty4-http to offer Swagger API listings with minimal effort.  */
end_comment

begin_class
DECL|class|RestSwaggerSupport
specifier|public
class|class
name|RestSwaggerSupport
block|{
DECL|field|HEADER_X_FORWARDED_PREFIX
specifier|static
specifier|final
name|String
name|HEADER_X_FORWARDED_PREFIX
init|=
literal|"X-Forwarded-Prefix"
decl_stmt|;
DECL|field|HEADER_X_FORWARDED_HOST
specifier|static
specifier|final
name|String
name|HEADER_X_FORWARDED_HOST
init|=
literal|"X-Forwarded-Host"
decl_stmt|;
DECL|field|HEADER_X_FORWARDED_PROTO
specifier|static
specifier|final
name|String
name|HEADER_X_FORWARDED_PROTO
init|=
literal|"X-Forwarded-Proto"
decl_stmt|;
DECL|field|HEADER_HOST
specifier|static
specifier|final
name|String
name|HEADER_HOST
init|=
literal|"Host"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RestSwaggerSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|reader
specifier|private
name|RestSwaggerReader
name|reader
init|=
operator|new
name|RestSwaggerReader
argument_list|()
decl_stmt|;
DECL|field|cors
specifier|private
name|boolean
name|cors
decl_stmt|;
DECL|method|initSwagger (BeanConfig swaggerConfig, Map<String, Object> config)
specifier|public
name|void
name|initSwagger
parameter_list|(
name|BeanConfig
name|swaggerConfig
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
comment|// configure swagger options
name|String
name|s
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"swagger.version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|swaggerConfig
operator|.
name|setVersion
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"base.path"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|swaggerConfig
operator|.
name|setBasePath
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|swaggerConfig
operator|.
name|setHost
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"cors"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|cors
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"schemes"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
comment|// deprecated due typo
name|s
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"schemas"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|schemes
init|=
name|s
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|swaggerConfig
operator|.
name|setSchemes
argument_list|(
name|schemes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// assume http by default
name|swaggerConfig
operator|.
name|setSchemes
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"http"
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|version
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"api.version"
argument_list|)
decl_stmt|;
name|String
name|title
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"api.title"
argument_list|)
decl_stmt|;
name|String
name|description
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"api.description"
argument_list|)
decl_stmt|;
name|String
name|termsOfService
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"api.termsOfService"
argument_list|)
decl_stmt|;
name|String
name|licenseName
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"api.license.name"
argument_list|)
decl_stmt|;
name|String
name|licenseUrl
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"api.license.url"
argument_list|)
decl_stmt|;
name|String
name|contactName
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"api.contact.name"
argument_list|)
decl_stmt|;
name|String
name|contactUrl
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"api.contact.url"
argument_list|)
decl_stmt|;
name|String
name|contactEmail
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"api.contact.email"
argument_list|)
decl_stmt|;
name|Info
name|info
init|=
operator|new
name|Info
argument_list|()
decl_stmt|;
name|info
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTermsOfService
argument_list|(
name|termsOfService
argument_list|)
expr_stmt|;
if|if
condition|(
name|licenseName
operator|!=
literal|null
operator|||
name|licenseUrl
operator|!=
literal|null
condition|)
block|{
name|License
name|license
init|=
operator|new
name|License
argument_list|()
decl_stmt|;
name|license
operator|.
name|setName
argument_list|(
name|licenseName
argument_list|)
expr_stmt|;
name|license
operator|.
name|setUrl
argument_list|(
name|licenseUrl
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLicense
argument_list|(
name|license
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contactName
operator|!=
literal|null
operator|||
name|contactUrl
operator|!=
literal|null
operator|||
name|contactEmail
operator|!=
literal|null
condition|)
block|{
name|Contact
name|contact
init|=
operator|new
name|Contact
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setName
argument_list|(
name|contactName
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setUrl
argument_list|(
name|contactUrl
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|contactEmail
argument_list|)
expr_stmt|;
name|info
operator|.
name|setContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
name|swaggerConfig
operator|.
name|setInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|getRestDefinitions (CamelContext camelContext)
specifier|public
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|getRestDefinitions
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
name|ModelCamelContext
name|context
init|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|rests
init|=
name|context
operator|.
name|getRestDefinitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|rests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// use a routes definition to dump the rests
name|RestsDefinition
name|def
init|=
operator|new
name|RestsDefinition
argument_list|()
decl_stmt|;
name|def
operator|.
name|setRests
argument_list|(
name|rests
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|ModelHelper
operator|.
name|dumpModelAsXml
argument_list|(
name|context
argument_list|,
name|def
argument_list|)
decl_stmt|;
comment|// if resolving placeholders we parse the xml, and resolve the property placeholders during parsing
specifier|final
name|AtomicBoolean
name|changed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|dom
init|=
name|XmlLineNumberParser
operator|.
name|parseXml
argument_list|(
name|is
argument_list|,
operator|new
name|XmlLineNumberParser
operator|.
name|XmlTextTransformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|transform
parameter_list|(
name|String
name|text
parameter_list|)
block|{
try|try
block|{
name|String
name|after
init|=
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|changed
operator|.
name|get
argument_list|()
condition|)
block|{
name|changed
operator|.
name|set
argument_list|(
operator|!
name|text
operator|.
name|equals
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|after
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
return|return
name|text
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// okay there were some property placeholder replaced so re-create the model
if|if
condition|(
name|changed
operator|.
name|get
argument_list|()
condition|)
block|{
name|xml
operator|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|dom
argument_list|)
expr_stmt|;
name|RestsDefinition
name|model
init|=
name|ModelHelper
operator|.
name|createModelFromXml
argument_list|(
name|context
argument_list|,
name|xml
argument_list|,
name|RestsDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
return|return
name|model
operator|.
name|getRests
argument_list|()
return|;
block|}
block|}
return|return
name|rests
return|;
block|}
DECL|method|getRestDefinitions (String camelId)
specifier|public
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|getRestDefinitions
parameter_list|(
name|String
name|camelId
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectName
name|found
init|=
literal|null
decl_stmt|;
name|boolean
name|supportResolvePlaceholder
init|=
literal|false
decl_stmt|;
name|MBeanServer
name|server
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|names
init|=
name|server
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.camel:type=context,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectName
name|on
range|:
name|names
control|)
block|{
name|String
name|id
init|=
name|on
operator|.
name|getKeyProperty
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|id
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelId
operator|==
literal|null
operator|||
name|camelId
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// filter out older Camel versions as this requires Camel 2.15 or better (rest-dsl)
name|String
name|version
init|=
operator|(
name|String
operator|)
name|server
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"CamelVersion"
argument_list|)
decl_stmt|;
if|if
condition|(
name|CamelVersionHelper
operator|.
name|isGE
argument_list|(
literal|"2.15.0"
argument_list|,
name|version
argument_list|)
condition|)
block|{
name|found
operator|=
name|on
expr_stmt|;
block|}
if|if
condition|(
name|CamelVersionHelper
operator|.
name|isGE
argument_list|(
literal|"2.15.3"
argument_list|,
name|version
argument_list|)
condition|)
block|{
name|supportResolvePlaceholder
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|xml
decl_stmt|;
if|if
condition|(
name|supportResolvePlaceholder
condition|)
block|{
name|xml
operator|=
operator|(
name|String
operator|)
name|server
operator|.
name|invoke
argument_list|(
name|found
argument_list|,
literal|"dumpRestsAsXml"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|true
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"boolean"
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xml
operator|=
operator|(
name|String
operator|)
name|server
operator|.
name|invoke
argument_list|(
name|found
argument_list|,
literal|"dumpRestsAsXml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|xml
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DumpRestAsXml:\n{}"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|RestsDefinition
name|rests
init|=
name|ModelHelper
operator|.
name|createModelFromXml
argument_list|(
literal|null
argument_list|,
name|xml
argument_list|,
name|RestsDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rests
operator|!=
literal|null
condition|)
block|{
return|return
name|rests
operator|.
name|getRests
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|findCamelContexts ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findCamelContexts
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|MBeanServer
name|server
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|names
init|=
name|server
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"*:type=context,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectName
name|on
range|:
name|names
control|)
block|{
name|String
name|id
init|=
name|on
operator|.
name|getKeyProperty
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|id
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// filter out older Camel versions as this requires Camel 2.15 or better (rest-dsl)
try|try
block|{
name|String
name|version
init|=
operator|(
name|String
operator|)
name|server
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"CamelVersion"
argument_list|)
decl_stmt|;
if|if
condition|(
name|CamelVersionHelper
operator|.
name|isGE
argument_list|(
literal|"2.15.0"
argument_list|,
name|version
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AttributeNotFoundException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|renderResourceListing (CamelContext camelContext, RestApiResponseAdapter response, BeanConfig swaggerConfig, String contextId, String route, boolean json, boolean yaml, Map<String, Object> headers, ClassResolver classResolver, RestConfiguration configuration)
specifier|public
name|void
name|renderResourceListing
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|RestApiResponseAdapter
name|response
parameter_list|,
name|BeanConfig
name|swaggerConfig
parameter_list|,
name|String
name|contextId
parameter_list|,
name|String
name|route
parameter_list|,
name|boolean
name|json
parameter_list|,
name|boolean
name|yaml
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|ClassResolver
name|classResolver
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"renderResourceListing"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cors
condition|)
block|{
name|setupCorsHeaders
argument_list|(
name|response
argument_list|,
name|configuration
operator|.
name|getCorsHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|rests
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|camelContext
operator|!=
literal|null
operator|&&
name|camelContext
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|contextId
argument_list|)
condition|)
block|{
name|rests
operator|=
name|getRestDefinitions
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rests
operator|=
name|getRestDefinitions
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rests
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|apiProperties
init|=
name|configuration
operator|.
name|getApiProperties
argument_list|()
operator|!=
literal|null
condition|?
name|configuration
operator|.
name|getApiProperties
argument_list|()
else|:
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|json
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
operator|(
name|String
operator|)
name|apiProperties
operator|.
name|getOrDefault
argument_list|(
literal|"api.specification.contentType.json"
argument_list|,
literal|"application/json"
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the rest-dsl into swagger model
name|Swagger
name|swagger
init|=
name|reader
operator|.
name|read
argument_list|(
name|rests
argument_list|,
name|route
argument_list|,
name|swaggerConfig
argument_list|,
name|contextId
argument_list|,
name|classResolver
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isUseXForwardHeaders
argument_list|()
condition|)
block|{
name|setupXForwardedHeaders
argument_list|(
name|swagger
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|configuration
operator|.
name|isApiVendorExtension
argument_list|()
condition|)
block|{
name|clearVendorExtensions
argument_list|(
name|swagger
argument_list|)
expr_stmt|;
block|}
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|enable
argument_list|(
name|SerializationFeature
operator|.
name|INDENT_OUTPUT
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setSerializationInclusion
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|mapper
operator|.
name|writeValueAsBytes
argument_list|(
name|swagger
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_LENGTH
argument_list|,
literal|""
operator|+
name|len
argument_list|)
expr_stmt|;
name|response
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
operator|(
name|String
operator|)
name|apiProperties
operator|.
name|getOrDefault
argument_list|(
literal|"api.specification.contentType.yaml"
argument_list|,
literal|"text/yaml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the rest-dsl into swagger model
name|Swagger
name|swagger
init|=
name|reader
operator|.
name|read
argument_list|(
name|rests
argument_list|,
name|route
argument_list|,
name|swaggerConfig
argument_list|,
name|contextId
argument_list|,
name|classResolver
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isUseXForwardHeaders
argument_list|()
condition|)
block|{
name|setupXForwardedHeaders
argument_list|(
name|swagger
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|configuration
operator|.
name|isApiVendorExtension
argument_list|()
condition|)
block|{
name|clearVendorExtensions
argument_list|(
name|swagger
argument_list|)
expr_stmt|;
block|}
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|enable
argument_list|(
name|SerializationFeature
operator|.
name|INDENT_OUTPUT
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setSerializationInclusion
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
expr_stmt|;
name|byte
index|[]
name|jsonData
init|=
name|mapper
operator|.
name|writeValueAsBytes
argument_list|(
name|swagger
argument_list|)
decl_stmt|;
comment|// json to yaml
name|JsonNode
name|node
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|jsonData
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|Yaml
operator|.
name|mapper
argument_list|()
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValueAsBytes
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_LENGTH
argument_list|,
literal|""
operator|+
name|len
argument_list|)
expr_stmt|;
name|response
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|response
operator|.
name|noContent
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Renders a list of available CamelContexts in the JVM      */
DECL|method|renderCamelContexts (RestApiResponseAdapter response, String contextId, String contextIdPattern, boolean json, boolean yaml, RestConfiguration configuration)
specifier|public
name|void
name|renderCamelContexts
parameter_list|(
name|RestApiResponseAdapter
name|response
parameter_list|,
name|String
name|contextId
parameter_list|,
name|String
name|contextIdPattern
parameter_list|,
name|boolean
name|json
parameter_list|,
name|boolean
name|yaml
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"renderCamelContexts"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cors
condition|)
block|{
name|setupCorsHeaders
argument_list|(
name|response
argument_list|,
name|configuration
operator|.
name|getCorsHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|contexts
init|=
name|findCamelContexts
argument_list|()
decl_stmt|;
comment|// filter non matched CamelContext's
if|if
condition|(
name|contextIdPattern
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|contexts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|match
decl_stmt|;
if|if
condition|(
literal|"#name#"
operator|.
name|equals
argument_list|(
name|contextIdPattern
argument_list|)
condition|)
block|{
name|match
operator|=
name|name
operator|.
name|equals
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|match
operator|=
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|name
argument_list|,
name|contextIdPattern
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|json
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contexts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|contexts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{\"name\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"}"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|contexts
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/yaml"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contexts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|contexts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"- \""
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|len
init|=
name|sb
operator|.
name|length
argument_list|()
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_LENGTH
argument_list|,
literal|""
operator|+
name|len
argument_list|)
expr_stmt|;
name|response
operator|.
name|writeBytes
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupCorsHeaders (RestApiResponseAdapter response, Map<String, String> corsHeaders)
specifier|private
specifier|static
name|void
name|setupCorsHeaders
parameter_list|(
name|RestApiResponseAdapter
name|response
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|corsHeaders
parameter_list|)
block|{
comment|// use default value if none has been configured
name|String
name|allowOrigin
init|=
name|corsHeaders
operator|!=
literal|null
condition|?
name|corsHeaders
operator|.
name|get
argument_list|(
literal|"Access-Control-Allow-Origin"
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|allowOrigin
operator|==
literal|null
condition|)
block|{
name|allowOrigin
operator|=
name|RestConfiguration
operator|.
name|CORS_ACCESS_CONTROL_ALLOW_ORIGIN
expr_stmt|;
block|}
name|String
name|allowMethods
init|=
name|corsHeaders
operator|!=
literal|null
condition|?
name|corsHeaders
operator|.
name|get
argument_list|(
literal|"Access-Control-Allow-Methods"
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|allowMethods
operator|==
literal|null
condition|)
block|{
name|allowMethods
operator|=
name|RestConfiguration
operator|.
name|CORS_ACCESS_CONTROL_ALLOW_METHODS
expr_stmt|;
block|}
name|String
name|allowHeaders
init|=
name|corsHeaders
operator|!=
literal|null
condition|?
name|corsHeaders
operator|.
name|get
argument_list|(
literal|"Access-Control-Allow-Headers"
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|allowHeaders
operator|==
literal|null
condition|)
block|{
name|allowHeaders
operator|=
name|RestConfiguration
operator|.
name|CORS_ACCESS_CONTROL_ALLOW_HEADERS
expr_stmt|;
block|}
name|String
name|maxAge
init|=
name|corsHeaders
operator|!=
literal|null
condition|?
name|corsHeaders
operator|.
name|get
argument_list|(
literal|"Access-Control-Max-Age"
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|maxAge
operator|==
literal|null
condition|)
block|{
name|maxAge
operator|=
name|RestConfiguration
operator|.
name|CORS_ACCESS_CONTROL_MAX_AGE
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using CORS headers["
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"  Access-Control-Allow-Origin={}"
argument_list|,
name|allowOrigin
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"  Access-Control-Allow-Methods={}"
argument_list|,
name|allowMethods
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"  Access-Control-Allow-Headers={}"
argument_list|,
name|allowHeaders
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"  Access-Control-Max-Age={}"
argument_list|,
name|maxAge
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setHeader
argument_list|(
literal|"Access-Control-Allow-Origin"
argument_list|,
name|allowOrigin
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Access-Control-Allow-Methods"
argument_list|,
name|allowMethods
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Access-Control-Allow-Headers"
argument_list|,
name|allowHeaders
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Access-Control-Max-Age"
argument_list|,
name|maxAge
argument_list|)
expr_stmt|;
block|}
DECL|method|setupXForwardedHeaders (Swagger swagger, Map<String, Object> headers)
specifier|static
name|void
name|setupXForwardedHeaders
parameter_list|(
name|Swagger
name|swagger
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
block|{
name|String
name|host
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HEADER_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|host
argument_list|)
condition|)
block|{
name|swagger
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
name|String
name|forwardedPrefix
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HEADER_X_FORWARDED_PREFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|forwardedPrefix
argument_list|)
condition|)
block|{
name|swagger
operator|.
name|setBasePath
argument_list|(
name|URISupport
operator|.
name|joinPaths
argument_list|(
name|forwardedPrefix
argument_list|,
name|swagger
operator|.
name|getBasePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|forwardedHost
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HEADER_X_FORWARDED_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|forwardedHost
argument_list|)
condition|)
block|{
name|swagger
operator|.
name|setHost
argument_list|(
name|forwardedHost
argument_list|)
expr_stmt|;
block|}
name|String
name|proto
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|HEADER_X_FORWARDED_PROTO
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|proto
argument_list|)
condition|)
block|{
name|String
index|[]
name|schemes
init|=
name|proto
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|scheme
range|:
name|schemes
control|)
block|{
name|String
name|trimmedScheme
init|=
name|scheme
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|trimmedScheme
argument_list|)
condition|)
block|{
name|swagger
operator|.
name|addScheme
argument_list|(
name|Scheme
operator|.
name|forValue
argument_list|(
name|trimmedScheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

