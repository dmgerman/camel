begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Swagger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_class
DECL|class|SwaggerHelper
specifier|public
specifier|final
class|class
name|SwaggerHelper
block|{
DECL|method|SwaggerHelper ()
specifier|private
name|SwaggerHelper
parameter_list|()
block|{     }
DECL|method|buildUrl (String path1, String path2)
specifier|public
specifier|static
name|String
name|buildUrl
parameter_list|(
name|String
name|path1
parameter_list|,
name|String
name|path2
parameter_list|)
block|{
name|String
name|s1
init|=
name|FileUtil
operator|.
name|stripTrailingSeparator
argument_list|(
name|path1
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|path2
argument_list|)
decl_stmt|;
if|if
condition|(
name|s1
operator|!=
literal|null
operator|&&
name|s2
operator|!=
literal|null
condition|)
block|{
return|return
name|s1
operator|+
literal|"/"
operator|+
name|s2
return|;
block|}
elseif|else
if|if
condition|(
name|path1
operator|!=
literal|null
condition|)
block|{
return|return
name|path1
return|;
block|}
else|else
block|{
return|return
name|path2
return|;
block|}
block|}
comment|/**      * Clears all the vendor extension on the swagger model. This may be needed as some API tooling does not support this.      */
DECL|method|clearVendorExtensions (Swagger swagger)
specifier|public
specifier|static
name|void
name|clearVendorExtensions
parameter_list|(
name|Swagger
name|swagger
parameter_list|)
block|{
if|if
condition|(
name|swagger
operator|.
name|getVendorExtensions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|swagger
operator|.
name|getVendorExtensions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|swagger
operator|.
name|getDefinitions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Model
name|model
range|:
name|swagger
operator|.
name|getDefinitions
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|model
operator|.
name|getVendorExtensions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|getVendorExtensions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|swagger
operator|.
name|getPaths
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|swagger
operator|.
name|getPaths
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|path
operator|.
name|getVendorExtensions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|path
operator|.
name|getVendorExtensions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Operation
name|op
range|:
name|path
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|op
operator|.
name|getVendorExtensions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|getVendorExtensions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

