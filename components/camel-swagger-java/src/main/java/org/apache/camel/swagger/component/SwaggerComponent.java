begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.swagger.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|swagger
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_class
annotation|@
name|Deprecated
DECL|class|SwaggerComponent
specifier|public
class|class
name|SwaggerComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|componentName
specifier|private
name|String
name|componentName
init|=
literal|"http"
decl_stmt|;
DECL|field|apiDoc
specifier|private
name|String
name|apiDoc
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
comment|// TODO: we could move this to rest component in camel-core
comment|// and have its producer support using a swagger schema and use a factory to lookup
comment|// the code in this component that creates the producer
DECL|method|SwaggerComponent ()
specifier|public
name|SwaggerComponent
parameter_list|()
block|{
name|super
argument_list|(
name|SwaggerEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|SwaggerEndpoint
name|endpoint
init|=
operator|new
name|SwaggerEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setComponentName
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setApiDoc
argument_list|(
name|apiDoc
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|String
name|verb
decl_stmt|;
name|String
name|path
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|remaining
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|verb
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|path
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid syntax. Expected swagger:verb:path?options"
argument_list|)
throw|;
block|}
name|endpoint
operator|.
name|setVerb
argument_list|(
name|verb
argument_list|)
expr_stmt|;
comment|// path must start with leading slash
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
name|endpoint
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// the rest is URI parameters on path
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setQueryParameters
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getComponentName ()
specifier|public
name|String
name|getComponentName
parameter_list|()
block|{
return|return
name|componentName
return|;
block|}
comment|/**      * The camel component to use as HTTP client for calling the REST service.      * The default value is: http      */
DECL|method|setComponentName (String componentName)
specifier|public
name|void
name|setComponentName
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
name|this
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
block|}
DECL|method|getApiDoc ()
specifier|public
name|String
name|getApiDoc
parameter_list|()
block|{
return|return
name|apiDoc
return|;
block|}
comment|/**      * The swagger api doc resource to use.      * The resource is loaded from classpath by default and must be in JSon format.      */
DECL|method|setApiDoc (String apiDoc)
specifier|public
name|void
name|setApiDoc
parameter_list|(
name|String
name|apiDoc
parameter_list|)
block|{
name|this
operator|.
name|apiDoc
operator|=
name|apiDoc
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * Host and port of HTTP service to use (override host in swagger schema)      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
block|}
end_class

end_unit

