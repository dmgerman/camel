begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|converter
operator|.
name|ModelConverters
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|StringProperty
import|;
end_import

begin_comment
comment|/**  * A Camel extended {@link ModelConverters} where we appending vendor extensions  * to include the java class name of the model classes.  */
end_comment

begin_class
DECL|class|RestModelConverters
specifier|public
class|class
name|RestModelConverters
extends|extends
name|ModelConverters
block|{
DECL|method|readClass (Class clazz)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Model
argument_list|>
name|readClass
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|String
name|name
init|=
name|clazz
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Model
argument_list|>
name|resolved
init|=
name|super
operator|.
name|read
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolved
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Model
name|model
range|:
name|resolved
operator|.
name|values
argument_list|()
control|)
block|{
comment|// enrich with the class name of the model
name|model
operator|.
name|getVendorExtensions
argument_list|()
operator|.
name|put
argument_list|(
literal|"x-className"
argument_list|,
operator|new
name|StringProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// read any extra using read-all
name|Map
argument_list|<
name|String
argument_list|,
name|Model
argument_list|>
name|extra
init|=
name|super
operator|.
name|readAll
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Model
argument_list|>
name|entry
range|:
name|extra
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|resolved
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|resolved
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|resolved
return|;
block|}
block|}
end_class

end_unit

