begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hystrix.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hystrix
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CircuitBreakerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|HystrixCircuitOpenTest
specifier|public
class|class
name|HystrixCircuitOpenTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|REQUEST_VOLUME_THRESHOLD
specifier|public
specifier|static
specifier|final
name|Integer
name|REQUEST_VOLUME_THRESHOLD
init|=
literal|4
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HystrixCircuitOpenTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|route
specifier|private
name|HystrixExceptionRoute
name|route
init|=
operator|new
name|HystrixExceptionRoute
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testCircuitOpen ()
specifier|public
name|void
name|testCircuitOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testCircuitOpen start"
argument_list|)
expr_stmt|;
comment|// failing requests
name|route
operator|.
name|throwException
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
operator|*
name|REQUEST_VOLUME_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Request Body"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|resetMocks
argument_list|()
expr_stmt|;
comment|// notice this can be flaky due timing when using thread sleeps in unit tests
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedPropertyReceived
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SHORT_CIRCUITED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|route
operator|.
name|throwException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Request Body"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Instead circuit open expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Circuit open expected "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// wait for the circuit to try an other request
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
operator|*
name|REQUEST_VOLUME_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Request Body"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Circuit has closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|i
operator|*
literal|100
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Circuit will be closed soon "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|resetMocks
argument_list|()
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedPropertyReceived
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SHORT_CIRCUITED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedPropertyReceived
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SUCCESSFUL_EXECUTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Request Body"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|route
return|;
block|}
DECL|class|HystrixExceptionRoute
class|class
name|HystrixExceptionRoute
extends|extends
name|RouteBuilder
block|{
DECL|field|throwException
specifier|volatile
name|boolean
name|throwException
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|circuitBreaker
argument_list|()
operator|.
name|hystrixConfiguration
argument_list|()
operator|.
name|executionTimeoutInMilliseconds
argument_list|(
literal|100
argument_list|)
operator|.
name|circuitBreakerRequestVolumeThreshold
argument_list|(
name|REQUEST_VOLUME_THRESHOLD
argument_list|)
operator|.
name|metricsRollingStatisticalWindowInMilliseconds
argument_list|(
literal|1000
argument_list|)
operator|.
name|circuitBreakerSleepWindowInMilliseconds
argument_list|(
literal|2000
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|log
argument_list|(
literal|"Hystrix processing start: ${threadName}"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|throwException
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Will throw exception"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Route has failed"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Will NOT throw exception"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|log
argument_list|(
literal|"Hystrix processing end: ${threadName}"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|log
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SHORT_CIRCUITED
operator|+
literal|" = ${exchangeProperty."
operator|+
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SHORT_CIRCUITED
operator|+
literal|"}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

