begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hystrix.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hystrix
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|CircuitBreakerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|HystrixConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HystrixRouteConfigTest
specifier|public
class|class
name|HystrixRouteConfigTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testHystrix ()
specifier|public
name|void
name|testHystrix
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Bye World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupKeyAndThreadPoolKeyConfigFlagsDoNotScrapHystrixConfiguration ()
specifier|public
name|void
name|testGroupKeyAndThreadPoolKeyConfigFlagsDoNotScrapHystrixConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
comment|// dummy route
name|RouteBuilder
name|rb
init|=
operator|new
name|RouteBuilder
argument_list|(
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:foo"
argument_list|)
operator|.
name|circuitBreaker
argument_list|()
operator|.
name|hystrixConfiguration
argument_list|()
operator|.
name|groupKey
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|metricsHealthSnapshotIntervalInMilliseconds
argument_list|(
literal|99999
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"log:hello"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|rb
operator|.
name|configure
argument_list|()
expr_stmt|;
name|RouteDefinition
name|route
init|=
name|rb
operator|.
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CircuitBreakerDefinition
operator|.
name|class
argument_list|,
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|HystrixConfigurationDefinition
name|config
init|=
operator|(
operator|(
name|CircuitBreakerDefinition
operator|)
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getHystrixConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test2"
argument_list|,
name|config
operator|.
name|getGroupKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|99999
argument_list|)
argument_list|,
name|config
operator|.
name|getMetricsHealthSnapshotIntervalInMilliseconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|circuitBreaker
argument_list|()
operator|.
name|hystrixConfiguration
argument_list|()
operator|.
name|groupKey
argument_list|(
literal|"myCamelApp"
argument_list|)
operator|.
name|requestLogEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|corePoolSize
argument_list|(
literal|5
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:foo"
argument_list|)
operator|.
name|onFallback
argument_list|()
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
literal|"Fallback message"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:foo"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
literal|"Bye World"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

