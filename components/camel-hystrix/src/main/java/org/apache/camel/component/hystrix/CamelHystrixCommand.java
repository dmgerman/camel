begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hystrix
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hystrix
package|;
end_package

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|HystrixCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_class
DECL|class|CamelHystrixCommand
specifier|public
class|class
name|CamelHystrixCommand
extends|extends
name|HystrixCommand
argument_list|<
name|Exchange
argument_list|>
block|{
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|cacheKey
specifier|private
specifier|final
name|String
name|cacheKey
decl_stmt|;
DECL|field|runEndpointId
specifier|private
name|String
name|runEndpointId
decl_stmt|;
DECL|field|fallbackEndpointId
specifier|private
name|String
name|fallbackEndpointId
decl_stmt|;
DECL|method|CamelHystrixCommand (Setter setter, Exchange exchange, String cacheKey, String runEndpointId, String fallbackEndpointId)
specifier|protected
name|CamelHystrixCommand
parameter_list|(
name|Setter
name|setter
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|String
name|cacheKey
parameter_list|,
name|String
name|runEndpointId
parameter_list|,
name|String
name|fallbackEndpointId
parameter_list|)
block|{
name|super
argument_list|(
name|setter
argument_list|)
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|cacheKey
operator|=
name|cacheKey
expr_stmt|;
name|this
operator|.
name|runEndpointId
operator|=
name|runEndpointId
expr_stmt|;
name|this
operator|.
name|fallbackEndpointId
operator|=
name|fallbackEndpointId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCacheKey ()
specifier|protected
name|String
name|getCacheKey
parameter_list|()
block|{
return|return
name|cacheKey
return|;
block|}
annotation|@
name|Override
DECL|method|getFallback ()
specifier|protected
name|Exchange
name|getFallback
parameter_list|()
block|{
if|if
condition|(
name|fallbackEndpointId
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|getFallback
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Endpoint
name|endpoint
init|=
name|findEndpoint
argument_list|(
name|fallbackEndpointId
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|createProducer
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|exchange
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|Exchange
name|run
parameter_list|()
block|{
try|try
block|{
name|Endpoint
name|endpoint
init|=
name|findEndpoint
argument_list|(
name|runEndpointId
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|createProducer
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|exchange
return|;
block|}
DECL|method|findEndpoint (String endpointId)
specifier|private
name|Endpoint
name|findEndpoint
parameter_list|(
name|String
name|endpointId
parameter_list|)
block|{
return|return
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|endpointId
argument_list|,
name|Endpoint
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

