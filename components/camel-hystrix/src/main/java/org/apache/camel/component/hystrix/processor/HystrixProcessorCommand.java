begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hystrix.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hystrix
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|HystrixCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|exception
operator|.
name|HystrixBadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Hystrix Command for the Camel Hystrix EIP.  */
end_comment

begin_class
DECL|class|HystrixProcessorCommand
specifier|public
class|class
name|HystrixProcessorCommand
extends|extends
name|HystrixCommand
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HystrixProcessorCommand
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
DECL|field|fallback
specifier|private
specifier|final
name|Processor
name|fallback
decl_stmt|;
DECL|field|fallbackCommand
specifier|private
specifier|final
name|HystrixProcessorCommandFallbackViaNetwork
name|fallbackCommand
decl_stmt|;
DECL|field|fallbackInUse
specifier|private
specifier|final
name|AtomicBoolean
name|fallbackInUse
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|HystrixProcessorCommand (Setter setter, Exchange exchange, Processor processor, Processor fallback, HystrixProcessorCommandFallbackViaNetwork fallbackCommand)
specifier|public
name|HystrixProcessorCommand
parameter_list|(
name|Setter
name|setter
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Processor
name|fallback
parameter_list|,
name|HystrixProcessorCommandFallbackViaNetwork
name|fallbackCommand
parameter_list|)
block|{
name|super
argument_list|(
name|setter
argument_list|)
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|fallback
operator|=
name|fallback
expr_stmt|;
name|this
operator|.
name|fallbackCommand
operator|=
name|fallbackCommand
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFallback ()
specifier|protected
name|Message
name|getFallback
parameter_list|()
block|{
comment|// guard by lock as the run command can be running concurrently in case hystrix caused a timeout which
comment|// can cause the fallback timer to trigger this fallback at the same time the run command may be running
comment|// after its processor.process method which could cause both threads to mutate the state on the exchange
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|fallbackInUse
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fallback
operator|==
literal|null
operator|&&
name|fallbackCommand
operator|==
literal|null
condition|)
block|{
comment|// no fallback in use
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No fallback available."
argument_list|)
throw|;
block|}
comment|// grab the exception that caused the error (can be failure in run, or from hystrix if short circuited)
name|Throwable
name|exception
init|=
name|getExecutionException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error occurred processing. Will now run fallback. Exception class: {} message: {}."
argument_list|,
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error occurred processing. Will now run fallback."
argument_list|)
expr_stmt|;
block|}
comment|// store the last to endpoint as the failure endpoint
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_ENDPOINT
argument_list|)
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_ENDPOINT
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|TO_ENDPOINT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// give the rest of the pipeline another chance
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_HANDLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|ROUTE_STOP
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// and we should not be regarded as exhausted as we are in a try .. catch block
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_EXHAUSTED
argument_list|)
expr_stmt|;
comment|// run the fallback processor
try|try
block|{
comment|// use fallback command if provided (fallback via network)
if|if
condition|(
name|fallbackCommand
operator|!=
literal|null
condition|)
block|{
return|return
name|fallbackCommand
operator|.
name|execute
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running fallback: {} with exchange: {}"
argument_list|,
name|fallback
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// process the fallback until its fully done
comment|// (we do not hav any hystrix callback to leverage so we need to complete all work in this run method)
name|fallback
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running fallback: {} with exchange: {} done"
argument_list|,
name|fallback
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|Message
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running processor: {} with exchange: {}"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// prepare a copy of exchange so downstream processors don't cause side-effects if they mutate the exchange
comment|// in case Hystrix timeout processing and continue with the fallback etc
name|Exchange
name|copy
init|=
name|ExchangeHelper
operator|.
name|createCorrelatedCopy
argument_list|(
name|exchange
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
comment|// process the processor until its fully done
comment|// (we do not hav any hystrix callback to leverage so we need to complete all work in this run method)
name|processor
operator|.
name|process
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|copy
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// if hystrix execution timeout is enabled and fallback is enabled and a timeout occurs
comment|// then a hystrix timer thread executes the fallback so we can stop run() execution
if|if
condition|(
name|getProperties
argument_list|()
operator|.
name|executionTimeoutEnabled
argument_list|()
operator|.
name|get
argument_list|()
operator|&&
name|getProperties
argument_list|()
operator|.
name|fallbackEnabled
argument_list|()
operator|.
name|get
argument_list|()
operator|&&
name|isCommandTimedOut
operator|.
name|get
argument_list|()
operator|==
name|TimedOutStatus
operator|.
name|TIMED_OUT
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exiting run command due to a hystrix execution timeout in processing exchange: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// when a hystrix timeout occurs then a hystrix timer thread executes the fallback
comment|// and therefore we need this thread to not do anymore if fallback is already in process
if|if
condition|(
name|fallbackInUse
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exiting run command as fallback is already in use processing exchange: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// remember any hystrix execution exception which for example can be triggered by a hystrix timeout
name|Throwable
name|hystrixExecutionException
init|=
name|getExecutionException
argument_list|()
decl_stmt|;
name|Exception
name|camelExchangeException
init|=
name|copy
operator|.
name|getException
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|// when a hystrix timeout occurs then a hystrix timer thread executes the fallback
comment|// and therefore we need this thread to not do anymore if fallback is already in process
if|if
condition|(
name|fallbackInUse
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exiting run command as fallback is already in use processing exchange: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// execution exception must take precedence over exchange exception
comment|// because hystrix may have caused this command to fail due timeout or something else
if|if
condition|(
name|hystrixExecutionException
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|CamelExchangeException
argument_list|(
literal|"Hystrix execution exception occurred while processing Exchange"
argument_list|,
name|exchange
argument_list|,
name|hystrixExecutionException
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// special for HystrixBadRequestException which should not trigger fallback
if|if
condition|(
name|camelExchangeException
operator|instanceof
name|HystrixBadRequestException
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running processor: {} with exchange: {} done as bad request"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
return|;
block|}
comment|// copy the result before its regarded as success
name|ExchangeHelper
operator|.
name|copyResults
argument_list|(
name|exchange
argument_list|,
name|copy
argument_list|)
expr_stmt|;
comment|// in case of an exception in the exchange
comment|// we need to trigger this by throwing the exception so hystrix will execute the fallback
comment|// or open the circuit
if|if
condition|(
name|hystrixExecutionException
operator|==
literal|null
operator|&&
name|camelExchangeException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|camelExchangeException
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running processor: {} with exchange: {} done"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

