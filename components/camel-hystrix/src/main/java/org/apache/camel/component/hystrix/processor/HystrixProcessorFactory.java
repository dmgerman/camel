begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hystrix.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hystrix
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|HystrixCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|HystrixCommandGroupKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|HystrixCommandProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|HystrixThreadPoolKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|HystrixThreadPoolProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|HystrixConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|HystrixDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_comment
comment|/**  * To integrate camel-hystrix with the Camel routes using the Hystrix EIP.  */
end_comment

begin_class
DECL|class|HystrixProcessorFactory
specifier|public
class|class
name|HystrixProcessorFactory
implements|implements
name|ProcessorFactory
block|{
annotation|@
name|Override
DECL|method|createChildProcessor (RouteContext routeContext, ProcessorDefinition<?> definition, boolean mandatory)
specifier|public
name|Processor
name|createChildProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
throws|throws
name|Exception
block|{
comment|// not in use
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext, ProcessorDefinition<?> definition)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|definition
operator|instanceof
name|HystrixDefinition
condition|)
block|{
name|HystrixDefinition
name|cb
init|=
operator|(
name|HystrixDefinition
operator|)
name|definition
decl_stmt|;
comment|// create the regular and fallback processors
name|Processor
name|processor
init|=
name|cb
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Processor
name|fallback
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cb
operator|.
name|getFallback
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fallback
operator|=
name|cb
operator|.
name|getFallback
argument_list|()
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
name|HystrixConfigurationDefinition
name|config
init|=
name|cb
operator|.
name|getHystrixConfiguration
argument_list|()
decl_stmt|;
name|HystrixConfigurationDefinition
name|configRef
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cb
operator|.
name|getHystrixConfigurationRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|configRef
operator|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|cb
operator|.
name|getHystrixConfigurationRef
argument_list|()
argument_list|,
name|HystrixConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// group and thread pool keys to use they can be configured on configRef and config, so look there first, and if none then use default
name|String
name|groupKey
init|=
literal|null
decl_stmt|;
name|String
name|threadPoolKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configRef
operator|!=
literal|null
condition|)
block|{
name|groupKey
operator|=
name|configRef
operator|.
name|getGroupKey
argument_list|()
expr_stmt|;
name|threadPoolKey
operator|=
name|configRef
operator|.
name|getThreadPoolKey
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getGroupKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|groupKey
operator|=
name|config
operator|.
name|getGroupKey
argument_list|()
expr_stmt|;
name|threadPoolKey
operator|=
name|config
operator|.
name|getThreadPoolKey
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|groupKey
operator|==
literal|null
condition|)
block|{
name|groupKey
operator|=
name|HystrixConfigurationDefinition
operator|.
name|DEFAULT_GROUP_KEY
expr_stmt|;
block|}
if|if
condition|(
name|threadPoolKey
operator|==
literal|null
condition|)
block|{
comment|// thread pool key should use same as group key as default
name|threadPoolKey
operator|=
name|groupKey
expr_stmt|;
block|}
comment|// create setter using the default options
name|HystrixCommand
operator|.
name|Setter
name|setter
init|=
name|HystrixCommand
operator|.
name|Setter
operator|.
name|withGroupKey
argument_list|(
name|HystrixCommandGroupKey
operator|.
name|Factory
operator|.
name|asKey
argument_list|(
name|groupKey
argument_list|)
argument_list|)
operator|.
name|andThreadPoolKey
argument_list|(
name|HystrixThreadPoolKey
operator|.
name|Factory
operator|.
name|asKey
argument_list|(
name|threadPoolKey
argument_list|)
argument_list|)
decl_stmt|;
name|HystrixCommandProperties
operator|.
name|Setter
name|command
init|=
name|HystrixCommandProperties
operator|.
name|Setter
argument_list|()
decl_stmt|;
name|setter
operator|.
name|andCommandPropertiesDefaults
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|HystrixThreadPoolProperties
operator|.
name|Setter
name|threadPool
init|=
name|HystrixThreadPoolProperties
operator|.
name|Setter
argument_list|()
decl_stmt|;
name|setter
operator|.
name|andThreadPoolPropertiesDefaults
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
comment|// at first configure any shared options
if|if
condition|(
name|configRef
operator|!=
literal|null
condition|)
block|{
name|configureHystrix
argument_list|(
name|command
argument_list|,
name|threadPool
argument_list|,
name|configRef
argument_list|)
expr_stmt|;
block|}
comment|// then any local configured can override
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|configureHystrix
argument_list|(
name|command
argument_list|,
name|threadPool
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|// optional cache-key from expression
name|Expression
name|cacheKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cb
operator|.
name|getCacheKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cacheKey
operator|=
name|cb
operator|.
name|getCacheKey
argument_list|()
operator|.
name|createExpression
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|HystrixProcessor
argument_list|(
name|setter
argument_list|,
name|processor
argument_list|,
name|fallback
argument_list|,
name|cacheKey
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|configureHystrix (HystrixCommandProperties.Setter command, HystrixThreadPoolProperties.Setter threadPool, HystrixConfigurationDefinition config)
specifier|private
name|void
name|configureHystrix
parameter_list|(
name|HystrixCommandProperties
operator|.
name|Setter
name|command
parameter_list|,
name|HystrixThreadPoolProperties
operator|.
name|Setter
name|threadPool
parameter_list|,
name|HystrixConfigurationDefinition
name|config
parameter_list|)
block|{
comment|// command
if|if
condition|(
name|config
operator|.
name|getCircuitBreakerEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withCircuitBreakerEnabled
argument_list|(
name|config
operator|.
name|getCircuitBreakerEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getCircuitBreakerErrorThresholdPercentage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withCircuitBreakerErrorThresholdPercentage
argument_list|(
name|config
operator|.
name|getCircuitBreakerErrorThresholdPercentage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getCircuitBreakerForceClosed
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withCircuitBreakerForceClosed
argument_list|(
name|config
operator|.
name|getCircuitBreakerForceClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getCircuitBreakerForceOpen
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withCircuitBreakerForceOpen
argument_list|(
name|config
operator|.
name|getCircuitBreakerForceOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getCircuitBreakerRequestVolumeThreshold
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withCircuitBreakerRequestVolumeThreshold
argument_list|(
name|config
operator|.
name|getCircuitBreakerRequestVolumeThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getCircuitBreakerSleepWindowInMilliseconds
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withCircuitBreakerSleepWindowInMilliseconds
argument_list|(
name|config
operator|.
name|getCircuitBreakerSleepWindowInMilliseconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getExecutionIsolationSemaphoreMaxConcurrentRequests
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withExecutionIsolationSemaphoreMaxConcurrentRequests
argument_list|(
name|config
operator|.
name|getExecutionIsolationSemaphoreMaxConcurrentRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getExecutionIsolationStrategy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withExecutionIsolationStrategy
argument_list|(
name|HystrixCommandProperties
operator|.
name|ExecutionIsolationStrategy
operator|.
name|valueOf
argument_list|(
name|config
operator|.
name|getExecutionIsolationStrategy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getExecutionIsolationThreadInterruptOnTimeout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withExecutionIsolationThreadInterruptOnTimeout
argument_list|(
name|config
operator|.
name|getExecutionIsolationThreadInterruptOnTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getExecutionTimeoutInMilliseconds
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withExecutionTimeoutInMilliseconds
argument_list|(
name|config
operator|.
name|getExecutionTimeoutInMilliseconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getExecutionTimeoutEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withExecutionTimeoutEnabled
argument_list|(
name|config
operator|.
name|getExecutionTimeoutEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getFallbackIsolationSemaphoreMaxConcurrentRequests
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withFallbackIsolationSemaphoreMaxConcurrentRequests
argument_list|(
name|config
operator|.
name|getFallbackIsolationSemaphoreMaxConcurrentRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getFallbackEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withFallbackEnabled
argument_list|(
name|config
operator|.
name|getFallbackEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMetricsHealthSnapshotIntervalInMilliseconds
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withMetricsHealthSnapshotIntervalInMilliseconds
argument_list|(
name|config
operator|.
name|getMetricsHealthSnapshotIntervalInMilliseconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMetricsRollingPercentileBucketSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withMetricsRollingPercentileBucketSize
argument_list|(
name|config
operator|.
name|getMetricsRollingPercentileBucketSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMetricsRollingPercentileEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withMetricsRollingPercentileEnabled
argument_list|(
name|config
operator|.
name|getMetricsRollingPercentileEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMetricsRollingPercentileWindowInMilliseconds
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withMetricsRollingPercentileWindowInMilliseconds
argument_list|(
name|config
operator|.
name|getMetricsRollingPercentileWindowInMilliseconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMetricsRollingPercentileWindowBuckets
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withMetricsRollingPercentileWindowBuckets
argument_list|(
name|config
operator|.
name|getMetricsRollingPercentileWindowBuckets
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMetricsRollingStatisticalWindowInMilliseconds
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withMetricsRollingStatisticalWindowInMilliseconds
argument_list|(
name|config
operator|.
name|getMetricsRollingStatisticalWindowInMilliseconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMetricsRollingStatisticalWindowBuckets
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withMetricsRollingStatisticalWindowBuckets
argument_list|(
name|config
operator|.
name|getMetricsRollingStatisticalWindowBuckets
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getRequestCacheEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withRequestCacheEnabled
argument_list|(
name|config
operator|.
name|getRequestCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getRequestLogEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|withRequestLogEnabled
argument_list|(
name|config
operator|.
name|getRequestLogEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getCorePoolSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|withCoreSize
argument_list|(
name|config
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getKeepAliveTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|withKeepAliveTimeMinutes
argument_list|(
name|config
operator|.
name|getKeepAliveTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMaxQueueSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|withMaxQueueSize
argument_list|(
name|config
operator|.
name|getMaxQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getQueueSizeRejectionThreshold
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|withQueueSizeRejectionThreshold
argument_list|(
name|config
operator|.
name|getQueueSizeRejectionThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getThreadPoolRollingNumberStatisticalWindowInMilliseconds
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|withMetricsRollingStatisticalWindowInMilliseconds
argument_list|(
name|config
operator|.
name|getThreadPoolRollingNumberStatisticalWindowInMilliseconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getThreadPoolRollingNumberStatisticalWindowBuckets
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|withMetricsRollingStatisticalWindowBuckets
argument_list|(
name|config
operator|.
name|getThreadPoolRollingNumberStatisticalWindowBuckets
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

