begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hystrix.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hystrix
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|contrib
operator|.
name|metrics
operator|.
name|eventstream
operator|.
name|HystrixMetricsPoller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StaticService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hystrix
operator|.
name|metrics
operator|.
name|servlet
operator|.
name|HystrixEventStreamServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_comment
comment|/**  * To gather hystrix metrics and offer the metrics over JMX and Java APIs.  *<p/>  * If you want to expose the metrics over HTTP then you can use the {@link HystrixEventStreamServlet} servlet which  * provides such functionality.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed Hystrix EventStreamService"
argument_list|)
DECL|class|HystrixEventStreamService
specifier|public
class|class
name|HystrixEventStreamService
extends|extends
name|ServiceSupport
implements|implements
name|StaticService
implements|,
name|HystrixMetricsPoller
operator|.
name|MetricsAsJsonPollerListener
block|{
DECL|field|METRICS_QUEUE_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|METRICS_QUEUE_SIZE
init|=
literal|1000
decl_stmt|;
DECL|field|delay
specifier|private
name|int
name|delay
init|=
literal|500
decl_stmt|;
DECL|field|queueSize
specifier|private
name|int
name|queueSize
init|=
name|METRICS_QUEUE_SIZE
decl_stmt|;
DECL|field|poller
specifier|private
name|HystrixMetricsPoller
name|poller
decl_stmt|;
comment|// use a queue with a upper limit to avoid storing too many metrics
DECL|field|queue
specifier|private
name|Queue
argument_list|<
name|String
argument_list|>
name|queue
decl_stmt|;
DECL|method|getDelay ()
specifier|public
name|int
name|getDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
comment|/**      * Sets the delay in millis how often the poller runs      */
DECL|method|setDelay (int delay)
specifier|public
name|void
name|setDelay
parameter_list|(
name|int
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
DECL|method|getQueueSize ()
specifier|public
name|int
name|getQueueSize
parameter_list|()
block|{
return|return
name|queueSize
return|;
block|}
comment|/**      * Sets the queue size for how many metrics collected are stored in-memory in a backlog      */
DECL|method|setQueueSize (int queueSize)
specifier|public
name|void
name|setQueueSize
parameter_list|(
name|int
name|queueSize
parameter_list|)
block|{
name|this
operator|.
name|queueSize
operator|=
name|queueSize
expr_stmt|;
block|}
comment|/**      * Return a stream of the JSon metrics.      */
DECL|method|streamMetrics ()
specifier|public
name|Stream
argument_list|<
name|String
argument_list|>
name|streamMetrics
parameter_list|()
block|{
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|stream
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Returns the oldest metrics as JSon format"
argument_list|)
DECL|method|oldestMetricsAsJSon ()
specifier|public
name|String
name|oldestMetricsAsJSon
parameter_list|()
block|{
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|peek
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Starts the metrics poller"
argument_list|)
DECL|method|startPoller ()
specifier|public
name|void
name|startPoller
parameter_list|()
block|{
name|poller
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Pauses the metrics poller"
argument_list|)
DECL|method|pausePoller ()
specifier|public
name|void
name|pausePoller
parameter_list|()
block|{
name|poller
operator|.
name|pause
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Is the metrics poller running"
argument_list|)
DECL|method|isPollerRunning ()
specifier|public
name|boolean
name|isPollerRunning
parameter_list|()
block|{
return|return
name|poller
operator|.
name|isRunning
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The delay in millis the poller is running"
argument_list|)
DECL|method|getPollerDelay ()
specifier|public
name|int
name|getPollerDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting HystrixMetricsPoller with delay: {} and queue size: {}"
argument_list|,
name|delay
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|queueSize
argument_list|)
expr_stmt|;
name|poller
operator|=
operator|new
name|HystrixMetricsPoller
argument_list|(
name|this
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|poller
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|poller
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shutting down HystrixMetricsPoller"
argument_list|)
expr_stmt|;
name|poller
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handleJsonMetric (String json)
specifier|public
name|void
name|handleJsonMetric
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"handleJsonMetric: {}"
argument_list|,
name|json
argument_list|)
expr_stmt|;
comment|// ensure there is space on the queue by polling until at least single slot is free
name|int
name|drain
init|=
name|queue
operator|.
name|size
argument_list|()
operator|-
name|queueSize
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|drain
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Draining queue to make room: {}"
argument_list|,
name|drain
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|drain
condition|;
name|i
operator|++
control|)
block|{
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
name|queue
operator|.
name|add
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

