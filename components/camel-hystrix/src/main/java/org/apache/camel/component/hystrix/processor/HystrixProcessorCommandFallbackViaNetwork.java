begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hystrix.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hystrix
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|hystrix
operator|.
name|HystrixCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Hystrix Command the Camel Hystrix EIP when executing fallback.  * The fallback may require networking and therefore should run in another Hystrix Command  */
end_comment

begin_class
DECL|class|HystrixProcessorCommandFallbackViaNetwork
specifier|public
class|class
name|HystrixProcessorCommandFallbackViaNetwork
extends|extends
name|HystrixCommand
argument_list|<
name|Message
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HystrixProcessorCommandFallbackViaNetwork
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
DECL|method|HystrixProcessorCommandFallbackViaNetwork (Setter setter, Exchange exchange, Processor processor)
specifier|public
name|HystrixProcessorCommandFallbackViaNetwork
parameter_list|(
name|Setter
name|setter
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|setter
argument_list|)
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFallback ()
specifier|protected
name|Message
name|getFallback
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|Message
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running fallback processor: {} with exchange: {}"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
comment|// process the processor until its fully done
comment|// (we do not hav any hystrix callback to leverage so we need to complete all work in this run method)
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// if we failed then throw an exception to signal that the fallback failed as well
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exchange
operator|.
name|getException
argument_list|()
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running fallback processor: {} with exchange: {} done"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// no fallback then we are done
return|return
name|exchange
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
end_class

end_unit

