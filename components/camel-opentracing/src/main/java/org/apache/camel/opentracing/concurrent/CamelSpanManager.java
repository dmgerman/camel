begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.opentracing.concurrent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|opentracing
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|NoopSpan
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|contrib
operator|.
name|spanmanager
operator|.
name|SpanManager
import|;
end_import

begin_comment
comment|/**  * Camel {@link SpanManager} implementation using {@link ThreadLocal} storage  * maintaining a stack-like structure of linked managed spans.  *<p>  * The linked managed spans provide the following stack unwinding algorithm:  *<ol>  *<li>If the deactivated span is not the<em>managed</em> span, the<em>current managed</em> span is left alone.</li>  *<li>Otherwise, the first parent that is<em>not yet deactivated</em> is set as the new managed span.</li>  *<li>If no managed parents remain, the<em>managed span</em> is cleared.</li>  *<li>Consecutive<code>deactivate()</code> calls for already-deactivated spans will be ignored.</li>  *</ol>  *<p>  * NOTE: This implementation has been copied and extended from opentracing-contrib/java-spanmanager  * project, to provide the additional functionality for transferring the managed spans from one thread  * to another. This functionality will soon be provided by the core opentracing-java project, at which  * time this implementation will be removed.  */
end_comment

begin_class
DECL|class|CamelSpanManager
specifier|public
specifier|final
class|class
name|CamelSpanManager
implements|implements
name|SpanManager
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CamelSpanManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|CamelSpanManager
name|INSTANCE
init|=
operator|new
name|CamelSpanManager
argument_list|()
decl_stmt|;
DECL|field|NO_MANAGED_SPAN
specifier|private
specifier|static
specifier|final
name|ManagedSpan
name|NO_MANAGED_SPAN
init|=
operator|new
name|NoManagedSpan
argument_list|()
decl_stmt|;
DECL|field|managed
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|LinkedManagedSpan
argument_list|>
name|managed
init|=
operator|new
name|ThreadLocal
argument_list|<
name|LinkedManagedSpan
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|CamelSpanManager ()
specifier|private
name|CamelSpanManager
parameter_list|()
block|{     }
comment|/**      * @return The singleton instance of the camel span manager.      */
DECL|method|getInstance ()
specifier|public
specifier|static
name|CamelSpanManager
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
comment|/**      * Stack unwinding algorithm that refreshes the currently managed span.      *<p>      * See {@link CamelSpanManager class javadoc} for a full description.      *      * @return The current non-deactivated LinkedManagedSpan or<code>null</code> if none remained.      */
DECL|method|refreshCurrent ()
specifier|private
name|LinkedManagedSpan
name|refreshCurrent
parameter_list|()
block|{
name|LinkedManagedSpan
name|managedSpan
init|=
name|managed
operator|.
name|get
argument_list|()
decl_stmt|;
name|LinkedManagedSpan
name|current
init|=
name|managedSpan
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
operator|&&
name|current
operator|.
name|deactivated
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Unwind stack if necessary.
name|current
operator|=
name|current
operator|.
name|parent
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|!=
name|managedSpan
condition|)
block|{
comment|// refresh current if necessary.
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|managed
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|managed
operator|.
name|set
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|current
return|;
block|}
annotation|@
name|Override
DECL|method|activate (Span span)
specifier|public
name|ManagedSpan
name|activate
parameter_list|(
name|Span
name|span
parameter_list|)
block|{
name|LinkedManagedSpan
name|managedSpan
init|=
operator|new
name|LinkedManagedSpan
argument_list|(
name|span
argument_list|,
name|refreshCurrent
argument_list|()
argument_list|)
decl_stmt|;
name|managed
operator|.
name|set
argument_list|(
name|managedSpan
argument_list|)
expr_stmt|;
return|return
name|managedSpan
return|;
block|}
comment|/**      * This method associates the supplied managed span with the current      * execution context (thread).      *      * @param managedSpan The managed span      */
DECL|method|activate (ManagedSpan managedSpan)
specifier|public
name|void
name|activate
parameter_list|(
name|ManagedSpan
name|managedSpan
parameter_list|)
block|{
if|if
condition|(
name|managedSpan
operator|instanceof
name|LinkedManagedSpan
condition|)
block|{
name|managed
operator|.
name|set
argument_list|(
operator|(
name|LinkedManagedSpan
operator|)
name|managedSpan
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|current ()
specifier|public
name|ManagedSpan
name|current
parameter_list|()
block|{
name|LinkedManagedSpan
name|current
init|=
name|refreshCurrent
argument_list|()
decl_stmt|;
return|return
name|current
operator|!=
literal|null
condition|?
name|current
else|:
name|NO_MANAGED_SPAN
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|managed
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|currentSpan ()
specifier|public
name|Span
name|currentSpan
parameter_list|()
block|{
name|ManagedSpan
name|current
init|=
name|current
argument_list|()
decl_stmt|;
return|return
name|current
operator|.
name|getSpan
argument_list|()
operator|!=
literal|null
condition|?
name|current
operator|.
name|getSpan
argument_list|()
else|:
name|NoopSpan
operator|.
name|INSTANCE
return|;
block|}
comment|/**      * @see #activate(Span)      * @deprecated renamed to activate()      */
annotation|@
name|Deprecated
DECL|method|manage (Span span)
specifier|public
name|ManagedSpan
name|manage
parameter_list|(
name|Span
name|span
parameter_list|)
block|{
return|return
name|activate
argument_list|(
name|span
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
DECL|class|LinkedManagedSpan
specifier|private
specifier|final
class|class
name|LinkedManagedSpan
implements|implements
name|ManagedSpan
block|{
DECL|field|parent
specifier|private
specifier|final
name|LinkedManagedSpan
name|parent
decl_stmt|;
DECL|field|span
specifier|private
specifier|final
name|Span
name|span
decl_stmt|;
DECL|field|deactivated
specifier|private
specifier|final
name|AtomicBoolean
name|deactivated
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|LinkedManagedSpan (Span span, LinkedManagedSpan parent)
specifier|private
name|LinkedManagedSpan
parameter_list|(
name|Span
name|span
parameter_list|,
name|LinkedManagedSpan
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|span
operator|=
name|span
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSpan ()
specifier|public
name|Span
name|getSpan
parameter_list|()
block|{
return|return
name|span
return|;
block|}
DECL|method|deactivate ()
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|deactivated
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LinkedManagedSpan
name|current
init|=
name|refreshCurrent
argument_list|()
decl_stmt|;
comment|// Trigger stack-unwinding algorithm.
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
literal|"Released {0}, current span is {1}."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|this
block|,
name|current
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
literal|"No action needed, {0} was already deactivated."
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|deactivate
argument_list|()
expr_stmt|;
block|}
comment|/**          * @see #deactivate()          * @deprecated renamed to deactivate()          */
annotation|@
name|Deprecated
DECL|method|release ()
specifier|public
name|void
name|release
parameter_list|()
block|{
name|deactivate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|'{'
operator|+
name|span
operator|+
literal|'}'
return|;
block|}
block|}
comment|/**      * Empty implementation signifying there is no managed span.      */
DECL|class|NoManagedSpan
specifier|private
specifier|static
specifier|final
class|class
name|NoManagedSpan
implements|implements
name|ManagedSpan
block|{
DECL|method|NoManagedSpan ()
specifier|private
name|NoManagedSpan
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|getSpan ()
specifier|public
name|Span
name|getSpan
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|deactivate ()
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

