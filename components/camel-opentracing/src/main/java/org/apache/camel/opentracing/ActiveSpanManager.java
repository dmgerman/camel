begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.opentracing
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|opentracing
package|;
end_package

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_comment
comment|/**  * Utility class for managing active spans as a stack associated with  * an exchange.  *  */
end_comment

begin_class
DECL|class|ActiveSpanManager
specifier|public
specifier|final
class|class
name|ActiveSpanManager
block|{
DECL|field|ACTIVE_SPAN_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|ACTIVE_SPAN_PROPERTY
init|=
literal|"OpenTracing.activeSpan"
decl_stmt|;
DECL|method|ActiveSpanManager ()
specifier|private
name|ActiveSpanManager
parameter_list|()
block|{     }
comment|/**      * This method returns the current active span associated with the      * exchange.      *      * @param exchange The exchange      * @return The current active span, or null if none exists      */
DECL|method|getSpan (Exchange exchange)
specifier|public
specifier|static
name|Span
name|getSpan
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Holder
name|holder
init|=
operator|(
name|Holder
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|ACTIVE_SPAN_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|!=
literal|null
condition|)
block|{
return|return
name|holder
operator|.
name|getSpan
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This method activates the supplied span for the supplied exchange.      * If an existing span is found for the exchange, this will be pushed      * onto a stack.      *      * @param exchange The exchange      * @param span The span      */
DECL|method|activate (Exchange exchange, Span span)
specifier|public
specifier|static
name|void
name|activate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Span
name|span
parameter_list|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|ACTIVE_SPAN_PROPERTY
argument_list|,
operator|new
name|Holder
argument_list|(
operator|(
name|Holder
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|ACTIVE_SPAN_PROPERTY
argument_list|)
argument_list|,
name|span
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method deactivates an existing active span associated with the      * supplied exchange. Once deactivated, if a parent span is found      * associated with the stack for the exchange, it will be restored      * as the current span for that exchange.      *      * @param exchange The exchange      */
DECL|method|deactivate (Exchange exchange)
specifier|public
specifier|static
name|void
name|deactivate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Holder
name|holder
init|=
operator|(
name|Holder
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|ACTIVE_SPAN_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|ACTIVE_SPAN_PROPERTY
argument_list|,
name|holder
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Simple holder for the currently active span and an optional reference to      * the parent holder. This will be used to maintain a stack for spans, built      * up during the execution of a series of chained camel exchanges, and then      * unwound when the responses are processed.      *      */
DECL|class|Holder
specifier|public
specifier|static
class|class
name|Holder
block|{
DECL|field|parent
specifier|private
name|Holder
name|parent
decl_stmt|;
DECL|field|span
specifier|private
name|Span
name|span
decl_stmt|;
DECL|method|Holder (Holder parent, Span span)
specifier|public
name|Holder
parameter_list|(
name|Holder
name|parent
parameter_list|,
name|Span
name|span
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|span
operator|=
name|span
expr_stmt|;
block|}
DECL|method|getParent ()
specifier|public
name|Holder
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|getSpan ()
specifier|public
name|Span
name|getSpan
parameter_list|()
block|{
return|return
name|span
return|;
block|}
block|}
block|}
end_class

end_unit

