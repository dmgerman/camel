begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.opentracing.decorators
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|opentracing
operator|.
name|decorators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|RestSpanDecorator
specifier|public
class|class
name|RestSpanDecorator
extends|extends
name|AbstractHttpSpanDecorator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RestSpanDecorator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|String
name|getComponent
parameter_list|()
block|{
return|return
literal|"rest"
return|;
block|}
annotation|@
name|Override
DECL|method|getOperationName (Exchange exchange, Endpoint endpoint)
specifier|public
name|String
name|getOperationName
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|getPath
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|pre (Span span, Exchange exchange, Endpoint endpoint)
specifier|public
name|void
name|pre
parameter_list|(
name|Span
name|span
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
operator|.
name|pre
argument_list|(
name|span
argument_list|,
name|exchange
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|getParameters
argument_list|(
name|getPath
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|param
lambda|->
block|{
name|Object
name|value
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|span
operator|.
name|setTag
argument_list|(
name|param
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|span
operator|.
name|setTag
argument_list|(
name|param
argument_list|,
operator|(
name|Number
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|span
operator|.
name|setTag
argument_list|(
name|param
argument_list|,
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getPath (String uri)
specifier|protected
specifier|static
name|String
name|getPath
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// Obtain the 'path' part of the URI format: rest://method:path[:uriTemplate]?[options]
name|String
name|path
init|=
literal|null
decl_stmt|;
name|int
name|index
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|index
operator|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|,
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|path
operator|=
name|uri
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|replaceAll
argument_list|(
literal|":"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
try|try
block|{
name|path
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|path
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to decode URL path '"
operator|+
name|path
operator|+
literal|"', ignoring exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|path
return|;
block|}
DECL|method|getParameters (String path)
specifier|protected
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getParameters
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
literal|null
decl_stmt|;
name|int
name|startIndex
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|)
decl_stmt|;
while|while
condition|(
name|startIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|endIndex
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|,
name|startIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|endIndex
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|parameters
operator|==
literal|null
condition|)
block|{
name|parameters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|parameters
operator|.
name|add
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|startIndex
operator|+
literal|1
argument_list|,
name|endIndex
argument_list|)
argument_list|)
expr_stmt|;
name|startIndex
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|,
name|endIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Break out of loop as no valid end token
name|startIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|return
name|parameters
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|parameters
return|;
block|}
block|}
end_class

end_unit

