begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.opentracing.decorators
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|opentracing
operator|.
name|decorators
package|;
end_package

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|tag
operator|.
name|Tags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_class
DECL|class|AbstractMessagingSpanDecorator
specifier|public
specifier|abstract
class|class
name|AbstractMessagingSpanDecorator
extends|extends
name|AbstractSpanDecorator
block|{
DECL|field|MESSAGE_BUS_ID
specifier|public
specifier|static
specifier|final
name|String
name|MESSAGE_BUS_ID
init|=
literal|"message_bus.id"
decl_stmt|;
annotation|@
name|Override
DECL|method|getOperationName (Exchange exchange, Endpoint endpoint)
specifier|public
name|String
name|getOperationName
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
comment|// Use the destination name
return|return
name|getDestination
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|pre (Span span, Exchange exchange, Endpoint endpoint)
specifier|public
name|void
name|pre
parameter_list|(
name|Span
name|span
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
operator|.
name|pre
argument_list|(
name|span
argument_list|,
name|exchange
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|span
operator|.
name|setTag
argument_list|(
name|Tags
operator|.
name|MESSAGE_BUS_DESTINATION
operator|.
name|getKey
argument_list|()
argument_list|,
name|getDestination
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|messageId
init|=
operator|(
name|String
operator|)
name|getMessageId
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageId
operator|!=
literal|null
condition|)
block|{
name|span
operator|.
name|setTag
argument_list|(
name|MESSAGE_BUS_ID
argument_list|,
name|messageId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method identifies the destination from the supplied exchange and/or endpoint.      *      * @param exchange The exchange      * @param endpoint The endpoint      * @return The message bus destination      */
DECL|method|getDestination (Exchange exchange, Endpoint endpoint)
specifier|protected
name|String
name|getDestination
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|stripSchemeAndOptions
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInitiatorSpanKind ()
specifier|public
name|String
name|getInitiatorSpanKind
parameter_list|()
block|{
return|return
literal|"producer"
return|;
block|}
annotation|@
name|Override
DECL|method|getReceiverSpanKind ()
specifier|public
name|String
name|getReceiverSpanKind
parameter_list|()
block|{
return|return
literal|"consumer"
return|;
block|}
comment|/**      * This method identifies the message id for the messaging exchange.      *      * @return The message id, or null if no id exists for the exchange      */
DECL|method|getMessageId (Exchange exchange)
specifier|protected
name|String
name|getMessageId
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

