begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.opentracing
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|opentracing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|mock
operator|.
name|MockSpan
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|mock
operator|.
name|MockTracer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|mock
operator|.
name|MockTracer
operator|.
name|Propagator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|tag
operator|.
name|Tags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_class
DECL|class|CamelOpenTracingTestSupport
specifier|public
class|class
name|CamelOpenTracingTestSupport
extends|extends
name|CamelTestSupport
block|{
DECL|field|tracer
specifier|private
name|MockTracer
name|tracer
decl_stmt|;
DECL|field|testdata
specifier|private
name|SpanTestData
index|[]
name|testdata
decl_stmt|;
DECL|method|CamelOpenTracingTestSupport (SpanTestData[] testdata)
specifier|public
name|CamelOpenTracingTestSupport
parameter_list|(
name|SpanTestData
index|[]
name|testdata
parameter_list|)
block|{
name|this
operator|.
name|testdata
operator|=
name|testdata
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPostSetup ()
specifier|protected
name|void
name|doPostSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|tracer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|tracer
operator|=
operator|new
name|MockTracer
argument_list|(
name|Propagator
operator|.
name|TEXT_MAP
argument_list|)
expr_stmt|;
name|OpenTracingTracer
name|ottracer
init|=
operator|new
name|OpenTracingTracer
argument_list|()
decl_stmt|;
name|ottracer
operator|.
name|setTracer
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
name|ottracer
operator|.
name|setExcludePatterns
argument_list|(
name|getExcludePatterns
argument_list|()
argument_list|)
expr_stmt|;
name|ottracer
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|getTracer ()
specifier|protected
name|MockTracer
name|getTracer
parameter_list|()
block|{
return|return
name|tracer
return|;
block|}
DECL|method|getExcludePatterns ()
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getExcludePatterns
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|verify ()
specifier|protected
name|void
name|verify
parameter_list|()
block|{
name|verify
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|verify (boolean async)
specifier|protected
name|void
name|verify
parameter_list|(
name|boolean
name|async
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Incorrect number of spans"
argument_list|,
name|testdata
operator|.
name|length
argument_list|,
name|tracer
operator|.
name|finishedSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifySameTrace
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MockSpan
argument_list|>
name|spans
init|=
name|tracer
operator|.
name|finishedSpans
argument_list|()
decl_stmt|;
if|if
condition|(
name|async
condition|)
block|{
specifier|final
name|List
argument_list|<
name|MockSpan
argument_list|>
name|unsortedSpans
init|=
name|spans
decl_stmt|;
name|spans
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|testdata
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|td
lambda|->
name|findSpan
argument_list|(
name|td
argument_list|,
name|unsortedSpans
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of spans after sorting"
argument_list|,
name|testdata
operator|.
name|length
argument_list|,
name|spans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testdata
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|verifySpan
argument_list|(
name|i
argument_list|,
name|testdata
argument_list|,
name|spans
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findSpan (SpanTestData testdata, List<MockSpan> spans)
specifier|protected
name|MockSpan
name|findSpan
parameter_list|(
name|SpanTestData
name|testdata
parameter_list|,
name|List
argument_list|<
name|MockSpan
argument_list|>
name|spans
parameter_list|)
block|{
return|return
name|spans
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|.
name|operationName
argument_list|()
operator|.
name|equals
argument_list|(
name|testdata
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|&&
name|s
operator|.
name|tags
argument_list|()
operator|.
name|get
argument_list|(
literal|"camel.uri"
argument_list|)
operator|.
name|equals
argument_list|(
name|testdata
operator|.
name|getUri
argument_list|()
argument_list|)
operator|&&
name|s
operator|.
name|tags
argument_list|()
operator|.
name|get
argument_list|(
name|Tags
operator|.
name|SPAN_KIND
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|testdata
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|verifySpan (int index, SpanTestData[] testdata, List<MockSpan> spans)
specifier|protected
name|void
name|verifySpan
parameter_list|(
name|int
name|index
parameter_list|,
name|SpanTestData
index|[]
name|testdata
parameter_list|,
name|List
argument_list|<
name|MockSpan
argument_list|>
name|spans
parameter_list|)
block|{
name|MockSpan
name|span
init|=
name|spans
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|SpanTestData
name|td
init|=
name|testdata
index|[
name|index
index|]
decl_stmt|;
name|String
name|component
init|=
operator|(
name|String
operator|)
name|span
operator|.
name|tags
argument_list|()
operator|.
name|get
argument_list|(
name|Tags
operator|.
name|COMPONENT
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|td
operator|.
name|getLabel
argument_list|()
argument_list|,
name|SpanDecorator
operator|.
name|CAMEL_COMPONENT
operator|+
name|URI
operator|.
name|create
argument_list|(
name|td
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|td
operator|.
name|getLabel
argument_list|()
argument_list|,
name|td
operator|.
name|getUri
argument_list|()
argument_list|,
name|span
operator|.
name|tags
argument_list|()
operator|.
name|get
argument_list|(
literal|"camel.uri"
argument_list|)
argument_list|)
expr_stmt|;
comment|// If span associated with TestSEDASpanDecorator, check that pre/post tags have been defined
if|if
condition|(
literal|"camel-seda"
operator|.
name|equals
argument_list|(
name|component
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|span
operator|.
name|tags
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"pre"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|span
operator|.
name|tags
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"post"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|td
operator|.
name|getLabel
argument_list|()
argument_list|,
name|td
operator|.
name|getOperation
argument_list|()
argument_list|,
name|span
operator|.
name|operationName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|td
operator|.
name|getLabel
argument_list|()
argument_list|,
name|td
operator|.
name|getKind
argument_list|()
argument_list|,
name|span
operator|.
name|tags
argument_list|()
operator|.
name|get
argument_list|(
name|Tags
operator|.
name|SPAN_KIND
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|td
operator|.
name|getParentId
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|td
operator|.
name|getLabel
argument_list|()
argument_list|,
name|spans
operator|.
name|get
argument_list|(
name|td
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|.
name|context
argument_list|()
operator|.
name|spanId
argument_list|()
argument_list|,
name|span
operator|.
name|parentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|td
operator|.
name|getLogMessages
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Number of log messages"
argument_list|,
name|td
operator|.
name|getLogMessages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|span
operator|.
name|logEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|td
operator|.
name|getLogMessages
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|td
operator|.
name|getLogMessages
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|span
operator|.
name|logEntries
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|fields
argument_list|()
operator|.
name|get
argument_list|(
literal|"message"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifySameTrace ()
specifier|protected
name|void
name|verifySameTrace
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tracer
operator|.
name|finishedSpans
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|context
argument_list|()
operator|.
name|traceId
argument_list|()
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTraceSpanNumbers (int numOfTraces, int numSpansPerTrace)
specifier|protected
name|void
name|verifyTraceSpanNumbers
parameter_list|(
name|int
name|numOfTraces
parameter_list|,
name|int
name|numSpansPerTrace
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Span
argument_list|>
argument_list|>
name|traces
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Sort spans into separate traces
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getTracer
argument_list|()
operator|.
name|finishedSpans
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Span
argument_list|>
name|spans
init|=
name|traces
operator|.
name|get
argument_list|(
name|getTracer
argument_list|()
operator|.
name|finishedSpans
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|context
argument_list|()
operator|.
name|traceId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|spans
operator|==
literal|null
condition|)
block|{
name|spans
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|traces
operator|.
name|put
argument_list|(
name|getTracer
argument_list|()
operator|.
name|finishedSpans
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|context
argument_list|()
operator|.
name|traceId
argument_list|()
argument_list|,
name|spans
argument_list|)
expr_stmt|;
block|}
name|spans
operator|.
name|add
argument_list|(
name|getTracer
argument_list|()
operator|.
name|finishedSpans
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numOfTraces
argument_list|,
name|traces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Span
argument_list|>
argument_list|>
name|spans
range|:
name|traces
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|numSpansPerTrace
argument_list|,
name|spans
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

