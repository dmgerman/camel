begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.opentracing.decorators
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|opentracing
operator|.
name|decorators
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|MqttSpanDecoratorTest
specifier|public
class|class
name|MqttSpanDecoratorTest
block|{
annotation|@
name|Test
DECL|method|testGetOperationName ()
specifier|public
name|void
name|testGetOperationName
parameter_list|()
block|{
name|Endpoint
name|endpoint
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mqtt://hello?publishTopicName=world"
argument_list|)
expr_stmt|;
name|MqttSpanDecorator
name|decorator
init|=
operator|new
name|MqttSpanDecorator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|decorator
operator|.
name|getOperationName
argument_list|(
literal|null
argument_list|,
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDestinationPublish ()
specifier|public
name|void
name|testGetDestinationPublish
parameter_list|()
block|{
name|Endpoint
name|endpoint
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mqtt://hello?publishTopicName=world"
argument_list|)
expr_stmt|;
name|MqttSpanDecorator
name|decorator
init|=
operator|new
name|MqttSpanDecorator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"world"
argument_list|,
name|decorator
operator|.
name|getDestination
argument_list|(
literal|null
argument_list|,
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDestinationSubscribe ()
specifier|public
name|void
name|testGetDestinationSubscribe
parameter_list|()
block|{
name|Endpoint
name|endpoint
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mqtt://hello?subscribeTopicNames=world"
argument_list|)
expr_stmt|;
name|MqttSpanDecorator
name|decorator
init|=
operator|new
name|MqttSpanDecorator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"world"
argument_list|,
name|decorator
operator|.
name|getDestination
argument_list|(
literal|null
argument_list|,
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

