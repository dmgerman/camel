begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dynamicep
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dynamicep
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_comment
comment|/**  * Parses the endpoint uri and creates one consumer for each  * endpopint to listen on  */
end_comment

begin_class
DECL|class|DynamicConsumer
specifier|public
class|class
name|DynamicConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|consumers
name|Set
argument_list|<
name|Consumer
argument_list|>
name|consumers
decl_stmt|;
DECL|method|DynamicConsumer (DynamicEndpoint endpoint, Processor processor)
specifier|public
name|DynamicConsumer
parameter_list|(
name|DynamicEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|consumers
operator|=
operator|new
name|HashSet
argument_list|<
name|Consumer
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|uris
init|=
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
operator|.
name|substring
argument_list|(
literal|"dynamicep://"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|uriAr
init|=
name|uris
operator|.
name|split
argument_list|(
literal|",|%2C"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|epUri
range|:
name|uriAr
control|)
block|{
try|try
block|{
name|epUri
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|epUri
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Endpoint
name|ep
init|=
name|this
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|epUri
argument_list|)
decl_stmt|;
name|Consumer
name|consumer
init|=
name|ep
operator|.
name|createConsumer
argument_list|(
name|getProcessor
argument_list|()
argument_list|)
decl_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error initializing endpoint dynamic endpoint from "
operator|+
name|uris
operator|+
literal|" at "
operator|+
name|epUri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
for|for
control|(
name|Consumer
name|consumer
range|:
name|consumers
control|)
block|{
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Consumer
name|consumer
range|:
name|consumers
control|)
block|{
name|consumer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

