begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.jndi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jndi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jndi
operator|.
name|internal
operator|.
name|Classes
import|;
end_import

begin_comment
comment|/**  * @version  */
end_comment

begin_class
DECL|class|JndiBindings
specifier|public
specifier|final
class|class
name|JndiBindings
block|{
DECL|method|JndiBindings ()
specifier|private
name|JndiBindings
parameter_list|()
block|{
comment|//Helper class
block|}
comment|/**      * Binds the given injector and its binding providers to the given JNDI      * context using<a      * href="http://code.google.com/p/camel-extra/wiki/GuiceJndi">this mapping      * mechanism</a>.      *<p/>      * This will expose all of the bindings providers to JNDI along with any      * bindings which are annotated with {@link JndiBind} or {@link @Named} to      * the given JNDI context.      *       * @param context      *            the context to export objects to      * @param injector      *            the injector used to find the bindings      */
DECL|method|bindInjectorAndBindings (Context context, Injector injector, Properties jndiNames)
specifier|public
specifier|static
name|void
name|bindInjectorAndBindings
parameter_list|(
name|Context
name|context
parameter_list|,
name|Injector
name|injector
parameter_list|,
name|Properties
name|jndiNames
parameter_list|)
throws|throws
name|NamingException
block|{
comment|// lets find all the exported bindings
name|Set
argument_list|<
name|Entry
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
name|injector
operator|.
name|getBindings
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Key
argument_list|<
name|?
argument_list|>
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Binding
argument_list|<
name|?
argument_list|>
name|binding
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Annotation
name|annotation
init|=
name|key
operator|.
name|getAnnotation
argument_list|()
decl_stmt|;
name|Type
name|type
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
name|JndiBind
name|jndiBind
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
decl_stmt|;
name|jndiBind
operator|=
name|aClass
operator|.
name|getAnnotation
argument_list|(
name|JndiBind
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annotation
operator|instanceof
name|JndiBind
condition|)
block|{
name|jndiBind
operator|=
operator|(
name|JndiBind
operator|)
name|annotation
expr_stmt|;
block|}
name|String
name|jndiName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jndiBind
operator|!=
literal|null
condition|)
block|{
name|jndiName
operator|=
name|jndiBind
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jndiName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|Named
condition|)
block|{
name|Named
name|named
init|=
operator|(
name|Named
operator|)
name|annotation
decl_stmt|;
name|String
name|name
init|=
name|named
operator|.
name|value
argument_list|()
decl_stmt|;
name|jndiName
operator|=
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|name
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|Class
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
name|jndiName
operator|=
name|aClass
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jndiName
operator|=
name|aClass
operator|.
name|getName
argument_list|()
operator|+
name|annotation
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|jndiName
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|binding
operator|.
name|getProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|bind
argument_list|(
name|jndiName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|jndiNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|jndiName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expression
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Provider
argument_list|<
name|?
argument_list|>
name|provider
init|=
name|getProviderForExpression
argument_list|(
name|injector
argument_list|,
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|bind
argument_list|(
name|jndiName
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|getProviderForExpression (Injector injector, String expression)
specifier|static
name|Provider
argument_list|<
name|?
argument_list|>
name|getProviderForExpression
parameter_list|(
name|Injector
name|injector
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
comment|// TODO we could support more complex expressions
comment|// like 'className/name' to map to @Named annotations
comment|// or even 'className@annotationType(values) etc
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|Classes
operator|.
name|loadClass
argument_list|(
name|expression
argument_list|,
name|JndiBindings
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|injector
operator|.
name|getProvider
argument_list|(
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

unit|}
end_unit

