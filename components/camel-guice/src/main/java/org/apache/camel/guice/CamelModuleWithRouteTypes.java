begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_comment
comment|/**  * A Guice Module which injects the CamelContext with the specified {@link org.apache.camel.RoutesBuilder} types - which are then injected by Guice.  *<p>  * If you wish to bind all of the bound {@link org.apache.camel.RoutesBuilder} implementations available - maybe with some filter applied - then  * please use the {@link org.apache.camel.guice.CamelModuleWithMatchingRoutes}.  *<p>  * Or if you would like to specify exactly which {@link org.apache.camel.RoutesBuilder} to bind then use the {@link CamelModule} and create a provider  * method annotated with @Provides and returning Set<Routes> such as  *<code><pre>  * public class MyModule extends CamelModule {  *&#64;Provides  *   Set&lt;Routes&gt; routes(Injector injector) { ... }  * }  *</pre></code>  *   *  * @version   */
end_comment

begin_class
DECL|class|CamelModuleWithRouteTypes
specifier|public
class|class
name|CamelModuleWithRouteTypes
extends|extends
name|CamelModule
block|{
DECL|field|routes
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RoutesBuilder
argument_list|>
argument_list|>
name|routes
decl_stmt|;
DECL|method|CamelModuleWithRouteTypes (Class<? extends RoutesBuilder>.... routeTypes)
specifier|public
name|CamelModuleWithRouteTypes
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RoutesBuilder
argument_list|>
modifier|...
name|routeTypes
parameter_list|)
block|{
name|this
operator|.
name|routes
operator|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RoutesBuilder
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|RoutesBuilder
argument_list|>
name|route
range|:
name|routeTypes
control|)
block|{
name|routes
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|CamelModuleWithRouteTypes (Set<Class<? extends RoutesBuilder>> routes)
specifier|public
name|CamelModuleWithRouteTypes
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RoutesBuilder
argument_list|>
argument_list|>
name|routes
parameter_list|)
block|{
name|this
operator|.
name|routes
operator|=
name|routes
expr_stmt|;
block|}
annotation|@
name|Provides
DECL|method|routes (Injector injector)
name|Set
argument_list|<
name|RoutesBuilder
argument_list|>
name|routes
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|Set
argument_list|<
name|RoutesBuilder
argument_list|>
name|answer
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|RoutesBuilder
argument_list|>
name|type
range|:
name|routes
control|)
block|{
name|RoutesBuilder
name|route
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

