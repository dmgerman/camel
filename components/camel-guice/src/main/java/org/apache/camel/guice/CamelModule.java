begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|multibindings
operator|.
name|Multibinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Routes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A default Guice module for creating a {@link CamelContext} and registering a list of {@link RouteBuilder} types to register.  *<p/>  * You can drive from this class to overload the {@link #configureRoutes(com.google.inject.multibindings.Multibinder)} method to perform custom binding for  * route builders. Another approach is to create a {@link RouteBuilder} which just initialises all of your individual route builders  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|CamelModule
specifier|public
class|class
name|CamelModule
extends|extends
name|AbstractModule
block|{
DECL|field|routeClassList
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RouteBuilder
argument_list|>
argument_list|>
name|routeClassList
decl_stmt|;
DECL|method|CamelModule (Class<? extends RouteBuilder>.... routeTypes)
specifier|protected
name|CamelModule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RouteBuilder
argument_list|>
modifier|...
name|routeTypes
parameter_list|)
block|{
name|routeClassList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RouteBuilder
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|RouteBuilder
argument_list|>
name|routeType
range|:
name|routeTypes
control|)
block|{
name|routeClassList
operator|.
name|add
argument_list|(
name|routeType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|CamelModule (List<Class<? extends RouteBuilder>> routeClassList)
specifier|protected
name|CamelModule
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RouteBuilder
argument_list|>
argument_list|>
name|routeClassList
parameter_list|)
block|{
name|this
operator|.
name|routeClassList
operator|=
name|routeClassList
expr_stmt|;
block|}
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|GuiceCamelContext
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|Multibinder
argument_list|<
name|Routes
argument_list|>
name|routesBinder
init|=
name|Multibinder
operator|.
name|newSetBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|Routes
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Routes
argument_list|>
name|routeType
range|:
name|routeClassList
control|)
block|{
name|routesBinder
operator|.
name|addBinding
argument_list|()
operator|.
name|to
argument_list|(
name|routeType
argument_list|)
expr_stmt|;
block|}
name|configureRoutes
argument_list|(
name|routesBinder
argument_list|)
expr_stmt|;
block|}
comment|/**      * Provides a strategy method configure the routes, typically via {@link RouteBuilder} instances      *      * @param routesBinder      */
DECL|method|configureRoutes (Multibinder<Routes> routesBinder)
specifier|protected
name|void
name|configureRoutes
parameter_list|(
name|Multibinder
argument_list|<
name|Routes
argument_list|>
name|routesBinder
parameter_list|)
block|{     }
block|}
end_class

end_unit

