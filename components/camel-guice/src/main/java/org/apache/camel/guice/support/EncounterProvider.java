begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|spi
operator|.
name|TypeEncounter
import|;
end_import

begin_comment
comment|/**  * Like a {@link com.google.inject.Provider} but which is also given an  * {@link TypeEncounter}  *   * @version  */
end_comment

begin_class
DECL|class|EncounterProvider
specifier|public
specifier|abstract
class|class
name|EncounterProvider
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|get (TypeEncounter<?> encounter)
specifier|public
specifier|abstract
name|Provider
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|get
parameter_list|(
name|TypeEncounter
argument_list|<
name|?
argument_list|>
name|encounter
parameter_list|)
function_decl|;
comment|/**      * Returns a new encounter provider for the given key      */
DECL|method|encounterProvider ( final Key<? extends T> key)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|EncounterProvider
argument_list|<
name|T
argument_list|>
name|encounterProvider
parameter_list|(
specifier|final
name|Key
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|key
parameter_list|)
block|{
return|return
operator|new
name|EncounterProvider
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|Provider
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|get
parameter_list|(
name|TypeEncounter
argument_list|<
name|?
argument_list|>
name|encounter
parameter_list|)
block|{
return|return
name|encounter
operator|.
name|getProvider
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns a new encounter provider for the given type      */
DECL|method|encounterProvider ( final Class<? extends T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|EncounterProvider
argument_list|<
name|T
argument_list|>
name|encounterProvider
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|EncounterProvider
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|Provider
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|get
parameter_list|(
name|TypeEncounter
argument_list|<
name|?
argument_list|>
name|encounter
parameter_list|)
block|{
return|return
name|encounter
operator|.
name|getProvider
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns a new encounter provider for the given instance      */
DECL|method|encounterProvider (final T instance)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|EncounterProvider
argument_list|<
name|T
argument_list|>
name|encounterProvider
parameter_list|(
specifier|final
name|T
name|instance
parameter_list|)
block|{
return|return
operator|new
name|EncounterProvider
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|Provider
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|get
parameter_list|(
name|TypeEncounter
argument_list|<
name|?
argument_list|>
name|encounter
parameter_list|)
block|{
return|return
operator|new
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

