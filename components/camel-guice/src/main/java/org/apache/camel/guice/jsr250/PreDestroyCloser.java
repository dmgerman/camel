begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.jsr250
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jsr250
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
operator|.
name|Closer
import|;
end_import

begin_comment
comment|/**  * Supports the {@link javax.annotation.PreDestroy} annotation lifecycle from  * JSR250.  *<p>  * To install this closer you need to register the {@link Jsr250Module} in your  * injector.  *   * @author james.strachan@gmail.com (James Strachan)  * @version  */
end_comment

begin_class
DECL|class|PreDestroyCloser
specifier|public
class|class
name|PreDestroyCloser
implements|implements
name|Closer
block|{
DECL|field|methodCache
specifier|private
name|AnnotatedMethodCache
name|methodCache
init|=
operator|new
name|AnnotatedMethodCache
argument_list|(
name|PreDestroy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|close (Object object)
specifier|public
name|void
name|close
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Throwable
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|type
init|=
name|object
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|methodCache
operator|.
name|getMethod
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getTargetException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

