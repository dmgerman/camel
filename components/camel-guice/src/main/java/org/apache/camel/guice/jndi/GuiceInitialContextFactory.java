begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.jndi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jndi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|spi
operator|.
name|InitialContextFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Scopes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|inject
operator|.
name|Injectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jndi
operator|.
name|internal
operator|.
name|JndiContext
import|;
end_import

begin_comment
comment|/**  * A factory of the Guice JNDI provider which creates an injector from all the  * available modules specified in the space separated  * {@link Injectors#MODULE_CLASS_NAMES} property.  *<p/>  * For more details of how this JNDI provider works see<a  * href="http://code.google.com/p/camel-extra/wiki/GuiceJndi">the wiki  * documentation</a>  *   * @version  */
end_comment

begin_class
DECL|class|GuiceInitialContextFactory
specifier|public
class|class
name|GuiceInitialContextFactory
implements|implements
name|InitialContextFactory
block|{
DECL|field|NAME_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NAME_PREFIX
init|=
literal|"org.guiceyfruit.jndi/"
decl_stmt|;
comment|/**      * Creates a new context with the given environment.      *       * @param environment      *            the environment, must not be<tt>null</tt>      * @return the created context.      * @throws NamingException      *             is thrown if creation failed.      */
DECL|method|getInitialContext (final Hashtable<?, ?> environment)
specifier|public
name|Context
name|getInitialContext
parameter_list|(
specifier|final
name|Hashtable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|environment
parameter_list|)
throws|throws
name|NamingException
block|{
try|try
block|{
comment|// lets avoid infinite recursion with a provider creating an
comment|// InitialContext by binding the
comment|// singleton initial context into the injector
name|Injector
name|injector
init|=
name|Injectors
operator|.
name|createInjector
argument_list|(
name|environment
argument_list|,
operator|new
name|AbstractModule
argument_list|()
block|{
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|Context
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
operator|new
name|Provider
argument_list|<
name|Context
argument_list|>
argument_list|()
block|{
annotation|@
name|Inject
name|Injector
name|injector
decl_stmt|;
specifier|public
name|Context
name|get
parameter_list|()
block|{
name|JndiContext
name|context
init|=
operator|new
name|JndiContext
argument_list|(
name|environment
argument_list|)
decl_stmt|;
name|Properties
name|jndiNames
init|=
name|createJndiNamesProperties
argument_list|(
name|environment
argument_list|)
decl_stmt|;
try|try
block|{
name|JndiBindings
operator|.
name|bindInjectorAndBindings
argument_list|(
name|context
argument_list|,
name|injector
argument_list|,
name|jndiNames
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Failed to create JNDI bindings. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|injector
operator|.
name|getInstance
argument_list|(
name|Context
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NamingException
name|exception
init|=
operator|new
name|NamingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
comment|/**      * Creates a properties object containing all of the values whose keys start      * with {@link #NAME_PREFIX} with the prefix being removed on the key      *       * @return a properties object      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|createJndiNamesProperties (Hashtable environment)
specifier|private
name|Properties
name|createJndiNamesProperties
parameter_list|(
name|Hashtable
name|environment
parameter_list|)
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|set
init|=
name|environment
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|set
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|NAME_PREFIX
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
name|NAME_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

