begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.jsr250
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jsr250
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_comment
comment|/**  * A cache which maintains which method is annotated by a given annotation for  * each class  *   * @version  */
end_comment

begin_class
DECL|class|AnnotatedMethodCache
class|class
name|AnnotatedMethodCache
block|{
DECL|field|annotationType
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
decl_stmt|;
DECL|field|methodCache
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Method
argument_list|>
name|methodCache
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|WeakHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Method
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|AnnotatedMethodCache (Class<? extends Annotation> annotationType)
name|AnnotatedMethodCache
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
name|this
operator|.
name|annotationType
operator|=
name|annotationType
expr_stmt|;
block|}
comment|/**      * Looks up the method which is annotated for the given type      */
DECL|method|getMethod (Class<?> type)
specifier|public
name|Method
name|getMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
comment|// if we are invoked concurrently it doesn't matter if we look up the
comment|// method
comment|// concurrently - its the same instance that will be overwritten in the
comment|// map
name|Method
name|method
init|=
name|methodCache
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|method
operator|=
name|findMethodWithAnnotation
argument_list|(
name|type
argument_list|,
name|annotationType
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Method should have no arguments for @PostConstruct "
operator|+
name|method
argument_list|)
throw|;
block|}
name|methodCache
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|method
return|;
block|}
DECL|method|findMethodWithAnnotation (Class<?> type, Class<? extends Annotation> annotationType)
specifier|protected
name|Method
name|findMethodWithAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
name|Method
index|[]
name|methods
init|=
name|type
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|Annotation
name|fromElement
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|annotationType
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromElement
operator|!=
literal|null
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
if|if
condition|(
operator|!
name|Object
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|superclass
init|=
name|type
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
condition|)
block|{
return|return
name|findMethodWithAnnotation
argument_list|(
name|superclass
argument_list|,
name|annotationType
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

