begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * A Composite implementation of {@link Closer}  *   * @version  */
end_comment

begin_class
DECL|class|CompositeCloser
specifier|public
class|class
name|CompositeCloser
implements|implements
name|Closer
block|{
DECL|field|closers
specifier|private
specifier|final
name|Iterable
argument_list|<
name|Closer
argument_list|>
name|closers
decl_stmt|;
DECL|method|CompositeCloser (Iterable<Closer> closers)
specifier|public
name|CompositeCloser
parameter_list|(
name|Iterable
argument_list|<
name|Closer
argument_list|>
name|closers
parameter_list|)
block|{
name|this
operator|.
name|closers
operator|=
name|closers
expr_stmt|;
block|}
DECL|method|close (Object object)
specifier|public
name|void
name|close
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|Closer
name|closer
range|:
name|closers
control|)
block|{
name|closer
operator|.
name|close
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a {@link Closer} for the given lists of closer strategies or      * returning null if the collection is empty      */
DECL|method|newInstance (Collection<Closer> closers)
specifier|public
specifier|static
name|Closer
name|newInstance
parameter_list|(
name|Collection
argument_list|<
name|Closer
argument_list|>
name|closers
parameter_list|)
block|{
if|if
condition|(
name|closers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|closers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|closers
argument_list|)
return|;
block|}
return|return
operator|new
name|CompositeCloser
argument_list|(
name|closers
argument_list|)
return|;
block|}
block|}
end_class

end_unit

