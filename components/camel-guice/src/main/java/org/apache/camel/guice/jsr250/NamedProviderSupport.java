begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.jsr250
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jsr250
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|inject
operator|.
name|Injectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
operator|.
name|AnnotationMemberProviderSupport
import|;
end_import

begin_comment
comment|/**  * A useful base class for any provider which looks up values by name  * annotations or named entries in OSGi  *   * @version  */
end_comment

begin_class
DECL|class|NamedProviderSupport
specifier|public
specifier|abstract
class|class
name|NamedProviderSupport
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
extends|extends
name|AnnotationMemberProviderSupport
argument_list|<
name|A
argument_list|>
block|{
annotation|@
name|Inject
DECL|field|injector
specifier|private
name|Injector
name|injector
decl_stmt|;
DECL|field|context
specifier|private
name|Context
name|context
decl_stmt|;
DECL|method|getContext ()
specifier|public
name|Context
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
annotation|@
name|Inject
argument_list|(
name|optional
operator|=
literal|true
argument_list|)
DECL|method|setContext (Context context)
specifier|public
name|void
name|setContext
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|provideObjectFromNamedBindingOrJndi ( TypeLiteral<?> requiredType, String name)
specifier|protected
name|Object
name|provideObjectFromNamedBindingOrJndi
parameter_list|(
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|requiredType
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Binding
argument_list|<
name|?
argument_list|>
name|binding
init|=
name|Injectors
operator|.
name|getBinding
argument_list|(
name|injector
argument_list|,
name|Key
operator|.
name|get
argument_list|(
name|requiredType
argument_list|,
name|Names
operator|.
name|named
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
return|return
name|binding
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
comment|// TODO we may want to try avoid the dependency on JNDI classes
comment|// for better operation in GAE?
try|try
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|InitialContext
argument_list|()
expr_stmt|;
block|}
return|return
name|context
operator|.
name|lookup
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Failed to find name '"
operator|+
name|name
operator|+
literal|"' in JNDI. Cause: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * if no valid name is present on the annotation then use the member name      */
DECL|method|getValueName (String nameFromAnnotation, Member member)
specifier|protected
name|String
name|getValueName
parameter_list|(
name|String
name|nameFromAnnotation
parameter_list|,
name|Member
name|member
parameter_list|)
block|{
if|if
condition|(
name|nameFromAnnotation
operator|==
literal|null
operator|||
name|nameFromAnnotation
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nameFromAnnotation
operator|=
name|member
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nameFromAnnotation
operator|==
literal|null
operator|||
name|nameFromAnnotation
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No name defined"
argument_list|)
throw|;
block|}
return|return
name|nameFromAnnotation
return|;
block|}
block|}
end_class

end_unit

