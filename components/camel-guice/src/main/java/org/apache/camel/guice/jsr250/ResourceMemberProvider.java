begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.jsr250
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jsr250
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_comment
comment|/**  * Injects fields or methods with the results of the {@link Resource} annotation  *   * @version  */
end_comment

begin_class
DECL|class|ResourceMemberProvider
specifier|public
class|class
name|ResourceMemberProvider
extends|extends
name|NamedProviderSupport
argument_list|<
name|Resource
argument_list|>
block|{
DECL|method|isNullParameterAllowed (Resource annotation, Method method, Class<?> parameterType, int parameterIndex)
specifier|public
name|boolean
name|isNullParameterAllowed
parameter_list|(
name|Resource
name|annotation
parameter_list|,
name|Method
name|method
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|,
name|int
name|parameterIndex
parameter_list|)
block|{
comment|// TODO can a @Resource be optional?
return|return
literal|false
return|;
block|}
DECL|method|provide (Resource resource, Member member, TypeLiteral<?> requiredType, Class<?> memberType, Annotation[] annotations)
specifier|protected
name|Object
name|provide
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Member
name|member
parameter_list|,
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|requiredType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|memberType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|)
block|{
name|String
name|name
init|=
name|getValueName
argument_list|(
name|resource
operator|.
name|name
argument_list|()
argument_list|,
name|member
argument_list|)
decl_stmt|;
return|return
name|provideObjectFromNamedBindingOrJndi
argument_list|(
name|requiredType
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

