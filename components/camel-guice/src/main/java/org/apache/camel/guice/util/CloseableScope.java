begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|inject
operator|.
name|Injectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
operator|.
name|CloseFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
operator|.
name|HasScopeAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
operator|.
name|internal
operator|.
name|CloseErrorsImpl
import|;
end_import

begin_comment
comment|/**  * Represents a scope which caches objects around until the scope is closed.  *   * The scope can be closed as many times as required - there is no need to  * recreate the scope instance each time a scope goes out of scope.  *   * @version  */
end_comment

begin_class
DECL|class|CloseableScope
specifier|public
class|class
name|CloseableScope
implements|implements
name|Scope
implements|,
name|HasScopeAnnotation
block|{
DECL|field|scopeAnnotation
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|scopeAnnotation
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|field|injector
specifier|private
name|Injector
name|injector
decl_stmt|;
DECL|method|CloseableScope (Class<? extends Annotation> scopeAnnotation)
specifier|public
name|CloseableScope
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|scopeAnnotation
parameter_list|)
block|{
name|this
operator|.
name|scopeAnnotation
operator|=
name|scopeAnnotation
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|scope (final Key<T> key, final Provider<T> creator)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|scope
parameter_list|(
specifier|final
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
specifier|final
name|Provider
argument_list|<
name|T
argument_list|>
name|creator
parameter_list|)
block|{
return|return
operator|new
name|CachingProvider
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|get
parameter_list|()
block|{
name|Object
name|o
decl_stmt|;
synchronized|synchronized
init|(
name|map
init|)
block|{
name|o
operator|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|creator
operator|.
name|get
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|T
operator|)
name|o
return|;
block|}
specifier|public
name|T
name|getCachedValue
parameter_list|()
block|{
synchronized|synchronized
init|(
name|map
init|)
block|{
return|return
operator|(
name|T
operator|)
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Closes all of the objects within this scope using the given injector and      * scope annotation and clears the scope      */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|CloseFailedException
block|{
name|close
argument_list|(
name|injector
argument_list|)
expr_stmt|;
block|}
comment|/**      * Closes all of the objects within the given injector of the specified      * scope and clears the scope      */
DECL|method|close (Injector injector)
specifier|public
name|void
name|close
parameter_list|(
name|Injector
name|injector
parameter_list|)
throws|throws
name|CloseFailedException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|injector
argument_list|,
literal|"injector"
argument_list|)
expr_stmt|;
name|CloseErrorsImpl
name|errors
init|=
operator|new
name|CloseErrorsImpl
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Injectors
operator|.
name|close
argument_list|(
name|injector
argument_list|,
name|scopeAnnotation
argument_list|,
name|errors
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|map
init|)
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|errors
operator|.
name|throwIfNecessary
argument_list|()
expr_stmt|;
block|}
DECL|method|getScopeAnnotation ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|getScopeAnnotation
parameter_list|()
block|{
return|return
name|scopeAnnotation
return|;
block|}
block|}
end_class

end_unit

