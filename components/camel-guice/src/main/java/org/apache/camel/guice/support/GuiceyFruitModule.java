begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|MembersInjector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|binder
operator|.
name|LinkedBindingBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|matcher
operator|.
name|AbstractMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|spi
operator|.
name|TypeEncounter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|spi
operator|.
name|TypeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|inject
operator|.
name|Configures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
operator|.
name|internal
operator|.
name|MethodKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|matcher
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|support
operator|.
name|EncounterProvider
operator|.
name|encounterProvider
import|;
end_import

begin_comment
comment|/**  * Adds some new helper methods to the base Guice module  *   * @version  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|GuiceyFruitModule
specifier|public
specifier|abstract
class|class
name|GuiceyFruitModule
extends|extends
name|AbstractModule
block|{
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
comment|// lets find all of the configures methods
name|List
argument_list|<
name|Method
argument_list|>
name|configureMethods
init|=
name|getConfiguresMethods
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|configureMethods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|GuiceyFruitModule
name|moduleInstance
init|=
name|this
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|GuiceyFruitModule
argument_list|>
name|moduleType
init|=
name|getClass
argument_list|()
decl_stmt|;
name|TypeLiteral
argument_list|<
name|?
extends|extends
name|GuiceyFruitModule
argument_list|>
name|type
init|=
name|TypeLiteral
operator|.
name|get
argument_list|(
name|moduleType
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|configureMethods
control|)
block|{
name|int
name|size
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"No arguments on @Configures method "
operator|+
name|method
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Too many arguments "
operator|+
name|size
operator|+
literal|" on @Configures method "
operator|+
name|method
argument_list|)
throw|;
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
init|=
name|getParameterType
argument_list|(
name|type
argument_list|,
name|method
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|bindListener
argument_list|(
operator|new
name|AbstractMatcher
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|matches
parameter_list|(
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|typeLiteral
parameter_list|)
block|{
return|return
name|typeLiteral
operator|.
name|getRawType
argument_list|()
operator|.
name|equals
argument_list|(
name|paramType
argument_list|)
return|;
block|}
block|}
operator|,
operator|new
name|TypeListener
argument_list|()
block|{
specifier|public
parameter_list|<
name|I
parameter_list|>
name|void
name|hear
parameter_list|(
name|TypeLiteral
argument_list|<
name|I
argument_list|>
name|injectableType
parameter_list|,
name|TypeEncounter
argument_list|<
name|I
argument_list|>
name|encounter
parameter_list|)
block|{
name|encounter
operator|.
name|register
argument_list|(
operator|new
name|MembersInjector
argument_list|<
name|I
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|injectMembers
parameter_list|(
name|I
name|injectee
parameter_list|)
block|{
comment|// lets invoke the configures method
try|try
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|moduleInstance
argument_list|,
name|injectee
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Failed to invoke @Configures method "
operator|+
name|method
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ie
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|ie
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Failed to invoke @Configures method "
operator|+
name|method
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|)
empty_stmt|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|getConfiguresMethods ()
specifier|private
name|List
argument_list|<
name|Method
argument_list|>
name|getConfiguresMethods
parameter_list|()
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|answer
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Method
argument_list|>
name|list
init|=
name|Reflectors
operator|.
name|getAllMethods
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|list
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getAnnotation
argument_list|(
name|Configures
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
end_function

begin_comment
comment|/**      * Binds a post injection hook method annotated with the given annotation to      * the given method handler.      */
end_comment

begin_function
DECL|method|bindMethodHandler ( final Class<A> annotationType, final MethodHandler methodHandler)
specifier|protected
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|void
name|bindMethodHandler
parameter_list|(
specifier|final
name|Class
argument_list|<
name|A
argument_list|>
name|annotationType
parameter_list|,
specifier|final
name|MethodHandler
name|methodHandler
parameter_list|)
block|{
name|bindMethodHandler
argument_list|(
name|annotationType
argument_list|,
name|encounterProvider
argument_list|(
name|methodHandler
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Binds a post injection hook method annotated with the given annotation to      * the given method handler.      */
end_comment

begin_function
DECL|method|bindMethodHandler ( final Class<A> annotationType, final Key<? extends MethodHandler> methodHandlerKey)
specifier|protected
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|void
name|bindMethodHandler
parameter_list|(
specifier|final
name|Class
argument_list|<
name|A
argument_list|>
name|annotationType
parameter_list|,
specifier|final
name|Key
argument_list|<
name|?
extends|extends
name|MethodHandler
argument_list|>
name|methodHandlerKey
parameter_list|)
block|{
name|bindMethodHandler
argument_list|(
name|annotationType
argument_list|,
name|encounterProvider
argument_list|(
name|methodHandlerKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Binds a post injection hook method annotated with the given annotation to      * the given method handler.      */
end_comment

begin_function
DECL|method|bindMethodHandler ( final Class<A> annotationType, final Class<? extends MethodHandler> methodHandlerType)
specifier|protected
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|void
name|bindMethodHandler
parameter_list|(
specifier|final
name|Class
argument_list|<
name|A
argument_list|>
name|annotationType
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|MethodHandler
argument_list|>
name|methodHandlerType
parameter_list|)
block|{
name|bindMethodHandler
argument_list|(
name|annotationType
argument_list|,
name|encounterProvider
argument_list|(
name|methodHandlerType
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|bindMethodHandler ( final Class<A> annotationType, final EncounterProvider<MethodHandler> encounterProvider)
specifier|private
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|void
name|bindMethodHandler
parameter_list|(
specifier|final
name|Class
argument_list|<
name|A
argument_list|>
name|annotationType
parameter_list|,
specifier|final
name|EncounterProvider
argument_list|<
name|MethodHandler
argument_list|>
name|encounterProvider
parameter_list|)
block|{
name|bindListener
argument_list|(
name|any
argument_list|()
argument_list|,
operator|new
name|TypeListener
argument_list|()
block|{
specifier|public
parameter_list|<
name|I
parameter_list|>
name|void
name|hear
parameter_list|(
name|TypeLiteral
argument_list|<
name|I
argument_list|>
name|injectableType
parameter_list|,
name|TypeEncounter
argument_list|<
name|I
argument_list|>
name|encounter
parameter_list|)
block|{
name|Class
argument_list|<
name|?
super|super
name|I
argument_list|>
name|type
init|=
name|injectableType
operator|.
name|getRawType
argument_list|()
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|type
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|methods
control|)
block|{
specifier|final
name|A
name|annotation
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|annotationType
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Provider
argument_list|<
name|?
extends|extends
name|MethodHandler
argument_list|>
name|provider
init|=
name|encounterProvider
operator|.
name|get
argument_list|(
name|encounter
argument_list|)
decl_stmt|;
name|encounter
operator|.
name|register
argument_list|(
operator|new
name|InjectionListener
argument_list|<
name|I
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|afterInjection
parameter_list|(
name|I
name|injectee
parameter_list|)
block|{
name|MethodHandler
name|methodHandler
init|=
name|provider
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|methodHandler
operator|.
name|afterInjection
argument_list|(
name|injectee
argument_list|,
name|annotation
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ie
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|ie
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|ProvisionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Binds a custom injection point for a given injection annotation to the      * annotation member provider so that occurrences of the annotation on      * fields and methods with a single parameter will be injected by Guice      * after the constructor and @Inject have been processed.      *       * @param annotationType      *            the annotation class used to define the injection point      * @param annotationMemberProviderKey      *            the key of the annotation member provider which can be      *            instantiated and injected by guice      * @param<A>      *            the annotation type used as the injection point      */
end_comment

begin_function
DECL|method|bindAnnotationInjector ( Class<A> annotationType, Key<? extends AnnotationMemberProvider> annotationMemberProviderKey)
specifier|protected
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|void
name|bindAnnotationInjector
parameter_list|(
name|Class
argument_list|<
name|A
argument_list|>
name|annotationType
parameter_list|,
name|Key
argument_list|<
name|?
extends|extends
name|AnnotationMemberProvider
argument_list|>
name|annotationMemberProviderKey
parameter_list|)
block|{
name|bindAnnotationInjector
argument_list|(
name|annotationType
argument_list|,
name|encounterProvider
argument_list|(
name|annotationMemberProviderKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Binds a custom injection point for a given injection annotation to the      * annotation member provider so that occurrences of the annotation on      * fields and methods with a single parameter will be injected by Guice      * after the constructor and @Inject have been processed.      *       * @param annotationType      *            the annotation class used to define the injection point      * @param annotationMemberProvider      *            the annotation member provider which can be instantiated and      *            injected by guice      * @param<A>      *            the annotation type used as the injection point      */
end_comment

begin_function
DECL|method|bindAnnotationInjector ( Class<A> annotationType, AnnotationMemberProvider annotationMemberProvider)
specifier|protected
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|void
name|bindAnnotationInjector
parameter_list|(
name|Class
argument_list|<
name|A
argument_list|>
name|annotationType
parameter_list|,
name|AnnotationMemberProvider
name|annotationMemberProvider
parameter_list|)
block|{
name|bindAnnotationInjector
argument_list|(
name|annotationType
argument_list|,
name|encounterProvider
argument_list|(
name|annotationMemberProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Binds a custom injection point for a given injection annotation to the      * annotation member provider so that occurrences of the annotation on      * fields and methods with a single parameter will be injected by Guice      * after the constructor and @Inject have been processed.      *       * @param annotationType      *            the annotation class used to define the injection point      * @param annotationMemberProviderType      *            the type of the annotation member provider which can be      *            instantiated and injected by guice      * @param<A>      *            the annotation type used as the injection point      */
end_comment

begin_function
DECL|method|bindAnnotationInjector ( Class<A> annotationType, Class<? extends AnnotationMemberProvider> annotationMemberProviderType)
specifier|protected
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|void
name|bindAnnotationInjector
parameter_list|(
name|Class
argument_list|<
name|A
argument_list|>
name|annotationType
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|AnnotationMemberProvider
argument_list|>
name|annotationMemberProviderType
parameter_list|)
block|{
name|bindAnnotationInjector
argument_list|(
name|annotationType
argument_list|,
name|encounterProvider
argument_list|(
name|annotationMemberProviderType
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|bindAnnotationInjector ( final Class<A> annotationType, final EncounterProvider<AnnotationMemberProvider> memberProviderProvider)
specifier|private
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|void
name|bindAnnotationInjector
parameter_list|(
specifier|final
name|Class
argument_list|<
name|A
argument_list|>
name|annotationType
parameter_list|,
specifier|final
name|EncounterProvider
argument_list|<
name|AnnotationMemberProvider
argument_list|>
name|memberProviderProvider
parameter_list|)
block|{
name|bindListener
argument_list|(
name|any
argument_list|()
argument_list|,
operator|new
name|TypeListener
argument_list|()
block|{
name|Provider
argument_list|<
name|?
extends|extends
name|AnnotationMemberProvider
argument_list|>
name|providerProvider
decl_stmt|;
specifier|public
parameter_list|<
name|I
parameter_list|>
name|void
name|hear
parameter_list|(
name|TypeLiteral
argument_list|<
name|I
argument_list|>
name|injectableType
parameter_list|,
name|TypeEncounter
argument_list|<
name|I
argument_list|>
name|encounter
parameter_list|)
block|{
name|Set
argument_list|<
name|Field
argument_list|>
name|boundFields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|MethodKey
argument_list|,
name|Method
argument_list|>
name|boundMethods
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|startType
init|=
name|injectableType
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|startType
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Object
operator|.
name|class
condition|)
block|{
break|break;
block|}
name|Field
index|[]
name|fields
init|=
name|type
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|boundFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|bindAnnotationInjectorToField
argument_list|(
name|encounter
argument_list|,
name|startType
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|Method
index|[]
name|methods
init|=
name|type
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|methods
control|)
block|{
name|MethodKey
name|key
init|=
operator|new
name|MethodKey
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|boundMethods
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|boundMethods
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|bindAnnotationInjectionToMember
argument_list|(
name|encounter
argument_list|,
name|startType
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|supertype
init|=
name|type
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|supertype
operator|==
name|Object
operator|.
name|class
condition|)
block|{
break|break;
block|}
name|startType
operator|=
name|startType
operator|.
name|getSupertype
argument_list|(
name|supertype
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
parameter_list|<
name|I
parameter_list|>
name|void
name|bindAnnotationInjectionToMember
parameter_list|(
specifier|final
name|TypeEncounter
argument_list|<
name|I
argument_list|>
name|encounter
parameter_list|,
specifier|final
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|)
block|{
comment|// TODO lets exclude methods with @Inject?
specifier|final
name|A
name|annotation
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|annotationType
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|providerProvider
operator|==
literal|null
condition|)
block|{
name|providerProvider
operator|=
name|memberProviderProvider
operator|.
name|get
argument_list|(
name|encounter
argument_list|)
expr_stmt|;
block|}
name|encounter
operator|.
name|register
argument_list|(
operator|new
name|MembersInjector
argument_list|<
name|I
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|injectMembers
parameter_list|(
name|I
name|injectee
parameter_list|)
block|{
name|AnnotationMemberProvider
name|provider
init|=
name|providerProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
init|=
name|getParameterType
argument_list|(
name|type
argument_list|,
name|method
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|provider
operator|.
name|provide
argument_list|(
name|annotation
argument_list|,
name|type
argument_list|,
name|method
argument_list|,
name|paramType
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|checkInjectedValueType
argument_list|(
name|value
argument_list|,
name|paramType
argument_list|,
name|encounter
argument_list|)
expr_stmt|;
comment|// if we have a null value then assume the
comment|// injection point cannot be satisfied
comment|// which is the spring @Autowired way of doing
comment|// things
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
operator|!
name|provider
operator|.
name|isNullParameterAllowed
argument_list|(
name|annotation
argument_list|,
name|method
argument_list|,
name|paramType
argument_list|,
name|i
argument_list|)
condition|)
block|{
return|return;
block|}
name|values
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
try|try
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|injectee
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Failed to inject method "
operator|+
name|method
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ie
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|ie
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Failed to inject method "
operator|+
name|method
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
parameter_list|<
name|I
parameter_list|>
name|void
name|bindAnnotationInjectorToField
parameter_list|(
specifier|final
name|TypeEncounter
argument_list|<
name|I
argument_list|>
name|encounter
parameter_list|,
specifier|final
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|)
block|{
comment|// TODO lets exclude fields with @Inject?
specifier|final
name|A
name|annotation
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|annotationType
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|providerProvider
operator|==
literal|null
condition|)
block|{
name|providerProvider
operator|=
name|memberProviderProvider
operator|.
name|get
argument_list|(
name|encounter
argument_list|)
expr_stmt|;
block|}
name|encounter
operator|.
name|register
argument_list|(
operator|new
name|InjectionListener
argument_list|<
name|I
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|afterInjection
parameter_list|(
name|I
name|injectee
parameter_list|)
block|{
name|AnnotationMemberProvider
name|provider
init|=
name|providerProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|provider
operator|.
name|provide
argument_list|(
name|annotation
argument_list|,
name|type
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|checkInjectedValueType
argument_list|(
name|value
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|encounter
argument_list|)
expr_stmt|;
try|try
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|injectee
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Failed to inject field "
operator|+
name|field
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getParameterType (TypeLiteral<?> type, Method method, int i)
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getParameterType
parameter_list|(
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|>
name|list
init|=
name|type
operator|.
name|getParameterTypes
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|typeLiteral
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
init|=
name|typeLiteral
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramType
operator|==
name|Object
operator|.
name|class
operator|||
name|paramType
operator|.
name|isArray
argument_list|()
operator|&&
name|paramType
operator|.
name|getComponentType
argument_list|()
operator|==
name|Object
operator|.
name|class
condition|)
block|{
comment|// if the TypeLiteral ninja doesn't work, lets fall back to the
comment|// actual type
name|paramType
operator|=
name|parameterTypes
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|paramType
return|;
block|}
end_function

begin_comment
comment|/*      * protected void bindCloseHook() { bindListener(any(), new Listener() {      * public<I> void hear(InjectableType<I> injectableType, Encounter<I>      * encounter) { encounter.registerPostInjectListener(new      * InjectionListener<I>() { public void afterInjection(I injectee) {      *       * } }); } }); }      */
end_comment

begin_comment
comment|/**      * Returns true if the value to be injected is of the correct type otherwise      * an error is raised on the encounter and false is returned      */
end_comment

begin_function
DECL|method|checkInjectedValueType (Object value, Class<?> type, TypeEncounter<I> encounter)
specifier|protected
parameter_list|<
name|I
parameter_list|>
name|void
name|checkInjectedValueType
parameter_list|(
name|Object
name|value
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|TypeEncounter
argument_list|<
name|I
argument_list|>
name|encounter
parameter_list|)
block|{
comment|// TODO check the type
block|}
end_function

begin_comment
comment|/**      * A helper method to bind the given type with the binding annotation.      *       * This allows you to replace this code      *<code> bind(Key.get(MyType.class, SomeAnnotation.class))      *</code>      *       * with this<code> bind(KMyType.class, SomeAnnotation.class)</code>      */
end_comment

begin_function
DECL|method|bind (Class<T> type, Class<? extends Annotation> annotationType)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|LinkedBindingBuilder
argument_list|<
name|T
argument_list|>
name|bind
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
return|return
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|type
argument_list|,
name|annotationType
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * A helper method to bind the given type with the binding annotation.      *       * This allows you to replace this code      *<code> bind(Key.get(MyType.class, someAnnotation))      *</code>      *       * with this<code> bind(KMyType.class, someAnnotation)</code>      */
end_comment

begin_function
DECL|method|bind (Class<T> type, Annotation annotation)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|LinkedBindingBuilder
argument_list|<
name|T
argument_list|>
name|bind
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Annotation
name|annotation
parameter_list|)
block|{
return|return
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|type
argument_list|,
name|annotation
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * A helper method to bind the given type with the      * {@link com.google.inject.name.Named} annotation of the given text value.      *       * This allows you to replace this code      *<code> bind(Key.get(MyType.class, Names.named("myName")))      *</code>      *       * with this<code> bind(KMyType.class, "myName")</code>      */
end_comment

begin_function
DECL|method|bind (Class<T> type, String namedText)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|LinkedBindingBuilder
argument_list|<
name|T
argument_list|>
name|bind
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|String
name|namedText
parameter_list|)
block|{
return|return
name|bind
argument_list|(
name|type
argument_list|,
name|Names
operator|.
name|named
argument_list|(
name|namedText
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * A helper method which binds a named instance to a key defined by the      * given name and the instances type. So this method is short hand for      *       *<code> bind(instance.getClass(), name).toInstance(instance);</code>      */
end_comment

begin_function
DECL|method|bindInstance (String name, T instance)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|void
name|bindInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|instance
parameter_list|)
block|{
comment|// TODO not sure the generics ninja to avoid this cast
name|Class
argument_list|<
name|T
argument_list|>
name|aClass
init|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|bind
argument_list|(
name|aClass
argument_list|,
name|name
argument_list|)
operator|.
name|toInstance
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

