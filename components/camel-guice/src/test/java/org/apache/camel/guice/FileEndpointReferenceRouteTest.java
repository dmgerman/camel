begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|inject
operator|.
name|Injectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jndi
operator|.
name|GuiceInitialContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
operator|.
name|jndi
operator|.
name|JndiBind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FileEndpointReferenceRouteTest
specifier|public
class|class
name|FileEndpointReferenceRouteTest
extends|extends
name|Assert
block|{
DECL|class|RouteInstaller
specifier|public
specifier|static
class|class
name|RouteInstaller
extends|extends
name|RouteBuilder
block|{
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// lets add some other route builders
name|includeRoutes
argument_list|(
operator|new
name|MyConfigurableRoute
argument_list|(
name|endpoint
argument_list|(
literal|"file://src/test/resources?noop=true&filter=#fileFilter"
argument_list|)
argument_list|,
name|endpoint
argument_list|(
literal|"direct:b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyFileFilter
specifier|public
specifier|static
class|class
name|MyFileFilter
parameter_list|<
name|T
parameter_list|>
implements|implements
name|GenericFileFilter
argument_list|<
name|T
argument_list|>
block|{
DECL|method|accept (GenericFile<T> file)
specifier|public
name|boolean
name|accept
parameter_list|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|)
block|{
comment|// we only want report files
return|return
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"report"
argument_list|)
return|;
block|}
block|}
DECL|class|MyModule
specifier|public
specifier|static
class|class
name|MyModule
extends|extends
name|CamelModuleWithRouteTypes
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|MyModule ()
specifier|public
name|MyModule
parameter_list|()
block|{
name|super
argument_list|(
name|RouteInstaller
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Provides
annotation|@
name|JndiBind
argument_list|(
literal|"fileFilter"
argument_list|)
DECL|method|getfileFilter ()
specifier|public
name|GenericFileFilter
argument_list|<
name|?
argument_list|>
name|getfileFilter
parameter_list|()
block|{
return|return
operator|new
name|MyFileFilter
argument_list|<
name|Object
argument_list|>
argument_list|()
return|;
block|}
block|}
DECL|method|assertCamelContextRunningThenCloseInjector (Injector injector)
specifier|public
specifier|static
name|void
name|assertCamelContextRunningThenCloseInjector
parameter_list|(
name|Injector
name|injector
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|camelContext
argument_list|,
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
argument_list|(
name|GuiceCamelContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|GuiceCamelContext
name|guiceContext
init|=
operator|(
name|GuiceCamelContext
operator|)
name|camelContext
decl_stmt|;
name|assertTrue
argument_list|(
literal|"is started!"
argument_list|,
name|guiceContext
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Injectors
operator|.
name|close
argument_list|(
name|injector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|runTest ()
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|GuiceInitialContextFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Injectors
operator|.
name|MODULE_CLASS_NAMES
argument_list|,
name|MyModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|InitialContext
name|context
init|=
operator|new
name|InitialContext
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
operator|(
name|Injector
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|Injector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Found injector"
argument_list|,
name|injector
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|context
operator|.
name|lookup
argument_list|(
literal|"fileFilter"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have found a value for foo!"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertCamelContextRunningThenCloseInjector
argument_list|(
name|injector
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

