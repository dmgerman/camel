begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.guice
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|guice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|matcher
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|guiceyfruit
operator|.
name|Injectors
import|;
end_import

begin_comment
comment|/**  * Lets use a custom CamelModule to perform explicit binding of route builders  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|GuiceRouteWithNamedKeysTest
specifier|public
class|class
name|GuiceRouteWithNamedKeysTest
extends|extends
name|TestCase
block|{
DECL|class|MyModule
specifier|public
specifier|static
class|class
name|MyModule
extends|extends
name|CamelModuleWithMatchingRoutes
block|{
annotation|@
name|Provides
annotation|@
name|Named
argument_list|(
literal|"foo"
argument_list|)
DECL|method|createRoute1 ()
specifier|protected
name|MyConfigurableRoute2
name|createRoute1
parameter_list|()
block|{
return|return
operator|new
name|MyConfigurableRoute2
argument_list|(
literal|"direct:a"
argument_list|,
literal|"direct:b"
argument_list|)
return|;
block|}
block|}
DECL|method|testGuice ()
specifier|public
name|void
name|testGuice
parameter_list|()
throws|throws
name|Exception
block|{
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|MyModule
argument_list|()
argument_list|)
decl_stmt|;
name|MyConfigurableRoute2
name|instance
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|MyConfigurableRoute2
operator|.
name|class
argument_list|,
name|Names
operator|.
name|named
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"should have found a key for 'foo'"
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found instance: "
operator|+
name|instance
argument_list|)
expr_stmt|;
comment|//List<Binding<RouteBuilder>> list = injector.findBindingsByType(TypeLiteral.get(RouteBuilder.class));
name|Collection
argument_list|<
name|RouteBuilder
argument_list|>
name|list
init|=
name|Injectors
operator|.
name|getInstancesOf
argument_list|(
name|injector
argument_list|,
name|RouteBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RouteBuilder List: "
operator|+
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"route builder list: "
operator|+
name|list
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|Injectors
operator|.
name|getInstancesOf
argument_list|(
name|injector
argument_list|,
name|Matchers
operator|.
name|subclassesOf
argument_list|(
name|RouteBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RouteBuilder List: "
operator|+
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"route builder list: "
operator|+
name|list
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|/*          list = Injectors.getInstancesOf(injector, Matchers.subclassesOf(RouteBuilder.class).and(Matchers.annotatedWith(Names.named("foo"))));         System.out.println("RouteBuilder List: " + list);          assertEquals("route builder list: " + list, 1, list.size());          list = Injectors.getInstancesOf(injector, Matchers.subclassesOf(RouteBuilder.class).and(Matchers.annotatedWith(Names.named("bar"))));         System.out.println("RouteBuilder List: " + list);          assertEquals("route builder list: " + list, 0, list.size()); */
name|CamelContext
name|camelContext
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|camelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

