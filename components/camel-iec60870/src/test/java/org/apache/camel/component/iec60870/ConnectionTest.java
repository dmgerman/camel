begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iec60870
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|AssertionClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|asdu
operator|.
name|types
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|server
operator|.
name|data
operator|.
name|model
operator|.
name|WriteModel
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ConnectionTest
specifier|public
class|class
name|ConnectionTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|DIRECT_SEND_S_1
specifier|private
specifier|static
specifier|final
name|String
name|DIRECT_SEND_S_1
init|=
literal|"direct:sendServer1"
decl_stmt|;
DECL|field|DIRECT_SEND_C_1
specifier|private
specifier|static
specifier|final
name|String
name|DIRECT_SEND_C_1
init|=
literal|"direct:sendClient1"
decl_stmt|;
DECL|field|MOCK_CLIENT_1
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_CLIENT_1
init|=
literal|"mock:testClient1"
decl_stmt|;
DECL|field|MOCK_CLIENT_2
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_CLIENT_2
init|=
literal|"mock:testClient2"
decl_stmt|;
DECL|field|MOCK_SERVER_1
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_SERVER_1
init|=
literal|"mock:testServer1"
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
name|DIRECT_SEND_S_1
argument_list|)
DECL|field|producerServer1
specifier|protected
name|ProducerTemplate
name|producerServer1
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
name|DIRECT_SEND_C_1
argument_list|)
DECL|field|producerClient1
specifier|protected
name|ProducerTemplate
name|producerClient1
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
name|MOCK_CLIENT_1
argument_list|)
DECL|field|testClient1Endpoint
specifier|protected
name|MockEndpoint
name|testClient1Endpoint
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
name|MOCK_CLIENT_2
argument_list|)
DECL|field|testClient2Endpoint
specifier|protected
name|MockEndpoint
name|testClient2Endpoint
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
name|MOCK_SERVER_1
argument_list|)
DECL|field|testServer1Endpoint
specifier|protected
name|MockEndpoint
name|testServer1Endpoint
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|port
init|=
name|Ports
operator|.
name|pickServerPort
argument_list|()
decl_stmt|;
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|DIRECT_SEND_S_1
argument_list|)
operator|.
name|toF
argument_list|(
literal|"iec60870-server:localhost:%s/00-00-00-00-01"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"iec60870-client:localhost:%s/00-00-00-00-01"
argument_list|,
name|port
argument_list|)
operator|.
name|to
argument_list|(
name|MOCK_CLIENT_1
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"iec60870-client:localhost:%s/00-00-00-00-02"
argument_list|,
name|port
argument_list|)
operator|.
name|to
argument_list|(
name|MOCK_CLIENT_2
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|DIRECT_SEND_C_1
argument_list|)
operator|.
name|toF
argument_list|(
literal|"iec60870-client:localhost:%s/00-00-00-01-01"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"iec60870-server:localhost:%s/00-00-00-01-01"
argument_list|,
name|port
argument_list|)
operator|.
name|to
argument_list|(
name|MOCK_SERVER_1
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testFloat1 ()
specifier|public
name|void
name|testFloat1
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|producerServer1
operator|.
name|sendBody
argument_list|(
literal|1.23f
argument_list|)
expr_stmt|;
comment|// expect - count
name|this
operator|.
name|testClient1Endpoint
operator|.
name|setExpectedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|testClient2Endpoint
operator|.
name|setExpectedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// expect
name|expectValue
argument_list|(
name|testClient1Endpoint
operator|.
name|message
argument_list|(
literal|0
argument_list|)
argument_list|,
name|assertGoodValue
argument_list|(
literal|1.23f
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert
name|assertMockEndpointsSatisfied
argument_list|(
literal|1_000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoolean1 ()
specifier|public
name|void
name|testBoolean1
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|producerServer1
operator|.
name|sendBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// expect - count
name|this
operator|.
name|testClient1Endpoint
operator|.
name|setExpectedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|testClient2Endpoint
operator|.
name|setExpectedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// expect
name|expectValue
argument_list|(
name|testClient1Endpoint
operator|.
name|message
argument_list|(
literal|0
argument_list|)
argument_list|,
name|assertGoodValue
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert
name|assertMockEndpointsSatisfied
argument_list|(
literal|1_000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommand1 ()
specifier|public
name|void
name|testCommand1
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1_000
argument_list|)
expr_stmt|;
name|this
operator|.
name|producerClient1
operator|.
name|sendBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// expect - count
name|this
operator|.
name|testServer1Endpoint
operator|.
name|setExpectedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// expect
name|expectRequest
argument_list|(
name|testServer1Endpoint
operator|.
name|message
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expectRequest
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert
name|assertMockEndpointsSatisfied
argument_list|(
literal|2_000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|testServer1Endpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|expectValue (AssertionClause message, Consumer<Value<?>> consumer)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|expectValue
parameter_list|(
name|AssertionClause
name|message
parameter_list|,
name|Consumer
argument_list|<
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
name|consumer
parameter_list|)
block|{
name|message
operator|.
name|predicate
argument_list|(
name|exchange
lambda|->
block|{
specifier|final
name|Value
argument_list|<
name|?
argument_list|>
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Value
operator|.
name|class
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|expectRequest (AssertionClause message, Consumer<Request<?>> consumer)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|expectRequest
parameter_list|(
name|AssertionClause
name|message
parameter_list|,
name|Consumer
argument_list|<
name|Request
argument_list|<
name|?
argument_list|>
argument_list|>
name|consumer
parameter_list|)
block|{
name|message
operator|.
name|predicate
argument_list|(
name|exchange
lambda|->
block|{
specifier|final
name|Request
argument_list|<
name|?
argument_list|>
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Request
operator|.
name|class
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|assertGoodValue (final Object expectedValue)
specifier|public
specifier|static
name|Consumer
argument_list|<
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
name|assertGoodValue
parameter_list|(
specifier|final
name|Object
name|expectedValue
parameter_list|)
block|{
return|return
name|value
lambda|->
block|{
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|.
name|getQualityInformation
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|.
name|getQualityInformation
argument_list|()
operator|.
name|isTopical
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|value
operator|.
name|getQualityInformation
argument_list|()
operator|.
name|isBlocked
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|value
operator|.
name|getQualityInformation
argument_list|()
operator|.
name|isSubstituted
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|;
block|}
DECL|method|expectRequest (final Object expectedValue)
specifier|private
name|Consumer
argument_list|<
name|Request
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectRequest
parameter_list|(
specifier|final
name|Object
name|expectedValue
parameter_list|)
block|{
return|return
name|value
lambda|->
block|{
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|;
block|}
block|}
end_class

end_unit

