begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iec60870
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ConnectionIdTest
specifier|public
class|class
name|ConnectionIdTest
block|{
annotation|@
name|Test
DECL|method|testNotEqual1 ()
specifier|public
name|void
name|testNotEqual1
parameter_list|()
block|{
name|ConnectionId
name|id1
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
literal|1202
argument_list|,
literal|"id1"
argument_list|)
decl_stmt|;
name|ConnectionId
name|id2
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
literal|1202
argument_list|,
literal|"id2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Must be different"
argument_list|,
name|id1
operator|.
name|equals
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotEqual2 ()
specifier|public
name|void
name|testNotEqual2
parameter_list|()
block|{
name|ConnectionId
name|id1
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host1"
argument_list|,
literal|1202
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|ConnectionId
name|id2
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host2"
argument_list|,
literal|1202
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Must be different"
argument_list|,
name|id1
operator|.
name|equals
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotEqual3 ()
specifier|public
name|void
name|testNotEqual3
parameter_list|()
block|{
name|ConnectionId
name|id1
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
literal|1202_1
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|ConnectionId
name|id2
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
literal|1202_2
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Must be different"
argument_list|,
name|id1
operator|.
name|equals
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testIllegal1 ()
specifier|public
name|void
name|testIllegal1
parameter_list|()
block|{
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetters ()
specifier|public
name|void
name|testGetters
parameter_list|()
block|{
name|ConnectionId
name|id
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
literal|1202
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host"
argument_list|,
name|id
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1202
argument_list|,
name|id
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|id
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEqual1 ()
specifier|public
name|void
name|testEqual1
parameter_list|()
block|{
name|ConnectionId
name|id1
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
literal|1202
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|ConnectionId
name|id2
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
literal|1202
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Must be equal"
argument_list|,
name|id1
operator|.
name|equals
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEqual2 ()
specifier|public
name|void
name|testEqual2
parameter_list|()
block|{
name|ConnectionId
name|id1
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
literal|1202
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|ConnectionId
name|id2
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"host"
argument_list|,
literal|1202
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Hash code must be equal"
argument_list|,
name|id1
operator|.
name|hashCode
argument_list|()
operator|==
name|id2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

