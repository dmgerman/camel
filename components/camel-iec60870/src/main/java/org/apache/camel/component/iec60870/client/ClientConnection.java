begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iec60870.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|DiscardAckModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|ObjectAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|asdu
operator|.
name|types
operator|.
name|ASDUAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|asdu
operator|.
name|types
operator|.
name|InformationObjectAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|asdu
operator|.
name|types
operator|.
name|QualifierOfInterrogation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|asdu
operator|.
name|types
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|client
operator|.
name|AutoConnectClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|client
operator|.
name|AutoConnectClient
operator|.
name|ModulesFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|client
operator|.
name|AutoConnectClient
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|client
operator|.
name|AutoConnectClient
operator|.
name|StateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|client
operator|.
name|data
operator|.
name|AbstractDataProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|client
operator|.
name|data
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|client
operator|.
name|data
operator|.
name|DataModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|client
operator|.
name|data
operator|.
name|DataModuleContext
import|;
end_import

begin_class
DECL|class|ClientConnection
specifier|public
class|class
name|ClientConnection
block|{
annotation|@
name|FunctionalInterface
DECL|interface|ValueListener
specifier|public
interface|interface
name|ValueListener
block|{
DECL|method|update (ObjectAddress address, Value<?> value)
name|void
name|update
parameter_list|(
name|ObjectAddress
name|address
parameter_list|,
name|Value
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
function_decl|;
block|}
DECL|field|stateListener
specifier|private
specifier|final
name|StateListener
name|stateListener
init|=
operator|new
name|StateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stateChanged
parameter_list|(
specifier|final
name|State
name|state
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
block|{         }
block|}
decl_stmt|;
DECL|field|dataHandler
specifier|private
specifier|final
name|DataHandler
name|dataHandler
init|=
operator|new
name|AbstractDataProcessor
argument_list|()
block|{
comment|/**          * Called when the connection was established          */
annotation|@
name|Override
specifier|public
name|void
name|activated
parameter_list|(
specifier|final
name|DataModuleContext
name|dataModuleContext
parameter_list|,
specifier|final
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
name|dataModuleContext
operator|.
name|requestStartData
argument_list|()
expr_stmt|;
name|dataModuleContext
operator|.
name|startInterrogation
argument_list|(
name|ASDUAddress
operator|.
name|BROADCAST
argument_list|,
name|QualifierOfInterrogation
operator|.
name|GLOBAL
argument_list|)
expr_stmt|;
block|}
comment|/**          * Called when the start data was accepted          */
annotation|@
name|Override
specifier|public
name|void
name|started
parameter_list|()
block|{         }
comment|/**          * Called when the connection broke          */
annotation|@
name|Override
specifier|public
name|void
name|disconnected
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|protected
name|void
name|fireEntry
parameter_list|(
specifier|final
name|ASDUAddress
name|asduAddress
parameter_list|,
specifier|final
name|InformationObjectAddress
name|address
parameter_list|,
specifier|final
name|Value
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
name|ClientConnection
operator|.
name|this
operator|.
name|handleData
argument_list|(
name|ObjectAddress
operator|.
name|valueOf
argument_list|(
name|asduAddress
argument_list|,
name|address
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|lastValue
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectAddress
argument_list|,
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
name|lastValue
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|listeners
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectAddress
argument_list|,
name|ValueListener
argument_list|>
name|listeners
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|host
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|ClientOptions
name|options
decl_stmt|;
DECL|field|client
specifier|private
name|AutoConnectClient
name|client
decl_stmt|;
DECL|method|ClientConnection (final String host, final int port, final ClientOptions options)
specifier|public
name|ClientConnection
parameter_list|(
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|ClientOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
specifier|final
name|DataModule
name|dataModule
init|=
operator|new
name|DataModule
argument_list|(
name|this
operator|.
name|dataHandler
argument_list|,
name|this
operator|.
name|options
operator|.
name|getDataModuleOptions
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ModulesFactory
name|factory
init|=
parameter_list|()
lambda|->
name|Arrays
operator|.
name|asList
argument_list|(
name|dataModule
argument_list|,
operator|new
name|DiscardAckModule
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|client
operator|=
operator|new
name|AutoConnectClient
argument_list|(
name|this
operator|.
name|host
argument_list|,
name|this
operator|.
name|port
argument_list|,
name|this
operator|.
name|options
operator|.
name|getProtocolOptions
argument_list|()
argument_list|,
name|factory
argument_list|,
name|this
operator|.
name|stateListener
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|handleData (final ObjectAddress address, final Value<?> value)
specifier|protected
specifier|synchronized
name|void
name|handleData
parameter_list|(
specifier|final
name|ObjectAddress
name|address
parameter_list|,
specifier|final
name|Value
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
name|this
operator|.
name|lastValue
operator|.
name|put
argument_list|(
name|address
argument_list|,
name|value
argument_list|)
expr_stmt|;
specifier|final
name|ValueListener
name|listener
init|=
name|this
operator|.
name|listeners
operator|.
name|get
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|update
argument_list|(
name|address
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setListener (final ObjectAddress address, final ValueListener listener)
specifier|public
specifier|synchronized
name|void
name|setListener
parameter_list|(
specifier|final
name|ObjectAddress
name|address
parameter_list|,
specifier|final
name|ValueListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|listeners
operator|.
name|put
argument_list|(
name|address
argument_list|,
name|listener
argument_list|)
expr_stmt|;
specifier|final
name|Value
argument_list|<
name|?
argument_list|>
name|last
init|=
name|this
operator|.
name|lastValue
operator|.
name|get
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|update
argument_list|(
name|address
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeCommand (final Object command)
specifier|public
name|boolean
name|executeCommand
parameter_list|(
specifier|final
name|Object
name|command
parameter_list|)
block|{
return|return
name|this
operator|.
name|client
operator|.
name|writeCommand
argument_list|(
name|command
argument_list|)
return|;
block|}
block|}
end_class

end_unit

