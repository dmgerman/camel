begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iec60870
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|client
operator|.
name|ClientOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|ProtocolOptions
import|;
end_import

begin_class
DECL|class|AbstractIecComponent
specifier|public
specifier|abstract
class|class
name|AbstractIecComponent
parameter_list|<
name|T1
parameter_list|,
name|T2
extends|extends
name|BaseOptions
parameter_list|<
name|T2
parameter_list|>
parameter_list|>
extends|extends
name|DefaultComponent
block|{
DECL|field|connections
specifier|private
specifier|final
name|Map
argument_list|<
name|ConnectionId
argument_list|,
name|T1
argument_list|>
name|connections
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|connectionOptionsClazz
specifier|private
specifier|final
name|Class
argument_list|<
name|T2
argument_list|>
name|connectionOptionsClazz
decl_stmt|;
DECL|field|defaultConnectionOptions
specifier|private
name|T2
name|defaultConnectionOptions
decl_stmt|;
DECL|method|AbstractIecComponent (final Class<T2> connectionOptionsClazz, final T2 defaultConnectionOptions)
specifier|public
name|AbstractIecComponent
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T2
argument_list|>
name|connectionOptionsClazz
parameter_list|,
specifier|final
name|T2
name|defaultConnectionOptions
parameter_list|)
block|{
name|this
operator|.
name|connectionOptionsClazz
operator|=
name|connectionOptionsClazz
expr_stmt|;
name|this
operator|.
name|defaultConnectionOptions
operator|=
name|defaultConnectionOptions
expr_stmt|;
block|}
DECL|method|AbstractIecComponent (final Class<T2> connectionOptionsClazz, final T2 defaultConnectionOptions, final CamelContext context)
specifier|public
name|AbstractIecComponent
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T2
argument_list|>
name|connectionOptionsClazz
parameter_list|,
specifier|final
name|T2
name|defaultConnectionOptions
parameter_list|,
specifier|final
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionOptionsClazz
operator|=
name|connectionOptionsClazz
expr_stmt|;
name|this
operator|.
name|defaultConnectionOptions
operator|=
name|defaultConnectionOptions
expr_stmt|;
block|}
DECL|method|createConnection (ConnectionId id, T2 options)
specifier|protected
specifier|abstract
name|T1
name|createConnection
parameter_list|(
name|ConnectionId
name|id
parameter_list|,
name|T2
name|options
parameter_list|)
function_decl|;
comment|/**      * Default connection options      *      * @param defaultConnectionOptions the new default connection options, must      *            not be {@code null}      */
DECL|method|setDefaultConnectionOptions (final T2 defaultConnectionOptions)
specifier|protected
name|void
name|setDefaultConnectionOptions
parameter_list|(
specifier|final
name|T2
name|defaultConnectionOptions
parameter_list|)
block|{
name|this
operator|.
name|defaultConnectionOptions
operator|=
name|requireNonNull
argument_list|(
name|defaultConnectionOptions
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the default connection options      *      * @return the default connect options, never returns {@code null}      */
DECL|method|getDefaultConnectionOptions ()
specifier|protected
name|T2
name|getDefaultConnectionOptions
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultConnectionOptions
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (final String uri, final String remaining, final Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|String
name|remaining
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Create endpoint - uri: {}, remaining: {}, parameters: {}"
argument_list|,
name|uri
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
specifier|final
name|T1
name|connection
init|=
name|lookupConnection
argument_list|(
name|uri
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|ObjectAddress
name|address
init|=
name|parseAddress
argument_list|(
name|uri
argument_list|)
decl_stmt|;
return|return
name|createEndpoint
argument_list|(
name|uri
argument_list|,
name|connection
argument_list|,
name|address
argument_list|)
return|;
block|}
DECL|method|createEndpoint (String uri, T1 connection, ObjectAddress address)
specifier|protected
specifier|abstract
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|T1
name|connection
parameter_list|,
name|ObjectAddress
name|address
parameter_list|)
function_decl|;
DECL|method|parseOptions (final ConnectionId id, final Map<String, Object> parameters)
specifier|protected
name|T2
name|parseOptions
parameter_list|(
specifier|final
name|ConnectionId
name|id
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// test for provided connection options
specifier|final
name|Object
name|connectionOptions
init|=
name|parameters
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|PARAM_CONNECTION_OPTIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionOptions
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|this
operator|.
name|connectionOptionsClazz
operator|.
name|cast
argument_list|(
name|connectionOptions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"'%s' must by of type %s"
argument_list|,
name|Constants
operator|.
name|PARAM_CONNECTION_OPTIONS
argument_list|,
name|ClientOptions
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// construct new default set
specifier|final
name|T2
name|options
init|=
name|this
operator|.
name|defaultConnectionOptions
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// apply protocolOptions
if|if
condition|(
name|parameters
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|PARAM_PROTOCOL_OPTIONS
argument_list|)
operator|instanceof
name|ProtocolOptions
condition|)
block|{
name|options
operator|.
name|setProtocolOptions
argument_list|(
operator|(
name|ProtocolOptions
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|PARAM_PROTOCOL_OPTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// apply dataModuleOptions
name|applyDataModuleOptions
argument_list|(
name|options
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// apply parameters to connection options
name|setProperties
argument_list|(
name|options
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// return result
return|return
name|options
return|;
block|}
DECL|method|applyDataModuleOptions (T2 options, Map<String, Object> parameters)
specifier|protected
specifier|abstract
name|void
name|applyDataModuleOptions
parameter_list|(
name|T2
name|options
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
function_decl|;
DECL|method|lookupConnection (final String fullUri, final Map<String, Object> parameters)
specifier|private
name|T1
name|lookupConnection
parameter_list|(
specifier|final
name|String
name|fullUri
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"parse connection - '{}'"
argument_list|,
name|fullUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|fullUri
operator|==
literal|null
operator|||
name|fullUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid URI: "
operator|+
name|fullUri
argument_list|)
throw|;
block|}
specifier|final
name|ConnectionId
name|id
init|=
name|parseConnectionId
argument_list|(
name|fullUri
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"parse connection - fullUri: {} -> {}"
argument_list|,
name|fullUri
argument_list|,
name|id
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Locating connection - {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|T1
name|connection
init|=
name|this
operator|.
name|connections
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Result - {} -> {}"
argument_list|,
name|id
argument_list|,
name|connection
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
specifier|final
name|T2
name|options
init|=
name|parseOptions
argument_list|(
name|id
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Creating new connection: {}"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|(
name|id
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|connections
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
block|}
DECL|method|parseConnectionId (final String fullUri, final Map<String, Object> parameters)
specifier|private
specifier|static
name|ConnectionId
name|parseConnectionId
parameter_list|(
specifier|final
name|String
name|fullUri
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
specifier|final
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|fullUri
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|connectionId
init|=
name|parameters
operator|.
name|get
argument_list|(
literal|"connectionId"
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConnectionId
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|uri
operator|.
name|getPort
argument_list|()
argument_list|,
name|connectionId
operator|instanceof
name|String
condition|?
operator|(
name|String
operator|)
name|connectionId
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|parseAddress (final String fullUri)
specifier|private
specifier|static
name|ObjectAddress
name|parseAddress
parameter_list|(
specifier|final
name|String
name|fullUri
parameter_list|)
block|{
specifier|final
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|fullUri
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|replaceAll
argument_list|(
literal|"^\\/+"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|ObjectAddress
operator|.
name|valueOf
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

