begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iec60870
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|ASDUAddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|CauseOfTransmissionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|InformationObjectAddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|ProtocolOptions
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|BaseOptions
specifier|public
specifier|abstract
class|class
name|BaseOptions
parameter_list|<
name|T
extends|extends
name|BaseOptions
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
comment|/**      * Protocol options      */
annotation|@
name|UriParam
argument_list|(
name|javaType
operator|=
literal|"org.eclipse.neoscada.protocol.iec60870.ProtocolOptions"
argument_list|)
DECL|field|protocolOptions
specifier|private
name|ProtocolOptions
operator|.
name|Builder
name|protocolOptions
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * The common ASDU address size.      *<p>      * May be either {@code SIZE_1} or {@code SIZE_2}.      *</p>      */
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"SIZE_1, SIZE_2"
argument_list|,
name|label
operator|=
literal|"connection"
argument_list|)
DECL|field|adsuAddressType
specifier|private
name|ASDUAddressType
name|adsuAddressType
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * The information address size.      *<p>      * May be either {@code SIZE_1}, {@code SIZE_2} or {@code SIZE_3}.      *</p>      */
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"SIZE_1, SIZE_2, SIZE_3"
argument_list|,
name|label
operator|=
literal|"connection"
argument_list|)
DECL|field|informationObjectAddressType
specifier|private
name|InformationObjectAddressType
name|informationObjectAddressType
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * The cause of transmission type.      *<p>      * May be either {@code SIZE_1} or {@code SIZE_2}.      *</p>      */
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"SIZE_1, SIZE_2"
argument_list|,
name|label
operator|=
literal|"connection"
argument_list|)
DECL|field|causeOfTransmissionType
specifier|private
name|CauseOfTransmissionType
name|causeOfTransmissionType
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * The timezone to use.      *<p>      * May be any Java time zone string      *</p>      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"data"
argument_list|,
name|defaultValue
operator|=
literal|"UTC"
argument_list|)
DECL|field|timeZone
specifier|private
name|TimeZone
name|timeZone
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * Whether to ignore or respect DST      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"data"
argument_list|)
DECL|field|ignoreDaylightSavingTime
specifier|private
name|boolean
name|ignoreDaylightSavingTime
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * Timeout T1 in milliseconds.      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"connection"
argument_list|,
name|defaultValue
operator|=
literal|"15000"
argument_list|)
DECL|field|timeout1
specifier|private
name|int
name|timeout1
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * Timeout T2 in milliseconds.      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"connection"
argument_list|,
name|defaultValue
operator|=
literal|"10000"
argument_list|)
DECL|field|timeout2
specifier|private
name|int
name|timeout2
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * Timeout T3 in milliseconds.      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"connection"
argument_list|,
name|defaultValue
operator|=
literal|"20000"
argument_list|)
DECL|field|timeout3
specifier|private
name|int
name|timeout3
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * Parameter "K" - Maximum number of un-acknowledged messages.      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"connection"
argument_list|,
name|defaultValue
operator|=
literal|"15"
argument_list|)
DECL|field|maxUnacknowledged
specifier|private
name|short
name|maxUnacknowledged
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * Parameter "W" - Acknowledgment window.      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"connection"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|acknowledgeWindow
specifier|private
name|short
name|acknowledgeWindow
decl_stmt|;
DECL|method|BaseOptions ()
specifier|public
name|BaseOptions
parameter_list|()
block|{
name|this
operator|.
name|protocolOptions
operator|=
operator|new
name|ProtocolOptions
operator|.
name|Builder
argument_list|()
expr_stmt|;
block|}
DECL|method|BaseOptions (final ProtocolOptions protocolOptions)
specifier|public
name|BaseOptions
parameter_list|(
specifier|final
name|ProtocolOptions
name|protocolOptions
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|protocolOptions
argument_list|)
expr_stmt|;
name|this
operator|.
name|protocolOptions
operator|=
operator|new
name|ProtocolOptions
operator|.
name|Builder
argument_list|(
name|protocolOptions
argument_list|)
expr_stmt|;
block|}
DECL|method|setProtocolOptions (final ProtocolOptions protocolOptions)
specifier|public
name|void
name|setProtocolOptions
parameter_list|(
specifier|final
name|ProtocolOptions
name|protocolOptions
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|protocolOptions
argument_list|)
expr_stmt|;
name|this
operator|.
name|protocolOptions
operator|=
operator|new
name|ProtocolOptions
operator|.
name|Builder
argument_list|(
name|protocolOptions
argument_list|)
expr_stmt|;
block|}
DECL|method|getProtocolOptions ()
specifier|public
name|ProtocolOptions
name|getProtocolOptions
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|copy ()
specifier|public
specifier|abstract
name|T
name|copy
parameter_list|()
function_decl|;
comment|// wrapper methods - ProtocolOptions
DECL|method|getTimeout1 ()
specifier|public
name|int
name|getTimeout1
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|getTimeout1
argument_list|()
return|;
block|}
DECL|method|setTimeout1 (final int timeout1)
specifier|public
name|void
name|setTimeout1
parameter_list|(
specifier|final
name|int
name|timeout1
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setTimeout1
argument_list|(
name|timeout1
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimeout2 ()
specifier|public
name|int
name|getTimeout2
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|getTimeout2
argument_list|()
return|;
block|}
DECL|method|setTimeout2 (final int timeout2)
specifier|public
name|void
name|setTimeout2
parameter_list|(
specifier|final
name|int
name|timeout2
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setTimeout2
argument_list|(
name|timeout2
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimeout3 ()
specifier|public
name|int
name|getTimeout3
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|getTimeout3
argument_list|()
return|;
block|}
DECL|method|setTimeout3 (final int timeout3)
specifier|public
name|void
name|setTimeout3
parameter_list|(
specifier|final
name|int
name|timeout3
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setTimeout3
argument_list|(
name|timeout3
argument_list|)
expr_stmt|;
block|}
DECL|method|getAcknowledgeWindow ()
specifier|public
name|short
name|getAcknowledgeWindow
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|getAcknowledgeWindow
argument_list|()
return|;
block|}
DECL|method|setAcknowledgeWindow (final short acknowledgeWindow)
specifier|public
name|void
name|setAcknowledgeWindow
parameter_list|(
specifier|final
name|short
name|acknowledgeWindow
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setAcknowledgeWindow
argument_list|(
name|acknowledgeWindow
argument_list|)
expr_stmt|;
block|}
DECL|method|getMaxUnacknowledged ()
specifier|public
name|short
name|getMaxUnacknowledged
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|getMaxUnacknowledged
argument_list|()
return|;
block|}
DECL|method|setMaxUnacknowledged (final short maxUnacknowledged)
specifier|public
name|void
name|setMaxUnacknowledged
parameter_list|(
specifier|final
name|short
name|maxUnacknowledged
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setMaxUnacknowledged
argument_list|(
name|maxUnacknowledged
argument_list|)
expr_stmt|;
block|}
DECL|method|getAdsuAddressType ()
specifier|public
name|ASDUAddressType
name|getAdsuAddressType
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|getAdsuAddressType
argument_list|()
return|;
block|}
DECL|method|setAdsuAddressType (final ASDUAddressType adsuAddressType)
specifier|public
name|void
name|setAdsuAddressType
parameter_list|(
specifier|final
name|ASDUAddressType
name|adsuAddressType
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setAdsuAddressType
argument_list|(
name|adsuAddressType
argument_list|)
expr_stmt|;
block|}
DECL|method|getInformationObjectAddressType ()
specifier|public
name|InformationObjectAddressType
name|getInformationObjectAddressType
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|getInformationObjectAddressType
argument_list|()
return|;
block|}
DECL|method|setInformationObjectAddressType (final InformationObjectAddressType informationObjectAddressType)
specifier|public
name|void
name|setInformationObjectAddressType
parameter_list|(
specifier|final
name|InformationObjectAddressType
name|informationObjectAddressType
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setInformationObjectAddressType
argument_list|(
name|informationObjectAddressType
argument_list|)
expr_stmt|;
block|}
DECL|method|getCauseOfTransmissionType ()
specifier|public
name|CauseOfTransmissionType
name|getCauseOfTransmissionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|getCauseOfTransmissionType
argument_list|()
return|;
block|}
DECL|method|setCauseOfTransmissionType (final CauseOfTransmissionType causeOfTransmissionType)
specifier|public
name|void
name|setCauseOfTransmissionType
parameter_list|(
specifier|final
name|CauseOfTransmissionType
name|causeOfTransmissionType
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setCauseOfTransmissionType
argument_list|(
name|causeOfTransmissionType
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimeZone ()
specifier|public
name|TimeZone
name|getTimeZone
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|getTimeZone
argument_list|()
return|;
block|}
DECL|method|setTimeZone (final TimeZone timeZone)
specifier|public
name|void
name|setTimeZone
parameter_list|(
specifier|final
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setTimeZone
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
block|}
DECL|method|setIgnoreDaylightSavingTime (final boolean ignoreDaylightSavingTime)
specifier|public
name|void
name|setIgnoreDaylightSavingTime
parameter_list|(
specifier|final
name|boolean
name|ignoreDaylightSavingTime
parameter_list|)
block|{
name|this
operator|.
name|protocolOptions
operator|.
name|setIgnoreDaylightSavingTime
argument_list|(
name|ignoreDaylightSavingTime
argument_list|)
expr_stmt|;
block|}
DECL|method|isIgnoreDaylightSavingTime ()
specifier|public
name|boolean
name|isIgnoreDaylightSavingTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolOptions
operator|.
name|isIgnoreDaylightSavingTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

