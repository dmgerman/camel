begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iec60870
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|asdu
operator|.
name|types
operator|.
name|ASDUAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|asdu
operator|.
name|types
operator|.
name|InformationObjectAddress
import|;
end_import

begin_class
DECL|class|ObjectAddress
specifier|public
class|class
name|ObjectAddress
block|{
DECL|field|address
name|int
index|[]
name|address
decl_stmt|;
DECL|method|ObjectAddress (final int[] address)
specifier|private
name|ObjectAddress
parameter_list|(
specifier|final
name|int
index|[]
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
DECL|method|ObjectAddress (final int a1, final int a2, final int a3, final int a4, final int a5)
specifier|public
name|ObjectAddress
parameter_list|(
specifier|final
name|int
name|a1
parameter_list|,
specifier|final
name|int
name|a2
parameter_list|,
specifier|final
name|int
name|a3
parameter_list|,
specifier|final
name|int
name|a4
parameter_list|,
specifier|final
name|int
name|a5
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
operator|new
name|int
index|[]
block|{
name|a1
block|,
name|a2
block|,
name|a3
block|,
name|a4
block|,
name|a5
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%02d-%02d-%02d-%02d-%02d"
argument_list|,
name|this
operator|.
name|address
index|[
literal|0
index|]
argument_list|,
name|this
operator|.
name|address
index|[
literal|1
index|]
argument_list|,
name|this
operator|.
name|address
index|[
literal|2
index|]
argument_list|,
name|this
operator|.
name|address
index|[
literal|3
index|]
argument_list|,
name|this
operator|.
name|address
index|[
literal|4
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|address
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (final Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ObjectAddress
name|other
init|=
operator|(
name|ObjectAddress
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|address
argument_list|,
name|other
operator|.
name|address
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|valueOf (final ASDUAddress asduAddress, final InformationObjectAddress address)
specifier|public
specifier|static
name|ObjectAddress
name|valueOf
parameter_list|(
specifier|final
name|ASDUAddress
name|asduAddress
parameter_list|,
specifier|final
name|InformationObjectAddress
name|address
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|asduAddress
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|address
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|a
init|=
name|asduAddress
operator|.
name|toArray
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|b
init|=
name|address
operator|.
name|toArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|ObjectAddress
argument_list|(
name|a
index|[
literal|0
index|]
argument_list|,
name|a
index|[
literal|1
index|]
argument_list|,
name|b
index|[
literal|0
index|]
argument_list|,
name|b
index|[
literal|1
index|]
argument_list|,
name|b
index|[
literal|2
index|]
argument_list|)
return|;
block|}
DECL|method|valueOf (final String address)
specifier|public
specifier|static
name|ObjectAddress
name|valueOf
parameter_list|(
specifier|final
name|String
name|address
parameter_list|)
block|{
if|if
condition|(
name|address
operator|==
literal|null
operator|||
name|address
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
index|[]
name|toks
init|=
name|address
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|toks
operator|.
name|length
operator|!=
literal|5
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid address. Must have 5 octets."
argument_list|)
throw|;
block|}
specifier|final
name|int
index|[]
name|a
init|=
operator|new
name|int
index|[
name|toks
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|v
decl_stmt|;
try|try
block|{
name|v
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|toks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Address segment must be numeric"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|v
argument_list|<
literal|0
operator|||
name|v
argument_list|>
literal|255
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Address segment must be an octet, between 0 and 255 (is %s)"
argument_list|,
name|v
argument_list|)
argument_list|)
throw|;
block|}
name|a
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
block|}
return|return
operator|new
name|ObjectAddress
argument_list|(
name|a
argument_list|)
return|;
block|}
DECL|method|getASDUAddress ()
specifier|public
name|ASDUAddress
name|getASDUAddress
parameter_list|()
block|{
return|return
name|ASDUAddress
operator|.
name|fromArray
argument_list|(
operator|new
name|int
index|[]
block|{
name|this
operator|.
name|address
index|[
literal|0
index|]
block|,
name|this
operator|.
name|address
index|[
literal|1
index|]
block|}
argument_list|)
return|;
block|}
DECL|method|getInformationObjectAddress ()
specifier|public
name|InformationObjectAddress
name|getInformationObjectAddress
parameter_list|()
block|{
return|return
name|InformationObjectAddress
operator|.
name|fromArray
argument_list|(
operator|new
name|int
index|[]
block|{
name|this
operator|.
name|address
index|[
literal|2
index|]
block|,
name|this
operator|.
name|address
index|[
literal|3
index|]
block|,
name|this
operator|.
name|address
index|[
literal|4
index|]
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

