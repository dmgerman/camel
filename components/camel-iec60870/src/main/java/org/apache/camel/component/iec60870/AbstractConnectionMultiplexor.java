begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iec60870
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AbstractConnectionMultiplexor
specifier|public
specifier|abstract
class|class
name|AbstractConnectionMultiplexor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractConnectionMultiplexor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|Handle
specifier|public
interface|interface
name|Handle
block|{
DECL|method|unregister ()
name|void
name|unregister
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
DECL|class|HandleImplementation
specifier|private
specifier|final
class|class
name|HandleImplementation
implements|implements
name|Handle
block|{
annotation|@
name|Override
DECL|method|unregister ()
specifier|public
name|void
name|unregister
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractConnectionMultiplexor
operator|.
name|this
operator|.
name|unregister
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|handles
specifier|private
specifier|final
name|Set
argument_list|<
name|HandleImplementation
argument_list|>
name|handles
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|register ()
specifier|public
specifier|synchronized
name|Handle
name|register
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HandleImplementation
name|handle
init|=
operator|new
name|HandleImplementation
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|needStart
init|=
name|this
operator|.
name|handles
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|this
operator|.
name|handles
operator|.
name|add
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|needStart
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling performStart()"
argument_list|)
expr_stmt|;
name|performStart
argument_list|()
expr_stmt|;
block|}
return|return
name|handle
return|;
block|}
DECL|method|unregister (final HandleImplementation handle)
specifier|private
specifier|synchronized
name|void
name|unregister
parameter_list|(
specifier|final
name|HandleImplementation
name|handle
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|handles
operator|.
name|remove
argument_list|(
name|handle
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|handles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling performStop()"
argument_list|)
expr_stmt|;
name|performStop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|dispose ()
specifier|public
specifier|synchronized
name|void
name|dispose
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Disposing"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|handles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disposing - not started"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disposing - calling performStop()"
argument_list|)
expr_stmt|;
name|this
operator|.
name|handles
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|performStop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to stop on dispose"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|performStart ()
specifier|protected
specifier|abstract
name|void
name|performStart
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|performStop ()
specifier|protected
specifier|abstract
name|void
name|performStop
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

