begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iec60870.server
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|AbstractIecComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|ObjectAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|server
operator|.
name|data
operator|.
name|DataModuleOptions
import|;
end_import

begin_class
DECL|class|ServerComponent
specifier|public
class|class
name|ServerComponent
extends|extends
name|AbstractIecComponent
argument_list|<
name|ServerConnectionMultiplexor
argument_list|,
name|ServerOptions
argument_list|>
block|{
DECL|method|ServerComponent (final CamelContext context)
specifier|public
name|ServerComponent
parameter_list|(
specifier|final
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|ServerOptions
operator|.
name|class
argument_list|,
operator|new
name|ServerOptions
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|ServerComponent ()
specifier|public
name|ServerComponent
parameter_list|()
block|{
name|super
argument_list|(
name|ServerOptions
operator|.
name|class
argument_list|,
operator|new
name|ServerOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyDataModuleOptions (final ServerOptions options, final Map<String, Object> parameters)
specifier|protected
name|void
name|applyDataModuleOptions
parameter_list|(
specifier|final
name|ServerOptions
name|options
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|parameters
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|PARAM_DATA_MODULE_OPTIONS
argument_list|)
operator|instanceof
name|DataModuleOptions
condition|)
block|{
name|options
operator|.
name|setDataModuleOptions
argument_list|(
operator|(
name|DataModuleOptions
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|PARAM_DATA_MODULE_OPTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createConnection (final ConnectionId id, final ServerOptions options)
specifier|protected
name|ServerConnectionMultiplexor
name|createConnection
parameter_list|(
specifier|final
name|ConnectionId
name|id
parameter_list|,
specifier|final
name|ServerOptions
name|options
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Create new server - id: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ServerConnectionMultiplexor
argument_list|(
operator|new
name|ServerInstance
argument_list|(
name|id
operator|.
name|getHost
argument_list|()
argument_list|,
name|id
operator|.
name|getPort
argument_list|()
argument_list|,
name|options
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createEndpoint (final String uri, final ServerConnectionMultiplexor connection, final ObjectAddress address)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|ServerConnectionMultiplexor
name|connection
parameter_list|,
specifier|final
name|ObjectAddress
name|address
parameter_list|)
block|{
return|return
operator|new
name|ServerEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|connection
argument_list|,
name|address
argument_list|)
return|;
block|}
comment|/**      * Default connection options      *      * @param defaultConnectionOptions the new default connection options, must      *            not be {@code null}      */
annotation|@
name|Override
DECL|method|setDefaultConnectionOptions (final ServerOptions defaultConnectionOptions)
specifier|public
name|void
name|setDefaultConnectionOptions
parameter_list|(
specifier|final
name|ServerOptions
name|defaultConnectionOptions
parameter_list|)
block|{
name|super
operator|.
name|setDefaultConnectionOptions
argument_list|(
name|defaultConnectionOptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultConnectionOptions ()
specifier|public
name|ServerOptions
name|getDefaultConnectionOptions
parameter_list|()
block|{
return|return
name|super
operator|.
name|getDefaultConnectionOptions
argument_list|()
return|;
block|}
block|}
end_class

end_unit

