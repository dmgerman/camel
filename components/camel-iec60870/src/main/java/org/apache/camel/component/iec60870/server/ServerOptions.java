begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iec60870.server
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iec60870
operator|.
name|BaseOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|ProtocolOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|neoscada
operator|.
name|protocol
operator|.
name|iec60870
operator|.
name|server
operator|.
name|data
operator|.
name|DataModuleOptions
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|ServerOptions
specifier|public
class|class
name|ServerOptions
extends|extends
name|BaseOptions
argument_list|<
name|ServerOptions
argument_list|>
block|{
comment|/**      * Data module options      */
annotation|@
name|UriParam
argument_list|(
name|javaType
operator|=
literal|"DataModuleOptions"
argument_list|,
name|label
operator|=
literal|"data"
argument_list|)
DECL|field|dataModuleOptions
specifier|private
name|DataModuleOptions
operator|.
name|Builder
name|dataModuleOptions
decl_stmt|;
comment|/**      * A time period in "ms" the protocol layer will buffer change events in      * order to send out aggregated change messages      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"data"
argument_list|)
DECL|field|bufferingPeriod
specifier|private
name|Integer
name|bufferingPeriod
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * Send booleans with timestamps      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"data"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|booleansWithTimestamp
specifier|private
name|boolean
name|booleansWithTimestamp
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * Send floats with timestamps      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"data"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|floatsWithTimestamp
specifier|private
name|boolean
name|floatsWithTimestamp
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * Number of spontaneous events to keep in the buffer.      *<p>      * When there are more than this number of spontaneous in events in the      * buffer, then events will be dropped in order to maintain the buffer size.      *</p>      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"data"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|spontaneousDuplicates
specifier|private
name|int
name|spontaneousDuplicates
decl_stmt|;
comment|// dummy for doc generation
comment|/**      * The period in "ms" between background transmission cycles.      *<p>      * If this is set to zero or less, background transmissions will be      * disabled.      *</p>      */
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"data"
argument_list|,
name|defaultValue
operator|=
literal|"60000"
argument_list|)
DECL|field|backgroundScanPeriod
specifier|private
name|int
name|backgroundScanPeriod
decl_stmt|;
DECL|method|ServerOptions ()
specifier|public
name|ServerOptions
parameter_list|()
block|{
name|this
operator|.
name|dataModuleOptions
operator|=
operator|new
name|DataModuleOptions
operator|.
name|Builder
argument_list|()
expr_stmt|;
block|}
DECL|method|ServerOptions (final ServerOptions other)
specifier|public
name|ServerOptions
parameter_list|(
specifier|final
name|ServerOptions
name|other
parameter_list|)
block|{
name|this
argument_list|(
name|other
operator|.
name|getProtocolOptions
argument_list|()
argument_list|,
name|other
operator|.
name|getDataModuleOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ServerOptions (final ProtocolOptions protocolOptions, final DataModuleOptions dataModuleOptions)
specifier|public
name|ServerOptions
parameter_list|(
specifier|final
name|ProtocolOptions
name|protocolOptions
parameter_list|,
specifier|final
name|DataModuleOptions
name|dataModuleOptions
parameter_list|)
block|{
name|super
argument_list|(
name|protocolOptions
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|dataModuleOptions
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataModuleOptions
operator|=
operator|new
name|DataModuleOptions
operator|.
name|Builder
argument_list|(
name|dataModuleOptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copy ()
specifier|public
name|ServerOptions
name|copy
parameter_list|()
block|{
return|return
operator|new
name|ServerOptions
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setDataModuleOptions (final DataModuleOptions dataModuleOptions)
specifier|public
name|void
name|setDataModuleOptions
parameter_list|(
specifier|final
name|DataModuleOptions
name|dataModuleOptions
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|dataModuleOptions
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataModuleOptions
operator|=
operator|new
name|DataModuleOptions
operator|.
name|Builder
argument_list|(
name|dataModuleOptions
argument_list|)
expr_stmt|;
block|}
DECL|method|setBufferingPeriod (final Integer bufferingPeriod)
specifier|public
name|void
name|setBufferingPeriod
parameter_list|(
specifier|final
name|Integer
name|bufferingPeriod
parameter_list|)
block|{
name|this
operator|.
name|bufferingPeriod
operator|=
name|bufferingPeriod
expr_stmt|;
block|}
DECL|method|getBufferingPeriod ()
specifier|public
name|Integer
name|getBufferingPeriod
parameter_list|()
block|{
return|return
name|this
operator|.
name|bufferingPeriod
return|;
block|}
comment|// wrapper methods - DataModuleOptions
DECL|method|getDataModuleOptions ()
specifier|public
name|DataModuleOptions
name|getDataModuleOptions
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataModuleOptions
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|setBooleansWithTimestamp (final boolean booleansWithTimestamp)
specifier|public
name|void
name|setBooleansWithTimestamp
parameter_list|(
specifier|final
name|boolean
name|booleansWithTimestamp
parameter_list|)
block|{
name|this
operator|.
name|dataModuleOptions
operator|.
name|setBooleansWithTimestamp
argument_list|(
name|booleansWithTimestamp
argument_list|)
expr_stmt|;
block|}
DECL|method|isBooleansWithTimestamp ()
specifier|public
name|boolean
name|isBooleansWithTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataModuleOptions
operator|.
name|isBooleansWithTimestamp
argument_list|()
return|;
block|}
DECL|method|setFloatsWithTimestamp (final boolean floatsWithTimestamp)
specifier|public
name|void
name|setFloatsWithTimestamp
parameter_list|(
specifier|final
name|boolean
name|floatsWithTimestamp
parameter_list|)
block|{
name|this
operator|.
name|dataModuleOptions
operator|.
name|setFloatsWithTimestamp
argument_list|(
name|floatsWithTimestamp
argument_list|)
expr_stmt|;
block|}
DECL|method|isFloatsWithTimestamp ()
specifier|public
name|boolean
name|isFloatsWithTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataModuleOptions
operator|.
name|isFloatsWithTimestamp
argument_list|()
return|;
block|}
DECL|method|setSpontaneousDuplicates (final int spontaneousDuplicates)
specifier|public
name|void
name|setSpontaneousDuplicates
parameter_list|(
specifier|final
name|int
name|spontaneousDuplicates
parameter_list|)
block|{
name|this
operator|.
name|dataModuleOptions
operator|.
name|setSpontaneousDuplicates
argument_list|(
name|spontaneousDuplicates
argument_list|)
expr_stmt|;
block|}
DECL|method|getSpontaneousDuplicates ()
specifier|public
name|int
name|getSpontaneousDuplicates
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataModuleOptions
operator|.
name|getSpontaneousDuplicates
argument_list|()
return|;
block|}
DECL|method|setBackgroundScanPeriod (final int backgroundScanPeriod)
specifier|public
name|void
name|setBackgroundScanPeriod
parameter_list|(
specifier|final
name|int
name|backgroundScanPeriod
parameter_list|)
block|{
name|this
operator|.
name|dataModuleOptions
operator|.
name|setBackgroundScanPeriod
argument_list|(
name|backgroundScanPeriod
argument_list|)
expr_stmt|;
block|}
DECL|method|getBackgroundScanPeriod ()
specifier|public
name|int
name|getBackgroundScanPeriod
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataModuleOptions
operator|.
name|getBackgroundScanPeriod
argument_list|()
return|;
block|}
block|}
end_class

end_unit

