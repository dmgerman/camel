begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.junit5
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit5
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ValueBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PredicateAssertHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Provides utility methods for camel test purpose (builders, assertions,  * endpoint resolutions, file helpers).  */
end_comment

begin_class
DECL|class|TestSupport
specifier|public
specifier|final
class|class
name|TestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TestSupport ()
specifier|private
name|TestSupport
parameter_list|()
block|{     }
comment|// -------------------------------------------------------------------------
comment|// Builder methods for expressions used when testing
comment|// -------------------------------------------------------------------------
comment|/**      * Returns a value builder for the given header.      */
DECL|method|header (String name)
specifier|public
specifier|static
name|ValueBuilder
name|header
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Builder
operator|.
name|header
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns a value builder for the given exchange property.      */
DECL|method|exchangeProperty (String name)
specifier|public
specifier|static
name|ValueBuilder
name|exchangeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Builder
operator|.
name|exchangeProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns a predicate and value builder for the inbound body on an      * exchange.      */
DECL|method|body ()
specifier|public
specifier|static
name|ValueBuilder
name|body
parameter_list|()
block|{
return|return
name|Builder
operator|.
name|body
argument_list|()
return|;
block|}
comment|/**      * Returns a predicate and value builder for the inbound message body as a      * specific type.      */
DECL|method|bodyAs (Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|ValueBuilder
name|bodyAs
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|Builder
operator|.
name|bodyAs
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Returns a value builder for the given system property.      */
DECL|method|systemProperty (String name)
specifier|public
specifier|static
name|ValueBuilder
name|systemProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Builder
operator|.
name|systemProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns a value builder for the given system property.      */
DECL|method|systemProperty (String name, String defaultValue)
specifier|public
specifier|static
name|ValueBuilder
name|systemProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|Builder
operator|.
name|systemProperty
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|// -----------------------------------------------------------------------
comment|// Assertions
comment|// -----------------------------------------------------------------------
comment|/**      * Asserts that a given value is of an expected type.      */
DECL|method|assertIsInstanceOf (Class<T> expectedType, Object value)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|assertIsInstanceOf
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|value
argument_list|,
literal|"Expected an instance of type: "
operator|+
name|expectedType
operator|.
name|getName
argument_list|()
operator|+
literal|" but was null"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedType
operator|.
name|isInstance
argument_list|(
name|value
argument_list|)
argument_list|,
literal|"Object should be of type "
operator|+
name|expectedType
operator|.
name|getName
argument_list|()
operator|+
literal|" but was: "
operator|+
name|value
operator|+
literal|" with the type: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedType
operator|.
name|cast
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Asserts that a given endpoint has an expected uri.      */
DECL|method|assertEndpointUri (Endpoint endpoint, String expectedUri)
specifier|public
specifier|static
name|void
name|assertEndpointUri
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|expectedUri
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|endpoint
argument_list|,
literal|"Endpoint is null when expecting endpoint for: "
operator|+
name|expectedUri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedUri
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
literal|"Endpoint uri for: "
operator|+
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that the In message on the exchange contains an header with a      * given name and expected value.      */
DECL|method|assertInMessageHeader (Exchange exchange, String headerName, Object expectedValue)
specifier|public
specifier|static
name|Object
name|assertInMessageHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|headerName
parameter_list|,
name|Object
name|expectedValue
parameter_list|)
block|{
return|return
name|assertMessageHeader
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|headerName
argument_list|,
name|expectedValue
argument_list|)
return|;
block|}
comment|/**      * Asserts that the message on the exchange contains an header with a given      * name and expected value.      */
DECL|method|assertOutMessageHeader (Exchange exchange, String headerName, Object expectedValue)
specifier|public
specifier|static
name|Object
name|assertOutMessageHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|headerName
parameter_list|,
name|Object
name|expectedValue
parameter_list|)
block|{
return|return
name|assertMessageHeader
argument_list|(
name|exchange
operator|.
name|getMessage
argument_list|()
argument_list|,
name|headerName
argument_list|,
name|expectedValue
argument_list|)
return|;
block|}
comment|/**      * Asserts that the given exchange has a given expectedBody on the IN      * message.      */
DECL|method|assertInMessageBodyEquals (Exchange exchange, Object expectedBody)
specifier|public
specifier|static
name|void
name|assertInMessageBodyEquals
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|expectedBody
parameter_list|)
throws|throws
name|InvalidPayloadException
block|{
name|assertNotNull
argument_list|(
name|exchange
argument_list|,
literal|"Should have a response exchange"
argument_list|)
expr_stmt|;
name|Object
name|actualBody
decl_stmt|;
if|if
condition|(
name|expectedBody
operator|==
literal|null
condition|)
block|{
name|actualBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBody
argument_list|,
name|actualBody
argument_list|,
literal|"in body of: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actualBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|expectedBody
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedBody
argument_list|,
name|actualBody
argument_list|,
literal|"in body of: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received response: "
operator|+
name|exchange
operator|+
literal|" with in: "
operator|+
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that the given exchange has a given expectedBody on the message.      */
DECL|method|assertMessageBodyEquals (Exchange exchange, Object expectedBody)
specifier|public
specifier|static
name|void
name|assertMessageBodyEquals
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|expectedBody
parameter_list|)
throws|throws
name|InvalidPayloadException
block|{
name|assertNotNull
argument_list|(
name|exchange
argument_list|,
literal|"Should have a response exchange!"
argument_list|)
expr_stmt|;
name|Object
name|actualBody
decl_stmt|;
if|if
condition|(
name|expectedBody
operator|==
literal|null
condition|)
block|{
name|actualBody
operator|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBody
argument_list|,
name|actualBody
argument_list|,
literal|"output body of: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actualBody
operator|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|expectedBody
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedBody
argument_list|,
name|actualBody
argument_list|,
literal|"output body of: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received response: "
operator|+
name|exchange
operator|+
literal|" with out: "
operator|+
name|exchange
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that a given message contains an header with a given name and      * expected value.      */
DECL|method|assertMessageHeader (Message message, String headerName, Object expectedValue)
specifier|public
specifier|static
name|Object
name|assertMessageHeader
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|headerName
parameter_list|,
name|Object
name|expectedValue
parameter_list|)
block|{
name|Object
name|actualValue
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|actualValue
argument_list|,
literal|"Header: "
operator|+
name|headerName
operator|+
literal|" on Message: "
operator|+
name|message
argument_list|)
expr_stmt|;
return|return
name|actualValue
return|;
block|}
comment|/**      * Asserts that the given expression when evaluated returns the given      * answer.      */
DECL|method|assertExpression (Expression expression, Exchange exchange, Object expectedAnswer)
specifier|public
specifier|static
name|Object
name|assertExpression
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|expectedAnswer
parameter_list|)
block|{
name|Object
name|actualAnswer
decl_stmt|;
if|if
condition|(
name|expectedAnswer
operator|!=
literal|null
condition|)
block|{
name|actualAnswer
operator|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|expectedAnswer
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actualAnswer
operator|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Evaluated expression: "
operator|+
name|expression
operator|+
literal|" on exchange: "
operator|+
name|exchange
operator|+
literal|" result: "
operator|+
name|actualAnswer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedAnswer
argument_list|,
name|actualAnswer
argument_list|,
literal|"Expression: "
operator|+
name|expression
operator|+
literal|" on Exchange: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
return|return
name|actualAnswer
return|;
block|}
comment|/**      * Asserts that a given predicate returns<code>true</code> on a given      * exchange.      */
DECL|method|assertPredicateMatches (Predicate predicate, Exchange exchange)
specifier|public
specifier|static
name|void
name|assertPredicateMatches
parameter_list|(
name|Predicate
name|predicate
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertPredicate
argument_list|(
name|predicate
argument_list|,
name|exchange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that a given predicate returns<code>false</code> on a given      * exchange.      */
DECL|method|assertPredicateDoesNotMatch (Predicate predicate, Exchange exchange)
specifier|public
specifier|static
name|void
name|assertPredicateDoesNotMatch
parameter_list|(
name|Predicate
name|predicate
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
name|PredicateAssertHelper
operator|.
name|assertMatches
argument_list|(
name|predicate
argument_list|,
literal|"Predicate should match: "
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught expected assertion error: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|assertPredicate
argument_list|(
name|predicate
argument_list|,
name|exchange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that the predicate returns the expected value on the exchange.      */
DECL|method|assertPredicate (final Predicate predicate, Exchange exchange, boolean expectedValue)
specifier|public
specifier|static
name|boolean
name|assertPredicate
parameter_list|(
specifier|final
name|Predicate
name|predicate
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|expectedValue
parameter_list|)
block|{
if|if
condition|(
name|expectedValue
condition|)
block|{
name|PredicateAssertHelper
operator|.
name|assertMatches
argument_list|(
name|predicate
argument_list|,
literal|"Predicate failed: "
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
name|boolean
name|actualValue
init|=
name|predicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Evaluated predicate: "
operator|+
name|predicate
operator|+
literal|" on exchange: "
operator|+
name|exchange
operator|+
literal|" result: "
operator|+
name|actualValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|actualValue
argument_list|,
literal|"Predicate: "
operator|+
name|predicate
operator|+
literal|" on Exchange: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
return|return
name|actualValue
return|;
block|}
comment|/**      * Asserts that a given list has a single element.      */
DECL|method|assertOneElement (List<T> list)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|assertOneElement
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|"Size of list should be 1: "
operator|+
name|list
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * Asserts that a given list has a given expected size.      */
DECL|method|assertListSize (List<T> list, int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|assertListSize
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
return|return
name|assertListSize
argument_list|(
literal|"List"
argument_list|,
name|list
argument_list|,
name|expectedSize
argument_list|)
return|;
block|}
comment|/**      * Asserts that a list is of the given size. When the assertion is broken,      * the error message starts with a given prefix.      */
DECL|method|assertListSize (String brokenAssertionMessagePrefix, List<T> list, int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|assertListSize
parameter_list|(
name|String
name|brokenAssertionMessagePrefix
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|brokenAssertionMessagePrefix
operator|+
literal|" should be of size: "
operator|+
name|expectedSize
operator|+
literal|" but is: "
operator|+
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|/**      * Asserts that a given collection has a given size.      */
DECL|method|assertCollectionSize (Collection<T> list, int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Collection
argument_list|<
name|T
argument_list|>
name|assertCollectionSize
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
return|return
name|assertCollectionSize
argument_list|(
literal|"List"
argument_list|,
name|list
argument_list|,
name|expectedSize
argument_list|)
return|;
block|}
comment|/**      * Asserts that a given collection has a given size. When the assertion is      * broken, the error message starts with a given prefix.      */
DECL|method|assertCollectionSize (String brokenAssertionMessagePrefix, Collection<T> list, int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Collection
argument_list|<
name|T
argument_list|>
name|assertCollectionSize
parameter_list|(
name|String
name|brokenAssertionMessagePrefix
parameter_list|,
name|Collection
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|brokenAssertionMessagePrefix
operator|+
literal|" should be of size: "
operator|+
name|expectedSize
operator|+
literal|" but is: "
operator|+
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|/**      * Asserts that the text contains the given string.      *      * @param text the text to compare      * @param containedText the text which must be contained inside the other      *            text parameter      */
DECL|method|assertStringContains (String text, String containedText)
specifier|public
specifier|static
name|void
name|assertStringContains
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|containedText
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|text
argument_list|,
literal|"Text should not be null!"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|contains
argument_list|(
name|containedText
argument_list|)
argument_list|,
literal|"Text: "
operator|+
name|text
operator|+
literal|" does not contain: "
operator|+
name|containedText
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that two given directories are equal. To be used for      * folder/directory comparison that works across different platforms such as      * Window, Mac and Linux.      */
DECL|method|assertDirectoryEquals (String expected, String actual)
specifier|public
specifier|static
name|void
name|assertDirectoryEquals
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
name|assertDirectoryEquals
argument_list|(
literal|null
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that two given directories are equal. To be used for      * folder/directory comparison that works across different platforms such as      * Window, Mac and Linux.      */
DECL|method|assertDirectoryEquals (String message, String expected, String actual)
specifier|public
specifier|static
name|void
name|assertDirectoryEquals
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
comment|// must use single / as path separators
name|String
name|expectedPath
init|=
name|expected
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|actualPath
init|=
name|actual
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expectedPath
argument_list|,
name|actualPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|actualPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Asserts that a given directory is found in the file system.      */
DECL|method|assertDirectoryExists (String filename)
specifier|public
specifier|static
name|void
name|assertDirectoryExists
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|,
literal|"Directory "
operator|+
name|filename
operator|+
literal|" should exist"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|"Directory "
operator|+
name|filename
operator|+
literal|" should be a directory"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that a given file is found in the file system.      */
DECL|method|assertFileExists (String filename)
specifier|public
specifier|static
name|void
name|assertFileExists
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|,
literal|"File "
operator|+
name|filename
operator|+
literal|" should exist"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|isFile
argument_list|()
argument_list|,
literal|"File "
operator|+
name|filename
operator|+
literal|" should be a file"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that a given file is<b>not</b> found in the file system.      */
DECL|method|assertFileNotExists (String filename)
specifier|public
specifier|static
name|void
name|assertFileNotExists
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|,
literal|"File "
operator|+
name|filename
operator|+
literal|" should not exist"
argument_list|)
expr_stmt|;
block|}
comment|// -----------------------------------------------------------------------
comment|// Other helpers, resolution, file, getRouteList
comment|// -----------------------------------------------------------------------
comment|/**      * Resolves an endpoint and asserts that it is found.      */
DECL|method|resolveMandatoryEndpoint (CamelContext context, String endpointUri)
specifier|public
specifier|static
name|Endpoint
name|resolveMandatoryEndpoint
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|endpointUri
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|endpointUri
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
argument_list|,
literal|"No endpoint found for URI: "
operator|+
name|endpointUri
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
comment|/**      * Resolves an endpoint and asserts that it is found.      */
DECL|method|resolveMandatoryEndpoint (CamelContext context, String endpointUri, Class<T> endpointType)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Endpoint
parameter_list|>
name|T
name|resolveMandatoryEndpoint
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|endpointUri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|endpointType
parameter_list|)
block|{
name|T
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|endpointUri
argument_list|,
name|endpointType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
argument_list|,
literal|"No endpoint found for URI: "
operator|+
name|endpointUri
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
comment|/**      * Creates an exchange with the given body.      */
DECL|method|createExchangeWithBody (CamelContext camelContext, Object body)
specifier|public
specifier|static
name|Exchange
name|createExchangeWithBody
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|body
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
comment|/**      * A helper method to create a list of Route objects for a given route      * builder.      */
DECL|method|getRouteList (RouteBuilder builder)
specifier|public
specifier|static
name|List
argument_list|<
name|Route
argument_list|>
name|getRouteList
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Route
argument_list|>
name|answer
init|=
name|context
operator|.
name|getRoutes
argument_list|()
decl_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Recursively delete a directory, useful to zapping test data. Deletion      * will be attempted up to five time before giving up.      *      * @param file the directory to be deleted      * @return<tt>false</tt> when an error occur while deleting directory      */
DECL|method|deleteDirectory (String file)
specifier|public
specifier|static
name|boolean
name|deleteDirectory
parameter_list|(
name|String
name|file
parameter_list|)
block|{
return|return
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Recursively delete a directory, useful to zapping test data. Deletion      * will be attempted up to five time before giving up.      *      * @param file the directory to be deleted      * @return<tt>false</tt> when an error occur while deleting directory      */
DECL|method|deleteDirectory (File file)
specifier|public
specifier|static
name|boolean
name|deleteDirectory
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|int
name|maxTries
init|=
literal|5
decl_stmt|;
name|boolean
name|exists
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|exists
operator|&&
operator|(
name|tries
operator|<
name|maxTries
operator|)
condition|)
block|{
name|recursivelyDeleteDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|tries
operator|++
expr_stmt|;
name|exists
operator|=
name|file
operator|.
name|exists
argument_list|()
expr_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
return|return
operator|!
name|exists
return|;
block|}
comment|/**      * Recursively delete a directory. Deletion will be attempted a single time      * before giving up.      *      * @param file the directory to be deleted      */
DECL|method|recursivelyDeleteDirectory (File file)
specifier|public
specifier|static
name|void
name|recursivelyDeleteDirectory
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|child
range|:
name|files
control|)
block|{
name|recursivelyDeleteDirectory
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|success
init|=
name|file
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deletion of file: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" failed"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a given directory.      *      * @param file the directory to be created      */
DECL|method|createDirectory (String file)
specifier|public
specifier|static
name|void
name|createDirectory
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tells whether the current Operating System is the given expected      * platform.      *<p/>      * Uses<tt>os.name</tt> from the system properties to determine the      * Operating System.      *      * @param expectedPlatform such as Windows      * @return<tt>true</tt> when the current Operating System is the expected      *         platform,<tt>false</tt> otherwise.      */
DECL|method|isPlatform (String expectedPlatform)
specifier|public
specifier|static
name|boolean
name|isPlatform
parameter_list|(
name|String
name|expectedPlatform
parameter_list|)
block|{
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
return|return
name|osName
operator|.
name|contains
argument_list|(
name|expectedPlatform
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Tells whether the current Java Virtual Machine has been issued by a given      * expected vendor.      *<p/>      * Uses<tt>java.vendor</tt> from the system properties to determine the      * vendor.      *      * @param expectedVendor such as IBM      * @return<tt>true</tt> when the current Java Virtual Machine has been      *         issued by the expected vendor,<tt>false</tt> otherwise.      */
DECL|method|isJavaVendor (String expectedVendor)
specifier|public
specifier|static
name|boolean
name|isJavaVendor
parameter_list|(
name|String
name|expectedVendor
parameter_list|)
block|{
name|String
name|javaVendor
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
return|return
name|javaVendor
operator|.
name|contains
argument_list|(
name|expectedVendor
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Tells whether the current Java version is 1.8.      *      * @return<tt>true</tt> if its Java 1.8,<tt>false</tt> if its not (for      *         example Java 1.7 or older)      */
DECL|method|isJava18 ()
specifier|public
specifier|static
name|boolean
name|isJava18
parameter_list|()
block|{
return|return
name|getJavaMajorVersion
argument_list|()
operator|==
literal|8
return|;
block|}
comment|/**      * Tells whether the current Java version is 1.9.      *      * @return<tt>true</tt> if its Java 1.9,<tt>false</tt> if its not (for      *         example Java 1.8 or older)      */
DECL|method|isJava19 ()
specifier|public
specifier|static
name|boolean
name|isJava19
parameter_list|()
block|{
return|return
name|getJavaMajorVersion
argument_list|()
operator|==
literal|9
return|;
block|}
comment|/**      * Returns the current major Java version e.g 8.      *<p/>      * Uses<tt>java.specification.version</tt> from the system properties to      * determine the major version.      *       * @return the current major Java version.      */
DECL|method|getJavaMajorVersion ()
specifier|public
specifier|static
name|int
name|getJavaMajorVersion
parameter_list|()
block|{
name|String
name|javaSpecVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaSpecVersion
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// before jdk 9
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|javaSpecVersion
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|javaSpecVersion
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

