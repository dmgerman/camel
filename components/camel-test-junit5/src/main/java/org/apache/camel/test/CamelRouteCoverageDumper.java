begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ReflectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedCamelContextMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedProcessorMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedRouteMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A<code>CamelRouteCoverageDumper</code> instance dumps the route coverage of  * a given camel test.  */
end_comment

begin_class
DECL|class|CamelRouteCoverageDumper
specifier|public
class|class
name|CamelRouteCoverageDumper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelRouteCoverageDumper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|dump (ManagedCamelContextMBean managedCamelContext, ModelCamelContext context, String dumpDir, String dumpFilename, String testClass, String testName, long testTimeTaken)
specifier|public
name|void
name|dump
parameter_list|(
name|ManagedCamelContextMBean
name|managedCamelContext
parameter_list|,
name|ModelCamelContext
name|context
parameter_list|,
name|String
name|dumpDir
parameter_list|,
name|String
name|dumpFilename
parameter_list|,
name|String
name|testClass
parameter_list|,
name|String
name|testName
parameter_list|,
name|long
name|testTimeTaken
parameter_list|)
throws|throws
name|Exception
block|{
name|logCoverageSummary
argument_list|(
name|managedCamelContext
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|String
name|routeCoverageAsXml
init|=
name|managedCamelContext
operator|.
name|dumpRoutesCoverageAsXml
argument_list|()
decl_stmt|;
name|String
name|combined
init|=
literal|"<camelRouteCoverage>\n"
operator|+
name|gatherTestDetailsAsXml
argument_list|(
name|testClass
argument_list|,
name|testName
argument_list|,
name|testTimeTaken
argument_list|)
operator|+
name|routeCoverageAsXml
operator|+
literal|"\n</camelRouteCoverage>"
decl_stmt|;
name|File
name|dumpFile
init|=
operator|new
name|File
argument_list|(
name|dumpDir
argument_list|)
decl_stmt|;
comment|// ensure dir exists
name|dumpFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dumpFile
operator|=
operator|new
name|File
argument_list|(
name|dumpDir
argument_list|,
name|dumpFilename
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumping route coverage to file: {}"
argument_list|,
name|dumpFile
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|combined
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dumpFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
comment|/**      * Groups all processors from Camel context by route id.      */
DECL|method|findProcessorsForEachRoute (MBeanServer server, ModelCamelContext context)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ManagedProcessorMBean
argument_list|>
argument_list|>
name|findProcessorsForEachRoute
parameter_list|(
name|MBeanServer
name|server
parameter_list|,
name|ModelCamelContext
name|context
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|MBeanException
throws|,
name|AttributeNotFoundException
throws|,
name|InstanceNotFoundException
throws|,
name|ReflectionException
block|{
name|String
name|domain
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getMBeanServerDefaultDomain
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ManagedProcessorMBean
argument_list|>
argument_list|>
name|processorsForRoute
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ObjectName
name|processorsObjectName
init|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":context="
operator|+
name|context
operator|.
name|getManagementName
argument_list|()
operator|+
literal|",type=processors,name=*"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|objectNames
init|=
name|server
operator|.
name|queryNames
argument_list|(
name|processorsObjectName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectName
name|objectName
range|:
name|objectNames
control|)
block|{
name|String
name|routeId
init|=
name|server
operator|.
name|getAttribute
argument_list|(
name|objectName
argument_list|,
literal|"RouteId"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|objectName
operator|.
name|getKeyProperty
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|name
operator|=
name|ObjectName
operator|.
name|unquote
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ManagedProcessorMBean
name|managedProcessor
init|=
name|context
operator|.
name|getExtension
argument_list|(
name|ManagedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getManagedProcessor
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedProcessor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|processorsForRoute
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|ManagedProcessorMBean
argument_list|>
name|processorsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|processorsList
operator|.
name|add
argument_list|(
name|managedProcessor
argument_list|)
expr_stmt|;
name|processorsForRoute
operator|.
name|put
argument_list|(
name|routeId
argument_list|,
name|processorsList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processorsForRoute
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
operator|.
name|add
argument_list|(
name|managedProcessor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// sort processors by position in route definition
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ManagedProcessorMBean
argument_list|>
argument_list|>
name|entry
range|:
name|processorsForRoute
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|Comparator
operator|.
name|comparing
argument_list|(
name|ManagedProcessorMBean
operator|::
name|getIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|processorsForRoute
return|;
block|}
comment|/**      * Gathers test details as xml.      */
DECL|method|gatherTestDetailsAsXml (String testClass, String testName, long timeTaken)
specifier|private
name|String
name|gatherTestDetailsAsXml
parameter_list|(
name|String
name|testClass
parameter_list|,
name|String
name|testName
parameter_list|,
name|long
name|timeTaken
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<test>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<class>"
argument_list|)
operator|.
name|append
argument_list|(
name|testClass
argument_list|)
operator|.
name|append
argument_list|(
literal|"</class>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<method>"
argument_list|)
operator|.
name|append
argument_list|(
name|testName
argument_list|)
operator|.
name|append
argument_list|(
literal|"</method>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<time>"
argument_list|)
operator|.
name|append
argument_list|(
name|timeTaken
argument_list|)
operator|.
name|append
argument_list|(
literal|"</time>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</test>\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Logs route coverage summary, including which routes are uncovered and      * what is the coverage of each processor in each route.      */
DECL|method|logCoverageSummary (ManagedCamelContextMBean managedCamelContext, ModelCamelContext context)
specifier|private
name|void
name|logCoverageSummary
parameter_list|(
name|ManagedCamelContextMBean
name|managedCamelContext
parameter_list|,
name|ModelCamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\nCoverage summary\n"
argument_list|)
decl_stmt|;
name|int
name|routes
init|=
name|managedCamelContext
operator|.
name|getTotalRoutes
argument_list|()
decl_stmt|;
name|long
name|contextExchangesTotal
init|=
name|managedCamelContext
operator|.
name|getExchangesTotal
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uncoveredRoutes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|routesSummary
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|routesSummary
operator|.
name|append
argument_list|(
literal|"\tProcessor coverage\n"
argument_list|)
expr_stmt|;
name|MBeanServer
name|server
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ManagedProcessorMBean
argument_list|>
argument_list|>
name|processorsForRoute
init|=
name|findProcessorsForEachRoute
argument_list|(
name|server
argument_list|,
name|context
argument_list|)
decl_stmt|;
comment|// log processor coverage for each route
for|for
control|(
name|Route
name|route
range|:
name|context
operator|.
name|getRoutes
argument_list|()
control|)
block|{
name|ManagedRouteMBean
name|managedRoute
init|=
name|context
operator|.
name|getExtension
argument_list|(
name|ManagedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getManagedRoute
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedRoute
operator|.
name|getExchangesTotal
argument_list|()
operator|==
literal|0
condition|)
block|{
name|uncoveredRoutes
operator|.
name|add
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|routeCoveragePercentage
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|managedRoute
operator|.
name|getExchangesTotal
argument_list|()
operator|/
name|contextExchangesTotal
operator|*
literal|100
argument_list|)
decl_stmt|;
name|routesSummary
operator|.
name|append
argument_list|(
literal|"\t\tRoute "
argument_list|)
operator|.
name|append
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" total: "
argument_list|)
operator|.
name|append
argument_list|(
name|managedRoute
operator|.
name|getExchangesTotal
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|routeCoveragePercentage
argument_list|)
operator|.
name|append
argument_list|(
literal|"%)\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ManagedProcessorMBean
argument_list|>
name|processors
init|=
name|processorsForRoute
operator|.
name|get
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|processors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ManagedProcessorMBean
name|managedProcessor
range|:
name|processors
control|)
block|{
name|String
name|processorId
init|=
name|managedProcessor
operator|.
name|getProcessorId
argument_list|()
decl_stmt|;
name|long
name|processorExchangesTotal
init|=
name|managedProcessor
operator|.
name|getExchangesTotal
argument_list|()
decl_stmt|;
name|long
name|processorCoveragePercentage
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|processorExchangesTotal
operator|/
name|contextExchangesTotal
operator|*
literal|100
argument_list|)
decl_stmt|;
name|routesSummary
operator|.
name|append
argument_list|(
literal|"\t\t\tProcessor "
argument_list|)
operator|.
name|append
argument_list|(
name|processorId
argument_list|)
operator|.
name|append
argument_list|(
literal|" total: "
argument_list|)
operator|.
name|append
argument_list|(
name|processorExchangesTotal
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|processorCoveragePercentage
argument_list|)
operator|.
name|append
argument_list|(
literal|"%)\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|used
init|=
name|routes
operator|-
name|uncoveredRoutes
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|contextPercentage
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|used
operator|/
name|routes
operator|*
literal|100
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\tRoute coverage: "
argument_list|)
operator|.
name|append
argument_list|(
name|used
argument_list|)
operator|.
name|append
argument_list|(
literal|" out of "
argument_list|)
operator|.
name|append
argument_list|(
name|routes
argument_list|)
operator|.
name|append
argument_list|(
literal|" routes used ("
argument_list|)
operator|.
name|append
argument_list|(
name|contextPercentage
argument_list|)
operator|.
name|append
argument_list|(
literal|"%)\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\t\tCamelContext ("
argument_list|)
operator|.
name|append
argument_list|(
name|managedCamelContext
operator|.
name|getCamelId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") total: "
argument_list|)
operator|.
name|append
argument_list|(
name|contextExchangesTotal
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|uncoveredRoutes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\t\tUncovered routes: "
argument_list|)
operator|.
name|append
argument_list|(
name|uncoveredRoutes
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|routesSummary
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

