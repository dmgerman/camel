begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fastjson
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fastjson
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|fastjson
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|fastjson
operator|.
name|serializer
operator|.
name|SerializerFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|fastjson
operator|.
name|support
operator|.
name|config
operator|.
name|FastJsonConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Dataformat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_comment
comment|/**  * A<a href="http://camel.apache.org/data-format.html">data format</a> ({@link DataFormat})  * using<a href="https://github.com/alibaba/fastjson">Fastjson</a> to marshal to and from JSON.  */
end_comment

begin_class
annotation|@
name|Dataformat
argument_list|(
literal|"json-fastjson"
argument_list|)
DECL|class|FastjsonDataFormat
specifier|public
class|class
name|FastjsonDataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
block|{
DECL|field|config
specifier|private
name|FastJsonConfig
name|config
decl_stmt|;
DECL|field|unmarshalType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
decl_stmt|;
DECL|field|unmarshalGenericType
specifier|private
name|Type
name|unmarshalGenericType
decl_stmt|;
DECL|field|serializeNulls
specifier|private
name|boolean
name|serializeNulls
decl_stmt|;
DECL|field|prettyPrint
specifier|private
name|boolean
name|prettyPrint
decl_stmt|;
DECL|field|dateFormatPattern
specifier|private
name|String
name|dateFormatPattern
decl_stmt|;
DECL|field|contentTypeHeader
specifier|private
name|boolean
name|contentTypeHeader
init|=
literal|true
decl_stmt|;
DECL|method|FastjsonDataFormat ()
specifier|public
name|FastjsonDataFormat
parameter_list|()
block|{
name|this
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|FastjsonDataFormat (Class<?> unmarshalType)
specifier|public
name|FastjsonDataFormat
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|unmarshalType
argument_list|)
expr_stmt|;
block|}
DECL|method|FastjsonDataFormat (FastJsonConfig config, Class<?> unmarshalType)
specifier|public
name|FastjsonDataFormat
parameter_list|(
name|FastJsonConfig
name|config
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|unmarshalType
operator|=
name|unmarshalType
expr_stmt|;
block|}
DECL|method|FastjsonDataFormat (Type unmarshalGenericType)
specifier|public
name|FastjsonDataFormat
parameter_list|(
name|Type
name|unmarshalGenericType
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|unmarshalGenericType
argument_list|)
expr_stmt|;
block|}
DECL|method|FastjsonDataFormat (FastJsonConfig config, Type unmarshalGenericType)
specifier|public
name|FastjsonDataFormat
parameter_list|(
name|FastJsonConfig
name|config
parameter_list|,
name|Type
name|unmarshalGenericType
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|unmarshalGenericType
operator|=
name|unmarshalGenericType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"json-fastjson"
return|;
block|}
annotation|@
name|Override
DECL|method|marshal (final Exchange exchange, final Object graph, final OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Object
name|graph
parameter_list|,
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|len
init|=
name|JSON
operator|.
name|writeJSONString
argument_list|(
name|stream
argument_list|,
name|config
operator|.
name|getCharset
argument_list|()
argument_list|,
name|graph
argument_list|,
name|config
operator|.
name|getSerializeConfig
argument_list|()
argument_list|,
name|config
operator|.
name|getSerializeFilters
argument_list|()
argument_list|,
name|config
operator|.
name|getDateFormat
argument_list|()
argument_list|,
name|JSON
operator|.
name|DEFAULT_GENERATE_FEATURE
argument_list|,
name|config
operator|.
name|getSerializerFeatures
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentTypeHeader
condition|)
block|{
name|Message
name|message
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_LENGTH
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|unmarshal (final Exchange exchange, final InputStream stream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|InputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|unmarshalGenericType
operator|==
literal|null
condition|)
block|{
return|return
name|JSON
operator|.
name|parseObject
argument_list|(
name|stream
argument_list|,
name|config
operator|.
name|getCharset
argument_list|()
argument_list|,
name|unmarshalType
argument_list|,
name|config
operator|.
name|getFeatures
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|JSON
operator|.
name|parseObject
argument_list|(
name|stream
argument_list|,
name|config
operator|.
name|getCharset
argument_list|()
argument_list|,
name|unmarshalGenericType
argument_list|,
name|config
operator|.
name|getFeatures
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|SerializerFeature
argument_list|>
name|serializerFeatureList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|=
operator|new
name|FastJsonConfig
argument_list|()
expr_stmt|;
if|if
condition|(
name|prettyPrint
condition|)
block|{
name|serializerFeatureList
operator|.
name|add
argument_list|(
name|SerializerFeature
operator|.
name|PrettyFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serializeNulls
condition|)
block|{
name|serializerFeatureList
operator|.
name|add
argument_list|(
name|SerializerFeature
operator|.
name|WriteMapNullValue
argument_list|)
expr_stmt|;
name|serializerFeatureList
operator|.
name|add
argument_list|(
name|SerializerFeature
operator|.
name|WriteNullBooleanAsFalse
argument_list|)
expr_stmt|;
name|serializerFeatureList
operator|.
name|add
argument_list|(
name|SerializerFeature
operator|.
name|WriteNullListAsEmpty
argument_list|)
expr_stmt|;
name|serializerFeatureList
operator|.
name|add
argument_list|(
name|SerializerFeature
operator|.
name|WriteNullNumberAsZero
argument_list|)
expr_stmt|;
name|serializerFeatureList
operator|.
name|add
argument_list|(
name|SerializerFeature
operator|.
name|WriteNullStringAsEmpty
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|dateFormatPattern
operator|!=
literal|null
condition|)
block|{
name|serializerFeatureList
operator|.
name|add
argument_list|(
name|SerializerFeature
operator|.
name|WriteDateUseDateFormat
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDateFormat
argument_list|(
name|this
operator|.
name|dateFormatPattern
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getUnmarshalType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getUnmarshalType
parameter_list|()
block|{
return|return
name|this
operator|.
name|unmarshalType
return|;
block|}
DECL|method|setUnmarshalType (Class<?> unmarshalType)
specifier|public
name|void
name|setUnmarshalType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|)
block|{
name|this
operator|.
name|unmarshalType
operator|=
name|unmarshalType
expr_stmt|;
block|}
DECL|method|getUnmarshalGenericType ()
specifier|public
name|Type
name|getUnmarshalGenericType
parameter_list|()
block|{
return|return
name|this
operator|.
name|unmarshalType
return|;
block|}
DECL|method|setUnmarshalGenericType (Type unmarshalGenericType)
specifier|public
name|void
name|setUnmarshalGenericType
parameter_list|(
name|Type
name|unmarshalGenericType
parameter_list|)
block|{
name|this
operator|.
name|unmarshalGenericType
operator|=
name|unmarshalGenericType
expr_stmt|;
block|}
DECL|method|isSerializeNulls ()
specifier|public
name|boolean
name|isSerializeNulls
parameter_list|()
block|{
return|return
name|serializeNulls
return|;
block|}
DECL|method|setSerializeNulls (boolean serializeNulls)
specifier|public
name|void
name|setSerializeNulls
parameter_list|(
name|boolean
name|serializeNulls
parameter_list|)
block|{
name|this
operator|.
name|serializeNulls
operator|=
name|serializeNulls
expr_stmt|;
block|}
DECL|method|isPrettyPrint ()
specifier|public
name|boolean
name|isPrettyPrint
parameter_list|()
block|{
return|return
name|prettyPrint
return|;
block|}
DECL|method|setPrettyPrint (boolean prettyPrint)
specifier|public
name|void
name|setPrettyPrint
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|this
operator|.
name|prettyPrint
operator|=
name|prettyPrint
expr_stmt|;
block|}
DECL|method|getDateFormatPattern ()
specifier|public
name|String
name|getDateFormatPattern
parameter_list|()
block|{
return|return
name|dateFormatPattern
return|;
block|}
DECL|method|setDateFormatPattern (String dateFormatPattern)
specifier|public
name|void
name|setDateFormatPattern
parameter_list|(
name|String
name|dateFormatPattern
parameter_list|)
block|{
name|this
operator|.
name|dateFormatPattern
operator|=
name|dateFormatPattern
expr_stmt|;
block|}
DECL|method|isContentTypeHeader ()
specifier|public
name|boolean
name|isContentTypeHeader
parameter_list|()
block|{
return|return
name|contentTypeHeader
return|;
block|}
comment|/**      * If enabled then JSON will set the Content-Type header to<tt>application/json</tt> when marshalling.      */
DECL|method|setContentTypeHeader (boolean contentTypeHeader)
specifier|public
name|void
name|setContentTypeHeader
parameter_list|(
name|boolean
name|contentTypeHeader
parameter_list|)
block|{
name|this
operator|.
name|contentTypeHeader
operator|=
name|contentTypeHeader
expr_stmt|;
block|}
DECL|method|getConfig ()
specifier|public
name|FastJsonConfig
name|getConfig
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
block|}
end_class

end_unit

