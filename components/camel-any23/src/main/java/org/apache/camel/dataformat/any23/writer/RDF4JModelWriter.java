begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.any23.writer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|any23
operator|.
name|writer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|FormatWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|TripleHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|TripleWriterHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|rdf4j
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|rdf4j
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|rdf4j
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|rdf4j
operator|.
name|model
operator|.
name|Value
import|;
end_import

begin_class
DECL|class|RDF4JModelWriter
specifier|public
class|class
name|RDF4JModelWriter
extends|extends
name|TripleWriterHandler
implements|implements
name|FormatWriter
block|{
DECL|field|model
specifier|private
name|Model
name|model
decl_stmt|;
DECL|method|RDF4JModelWriter (Model model)
specifier|public
name|RDF4JModelWriter
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|TripleHandlerException
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|writeTriple (Resource s, IRI p, Value o, Resource g)
specifier|public
name|void
name|writeTriple
parameter_list|(
name|Resource
name|s
parameter_list|,
name|IRI
name|p
parameter_list|,
name|Value
name|o
parameter_list|,
name|Resource
name|g
parameter_list|)
throws|throws
name|TripleHandlerException
block|{
name|model
operator|.
name|add
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|o
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNamespace (String prefix, String uri)
specifier|public
name|void
name|writeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|TripleHandlerException
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|isAnnotated ()
specifier|public
name|boolean
name|isAnnotated
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setAnnotated (boolean f)
specifier|public
name|void
name|setAnnotated
parameter_list|(
name|boolean
name|f
parameter_list|)
block|{
comment|// noop
block|}
DECL|method|getModel ()
specifier|public
name|Model
name|getModel
parameter_list|()
block|{
return|return
name|model
return|;
block|}
DECL|method|setModel (Model model)
specifier|public
name|void
name|setModel
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
block|}
block|}
end_class

end_unit

