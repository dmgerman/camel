begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.any23
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|any23
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|Any23
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|configuration
operator|.
name|DefaultConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|configuration
operator|.
name|ModifiableConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|source
operator|.
name|DocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|source
operator|.
name|StringDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|JSONLDWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|NQuadsWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|NTriplesWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|RDFXMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|TripleHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|TurtleWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Dataformat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Dataformat for any23 .. This dataformat is intended to convert HTML from a  * site (or file) into rdf.  */
end_comment

begin_class
annotation|@
name|Dataformat
argument_list|(
literal|"any23"
argument_list|)
DECL|class|Any23DataFormat
specifier|public
class|class
name|Any23DataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
block|{
comment|/*      * Our Logger    */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Any23DataFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|any23
specifier|private
name|Any23
name|any23
decl_stmt|;
DECL|field|format
specifier|private
name|Any23OutputFormat
name|format
init|=
name|Any23OutputFormat
operator|.
name|RDFXML
decl_stmt|;
DECL|field|conf
specifier|private
name|ModifiableConfiguration
name|conf
decl_stmt|;
DECL|field|extractorsList
specifier|private
name|String
index|[]
name|extractorsList
decl_stmt|;
DECL|field|configurations
specifier|private
name|String
name|configurations
decl_stmt|;
DECL|field|extractors
specifier|private
name|String
name|extractors
decl_stmt|;
DECL|field|outputFormat
specifier|private
name|String
name|outputFormat
decl_stmt|;
DECL|field|documentIRI
specifier|private
name|String
name|documentIRI
init|=
literal|"http://mock.foo/bar"
decl_stmt|;
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"any23"
return|;
block|}
comment|/**    * Marshal data. Generate RDF.    */
DECL|method|marshal (Exchange exchange, Object object, OutputStream outputStream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|object
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|payload
init|=
name|ExchangeHelper
operator|.
name|convertToMandatoryType
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|DocumentSource
name|source
init|=
operator|new
name|StringDocumentSource
argument_list|(
name|payload
argument_list|,
name|documentIRI
argument_list|)
decl_stmt|;
name|TripleHandler
name|handler
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|NTRIPLES
case|:
name|handler
operator|=
operator|new
name|NTriplesWriter
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|TURTLE
case|:
name|handler
operator|=
operator|new
name|TurtleWriter
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|NQUADS
case|:
name|handler
operator|=
operator|new
name|NQuadsWriter
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|RDFXML
case|:
name|handler
operator|=
operator|new
name|RDFXMLWriter
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|JSONLD
case|:
name|handler
operator|=
operator|new
name|JSONLDWriter
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|MODEL
case|:
name|handler
operator|=
operator|new
name|NTriplesWriter
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
break|break;
default|default:
name|handler
operator|=
operator|new
name|NTriplesWriter
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
block|}
name|any23
operator|.
name|extract
argument_list|(
name|source
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Unmarshal the data    */
DECL|method|unmarshal (Exchange exchange, InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
comment|//TODO
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|DefaultConfiguration
operator|.
name|copy
argument_list|()
expr_stmt|;
if|if
condition|(
name|configurations
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|newConfigs
init|=
name|configurations
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|con
range|:
name|newConfigs
control|)
block|{
name|String
index|[]
name|vals
init|=
name|con
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|,
name|vals
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|extractors
operator|!=
literal|null
condition|)
block|{
name|extractorsList
operator|=
name|extractors
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configurations
operator|==
literal|null
operator|&&
name|extractors
operator|==
literal|null
condition|)
block|{
name|any23
operator|=
operator|new
name|Any23
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configurations
operator|!=
literal|null
operator|&&
name|extractors
operator|==
literal|null
condition|)
block|{
name|any23
operator|=
operator|new
name|Any23
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configurations
operator|==
literal|null
operator|&&
name|extractors
operator|!=
literal|null
condition|)
block|{
name|any23
operator|=
operator|new
name|Any23
argument_list|(
name|extractors
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configurations
operator|!=
literal|null
operator|&&
name|extractors
operator|!=
literal|null
condition|)
block|{
name|any23
operator|=
operator|new
name|Any23
argument_list|(
name|conf
argument_list|,
name|extractors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputFormat
operator|!=
literal|null
condition|)
block|{
name|format
operator|=
name|Any23OutputFormat
operator|.
name|valueOf
argument_list|(
name|outputFormat
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|method|getAny23 ()
specifier|public
name|Any23
name|getAny23
parameter_list|()
block|{
return|return
name|any23
return|;
block|}
DECL|method|setAny23 (Any23 any23)
specifier|public
name|void
name|setAny23
parameter_list|(
name|Any23
name|any23
parameter_list|)
block|{
name|this
operator|.
name|any23
operator|=
name|any23
expr_stmt|;
block|}
DECL|method|getFormat ()
specifier|public
name|Any23OutputFormat
name|getFormat
parameter_list|()
block|{
return|return
name|format
return|;
block|}
DECL|method|setFormat (Any23OutputFormat format)
specifier|public
name|void
name|setFormat
parameter_list|(
name|Any23OutputFormat
name|format
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|ModifiableConfiguration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|setConf (ModifiableConfiguration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|ModifiableConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getExtractorsList ()
specifier|public
name|String
index|[]
name|getExtractorsList
parameter_list|()
block|{
return|return
name|extractorsList
return|;
block|}
DECL|method|setExtractorsList (String[] extractorsList)
specifier|public
name|void
name|setExtractorsList
parameter_list|(
name|String
index|[]
name|extractorsList
parameter_list|)
block|{
name|this
operator|.
name|extractorsList
operator|=
name|extractorsList
expr_stmt|;
block|}
DECL|method|getConfigurations ()
specifier|public
name|String
name|getConfigurations
parameter_list|()
block|{
return|return
name|configurations
return|;
block|}
DECL|method|setConfigurations (String configurations)
specifier|public
name|void
name|setConfigurations
parameter_list|(
name|String
name|configurations
parameter_list|)
block|{
name|this
operator|.
name|configurations
operator|=
name|configurations
expr_stmt|;
block|}
DECL|method|getExtractors ()
specifier|public
name|String
name|getExtractors
parameter_list|()
block|{
return|return
name|extractors
return|;
block|}
DECL|method|setExtractors (String extractors)
specifier|public
name|void
name|setExtractors
parameter_list|(
name|String
name|extractors
parameter_list|)
block|{
name|this
operator|.
name|extractors
operator|=
name|extractors
expr_stmt|;
block|}
DECL|method|getOutputFormat ()
specifier|public
name|String
name|getOutputFormat
parameter_list|()
block|{
return|return
name|outputFormat
return|;
block|}
DECL|method|setOutputFormat (String outputFormat)
specifier|public
name|void
name|setOutputFormat
parameter_list|(
name|String
name|outputFormat
parameter_list|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
block|}
block|}
end_class

end_unit

