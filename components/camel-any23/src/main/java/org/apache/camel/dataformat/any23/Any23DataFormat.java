begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.any23
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|any23
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|Any23
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|extractor
operator|.
name|ExtractionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|http
operator|.
name|HTTPClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|source
operator|.
name|DocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|source
operator|.
name|HTTPDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|source
operator|.
name|StringDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|NTriplesWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|TripleHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|any23
operator|.
name|writer
operator|.
name|TripleHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Dataformat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Dataformat for any23 .. This dataformat is intended to convert HTML from a  * site (or file) into rdf.  */
end_comment

begin_class
annotation|@
name|Dataformat
argument_list|(
literal|"any23"
argument_list|)
DECL|class|Any23DataFormat
specifier|public
class|class
name|Any23DataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
block|{
comment|/*      * Our Logger    */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Any23DataFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|parameters
specifier|private
name|Any23Parameters
name|parameters
decl_stmt|;
comment|/**    * String or Node to return    */
DECL|field|dataObjectType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|dataObjectType
decl_stmt|;
comment|/**    * What is the default output format ?    */
DECL|field|method
specifier|private
name|String
name|method
decl_stmt|;
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"any23"
return|;
block|}
comment|/*protected final void setDefaultParameters () {      parameters = new Any23Parameters ();      }*/
comment|/*public Any23DataFormat (){     this.setDefaultParameters();   }*/
comment|/**    * Marshal data. Generate RDF.    */
DECL|method|marshal (Exchange exchange, Object object, OutputStream outputStream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|object
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
comment|/*final String payload = ExchangeHelper.convertToMandatoryType(exchange, String.class, object);    System.out.print ("payload");    System.out.print (payload);         Any23 runner = new Any23();*/
name|anytordf
argument_list|(
name|exchange
argument_list|,
name|object
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
comment|//  return n3;
comment|// throw new CamelException("Under construction");
block|}
comment|/**    * Unmarshal the data    */
DECL|method|unmarshal (Exchange exchange, InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|Any23
name|runner
init|=
operator|new
name|Any23
argument_list|()
decl_stmt|;
name|runner
operator|.
name|setHTTPUserAgent
argument_list|(
literal|"test-user-agent"
argument_list|)
expr_stmt|;
name|HTTPClient
name|httpClient
init|=
name|runner
operator|.
name|getHTTPClient
argument_list|()
decl_stmt|;
name|DocumentSource
name|source
init|=
operator|new
name|HTTPDocumentSource
argument_list|(
name|httpClient
argument_list|,
literal|"http://dbpedia.org/page/Ecuador"
argument_list|)
decl_stmt|;
comment|//  System.out.print("#######");
comment|//  System.out.print(source.getContentType());
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|TripleHandler
name|handler
init|=
operator|new
name|NTriplesWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|runner
operator|.
name|extract
argument_list|(
name|source
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|n3
init|=
name|out
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|//  System.out.print (n3);
return|return
name|n3
return|;
comment|//throw new CamelException("Under construction");
block|}
DECL|method|anytordf (final Exchange exchange, Object object, OutputStream outputStream)
specifier|private
name|void
name|anytordf
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
name|Object
name|object
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExtractionException
throws|,
name|TypeConversionException
throws|,
name|NoTypeConversionAvailableException
throws|,
name|TripleHandlerException
block|{
specifier|final
name|String
name|payload
init|=
name|ExchangeHelper
operator|.
name|convertToMandatoryType
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PAYLOAD"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|DocumentSource
name|source
init|=
operator|new
name|StringDocumentSource
argument_list|(
name|payload
argument_list|,
literal|"http://host.com/service"
argument_list|)
decl_stmt|;
name|Any23
name|runner
init|=
operator|new
name|Any23
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|this
operator|.
name|parameters
operator|=
operator|new
name|Any23Parameters
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|runner
operator|.
name|extract
argument_list|(
name|source
argument_list|,
name|this
operator|.
name|parameters
operator|.
name|getTripleHandlerOutput
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameters
operator|.
name|getTripleHandlerOutput
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// out.toString("UTF-8").get
comment|// out.toString("UTF-8");
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SALIDA"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

