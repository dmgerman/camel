begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.cw
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|cw
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|cloudwatch
operator|.
name|model
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|cloudwatch
operator|.
name|model
operator|.
name|MetricDatum
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|cloudwatch
operator|.
name|model
operator|.
name|PutMetricDataRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|cloudwatch
operator|.
name|model
operator|.
name|StandardUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * A Producer which sends messages to the AWS CloudWatch Service  */
end_comment

begin_class
DECL|class|CwProducer
specifier|public
class|class
name|CwProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|cwProducerToString
specifier|private
specifier|transient
name|String
name|cwProducerToString
decl_stmt|;
DECL|method|CwProducer (Endpoint endpoint)
specifier|public
name|CwProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|MetricDatum
argument_list|>
name|metricData
init|=
name|getMetricData
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|PutMetricDataRequest
name|request
init|=
operator|new
name|PutMetricDataRequest
argument_list|()
operator|.
name|withMetricData
argument_list|(
name|metricData
argument_list|)
operator|.
name|withNamespace
argument_list|(
name|determineNameSpace
argument_list|(
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending request [{}] from exchange [{}]..."
argument_list|,
name|request
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|getCloudWatchClient
argument_list|()
operator|.
name|putMetricData
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|getMetricData (Exchange exchange)
specifier|private
name|List
argument_list|<
name|MetricDatum
argument_list|>
name|getMetricData
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|List
condition|)
block|{
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|body
argument_list|)
return|;
block|}
if|if
condition|(
name|body
operator|instanceof
name|MetricDatum
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|MetricDatum
operator|)
name|body
argument_list|)
return|;
block|}
name|MetricDatum
name|metricDatum
init|=
operator|new
name|MetricDatum
argument_list|()
operator|.
name|withMetricName
argument_list|(
name|determineName
argument_list|(
name|exchange
argument_list|)
argument_list|)
operator|.
name|withValue
argument_list|(
name|determineValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
operator|.
name|withUnit
argument_list|(
name|determineUnit
argument_list|(
name|exchange
argument_list|)
argument_list|)
operator|.
name|withTimestamp
argument_list|(
name|determineTimestamp
argument_list|(
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
name|setDimension
argument_list|(
name|metricDatum
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|metricDatum
argument_list|)
return|;
block|}
DECL|method|setDimension (MetricDatum metricDatum, Exchange exchange)
specifier|private
name|void
name|setDimension
parameter_list|(
name|MetricDatum
name|metricDatum
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CwConstants
operator|.
name|METRIC_DIMENSION_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CwConstants
operator|.
name|METRIC_DIMENSION_VALUE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|metricDatum
operator|.
name|withDimensions
argument_list|(
operator|new
name|Dimension
argument_list|()
operator|.
name|withName
argument_list|(
name|name
argument_list|)
operator|.
name|withValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dimensions
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CwConstants
operator|.
name|METRIC_DIMENSIONS
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dimensions
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|Dimension
argument_list|>
name|dimensionCollection
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dimensionEntry
range|:
name|dimensions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Dimension
name|dimension
init|=
operator|new
name|Dimension
argument_list|()
operator|.
name|withName
argument_list|(
name|dimensionEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|withValue
argument_list|(
name|dimensionEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|dimensionCollection
operator|.
name|add
argument_list|(
name|dimension
argument_list|)
expr_stmt|;
block|}
name|metricDatum
operator|.
name|withDimensions
argument_list|(
name|dimensionCollection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|determineTimestamp (Exchange exchange)
specifier|private
name|Date
name|determineTimestamp
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Date
name|timestamp
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CwConstants
operator|.
name|METRIC_TIMESTAMP
argument_list|,
name|Date
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|timestamp
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
return|return
name|timestamp
return|;
block|}
DECL|method|determineNameSpace (Exchange exchange)
specifier|private
name|String
name|determineNameSpace
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|namespace
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CwConstants
operator|.
name|METRIC_NAMESPACE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getNamespace
argument_list|()
expr_stmt|;
block|}
return|return
name|namespace
return|;
block|}
DECL|method|determineName (Exchange exchange)
specifier|private
name|String
name|determineName
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CwConstants
operator|.
name|METRIC_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
DECL|method|determineValue (Exchange exchange)
specifier|private
name|Double
name|determineValue
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Double
name|value
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CwConstants
operator|.
name|METRIC_VALUE
argument_list|,
name|Double
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|Double
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|determineUnit (Exchange exchange)
specifier|private
name|StandardUnit
name|determineUnit
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|unit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CwConstants
operator|.
name|METRIC_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|unit
operator|==
literal|null
condition|)
block|{
name|unit
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getUnit
argument_list|()
expr_stmt|;
block|}
return|return
name|unit
operator|!=
literal|null
condition|?
name|StandardUnit
operator|.
name|valueOf
argument_list|(
name|unit
argument_list|)
else|:
name|StandardUnit
operator|.
name|Count
return|;
block|}
DECL|method|getConfiguration ()
specifier|protected
name|CwConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|cwProducerToString
operator|==
literal|null
condition|)
block|{
name|cwProducerToString
operator|=
literal|"CwProducer["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|cwProducerToString
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|CwEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|CwEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
block|}
end_class

end_unit

