begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.nats
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|nats
operator|.
name|client
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|io
operator|.
name|nats
operator|.
name|client
operator|.
name|Options
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|NatsConfiguration
specifier|public
class|class
name|NatsConfiguration
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|servers
specifier|private
name|String
name|servers
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|topic
specifier|private
name|String
name|topic
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|reconnect
specifier|private
name|boolean
name|reconnect
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
DECL|field|pedantic
specifier|private
name|boolean
name|pedantic
decl_stmt|;
annotation|@
name|UriParam
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"2000"
argument_list|)
DECL|field|reconnectTimeWait
specifier|private
name|int
name|reconnectTimeWait
init|=
literal|2000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"60"
argument_list|)
DECL|field|maxReconnectAttempts
specifier|private
name|int
name|maxReconnectAttempts
init|=
name|Options
operator|.
name|DEFAULT_MAX_RECONNECT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"120000"
argument_list|)
DECL|field|pingInterval
specifier|private
name|int
name|pingInterval
init|=
literal|120000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"2000"
argument_list|)
DECL|field|connectionTimeout
specifier|private
name|int
name|connectionTimeout
init|=
literal|2000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"2"
argument_list|)
DECL|field|maxPingsOut
specifier|private
name|int
name|maxPingsOut
init|=
name|Options
operator|.
name|DEFAULT_MAX_PINGS_OUT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|replySubject
specifier|private
name|String
name|replySubject
decl_stmt|;
annotation|@
name|UriParam
DECL|field|noRandomizeServers
specifier|private
name|boolean
name|noRandomizeServers
decl_stmt|;
annotation|@
name|UriParam
DECL|field|noEcho
specifier|private
name|boolean
name|noEcho
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|queueName
specifier|private
name|String
name|queueName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|maxMessages
specifier|private
name|String
name|maxMessages
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|poolSize
specifier|private
name|int
name|poolSize
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|flushConnection
specifier|private
name|boolean
name|flushConnection
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"1000"
argument_list|)
DECL|field|flushTimeout
specifier|private
name|int
name|flushTimeout
init|=
literal|1000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|secure
specifier|private
name|boolean
name|secure
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
comment|/**      * URLs to one or more NAT servers. Use comma to separate URLs when      * specifying multiple servers.      */
DECL|method|getServers ()
specifier|public
name|String
name|getServers
parameter_list|()
block|{
return|return
name|servers
return|;
block|}
DECL|method|setServers (String servers)
specifier|public
name|void
name|setServers
parameter_list|(
name|String
name|servers
parameter_list|)
block|{
name|this
operator|.
name|servers
operator|=
name|servers
expr_stmt|;
block|}
comment|/**      * The name of topic we want to use      */
DECL|method|getTopic ()
specifier|public
name|String
name|getTopic
parameter_list|()
block|{
return|return
name|topic
return|;
block|}
DECL|method|setTopic (String topic)
specifier|public
name|void
name|setTopic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|this
operator|.
name|topic
operator|=
name|topic
expr_stmt|;
block|}
comment|/**      * Whether or not using reconnection feature      */
DECL|method|getReconnect ()
specifier|public
name|boolean
name|getReconnect
parameter_list|()
block|{
return|return
name|reconnect
return|;
block|}
DECL|method|setReconnect (boolean reconnect)
specifier|public
name|void
name|setReconnect
parameter_list|(
name|boolean
name|reconnect
parameter_list|)
block|{
name|this
operator|.
name|reconnect
operator|=
name|reconnect
expr_stmt|;
block|}
comment|/**      * Whether or not running in pedantic mode (this affects performace)      */
DECL|method|getPedantic ()
specifier|public
name|boolean
name|getPedantic
parameter_list|()
block|{
return|return
name|pedantic
return|;
block|}
DECL|method|setPedantic (boolean pedantic)
specifier|public
name|void
name|setPedantic
parameter_list|(
name|boolean
name|pedantic
parameter_list|)
block|{
name|this
operator|.
name|pedantic
operator|=
name|pedantic
expr_stmt|;
block|}
comment|/**      * Whether or not running in verbose mode      */
DECL|method|getVerbose ()
specifier|public
name|boolean
name|getVerbose
parameter_list|()
block|{
return|return
name|verbose
return|;
block|}
DECL|method|setVerbose (boolean verbose)
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
comment|/**      * Waiting time before attempts reconnection (in milliseconds)      */
DECL|method|getReconnectTimeWait ()
specifier|public
name|int
name|getReconnectTimeWait
parameter_list|()
block|{
return|return
name|reconnectTimeWait
return|;
block|}
DECL|method|setReconnectTimeWait (int reconnectTimeWait)
specifier|public
name|void
name|setReconnectTimeWait
parameter_list|(
name|int
name|reconnectTimeWait
parameter_list|)
block|{
name|this
operator|.
name|reconnectTimeWait
operator|=
name|reconnectTimeWait
expr_stmt|;
block|}
comment|/**      * Max reconnection attempts      */
DECL|method|getMaxReconnectAttempts ()
specifier|public
name|int
name|getMaxReconnectAttempts
parameter_list|()
block|{
return|return
name|maxReconnectAttempts
return|;
block|}
DECL|method|setMaxReconnectAttempts (int maxReconnectAttempts)
specifier|public
name|void
name|setMaxReconnectAttempts
parameter_list|(
name|int
name|maxReconnectAttempts
parameter_list|)
block|{
name|this
operator|.
name|maxReconnectAttempts
operator|=
name|maxReconnectAttempts
expr_stmt|;
block|}
comment|/**      * maximum number of pings have not received a response allowed by the      * client      */
DECL|method|getMaxPingsOut ()
specifier|public
name|int
name|getMaxPingsOut
parameter_list|()
block|{
return|return
name|maxPingsOut
return|;
block|}
DECL|method|setMaxPingsOut (int maxPingsOut)
specifier|public
name|void
name|setMaxPingsOut
parameter_list|(
name|int
name|maxPingsOut
parameter_list|)
block|{
name|this
operator|.
name|maxPingsOut
operator|=
name|maxPingsOut
expr_stmt|;
block|}
comment|/**      * Ping interval to be aware if connection is still alive (in milliseconds)      */
DECL|method|getPingInterval ()
specifier|public
name|int
name|getPingInterval
parameter_list|()
block|{
return|return
name|pingInterval
return|;
block|}
DECL|method|setPingInterval (int pingInterval)
specifier|public
name|void
name|setPingInterval
parameter_list|(
name|int
name|pingInterval
parameter_list|)
block|{
name|this
operator|.
name|pingInterval
operator|=
name|pingInterval
expr_stmt|;
block|}
comment|/**      * Timeout for connection attempts. (in milliseconds)      */
DECL|method|getConnectionTimeout ()
specifier|public
name|int
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
DECL|method|setConnectionTimeout (int connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
comment|/**      * the subject to which subscribers should send response      */
DECL|method|getReplySubject ()
specifier|public
name|String
name|getReplySubject
parameter_list|()
block|{
return|return
name|replySubject
return|;
block|}
DECL|method|setReplySubject (String replySubject)
specifier|public
name|void
name|setReplySubject
parameter_list|(
name|String
name|replySubject
parameter_list|)
block|{
name|this
operator|.
name|replySubject
operator|=
name|replySubject
expr_stmt|;
block|}
comment|/**      * Whether or not randomizing the order of servers for the connection      * attempts      */
DECL|method|getNoRandomizeServers ()
specifier|public
name|boolean
name|getNoRandomizeServers
parameter_list|()
block|{
return|return
name|noRandomizeServers
return|;
block|}
DECL|method|setNoRandomizeServers (boolean noRandomizeServers)
specifier|public
name|void
name|setNoRandomizeServers
parameter_list|(
name|boolean
name|noRandomizeServers
parameter_list|)
block|{
name|this
operator|.
name|noRandomizeServers
operator|=
name|noRandomizeServers
expr_stmt|;
block|}
comment|/**      * Turn off echo. If supported by the gnatsd version you are connecting to      * this flag will prevent the server from echoing messages back to the      * connection if it has subscriptions on the subject being published to.      */
DECL|method|getNoEcho ()
specifier|public
name|boolean
name|getNoEcho
parameter_list|()
block|{
return|return
name|noEcho
return|;
block|}
DECL|method|setNoEcho (boolean noEcho)
specifier|public
name|void
name|setNoEcho
parameter_list|(
name|boolean
name|noEcho
parameter_list|)
block|{
name|this
operator|.
name|noEcho
operator|=
name|noEcho
expr_stmt|;
block|}
comment|/**      * The Queue name if we are using nats for a queue configuration      */
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
DECL|method|setQueueName (String queueName)
specifier|public
name|void
name|setQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
block|}
comment|/**      * Stop receiving messages from a topic we are subscribing to after      * maxMessages      */
DECL|method|getMaxMessages ()
specifier|public
name|String
name|getMaxMessages
parameter_list|()
block|{
return|return
name|maxMessages
return|;
block|}
DECL|method|setMaxMessages (String maxMessages)
specifier|public
name|void
name|setMaxMessages
parameter_list|(
name|String
name|maxMessages
parameter_list|)
block|{
name|this
operator|.
name|maxMessages
operator|=
name|maxMessages
expr_stmt|;
block|}
comment|/**      * Consumer pool size      */
DECL|method|getPoolSize ()
specifier|public
name|int
name|getPoolSize
parameter_list|()
block|{
return|return
name|poolSize
return|;
block|}
DECL|method|setPoolSize (int poolSize)
specifier|public
name|void
name|setPoolSize
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|this
operator|.
name|poolSize
operator|=
name|poolSize
expr_stmt|;
block|}
DECL|method|isFlushConnection ()
specifier|public
name|boolean
name|isFlushConnection
parameter_list|()
block|{
return|return
name|flushConnection
return|;
block|}
comment|/**      * Define if we want to flush connection or not      */
DECL|method|setFlushConnection (boolean flushConnection)
specifier|public
name|void
name|setFlushConnection
parameter_list|(
name|boolean
name|flushConnection
parameter_list|)
block|{
name|this
operator|.
name|flushConnection
operator|=
name|flushConnection
expr_stmt|;
block|}
DECL|method|getFlushTimeout ()
specifier|public
name|int
name|getFlushTimeout
parameter_list|()
block|{
return|return
name|flushTimeout
return|;
block|}
comment|/**      * Set the flush timeout (in milliseconds)      */
DECL|method|setFlushTimeout (int flushTimeout)
specifier|public
name|void
name|setFlushTimeout
parameter_list|(
name|int
name|flushTimeout
parameter_list|)
block|{
name|this
operator|.
name|flushTimeout
operator|=
name|flushTimeout
expr_stmt|;
block|}
comment|/**      * Set secure option indicating TLS is required      */
DECL|method|isSecure ()
specifier|public
name|boolean
name|isSecure
parameter_list|()
block|{
return|return
name|secure
return|;
block|}
DECL|method|setSecure (boolean secure)
specifier|public
name|void
name|setSecure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|this
operator|.
name|secure
operator|=
name|secure
expr_stmt|;
block|}
comment|/**      * To configure security using SSLContextParameters      */
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|createOptions ()
specifier|public
name|Builder
name|createOptions
parameter_list|()
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IllegalArgumentException
block|{
name|Builder
name|builder
init|=
operator|new
name|Options
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|server
argument_list|(
name|splitServers
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getVerbose
argument_list|()
condition|)
block|{
name|builder
operator|.
name|verbose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getPedantic
argument_list|()
condition|)
block|{
name|builder
operator|.
name|pedantic
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isSecure
argument_list|()
condition|)
block|{
name|builder
operator|.
name|secure
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getReconnect
argument_list|()
condition|)
block|{
name|builder
operator|.
name|noReconnect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|maxReconnects
argument_list|(
name|getMaxReconnectAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|reconnectWait
argument_list|(
name|Duration
operator|.
name|ofMillis
argument_list|(
name|getReconnectTimeWait
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|pingInterval
argument_list|(
name|Duration
operator|.
name|ofMillis
argument_list|(
name|getPingInterval
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|connectionTimeout
argument_list|(
name|Duration
operator|.
name|ofMillis
argument_list|(
name|getConnectionTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|maxPingsOut
argument_list|(
name|getMaxPingsOut
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getNoRandomizeServers
argument_list|()
condition|)
block|{
name|builder
operator|.
name|noRandomize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getNoEcho
argument_list|()
condition|)
block|{
name|builder
operator|.
name|noEcho
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|splitServers ()
specifier|private
name|String
name|splitServers
parameter_list|()
block|{
name|StringBuilder
name|servers
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|"nats://"
decl_stmt|;
name|String
index|[]
name|pieces
init|=
name|getServers
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pieces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|pieces
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|servers
operator|.
name|append
argument_list|(
name|prefix
operator|+
name|pieces
index|[
name|i
index|]
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|servers
operator|.
name|append
argument_list|(
name|prefix
operator|+
name|pieces
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|servers
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

