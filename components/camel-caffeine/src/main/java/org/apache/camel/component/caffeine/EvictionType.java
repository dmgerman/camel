begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.caffeine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|caffeine
package|;
end_package

begin_enum
DECL|enum|EvictionType
specifier|public
enum|enum
name|EvictionType
block|{
comment|// type
DECL|enumConstant|SIZE_BASED
name|SIZE_BASED
argument_list|(
literal|"size_based"
argument_list|)
block|,
DECL|enumConstant|TIME_BASED
name|TIME_BASED
argument_list|(
literal|"time_based"
argument_list|)
block|;
DECL|field|values
specifier|private
specifier|static
name|EvictionType
index|[]
name|values
init|=
name|values
argument_list|()
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|method|EvictionType (String type)
name|EvictionType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getEvictionType (String name)
specifier|public
specifier|static
name|EvictionType
name|getEvictionType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|EvictionType
name|evictionType
range|:
name|values
control|)
block|{
if|if
condition|(
name|evictionType
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
operator|||
name|evictionType
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|evictionType
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Eviction type '%s' is not supported by this component."
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
end_enum

end_unit

