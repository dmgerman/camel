begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.caffeine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|caffeine
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|CaffeineConfiguration
specifier|public
class|class
name|CaffeineConfiguration
implements|implements
name|Cloneable
block|{
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|createCacheIfNotExist
specifier|private
name|boolean
name|createCacheIfNotExist
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|action
specifier|private
name|String
name|action
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|key
specifier|private
name|Object
name|key
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|,
name|defaultValue
operator|=
literal|"java.lang.Object"
argument_list|)
DECL|field|keyType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|keyType
init|=
name|Object
operator|.
name|class
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|,
name|defaultValue
operator|=
literal|"java.lang.Object"
argument_list|)
DECL|field|valueType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
init|=
name|Object
operator|.
name|class
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|cache
specifier|private
name|Cache
name|cache
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|cacheLoader
specifier|private
name|CacheLoader
name|cacheLoader
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|statsEnabled
specifier|private
name|boolean
name|statsEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"10000"
argument_list|)
DECL|field|initialCapacity
specifier|private
name|int
name|initialCapacity
init|=
literal|10000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"10000"
argument_list|)
DECL|field|maximumSize
specifier|private
name|int
name|maximumSize
init|=
literal|10000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"SIZE_BASED"
argument_list|)
DECL|field|evictionType
specifier|private
name|EvictionType
name|evictionType
init|=
name|EvictionType
operator|.
name|SIZE_BASED
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"300"
argument_list|)
DECL|field|expireAfterAccessTime
specifier|private
name|int
name|expireAfterAccessTime
init|=
literal|300
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"300"
argument_list|)
DECL|field|expireAfterWriteTime
specifier|private
name|int
name|expireAfterWriteTime
init|=
literal|300
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|removalListener
specifier|private
name|RemovalListener
name|removalListener
decl_stmt|;
DECL|method|CaffeineConfiguration ()
specifier|public
name|CaffeineConfiguration
parameter_list|()
block|{     }
DECL|method|isCreateCacheIfNotExist ()
specifier|public
name|boolean
name|isCreateCacheIfNotExist
parameter_list|()
block|{
return|return
name|createCacheIfNotExist
return|;
block|}
comment|/**      * Configure if a cache need to be created if it does exist or can't be      * pre-configured.      */
DECL|method|setCreateCacheIfNotExist (boolean createCacheIfNotExist)
specifier|public
name|void
name|setCreateCacheIfNotExist
parameter_list|(
name|boolean
name|createCacheIfNotExist
parameter_list|)
block|{
name|this
operator|.
name|createCacheIfNotExist
operator|=
name|createCacheIfNotExist
expr_stmt|;
block|}
DECL|method|getAction ()
specifier|public
name|String
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
comment|/**      * To configure the default cache action. If an action is set in the message      * header, then the operation from the header takes precedence.      */
DECL|method|setAction (String action)
specifier|public
name|void
name|setAction
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
DECL|method|getKey ()
specifier|public
name|Object
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * To configure the default action key. If a key is set in the message      * header, then the key from the header takes precedence.      */
DECL|method|setKey (Object key)
specifier|public
name|void
name|setKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getKeyType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getKeyType
parameter_list|()
block|{
return|return
name|keyType
return|;
block|}
comment|/**      * The cache key type, default "java.lang.Object"      */
DECL|method|setKeyType (Class<?> keyType)
specifier|public
name|void
name|setKeyType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|keyType
parameter_list|)
block|{
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
block|}
DECL|method|getValueType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getValueType
parameter_list|()
block|{
return|return
name|valueType
return|;
block|}
comment|/**      * The cache value type, default "java.lang.Object"      */
DECL|method|setValueType (Class<?> valueType)
specifier|public
name|void
name|setValueType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
parameter_list|)
block|{
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
block|}
DECL|method|getCache ()
specifier|public
name|Cache
name|getCache
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
comment|/**      * To configure the default an already instantianted cache to be used      */
DECL|method|setCache (Cache cache)
specifier|public
name|void
name|setCache
parameter_list|(
name|Cache
name|cache
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
DECL|method|getCacheLoader ()
specifier|public
name|CacheLoader
name|getCacheLoader
parameter_list|()
block|{
return|return
name|cacheLoader
return|;
block|}
comment|/**      * To configure a CacheLoader in case of a LoadCache use      */
DECL|method|setCacheLoader (CacheLoader cacheLoader)
specifier|public
name|void
name|setCacheLoader
parameter_list|(
name|CacheLoader
name|cacheLoader
parameter_list|)
block|{
name|this
operator|.
name|cacheLoader
operator|=
name|cacheLoader
expr_stmt|;
block|}
DECL|method|isStatsEnabled ()
specifier|public
name|boolean
name|isStatsEnabled
parameter_list|()
block|{
return|return
name|statsEnabled
return|;
block|}
comment|/**      * To enable stats on the cache      */
DECL|method|setStatsEnabled (boolean statsEnabled)
specifier|public
name|void
name|setStatsEnabled
parameter_list|(
name|boolean
name|statsEnabled
parameter_list|)
block|{
name|this
operator|.
name|statsEnabled
operator|=
name|statsEnabled
expr_stmt|;
block|}
DECL|method|getInitialCapacity ()
specifier|public
name|int
name|getInitialCapacity
parameter_list|()
block|{
return|return
name|initialCapacity
return|;
block|}
comment|/**      * Set the initial Capacity for the cache      */
DECL|method|setInitialCapacity (int initialCapacity)
specifier|public
name|void
name|setInitialCapacity
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|this
operator|.
name|initialCapacity
operator|=
name|initialCapacity
expr_stmt|;
block|}
DECL|method|getMaximumSize ()
specifier|public
name|int
name|getMaximumSize
parameter_list|()
block|{
return|return
name|maximumSize
return|;
block|}
comment|/**      * Set the maximum size for the cache      */
DECL|method|setMaximumSize (int maximumSize)
specifier|public
name|void
name|setMaximumSize
parameter_list|(
name|int
name|maximumSize
parameter_list|)
block|{
name|this
operator|.
name|maximumSize
operator|=
name|maximumSize
expr_stmt|;
block|}
DECL|method|getEvictionType ()
specifier|public
name|EvictionType
name|getEvictionType
parameter_list|()
block|{
return|return
name|evictionType
return|;
block|}
comment|/**      * Set the eviction Type for this cache      */
DECL|method|setEvictionType (EvictionType evictionType)
specifier|public
name|void
name|setEvictionType
parameter_list|(
name|EvictionType
name|evictionType
parameter_list|)
block|{
name|this
operator|.
name|evictionType
operator|=
name|evictionType
expr_stmt|;
block|}
DECL|method|getExpireAfterAccessTime ()
specifier|public
name|int
name|getExpireAfterAccessTime
parameter_list|()
block|{
return|return
name|expireAfterAccessTime
return|;
block|}
comment|/**      * Set the expire After Access Time in case of time based Eviction (in      * seconds)      */
DECL|method|setExpireAfterAccessTime (int expireAfterAccessTime)
specifier|public
name|void
name|setExpireAfterAccessTime
parameter_list|(
name|int
name|expireAfterAccessTime
parameter_list|)
block|{
name|this
operator|.
name|expireAfterAccessTime
operator|=
name|expireAfterAccessTime
expr_stmt|;
block|}
DECL|method|getExpireAfterWriteTime ()
specifier|public
name|int
name|getExpireAfterWriteTime
parameter_list|()
block|{
return|return
name|expireAfterWriteTime
return|;
block|}
comment|/**      * Set the expire After Access Write in case of time based Eviction (in      * seconds)      */
DECL|method|setExpireAfterWriteTime (int expireAfterWriteTime)
specifier|public
name|void
name|setExpireAfterWriteTime
parameter_list|(
name|int
name|expireAfterWriteTime
parameter_list|)
block|{
name|this
operator|.
name|expireAfterWriteTime
operator|=
name|expireAfterWriteTime
expr_stmt|;
block|}
DECL|method|getRemovalListener ()
specifier|public
name|RemovalListener
name|getRemovalListener
parameter_list|()
block|{
return|return
name|removalListener
return|;
block|}
comment|/**      * Set a specific removal Listener for the cache      */
DECL|method|setRemovalListener (RemovalListener removalListener)
specifier|public
name|void
name|setRemovalListener
parameter_list|(
name|RemovalListener
name|removalListener
parameter_list|)
block|{
name|this
operator|.
name|removalListener
operator|=
name|removalListener
expr_stmt|;
block|}
comment|// ****************************
comment|// Cloneable
comment|// ****************************
DECL|method|copy ()
specifier|public
name|CaffeineConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|CaffeineConfiguration
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

