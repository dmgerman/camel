begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.caffeine.cache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|caffeine
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|stats
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|stats
operator|.
name|StatsCounter
import|;
end_import

begin_class
DECL|class|MetricsStatsCounter
specifier|public
class|class
name|MetricsStatsCounter
implements|implements
name|StatsCounter
block|{
DECL|field|hitCount
specifier|private
specifier|final
name|Meter
name|hitCount
decl_stmt|;
DECL|field|missCount
specifier|private
specifier|final
name|Meter
name|missCount
decl_stmt|;
DECL|field|loadSuccessCount
specifier|private
specifier|final
name|Meter
name|loadSuccessCount
decl_stmt|;
DECL|field|loadFailureCount
specifier|private
specifier|final
name|Meter
name|loadFailureCount
decl_stmt|;
DECL|field|totalLoadTime
specifier|private
specifier|final
name|Timer
name|totalLoadTime
decl_stmt|;
DECL|field|evictionCount
specifier|private
specifier|final
name|Meter
name|evictionCount
decl_stmt|;
DECL|field|evictionWeight
specifier|private
specifier|final
name|Meter
name|evictionWeight
decl_stmt|;
DECL|method|MetricsStatsCounter (MetricRegistry registry)
specifier|public
name|MetricsStatsCounter
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|)
block|{
name|hitCount
operator|=
name|registry
operator|.
name|meter
argument_list|(
literal|"camelcache.hits"
argument_list|)
expr_stmt|;
name|missCount
operator|=
name|registry
operator|.
name|meter
argument_list|(
literal|"camelcache.misses"
argument_list|)
expr_stmt|;
name|totalLoadTime
operator|=
name|registry
operator|.
name|timer
argument_list|(
literal|"camelcache.loads"
argument_list|)
expr_stmt|;
name|loadSuccessCount
operator|=
name|registry
operator|.
name|meter
argument_list|(
literal|"camelcache.loads-success"
argument_list|)
expr_stmt|;
name|loadFailureCount
operator|=
name|registry
operator|.
name|meter
argument_list|(
literal|"camelcache.loads-failure"
argument_list|)
expr_stmt|;
name|evictionCount
operator|=
name|registry
operator|.
name|meter
argument_list|(
literal|"camelcache.evictions"
argument_list|)
expr_stmt|;
name|evictionWeight
operator|=
name|registry
operator|.
name|meter
argument_list|(
literal|"camelcache.evictions-weight"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordHits (int count)
specifier|public
name|void
name|recordHits
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|hitCount
operator|.
name|mark
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordMisses (int count)
specifier|public
name|void
name|recordMisses
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|missCount
operator|.
name|mark
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordLoadSuccess (long loadTime)
specifier|public
name|void
name|recordLoadSuccess
parameter_list|(
name|long
name|loadTime
parameter_list|)
block|{
name|loadSuccessCount
operator|.
name|mark
argument_list|()
expr_stmt|;
name|totalLoadTime
operator|.
name|update
argument_list|(
name|loadTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordLoadFailure (long loadTime)
specifier|public
name|void
name|recordLoadFailure
parameter_list|(
name|long
name|loadTime
parameter_list|)
block|{
name|loadFailureCount
operator|.
name|mark
argument_list|()
expr_stmt|;
name|totalLoadTime
operator|.
name|update
argument_list|(
name|loadTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordEviction ()
specifier|public
name|void
name|recordEviction
parameter_list|()
block|{
name|recordEviction
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordEviction (int weight)
specifier|public
name|void
name|recordEviction
parameter_list|(
name|int
name|weight
parameter_list|)
block|{
name|evictionCount
operator|.
name|mark
argument_list|()
expr_stmt|;
name|evictionWeight
operator|.
name|mark
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|snapshot ()
specifier|public
name|CacheStats
name|snapshot
parameter_list|()
block|{
return|return
operator|new
name|CacheStats
argument_list|(
name|hitCount
operator|.
name|getCount
argument_list|()
argument_list|,
name|missCount
operator|.
name|getCount
argument_list|()
argument_list|,
name|loadSuccessCount
operator|.
name|getCount
argument_list|()
argument_list|,
name|loadFailureCount
operator|.
name|getCount
argument_list|()
argument_list|,
name|totalLoadTime
operator|.
name|getCount
argument_list|()
argument_list|,
name|evictionCount
operator|.
name|getCount
argument_list|()
argument_list|,
name|evictionWeight
operator|.
name|getCount
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|snapshot
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

