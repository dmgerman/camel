begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.caffeine.processor.aggregate
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|caffeine
operator|.
name|processor
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CaffeineAggregationRepositoryRoutesTest
specifier|public
class|class
name|CaffeineAggregationRepositoryRoutesTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|ENDPOINT_MOCK
specifier|private
specifier|static
specifier|final
name|String
name|ENDPOINT_MOCK
init|=
literal|"mock:result"
decl_stmt|;
DECL|field|ENDPOINT_DIRECT
specifier|private
specifier|static
specifier|final
name|String
name|ENDPOINT_DIRECT
init|=
literal|"direct:one"
decl_stmt|;
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|VALUES
init|=
name|generateRandomArrayOfInt
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|30
argument_list|)
decl_stmt|;
DECL|field|SUM
specifier|private
specifier|static
specifier|final
name|int
name|SUM
init|=
name|IntStream
operator|.
name|of
argument_list|(
name|VALUES
argument_list|)
operator|.
name|reduce
argument_list|(
literal|0
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|a
operator|+
name|b
argument_list|)
decl_stmt|;
DECL|field|CORRELATOR
specifier|private
specifier|static
specifier|final
name|String
name|CORRELATOR
init|=
literal|"CORRELATOR"
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
name|ENDPOINT_MOCK
argument_list|)
DECL|field|mock
specifier|private
name|MockEndpoint
name|mock
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
name|ENDPOINT_DIRECT
argument_list|)
DECL|field|producer
specifier|private
name|ProducerTemplate
name|producer
decl_stmt|;
annotation|@
name|Test
DECL|method|checkAggregationFromOneRoute ()
specifier|public
name|void
name|checkAggregationFromOneRoute
parameter_list|()
throws|throws
name|Exception
block|{
name|mock
operator|.
name|expectedMessageCount
argument_list|(
name|VALUES
operator|.
name|length
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|SUM
argument_list|)
expr_stmt|;
name|IntStream
operator|.
name|of
argument_list|(
name|VALUES
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|producer
operator|.
name|sendBodyAndHeader
argument_list|(
name|i
argument_list|,
name|CORRELATOR
argument_list|,
name|CORRELATOR
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|aggregate (Exchange oldExchange, Exchange newExchange)
specifier|private
name|Exchange
name|aggregate
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
if|if
condition|(
name|oldExchange
operator|==
literal|null
condition|)
block|{
return|return
name|newExchange
return|;
block|}
else|else
block|{
name|Integer
name|n
init|=
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|o
init|=
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|v
init|=
operator|(
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
operator|)
operator|+
operator|(
name|n
operator|==
literal|null
condition|?
literal|0
else|:
name|n
operator|)
decl_stmt|;
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|v
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|oldExchange
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|ENDPOINT_DIRECT
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"AggregatingRouteOne"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|header
argument_list|(
name|CORRELATOR
argument_list|)
argument_list|)
operator|.
name|aggregationRepository
argument_list|(
name|createAggregateRepository
argument_list|()
argument_list|)
operator|.
name|aggregationStrategy
argument_list|(
name|CaffeineAggregationRepositoryRoutesTest
operator|.
name|this
operator|::
name|aggregate
argument_list|)
operator|.
name|completionSize
argument_list|(
name|VALUES
operator|.
name|length
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:org.apache.camel.component.caffeine.processor.aggregate?level=INFO&showAll=true&multiline=true"
argument_list|)
operator|.
name|to
argument_list|(
name|ENDPOINT_MOCK
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|generateRandomArrayOfInt (int size, int lower, int upper)
specifier|protected
specifier|static
name|int
index|[]
name|generateRandomArrayOfInt
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|lower
parameter_list|,
name|int
name|upper
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
index|[]
name|array
init|=
operator|new
name|int
index|[
name|size
index|]
decl_stmt|;
name|Arrays
operator|.
name|setAll
argument_list|(
name|array
argument_list|,
name|i
lambda|->
name|random
operator|.
name|nextInt
argument_list|(
name|upper
operator|-
name|lower
argument_list|)
operator|+
name|lower
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
DECL|method|createAggregateRepository ()
specifier|protected
name|CaffeineAggregationRepository
name|createAggregateRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|CaffeineAggregationRepository
name|repository
init|=
operator|new
name|CaffeineAggregationRepository
argument_list|()
decl_stmt|;
return|return
name|repository
return|;
block|}
block|}
end_class

end_unit

