begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.hessian
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|hessian
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for {@link HessianDataFormat}.  */
end_comment

begin_class
DECL|class|HessianDataFormatWhitelistingTest
specifier|public
class|class
name|HessianDataFormatWhitelistingTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalObject ()
specifier|public
name|void
name|testMarshalAndUnmarshalObject
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestObject
name|object
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|object
operator|.
name|setBool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|object
operator|.
name|setIntNumber
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|object
operator|.
name|setFloatNumber
argument_list|(
literal|3.14159f
argument_list|)
expr_stmt|;
name|object
operator|.
name|setCharacter
argument_list|(
literal|'Z'
argument_list|)
expr_stmt|;
name|object
operator|.
name|setText
argument_list|(
literal|"random text"
argument_list|)
expr_stmt|;
name|testMarshalAndUnmarshalFailed
argument_list|(
name|object
argument_list|)
expr_stmt|;
specifier|final
name|AnotherObject
name|diffObject
init|=
operator|new
name|AnotherObject
argument_list|()
decl_stmt|;
name|object
operator|.
name|setBool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|object
operator|.
name|setIntNumber
argument_list|(
literal|45
argument_list|)
expr_stmt|;
name|testMarshalAndUnmarshalSuccess
argument_list|(
name|diffObject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HessianDataFormat
name|format
init|=
operator|new
name|HessianDataFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|setWhitelistEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDeniedUnmarshallObjects
argument_list|(
literal|"org.apache.camel.dataformat.hessian.TestObject"
argument_list|)
expr_stmt|;
name|format
operator|.
name|setAllowedUnmarshallObjects
argument_list|(
literal|"org.apache.camel.dataformat.hessian.AnotherObject"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|marshal
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:back"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|format
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:reverse"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|testMarshalAndUnmarshalFailed (final Object object)
specifier|private
name|void
name|testMarshalAndUnmarshalFailed
parameter_list|(
specifier|final
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:reverse"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isNotEqualTo
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|marshalled
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in"
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:back"
argument_list|,
name|marshalled
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testMarshalAndUnmarshalSuccess (final Object object)
specifier|private
name|void
name|testMarshalAndUnmarshalSuccess
parameter_list|(
specifier|final
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:reverse"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|mock
operator|.
name|message
argument_list|(
literal|1
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mock
operator|.
name|message
argument_list|(
literal|1
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|1
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|marshalled
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in"
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:back"
argument_list|,
name|marshalled
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

