begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.hessian
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|hessian
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test for {@link HessianDataFormat}.  */
end_comment

begin_class
DECL|class|HessianDataFormatTest
specifier|public
class|class
name|HessianDataFormatTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalNull ()
specifier|public
name|void
name|testMarshalAndUnmarshalNull
parameter_list|()
throws|throws
name|Exception
block|{
name|testMarshalAndUnmarshal
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalBoolean ()
specifier|public
name|void
name|testMarshalAndUnmarshalBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|testMarshalAndUnmarshal
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalString ()
specifier|public
name|void
name|testMarshalAndUnmarshalString
parameter_list|()
throws|throws
name|Exception
block|{
name|testMarshalAndUnmarshal
argument_list|(
literal|"This is a string"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalInteger ()
specifier|public
name|void
name|testMarshalAndUnmarshalInteger
parameter_list|()
throws|throws
name|Exception
block|{
name|testMarshalAndUnmarshal
argument_list|(
literal|42
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalLong ()
specifier|public
name|void
name|testMarshalAndUnmarshalLong
parameter_list|()
throws|throws
name|Exception
block|{
name|testMarshalAndUnmarshal
argument_list|(
literal|100_000_000_000_000L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalDouble ()
specifier|public
name|void
name|testMarshalAndUnmarshalDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|testMarshalAndUnmarshal
argument_list|(
literal|6.022e23
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalDate ()
specifier|public
name|void
name|testMarshalAndUnmarshalDate
parameter_list|()
throws|throws
name|Exception
block|{
name|testMarshalAndUnmarshal
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalArray ()
specifier|public
name|void
name|testMarshalAndUnmarshalArray
parameter_list|()
throws|throws
name|Exception
block|{
name|testMarshalAndUnmarshal
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalList ()
specifier|public
name|void
name|testMarshalAndUnmarshalList
parameter_list|()
throws|throws
name|Exception
block|{
name|testMarshalAndUnmarshal
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalMap ()
specifier|public
name|void
name|testMarshalAndUnmarshalMap
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|testMarshalAndUnmarshal
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshalObject ()
specifier|public
name|void
name|testMarshalAndUnmarshalObject
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestObject
name|object
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|object
operator|.
name|setBool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|object
operator|.
name|setIntNumber
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|object
operator|.
name|setFloatNumber
argument_list|(
literal|3.14159f
argument_list|)
expr_stmt|;
name|object
operator|.
name|setCharacter
argument_list|(
literal|'Z'
argument_list|)
expr_stmt|;
name|object
operator|.
name|setText
argument_list|(
literal|"random text"
argument_list|)
expr_stmt|;
name|testMarshalAndUnmarshal
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HessianDataFormat
name|format
init|=
operator|new
name|HessianDataFormat
argument_list|()
decl_stmt|;
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|marshal
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:back"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|format
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:reverse"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|testMarshalAndUnmarshal (final Object object)
specifier|private
name|void
name|testMarshalAndUnmarshal
parameter_list|(
specifier|final
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:reverse"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
if|if
condition|(
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|in
argument_list|(
name|arrayEqual
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Object
name|marshalled
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in"
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:back"
argument_list|,
name|marshalled
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|/** This predicate checks is two arrays have the same content. */
DECL|method|arrayEqual (final Object[] array)
specifier|private
specifier|static
name|Predicate
name|arrayEqual
parameter_list|(
specifier|final
name|Object
index|[]
name|array
parameter_list|)
block|{
return|return
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
operator|&&
name|body
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|body
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

