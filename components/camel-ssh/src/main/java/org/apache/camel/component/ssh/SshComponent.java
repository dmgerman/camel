begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ssh
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|KeyPairProvider
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link SshEndpoint}.  */
end_comment

begin_class
DECL|class|SshComponent
specifier|public
class|class
name|SshComponent
extends|extends
name|DefaultComponent
block|{
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|configuration
specifier|private
name|SshConfiguration
name|configuration
init|=
operator|new
name|SshConfiguration
argument_list|()
decl_stmt|;
DECL|method|SshComponent ()
specifier|public
name|SshComponent
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|SshConfiguration
name|newConfig
init|=
name|configuration
operator|.
name|copy
argument_list|()
decl_stmt|;
name|newConfig
operator|.
name|configure
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|SshEndpoint
name|endpoint
init|=
operator|new
name|SshEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|newConfig
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|SshConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/**      * To use the shared SSH configuration      */
DECL|method|setConfiguration (SshConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|SshConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getHost
argument_list|()
return|;
block|}
comment|/**      * Sets the hostname of the remote SSH server.      *      * @param host String representing hostname of SSH server.      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**      * Sets the port number for the remote SSH server.      *      * @param port int representing port number on remote host. Defaults to 22.      */
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getUsername
argument_list|()
return|;
block|}
comment|/**      * Sets the username to use in logging into the remote SSH server.      *      * @param username String representing login username.      */
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getPassword
argument_list|()
return|;
block|}
comment|/**      * Sets the password to use in connecting to remote SSH server.      * Requires keyPairProvider to be set to null.      *      * @param password String representing password for username at remote host.      */
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
DECL|method|getPollCommand ()
specifier|public
name|String
name|getPollCommand
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getPollCommand
argument_list|()
return|;
block|}
comment|/**      * Sets the command string to send to the remote SSH server during every poll cycle.      * Only works with camel-ssh component being used as a consumer, i.e. from("ssh://...").      * You may need to end your command with a newline, and that must be URL encoded %0A      *      * @param pollCommand String representing the command to send.      */
DECL|method|setPollCommand (String pollCommand)
specifier|public
name|void
name|setPollCommand
parameter_list|(
name|String
name|pollCommand
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setPollCommand
argument_list|(
name|pollCommand
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyPairProvider ()
specifier|public
name|KeyPairProvider
name|getKeyPairProvider
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getKeyPairProvider
argument_list|()
return|;
block|}
comment|/**      * Sets the KeyPairProvider reference to use when connecting using Certificates to the remote SSH Server.      *      * @param keyPairProvider KeyPairProvider reference to use in authenticating. If set to 'null',      *                        then will attempt to connect using username/password settings.      *      * @see KeyPairProvider      */
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setKeyPairProvider (KeyPairProvider keyPairProvider)
specifier|public
name|void
name|setKeyPairProvider
parameter_list|(
name|KeyPairProvider
name|keyPairProvider
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setKeyPairProvider
argument_list|(
name|keyPairProvider
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyType ()
specifier|public
name|String
name|getKeyType
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getKeyType
argument_list|()
return|;
block|}
comment|/**      * Sets the key type to pass to the KeyPairProvider as part of authentication.      * KeyPairProvider.loadKey(...) will be passed this value. Defaults to "ssh-rsa".      *      * @param keyType String defining the type of KeyPair to use for authentication.      *      * @see KeyPairProvider      */
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setKeyType (String keyType)
specifier|public
name|void
name|setKeyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getTimeout
argument_list|()
return|;
block|}
comment|/**      * Sets the timeout in milliseconds to wait in establishing the remote SSH server connection.      * Defaults to 30000 milliseconds.      *      * @param timeout long milliseconds to wait.      */
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**      * @deprecated As of version 2.11, replaced by {@link #getCertResource()}      */
annotation|@
name|Deprecated
DECL|method|getCertFilename ()
specifier|public
name|String
name|getCertFilename
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getCertFilename
argument_list|()
return|;
block|}
comment|/**      * Sets the resource path of the certificate to use for Authentication.      *      * @deprecated As of version 2.11, replaced by {@link #setCertResource(String)}      */
annotation|@
name|Deprecated
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setCertFilename (String certFilename)
specifier|public
name|void
name|setCertFilename
parameter_list|(
name|String
name|certFilename
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setCertFilename
argument_list|(
name|certFilename
argument_list|)
expr_stmt|;
block|}
DECL|method|getCertResource ()
specifier|public
name|String
name|getCertResource
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getCertResource
argument_list|()
return|;
block|}
comment|/**      * Sets the resource path of the certificate to use for Authentication.      * Will use {@link ResourceHelperKeyPairProvider} to resolve file based certificate, and depends on keyType setting.      *      * @param certResource String file, classpath, or http url for the certificate      */
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setCertResource (String certResource)
specifier|public
name|void
name|setCertResource
parameter_list|(
name|String
name|certResource
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setCertResource
argument_list|(
name|certResource
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the channel type to pass to the Channel as part of command execution.      * Defaults to "exec".      *      * @param channelType      *            String defining the type of Channel to use for command execution.      *      * @see org.apache.sshd.common.channel.Channel      */
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|method|setChannelType (String channelType)
specifier|public
name|void
name|setChannelType
parameter_list|(
name|String
name|channelType
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setChannelType
argument_list|(
name|channelType
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the shellPrompt to be dropped when response is read after command execution      *      * @param shellPrompt      *            String defining ending string of command line which has to be dropped when response is       *            read after command execution.      */
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|method|setShellPrompt (String shellPrompt)
specifier|public
name|void
name|setShellPrompt
parameter_list|(
name|String
name|shellPrompt
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setShellPrompt
argument_list|(
name|shellPrompt
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the sleep period in milliseconds to wait reading response from shell prompt.      * Defaults to 100 milliseconds.      *      * @param sleepForShellPrompt      *            long milliseconds to wait.      */
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|method|setSleepForShellPrompt (long sleepForShellPrompt)
specifier|public
name|void
name|setSleepForShellPrompt
parameter_list|(
name|long
name|sleepForShellPrompt
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setSleepForShellPrompt
argument_list|(
name|sleepForShellPrompt
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

