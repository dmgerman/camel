begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ssh
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|DSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|RSAPublicKeySpec
import|;
end_import

begin_class
DECL|class|SSHPublicKeyHolder
specifier|public
class|class
name|SSHPublicKeyHolder
block|{
DECL|field|SSH_RSA
specifier|private
specifier|static
specifier|final
name|String
name|SSH_RSA
init|=
literal|"ssh-rsa"
decl_stmt|;
DECL|field|SSH_DSS
specifier|private
specifier|static
specifier|final
name|String
name|SSH_DSS
init|=
literal|"ssh-dss"
decl_stmt|;
DECL|field|SSH_ECDSA
specifier|private
specifier|static
specifier|final
name|String
name|SSH_ECDSA
init|=
literal|"ecdsa-sha2-nistp256"
decl_stmt|;
DECL|field|SSH_ED25519
specifier|private
specifier|static
specifier|final
name|String
name|SSH_ED25519
init|=
literal|"ssh-ed25519"
decl_stmt|;
DECL|field|keyType
specifier|private
name|String
name|keyType
decl_stmt|;
comment|/* RSA key parts */
DECL|field|e
specifier|private
name|BigInteger
name|e
decl_stmt|;
DECL|field|m
specifier|private
name|BigInteger
name|m
decl_stmt|;
comment|/* DSA key parts */
DECL|field|p
specifier|private
name|BigInteger
name|p
decl_stmt|;
DECL|field|q
specifier|private
name|BigInteger
name|q
decl_stmt|;
DECL|field|g
specifier|private
name|BigInteger
name|g
decl_stmt|;
DECL|field|y
specifier|private
name|BigInteger
name|y
decl_stmt|;
DECL|method|getKeyType ()
specifier|public
name|String
name|getKeyType
parameter_list|()
block|{
return|return
name|keyType
return|;
block|}
DECL|method|setKeyType (String keyType)
specifier|public
name|void
name|setKeyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
block|}
DECL|method|getE ()
specifier|public
name|BigInteger
name|getE
parameter_list|()
block|{
return|return
name|e
return|;
block|}
DECL|method|setE (BigInteger e)
specifier|public
name|void
name|setE
parameter_list|(
name|BigInteger
name|e
parameter_list|)
block|{
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
block|}
DECL|method|getM ()
specifier|public
name|BigInteger
name|getM
parameter_list|()
block|{
return|return
name|m
return|;
block|}
DECL|method|setM (BigInteger m)
specifier|public
name|void
name|setM
parameter_list|(
name|BigInteger
name|m
parameter_list|)
block|{
name|this
operator|.
name|m
operator|=
name|m
expr_stmt|;
block|}
DECL|method|getG ()
specifier|public
name|BigInteger
name|getG
parameter_list|()
block|{
return|return
name|g
return|;
block|}
DECL|method|setG (BigInteger g)
specifier|public
name|void
name|setG
parameter_list|(
name|BigInteger
name|g
parameter_list|)
block|{
name|this
operator|.
name|g
operator|=
name|g
expr_stmt|;
block|}
DECL|method|getP ()
specifier|public
name|BigInteger
name|getP
parameter_list|()
block|{
return|return
name|p
return|;
block|}
DECL|method|setP (BigInteger p)
specifier|public
name|void
name|setP
parameter_list|(
name|BigInteger
name|p
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
block|}
DECL|method|getQ ()
specifier|public
name|BigInteger
name|getQ
parameter_list|()
block|{
return|return
name|q
return|;
block|}
DECL|method|setQ (BigInteger q)
specifier|public
name|void
name|setQ
parameter_list|(
name|BigInteger
name|q
parameter_list|)
block|{
name|this
operator|.
name|q
operator|=
name|q
expr_stmt|;
block|}
DECL|method|getY ()
specifier|public
name|BigInteger
name|getY
parameter_list|()
block|{
return|return
name|y
return|;
block|}
DECL|method|setY (BigInteger y)
specifier|public
name|void
name|setY
parameter_list|(
name|BigInteger
name|y
parameter_list|)
block|{
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
DECL|method|push (byte[] keyPart)
specifier|public
name|void
name|push
parameter_list|(
name|byte
index|[]
name|keyPart
parameter_list|)
block|{
if|if
condition|(
name|keyType
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|keyType
operator|=
operator|new
name|String
argument_list|(
name|keyPart
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|SSH_RSA
operator|.
name|equals
argument_list|(
name|keyType
argument_list|)
condition|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|e
operator|=
operator|new
name|BigInteger
argument_list|(
name|keyPart
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|m
operator|=
operator|new
name|BigInteger
argument_list|(
name|keyPart
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|SSH_DSS
operator|.
name|equals
argument_list|(
name|keyType
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|p
operator|=
operator|new
name|BigInteger
argument_list|(
name|keyPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|q
operator|=
operator|new
name|BigInteger
argument_list|(
name|keyPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|g
operator|=
operator|new
name|BigInteger
argument_list|(
name|keyPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|y
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|y
operator|=
operator|new
name|BigInteger
argument_list|(
name|keyPart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|toPublicKey ()
specifier|public
name|PublicKey
name|toPublicKey
parameter_list|()
throws|throws
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
name|PublicKey
name|returnValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SSH_RSA
operator|.
name|equals
argument_list|(
name|keyType
argument_list|)
condition|)
block|{
name|RSAPublicKeySpec
name|dsaPublicKeySpec
init|=
operator|new
name|RSAPublicKeySpec
argument_list|(
name|m
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|KeyFactory
name|factory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|returnValue
operator|=
name|factory
operator|.
name|generatePublic
argument_list|(
name|dsaPublicKeySpec
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SSH_DSS
operator|.
name|equals
argument_list|(
name|keyType
argument_list|)
condition|)
block|{
name|DSAPublicKeySpec
name|dsaPublicKeySpec
init|=
operator|new
name|DSAPublicKeySpec
argument_list|(
name|y
argument_list|,
name|p
argument_list|,
name|q
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|KeyFactory
name|factory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"DSA"
argument_list|)
decl_stmt|;
name|returnValue
operator|=
name|factory
operator|.
name|generatePublic
argument_list|(
name|dsaPublicKeySpec
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SSH_ED25519
operator|.
name|equals
argument_list|(
name|keyType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
if|if
condition|(
name|SSH_ECDSA
operator|.
name|equals
argument_list|(
name|keyType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
return|return
name|returnValue
return|;
block|}
block|}
end_class

end_unit

