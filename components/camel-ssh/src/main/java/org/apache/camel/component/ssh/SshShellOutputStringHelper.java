begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ssh
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_class
DECL|class|SshShellOutputStringHelper
specifier|public
specifier|final
class|class
name|SshShellOutputStringHelper
block|{
DECL|method|SshShellOutputStringHelper ()
specifier|private
name|SshShellOutputStringHelper
parameter_list|()
block|{
comment|// empty const
block|}
comment|/**      * Returns the string before the given token      * If this token is repeating, than return all text      * before the last token      *      * @param text the text      * @param before the token which is expected to be repeated      * @return the text before the last token, or<tt>null</tt> if text does not      *         contain the token      */
DECL|method|beforeLast (String text, String before)
specifier|public
specifier|static
name|String
name|beforeLast
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|contains
argument_list|(
name|before
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|lastIndexOf
argument_list|(
name|before
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an object before the given last token      *      * @param text  the text      * @param before the last token      * @param mapper a mapping function to convert the string before the token to type T      * @return an Optional describing the result of applying a mapping function to the text before the token.      */
DECL|method|beforeLast (String text, String beforeLast, Function<String, T> mapper)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|beforeLast
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|beforeLast
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|mapper
parameter_list|)
block|{
name|String
name|result
init|=
name|beforeLast
argument_list|(
name|text
argument_list|,
name|beforeLast
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|mapper
operator|.
name|apply
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the string between the given tokens      *      * @param text  the text      * @param after is the starting token to skip the text before that.      * @param before the last token      * @return the text between the tokens, or<tt>null</tt> if text does not contain the tokens      */
DECL|method|betweenBeforeLast (String text, String after, String beforeLast)
specifier|public
specifier|static
name|String
name|betweenBeforeLast
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|,
name|String
name|beforeLast
parameter_list|)
block|{
name|text
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|beforeLast
argument_list|(
name|text
argument_list|,
name|beforeLast
argument_list|)
return|;
block|}
comment|/**      * Returns an object between the given token      *      * @param text  the text      * @param after the before last token      * @param before the after token      * @param mapper a mapping function to convert the string between the token to type T      * @return an Optional describing the result of applying a mapping function to the text between the token.      */
DECL|method|betweenBeforeLast (String text, String after, String before, Function<String, T> mapper)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|betweenBeforeLast
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|,
name|String
name|before
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|mapper
parameter_list|)
block|{
name|String
name|result
init|=
name|betweenBeforeLast
argument_list|(
name|text
argument_list|,
name|after
argument_list|,
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|mapper
operator|.
name|apply
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

