begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ssh
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|ExitCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|command
operator|.
name|CommandFactory
import|;
end_import

begin_class
DECL|class|EchoCommandFactory
specifier|public
class|class
name|EchoCommandFactory
implements|implements
name|CommandFactory
block|{
annotation|@
name|Override
DECL|method|createCommand (String command)
specifier|public
name|Command
name|createCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
return|return
operator|new
name|EchoCommand
argument_list|(
name|command
argument_list|)
return|;
block|}
DECL|class|EchoCommand
specifier|protected
specifier|static
class|class
name|EchoCommand
implements|implements
name|Command
implements|,
name|Runnable
block|{
DECL|field|command
specifier|private
name|String
name|command
decl_stmt|;
DECL|field|out
specifier|private
name|OutputStream
name|out
decl_stmt|;
DECL|field|err
specifier|private
name|OutputStream
name|err
decl_stmt|;
DECL|field|callback
specifier|private
name|ExitCallback
name|callback
decl_stmt|;
DECL|field|thread
specifier|private
name|Thread
name|thread
decl_stmt|;
DECL|method|EchoCommand (String command)
specifier|public
name|EchoCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setInputStream (InputStream in)
specifier|public
name|void
name|setInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|setOutputStream (OutputStream out)
specifier|public
name|void
name|setOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setErrorStream (OutputStream err)
specifier|public
name|void
name|setErrorStream
parameter_list|(
name|OutputStream
name|err
parameter_list|)
block|{
name|this
operator|.
name|err
operator|=
name|err
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setExitCallback (ExitCallback callback)
specifier|public
name|void
name|setExitCallback
parameter_list|(
name|ExitCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start (Environment env)
specifier|public
name|void
name|start
parameter_list|(
name|Environment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"EchoCommand"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|succeeded
init|=
literal|true
decl_stmt|;
name|String
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// we set the error with the same command message
name|err
operator|.
name|write
argument_list|(
literal|"Error:"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|err
operator|.
name|write
argument_list|(
name|command
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|command
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|succeeded
operator|=
literal|false
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|succeeded
condition|)
block|{
name|callback
operator|.
name|onExit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callback
operator|.
name|onExit
argument_list|(
literal|1
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

