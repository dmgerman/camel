begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ssh
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SshComponentKnownHostTest
specifier|public
class|class
name|SshComponentKnownHostTest
extends|extends
name|SshComponentTestSupport
block|{
annotation|@
name|Test
DECL|method|testProducerWithValidFile ()
specifier|public
name|void
name|testProducerWithValidFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|msg
init|=
literal|"test"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:password"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|SshResult
operator|.
name|EXIT_VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|SshResult
operator|.
name|STDERR
argument_list|,
literal|"Error:test"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:ssh"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducerWithInvalidFile ()
specifier|public
name|void
name|testProducerWithInvalidFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|msg
init|=
literal|"test"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:password"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:sshInvalid"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducerWithInvalidFileWarnOnly ()
specifier|public
name|void
name|testProducerWithInvalidFileWarnOnly
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|msg
init|=
literal|"test"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:password"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|SshResult
operator|.
name|EXIT_VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|SshResult
operator|.
name|STDERR
argument_list|,
literal|"Error:test"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:sshInvalidWarnOnly"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPollingConsumerWithValidKnownHostFile ()
specifier|public
name|void
name|testPollingConsumerWithValidKnownHostFile
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|SshResult
operator|.
name|EXIT_VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|SshResult
operator|.
name|STDERR
argument_list|,
literal|"Error:test"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPollingConsumerWithInvalidKnownHostFile ()
specifier|public
name|void
name|testPollingConsumerWithInvalidKnownHostFile
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:resultInvalid"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPollingConsumerWithInvalidKnownHostFileWarnOnly ()
specifier|public
name|void
name|testPollingConsumerWithInvalidKnownHostFileWarnOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:resultInvalidWarnOnly"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|SshResult
operator|.
name|EXIT_VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|SshResult
operator|.
name|STDERR
argument_list|,
literal|"Error:test"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:error"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"ssh://smx:smx@localhost:"
operator|+
name|port
operator|+
literal|"?useFixedDelay=true&delay=40000&pollCommand=test%0A&knownHostsResource=classpath:known_hosts_valid&failOnUnknownHost=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"ssh://smx:smx@localhost:"
operator|+
name|port
operator|+
literal|"?useFixedDelay=true&delay=40000&pollCommand=test%0A&knownHostsResource=classpath:known_hosts_invalid&failOnUnknownHost=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultInvalid"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"ssh://smx:smx@localhost:"
operator|+
name|port
operator|+
literal|"?useFixedDelay=true&delay=40000&pollCommand=test%0A&knownHostsResource=classpath:known_hosts_invalid"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultInvalidWarnOnly"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:ssh"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ssh://smx:smx@localhost:"
operator|+
name|port
operator|+
literal|"?timeout=3000&knownHostsResource=classpath:known_hosts_valid&failOnUnknownHost=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:password"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:sshInvalid"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ssh://smx:smx@localhost:"
operator|+
name|port
operator|+
literal|"?timeout=3000&knownHostsResource=classpath:known_hosts_invalid&failOnUnknownHost=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:password"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:sshInvalidWarnOnly"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ssh://smx:smx@localhost:"
operator|+
name|port
operator|+
literal|"?timeout=3000&knownHostsResource=classpath:known_hosts_invalid"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:password"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

