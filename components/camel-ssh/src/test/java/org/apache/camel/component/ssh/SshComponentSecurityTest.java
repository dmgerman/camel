begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ssh
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|FileKeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|KeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SshComponentSecurityTest
specifier|public
class|class
name|SshComponentSecurityTest
extends|extends
name|SshComponentTestSupport
block|{
annotation|@
name|Test
DECL|method|testRsa ()
specifier|public
name|void
name|testRsa
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|msg
init|=
literal|"test"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:rsa"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:ssh-rsa"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRsaFile ()
specifier|public
name|void
name|testRsaFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|msg
init|=
literal|"test"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:rsaFile"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:ssh-rsaFile"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testECFile ()
specifier|public
name|void
name|testECFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|msg
init|=
literal|"test"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:ecFile"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:ssh-ecFile"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:error"
argument_list|)
expr_stmt|;
name|SshComponent
name|sshComponent
init|=
operator|new
name|SshComponent
argument_list|()
decl_stmt|;
name|sshComponent
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|sshComponent
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|sshComponent
operator|.
name|setUsername
argument_list|(
literal|"smx"
argument_list|)
expr_stmt|;
name|sshComponent
operator|.
name|setKeyPairProvider
argument_list|(
operator|new
name|FileKeyPairProvider
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/hostkey.pem"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sshComponent
operator|.
name|setKeyType
argument_list|(
name|KeyPairProvider
operator|.
name|SSH_RSA
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addComponent
argument_list|(
literal|"ssh-rsa"
argument_list|,
name|sshComponent
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:ssh-rsa"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ssh-rsa:test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:rsa"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:ssh-rsaFile"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ssh://smx@localhost:"
operator|+
name|port
operator|+
literal|"?certResource=file:src/test/resources/hostkey.pem"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:rsaFile"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:ssh-ecFile"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ssh://smx@localhost:"
operator|+
name|port
operator|+
literal|"?certResource=file:src/test/resources/ec.pem"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:ecFile"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

