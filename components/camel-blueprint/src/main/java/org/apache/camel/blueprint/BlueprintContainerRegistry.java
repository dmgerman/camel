begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ExtendedBeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|mutable
operator|.
name|MutableReferenceMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|BlueprintContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|NoSuchComponentException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|BlueprintContainerRegistry
specifier|public
class|class
name|BlueprintContainerRegistry
implements|implements
name|Registry
block|{
DECL|field|blueprintContainer
specifier|private
specifier|final
name|BlueprintContainer
name|blueprintContainer
decl_stmt|;
DECL|method|BlueprintContainerRegistry (BlueprintContainer blueprintContainer)
specifier|public
name|BlueprintContainerRegistry
parameter_list|(
name|BlueprintContainer
name|blueprintContainer
parameter_list|)
block|{
name|this
operator|.
name|blueprintContainer
operator|=
name|blueprintContainer
expr_stmt|;
block|}
DECL|method|lookup (String name)
specifier|public
name|Object
name|lookup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|lookup (String name, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|lookup
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchComponentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|lookupByType (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|lookupByType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|lookupByType
argument_list|(
name|blueprintContainer
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|method|lookupByType (BlueprintContainer blueprintContainer, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|lookupByType
parameter_list|(
name|BlueprintContainer
name|blueprintContainer
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|objects
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExtendedBeanMetadata
name|metadata
range|:
name|blueprintContainer
operator|.
name|getMetadata
argument_list|(
name|ExtendedBeanMetadata
operator|.
name|class
argument_list|)
control|)
block|{
try|try
block|{
name|Class
name|cl
init|=
name|metadata
operator|.
name|getRuntimeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|==
literal|null
operator|&&
name|metadata
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Bundle
name|bundle
init|=
operator|(
name|Bundle
operator|)
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
literal|"blueprintBundle"
argument_list|)
decl_stmt|;
name|cl
operator|=
name|bundle
operator|.
name|loadClass
argument_list|(
name|metadata
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|==
literal|null
operator|||
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|cl
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
name|metadata
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|objects
operator|.
name|put
argument_list|(
name|metadata
operator|.
name|getId
argument_list|()
argument_list|,
name|type
operator|.
name|cast
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
block|}
for|for
control|(
name|MutableReferenceMetadata
name|metadata
range|:
name|blueprintContainer
operator|.
name|getMetadata
argument_list|(
name|MutableReferenceMetadata
operator|.
name|class
argument_list|)
control|)
block|{
try|try
block|{
name|Class
name|cl
init|=
name|metadata
operator|.
name|getRuntimeInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|==
literal|null
operator|&&
name|metadata
operator|.
name|getInterface
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Bundle
name|bundle
init|=
operator|(
name|Bundle
operator|)
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
literal|"blueprintBundle"
argument_list|)
decl_stmt|;
name|cl
operator|=
name|bundle
operator|.
name|loadClass
argument_list|(
name|metadata
operator|.
name|getInterface
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|==
literal|null
operator|||
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|cl
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
name|metadata
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|objects
operator|.
name|put
argument_list|(
name|metadata
operator|.
name|getId
argument_list|()
argument_list|,
name|type
operator|.
name|cast
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|objects
return|;
block|}
block|}
end_class

end_unit

