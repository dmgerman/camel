begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesResolver
import|;
end_import

begin_comment
comment|/**  * A {@link PropertiesResolver} which supports the<tt>blueprint</tt> scheme.  *<p/>  * This implementation will sit on top of any existing configured  * {@link org.apache.camel.component.properties.PropertiesResolver} and will delegate  * to any non<tt>blueprint</tt> schemes.  */
end_comment

begin_class
DECL|class|BlueprintPropertiesResolver
specifier|public
class|class
name|BlueprintPropertiesResolver
implements|implements
name|PropertiesResolver
block|{
DECL|field|delegate
specifier|private
specifier|final
name|PropertiesResolver
name|delegate
decl_stmt|;
DECL|field|blueprint
specifier|private
specifier|final
name|BlueprintPropertiesParser
name|blueprint
decl_stmt|;
DECL|method|BlueprintPropertiesResolver (PropertiesResolver delegate, BlueprintPropertiesParser blueprint)
specifier|public
name|BlueprintPropertiesResolver
parameter_list|(
name|PropertiesResolver
name|delegate
parameter_list|,
name|BlueprintPropertiesParser
name|blueprint
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|blueprint
operator|=
name|blueprint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolveProperties (CamelContext context, boolean ignoreMissingLocation, List<PropertiesLocation> locations)
specifier|public
name|Properties
name|resolveProperties
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|boolean
name|ignoreMissingLocation
parameter_list|,
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|locations
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|boolean
name|explicit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertiesLocation
name|location
range|:
name|locations
control|)
block|{
if|if
condition|(
literal|"blueprint"
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getResolver
argument_list|()
argument_list|)
condition|)
block|{
name|blueprint
operator|.
name|addPropertyPlaceholder
argument_list|(
name|location
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// indicate an explicit blueprint id was configured
name|explicit
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// delegate the url
name|answer
operator|.
name|putAll
argument_list|(
name|delegate
operator|.
name|resolveProperties
argument_list|(
name|context
argument_list|,
name|ignoreMissingLocation
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|location
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|explicit
condition|)
block|{
comment|// auto lookup blueprint property placeholders to use if none explicit was configured
comment|// this is convention over configuration
for|for
control|(
name|String
name|id
range|:
name|blueprint
operator|.
name|lookupPropertyPlaceholderIds
argument_list|()
control|)
block|{
name|blueprint
operator|.
name|addPropertyPlaceholder
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

