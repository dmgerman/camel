begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DefaultErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|LoggingErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
operator|.
name|AbstractCamelFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RedeliveryPolicyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|BlueprintContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|NoSuchComponentException
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"errorHandler"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|CamelErrorHandlerFactoryBean
specifier|public
class|class
name|CamelErrorHandlerFactoryBean
extends|extends
name|AbstractCamelFactoryBean
argument_list|<
name|ErrorHandlerBuilder
argument_list|>
block|{
annotation|@
name|XmlAttribute
DECL|field|type
specifier|private
name|ErrorHandlerType
name|type
init|=
name|ErrorHandlerType
operator|.
name|DefaultErrorHandler
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|deadLetterUri
specifier|private
name|String
name|deadLetterUri
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|level
specifier|private
name|LoggingLevel
name|level
init|=
name|LoggingLevel
operator|.
name|ERROR
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logName
specifier|private
name|String
name|logName
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|useOriginalMessage
specifier|private
name|Boolean
name|useOriginalMessage
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|onRedeliveryRef
specifier|private
name|String
name|onRedeliveryRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|retryWhileRef
specifier|private
name|String
name|retryWhileRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|executorServiceRef
specifier|private
name|String
name|executorServiceRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|redeliveryPolicyRef
specifier|private
name|String
name|redeliveryPolicyRef
decl_stmt|;
annotation|@
name|XmlElement
DECL|field|redeliveryPolicy
specifier|private
name|RedeliveryPolicyDefinition
name|redeliveryPolicy
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|blueprintContainer
specifier|private
name|BlueprintContainer
name|blueprintContainer
decl_stmt|;
annotation|@
name|Override
DECL|method|getObject ()
specifier|public
name|ErrorHandlerBuilder
name|getObject
parameter_list|()
throws|throws
name|Exception
block|{
name|ErrorHandlerBuilder
name|errorHandler
init|=
name|getObjectType
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorHandler
operator|instanceof
name|DefaultErrorHandlerBuilder
condition|)
block|{
name|DefaultErrorHandlerBuilder
name|handler
init|=
operator|(
name|DefaultErrorHandlerBuilder
operator|)
name|errorHandler
decl_stmt|;
if|if
condition|(
name|deadLetterUri
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|setDeadLetterUri
argument_list|(
name|deadLetterUri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useOriginalMessage
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|setUseOriginalMessage
argument_list|(
name|useOriginalMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|redeliveryPolicy
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|setRedeliveryPolicy
argument_list|(
name|redeliveryPolicy
operator|.
name|createRedeliveryPolicy
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|redeliveryPolicyRef
operator|!=
literal|null
condition|)
block|{
comment|// lookup redelivery
name|RedeliveryPolicy
name|policy
init|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|redeliveryPolicyRef
argument_list|,
name|RedeliveryPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setRedeliveryPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onRedeliveryRef
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|setOnRedelivery
argument_list|(
name|lookup
argument_list|(
name|onRedeliveryRef
argument_list|,
name|Processor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retryWhileRef
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|setRetryWhileRef
argument_list|(
name|retryWhileRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executorServiceRef
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|setExecutorServiceRef
argument_list|(
name|executorServiceRef
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|errorHandler
operator|instanceof
name|LoggingErrorHandlerBuilder
condition|)
block|{
name|LoggingErrorHandlerBuilder
name|handler
init|=
operator|(
name|LoggingErrorHandlerBuilder
operator|)
name|errorHandler
decl_stmt|;
if|if
condition|(
name|level
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logName
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|setLogName
argument_list|(
name|logName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|errorHandler
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getObjectType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|ErrorHandlerBuilder
argument_list|>
name|getObjectType
parameter_list|()
block|{
return|return
name|type
operator|.
name|getTypeAsClass
argument_list|()
return|;
block|}
DECL|method|setBlueprintContainer (BlueprintContainer blueprintContainer)
specifier|public
name|void
name|setBlueprintContainer
parameter_list|(
name|BlueprintContainer
name|blueprintContainer
parameter_list|)
block|{
name|this
operator|.
name|blueprintContainer
operator|=
name|blueprintContainer
expr_stmt|;
block|}
DECL|method|getCamelContextWithId (String camelContextId)
specifier|protected
name|CamelContext
name|getCamelContextWithId
parameter_list|(
name|String
name|camelContextId
parameter_list|)
block|{
if|if
condition|(
name|blueprintContainer
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|CamelContext
operator|)
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
name|camelContextId
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|lookup (String name, Class<T> type)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|lookup
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchComponentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

