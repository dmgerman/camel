begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ext
operator|.
name|PropertyPlaceholderExt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|BlueprintContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Blueprint {@link PropertiesSource} which supports looking up  * property placeholders from the Blueprint Property Placeholder Service.  */
end_comment

begin_class
DECL|class|BlueprintPropertiesSource
specifier|public
class|class
name|BlueprintPropertiesSource
extends|extends
name|ServiceSupport
implements|implements
name|PropertiesSource
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlueprintPropertiesSource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|container
specifier|private
specifier|final
name|BlueprintContainer
name|container
decl_stmt|;
DECL|field|ids
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ids
decl_stmt|;
DECL|field|placeholders
specifier|private
specifier|final
name|Set
argument_list|<
name|PropertyPlaceholderWrapper
argument_list|>
name|placeholders
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|BlueprintPropertiesSource (BlueprintContainer container, List<String> ids)
specifier|public
name|BlueprintPropertiesSource
parameter_list|(
name|BlueprintContainer
name|container
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|ids
operator|=
name|ids
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"BlueprintPropertiesSource"
operator|+
name|ids
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty (String name)
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PropertyPlaceholderWrapper
name|placeholder
range|:
name|placeholders
control|)
block|{
name|boolean
name|isDefault
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|placeholders
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// okay we have multiple placeholders and we want to return the answer that
comment|// is not the default placeholder if there is multiple keys
name|Map
name|map
init|=
name|placeholder
operator|.
name|getDefaultProperties
argument_list|()
decl_stmt|;
name|isDefault
operator|=
name|map
operator|!=
literal|null
operator|&&
name|map
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Blueprint property key: {} is part of default properties: {}"
argument_list|,
name|name
argument_list|,
name|isDefault
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|candidate
init|=
name|placeholder
operator|.
name|retrieveValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|answer
operator|==
literal|null
operator|||
operator|!
name|isDefault
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Blueprint candidate property key: {} as value: {}"
argument_list|,
name|name
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|=
name|candidate
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Here we just catch the exception and try to use other candidate
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Blueprint getProperty: {}={}"
argument_list|,
name|name
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Adds the given Blueprint property placeholder service with the given id      *      * @param id id of the Blueprint property placeholder service to add.      */
DECL|method|addPropertyPlaceholder (String id)
specifier|private
name|void
name|addPropertyPlaceholder
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Object
name|component
init|=
name|container
operator|.
name|getComponentInstance
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|instanceof
name|PropertyPlaceholderExt
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|component
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding Blueprint PropertyPlaceholder: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|ReflectionHelper
operator|.
name|findMethod
argument_list|(
name|clazz
argument_list|,
literal|"retrieveValue"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|defaultMethod
init|=
name|ReflectionHelper
operator|.
name|findMethod
argument_list|(
name|clazz
argument_list|,
literal|"getDefaultProperties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultMethod
operator|!=
literal|null
condition|)
block|{
name|defaultMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|placeholders
operator|.
name|add
argument_list|(
operator|new
name|PropertyPlaceholderWrapper
argument_list|(
name|component
argument_list|,
name|method
argument_list|,
name|defaultMethod
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot add blueprint property placeholder: "
operator|+
name|id
operator|+
literal|" as the method retrieveValue is not found"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doInit ()
specifier|protected
name|void
name|doInit
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|addPropertyPlaceholder
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|class|PropertyPlaceholderWrapper
specifier|private
class|class
name|PropertyPlaceholderWrapper
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Object
name|delegate
decl_stmt|;
DECL|field|method
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
DECL|field|defaultMethod
specifier|private
specifier|final
name|Method
name|defaultMethod
decl_stmt|;
DECL|method|PropertyPlaceholderWrapper (Object delegate, Method method, Method defaultMethod)
name|PropertyPlaceholderWrapper
parameter_list|(
name|Object
name|delegate
parameter_list|,
name|Method
name|method
parameter_list|,
name|Method
name|defaultMethod
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|defaultMethod
operator|=
name|defaultMethod
expr_stmt|;
block|}
DECL|method|retrieveValue (String key)
name|String
name|retrieveValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Object
name|v
init|=
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|delegate
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|v
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getDefaultProperties ()
name|Map
name|getDefaultProperties
parameter_list|()
block|{
if|if
condition|(
name|defaultMethod
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|Map
operator|)
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|defaultMethod
argument_list|,
name|delegate
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

