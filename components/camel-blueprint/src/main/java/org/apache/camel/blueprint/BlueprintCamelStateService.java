begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Used by {@link BlueprintCamelContext} to inform about state of Camel context. If running inside Karaf  * and Karaf's BundleStateService is accessible, Camel context state will propagate as<em>extended  * bundle state</em>.  */
end_comment

begin_class
DECL|class|BlueprintCamelStateService
specifier|public
class|class
name|BlueprintCamelStateService
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlueprintCamelStateService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|State
specifier|public
enum|enum
name|State
block|{
DECL|enumConstant|Starting
name|Starting
block|,
DECL|enumConstant|Active
name|Active
block|,
DECL|enumConstant|Failure
name|Failure
block|}
DECL|field|states
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|State
argument_list|>
name|states
decl_stmt|;
DECL|field|exceptions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|exceptions
decl_stmt|;
DECL|field|bundleContext
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
DECL|field|registration
specifier|private
name|ServiceRegistration
argument_list|<
name|?
argument_list|>
name|registration
decl_stmt|;
DECL|method|getBundleContext ()
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|bundleContext
return|;
block|}
DECL|method|setBundleContext (BundleContext bundleContext)
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
comment|/**      * One of four {@link State states} is set for given {@link org.osgi.framework.Bundle} and context Id.      * One (blueprint) bundle may declare one or more Camel context.      * @param contextId      * @param state      */
DECL|method|setBundleState (Bundle bundle, String contextId, State state)
specifier|public
name|void
name|setBundleState
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|String
name|contextId
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|setBundleState
argument_list|(
name|bundle
argument_list|,
name|contextId
argument_list|,
name|state
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * One of four {@link State states} is set for given {@link org.osgi.framework.Bundle} and context Id.      * One (blueprint) bundle may declare one or more Camel context.      * @param contextId      * @param state      * @param t      */
DECL|method|setBundleState (Bundle bundle, String contextId, State state, Throwable t)
specifier|public
name|void
name|setBundleState
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|String
name|contextId
parameter_list|,
name|State
name|state
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|Failure
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Changing Camel state for bundle {} to {}"
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Changing Camel state for bundle {} to {}"
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d:%s"
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|states
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|states
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|exceptions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exceptions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get states for all context registered for given {@link Bundle}      * @param bundle      * @return      */
DECL|method|getStates (Bundle bundle)
specifier|public
name|List
argument_list|<
name|State
argument_list|>
name|getStates
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|List
argument_list|<
name|State
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|State
argument_list|>
name|e
range|:
name|states
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Get exceptions for all camel contexts for given bundle      * @param bundle      * @return      */
DECL|method|getExceptions (Bundle bundle)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|getExceptions
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|e
range|:
name|exceptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Attempts to register Karaf-specific BundleStateService - if possible      */
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
try|try
block|{
name|states
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|exceptions
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|registration
operator|=
operator|new
name|KarafBundleStateServiceCreator
argument_list|()
operator|.
name|create
argument_list|(
name|bundleContext
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Karaf BundleStateService not accessible. Bundle state won't reflect Camel context state"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Unregisters any OSGi service registered      */
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|registration
operator|!=
literal|null
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|states
operator|.
name|clear
argument_list|()
expr_stmt|;
name|states
operator|=
literal|null
expr_stmt|;
name|exceptions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|exceptions
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Static creator to decouple from optional Karaf classes.      */
DECL|class|KarafBundleStateServiceCreator
specifier|private
specifier|static
class|class
name|KarafBundleStateServiceCreator
block|{
DECL|method|create (BundleContext context, BlueprintCamelStateService camelStateService)
specifier|public
name|ServiceRegistration
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|BlueprintCamelStateService
name|camelStateService
parameter_list|)
block|{
name|KarafBundleStateService
name|karafBundleStateService
init|=
operator|new
name|KarafBundleStateService
argument_list|(
name|camelStateService
argument_list|)
decl_stmt|;
return|return
name|karafBundleStateService
operator|.
name|register
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

