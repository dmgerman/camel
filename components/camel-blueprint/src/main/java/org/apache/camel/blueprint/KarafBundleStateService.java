begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleStateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_comment
comment|/**  * A service for Karaf to get extended Bundle information related to Camel Context(s) declared in Blueprint  * container.  */
end_comment

begin_class
DECL|class|KarafBundleStateService
specifier|public
class|class
name|KarafBundleStateService
implements|implements
name|BundleStateService
block|{
DECL|field|camelStateService
name|BlueprintCamelStateService
name|camelStateService
decl_stmt|;
DECL|method|KarafBundleStateService (BlueprintCamelStateService camelStateService)
specifier|public
name|KarafBundleStateService
parameter_list|(
name|BlueprintCamelStateService
name|camelStateService
parameter_list|)
block|{
name|this
operator|.
name|camelStateService
operator|=
name|camelStateService
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Camel Blueprint"
return|;
block|}
annotation|@
name|Override
DECL|method|getDiag (Bundle bundle)
specifier|public
name|String
name|getDiag
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
if|if
condition|(
name|getState
argument_list|(
name|bundle
argument_list|)
operator|==
name|BundleState
operator|.
name|Failure
condition|)
block|{
comment|// return stacktraces for failed camel contexts
name|Map
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|exceptions
init|=
name|camelStateService
operator|.
name|getExceptions
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|contextId
range|:
name|exceptions
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sw
operator|.
name|append
argument_list|(
literal|"Camel context \""
argument_list|)
operator|.
name|append
argument_list|(
name|contextId
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"\n"
argument_list|)
expr_stmt|;
name|Throwable
name|t
init|=
name|exceptions
operator|.
name|get
argument_list|(
name|contextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|NullPointerException
condition|)
block|{
name|sw
operator|.
name|append
argument_list|(
literal|"Exception: NullPointerException\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sw
operator|.
name|append
argument_list|(
literal|"Exception: "
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|sw
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getState (Bundle bundle)
specifier|public
name|BundleState
name|getState
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|BundleState
name|effective
init|=
name|BundleState
operator|.
name|Unknown
decl_stmt|;
for|for
control|(
name|BlueprintCamelStateService
operator|.
name|State
name|s
range|:
name|camelStateService
operator|.
name|getStates
argument_list|(
name|bundle
argument_list|)
control|)
block|{
if|if
condition|(
name|effective
operator|==
name|BundleState
operator|.
name|Unknown
operator|||
name|s
operator|==
name|BlueprintCamelStateService
operator|.
name|State
operator|.
name|Failure
condition|)
block|{
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|Starting
case|:
name|effective
operator|=
name|BundleState
operator|.
name|Starting
expr_stmt|;
break|break;
case|case
name|Active
case|:
name|effective
operator|=
name|BundleState
operator|.
name|Active
expr_stmt|;
break|break;
case|case
name|Failure
case|:
name|effective
operator|=
name|BundleState
operator|.
name|Failure
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
return|return
name|effective
return|;
block|}
DECL|method|register (BundleContext context)
specifier|public
name|ServiceRegistration
argument_list|<
name|?
argument_list|>
name|register
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|registerService
argument_list|(
name|BundleStateService
operator|.
name|class
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

