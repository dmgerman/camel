begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ExtendedBeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|BlueprintContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|ComponentMetadata
import|;
end_import

begin_comment
comment|/**  * A helper class to find the ids of the {@link BlueprintCamelContext} defined  * in the {@link org.osgi.service.blueprint.container.BlueprintContainer}  */
end_comment

begin_class
DECL|class|BlueprintCamelContextLookupHelper
specifier|public
specifier|final
class|class
name|BlueprintCamelContextLookupHelper
block|{
DECL|method|BlueprintCamelContextLookupHelper ()
specifier|private
name|BlueprintCamelContextLookupHelper
parameter_list|()
block|{     }
comment|/**      * Lookup all the {@link BlueprintCamelContext} in the {@link BlueprintContainer}.      *      * @param container the blueprint container, must be provided      * @return a set with the ids of the {@link BlueprintCamelContext}, never<tt>null</tt>, but can be empty set.      */
DECL|method|lookupBlueprintCamelContext (BlueprintContainer container)
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|lookupBlueprintCamelContext
parameter_list|(
name|BlueprintContainer
name|container
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|container
operator|.
name|getComponentIds
argument_list|()
control|)
block|{
name|ComponentMetadata
name|meta
init|=
name|container
operator|.
name|getComponentMetadata
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// must be extended meta, to see if its the blueprint camel context
if|if
condition|(
name|meta
operator|instanceof
name|ExtendedBeanMetadata
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
operator|(
operator|(
name|ExtendedBeanMetadata
operator|)
name|meta
operator|)
operator|.
name|getRuntimeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|BlueprintCamelContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
comment|// okay we found a BlueprintCamelContext
name|ids
operator|.
name|add
argument_list|(
name|meta
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ids
return|;
block|}
block|}
end_class

end_unit

