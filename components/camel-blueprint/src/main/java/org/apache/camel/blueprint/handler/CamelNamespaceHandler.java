begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.blueprint.handler
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|BeanProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ComponentDefinitionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ComponentDefinitionRegistryProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|NamespaceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|PassThroughMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|mutable
operator|.
name|MutableBeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|mutable
operator|.
name|MutablePassThroughMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|mutable
operator|.
name|MutableRefMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|mutable
operator|.
name|MutableReferenceMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
operator|.
name|BlueprintCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
operator|.
name|CamelContextFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|blueprint
operator|.
name|CamelRouteContextFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
operator|.
name|AbstractCamelContextFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
operator|.
name|AbstractCamelFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|CamelPostProcessorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContextNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|AggregateDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|CatchDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ExpressionSubElementDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|MarshalDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ResequenceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SendDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SortDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|UnmarshalDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|WireTapDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelContextNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ComponentResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LanguageResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NamespaceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|blueprint
operator|.
name|KeyStoreParametersFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|blueprint
operator|.
name|SSLContextParametersFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|blueprint
operator|.
name|SecureRandomParametersFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|BlueprintContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|ComponentDefinitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|BeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|ComponentMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|RefMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|ServiceReferenceMetadata
operator|.
name|AVAILABILITY_MANDATORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|ServiceReferenceMetadata
operator|.
name|AVAILABILITY_OPTIONAL
import|;
end_import

begin_class
DECL|class|CamelNamespaceHandler
specifier|public
class|class
name|CamelNamespaceHandler
implements|implements
name|NamespaceHandler
block|{
DECL|field|CAMEL_CONTEXT
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_CONTEXT
init|=
literal|"camelContext"
decl_stmt|;
DECL|field|ROUTE_CONTEXT
specifier|private
specifier|static
specifier|final
name|String
name|ROUTE_CONTEXT
init|=
literal|"routeContext"
decl_stmt|;
DECL|field|KEY_STORE_PARAMETERS
specifier|private
specifier|static
specifier|final
name|String
name|KEY_STORE_PARAMETERS
init|=
literal|"keyStoreParameters"
decl_stmt|;
DECL|field|SECURE_RANDOM_PARAMETERS
specifier|private
specifier|static
specifier|final
name|String
name|SECURE_RANDOM_PARAMETERS
init|=
literal|"secureRandomParameters"
decl_stmt|;
DECL|field|SSL_CONTEXT_PARAMETERS
specifier|private
specifier|static
specifier|final
name|String
name|SSL_CONTEXT_PARAMETERS
init|=
literal|"sslContextParameters"
decl_stmt|;
DECL|field|SPRING_NS
specifier|private
specifier|static
specifier|final
name|String
name|SPRING_NS
init|=
literal|"http://camel.apache.org/schema/spring"
decl_stmt|;
DECL|field|BLUEPRINT_NS
specifier|private
specifier|static
specifier|final
name|String
name|BLUEPRINT_NS
init|=
literal|"http://camel.apache.org/schema/blueprint"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelNamespaceHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|jaxbContext
specifier|private
name|JAXBContext
name|jaxbContext
decl_stmt|;
DECL|method|renameNamespaceRecursive (Node node)
specifier|public
specifier|static
name|void
name|renameNamespaceRecursive
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Document
name|doc
init|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|BLUEPRINT_NS
argument_list|)
condition|)
block|{
name|doc
operator|.
name|renameNode
argument_list|(
name|node
argument_list|,
name|SPRING_NS
argument_list|,
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeList
name|list
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|renameNamespaceRecursive
argument_list|(
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSchemaLocation (String namespace)
specifier|public
name|URL
name|getSchemaLocation
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"camel-blueprint.xsd"
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|getManagedClasses ()
specifier|public
name|Set
argument_list|<
name|Class
argument_list|>
name|getManagedClasses
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|BlueprintCamelContext
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parse (Element element, ParserContext context)
specifier|public
name|Metadata
name|parse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing element {}"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|renameNamespaceRecursive
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|CAMEL_CONTEXT
argument_list|)
condition|)
block|{
return|return
name|parseCamelContextNode
argument_list|(
name|element
argument_list|,
name|context
argument_list|)
return|;
block|}
if|if
condition|(
name|element
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|ROUTE_CONTEXT
argument_list|)
condition|)
block|{
return|return
name|parseRouteContextNode
argument_list|(
name|element
argument_list|,
name|context
argument_list|)
return|;
block|}
if|if
condition|(
name|element
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|KEY_STORE_PARAMETERS
argument_list|)
condition|)
block|{
return|return
name|parseKeyStoreParametersNode
argument_list|(
name|element
argument_list|,
name|context
argument_list|)
return|;
block|}
if|if
condition|(
name|element
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|SECURE_RANDOM_PARAMETERS
argument_list|)
condition|)
block|{
return|return
name|parseSecureRandomParametersNode
argument_list|(
name|element
argument_list|,
name|context
argument_list|)
return|;
block|}
if|if
condition|(
name|element
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|SSL_CONTEXT_PARAMETERS
argument_list|)
condition|)
block|{
return|return
name|parseSSLContextParametersNode
argument_list|(
name|element
argument_list|,
name|context
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|parseCamelContextNode (Element element, ParserContext context)
specifier|private
name|Metadata
name|parseCamelContextNode
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing CamelContext {}"
argument_list|,
name|element
argument_list|)
expr_stmt|;
comment|// Find the id, generate one if needed
name|String
name|contextId
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|boolean
name|implicitId
init|=
literal|false
decl_stmt|;
comment|// let's avoid folks having to explicitly give an ID to a camel context
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|contextId
argument_list|)
condition|)
block|{
comment|// if no explicit id was set then use a default auto generated name
name|CamelContextNameStrategy
name|strategy
init|=
operator|new
name|DefaultCamelContextNameStrategy
argument_list|()
decl_stmt|;
name|contextId
operator|=
name|strategy
operator|.
name|getName
argument_list|()
expr_stmt|;
name|element
operator|.
name|setAttribute
argument_list|(
literal|"id"
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
name|implicitId
operator|=
literal|true
expr_stmt|;
block|}
comment|// now let's parse the routes with JAXB
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
decl_stmt|;
try|try
block|{
name|binder
operator|=
name|getJaxbContext
argument_list|()
operator|.
name|createBinder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Failed to create the JAXB binder : "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|parseUsingJaxb
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|binder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|CamelContextFactoryBean
operator|)
condition|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Expected an instance of "
operator|+
name|CamelContextFactoryBean
operator|.
name|class
argument_list|)
throw|;
block|}
name|CamelContextFactoryBean
name|ccfb
init|=
operator|(
name|CamelContextFactoryBean
operator|)
name|value
decl_stmt|;
name|ccfb
operator|.
name|setImplicitId
argument_list|(
name|implicitId
argument_list|)
expr_stmt|;
name|MutablePassThroughMetadata
name|factory
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutablePassThroughMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.passThrough."
operator|+
name|contextId
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setObject
argument_list|(
operator|new
name|PassThroughCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|factory2
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory2
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.factory."
operator|+
name|contextId
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryMethod
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setInitMethod
argument_list|(
literal|"afterPropertiesSet"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setDestroyMethod
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|addProperty
argument_list|(
literal|"blueprintContainer"
argument_list|,
name|createRef
argument_list|(
name|context
argument_list|,
literal|"blueprintContainer"
argument_list|)
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|addProperty
argument_list|(
literal|"bundleContext"
argument_list|,
name|createRef
argument_list|(
name|context
argument_list|,
literal|"blueprintBundleContext"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getComponentDefinitionRegistry
argument_list|()
operator|.
name|registerComponentDefinition
argument_list|(
name|factory2
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|ctx
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setId
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setRuntimeClass
argument_list|(
name|BlueprintCamelContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryComponent
argument_list|(
name|factory2
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryMethod
argument_list|(
literal|"getContext"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setInitMethod
argument_list|(
literal|"init"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setDestroyMethod
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
comment|// Register factory beans
name|registerBeans
argument_list|(
name|context
argument_list|,
name|contextId
argument_list|,
name|ccfb
operator|.
name|getThreadPools
argument_list|()
argument_list|)
expr_stmt|;
name|registerBeans
argument_list|(
name|context
argument_list|,
name|contextId
argument_list|,
name|ccfb
operator|.
name|getEndpoints
argument_list|()
argument_list|)
expr_stmt|;
name|registerBeans
argument_list|(
name|context
argument_list|,
name|contextId
argument_list|,
name|ccfb
operator|.
name|getRedeliveryPolicies
argument_list|()
argument_list|)
expr_stmt|;
name|registerBeans
argument_list|(
name|context
argument_list|,
name|contextId
argument_list|,
name|ccfb
operator|.
name|getBeans
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register processors
name|MutablePassThroughMetadata
name|beanProcessorFactory
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutablePassThroughMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|beanProcessorFactory
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.processor.bean.passThrough."
operator|+
name|contextId
argument_list|)
expr_stmt|;
name|beanProcessorFactory
operator|.
name|setObject
argument_list|(
operator|new
name|PassThroughCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|new
name|CamelInjector
argument_list|(
name|contextId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|beanProcessor
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|beanProcessor
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.processor.bean."
operator|+
name|contextId
argument_list|)
expr_stmt|;
name|beanProcessor
operator|.
name|setRuntimeClass
argument_list|(
name|CamelInjector
operator|.
name|class
argument_list|)
expr_stmt|;
name|beanProcessor
operator|.
name|setFactoryComponent
argument_list|(
name|beanProcessorFactory
argument_list|)
expr_stmt|;
name|beanProcessor
operator|.
name|setFactoryMethod
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
name|beanProcessor
operator|.
name|setProcessor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|beanProcessor
operator|.
name|addProperty
argument_list|(
literal|"blueprintContainer"
argument_list|,
name|createRef
argument_list|(
name|context
argument_list|,
literal|"blueprintContainer"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getComponentDefinitionRegistry
argument_list|()
operator|.
name|registerComponentDefinition
argument_list|(
name|beanProcessor
argument_list|)
expr_stmt|;
name|MutablePassThroughMetadata
name|regProcessorFactory
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutablePassThroughMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|regProcessorFactory
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.processor.registry.passThrough."
operator|+
name|contextId
argument_list|)
expr_stmt|;
name|regProcessorFactory
operator|.
name|setObject
argument_list|(
operator|new
name|PassThroughCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|new
name|CamelDependenciesFinder
argument_list|(
name|contextId
argument_list|,
name|context
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|regProcessor
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|regProcessor
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.processor.registry."
operator|+
name|contextId
argument_list|)
expr_stmt|;
name|regProcessor
operator|.
name|setRuntimeClass
argument_list|(
name|CamelDependenciesFinder
operator|.
name|class
argument_list|)
expr_stmt|;
name|regProcessor
operator|.
name|setFactoryComponent
argument_list|(
name|regProcessorFactory
argument_list|)
expr_stmt|;
name|regProcessor
operator|.
name|setFactoryMethod
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
name|regProcessor
operator|.
name|setProcessor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|regProcessor
operator|.
name|addDependsOn
argument_list|(
literal|".camelBlueprint.processor.bean."
operator|+
name|contextId
argument_list|)
expr_stmt|;
name|regProcessor
operator|.
name|addProperty
argument_list|(
literal|"blueprintContainer"
argument_list|,
name|createRef
argument_list|(
name|context
argument_list|,
literal|"blueprintContainer"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getComponentDefinitionRegistry
argument_list|()
operator|.
name|registerComponentDefinition
argument_list|(
name|regProcessor
argument_list|)
expr_stmt|;
comment|// lets inject the namespaces into any namespace aware POJOs
name|injectNamespaces
argument_list|(
name|element
argument_list|,
name|binder
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing CamelContext done, returning {}"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
DECL|method|injectNamespaces (Element element, Binder<Node> binder)
specifier|protected
name|void
name|injectNamespaces
parameter_list|(
name|Element
name|element
parameter_list|,
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
parameter_list|)
block|{
name|NodeList
name|list
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Namespaces
name|namespaces
init|=
literal|null
decl_stmt|;
name|int
name|size
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|childElement
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|Object
name|object
init|=
name|binder
operator|.
name|getJAXBNode
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|NamespaceAware
condition|)
block|{
name|NamespaceAware
name|namespaceAware
init|=
operator|(
name|NamespaceAware
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|namespaces
operator|==
literal|null
condition|)
block|{
name|namespaces
operator|=
operator|new
name|Namespaces
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
name|namespaces
operator|.
name|configure
argument_list|(
name|namespaceAware
argument_list|)
expr_stmt|;
block|}
name|injectNamespaces
argument_list|(
name|childElement
argument_list|,
name|binder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseRouteContextNode (Element element, ParserContext context)
specifier|private
name|Metadata
name|parseRouteContextNode
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing RouteContext {}"
argument_list|,
name|element
argument_list|)
expr_stmt|;
comment|// now parse the routes with JAXB
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
decl_stmt|;
try|try
block|{
name|binder
operator|=
name|getJaxbContext
argument_list|()
operator|.
name|createBinder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Failed to create the JAXB binder : "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|parseUsingJaxb
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|binder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|CamelRouteContextFactoryBean
operator|)
condition|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Expected an instance of "
operator|+
name|CamelRouteContextFactoryBean
operator|.
name|class
argument_list|)
throw|;
block|}
name|CamelRouteContextFactoryBean
name|rcfb
init|=
operator|(
name|CamelRouteContextFactoryBean
operator|)
name|value
decl_stmt|;
name|String
name|id
init|=
name|rcfb
operator|.
name|getId
argument_list|()
decl_stmt|;
name|MutablePassThroughMetadata
name|factory
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutablePassThroughMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.passThrough."
operator|+
name|id
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setObject
argument_list|(
operator|new
name|PassThroughCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
name|rcfb
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|factory2
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory2
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.factory."
operator|+
name|id
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryMethod
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|ctx
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setRuntimeClass
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryComponent
argument_list|(
name|factory2
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryMethod
argument_list|(
literal|"getRoutes"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing RouteContext done, returning {}"
argument_list|,
name|element
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
DECL|method|parseKeyStoreParametersNode (Element element, ParserContext context)
specifier|private
name|Metadata
name|parseKeyStoreParametersNode
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing KeyStoreParameters {}"
argument_list|,
name|element
argument_list|)
expr_stmt|;
comment|// now parse the key store parameters with JAXB
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
decl_stmt|;
try|try
block|{
name|binder
operator|=
name|getJaxbContext
argument_list|()
operator|.
name|createBinder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Failed to create the JAXB binder : "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|parseUsingJaxb
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|binder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|KeyStoreParametersFactoryBean
operator|)
condition|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Expected an instance of "
operator|+
name|KeyStoreParametersFactoryBean
operator|.
name|class
argument_list|)
throw|;
block|}
name|KeyStoreParametersFactoryBean
name|kspfb
init|=
operator|(
name|KeyStoreParametersFactoryBean
operator|)
name|value
decl_stmt|;
name|String
name|id
init|=
name|kspfb
operator|.
name|getId
argument_list|()
decl_stmt|;
name|MutablePassThroughMetadata
name|factory
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutablePassThroughMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.passThrough."
operator|+
name|id
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setObject
argument_list|(
operator|new
name|PassThroughCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
name|kspfb
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|factory2
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory2
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.factory."
operator|+
name|id
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryMethod
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setInitMethod
argument_list|(
literal|"afterPropertiesSet"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setDestroyMethod
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|addProperty
argument_list|(
literal|"blueprintContainer"
argument_list|,
name|createRef
argument_list|(
name|context
argument_list|,
literal|"blueprintContainer"
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|ctx
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setRuntimeClass
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryComponent
argument_list|(
name|factory2
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryMethod
argument_list|(
literal|"getObject"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing KeyStoreParameters done, returning {}"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
DECL|method|parseSecureRandomParametersNode (Element element, ParserContext context)
specifier|private
name|Metadata
name|parseSecureRandomParametersNode
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing SecureRandomParameters {}"
argument_list|,
name|element
argument_list|)
expr_stmt|;
comment|// now parse the key store parameters with JAXB
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
decl_stmt|;
try|try
block|{
name|binder
operator|=
name|getJaxbContext
argument_list|()
operator|.
name|createBinder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Failed to create the JAXB binder : "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|parseUsingJaxb
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|binder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|SecureRandomParametersFactoryBean
operator|)
condition|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Expected an instance of "
operator|+
name|SecureRandomParametersFactoryBean
operator|.
name|class
argument_list|)
throw|;
block|}
name|SecureRandomParametersFactoryBean
name|srfb
init|=
operator|(
name|SecureRandomParametersFactoryBean
operator|)
name|value
decl_stmt|;
name|String
name|id
init|=
name|srfb
operator|.
name|getId
argument_list|()
decl_stmt|;
name|MutablePassThroughMetadata
name|factory
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutablePassThroughMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.passThrough."
operator|+
name|id
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setObject
argument_list|(
operator|new
name|PassThroughCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
name|srfb
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|factory2
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory2
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.factory."
operator|+
name|id
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryMethod
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setInitMethod
argument_list|(
literal|"afterPropertiesSet"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setDestroyMethod
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|addProperty
argument_list|(
literal|"blueprintContainer"
argument_list|,
name|createRef
argument_list|(
name|context
argument_list|,
literal|"blueprintContainer"
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|ctx
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setRuntimeClass
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryComponent
argument_list|(
name|factory2
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryMethod
argument_list|(
literal|"getObject"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing SecureRandomParameters done, returning {}"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
DECL|method|parseSSLContextParametersNode (Element element, ParserContext context)
specifier|private
name|Metadata
name|parseSSLContextParametersNode
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing SSLContextParameters {}"
argument_list|,
name|element
argument_list|)
expr_stmt|;
comment|// now parse the key store parameters with JAXB
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
decl_stmt|;
try|try
block|{
name|binder
operator|=
name|getJaxbContext
argument_list|()
operator|.
name|createBinder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Failed to create the JAXB binder : "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|parseUsingJaxb
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|binder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|SSLContextParametersFactoryBean
operator|)
condition|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Expected an instance of "
operator|+
name|SSLContextParametersFactoryBean
operator|.
name|class
argument_list|)
throw|;
block|}
name|SSLContextParametersFactoryBean
name|scpfb
init|=
operator|(
name|SSLContextParametersFactoryBean
operator|)
name|value
decl_stmt|;
name|String
name|id
init|=
name|scpfb
operator|.
name|getId
argument_list|()
decl_stmt|;
name|MutablePassThroughMetadata
name|factory
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutablePassThroughMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.passThrough."
operator|+
name|id
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setObject
argument_list|(
operator|new
name|PassThroughCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
name|scpfb
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|factory2
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory2
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.factory."
operator|+
name|id
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setFactoryMethod
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setInitMethod
argument_list|(
literal|"afterPropertiesSet"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|setDestroyMethod
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
name|factory2
operator|.
name|addProperty
argument_list|(
literal|"blueprintContainer"
argument_list|,
name|createRef
argument_list|(
name|context
argument_list|,
literal|"blueprintContainer"
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|ctx
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setRuntimeClass
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryComponent
argument_list|(
name|factory2
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setFactoryMethod
argument_list|(
literal|"getObject"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parsing SSLContextParameters done, returning {}"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
DECL|method|registerBeans (ParserContext context, String contextId, List<?> beans)
specifier|private
name|void
name|registerBeans
parameter_list|(
name|ParserContext
name|context
parameter_list|,
name|String
name|contextId
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|beans
parameter_list|)
block|{
if|if
condition|(
name|beans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|bean
range|:
name|beans
control|)
block|{
if|if
condition|(
name|bean
operator|instanceof
name|AbstractCamelFactoryBean
condition|)
block|{
name|registerBean
argument_list|(
name|context
argument_list|,
name|contextId
argument_list|,
operator|(
name|AbstractCamelFactoryBean
argument_list|<
name|?
argument_list|>
operator|)
name|bean
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|registerBean (ParserContext context, String contextId, AbstractCamelFactoryBean<?> fact)
specifier|protected
name|void
name|registerBean
parameter_list|(
name|ParserContext
name|context
parameter_list|,
name|String
name|contextId
parameter_list|,
name|AbstractCamelFactoryBean
argument_list|<
name|?
argument_list|>
name|fact
parameter_list|)
block|{
name|String
name|id
init|=
name|fact
operator|.
name|getId
argument_list|()
decl_stmt|;
name|fact
operator|.
name|setCamelContextId
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
name|MutablePassThroughMetadata
name|eff
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutablePassThroughMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|eff
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.bean.passthrough."
operator|+
name|id
argument_list|)
expr_stmt|;
name|eff
operator|.
name|setObject
argument_list|(
operator|new
name|PassThroughCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
name|fact
argument_list|)
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|ef
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|ef
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.bean.factory."
operator|+
name|id
argument_list|)
expr_stmt|;
name|ef
operator|.
name|setFactoryComponent
argument_list|(
name|eff
argument_list|)
expr_stmt|;
name|ef
operator|.
name|setFactoryMethod
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
name|ef
operator|.
name|addProperty
argument_list|(
literal|"blueprintContainer"
argument_list|,
name|createRef
argument_list|(
name|context
argument_list|,
literal|"blueprintContainer"
argument_list|)
argument_list|)
expr_stmt|;
name|ef
operator|.
name|setInitMethod
argument_list|(
literal|"afterPropertiesSet"
argument_list|)
expr_stmt|;
name|ef
operator|.
name|setDestroyMethod
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
name|MutableBeanMetadata
name|e
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|e
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|e
operator|.
name|setRuntimeClass
argument_list|(
name|fact
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setFactoryComponent
argument_list|(
name|ef
argument_list|)
expr_stmt|;
name|e
operator|.
name|setFactoryMethod
argument_list|(
literal|"getObject"
argument_list|)
expr_stmt|;
name|e
operator|.
name|addDependsOn
argument_list|(
literal|".camelBlueprint.processor.bean."
operator|+
name|contextId
argument_list|)
expr_stmt|;
name|context
operator|.
name|getComponentDefinitionRegistry
argument_list|()
operator|.
name|registerComponentDefinition
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlueprintContainer (ParserContext context)
specifier|protected
name|BlueprintContainer
name|getBlueprintContainer
parameter_list|(
name|ParserContext
name|context
parameter_list|)
block|{
name|PassThroughMetadata
name|ptm
init|=
operator|(
name|PassThroughMetadata
operator|)
name|context
operator|.
name|getComponentDefinitionRegistry
argument_list|()
operator|.
name|getComponentDefinition
argument_list|(
literal|"blueprintContainer"
argument_list|)
decl_stmt|;
return|return
operator|(
name|BlueprintContainer
operator|)
name|ptm
operator|.
name|getObject
argument_list|()
return|;
block|}
DECL|method|decorate (Node node, ComponentMetadata component, ParserContext context)
specifier|public
name|ComponentMetadata
name|decorate
parameter_list|(
name|Node
name|node
parameter_list|,
name|ComponentMetadata
name|component
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|parseUsingJaxb (Element element, ParserContext parserContext, Binder<Node> binder)
specifier|protected
name|Object
name|parseUsingJaxb
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|,
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
parameter_list|)
block|{
try|try
block|{
return|return
name|binder
operator|.
name|unmarshal
argument_list|(
name|element
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Failed to parse JAXB element: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getJaxbContext ()
specifier|public
name|JAXBContext
name|getJaxbContext
parameter_list|()
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|jaxbContext
operator|==
literal|null
condition|)
block|{
name|jaxbContext
operator|=
name|createJaxbContext
argument_list|()
expr_stmt|;
block|}
return|return
name|jaxbContext
return|;
block|}
DECL|method|createJaxbContext ()
specifier|protected
name|JAXBContext
name|createJaxbContext
parameter_list|()
throws|throws
name|JAXBException
block|{
name|StringBuilder
name|packages
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
range|:
name|getJaxbPackages
argument_list|()
control|)
block|{
if|if
condition|(
name|packages
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|packages
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|packages
operator|.
name|append
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cl
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|packages
operator|.
name|toString
argument_list|()
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getJaxbPackages ()
specifier|protected
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getJaxbPackages
parameter_list|()
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|CamelContextFactoryBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|AbstractCamelContextFactoryBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|config
operator|.
name|StreamResequencerConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|DataFormatsDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|loadbalancer
operator|.
name|RoundRobinLoadBalancerDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|SSLContextParametersFactoryBean
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|classes
return|;
block|}
DECL|method|createRef (ParserContext context, String value)
specifier|private
name|RefMetadata
name|createRef
parameter_list|(
name|ParserContext
name|context
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|MutableRefMetadata
name|r
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableRefMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|r
operator|.
name|setComponentId
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|class|PassThroughCallable
specifier|public
specifier|static
class|class
name|PassThroughCallable
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|T
argument_list|>
block|{
DECL|field|value
specifier|private
name|T
name|value
decl_stmt|;
DECL|method|PassThroughCallable (T value)
specifier|public
name|PassThroughCallable
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|call ()
specifier|public
name|T
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|value
return|;
block|}
block|}
DECL|class|CamelInjector
specifier|public
specifier|static
class|class
name|CamelInjector
extends|extends
name|CamelPostProcessorHelper
implements|implements
name|BeanProcessor
block|{
DECL|field|camelContextName
specifier|private
specifier|final
name|String
name|camelContextName
decl_stmt|;
DECL|field|blueprintContainer
specifier|private
name|BlueprintContainer
name|blueprintContainer
decl_stmt|;
DECL|method|CamelInjector (String camelContextName)
specifier|public
name|CamelInjector
parameter_list|(
name|String
name|camelContextName
parameter_list|)
block|{
name|this
operator|.
name|camelContextName
operator|=
name|camelContextName
expr_stmt|;
block|}
DECL|method|setBlueprintContainer (BlueprintContainer blueprintContainer)
specifier|public
name|void
name|setBlueprintContainer
parameter_list|(
name|BlueprintContainer
name|blueprintContainer
parameter_list|)
block|{
name|this
operator|.
name|blueprintContainer
operator|=
name|blueprintContainer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
if|if
condition|(
name|blueprintContainer
operator|!=
literal|null
condition|)
block|{
name|CamelContext
name|answer
init|=
operator|(
name|CamelContext
operator|)
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
return|return
name|answer
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|beforeInit (Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanMetadata)
specifier|public
name|Object
name|beforeInit
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|,
name|BeanCreator
name|beanCreator
parameter_list|,
name|BeanMetadata
name|beanMetadata
parameter_list|)
block|{
comment|// prefer to inject later in afterInit
return|return
name|bean
return|;
block|}
comment|/**          * A strategy method to allow implementations to perform some custom JBI          * based injection of the POJO          *          * @param bean the bean to be injected          */
DECL|method|injectFields (final Object bean, final String beanName)
specifier|protected
name|void
name|injectFields
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|bean
operator|.
name|getClass
argument_list|()
decl_stmt|;
do|do
block|{
name|Field
index|[]
name|fields
init|=
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|EndpointInject
name|endpointInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointInject
operator|!=
literal|null
operator|&&
name|matchContext
argument_list|(
name|endpointInject
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|injectField
argument_list|(
name|field
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
name|Produce
name|produce
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Produce
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|produce
operator|!=
literal|null
operator|&&
name|matchContext
argument_list|(
name|produce
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|injectField
argument_list|(
name|field
argument_list|,
name|produce
operator|.
name|uri
argument_list|()
argument_list|,
name|produce
operator|.
name|ref
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
block|}
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|!=
name|Object
operator|.
name|class
condition|)
do|;
block|}
DECL|method|injectField (Field field, String endpointUri, String endpointRef, Object bean, String beanName)
specifier|protected
name|void
name|injectField
parameter_list|(
name|Field
name|field
parameter_list|,
name|String
name|endpointUri
parameter_list|,
name|String
name|endpointRef
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|setField
argument_list|(
name|field
argument_list|,
name|bean
argument_list|,
name|getInjectionValue
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|endpointUri
argument_list|,
name|endpointRef
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setField (Field field, Object instance, Object value)
specifier|protected
specifier|static
name|void
name|setField
parameter_list|(
name|Field
name|field
parameter_list|,
name|Object
name|instance
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
try|try
block|{
name|boolean
name|oldAccessible
init|=
name|field
operator|.
name|isAccessible
argument_list|()
decl_stmt|;
name|boolean
name|shouldSetAccessible
init|=
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|oldAccessible
decl_stmt|;
if|if
condition|(
name|shouldSetAccessible
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldSetAccessible
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
name|oldAccessible
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot inject value of class: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|" into: "
operator|+
name|field
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not access method: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|injectMethods (final Object bean, final String beanName)
specifier|protected
name|void
name|injectMethods
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|bean
operator|.
name|getClass
argument_list|()
decl_stmt|;
do|do
block|{
name|Method
index|[]
name|methods
init|=
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|setterInjection
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|consumerInjection
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|!=
name|Object
operator|.
name|class
condition|)
do|;
block|}
DECL|method|setterInjection (Method method, Object bean, String beanName)
specifier|protected
name|void
name|setterInjection
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|EndpointInject
name|endpointInject
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointInject
operator|!=
literal|null
operator|&&
name|matchContext
argument_list|(
name|endpointInject
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|setterInjection
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Produce
name|produce
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Produce
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|produce
operator|!=
literal|null
operator|&&
name|matchContext
argument_list|(
name|produce
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|setterInjection
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
name|produce
operator|.
name|uri
argument_list|()
argument_list|,
name|produce
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setterInjection (Method method, Object bean, String beanName, String endpointUri, String endpointRef)
specifier|protected
name|void
name|setterInjection
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|,
name|String
name|endpointUri
parameter_list|,
name|String
name|endpointRef
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterTypes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring badly annotated method for injection due to incorrect number of parameters: "
operator|+
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|propertyName
init|=
name|ObjectHelper
operator|.
name|getPropertyName
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|getInjectionValue
argument_list|(
name|parameterTypes
index|[
literal|0
index|]
argument_list|,
name|endpointUri
argument_list|,
name|endpointRef
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|afterInit (Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanMetadata)
specifier|public
name|Object
name|afterInit
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|,
name|BeanCreator
name|beanCreator
parameter_list|,
name|BeanMetadata
name|beanMetadata
parameter_list|)
block|{
comment|// we cannot inject CamelContextAware beans as the CamelContext may not be ready
name|injectFields
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|injectMethods
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
return|return
name|bean
return|;
block|}
DECL|method|beforeDestroy (Object bean, String beanName)
specifier|public
name|void
name|beforeDestroy
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{         }
DECL|method|afterDestroy (Object bean, String beanName)
specifier|public
name|void
name|afterDestroy
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{         }
block|}
DECL|class|CamelDependenciesFinder
specifier|public
specifier|static
class|class
name|CamelDependenciesFinder
implements|implements
name|ComponentDefinitionRegistryProcessor
block|{
DECL|field|camelContextName
specifier|private
specifier|final
name|String
name|camelContextName
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|ParserContext
name|context
decl_stmt|;
DECL|field|blueprintContainer
specifier|private
name|BlueprintContainer
name|blueprintContainer
decl_stmt|;
DECL|method|CamelDependenciesFinder (String camelContextName, ParserContext context)
specifier|public
name|CamelDependenciesFinder
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|camelContextName
operator|=
name|camelContextName
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|setBlueprintContainer (BlueprintContainer blueprintContainer)
specifier|public
name|void
name|setBlueprintContainer
parameter_list|(
name|BlueprintContainer
name|blueprintContainer
parameter_list|)
block|{
name|this
operator|.
name|blueprintContainer
operator|=
name|blueprintContainer
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|process (ComponentDefinitionRegistry componentDefinitionRegistry)
specifier|public
name|void
name|process
parameter_list|(
name|ComponentDefinitionRegistry
name|componentDefinitionRegistry
parameter_list|)
block|{
name|CamelContextFactoryBean
name|ccfb
init|=
operator|(
name|CamelContextFactoryBean
operator|)
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
literal|".camelBlueprint.factory."
operator|+
name|camelContextName
argument_list|)
decl_stmt|;
name|CamelContext
name|camelContext
init|=
name|ccfb
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|languages
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dataformats
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dependsOn
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RouteDefinition
name|rd
range|:
name|camelContext
operator|.
name|getRouteDefinitions
argument_list|()
control|)
block|{
name|findInputComponents
argument_list|(
name|rd
operator|.
name|getInputs
argument_list|()
argument_list|,
name|components
argument_list|,
name|languages
argument_list|,
name|dataformats
argument_list|)
expr_stmt|;
name|findOutputComponents
argument_list|(
name|rd
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|components
argument_list|,
name|languages
argument_list|,
name|dataformats
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|String
name|component
range|:
name|components
control|)
block|{
name|ComponentMetadata
name|cm
init|=
name|componentDefinitionRegistry
operator|.
name|getComponentDefinition
argument_list|(
literal|".camelBlueprint.componentResolver."
operator|+
name|component
argument_list|)
decl_stmt|;
if|if
condition|(
name|cm
operator|==
literal|null
condition|)
block|{
name|MutableReferenceMetadata
name|svc
init|=
name|createMetadata
argument_list|(
name|MutableReferenceMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|svc
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.componentResolver."
operator|+
name|component
argument_list|)
expr_stmt|;
name|svc
operator|.
name|setFilter
argument_list|(
literal|"(component="
operator|+
name|component
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|setAvailability
argument_list|(
name|componentDefinitionRegistry
operator|.
name|containsComponentDefinition
argument_list|(
name|component
argument_list|)
condition|?
name|AVAILABILITY_OPTIONAL
else|:
name|AVAILABILITY_MANDATORY
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Try to set the runtime interface (only with aries blueprint> 0.1
name|svc
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setRuntimeInterface"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|svc
argument_list|,
name|ComponentResolver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Check if the bundle can see the class
try|try
block|{
name|PassThroughMetadata
name|ptm
init|=
operator|(
name|PassThroughMetadata
operator|)
name|componentDefinitionRegistry
operator|.
name|getComponentDefinition
argument_list|(
literal|"blueprintBundle"
argument_list|)
decl_stmt|;
name|Bundle
name|b
init|=
operator|(
name|Bundle
operator|)
name|ptm
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|loadClass
argument_list|(
name|ComponentResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|ComponentResolver
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
name|svc
operator|.
name|setInterface
argument_list|(
name|ComponentResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t2
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
name|componentDefinitionRegistry
operator|.
name|registerComponentDefinition
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|dependsOn
operator|.
name|add
argument_list|(
name|svc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|language
range|:
name|languages
control|)
block|{
name|ComponentMetadata
name|cm
init|=
name|componentDefinitionRegistry
operator|.
name|getComponentDefinition
argument_list|(
literal|".camelBlueprint.languageResolver."
operator|+
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|cm
operator|==
literal|null
condition|)
block|{
name|MutableReferenceMetadata
name|svc
init|=
name|createMetadata
argument_list|(
name|MutableReferenceMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|svc
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.languageResolver."
operator|+
name|language
argument_list|)
expr_stmt|;
name|svc
operator|.
name|setFilter
argument_list|(
literal|"(language="
operator|+
name|language
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|setAvailability
argument_list|(
name|componentDefinitionRegistry
operator|.
name|containsComponentDefinition
argument_list|(
name|language
argument_list|)
condition|?
name|AVAILABILITY_OPTIONAL
else|:
name|AVAILABILITY_MANDATORY
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Try to set the runtime interface (only with aries blueprint> 0.1
name|svc
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setRuntimeInterface"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|svc
argument_list|,
name|LanguageResolver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Check if the bundle can see the class
try|try
block|{
name|PassThroughMetadata
name|ptm
init|=
operator|(
name|PassThroughMetadata
operator|)
name|componentDefinitionRegistry
operator|.
name|getComponentDefinition
argument_list|(
literal|"blueprintBundle"
argument_list|)
decl_stmt|;
name|Bundle
name|b
init|=
operator|(
name|Bundle
operator|)
name|ptm
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|loadClass
argument_list|(
name|LanguageResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|LanguageResolver
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
name|svc
operator|.
name|setInterface
argument_list|(
name|LanguageResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t2
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
name|componentDefinitionRegistry
operator|.
name|registerComponentDefinition
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|dependsOn
operator|.
name|add
argument_list|(
name|svc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|dataformat
range|:
name|dataformats
control|)
block|{
name|ComponentMetadata
name|cm
init|=
name|componentDefinitionRegistry
operator|.
name|getComponentDefinition
argument_list|(
literal|".camelBlueprint.dataformatResolver."
operator|+
name|dataformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|cm
operator|==
literal|null
condition|)
block|{
name|MutableReferenceMetadata
name|svc
init|=
name|createMetadata
argument_list|(
name|MutableReferenceMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|svc
operator|.
name|setId
argument_list|(
literal|".camelBlueprint.dataformatResolver."
operator|+
name|dataformat
argument_list|)
expr_stmt|;
name|svc
operator|.
name|setFilter
argument_list|(
literal|"(dataformat="
operator|+
name|dataformat
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|setAvailability
argument_list|(
name|componentDefinitionRegistry
operator|.
name|containsComponentDefinition
argument_list|(
name|dataformat
argument_list|)
condition|?
name|AVAILABILITY_OPTIONAL
else|:
name|AVAILABILITY_MANDATORY
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Try to set the runtime interface (only with aries blueprint> 0.1
name|svc
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setRuntimeInterface"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|svc
argument_list|,
name|DataFormatResolver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Check if the bundle can see the class
try|try
block|{
name|PassThroughMetadata
name|ptm
init|=
operator|(
name|PassThroughMetadata
operator|)
name|componentDefinitionRegistry
operator|.
name|getComponentDefinition
argument_list|(
literal|"blueprintBundle"
argument_list|)
decl_stmt|;
name|Bundle
name|b
init|=
operator|(
name|Bundle
operator|)
name|ptm
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|loadClass
argument_list|(
name|DataFormatResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|DataFormatResolver
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
name|svc
operator|.
name|setInterface
argument_list|(
name|DataFormatResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t2
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
name|componentDefinitionRegistry
operator|.
name|registerComponentDefinition
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|dependsOn
operator|.
name|add
argument_list|(
name|svc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to add dependencies on to camel components OSGi services.  "
operator|+
literal|"The Apache Aries blueprint implementation used it too old and the blueprint bundle can not see the org.apache.camel.spi package."
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|languages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dataformats
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createMetadata (java.lang.Class<T> tClass)
specifier|public
parameter_list|<
name|T
extends|extends
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|Metadata
parameter_list|>
name|T
name|createMetadata
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Class
argument_list|<
name|T
argument_list|>
name|tClass
parameter_list|)
block|{
return|return
name|context
operator|.
name|createMetadata
argument_list|(
name|tClass
argument_list|)
return|;
block|}
DECL|method|findInputComponents (List<FromDefinition> defs, Set<String> components, Set<String> languages, Set<String> dataformats)
specifier|private
name|void
name|findInputComponents
parameter_list|(
name|List
argument_list|<
name|FromDefinition
argument_list|>
name|defs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|components
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|languages
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dataformats
parameter_list|)
block|{
if|if
condition|(
name|defs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FromDefinition
name|def
range|:
name|defs
control|)
block|{
name|findUriComponent
argument_list|(
name|def
operator|.
name|getUri
argument_list|()
argument_list|,
name|components
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|method|findOutputComponents (List<ProcessorDefinition<?>> defs, Set<String> components, Set<String> languages, Set<String> dataformats)
specifier|private
name|void
name|findOutputComponents
parameter_list|(
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|defs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|components
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|languages
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dataformats
parameter_list|)
block|{
if|if
condition|(
name|defs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|def
range|:
name|defs
control|)
block|{
if|if
condition|(
name|def
operator|instanceof
name|SendDefinition
condition|)
block|{
name|findUriComponent
argument_list|(
operator|(
operator|(
name|SendDefinition
operator|)
name|def
operator|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|components
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|MarshalDefinition
condition|)
block|{
name|findDataFormat
argument_list|(
operator|(
operator|(
name|MarshalDefinition
operator|)
name|def
operator|)
operator|.
name|getDataFormatType
argument_list|()
argument_list|,
name|dataformats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|UnmarshalDefinition
condition|)
block|{
name|findDataFormat
argument_list|(
operator|(
operator|(
name|UnmarshalDefinition
operator|)
name|def
operator|)
operator|.
name|getDataFormatType
argument_list|()
argument_list|,
name|dataformats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|ExpressionNode
condition|)
block|{
name|findLanguage
argument_list|(
operator|(
operator|(
name|ExpressionNode
operator|)
name|def
operator|)
operator|.
name|getExpression
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|ResequenceDefinition
condition|)
block|{
name|findLanguage
argument_list|(
operator|(
operator|(
name|ResequenceDefinition
operator|)
name|def
operator|)
operator|.
name|getExpression
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|AggregateDefinition
condition|)
block|{
name|findLanguage
argument_list|(
operator|(
operator|(
name|AggregateDefinition
operator|)
name|def
operator|)
operator|.
name|getExpression
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
name|findLanguage
argument_list|(
operator|(
operator|(
name|AggregateDefinition
operator|)
name|def
operator|)
operator|.
name|getCorrelationExpression
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
name|findLanguage
argument_list|(
operator|(
operator|(
name|AggregateDefinition
operator|)
name|def
operator|)
operator|.
name|getCompletionPredicate
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
name|findLanguage
argument_list|(
operator|(
operator|(
name|AggregateDefinition
operator|)
name|def
operator|)
operator|.
name|getCompletionTimeoutExpression
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
name|findLanguage
argument_list|(
operator|(
operator|(
name|AggregateDefinition
operator|)
name|def
operator|)
operator|.
name|getCompletionSizeExpression
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|CatchDefinition
condition|)
block|{
name|findLanguage
argument_list|(
operator|(
operator|(
name|CatchDefinition
operator|)
name|def
operator|)
operator|.
name|getHandled
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|OnExceptionDefinition
condition|)
block|{
name|findLanguage
argument_list|(
operator|(
operator|(
name|OnExceptionDefinition
operator|)
name|def
operator|)
operator|.
name|getRetryWhile
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
name|findLanguage
argument_list|(
operator|(
operator|(
name|OnExceptionDefinition
operator|)
name|def
operator|)
operator|.
name|getHandled
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
name|findLanguage
argument_list|(
operator|(
operator|(
name|OnExceptionDefinition
operator|)
name|def
operator|)
operator|.
name|getContinued
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|SortDefinition
condition|)
block|{
name|findLanguage
argument_list|(
operator|(
operator|(
name|SortDefinition
operator|)
name|def
operator|)
operator|.
name|getExpression
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|WireTapDefinition
condition|)
block|{
name|findLanguage
argument_list|(
operator|(
operator|(
name|WireTapDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|def
operator|)
operator|.
name|getNewExchangeExpression
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
name|findOutputComponents
argument_list|(
name|def
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|components
argument_list|,
name|languages
argument_list|,
name|dataformats
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|findLanguage (ExpressionDefinition expression, Set<String> languages)
specifier|private
name|void
name|findLanguage
parameter_list|(
name|ExpressionDefinition
name|expression
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|languages
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|String
name|lang
init|=
name|expression
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
operator|&&
name|lang
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|languages
operator|.
name|add
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|findLanguage (ExpressionSubElementDefinition expression, Set<String> languages)
specifier|private
name|void
name|findLanguage
parameter_list|(
name|ExpressionSubElementDefinition
name|expression
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|languages
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|findLanguage
argument_list|(
name|expression
operator|.
name|getExpressionType
argument_list|()
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findDataFormat (DataFormatDefinition dfd, Set<String> dataformats)
specifier|private
name|void
name|findDataFormat
parameter_list|(
name|DataFormatDefinition
name|dfd
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dataformats
parameter_list|)
block|{
if|if
condition|(
name|dfd
operator|!=
literal|null
operator|&&
name|dfd
operator|.
name|getDataFormatName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dataformats
operator|.
name|add
argument_list|(
name|dfd
operator|.
name|getDataFormatName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findUriComponent (String uri, Set<String> components)
specifier|private
name|void
name|findUriComponent
parameter_list|(
name|String
name|uri
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|components
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|String
name|splitURI
index|[]
init|=
name|ObjectHelper
operator|.
name|splitOnCharacter
argument_list|(
name|uri
argument_list|,
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitURI
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|String
name|scheme
init|=
name|splitURI
index|[
literal|0
index|]
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

