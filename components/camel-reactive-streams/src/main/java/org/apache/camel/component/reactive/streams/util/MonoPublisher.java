begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Subscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Subscription
import|;
end_import

begin_comment
comment|/**  * A publisher that publish a given item, then completes.  */
end_comment

begin_class
DECL|class|MonoPublisher
specifier|public
class|class
name|MonoPublisher
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Publisher
argument_list|<
name|T
argument_list|>
block|{
DECL|field|item
specifier|private
name|T
name|item
decl_stmt|;
DECL|method|MonoPublisher (T item)
specifier|public
name|MonoPublisher
parameter_list|(
name|T
name|item
parameter_list|)
block|{
name|this
operator|.
name|item
operator|=
name|item
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subscribe (Subscriber<? super T> subscriber)
specifier|public
name|void
name|subscribe
parameter_list|(
name|Subscriber
argument_list|<
name|?
super|super
name|T
argument_list|>
name|subscriber
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|subscriber
argument_list|,
literal|"subscriber must not be null"
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|onSubscribe
argument_list|(
operator|new
name|Subscription
argument_list|()
block|{
specifier|private
name|boolean
name|terminated
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|request
parameter_list|(
name|long
name|l
parameter_list|)
block|{
if|if
condition|(
name|terminated
condition|)
block|{
comment|// subscription is terminated, ignore
return|return;
block|}
name|terminated
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|l
operator|<=
literal|0
condition|)
block|{
name|subscriber
operator|.
name|onError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"3.9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subscriber
operator|.
name|onNext
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|onComplete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|terminated
operator|=
literal|true
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

