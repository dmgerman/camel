begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * The Camel reactive-streams endpoint.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"reactive-streams"
argument_list|,
name|title
operator|=
literal|"Reactive Streams"
argument_list|,
name|syntax
operator|=
literal|"reactive-streams:stream"
argument_list|,
name|consumerClass
operator|=
name|ReactiveStreamsConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"streams"
argument_list|)
DECL|class|ReactiveStreamsEndpoint
specifier|public
class|class
name|ReactiveStreamsEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriPath
DECL|field|stream
specifier|private
name|String
name|stream
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"128"
argument_list|)
DECL|field|maxInflightExchanges
specifier|private
name|Integer
name|maxInflightExchanges
init|=
literal|128
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|)
DECL|field|concurrentConsumers
specifier|private
name|int
name|concurrentConsumers
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
DECL|field|serviceName
specifier|private
name|String
name|serviceName
decl_stmt|;
DECL|method|ReactiveStreamsEndpoint (String endpointUri, ReactiveStreamsComponent component)
specifier|public
name|ReactiveStreamsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|ReactiveStreamsComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ReactiveStreamsProducer
argument_list|(
name|this
argument_list|,
name|stream
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ReactiveStreamsConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|getStream ()
specifier|public
name|String
name|getStream
parameter_list|()
block|{
return|return
name|stream
return|;
block|}
comment|/**      * Name of the stream channel used by the endpoint to exchange messages.      */
DECL|method|setStream (String stream)
specifier|public
name|void
name|setStream
parameter_list|(
name|String
name|stream
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
block|}
DECL|method|getMaxInflightExchanges ()
specifier|public
name|Integer
name|getMaxInflightExchanges
parameter_list|()
block|{
return|return
name|maxInflightExchanges
return|;
block|}
comment|/**      * Maximum number of exchanges concurrently being processed by Camel.      * This parameter controls backpressure on the stream.      * Setting a non-positive value will disable backpressure.      */
DECL|method|setMaxInflightExchanges (Integer maxInflightExchanges)
specifier|public
name|void
name|setMaxInflightExchanges
parameter_list|(
name|Integer
name|maxInflightExchanges
parameter_list|)
block|{
name|this
operator|.
name|maxInflightExchanges
operator|=
name|maxInflightExchanges
expr_stmt|;
block|}
DECL|method|getConcurrentConsumers ()
specifier|public
name|int
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|concurrentConsumers
return|;
block|}
comment|/**      * Number of threads used to process exchanges in the Camel route.      */
DECL|method|setConcurrentConsumers (int concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|concurrentConsumers
operator|=
name|concurrentConsumers
expr_stmt|;
block|}
DECL|method|getServiceName ()
specifier|public
name|String
name|getServiceName
parameter_list|()
block|{
return|return
name|serviceName
return|;
block|}
comment|/**      * Allows using an alternative CamelReactiveStreamService implementation. The implementation is looked up from the registry.      */
DECL|method|setServiceName (String serviceName)
specifier|public
name|void
name|setServiceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|this
operator|.
name|serviceName
operator|=
name|serviceName
expr_stmt|;
block|}
block|}
end_class

end_unit

