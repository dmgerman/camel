begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Subscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Publish a single item as soon as it's available.  */
end_comment

begin_class
DECL|class|DelayedMonoPublisher
specifier|public
class|class
name|DelayedMonoPublisher
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Publisher
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DelayedMonoPublisher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workerPool
specifier|private
name|ExecutorService
name|workerPool
decl_stmt|;
DECL|field|data
specifier|private
specifier|volatile
name|T
name|data
decl_stmt|;
DECL|field|exception
specifier|private
specifier|volatile
name|Throwable
name|exception
decl_stmt|;
DECL|field|subscriptions
specifier|private
name|List
argument_list|<
name|MonoSubscription
argument_list|>
name|subscriptions
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|flushing
specifier|private
name|AtomicBoolean
name|flushing
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|DelayedMonoPublisher (ExecutorService workerPool)
specifier|public
name|DelayedMonoPublisher
parameter_list|(
name|ExecutorService
name|workerPool
parameter_list|)
block|{
name|this
operator|.
name|workerPool
operator|=
name|workerPool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subscribe (Subscriber<? super T> subscriber)
specifier|public
name|void
name|subscribe
parameter_list|(
name|Subscriber
argument_list|<
name|?
super|super
name|T
argument_list|>
name|subscriber
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|subscriber
argument_list|,
literal|"subscriber must not be null"
argument_list|)
expr_stmt|;
name|MonoSubscription
name|sub
init|=
operator|new
name|MonoSubscription
argument_list|(
name|subscriber
argument_list|)
decl_stmt|;
name|subscriptions
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|onSubscribe
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|flushCycle
argument_list|()
expr_stmt|;
block|}
DECL|method|getData ()
specifier|public
name|T
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
DECL|method|setData (T data)
specifier|public
name|void
name|setData
parameter_list|(
name|T
name|data
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|data
argument_list|,
literal|"data must be not null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"data has already been set"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"an exception has already been set"
argument_list|)
throw|;
block|}
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|flushCycle
argument_list|()
expr_stmt|;
block|}
DECL|method|getException ()
specifier|public
name|Throwable
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
DECL|method|setException (Throwable exception)
specifier|public
name|void
name|setException
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|exception
argument_list|,
literal|"exception must be not null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"data has already been set"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"an exception has already been set"
argument_list|)
throw|;
block|}
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
name|flushCycle
argument_list|()
expr_stmt|;
block|}
DECL|method|flushCycle ()
specifier|private
name|void
name|flushCycle
parameter_list|()
block|{
name|boolean
name|notRunning
init|=
name|flushing
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|notRunning
condition|)
block|{
name|workerPool
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|List
argument_list|<
name|MonoSubscription
argument_list|>
name|completed
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MonoSubscription
name|sub
range|:
name|this
operator|.
name|subscriptions
control|)
block|{
name|sub
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|sub
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|completed
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|subscriptions
operator|.
name|removeAll
argument_list|(
name|completed
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|flushing
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|boolean
name|runAgain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|MonoSubscription
name|sub
range|:
name|this
operator|.
name|subscriptions
control|)
block|{
if|if
condition|(
name|sub
operator|.
name|isReady
argument_list|()
condition|)
block|{
name|runAgain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|runAgain
condition|)
block|{
name|flushCycle
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MonoSubscription
specifier|private
specifier|final
class|class
name|MonoSubscription
implements|implements
name|Subscription
block|{
DECL|field|terminated
specifier|private
specifier|volatile
name|boolean
name|terminated
decl_stmt|;
DECL|field|requested
specifier|private
specifier|volatile
name|boolean
name|requested
decl_stmt|;
DECL|field|subscriber
specifier|private
name|Subscriber
argument_list|<
name|?
super|super
name|T
argument_list|>
name|subscriber
decl_stmt|;
DECL|method|MonoSubscription (Subscriber<? super T> subscriber)
specifier|private
name|MonoSubscription
parameter_list|(
name|Subscriber
argument_list|<
name|?
super|super
name|T
argument_list|>
name|subscriber
parameter_list|)
block|{
name|this
operator|.
name|subscriber
operator|=
name|subscriber
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|request (long l)
specifier|public
name|void
name|request
parameter_list|(
name|long
name|l
parameter_list|)
block|{
if|if
condition|(
name|terminated
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The subscription is terminated"
argument_list|)
throw|;
block|}
if|if
condition|(
name|l
operator|<=
literal|0
condition|)
block|{
name|subscriber
operator|.
name|onError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"3.9"
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|terminated
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|requested
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|isReady
argument_list|()
condition|)
block|{
return|return;
block|}
name|terminated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|subscriber
operator|.
name|onNext
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|onComplete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|subscriber
operator|.
name|onError
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isTerminated ()
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
return|return
name|terminated
return|;
block|}
DECL|method|isReady ()
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
operator|!
name|terminated
operator|&&
name|requested
operator|&&
operator|(
name|data
operator|!=
literal|null
operator|||
name|exception
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|cancel ()
specifier|public
specifier|synchronized
name|void
name|cancel
parameter_list|()
block|{
name|terminated
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

