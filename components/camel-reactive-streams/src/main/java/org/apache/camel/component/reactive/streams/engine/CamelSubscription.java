begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|ReactiveStreamsBackpressureStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Subscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents a contract between a Camel published and an external subscriber.  * It manages backpressure in order to deal with slow subscribers.  */
end_comment

begin_class
DECL|class|CamelSubscription
specifier|public
class|class
name|CamelSubscription
implements|implements
name|Subscription
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelSubscription
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workerPool
specifier|private
name|ExecutorService
name|workerPool
decl_stmt|;
DECL|field|publisher
specifier|private
name|CamelPublisher
name|publisher
decl_stmt|;
DECL|field|backpressureStrategy
specifier|private
name|ReactiveStreamsBackpressureStrategy
name|backpressureStrategy
decl_stmt|;
DECL|field|subscriber
specifier|private
name|Subscriber
argument_list|<
name|?
super|super
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|subscriber
decl_stmt|;
comment|/**      * The lock is used just for the time necessary to read/write shared variables.      */
DECL|field|mutex
specifier|private
name|Lock
name|mutex
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|buffer
specifier|private
name|LinkedList
argument_list|<
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|buffer
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The current number of exchanges requested by the subscriber.      */
DECL|field|requested
specifier|private
name|long
name|requested
decl_stmt|;
comment|/**      * Indicates that a cancel operation is to be performed.      */
DECL|field|terminating
specifier|private
name|boolean
name|terminating
decl_stmt|;
comment|/**      * Indicates that the subscription is end.      */
DECL|field|terminated
specifier|private
name|boolean
name|terminated
decl_stmt|;
comment|/**      * Indicates that a thread is currently sending items downstream.      * Items must be sent downstream by a single thread for each subscription.      */
DECL|field|sending
specifier|private
name|boolean
name|sending
decl_stmt|;
DECL|method|CamelSubscription (ExecutorService workerPool, CamelPublisher publisher, ReactiveStreamsBackpressureStrategy backpressureStrategy, Subscriber<? super StreamPayload<Exchange>> subscriber)
specifier|public
name|CamelSubscription
parameter_list|(
name|ExecutorService
name|workerPool
parameter_list|,
name|CamelPublisher
name|publisher
parameter_list|,
name|ReactiveStreamsBackpressureStrategy
name|backpressureStrategy
parameter_list|,
name|Subscriber
argument_list|<
name|?
super|super
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|subscriber
parameter_list|)
block|{
name|this
operator|.
name|workerPool
operator|=
name|workerPool
expr_stmt|;
name|this
operator|.
name|publisher
operator|=
name|publisher
expr_stmt|;
name|this
operator|.
name|backpressureStrategy
operator|=
name|backpressureStrategy
expr_stmt|;
name|this
operator|.
name|subscriber
operator|=
name|subscriber
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|request (long l)
specifier|public
name|void
name|request
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Requested {} events from subscriber"
argument_list|,
name|l
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|<=
literal|0
condition|)
block|{
comment|// wrong argument
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|terminated
operator|=
literal|true
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|unsubscribe
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|onError
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"3.9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|requested
operator|+=
name|l
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|checkAndFlush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkAndFlush ()
specifier|protected
name|void
name|checkAndFlush
parameter_list|()
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|shouldFlush
init|=
operator|!
name|terminated
operator|&&
operator|!
name|sending
operator|&&
name|requested
operator|>
literal|0
operator|&&
name|buffer
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|shouldFlush
condition|)
block|{
name|sending
operator|=
literal|true
expr_stmt|;
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldFlush
condition|)
block|{
name|workerPool
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
name|this
operator|.
name|flush
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|sending
operator|=
literal|false
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// try again to flush
name|checkAndFlush
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|shouldComplete
init|=
name|terminating
operator|&&
operator|!
name|terminated
decl_stmt|;
if|if
condition|(
name|shouldComplete
condition|)
block|{
name|terminated
operator|=
literal|true
expr_stmt|;
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldComplete
condition|)
block|{
name|this
operator|.
name|publisher
operator|.
name|unsubscribe
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|subscriber
operator|.
name|onComplete
argument_list|()
expr_stmt|;
name|discardBuffer
argument_list|(
name|this
operator|.
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|flush ()
specifier|protected
name|void
name|flush
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|sendingQueue
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|terminated
condition|)
block|{
return|return;
block|}
name|int
name|amount
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|requested
argument_list|,
operator|(
name|long
operator|)
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|amount
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|requested
operator|-=
name|amount
expr_stmt|;
name|sendingQueue
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
name|amount
operator|>
literal|0
condition|)
block|{
name|sendingQueue
operator|.
name|add
argument_list|(
name|buffer
operator|.
name|removeFirst
argument_list|()
argument_list|)
expr_stmt|;
name|amount
operator|--
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sendingQueue
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending {} events to the subscriber"
argument_list|,
name|sendingQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
name|data
range|:
name|sendingQueue
control|)
block|{
comment|// TODO what if the subscriber throws an exception?
name|this
operator|.
name|subscriber
operator|.
name|onNext
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|shouldStop
init|=
name|this
operator|.
name|terminated
decl_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldStop
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
DECL|method|signalCompletion ()
specifier|public
name|void
name|signalCompletion
parameter_list|()
throws|throws
name|Exception
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|terminating
operator|=
literal|true
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|checkAndFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancel ()
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|publisher
operator|.
name|unsubscribe
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|terminated
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|bufferCopy
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|this
operator|.
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|discardBuffer
argument_list|(
name|bufferCopy
argument_list|)
expr_stmt|;
block|}
DECL|method|discardBuffer (List<StreamPayload<Exchange>> remaining)
specifier|protected
name|void
name|discardBuffer
parameter_list|(
name|List
argument_list|<
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|remaining
parameter_list|)
block|{
for|for
control|(
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
name|data
range|:
name|remaining
control|)
block|{
name|data
operator|.
name|getCallback
argument_list|()
operator|.
name|processed
argument_list|(
name|data
operator|.
name|getItem
argument_list|()
argument_list|,
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot process the exchange "
operator|+
name|data
operator|.
name|getItem
argument_list|()
operator|+
literal|": subscription cancelled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|publish (StreamPayload<Exchange> message)
specifier|public
name|void
name|publish
parameter_list|(
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
name|message
parameter_list|)
block|{
name|Map
argument_list|<
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|String
argument_list|>
name|discardedMessages
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|terminating
operator|&&
operator|!
name|this
operator|.
name|terminated
condition|)
block|{
name|Collection
argument_list|<
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|discarded
init|=
name|this
operator|.
name|backpressureStrategy
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|discarded
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|discardedMessages
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
name|ex
range|:
name|discarded
control|)
block|{
name|discardedMessages
operator|.
name|put
argument_list|(
name|ex
argument_list|,
literal|"Exchange "
operator|+
name|ex
operator|.
name|getItem
argument_list|()
operator|+
literal|" discarded by backpressure strategy "
operator|+
name|this
operator|.
name|backpressureStrategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// acknowledge
name|discardedMessages
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|message
argument_list|,
literal|"Exchange "
operator|+
name|message
operator|.
name|getItem
argument_list|()
operator|+
literal|" discarded: subscription closed"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// discarding outside of mutex scope
if|if
condition|(
name|discardedMessages
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|String
argument_list|>
name|discarded
range|:
name|discardedMessages
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StreamPayload
argument_list|<
name|Exchange
argument_list|>
name|m
init|=
name|discarded
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|m
operator|.
name|getCallback
argument_list|()
operator|.
name|processed
argument_list|(
name|m
operator|.
name|getItem
argument_list|()
argument_list|,
operator|new
name|IllegalStateException
argument_list|(
name|discarded
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|checkAndFlush
argument_list|()
expr_stmt|;
block|}
DECL|method|setBackpressureStrategy (ReactiveStreamsBackpressureStrategy backpressureStrategy)
specifier|public
name|void
name|setBackpressureStrategy
parameter_list|(
name|ReactiveStreamsBackpressureStrategy
name|backpressureStrategy
parameter_list|)
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|backpressureStrategy
operator|=
name|backpressureStrategy
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

