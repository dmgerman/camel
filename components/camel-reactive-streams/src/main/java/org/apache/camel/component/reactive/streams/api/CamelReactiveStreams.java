begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|engine
operator|.
name|CamelReactiveStreamsServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Subscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is the main entry-point for getting Camel streams associate to reactive-streams endpoints.  *  * It delegates main methods to an instance of {@link CamelReactiveStreamsService}. This component provides  * a default implementation that can be overridden in a 'META-INF/services/reactive-streams/reactiveStreamsService' file.  */
end_comment

begin_class
DECL|class|CamelReactiveStreams
specifier|public
specifier|final
class|class
name|CamelReactiveStreams
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelReactiveStreams
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|instances
specifier|private
specifier|static
name|Map
argument_list|<
name|CamelContext
argument_list|,
name|CamelReactiveStreams
argument_list|>
name|instances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|service
specifier|private
name|CamelReactiveStreamsService
name|service
decl_stmt|;
DECL|method|CamelReactiveStreams (CamelReactiveStreamsService service)
specifier|private
name|CamelReactiveStreams
parameter_list|(
name|CamelReactiveStreamsService
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
DECL|method|get (CamelContext context)
specifier|public
specifier|static
specifier|synchronized
name|CamelReactiveStreams
name|get
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|instances
operator|.
name|containsKey
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|CamelReactiveStreamsService
name|service
init|=
name|resolveReactiveStreamsService
argument_list|(
name|context
argument_list|)
decl_stmt|;
try|try
block|{
name|context
operator|.
name|addService
argument_list|(
name|service
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot add the CamelReactiveStreamsService to the Camel context"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|instances
operator|.
name|put
argument_list|(
name|context
argument_list|,
operator|new
name|CamelReactiveStreams
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|instances
operator|.
name|get
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resolveReactiveStreamsService (CamelContext context)
specifier|private
specifier|static
name|CamelReactiveStreamsService
name|resolveReactiveStreamsService
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CamelReactiveStreamsService
argument_list|>
name|serviceClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FactoryFinder
name|finder
init|=
name|context
operator|.
name|getFactoryFinder
argument_list|(
literal|"META-INF/services/reactive-streams/"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using FactoryFinder: {}"
argument_list|,
name|finder
argument_list|)
expr_stmt|;
name|serviceClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|CamelReactiveStreamsService
argument_list|>
operator|)
name|finder
operator|.
name|findClass
argument_list|(
literal|"reactiveStreamsService"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"'reactive.streams.service.class' not found"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No reactive stream service defined in 'META-INF/services/org/apache/camel/component/'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|CamelReactiveStreamsService
name|service
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|serviceClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|service
operator|=
name|serviceClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created reactive stream service from class: "
operator|+
name|serviceClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to create a reactive stream service of class "
operator|+
name|serviceClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using default reactive stream service"
argument_list|)
expr_stmt|;
name|service
operator|=
operator|new
name|CamelReactiveStreamsServiceImpl
argument_list|()
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
comment|/**      * Allows retrieving the service responsible for binding camel routes to streams.      *      * @return the stream service      */
DECL|method|getService ()
specifier|public
name|CamelReactiveStreamsService
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
comment|/**      * Returns the publisher associated to the given stream name.      * A publisher can be used to push Camel exchanges to reactive-streams subscribers.      *      * @param name the stream name      * @return the stream publisher      */
DECL|method|getPublisher (String name)
specifier|public
name|Publisher
argument_list|<
name|Exchange
argument_list|>
name|getPublisher
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name cannot be null"
argument_list|)
expr_stmt|;
return|return
name|service
operator|.
name|getPublisher
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the publisher associated to the given stream name.      * A publisher can be used to push Camel exchange to external reactive-streams subscribers.      *      * The publisher converts automatically exchanges to the given type.      *      * @param name the stream name      * @param type the type of the emitted items      * @param<T> the type of items emitted by the publisher      * @return the publisher associated to the stream      */
DECL|method|getPublisher (String name, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Publisher
argument_list|<
name|T
argument_list|>
name|getPublisher
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name cannot be null"
argument_list|)
expr_stmt|;
return|return
name|service
operator|.
name|getPublisher
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Returns the subscriber associated to the given stream name.      * A subscriber can be used to push items coming from external reactive-streams publishers to Camel routes.      *      * @param name the stream name      * @return the subscriber associated with the stream      */
DECL|method|getSubscriber (String name)
specifier|public
name|Subscriber
argument_list|<
name|Exchange
argument_list|>
name|getSubscriber
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name cannot be null"
argument_list|)
expr_stmt|;
return|return
name|service
operator|.
name|getSubscriber
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the subscriber associated to the given stream name.      * A subscriber can be used to push items coming from external reactive-streams publishers to Camel routes.      *      * The subscriber converts automatically items of the given type to exchanges before pushing them.      *      * @param name the stream name      * @param type the publisher converts automatically exchanges to the given type.      * @param<T> the type of items accepted by the subscriber      * @return the subscriber associated with the stream      */
DECL|method|getSubscriber (String name, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Subscriber
argument_list|<
name|T
argument_list|>
name|getSubscriber
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name cannot be null"
argument_list|)
expr_stmt|;
return|return
name|service
operator|.
name|getSubscriber
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

