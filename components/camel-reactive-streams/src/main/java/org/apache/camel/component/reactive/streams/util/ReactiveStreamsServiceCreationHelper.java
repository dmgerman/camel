begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|api
operator|.
name|CamelReactiveStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|api
operator|.
name|CamelReactiveStreamsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A utility class to create the reactive-streams service from factory finders.  * Users should not use this class directly, as it may be removed in future versions.  */
end_comment

begin_class
DECL|class|ReactiveStreamsServiceCreationHelper
specifier|public
specifier|final
class|class
name|ReactiveStreamsServiceCreationHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelReactiveStreams
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ReactiveStreamsServiceCreationHelper ()
specifier|private
name|ReactiveStreamsServiceCreationHelper
parameter_list|()
block|{     }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createNewReactiveStreamsService (CamelContext context, String name)
specifier|public
specifier|static
name|CamelReactiveStreamsService
name|createNewReactiveStreamsService
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"default-service"
expr_stmt|;
block|}
name|String
name|path
init|=
literal|"META-INF/services/org/apache/camel/reactive-streams/"
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|CamelReactiveStreamsService
argument_list|>
name|serviceClass
decl_stmt|;
try|try
block|{
name|FactoryFinder
name|finder
init|=
name|context
operator|.
name|getFactoryFinder
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using FactoryFinder: {}"
argument_list|,
name|finder
argument_list|)
expr_stmt|;
name|serviceClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|CamelReactiveStreamsService
argument_list|>
operator|)
name|finder
operator|.
name|findClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|serviceClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Class referenced in '"
operator|+
name|path
operator|+
name|name
operator|+
literal|"' not found"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create the reactive stream service defined in '"
operator|+
name|path
operator|+
name|name
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

