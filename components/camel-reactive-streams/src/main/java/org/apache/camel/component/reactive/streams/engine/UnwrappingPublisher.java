begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|ReactiveStreamsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|api
operator|.
name|DispatchCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Subscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Subscription
import|;
end_import

begin_comment
comment|/**  * A publisher that extracts the item from the payload as soon as it is delivered to the subscriber.  * It calls the dispatch callback if defined.  */
end_comment

begin_class
DECL|class|UnwrappingPublisher
specifier|public
class|class
name|UnwrappingPublisher
implements|implements
name|Publisher
argument_list|<
name|Exchange
argument_list|>
block|{
DECL|field|delegate
specifier|private
name|Publisher
argument_list|<
name|Exchange
argument_list|>
name|delegate
decl_stmt|;
DECL|method|UnwrappingPublisher (Publisher<Exchange> delegate)
specifier|public
name|UnwrappingPublisher
parameter_list|(
name|Publisher
argument_list|<
name|Exchange
argument_list|>
name|delegate
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|delegate
argument_list|,
literal|"delegate publisher cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subscribe (Subscriber<? super Exchange> subscriber)
specifier|public
name|void
name|subscribe
parameter_list|(
name|Subscriber
argument_list|<
name|?
super|super
name|Exchange
argument_list|>
name|subscriber
parameter_list|)
block|{
name|delegate
operator|.
name|subscribe
argument_list|(
operator|new
name|Subscriber
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
specifier|private
name|Subscription
name|subscription
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onSubscribe
parameter_list|(
name|Subscription
name|newSubscription
parameter_list|)
block|{
if|if
condition|(
name|newSubscription
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"subscription is null"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|newSubscription
operator|==
name|this
operator|.
name|subscription
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"already subscribed to the subscription: "
operator|+
name|newSubscription
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|subscription
operator|!=
literal|null
condition|)
block|{
name|newSubscription
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|subscription
operator|=
name|newSubscription
expr_stmt|;
name|subscriber
operator|.
name|onSubscribe
argument_list|(
name|newSubscription
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|Exchange
name|payload
parameter_list|)
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|subscriber
operator|.
name|onNext
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
operator|=
name|t
expr_stmt|;
block|}
name|DispatchCallback
argument_list|<
name|Exchange
argument_list|>
name|callback
init|=
name|ReactiveStreamsHelper
operator|.
name|getCallback
argument_list|(
name|payload
argument_list|)
decl_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|processed
argument_list|(
name|payload
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|subscriber
operator|.
name|onError
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onComplete
parameter_list|()
block|{
name|subscriber
operator|.
name|onComplete
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

