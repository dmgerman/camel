begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|BackpressureStrategy
import|;
end_import

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|Flowable
import|;
end_import

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|api
operator|.
name|CamelReactiveStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test backpressure from the consumer side.  */
end_comment

begin_class
DECL|class|BackpressureSubscriberTest
specifier|public
class|class
name|BackpressureSubscriberTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testBackpressure ()
specifier|public
name|void
name|testBackpressure
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Observable
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|toFlowable
argument_list|(
name|BackpressureStrategy
operator|.
name|BUFFER
argument_list|)
operator|.
name|subscribe
argument_list|(
name|CamelReactiveStreams
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|.
name|streamSubscriber
argument_list|(
literal|"slowNumbers"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MockEndpoint
name|endpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:endpoint"
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Maximum one inflight exchange, even if multiple consumer threads are present
comment|// Must take at least 50 * 10 = 500ms
name|assertTrue
argument_list|(
literal|"Exchange completed too early"
argument_list|,
name|end
operator|-
name|start
operator|>=
literal|500
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSlowerBackpressure ()
specifier|public
name|void
name|testSlowerBackpressure
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Observable
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|toFlowable
argument_list|(
name|BackpressureStrategy
operator|.
name|BUFFER
argument_list|)
operator|.
name|subscribe
argument_list|(
name|CamelReactiveStreams
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|.
name|streamSubscriber
argument_list|(
literal|"slowerNumbers"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MockEndpoint
name|endpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:endpoint"
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Maximum one inflight exchange, even if multiple consumer threads are present
comment|// Must take at least 300 * 2 = 600ms
name|assertTrue
argument_list|(
literal|"Exchange completed too early"
argument_list|,
name|end
operator|-
name|start
operator|>=
literal|600
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelSlowBackpressure ()
specifier|public
name|void
name|testParallelSlowBackpressure
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Flowable
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|40
argument_list|)
operator|.
name|subscribe
argument_list|(
name|CamelReactiveStreams
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|.
name|streamSubscriber
argument_list|(
literal|"parallelSlowNumbers"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MockEndpoint
name|endpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:endpoint"
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Maximum 5 inflight exchanges
comment|// Must take at least 100 * (40 / 5) = 800ms
name|assertTrue
argument_list|(
literal|"Exchange completed too early"
argument_list|,
name|end
operator|-
name|start
operator|>=
literal|800
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"reactive-streams:slowNumbers?concurrentConsumers=10&maxInflightExchanges=1"
argument_list|)
operator|.
name|process
argument_list|(
name|x
lambda|->
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"reactive-streams:slowerNumbers?concurrentConsumers=10&maxInflightExchanges=1"
argument_list|)
operator|.
name|process
argument_list|(
name|x
lambda|->
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"reactive-streams:parallelSlowNumbers?concurrentConsumers=10&maxInflightExchanges=5"
argument_list|)
operator|.
name|process
argument_list|(
name|x
lambda|->
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

