begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|Flowable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|engine
operator|.
name|DelayedMonoPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|DelayedMonoPublisherTest
specifier|public
class|class
name|DelayedMonoPublisherTest
block|{
DECL|field|service
specifier|private
name|ExecutorService
name|service
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|service
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|service
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAlreadyAvailable ()
specifier|public
name|void
name|testAlreadyAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|pub
operator|.
name|setData
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|Integer
argument_list|>
name|data
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|data
operator|::
name|add
argument_list|)
operator|.
name|doOnComplete
argument_list|(
name|latch
operator|::
name|countDown
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionAlreadyAvailable ()
specifier|public
name|void
name|testExceptionAlreadyAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|ex
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"An exception"
argument_list|)
decl_stmt|;
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|pub
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnError
argument_list|(
name|exceptions
operator|::
name|add
argument_list|)
operator|.
name|doOnError
argument_list|(
name|e
lambda|->
name|latch
operator|.
name|countDown
argument_list|()
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exceptions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
argument_list|,
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAvailableSoon ()
specifier|public
name|void
name|testAvailableSoon
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|Integer
argument_list|>
name|data
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|data
operator|::
name|add
argument_list|)
operator|.
name|doOnComplete
argument_list|(
name|latch
operator|::
name|countDown
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
name|pub
operator|.
name|setData
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAvailableLater ()
specifier|public
name|void
name|testAvailableLater
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|Integer
argument_list|>
name|data
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|data
operator|::
name|add
argument_list|)
operator|.
name|doOnComplete
argument_list|(
name|latch
operator|::
name|countDown
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|pub
operator|.
name|setData
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleSubscribers ()
specifier|public
name|void
name|testMultipleSubscribers
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ConcurrentLinkedDeque
argument_list|<
name|Integer
argument_list|>
name|data
init|=
operator|new
name|ConcurrentLinkedDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|data
operator|::
name|add
argument_list|)
operator|.
name|doOnComplete
argument_list|(
name|latch
operator|::
name|countDown
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|data
operator|::
name|add
argument_list|)
operator|.
name|doOnComplete
argument_list|(
name|latch
operator|::
name|countDown
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|pub
operator|.
name|setData
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|n
range|:
name|data
control|)
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|n
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipleSubscribersMixedArrival ()
specifier|public
name|void
name|testMultipleSubscribersMixedArrival
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ConcurrentLinkedDeque
argument_list|<
name|Integer
argument_list|>
name|data
init|=
operator|new
name|ConcurrentLinkedDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|data
operator|::
name|add
argument_list|)
operator|.
name|doOnComplete
argument_list|(
name|latch
operator|::
name|countDown
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|pub
operator|.
name|setData
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|data
operator|::
name|add
argument_list|)
operator|.
name|doOnComplete
argument_list|(
name|latch
operator|::
name|countDown
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|n
range|:
name|data
control|)
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|n
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipleSubscribersMixedArrivalException ()
specifier|public
name|void
name|testMultipleSubscribersMixedArrivalException
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|Exception
name|ex
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"An exception"
argument_list|)
decl_stmt|;
name|ConcurrentLinkedDeque
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|ConcurrentLinkedDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnError
argument_list|(
name|exceptions
operator|::
name|add
argument_list|)
operator|.
name|doOnError
argument_list|(
name|e
lambda|->
name|latch
operator|.
name|countDown
argument_list|()
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|pub
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|doOnError
argument_list|(
name|exceptions
operator|::
name|add
argument_list|)
operator|.
name|doOnError
argument_list|(
name|e
lambda|->
name|latch
operator|.
name|countDown
argument_list|()
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exceptions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Throwable
name|t
range|:
name|exceptions
control|)
block|{
name|assertEquals
argument_list|(
name|ex
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|testDataOrExceptionAllowed ()
specifier|public
name|void
name|testDataOrExceptionAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|Exception
name|ex
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"An exception"
argument_list|)
decl_stmt|;
name|pub
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|pub
operator|.
name|setData
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|testDataOrExceptionAllowed2 ()
specifier|public
name|void
name|testDataOrExceptionAllowed2
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|pub
operator|.
name|setData
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"An exception"
argument_list|)
decl_stmt|;
name|pub
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|testOnlyOneDataAllowed ()
specifier|public
name|void
name|testOnlyOneDataAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|pub
operator|.
name|setData
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pub
operator|.
name|setData
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|testOnlyOneExceptionAllowed ()
specifier|public
name|void
name|testOnlyOneExceptionAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|DelayedMonoPublisher
argument_list|<
name|Integer
argument_list|>
name|pub
init|=
operator|new
name|DelayedMonoPublisher
argument_list|<>
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|pub
operator|.
name|setException
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"An exception"
argument_list|)
argument_list|)
expr_stmt|;
name|pub
operator|.
name|setException
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"An exception"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

