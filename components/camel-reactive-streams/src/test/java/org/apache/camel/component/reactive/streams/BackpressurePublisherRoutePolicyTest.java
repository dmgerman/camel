begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|api
operator|.
name|CamelReactiveStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|support
operator|.
name|TestSubscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|throttling
operator|.
name|ThrottlingInflightRoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_class
DECL|class|BackpressurePublisherRoutePolicyTest
specifier|public
class|class
name|BackpressurePublisherRoutePolicyTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testThatBackpressureCausesTemporaryRouteStop ()
specifier|public
name|void
name|testThatBackpressureCausesTemporaryRouteStop
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|generationLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|25
argument_list|)
decl_stmt|;
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|ThrottlingInflightRoutePolicy
name|policy
init|=
operator|new
name|ThrottlingInflightRoutePolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setMaxInflightExchanges
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setScope
argument_list|(
name|ThrottlingInflightRoutePolicy
operator|.
name|ThrottlingScope
operator|.
name|Route
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setResumePercentOfMax
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setLoggingLevel
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"timer:tick?period=50&repeatCount=35"
argument_list|)
operator|.
name|id
argument_list|(
literal|"policy-route"
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|process
argument_list|(
name|x
lambda|->
name|generationLatch
operator|.
name|countDown
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"reactive-streams:pub"
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|addRoutesToCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|CountDownLatch
name|receptionLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|35
argument_list|)
decl_stmt|;
name|Publisher
argument_list|<
name|Exchange
argument_list|>
name|pub
init|=
name|CamelReactiveStreams
operator|.
name|get
argument_list|(
name|context
argument_list|()
argument_list|)
operator|.
name|fromStream
argument_list|(
literal|"pub"
argument_list|,
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestSubscriber
argument_list|<
name|Exchange
argument_list|>
name|subscriber
init|=
operator|new
name|TestSubscriber
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|Exchange
name|o
parameter_list|)
block|{
name|super
operator|.
name|onNext
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|receptionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|subscriber
operator|.
name|setInitiallyRequested
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|pub
operator|.
name|subscribe
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
comment|// Add another (fast) subscription that should not affect the backpressure on the route
name|Observable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|generationLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// after 25 messages are generated
comment|// The number of exchanges should be 10 (requested by the subscriber), so 35-10=25
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|receptionLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// fire a delayed request from the subscriber (required by camel core)
name|subscriber
operator|.
name|request
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|StatefulService
name|service
init|=
operator|(
name|StatefulService
operator|)
name|context
argument_list|()
operator|.
name|getRoute
argument_list|(
literal|"policy-route"
argument_list|)
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
comment|// ensure the route is stopped or suspended
name|assertTrue
argument_list|(
name|service
operator|.
name|isStopped
argument_list|()
operator|||
name|service
operator|.
name|isSuspended
argument_list|()
argument_list|)
expr_stmt|;
comment|// request all the remaining exchanges
name|subscriber
operator|.
name|request
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receptionLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// The reception latch has gone to 0
block|}
annotation|@
name|Test
DECL|method|testThatRouteRestartsOnUnsubscription ()
specifier|public
name|void
name|testThatRouteRestartsOnUnsubscription
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|generationLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|25
argument_list|)
decl_stmt|;
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|ThrottlingInflightRoutePolicy
name|policy
init|=
operator|new
name|ThrottlingInflightRoutePolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setMaxInflightExchanges
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setScope
argument_list|(
name|ThrottlingInflightRoutePolicy
operator|.
name|ThrottlingScope
operator|.
name|Route
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setResumePercentOfMax
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setLoggingLevel
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"timer:tick?period=50"
argument_list|)
comment|// unbounded
operator|.
name|id
argument_list|(
literal|"policy-route"
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|process
argument_list|(
name|x
lambda|->
name|generationLatch
operator|.
name|countDown
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"reactive-streams:pub"
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|addRoutesToCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|CountDownLatch
name|receptionLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|35
argument_list|)
decl_stmt|;
name|Publisher
argument_list|<
name|Exchange
argument_list|>
name|pub
init|=
name|CamelReactiveStreams
operator|.
name|get
argument_list|(
name|context
argument_list|()
argument_list|)
operator|.
name|fromStream
argument_list|(
literal|"pub"
argument_list|,
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestSubscriber
argument_list|<
name|Exchange
argument_list|>
name|subscriber
init|=
operator|new
name|TestSubscriber
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|Exchange
name|o
parameter_list|)
block|{
name|super
operator|.
name|onNext
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|receptionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|subscriber
operator|.
name|setInitiallyRequested
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|pub
operator|.
name|subscribe
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
comment|// Add another (fast) subscription that should not affect the backpressure on the route
name|Observable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|generationLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// after 25 messages are generated
comment|// The number of exchanges should be 10 (requested by the subscriber), so 35-10=25
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|receptionLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// fire a delayed request from the subscriber (required by camel core)
name|subscriber
operator|.
name|request
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|StatefulService
name|service
init|=
operator|(
name|StatefulService
operator|)
name|context
argument_list|()
operator|.
name|getRoute
argument_list|(
literal|"policy-route"
argument_list|)
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
comment|// ensure the route is stopped or suspended
name|assertTrue
argument_list|(
name|service
operator|.
name|isStopped
argument_list|()
operator|||
name|service
operator|.
name|isSuspended
argument_list|()
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|cancel
argument_list|()
expr_stmt|;
comment|// request other exchanges to ensure that the route works
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|Observable
operator|.
name|fromPublisher
argument_list|(
name|pub
argument_list|)
operator|.
name|subscribe
argument_list|(
name|n
lambda|->
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

