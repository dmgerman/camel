begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|BackpressureStrategy
import|;
end_import

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|api
operator|.
name|CamelReactiveStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the behaviour of the consumer side when using a different number of consumer threads.  */
end_comment

begin_class
DECL|class|ConcurrentConsumersTest
specifier|public
class|class
name|ConcurrentConsumersTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testSingleConsumer ()
specifier|public
name|void
name|testSingleConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|Observable
operator|.
name|intervalRange
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|,
literal|0
argument_list|,
literal|300
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
operator|.
name|toFlowable
argument_list|(
name|BackpressureStrategy
operator|.
name|BUFFER
argument_list|)
operator|.
name|subscribe
argument_list|(
name|CamelReactiveStreams
operator|.
name|get
argument_list|(
name|context
argument_list|()
argument_list|)
operator|.
name|getSubscriber
argument_list|(
literal|"singleConsumer"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MockEndpoint
name|endpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:singleBucket"
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|threads
init|=
name|endpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"thread"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|threads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure order is preserved when using a single consumer
name|List
argument_list|<
name|Long
argument_list|>
name|nums
init|=
name|endpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|prev
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|long
name|n
range|:
name|nums
control|)
block|{
name|assertEquals
argument_list|(
name|prev
operator|+
literal|1
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|prev
operator|=
name|n
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipleConsumers ()
specifier|public
name|void
name|testMultipleConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|Observable
operator|.
name|intervalRange
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|,
literal|0
argument_list|,
literal|300
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
operator|.
name|toFlowable
argument_list|(
name|BackpressureStrategy
operator|.
name|BUFFER
argument_list|)
operator|.
name|subscribe
argument_list|(
name|CamelReactiveStreams
operator|.
name|get
argument_list|(
name|context
argument_list|()
argument_list|)
operator|.
name|getSubscriber
argument_list|(
literal|"multipleConsumers"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MockEndpoint
name|endpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:multipleBucket"
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|threads
init|=
name|endpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"thread"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|threads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Order cannot be preserved when using multiple consumers
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"reactive-streams:singleConsumer"
argument_list|)
operator|.
name|process
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"thread"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:singleBucket"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"reactive-streams:multipleConsumers?concurrentConsumers=3"
argument_list|)
operator|.
name|process
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"thread"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:multipleBucket"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

