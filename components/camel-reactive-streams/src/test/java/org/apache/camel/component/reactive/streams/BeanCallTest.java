begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|Flowable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|util
operator|.
name|UnwrapStreamProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|BeanCallTest
specifier|public
class|class
name|BeanCallTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|beanCallTest ()
specifier|public
name|void
name|beanCallTest
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:handle"
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:num"
argument_list|)
operator|.
name|bean
argument_list|(
name|BeanCallTest
operator|.
name|this
argument_list|,
literal|"processBody"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|UnwrapStreamProcessor
argument_list|()
argument_list|)
comment|// Can be removed?
operator|.
name|split
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:handle"
argument_list|)
operator|.
name|setBody
argument_list|()
operator|.
name|constant
argument_list|(
literal|"ERR"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|addRoutesToCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:endpoint"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:num"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HelloBody 1"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|beanCallWithErrorTest ()
specifier|public
name|void
name|beanCallWithErrorTest
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:handle"
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:num"
argument_list|)
operator|.
name|bean
argument_list|(
name|BeanCallTest
operator|.
name|this
argument_list|,
literal|"processBodyWrongType"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|UnwrapStreamProcessor
argument_list|()
argument_list|)
comment|// Can be removed?
operator|.
name|split
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:handle"
argument_list|)
operator|.
name|setBody
argument_list|()
operator|.
name|constant
argument_list|(
literal|"ERR"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|addRoutesToCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:endpoint"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:num"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ERR"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|beanCallHeaderMappingTest ()
specifier|public
name|void
name|beanCallHeaderMappingTest
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:handle"
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:num"
argument_list|)
operator|.
name|bean
argument_list|(
name|BeanCallTest
operator|.
name|this
argument_list|,
literal|"processHeader"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|UnwrapStreamProcessor
argument_list|()
argument_list|)
comment|// Can be removed?
operator|.
name|split
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:handle"
argument_list|)
operator|.
name|setBody
argument_list|()
operator|.
name|constant
argument_list|(
literal|"ERR"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|addRoutesToCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:endpoint"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:num"
argument_list|,
literal|1
argument_list|,
literal|"myheader"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HelloHeader 2"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processBody (Publisher<Integer> data)
specifier|public
name|Publisher
argument_list|<
name|String
argument_list|>
name|processBody
parameter_list|(
name|Publisher
argument_list|<
name|Integer
argument_list|>
name|data
parameter_list|)
block|{
return|return
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|data
argument_list|)
operator|.
name|map
argument_list|(
name|l
lambda|->
literal|"HelloBody "
operator|+
name|l
argument_list|)
return|;
block|}
DECL|method|processBodyWrongType (Publisher<BeanCallTest> data)
specifier|public
name|Publisher
argument_list|<
name|String
argument_list|>
name|processBodyWrongType
parameter_list|(
name|Publisher
argument_list|<
name|BeanCallTest
argument_list|>
name|data
parameter_list|)
block|{
return|return
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|data
argument_list|)
operator|.
name|map
argument_list|(
name|l
lambda|->
literal|"HelloBody "
operator|+
name|l
argument_list|)
return|;
block|}
DECL|method|processHeader (@eaderR) Publisher<Integer> data)
specifier|public
name|Publisher
argument_list|<
name|String
argument_list|>
name|processHeader
parameter_list|(
annotation|@
name|Header
argument_list|(
literal|"myheader"
argument_list|)
name|Publisher
argument_list|<
name|Integer
argument_list|>
name|data
parameter_list|)
block|{
return|return
name|Flowable
operator|.
name|fromPublisher
argument_list|(
name|data
argument_list|)
operator|.
name|map
argument_list|(
name|l
lambda|->
literal|"HelloHeader "
operator|+
name|l
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

