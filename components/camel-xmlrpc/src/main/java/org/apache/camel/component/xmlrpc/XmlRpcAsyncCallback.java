begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlrpc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
DECL|class|XmlRpcAsyncCallback
specifier|public
class|class
name|XmlRpcAsyncCallback
implements|implements
name|AsyncCallback
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XmlRpcAsyncCallback
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelAsyncCallback
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
name|camelAsyncCallback
decl_stmt|;
DECL|field|camelExchange
specifier|private
specifier|final
name|Exchange
name|camelExchange
decl_stmt|;
DECL|method|XmlRpcAsyncCallback (Exchange exchange, org.apache.camel.AsyncCallback callback)
specifier|public
name|XmlRpcAsyncCallback
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|camelAsyncCallback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|camelExchange
operator|=
name|exchange
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleResult (XmlRpcRequest pRequest, Object pResult)
specifier|public
name|void
name|handleResult
parameter_list|(
name|XmlRpcRequest
name|pRequest
parameter_list|,
name|Object
name|pResult
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Get the response {}"
argument_list|,
name|pResult
argument_list|)
expr_stmt|;
name|camelExchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|pResult
argument_list|)
expr_stmt|;
name|camelAsyncCallback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleError (XmlRpcRequest pRequest, Throwable pError)
specifier|public
name|void
name|handleError
parameter_list|(
name|XmlRpcRequest
name|pRequest
parameter_list|,
name|Throwable
name|pError
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Get the Error {}"
argument_list|,
name|pError
argument_list|)
expr_stmt|;
name|camelExchange
operator|.
name|setException
argument_list|(
name|pError
argument_list|)
expr_stmt|;
name|camelAsyncCallback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

