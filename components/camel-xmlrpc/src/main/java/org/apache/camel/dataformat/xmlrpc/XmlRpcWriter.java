begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xmlrpc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|TypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|XmlRpcStreamConfig
import|;
end_import

begin_class
DECL|class|XmlRpcWriter
specifier|public
class|class
name|XmlRpcWriter
extends|extends
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|serializer
operator|.
name|XmlRpcWriter
block|{
DECL|field|ZERO_ATTRIBUTES
specifier|private
specifier|static
specifier|final
name|Attributes
name|ZERO_ATTRIBUTES
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|ContentHandler
name|handler
decl_stmt|;
DECL|method|XmlRpcWriter (XmlRpcStreamConfig pConfig, ContentHandler pHandler, TypeFactory pTypeFactory)
specifier|public
name|XmlRpcWriter
parameter_list|(
name|XmlRpcStreamConfig
name|pConfig
parameter_list|,
name|ContentHandler
name|pHandler
parameter_list|,
name|TypeFactory
name|pTypeFactory
parameter_list|)
block|{
name|super
argument_list|(
name|pConfig
argument_list|,
name|pHandler
argument_list|,
name|pTypeFactory
argument_list|)
expr_stmt|;
name|handler
operator|=
name|pHandler
expr_stmt|;
block|}
DECL|method|writeRequest (XmlRpcStreamConfig config, XmlRpcRequest request)
specifier|public
name|void
name|writeRequest
parameter_list|(
name|XmlRpcStreamConfig
name|config
parameter_list|,
name|XmlRpcRequest
name|request
parameter_list|)
throws|throws
name|SAXException
block|{
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|boolean
name|extensions
init|=
name|config
operator|.
name|isEnabledForExtensions
argument_list|()
decl_stmt|;
if|if
condition|(
name|extensions
condition|)
block|{
name|handler
operator|.
name|startPrefixMapping
argument_list|(
literal|"ex"
argument_list|,
name|XmlRpcWriter
operator|.
name|EXTENSIONS_URI
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"methodCall"
argument_list|,
literal|"methodCall"
argument_list|,
name|ZERO_ATTRIBUTES
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"methodName"
argument_list|,
literal|"methodName"
argument_list|,
name|ZERO_ATTRIBUTES
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|request
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|s
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"methodName"
argument_list|,
literal|"methodName"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"params"
argument_list|,
literal|"params"
argument_list|,
name|ZERO_ATTRIBUTES
argument_list|)
expr_stmt|;
name|int
name|num
init|=
name|request
operator|.
name|getParameterCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"param"
argument_list|,
literal|"param"
argument_list|,
name|ZERO_ATTRIBUTES
argument_list|)
expr_stmt|;
name|writeValue
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"param"
argument_list|,
literal|"param"
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"params"
argument_list|,
literal|"params"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"methodCall"
argument_list|,
literal|"methodCall"
argument_list|)
expr_stmt|;
if|if
condition|(
name|extensions
condition|)
block|{
name|handler
operator|.
name|endPrefixMapping
argument_list|(
literal|"ex"
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

