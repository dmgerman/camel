begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlrpc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|XmlRpcRequestProcessor
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|XmlRpcConfiguration
specifier|public
class|class
name|XmlRpcConfiguration
block|{
annotation|@
name|UriParam
DECL|field|enabledForExtensions
specifier|private
name|boolean
name|enabledForExtensions
decl_stmt|;
annotation|@
name|UriParam
DECL|field|contentLengthOptional
specifier|private
name|boolean
name|contentLengthOptional
decl_stmt|;
annotation|@
name|UriParam
DECL|field|basicEncoding
specifier|private
name|String
name|basicEncoding
decl_stmt|;
annotation|@
name|UriParam
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
annotation|@
name|UriParam
DECL|field|timeZone
specifier|private
name|java
operator|.
name|util
operator|.
name|TimeZone
name|timeZone
decl_stmt|;
annotation|@
name|UriParam
DECL|field|gzipCompressing
specifier|private
name|boolean
name|gzipCompressing
decl_stmt|;
annotation|@
name|UriParam
DECL|field|gzipRequesting
specifier|private
name|boolean
name|gzipRequesting
decl_stmt|;
annotation|@
name|UriParam
DECL|field|basicUserName
specifier|private
name|String
name|basicUserName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|basicPassword
specifier|private
name|String
name|basicPassword
decl_stmt|;
annotation|@
name|UriParam
DECL|field|connectionTimeout
specifier|private
name|int
name|connectionTimeout
decl_stmt|;
annotation|@
name|UriParam
DECL|field|replyTimeout
specifier|private
name|int
name|replyTimeout
decl_stmt|;
annotation|@
name|UriParam
DECL|field|enabledForExceptions
specifier|private
name|boolean
name|enabledForExceptions
decl_stmt|;
annotation|@
name|UriParam
DECL|field|xmlRpcServer
specifier|private
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|XmlRpcRequestProcessor
name|xmlRpcServer
decl_stmt|;
annotation|@
name|UriParam
DECL|field|userAgent
specifier|private
name|String
name|userAgent
decl_stmt|;
DECL|method|isEnabledForExtensions ()
specifier|public
name|boolean
name|isEnabledForExtensions
parameter_list|()
block|{
return|return
name|enabledForExtensions
return|;
block|}
comment|/**      * Whether extensions are enabled. By default, the client or server is strictly compliant to the XML-RPC specification and extensions are disabled.      */
DECL|method|setEnabledForExtensions (boolean enabledForExtensions)
specifier|public
name|void
name|setEnabledForExtensions
parameter_list|(
name|boolean
name|enabledForExtensions
parameter_list|)
block|{
name|this
operator|.
name|enabledForExtensions
operator|=
name|enabledForExtensions
expr_stmt|;
block|}
DECL|method|isContentLengthOptional ()
specifier|public
name|boolean
name|isContentLengthOptional
parameter_list|()
block|{
return|return
name|contentLengthOptional
return|;
block|}
comment|/**      * Whether a "Content-Length" header may be omitted. The XML-RPC specification demands, that such a header be present.      */
DECL|method|setContentLengthOptional (boolean contentLengthOptional)
specifier|public
name|void
name|setContentLengthOptional
parameter_list|(
name|boolean
name|contentLengthOptional
parameter_list|)
block|{
name|this
operator|.
name|contentLengthOptional
operator|=
name|contentLengthOptional
expr_stmt|;
block|}
DECL|method|getBasicEncoding ()
specifier|public
name|String
name|getBasicEncoding
parameter_list|()
block|{
return|return
name|basicEncoding
return|;
block|}
comment|/**      * Sets the encoding for basic authentication, null means UTF-8 is chosen.      */
DECL|method|setBasicEncoding (String basicEncoding)
specifier|public
name|void
name|setBasicEncoding
parameter_list|(
name|String
name|basicEncoding
parameter_list|)
block|{
name|this
operator|.
name|basicEncoding
operator|=
name|basicEncoding
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
comment|/**      * Sets the requests encoding, null means UTF-8 is chosen.      */
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|getTimeZone ()
specifier|public
name|TimeZone
name|getTimeZone
parameter_list|()
block|{
return|return
name|timeZone
return|;
block|}
comment|/**      * The timezone, which is used to interpret date/time.      * Defaults to {@link TimeZone#getDefault()}.      */
DECL|method|setTimeZone (TimeZone timeZone)
specifier|public
name|void
name|setTimeZone
parameter_list|(
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
block|}
DECL|method|isGzipCompressing ()
specifier|public
name|boolean
name|isGzipCompressing
parameter_list|()
block|{
return|return
name|gzipCompressing
return|;
block|}
comment|/**      * Whether gzip compression is being used for transmitting the request.      */
DECL|method|setGzipCompressing (boolean gzipCompressing)
specifier|public
name|void
name|setGzipCompressing
parameter_list|(
name|boolean
name|gzipCompressing
parameter_list|)
block|{
name|this
operator|.
name|gzipCompressing
operator|=
name|gzipCompressing
expr_stmt|;
block|}
DECL|method|isGzipRequesting ()
specifier|public
name|boolean
name|isGzipRequesting
parameter_list|()
block|{
return|return
name|gzipRequesting
return|;
block|}
comment|/**      * Whether gzip compression is being used for transmitting the request.      */
DECL|method|setGzipRequesting (boolean gzipRequesting)
specifier|public
name|void
name|setGzipRequesting
parameter_list|(
name|boolean
name|gzipRequesting
parameter_list|)
block|{
name|this
operator|.
name|gzipRequesting
operator|=
name|gzipRequesting
expr_stmt|;
block|}
DECL|method|getBasicUserName ()
specifier|public
name|String
name|getBasicUserName
parameter_list|()
block|{
return|return
name|basicUserName
return|;
block|}
comment|/**      * The user name for basic authentication.      */
DECL|method|setBasicUserName (String basicUserName)
specifier|public
name|void
name|setBasicUserName
parameter_list|(
name|String
name|basicUserName
parameter_list|)
block|{
name|this
operator|.
name|basicUserName
operator|=
name|basicUserName
expr_stmt|;
block|}
DECL|method|getBasicPassword ()
specifier|public
name|String
name|getBasicPassword
parameter_list|()
block|{
return|return
name|basicPassword
return|;
block|}
comment|/**      * The password for basic authentication.      */
DECL|method|setBasicPassword (String basicPassword)
specifier|public
name|void
name|setBasicPassword
parameter_list|(
name|String
name|basicPassword
parameter_list|)
block|{
name|this
operator|.
name|basicPassword
operator|=
name|basicPassword
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|int
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
comment|/**      * Set the connection timeout in milliseconds, 0 is to disable it      */
DECL|method|setConnectionTimeout (int connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
DECL|method|getReplyTimeout ()
specifier|public
name|int
name|getReplyTimeout
parameter_list|()
block|{
return|return
name|replyTimeout
return|;
block|}
comment|/**      * Set the reply timeout in milliseconds, 0 is to disable it.      */
DECL|method|setReplyTimeout (int replyTimeout)
specifier|public
name|void
name|setReplyTimeout
parameter_list|(
name|int
name|replyTimeout
parameter_list|)
block|{
name|this
operator|.
name|replyTimeout
operator|=
name|replyTimeout
expr_stmt|;
block|}
DECL|method|isEnabledForExceptions ()
specifier|public
name|boolean
name|isEnabledForExceptions
parameter_list|()
block|{
return|return
name|enabledForExceptions
return|;
block|}
comment|/**      * Whether the response should contain a "faultCause" element in case of errors.      * The "faultCause" is an exception, which the server has trapped and written into a byte stream as a serializable object.      */
DECL|method|setEnabledForExceptions (boolean enabledForExceptions)
specifier|public
name|void
name|setEnabledForExceptions
parameter_list|(
name|boolean
name|enabledForExceptions
parameter_list|)
block|{
name|this
operator|.
name|enabledForExceptions
operator|=
name|enabledForExceptions
expr_stmt|;
block|}
DECL|method|getXmlRpcServer ()
specifier|public
name|XmlRpcRequestProcessor
name|getXmlRpcServer
parameter_list|()
block|{
return|return
name|xmlRpcServer
return|;
block|}
comment|/**      * To use a custom XmlRpcRequestProcessor as server.      */
DECL|method|setXmlRpcServer (XmlRpcRequestProcessor xmlRpcServer)
specifier|public
name|void
name|setXmlRpcServer
parameter_list|(
name|XmlRpcRequestProcessor
name|xmlRpcServer
parameter_list|)
block|{
name|this
operator|.
name|xmlRpcServer
operator|=
name|xmlRpcServer
expr_stmt|;
block|}
DECL|method|getUserAgent ()
specifier|public
name|String
name|getUserAgent
parameter_list|()
block|{
return|return
name|userAgent
return|;
block|}
comment|/**      * The http user agent header to set when doing xmlrpc requests      */
DECL|method|setUserAgent (String userAgent)
specifier|public
name|void
name|setUserAgent
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
name|this
operator|.
name|userAgent
operator|=
name|userAgent
expr_stmt|;
block|}
block|}
end_class

end_unit

