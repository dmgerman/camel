begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xmlrpc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlrpc
operator|.
name|XmlRpcConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlrpc
operator|.
name|XmlRpcRequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|serialize
operator|.
name|CharSetXMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|serialize
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|XmlRpcClientException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|TypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|TypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|XmlRpcHttpRequestConfigImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|XmlRpcStreamRequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|parser
operator|.
name|XmlRpcRequestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|parser
operator|.
name|XmlRpcResponseParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|util
operator|.
name|SAXParsers
import|;
end_import

begin_class
DECL|class|XmlRpcDataFormat
specifier|public
class|class
name|XmlRpcDataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
block|{
DECL|field|xmlRpcStreamRequestConfig
specifier|private
name|XmlRpcStreamRequestConfig
name|xmlRpcStreamRequestConfig
init|=
operator|new
name|XmlRpcHttpRequestConfigImpl
argument_list|()
decl_stmt|;
DECL|field|typeFactory
specifier|private
name|TypeFactory
name|typeFactory
init|=
operator|new
name|TypeFactoryImpl
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|isRequest
specifier|private
name|boolean
name|isRequest
decl_stmt|;
DECL|method|getXMLWriter (Exchange exchange, OutputStream outputStream)
specifier|protected
name|XMLWriter
name|getXMLWriter
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|XmlRpcException
block|{
name|XMLWriter
name|writer
init|=
operator|new
name|CharSetXMLWriter
argument_list|()
decl_stmt|;
name|String
name|encoding
init|=
name|IOHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setIndenting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setFlushing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|setWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|,
name|encoding
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcException
argument_list|(
literal|"Unsupported encoding: "
operator|+
name|encoding
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|writer
return|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"xmlrpc"
return|;
block|}
annotation|@
name|Override
DECL|method|marshal (Exchange exchange, Object graph, OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|graph
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
comment|// need to check the object type
name|XMLWriter
name|control
init|=
name|getXMLWriter
argument_list|(
name|exchange
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|XmlRpcWriter
name|writer
init|=
operator|new
name|XmlRpcWriter
argument_list|(
name|xmlRpcStreamRequestConfig
argument_list|,
name|control
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|graph
operator|instanceof
name|XmlRpcRequest
condition|)
block|{
name|writer
operator|.
name|writeRequest
argument_list|(
name|xmlRpcStreamRequestConfig
argument_list|,
operator|(
name|XmlRpcRequest
operator|)
name|graph
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// write the result here directly
comment|// TODO write the fault message here
name|writer
operator|.
name|write
argument_list|(
name|xmlRpcStreamRequestConfig
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getErrorCode (Exchange exchange)
specifier|protected
name|int
name|getErrorCode
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|XmlRpcConstants
operator|.
name|ERROR_CODE
argument_list|,
name|int
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|unmarshal (Exchange exchange, InputStream stream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isRequest
condition|)
block|{
return|return
name|unmarshalRequest
argument_list|(
name|exchange
argument_list|,
name|stream
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|unmarshalResponse
argument_list|(
name|exchange
argument_list|,
name|stream
argument_list|)
return|;
block|}
block|}
DECL|method|unmarshalResponse (Exchange exchange, InputStream stream)
specifier|protected
name|Object
name|unmarshalResponse
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|InputSource
name|isource
init|=
operator|new
name|InputSource
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|XMLReader
name|xr
init|=
name|newXMLReader
argument_list|()
decl_stmt|;
name|XmlRpcResponseParser
name|xp
decl_stmt|;
try|try
block|{
name|xp
operator|=
operator|new
name|XmlRpcResponseParser
argument_list|(
name|xmlRpcStreamRequestConfig
argument_list|,
name|typeFactory
argument_list|)
expr_stmt|;
name|xr
operator|.
name|setContentHandler
argument_list|(
name|xp
argument_list|)
expr_stmt|;
name|xr
operator|.
name|parse
argument_list|(
name|isource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcClientException
argument_list|(
literal|"Failed to parse server's response: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcClientException
argument_list|(
literal|"Failed to read server's response: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|xp
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
name|xp
operator|.
name|getResult
argument_list|()
return|;
block|}
name|Throwable
name|t
init|=
name|xp
operator|.
name|getErrorCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmlRpcException
argument_list|(
name|xp
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|xp
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|XmlRpcException
condition|)
block|{
throw|throw
operator|(
name|XmlRpcException
operator|)
name|t
throw|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|t
throw|;
block|}
throw|throw
operator|new
name|XmlRpcException
argument_list|(
name|xp
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|xp
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
DECL|method|unmarshalRequest (Exchange exchange, InputStream stream)
specifier|protected
name|Object
name|unmarshalRequest
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|InputSource
name|isource
init|=
operator|new
name|InputSource
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|XMLReader
name|xr
init|=
name|newXMLReader
argument_list|()
decl_stmt|;
name|XmlRpcRequestParser
name|xp
decl_stmt|;
try|try
block|{
name|xp
operator|=
operator|new
name|XmlRpcRequestParser
argument_list|(
name|xmlRpcStreamRequestConfig
argument_list|,
name|typeFactory
argument_list|)
expr_stmt|;
name|xr
operator|.
name|setContentHandler
argument_list|(
name|xp
argument_list|)
expr_stmt|;
name|xr
operator|.
name|parse
argument_list|(
name|isource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcClientException
argument_list|(
literal|"Failed to parse server's response: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcClientException
argument_list|(
literal|"Failed to read server's response: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|XmlRpcRequestImpl
argument_list|(
name|xp
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|xp
operator|.
name|getParams
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newXMLReader ()
specifier|protected
name|XMLReader
name|newXMLReader
parameter_list|()
throws|throws
name|XmlRpcException
block|{
return|return
name|SAXParsers
operator|.
name|newXMLReader
argument_list|()
return|;
block|}
DECL|method|isRequest ()
specifier|public
name|boolean
name|isRequest
parameter_list|()
block|{
return|return
name|isRequest
return|;
block|}
DECL|method|setRequest (boolean isRequest)
specifier|public
name|void
name|setRequest
parameter_list|(
name|boolean
name|isRequest
parameter_list|)
block|{
name|this
operator|.
name|isRequest
operator|=
name|isRequest
expr_stmt|;
block|}
DECL|method|setXmlRpcStreamRequestConfig (XmlRpcStreamRequestConfig config)
specifier|public
name|void
name|setXmlRpcStreamRequestConfig
parameter_list|(
name|XmlRpcStreamRequestConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|xmlRpcStreamRequestConfig
operator|=
name|config
expr_stmt|;
block|}
DECL|method|getXmlRpcStreamRequestConfig ()
specifier|public
name|XmlRpcStreamRequestConfig
name|getXmlRpcStreamRequestConfig
parameter_list|()
block|{
return|return
name|xmlRpcStreamRequestConfig
return|;
block|}
DECL|method|setTypeFactory (TypeFactory typeFactory)
specifier|public
name|void
name|setTypeFactory
parameter_list|(
name|TypeFactory
name|typeFactory
parameter_list|)
block|{
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
block|}
DECL|method|getTypeFactory ()
specifier|public
name|TypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

