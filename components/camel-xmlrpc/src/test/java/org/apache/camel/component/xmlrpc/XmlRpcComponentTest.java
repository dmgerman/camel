begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlrpc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|XmlRpcComponentTest
specifier|public
class|class
name|XmlRpcComponentTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|RESPONSE
specifier|private
specifier|static
specifier|final
name|String
name|RESPONSE
init|=
literal|"<methodResponse><params>"
operator|+
literal|"<param><value><string>GreetMe!</string></value></param>"
operator|+
literal|"</params></methodResponse>"
decl_stmt|;
DECL|field|FAULT_RESPONSE
specifier|private
specifier|static
specifier|final
name|String
name|FAULT_RESPONSE
init|=
literal|"<methodResponse><fault><value>"
operator|+
literal|"<struct><member><name>faultCode</name><value><int>4</int></value></member>"
operator|+
literal|"<member><name>faultString</name><value><string>Too many parameters.</string></value></member>"
operator|+
literal|"</struct></value></fault></methodResponse>"
decl_stmt|;
annotation|@
name|Test
DECL|method|testXmlRpcResponseMessage ()
specifier|public
name|void
name|testXmlRpcResponseMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|invokeService
argument_list|(
literal|"direct:async"
argument_list|)
expr_stmt|;
name|invokeService
argument_list|(
literal|"direct:sync"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXmlRpcFaultMessage ()
specifier|public
name|void
name|testXmlRpcFaultMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|invokeServiceFaultResponse
argument_list|(
literal|"xmlrpc:http://localhost:9000/xmlrpc/fault"
argument_list|)
expr_stmt|;
name|invokeServiceFaultResponse
argument_list|(
literal|"xmlrpc:http://localhost:9000/xmlrpc/fault?synchronous=true"
argument_list|)
expr_stmt|;
block|}
DECL|method|invokeService (String uri)
specifier|private
name|void
name|invokeService
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"GreetMe!"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
name|uri
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"me"
block|}
argument_list|,
name|XmlRpcConstants
operator|.
name|OPERATION_NAME
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|invokeServiceFaultResponse (String uri)
specifier|private
name|void
name|invokeServiceFaultResponse
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
name|uri
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"me"
block|}
argument_list|,
name|XmlRpcConstants
operator|.
name|OPERATION_NAME
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expects the exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Get a wrong exception."
argument_list|,
name|ex
operator|instanceof
name|CamelExecutionException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Get a worng exception cause."
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|XmlRpcException
argument_list|)
expr_stmt|;
name|XmlRpcException
name|xmlrpcException
init|=
operator|(
name|XmlRpcException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a worng exception message."
argument_list|,
literal|"Too many parameters."
argument_list|,
name|xmlrpcException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:async"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlrpc:http://localhost:9000/xmlrpc/test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:sync"
argument_list|)
operator|.
name|to
argument_list|(
literal|"xmlrpc:http://localhost:9000/xmlrpc/test?synchronous=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// setup a mock test server for testing
name|from
argument_list|(
literal|"jetty:http://localhost:9000/xmlrpc/test"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
comment|// here print out the message that we get
operator|.
name|to
argument_list|(
literal|"log:org.apache.camel.component.xmlrpc"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
name|RESPONSE
argument_list|)
expr_stmt|;
comment|// setup a mock test server for falt message
name|from
argument_list|(
literal|"jetty:http://localhost:9000/xmlrpc/fault"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
comment|// here print out the message that we get
operator|.
name|to
argument_list|(
literal|"log:org.apache.camel.component.xmlrpc"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
name|FAULT_RESPONSE
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

