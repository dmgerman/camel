begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb3
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb3
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|CursorType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoCursorNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|Filters
operator|.
name|gt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb3
operator|.
name|MongoDbConstants
operator|.
name|MONGO_ID
import|;
end_import

begin_class
DECL|class|MongoDbTailingThread
class|class
name|MongoDbTailingThread
extends|extends
name|MongoAbstractConsumerThread
block|{
DECL|field|CAPPED_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CAPPED_KEY
init|=
literal|"capped"
decl_stmt|;
DECL|field|tailTracking
specifier|private
name|MongoDbTailTrackingManager
name|tailTracking
decl_stmt|;
DECL|method|MongoDbTailingThread (MongoDbEndpoint endpoint, MongoDbTailableCursorConsumer consumer, MongoDbTailTrackingManager tailTrack)
name|MongoDbTailingThread
parameter_list|(
name|MongoDbEndpoint
name|endpoint
parameter_list|,
name|MongoDbTailableCursorConsumer
name|consumer
parameter_list|,
name|MongoDbTailTrackingManager
name|tailTrack
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|this
operator|.
name|tailTracking
operator|=
name|tailTrack
expr_stmt|;
block|}
comment|/**      * Initialise the tailing process, the cursor and if persistent tail tracking is enabled,      * recover the cursor from the persisted point.      * As part of the initialisation process,      * the component will validate that the collection we are targeting is 'capped'.      */
annotation|@
name|Override
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting MongoDB Tailable Cursor consumer, binding to collection: {}"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"db: %s, col: %s"
argument_list|,
name|endpoint
operator|.
name|getMongoDatabase
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getCollection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isCollectionCapped
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Tailable cursors are only compatible with capped collections, and collection %s is not capped"
argument_list|,
name|endpoint
operator|.
name|getCollection
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
comment|// recover the last value from the store if it exists
name|tailTracking
operator|.
name|recoverFromStore
argument_list|()
expr_stmt|;
name|cursor
operator|=
name|initializeCursor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Exception occurred while initializing tailable cursor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|cursor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Tailable cursor was not initialized, or cursor returned is dead on arrival"
argument_list|)
throw|;
block|}
block|}
DECL|method|isCollectionCapped ()
specifier|private
name|Boolean
name|isCollectionCapped
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getMongoDatabase
argument_list|()
operator|.
name|runCommand
argument_list|(
name|createCollStatsCommand
argument_list|()
argument_list|)
operator|.
name|getBoolean
argument_list|(
name|CAPPED_KEY
argument_list|)
return|;
block|}
DECL|method|createCollStatsCommand ()
specifier|private
name|Document
name|createCollStatsCommand
parameter_list|()
block|{
return|return
operator|new
name|Document
argument_list|(
literal|"collStats"
argument_list|,
name|endpoint
operator|.
name|getCollection
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// no arguments, will ask DB what the last updated Id was (checking persistent storage)
DECL|method|initializeCursor ()
specifier|protected
name|MongoCursor
argument_list|<
name|Document
argument_list|>
name|initializeCursor
parameter_list|()
block|{
name|Object
name|lastVal
init|=
name|tailTracking
operator|.
name|lastVal
decl_stmt|;
comment|// lastVal can be null if we are initializing and there is no persistence enabled
name|MongoCursor
argument_list|<
name|Document
argument_list|>
name|answer
decl_stmt|;
if|if
condition|(
name|lastVal
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|dbCol
operator|.
name|find
argument_list|()
operator|.
name|cursorType
argument_list|(
name|CursorType
operator|.
name|TailableAwait
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
name|MongoCursor
argument_list|<
name|Document
argument_list|>
name|iterator
init|=
name|dbCol
operator|.
name|find
argument_list|(
name|gt
argument_list|(
name|tailTracking
operator|.
name|getIncreasingFieldName
argument_list|()
argument_list|,
name|lastVal
argument_list|)
argument_list|)
operator|.
name|cursorType
argument_list|(
name|CursorType
operator|.
name|TailableAwait
argument_list|)
operator|.
name|iterator
argument_list|()
init|)
block|{
name|answer
operator|=
name|iterator
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|regeneratingCursor ()
specifier|protected
name|void
name|regeneratingCursor
parameter_list|()
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Regenerating cursor with lastVal: {}, waiting {}ms first"
argument_list|,
name|tailTracking
operator|.
name|lastVal
argument_list|,
name|cursorRegenerationDelay
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The heart of the tailing process.      */
annotation|@
name|Override
DECL|method|doRun ()
specifier|protected
name|void
name|doRun
parameter_list|()
block|{
comment|// while the cursor has more values, keepRunning is true and the
comment|// cursorId is not 0, which symbolizes that the cursor is dead
try|try
block|{
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
operator|&&
name|keepRunning
condition|)
block|{
name|Document
name|dbObj
init|=
operator|(
name|Document
operator|)
name|cursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createMongoDbExchange
argument_list|(
name|dbObj
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Sending exchange: {}, ObjectId: {}"
argument_list|,
name|exchange
argument_list|,
name|dbObj
operator|.
name|get
argument_list|(
name|MONGO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|tailTracking
operator|.
name|setLastVal
argument_list|(
name|dbObj
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MongoCursorNotFoundException
name|e
parameter_list|)
block|{
comment|// we only log the warning if we are not stopping, otherwise it is
comment|// expected because the stop() method kills the cursor just in case
comment|// it is blocked
comment|// waiting for more data to arrive
if|if
condition|(
name|keepRunning
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cursor not found exception from MongoDB, will regenerate cursor. This is normal behaviour with tailable cursors."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// cursor.hasNext() opens socket and waiting for data
comment|// it throws exception when cursor is closed in another thread
comment|// there is no way to stop hasNext() before closing cursor
if|if
condition|(
name|keepRunning
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cursor closed exception from MongoDB, will regenerate cursor. This is normal behaviour with tailable cursors."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the loop finished, persist the lastValue just in case we are shutting down
comment|// TODO: perhaps add a functionality to persist every N records
name|tailTracking
operator|.
name|persistToStore
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

