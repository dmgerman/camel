begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb3
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|ChangeStreamIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|changestream
operator|.
name|ChangeStreamDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|BsonDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb3
operator|.
name|MongoDbConstants
operator|.
name|MONGO_ID
import|;
end_import

begin_class
DECL|class|MongoDbChangeStreamsThread
class|class
name|MongoDbChangeStreamsThread
extends|extends
name|MongoAbstractConsumerThread
block|{
DECL|field|bsonFilter
specifier|private
name|List
argument_list|<
name|BsonDocument
argument_list|>
name|bsonFilter
decl_stmt|;
DECL|field|resumeToken
specifier|private
name|BsonDocument
name|resumeToken
decl_stmt|;
DECL|method|MongoDbChangeStreamsThread (MongoDbEndpoint endpoint, MongoDbChangeStreamsConsumer consumer, List<BsonDocument> bsonFilter)
name|MongoDbChangeStreamsThread
parameter_list|(
name|MongoDbEndpoint
name|endpoint
parameter_list|,
name|MongoDbChangeStreamsConsumer
name|consumer
parameter_list|,
name|List
argument_list|<
name|BsonDocument
argument_list|>
name|bsonFilter
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|this
operator|.
name|bsonFilter
operator|=
name|bsonFilter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
block|{
name|cursor
operator|=
name|initializeCursor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeCursor ()
specifier|protected
name|MongoCursor
name|initializeCursor
parameter_list|()
block|{
name|ChangeStreamIterable
argument_list|<
name|Document
argument_list|>
name|iterable
init|=
name|bsonFilter
operator|!=
literal|null
condition|?
name|dbCol
operator|.
name|watch
argument_list|(
name|bsonFilter
argument_list|)
else|:
name|dbCol
operator|.
name|watch
argument_list|()
decl_stmt|;
if|if
condition|(
name|resumeToken
operator|!=
literal|null
condition|)
block|{
name|iterable
operator|=
name|iterable
operator|.
name|resumeAfter
argument_list|(
name|resumeToken
argument_list|)
expr_stmt|;
block|}
name|MongoCursor
argument_list|<
name|ChangeStreamDocument
argument_list|<
name|Document
argument_list|>
argument_list|>
name|cursor
init|=
name|iterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|cursor
return|;
block|}
annotation|@
name|Override
DECL|method|regeneratingCursor ()
specifier|protected
name|void
name|regeneratingCursor
parameter_list|()
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Regenerating cursor, waiting {}ms first"
argument_list|,
name|cursorRegenerationDelay
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doRun ()
specifier|protected
name|void
name|doRun
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
operator|&&
name|keepRunning
condition|)
block|{
name|ChangeStreamDocument
argument_list|<
name|Document
argument_list|>
name|dbObj
init|=
operator|(
name|ChangeStreamDocument
argument_list|<
name|Document
argument_list|>
operator|)
name|cursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createMongoDbExchange
argument_list|(
name|dbObj
operator|.
name|getFullDocument
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Sending exchange: {}, ObjectId: {}"
argument_list|,
name|exchange
argument_list|,
name|dbObj
operator|.
name|getFullDocument
argument_list|()
operator|.
name|get
argument_list|(
name|MONGO_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                 }
name|this
operator|.
name|resumeToken
operator|=
name|dbObj
operator|.
name|getResumeToken
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
comment|// cursor.hasNext() opens socket and waiting for data
comment|// it throws exception when cursor is closed in another thread
comment|// there is no way to stop hasNext() before closing cursor
if|if
condition|(
name|keepRunning
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception from MongoDB, will regenerate cursor."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

