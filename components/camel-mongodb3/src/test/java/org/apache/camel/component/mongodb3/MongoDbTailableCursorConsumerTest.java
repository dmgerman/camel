begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb3
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|Filters
operator|.
name|eq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb3
operator|.
name|MongoDbTailTrackingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|CreateCollectionOptions
import|;
end_import

begin_class
DECL|class|MongoDbTailableCursorConsumerTest
specifier|public
class|class
name|MongoDbTailableCursorConsumerTest
extends|extends
name|AbstractMongoDbTest
block|{
DECL|field|cappedTestCollection
specifier|private
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|cappedTestCollection
decl_stmt|;
DECL|field|cappedTestCollectionName
specifier|private
name|String
name|cappedTestCollectionName
decl_stmt|;
annotation|@
name|Test
DECL|method|testThousandRecordsWithoutReadPreference ()
specifier|public
name|void
name|testThousandRecordsWithoutReadPreference
parameter_list|()
throws|throws
name|Exception
block|{
name|testThousandRecordsWithRouteId
argument_list|(
literal|"tailableCursorConsumer1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThousandRecordsWithReadPreference ()
specifier|public
name|void
name|testThousandRecordsWithReadPreference
parameter_list|()
throws|throws
name|Exception
block|{
name|testThousandRecordsWithRouteId
argument_list|(
literal|"tailableCursorConsumer1.readPreference"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoRecords ()
specifier|public
name|void
name|testNoRecords
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cappedTestCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//DocumentBuilder.start().add("capped", true).add("size", 1000000000).add("max", 1000).get()
comment|// create a capped collection with max = 1000
name|CreateCollectionOptions
name|collectionOptions
init|=
operator|new
name|CreateCollectionOptions
argument_list|()
operator|.
name|capped
argument_list|(
literal|true
argument_list|)
operator|.
name|sizeInBytes
argument_list|(
literal|1000000000
argument_list|)
operator|.
name|maxDocuments
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|db
operator|.
name|createCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|collectionOptions
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cappedTestCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|addTestRoutes
argument_list|()
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"tailableCursorConsumer1"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|context
operator|.
name|stopRoute
argument_list|(
literal|"tailableCursorConsumer1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleBursts ()
specifier|public
name|void
name|testMultipleBursts
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cappedTestCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|//DocumentBuilder.start().add("capped", true).add("size", 1000000000).add("max", 1000).get()
comment|// create a capped collection with max = 1000
name|CreateCollectionOptions
name|createCollectionOptions
init|=
operator|new
name|CreateCollectionOptions
argument_list|()
operator|.
name|capped
argument_list|(
literal|true
argument_list|)
operator|.
name|sizeInBytes
argument_list|(
literal|1000000000
argument_list|)
operator|.
name|maxDocuments
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|db
operator|.
name|createCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|createCollectionOptions
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|addTestRoutes
argument_list|()
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"tailableCursorConsumer1"
argument_list|)
expr_stmt|;
comment|// pump 5 bursts of 1000 records each with 500ms pause between burst and burst
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
name|cappedTestCollection
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"string"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// start the data pumping
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// before we assert, wait for the data pumping to end
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|context
operator|.
name|stopRoute
argument_list|(
literal|"tailableCursorConsumer1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHundredThousandRecords ()
specifier|public
name|void
name|testHundredThousandRecords
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cappedTestCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// create a capped collection with max = 1000
comment|//DocumentBuilder.start().add("capped", true).add("size", 1000000000).add("max", 1000).get())
name|db
operator|.
name|createCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
operator|new
name|CreateCollectionOptions
argument_list|()
operator|.
name|capped
argument_list|(
literal|true
argument_list|)
operator|.
name|sizeInBytes
argument_list|(
literal|1000000000
argument_list|)
operator|.
name|maxDocuments
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|addTestRoutes
argument_list|()
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"tailableCursorConsumer1"
argument_list|)
expr_stmt|;
comment|// continuous pump of 100000 records, asserting incrementally to reduce overhead on the mock endpoint
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|cappedTestCollection
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"string"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// incrementally assert, as the mock endpoint stores all messages and otherwise the test would be sluggish
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|MongoDbTailableCursorConsumerTest
operator|.
name|this
operator|.
name|assertAndResetMockEndpoint
argument_list|(
name|mock
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// start the data pumping
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// before we stop the route, wait for the data pumping to end
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|context
operator|.
name|stopRoute
argument_list|(
literal|"tailableCursorConsumer1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testPersistentTailTrack ()
specifier|public
name|void
name|testPersistentTailTrack
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cappedTestCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test"
argument_list|)
decl_stmt|;
comment|// drop the tracking collection
name|db
operator|.
name|getCollection
argument_list|(
name|MongoDbTailTrackingConfig
operator|.
name|DEFAULT_COLLECTION
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
comment|// create a capped collection with max = 1000
comment|// DocumentBuilder.start().add("capped", true).add("size", 1000000000).add("max", 1000).get()
name|db
operator|.
name|createCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
operator|new
name|CreateCollectionOptions
argument_list|()
operator|.
name|capped
argument_list|(
literal|true
argument_list|)
operator|.
name|sizeInBytes
argument_list|(
literal|1000000000
argument_list|)
operator|.
name|maxDocuments
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|.
name|createIndex
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|addTestRoutes
argument_list|()
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// pump 300 records
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|cappedTestCollection
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"string"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// start the data pumping
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// before we continue wait for the data pump to end
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mock
operator|.
name|reset
argument_list|()
expr_stmt|;
name|context
operator|.
name|stopRoute
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
expr_stmt|;
while|while
condition|(
name|context
operator|.
name|getRouteStatus
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
operator|!=
name|ServiceStatus
operator|.
name|Stopped
condition|)
block|{ }
name|context
operator|.
name|startRoute
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
expr_stmt|;
comment|// expect 300 messages and not 600
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// pump 300 records
name|t
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|301
init|;
name|i
operator|<=
literal|600
condition|;
name|i
operator|++
control|)
block|{
name|cappedTestCollection
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"string"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// start the data pumping
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// before we continue wait for the data pump to end
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// check that the first message received in this second batch corresponds to increasing=301
name|Object
name|firstBody
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|firstBody
operator|instanceof
name|Document
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|301
argument_list|,
name|Document
operator|.
name|class
operator|.
name|cast
argument_list|(
name|firstBody
argument_list|)
operator|.
name|get
argument_list|(
literal|"increasing"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that the lastVal is persisted at the right time: check before and after stopping the route
name|assertEquals
argument_list|(
literal|300
argument_list|,
name|db
operator|.
name|getCollection
argument_list|(
name|MongoDbTailTrackingConfig
operator|.
name|DEFAULT_COLLECTION
argument_list|)
operator|.
name|find
argument_list|(
name|eq
argument_list|(
literal|"persistentId"
argument_list|,
literal|"darwin"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|get
argument_list|(
literal|"lastTrackingValue"
argument_list|)
argument_list|)
expr_stmt|;
comment|// stop the route and verify the last value has been updated
name|context
operator|.
name|stopRoute
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
expr_stmt|;
while|while
condition|(
name|context
operator|.
name|getRouteStatus
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
operator|!=
name|ServiceStatus
operator|.
name|Stopped
condition|)
block|{ }
name|assertEquals
argument_list|(
literal|600
argument_list|,
name|db
operator|.
name|getCollection
argument_list|(
name|MongoDbTailTrackingConfig
operator|.
name|DEFAULT_COLLECTION
argument_list|)
operator|.
name|find
argument_list|(
name|eq
argument_list|(
literal|"persistentId"
argument_list|,
literal|"darwin"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|get
argument_list|(
literal|"lastTrackingValue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testPersistentTailTrackIncreasingDateField ()
specifier|public
name|void
name|testPersistentTailTrackIncreasingDateField
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cappedTestCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test"
argument_list|)
decl_stmt|;
specifier|final
name|Calendar
name|startTimestamp
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// get default tracking collection
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|trackingCol
init|=
name|db
operator|.
name|getCollection
argument_list|(
name|MongoDbTailTrackingConfig
operator|.
name|DEFAULT_COLLECTION
argument_list|,
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|trackingCol
operator|.
name|drop
argument_list|()
expr_stmt|;
name|trackingCol
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|MongoDbTailTrackingConfig
operator|.
name|DEFAULT_COLLECTION
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// create a capped collection with max = 1000
comment|//DocumentBuilder.start().add("capped", true).add("size", 1000000000).add("max", 1000).get()
name|db
operator|.
name|createCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
operator|new
name|CreateCollectionOptions
argument_list|()
operator|.
name|capped
argument_list|(
literal|true
argument_list|)
operator|.
name|sizeInBytes
argument_list|(
literal|1000000000
argument_list|)
operator|.
name|maxDocuments
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|addTestRoutes
argument_list|()
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// pump 300 records
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|Calendar
name|c
init|=
call|(
name|Calendar
call|)
argument_list|(
name|startTimestamp
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"string"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// start the data pumping
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// before we continue wait for the data pump to end
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mock
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// ensure that the persisted lastVal is startTimestamp + 300min
name|Calendar
name|cal300
init|=
operator|(
name|Calendar
operator|)
name|startTimestamp
operator|.
name|clone
argument_list|()
decl_stmt|;
name|cal300
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|context
operator|.
name|stopRoute
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cal300
operator|.
name|getTime
argument_list|()
argument_list|,
name|trackingCol
operator|.
name|find
argument_list|(
name|eq
argument_list|(
literal|"persistentId"
argument_list|,
literal|"darwin"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|get
argument_list|(
name|MongoDbTailTrackingConfig
operator|.
name|DEFAULT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
expr_stmt|;
comment|// expect 300 messages and not 600
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// pump 300 records
name|t
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|301
init|;
name|i
operator|<=
literal|600
condition|;
name|i
operator|++
control|)
block|{
name|Calendar
name|c
init|=
call|(
name|Calendar
call|)
argument_list|(
name|startTimestamp
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"string"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// start the data pumping
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// before we continue wait for the data pump to end
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Object
name|firstBody
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|firstBody
operator|instanceof
name|Document
argument_list|)
expr_stmt|;
name|Calendar
name|cal301
init|=
name|Calendar
operator|.
name|class
operator|.
name|cast
argument_list|(
name|startTimestamp
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
name|cal301
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|301
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cal301
operator|.
name|getTime
argument_list|()
argument_list|,
name|Document
operator|.
name|class
operator|.
name|cast
argument_list|(
name|firstBody
argument_list|)
operator|.
name|get
argument_list|(
literal|"increasing"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that the persisted lastVal after stopping the route is startTimestamp + 600min
name|context
operator|.
name|stopRoute
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
expr_stmt|;
name|Calendar
name|cal600
init|=
operator|(
name|Calendar
operator|)
name|startTimestamp
operator|.
name|clone
argument_list|()
decl_stmt|;
name|cal600
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cal600
operator|.
name|getTime
argument_list|()
argument_list|,
name|trackingCol
operator|.
name|find
argument_list|(
name|eq
argument_list|(
literal|"persistentId"
argument_list|,
literal|"darwin"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|get
argument_list|(
name|MongoDbTailTrackingConfig
operator|.
name|DEFAULT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testCustomTailTrackLocation ()
specifier|public
name|void
name|testCustomTailTrackLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cappedTestCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test"
argument_list|)
decl_stmt|;
comment|// get the custom tracking collection and drop it (tailTrackDb=einstein&tailTrackCollection=curie&tailTrackField=newton)
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|trackingCol
init|=
name|mongo
operator|.
name|getDatabase
argument_list|(
literal|"einstein"
argument_list|)
operator|.
name|getCollection
argument_list|(
literal|"curie"
argument_list|,
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|trackingCol
operator|.
name|drop
argument_list|()
expr_stmt|;
name|trackingCol
operator|=
name|mongo
operator|.
name|getDatabase
argument_list|(
literal|"einstein"
argument_list|)
operator|.
name|getCollection
argument_list|(
literal|"curie"
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// create a capped collection with max = 1000
comment|//DocumentBuilder.start().add("capped", true).add("size", 1000000000).add("max", 1000).get()
name|db
operator|.
name|createCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
operator|new
name|CreateCollectionOptions
argument_list|()
operator|.
name|capped
argument_list|(
literal|true
argument_list|)
operator|.
name|sizeInBytes
argument_list|(
literal|1000000000
argument_list|)
operator|.
name|maxDocuments
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|addTestRoutes
argument_list|()
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"tailableCursorConsumer3"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// pump 300 records
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|cappedTestCollection
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"string"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// start the data pumping
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// before we continue wait for the data pump to end
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mock
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// stop the route to ensure that our lastVal is persisted, and check it
name|context
operator|.
name|stopRoute
argument_list|(
literal|"tailableCursorConsumer3"
argument_list|)
expr_stmt|;
comment|// ensure that the persisted lastVal is 300, newton is the name of the trackingField we are using
name|assertEquals
argument_list|(
literal|300
argument_list|,
name|trackingCol
operator|.
name|find
argument_list|(
name|eq
argument_list|(
literal|"persistentId"
argument_list|,
literal|"darwin"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|get
argument_list|(
literal|"newton"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"tailableCursorConsumer3"
argument_list|)
expr_stmt|;
comment|// expect 300 messages and not 600
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// pump 300 records
name|t
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|301
init|;
name|i
operator|<=
literal|600
condition|;
name|i
operator|++
control|)
block|{
name|cappedTestCollection
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"string"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// start the data pumping
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// before we continue wait for the data pump to end
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// check that the first received body contains increasing=301 and not increasing=1, i.e. it's not starting from the top
name|Object
name|firstBody
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|firstBody
operator|instanceof
name|Document
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|301
argument_list|,
operator|(
name|Document
operator|.
name|class
operator|.
name|cast
argument_list|(
name|firstBody
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"increasing"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that the persisted lastVal after stopping the route is 600, newton is the name of the trackingField we are using
name|context
operator|.
name|stopRoute
argument_list|(
literal|"tailableCursorConsumer3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|600
argument_list|,
name|trackingCol
operator|.
name|find
argument_list|(
name|eq
argument_list|(
literal|"persistentId"
argument_list|,
literal|"darwin"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|get
argument_list|(
literal|"newton"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAndResetMockEndpoint (MockEndpoint mock)
specifier|public
name|void
name|assertAndResetMockEndpoint
parameter_list|(
name|MockEndpoint
name|mock
parameter_list|)
throws|throws
name|Exception
block|{
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mock
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|testThousandRecordsWithRouteId (String routeId)
specifier|private
name|void
name|testThousandRecordsWithRouteId
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cappedTestCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:test"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// create a capped collection with max = 1000
comment|//DocumentBuilder.start().add("capped", true).add("size", 1000000000).add("max", 1000).get()
name|db
operator|.
name|createCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
operator|new
name|CreateCollectionOptions
argument_list|()
operator|.
name|capped
argument_list|(
literal|true
argument_list|)
operator|.
name|sizeInBytes
argument_list|(
literal|1000000000
argument_list|)
operator|.
name|maxDocuments
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|cappedTestCollection
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"increasing"
argument_list|,
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"string"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|cappedTestCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|addTestRoutes
argument_list|()
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|context
operator|.
name|stopRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPostSetup ()
specifier|public
name|void
name|doPostSetup
parameter_list|()
block|{
name|super
operator|.
name|doPostSetup
argument_list|()
expr_stmt|;
comment|// drop the capped collection and let each test create what it needs
name|cappedTestCollectionName
operator|=
literal|"camelTestCapped"
expr_stmt|;
name|cappedTestCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|cappedTestCollectionName
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|cappedTestCollection
operator|.
name|drop
argument_list|()
expr_stmt|;
block|}
DECL|method|addTestRoutes ()
specifier|protected
name|void
name|addTestRoutes
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.cappedTestCollection}}&tailTrackIncreasingField=increasing"
argument_list|)
operator|.
name|id
argument_list|(
literal|"tailableCursorConsumer1"
argument_list|)
operator|.
name|autoStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.cappedTestCollection}}&tailTrackIncreasingField=increasing&persistentTailTracking=true&persistentId=darwin"
argument_list|)
operator|.
name|id
argument_list|(
literal|"tailableCursorConsumer2"
argument_list|)
operator|.
name|autoStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.cappedTestCollection}}&tailTrackIncreasingField=increasing&"
operator|+
literal|"persistentTailTracking=true&persistentId=darwin&tailTrackDb=einstein&tailTrackCollection=curie&tailTrackField=newton"
argument_list|)
operator|.
name|id
argument_list|(
literal|"tailableCursorConsumer3"
argument_list|)
operator|.
name|autoStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.cappedTestCollection}}&tailTrackIncreasingField=increasing"
argument_list|)
comment|//&readPreference=primary")
operator|.
name|id
argument_list|(
literal|"tailableCursorConsumer1.readPreference"
argument_list|)
operator|.
name|autoStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

