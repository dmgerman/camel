begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb3.processor.idempotent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb3
operator|.
name|processor
operator|.
name|idempotent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb3
operator|.
name|AbstractMongoDbTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MongoDbIdempotentRepositoryTest
specifier|public
class|class
name|MongoDbIdempotentRepositoryTest
extends|extends
name|AbstractMongoDbTest
block|{
DECL|field|repo
name|MongoDbIdempotentRepository
argument_list|<
name|String
argument_list|>
name|repo
decl_stmt|;
annotation|@
name|Before
annotation|@
name|After
DECL|method|clearDB ()
specifier|public
name|void
name|clearDB
parameter_list|()
block|{
name|testCollection
operator|.
name|deleteMany
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPostSetup ()
specifier|public
name|void
name|doPostSetup
parameter_list|()
block|{
name|super
operator|.
name|doPostSetup
argument_list|()
expr_stmt|;
name|repo
operator|=
operator|new
name|MongoDbIdempotentRepository
argument_list|<>
argument_list|(
name|mongo
argument_list|,
name|testCollectionName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|add ()
specifier|public
name|void
name|add
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|randomUUIDString
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|added
init|=
name|repo
operator|.
name|add
argument_list|(
name|randomUUIDString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Driver inserted document"
argument_list|,
literal|1
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Add ui returned true"
argument_list|,
name|added
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addAndContains ()
specifier|public
name|void
name|addAndContains
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|randomUUIDString
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|repo
operator|.
name|add
argument_list|(
name|randomUUIDString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
name|repo
operator|.
name|contains
argument_list|(
name|randomUUIDString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Added uid was found"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addAndRemove ()
specifier|public
name|void
name|addAndRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|randomUUIDString
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|repo
operator|.
name|add
argument_list|(
name|randomUUIDString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|removed
init|=
name|repo
operator|.
name|remove
argument_list|(
name|randomUUIDString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Added uid was removed correctly"
argument_list|,
name|removed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addDuplicatedFails ()
specifier|public
name|void
name|addDuplicatedFails
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|randomUUIDString
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|repo
operator|.
name|add
argument_list|(
name|randomUUIDString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|added
init|=
name|repo
operator|.
name|add
argument_list|(
name|randomUUIDString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Duplicated entry was not added"
argument_list|,
operator|!
name|added
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteMissingiIsFailse ()
specifier|public
name|void
name|deleteMissingiIsFailse
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|randomUUIDString
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|removed
init|=
name|repo
operator|.
name|remove
argument_list|(
name|randomUUIDString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Non exisint uid returns false"
argument_list|,
operator|!
name|removed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|containsMissingReturnsFalse ()
specifier|public
name|void
name|containsMissingReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|randomUUIDString
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
name|repo
operator|.
name|contains
argument_list|(
name|randomUUIDString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Non existing item is not found"
argument_list|,
operator|!
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|confirmAllwaysReturnsTrue ()
specifier|public
name|void
name|confirmAllwaysReturnsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|randomUUIDString
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
name|repo
operator|.
name|confirm
argument_list|(
name|randomUUIDString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Confirm always returns true"
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|found
operator|=
name|repo
operator|.
name|confirm
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Confirm always returns true, even with null"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

