begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb3
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MongoDbAggregateOperationTest
specifier|public
class|class
name|MongoDbAggregateOperationTest
extends|extends
name|AbstractMongoDbTest
block|{
annotation|@
name|Test
DECL|method|testAggregate ()
specifier|public
name|void
name|testAggregate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that the collection has 0 documents in it
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|pumpDataIntoTestCollection
argument_list|()
expr_stmt|;
comment|// result sorted by _id
name|Object
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:aggregate"
argument_list|,
literal|"[{ $match : {$or : [{\"scientist\" : \"Darwin\"},{\"scientist\" : \"Einstein\"}]}},"
operator|+
literal|"{ $group: { _id: \"$scientist\", count: { $sum: 1 }} },{ $sort : { _id : 1}} ]"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Result is not of type List"
argument_list|,
name|result
operator|instanceof
name|List
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Document
argument_list|>
name|resultList
init|=
operator|(
name|List
argument_list|<
name|Document
argument_list|>
operator|)
name|result
decl_stmt|;
name|assertListSize
argument_list|(
literal|"Result does not contain 2 elements"
argument_list|,
name|resultList
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First result Document._id should be Darwin"
argument_list|,
literal|"Darwin"
argument_list|,
name|resultList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First result Document.count should be 100"
argument_list|,
literal|100
argument_list|,
name|resultList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result Document._id should be Einstein"
argument_list|,
literal|"Einstein"
argument_list|,
name|resultList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result Document.count should be 100"
argument_list|,
literal|100
argument_list|,
name|resultList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregateDBCursor ()
specifier|public
name|void
name|testAggregateDBCursor
parameter_list|()
block|{
comment|// Test that the collection has 0 documents in it
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|pumpDataIntoTestCollection
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:aggregateDBCursor"
argument_list|,
literal|"[{ $match : {$or : [{\"scientist\" : \"Darwin\"},{\"scientist\" : \"Einstein\"}]}}]"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Result is not of type DBCursor"
argument_list|,
name|result
operator|instanceof
name|MongoIterable
argument_list|)
expr_stmt|;
name|MongoIterable
argument_list|<
name|Document
argument_list|>
name|resultCursor
init|=
operator|(
name|MongoIterable
argument_list|<
name|Document
argument_list|>
operator|)
name|result
decl_stmt|;
comment|// Ensure that all returned documents contain all fields
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Document
name|document
range|:
name|resultCursor
control|)
block|{
name|assertNotNull
argument_list|(
literal|"Document in returned list should contain all fields"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Document in returned list should contain all fields"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"scientist"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Document in returned list should contain all fields"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"fixedField"
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Result does not contain 200 elements"
argument_list|,
literal|200
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregateWithOptions ()
specifier|public
name|void
name|testAggregateWithOptions
parameter_list|()
block|{
comment|// Test that the collection has 0 documents in it
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|pumpDataIntoTestCollection
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
name|MongoDbConstants
operator|.
name|BATCH_SIZE
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
name|MongoDbConstants
operator|.
name|ALLOW_DISK_USE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:aggregateDBCursor"
argument_list|,
literal|"[{ $match : {$or : [{\"scientist\" : \"Darwin\"},{\"scientist\" : \"Einstein\"}]}}]"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Result is not of type DBCursor"
argument_list|,
name|result
operator|instanceof
name|MongoIterable
argument_list|)
expr_stmt|;
name|MongoIterable
argument_list|<
name|Document
argument_list|>
name|resultCursor
init|=
operator|(
name|MongoIterable
argument_list|<
name|Document
argument_list|>
operator|)
name|result
decl_stmt|;
comment|// Ensure that all returned documents contain all fields
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Document
name|document
range|:
name|resultCursor
control|)
block|{
name|assertNotNull
argument_list|(
literal|"Document in returned list should contain all fields"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Document in returned list should contain all fields"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"scientist"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Document in returned list should contain all fields"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"fixedField"
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Result does not contain 200 elements"
argument_list|,
literal|200
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:aggregate"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=aggregate"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:aggregateDBCursor"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=aggregate&dynamicity=true&outputType=MongoIterable"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultAggregateDBCursor"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

