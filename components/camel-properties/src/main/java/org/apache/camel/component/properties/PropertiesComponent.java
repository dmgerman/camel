begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoFactoryAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StaticService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LoadablePropertiesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|OrderedComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FilePathResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|OrderedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The<a href="http://camel.apache.org/properties">Properties Component</a> allows you to use property placeholders when defining Endpoint URIs  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
literal|"properties"
argument_list|)
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed PropertiesComponent"
argument_list|)
DECL|class|PropertiesComponent
specifier|public
class|class
name|PropertiesComponent
extends|extends
name|DefaultComponent
implements|implements
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesComponent
implements|,
name|StaticService
block|{
comment|/**      *  Never check system properties.      */
DECL|field|SYSTEM_PROPERTIES_MODE_NEVER
specifier|public
specifier|static
specifier|final
name|int
name|SYSTEM_PROPERTIES_MODE_NEVER
init|=
literal|0
decl_stmt|;
comment|/**      * Check system properties if not resolvable in the specified properties.      */
DECL|field|SYSTEM_PROPERTIES_MODE_FALLBACK
specifier|public
specifier|static
specifier|final
name|int
name|SYSTEM_PROPERTIES_MODE_FALLBACK
init|=
literal|1
decl_stmt|;
comment|/**      * Check system properties variables) first, before trying the specified properties.      * This allows system properties to override any other property source      * (environment variable and then system properties takes precedence).      *<p/>      * This is the default.      */
DECL|field|SYSTEM_PROPERTIES_MODE_OVERRIDE
specifier|public
specifier|static
specifier|final
name|int
name|SYSTEM_PROPERTIES_MODE_OVERRIDE
init|=
literal|2
decl_stmt|;
comment|/**      *  Never check OS environment variables.      */
DECL|field|ENVIRONMENT_VARIABLES_MODE_NEVER
specifier|public
specifier|static
specifier|final
name|int
name|ENVIRONMENT_VARIABLES_MODE_NEVER
init|=
literal|0
decl_stmt|;
comment|/**      * Check OS environment variables if not resolvable in the specified properties.      *<p/>      * This is the default.      */
DECL|field|ENVIRONMENT_VARIABLES_MODE_FALLBACK
specifier|public
specifier|static
specifier|final
name|int
name|ENVIRONMENT_VARIABLES_MODE_FALLBACK
init|=
literal|1
decl_stmt|;
comment|/**      * Check OS environment variables first, before trying the specified properties.      * This allows environment variables to override any other property source      * (environment variable and then system properties takes precedence).      */
DECL|field|ENVIRONMENT_VARIABLES_MODE_OVERRIDE
specifier|public
specifier|static
specifier|final
name|int
name|ENVIRONMENT_VARIABLES_MODE_OVERRIDE
init|=
literal|2
decl_stmt|;
comment|/**      * Key for stores special override properties that containers such as OSGi can store      * in the OSGi service registry      */
DECL|field|OVERRIDE_PROPERTIES
specifier|public
specifier|static
specifier|final
name|String
name|OVERRIDE_PROPERTIES
init|=
name|PropertiesComponent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".OverrideProperties"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PropertiesComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|functions
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertiesFunction
argument_list|>
name|functions
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|propertiesParser
specifier|private
name|PropertiesParser
name|propertiesParser
init|=
operator|new
name|DefaultPropertiesParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|propertiesLookup
specifier|private
specifier|final
name|PropertiesLookup
name|propertiesLookup
init|=
operator|new
name|DefaultPropertiesLookup
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|sources
specifier|private
specifier|final
name|List
argument_list|<
name|PropertiesSource
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|locations
specifier|private
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|locations
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
annotation|@
name|Metadata
DECL|field|ignoreMissingLocation
specifier|private
name|boolean
name|ignoreMissingLocation
decl_stmt|;
annotation|@
name|Metadata
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|defaultFallbackEnabled
specifier|private
name|boolean
name|defaultFallbackEnabled
init|=
literal|true
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|initialProperties
specifier|private
name|Properties
name|initialProperties
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|overrideProperties
specifier|private
name|Properties
name|overrideProperties
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
name|SYSTEM_PROPERTIES_MODE_OVERRIDE
argument_list|,
name|enums
operator|=
literal|"0,1,2"
argument_list|)
DECL|field|systemPropertiesMode
specifier|private
name|int
name|systemPropertiesMode
init|=
name|SYSTEM_PROPERTIES_MODE_OVERRIDE
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
name|ENVIRONMENT_VARIABLES_MODE_OVERRIDE
argument_list|,
name|enums
operator|=
literal|"0,1,2"
argument_list|)
DECL|field|environmentVariableMode
specifier|private
name|int
name|environmentVariableMode
init|=
name|ENVIRONMENT_VARIABLES_MODE_OVERRIDE
decl_stmt|;
DECL|method|PropertiesComponent ()
specifier|public
name|PropertiesComponent
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// include out of the box functions
name|addFunction
argument_list|(
operator|new
name|EnvPropertiesFunction
argument_list|()
argument_list|)
expr_stmt|;
name|addFunction
argument_list|(
operator|new
name|SysPropertiesFunction
argument_list|()
argument_list|)
expr_stmt|;
name|addFunction
argument_list|(
operator|new
name|ServicePropertiesFunction
argument_list|()
argument_list|)
expr_stmt|;
name|addFunction
argument_list|(
operator|new
name|ServiceHostPropertiesFunction
argument_list|()
argument_list|)
expr_stmt|;
name|addFunction
argument_list|(
operator|new
name|ServicePortPropertiesFunction
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * A list of locations to load properties. You can use comma to separate multiple locations.      */
DECL|method|PropertiesComponent (String location)
specifier|public
name|PropertiesComponent
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**      * A list of locations to load properties.      */
DECL|method|PropertiesComponent (String... locations)
specifier|public
name|PropertiesComponent
parameter_list|(
name|String
modifier|...
name|locations
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setLocations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|endpointUri
init|=
name|parseUri
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Endpoint uri parsed as: {}"
argument_list|,
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|endpointUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Endpoint
name|delegate
init|=
name|getCamelContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|endpointUri
argument_list|)
decl_stmt|;
name|PropertiesEndpoint
name|answer
init|=
operator|new
name|PropertiesEndpoint
argument_list|(
name|uri
argument_list|,
name|delegate
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|answer
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|parseUri (String uri)
specifier|public
name|String
name|parseUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|parseUri
argument_list|(
name|uri
argument_list|,
name|propertiesLookup
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|resolveProperty (String key)
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|resolveProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|parseUri
argument_list|(
name|key
argument_list|,
name|propertiesLookup
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadProperties ()
specifier|public
name|Properties
name|loadProperties
parameter_list|()
block|{
name|Properties
name|prop
init|=
operator|new
name|OrderedProperties
argument_list|()
decl_stmt|;
comment|// use initial properties
if|if
condition|(
name|initialProperties
operator|!=
literal|null
condition|)
block|{
name|prop
operator|.
name|putAll
argument_list|(
name|initialProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|PropertiesSource
name|ps
range|:
name|sources
control|)
block|{
if|if
condition|(
name|ps
operator|instanceof
name|LoadablePropertiesSource
condition|)
block|{
name|LoadablePropertiesSource
name|lps
init|=
operator|(
name|LoadablePropertiesSource
operator|)
name|ps
decl_stmt|;
name|Properties
name|p
init|=
name|lps
operator|.
name|loadProperties
argument_list|()
decl_stmt|;
name|prop
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// use override properties
if|if
condition|(
name|overrideProperties
operator|!=
literal|null
condition|)
block|{
comment|// make a copy to avoid affecting the original properties
name|Properties
name|override
init|=
operator|new
name|OrderedProperties
argument_list|()
decl_stmt|;
name|override
operator|.
name|putAll
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|override
operator|.
name|putAll
argument_list|(
name|overrideProperties
argument_list|)
expr_stmt|;
name|prop
operator|=
name|override
expr_stmt|;
block|}
return|return
name|prop
return|;
block|}
DECL|method|parseUri (String uri, PropertiesLookup properties)
specifier|protected
name|String
name|parseUri
parameter_list|(
name|String
name|uri
parameter_list|,
name|PropertiesLookup
name|properties
parameter_list|)
block|{
comment|// enclose tokens if missing
if|if
condition|(
operator|!
name|uri
operator|.
name|contains
argument_list|(
name|PREFIX_TOKEN
argument_list|)
operator|&&
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
name|PREFIX_TOKEN
argument_list|)
condition|)
block|{
name|uri
operator|=
name|PREFIX_TOKEN
operator|+
name|uri
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|uri
operator|.
name|contains
argument_list|(
name|SUFFIX_TOKEN
argument_list|)
operator|&&
operator|!
name|uri
operator|.
name|endsWith
argument_list|(
name|SUFFIX_TOKEN
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|+
name|SUFFIX_TOKEN
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Parsing uri {}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return
name|propertiesParser
operator|.
name|parseUri
argument_list|(
name|uri
argument_list|,
name|properties
argument_list|,
name|defaultFallbackEnabled
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getLocations ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLocations
parameter_list|()
block|{
if|if
condition|(
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
else|else
block|{
return|return
name|locations
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|PropertiesLocation
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * A list of locations to load properties.      * This option will override any default locations and only use the locations from this option.      */
DECL|method|setLocations (List<PropertiesLocation> locations)
specifier|public
name|void
name|setLocations
parameter_list|(
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|locations
parameter_list|)
block|{
comment|// reset locations
name|locations
operator|=
name|parseLocations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
name|this
operator|.
name|locations
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|locations
argument_list|)
expr_stmt|;
comment|// we need to re-create the property sources which may have already been created from locations
name|this
operator|.
name|sources
operator|.
name|removeIf
argument_list|(
name|s
lambda|->
name|s
operator|instanceof
name|LocationPropertiesSource
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertiesLocation
name|loc
range|:
name|locations
control|)
block|{
name|addPropertiesLocationsAsPropertiesSource
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A list of locations to load properties.      * This option will override any default locations and only use the locations from this option.      */
DECL|method|setLocations (String[] locationStrings)
specifier|public
name|void
name|setLocations
parameter_list|(
name|String
index|[]
name|locationStrings
parameter_list|)
block|{
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|locationStrings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|locationString
range|:
name|locationStrings
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
operator|new
name|PropertiesLocation
argument_list|(
name|locationString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setLocations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
comment|/**      * A list of locations to load properties.      * This option will override any default locations and only use the locations from this option.      */
DECL|method|setLocations (Collection<String> locationStrings)
specifier|public
name|void
name|setLocations
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|locationStrings
parameter_list|)
block|{
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|locationStrings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|locationString
range|:
name|locationStrings
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
operator|new
name|PropertiesLocation
argument_list|(
name|locationString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setLocations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addLocation (String location)
specifier|public
name|void
name|addLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|newLocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|loc
range|:
name|location
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|newLocations
operator|.
name|add
argument_list|(
operator|new
name|PropertiesLocation
argument_list|(
name|loc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|current
init|=
name|locations
decl_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newLocations
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
name|setLocations
argument_list|(
name|newLocations
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A list of locations to load properties. You can use comma to separate multiple locations.      * This option will override any default locations and only use the locations from this option.      */
annotation|@
name|Override
DECL|method|setLocation (String location)
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|setLocations
argument_list|(
name|location
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Encoding to use when loading properties file from the file system or classpath"
argument_list|)
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
comment|/**      * Encoding to use when loading properties file from the file system or classpath.      *<p/>      * If no encoding has been set, then the properties files is loaded using ISO-8859-1 encoding (latin-1)      * as documented by {@link java.util.Properties#load(java.io.InputStream)}      */
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|getPropertiesParser ()
specifier|public
name|PropertiesParser
name|getPropertiesParser
parameter_list|()
block|{
return|return
name|propertiesParser
return|;
block|}
comment|/**      * To use a custom PropertiesParser      */
DECL|method|setPropertiesParser (PropertiesParser propertiesParser)
specifier|public
name|void
name|setPropertiesParser
parameter_list|(
name|PropertiesParser
name|propertiesParser
parameter_list|)
block|{
name|this
operator|.
name|propertiesParser
operator|=
name|propertiesParser
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether to support using fallback values if a property cannot be found"
argument_list|)
DECL|method|isDefaultFallbackEnabled ()
specifier|public
name|boolean
name|isDefaultFallbackEnabled
parameter_list|()
block|{
return|return
name|defaultFallbackEnabled
return|;
block|}
comment|/**      * If false, the component does not attempt to find a default for the key by looking after the colon separator.      */
DECL|method|setDefaultFallbackEnabled (boolean defaultFallbackEnabled)
specifier|public
name|void
name|setDefaultFallbackEnabled
parameter_list|(
name|boolean
name|defaultFallbackEnabled
parameter_list|)
block|{
name|this
operator|.
name|defaultFallbackEnabled
operator|=
name|defaultFallbackEnabled
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Ignore missing location"
argument_list|)
DECL|method|isIgnoreMissingLocation ()
specifier|public
name|boolean
name|isIgnoreMissingLocation
parameter_list|()
block|{
return|return
name|ignoreMissingLocation
return|;
block|}
comment|/**      * Whether to silently ignore if a location cannot be located, such as a properties file not found.      */
annotation|@
name|Override
DECL|method|setIgnoreMissingLocation (boolean ignoreMissingLocation)
specifier|public
name|void
name|setIgnoreMissingLocation
parameter_list|(
name|boolean
name|ignoreMissingLocation
parameter_list|)
block|{
name|this
operator|.
name|ignoreMissingLocation
operator|=
name|ignoreMissingLocation
expr_stmt|;
block|}
DECL|method|getInitialProperties ()
specifier|public
name|Properties
name|getInitialProperties
parameter_list|()
block|{
return|return
name|initialProperties
return|;
block|}
comment|/**      * Sets initial properties which will be used before any locations are resolved.      */
annotation|@
name|Override
DECL|method|setInitialProperties (Properties initialProperties)
specifier|public
name|void
name|setInitialProperties
parameter_list|(
name|Properties
name|initialProperties
parameter_list|)
block|{
name|this
operator|.
name|initialProperties
operator|=
name|initialProperties
expr_stmt|;
block|}
DECL|method|getOverrideProperties ()
specifier|public
name|Properties
name|getOverrideProperties
parameter_list|()
block|{
return|return
name|overrideProperties
return|;
block|}
comment|/**      * Sets a special list of override properties that take precedence      * and will use first, if a property exist.      */
annotation|@
name|Override
DECL|method|setOverrideProperties (Properties overrideProperties)
specifier|public
name|void
name|setOverrideProperties
parameter_list|(
name|Properties
name|overrideProperties
parameter_list|)
block|{
name|this
operator|.
name|overrideProperties
operator|=
name|overrideProperties
expr_stmt|;
block|}
comment|/**      * Gets the functions registered in this properties component.      */
DECL|method|getFunctions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PropertiesFunction
argument_list|>
name|getFunctions
parameter_list|()
block|{
return|return
name|functions
return|;
block|}
comment|/**      * Registers the {@link org.apache.camel.component.properties.PropertiesFunction} as a function to this component.      */
DECL|method|addFunction (PropertiesFunction function)
specifier|public
name|void
name|addFunction
parameter_list|(
name|PropertiesFunction
name|function
parameter_list|)
block|{
name|this
operator|.
name|functions
operator|.
name|put
argument_list|(
name|function
operator|.
name|getName
argument_list|()
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
comment|/**      * Is there a {@link org.apache.camel.component.properties.PropertiesFunction} with the given name?      */
DECL|method|hasFunction (String name)
specifier|public
name|boolean
name|hasFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|functions
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"System properties mode"
argument_list|)
DECL|method|getSystemPropertiesMode ()
specifier|public
name|int
name|getSystemPropertiesMode
parameter_list|()
block|{
return|return
name|systemPropertiesMode
return|;
block|}
comment|/**      * Sets the JVM system property mode (0 = never, 1 = fallback, 2 = override).      *      * The default mode (override) is to use system properties if present,      * and override any existing properties.      *      * OS environment variable mode is checked before JVM system property mode      *      * @see #SYSTEM_PROPERTIES_MODE_NEVER      * @see #SYSTEM_PROPERTIES_MODE_FALLBACK      * @see #SYSTEM_PROPERTIES_MODE_OVERRIDE      */
DECL|method|setSystemPropertiesMode (int systemPropertiesMode)
specifier|public
name|void
name|setSystemPropertiesMode
parameter_list|(
name|int
name|systemPropertiesMode
parameter_list|)
block|{
name|this
operator|.
name|systemPropertiesMode
operator|=
name|systemPropertiesMode
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Environment variable mode"
argument_list|)
DECL|method|getEnvironmentVariableMode ()
specifier|public
name|int
name|getEnvironmentVariableMode
parameter_list|()
block|{
return|return
name|environmentVariableMode
return|;
block|}
comment|/**      * Sets the OS environment variables mode (0 = never, 1 = fallback, 2 = override).      *      * The default mode (override) is to use OS environment variables if present,      * and override any existing properties.      *      * OS environment variable mode is checked before JVM system property mode      *      * @see #ENVIRONMENT_VARIABLES_MODE_NEVER      * @see #ENVIRONMENT_VARIABLES_MODE_FALLBACK      * @see #ENVIRONMENT_VARIABLES_MODE_OVERRIDE      */
DECL|method|setEnvironmentVariableMode (int environmentVariableMode)
specifier|public
name|void
name|setEnvironmentVariableMode
parameter_list|(
name|int
name|environmentVariableMode
parameter_list|)
block|{
name|this
operator|.
name|environmentVariableMode
operator|=
name|environmentVariableMode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addPropertiesSource (PropertiesSource propertiesSource)
specifier|public
name|void
name|addPropertiesSource
parameter_list|(
name|PropertiesSource
name|propertiesSource
parameter_list|)
block|{
if|if
condition|(
name|propertiesSource
operator|instanceof
name|CamelContextAware
condition|)
block|{
operator|(
operator|(
name|CamelContextAware
operator|)
name|propertiesSource
operator|)
operator|.
name|setCamelContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sources
operator|.
name|add
argument_list|(
name|propertiesSource
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isNew
argument_list|()
condition|)
block|{
comment|// if we have already initialized or started then we should also init the source
name|ServiceHelper
operator|.
name|initService
argument_list|(
name|propertiesSource
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSources ()
specifier|public
name|List
argument_list|<
name|PropertiesSource
argument_list|>
name|getSources
parameter_list|()
block|{
return|return
name|sources
return|;
block|}
annotation|@
name|Override
DECL|method|doInit ()
specifier|protected
name|void
name|doInit
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doInit
argument_list|()
expr_stmt|;
comment|// discover any 3rd party properties sources
try|try
block|{
name|FactoryFinder
name|factoryFinder
init|=
name|getCamelContext
argument_list|()
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getFactoryFinder
argument_list|(
literal|"META-INF/services/org/apache/camel"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|factoryFinder
operator|.
name|findClass
argument_list|(
literal|"properties-source-factory"
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|Object
name|obj
init|=
name|getCamelContext
argument_list|()
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|PropertiesSource
condition|)
block|{
name|PropertiesSource
name|ps
init|=
operator|(
name|PropertiesSource
operator|)
name|obj
decl_stmt|;
name|addPropertiesSource
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PropertiesComponent added custom PropertiesSource: {}"
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"PropertiesComponent cannot add custom PropertiesSource as the type is not a org.apache.camel.component.properties.PropertiesSource but: "
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error discovering and using custom PropertiesSource due to "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception is ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|initService
argument_list|(
name|sources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|sources
operator|.
name|sort
argument_list|(
name|OrderedComparator
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|sources
argument_list|)
expr_stmt|;
if|if
condition|(
name|systemPropertiesMode
operator|!=
name|SYSTEM_PROPERTIES_MODE_NEVER
operator|&&
name|systemPropertiesMode
operator|!=
name|SYSTEM_PROPERTIES_MODE_FALLBACK
operator|&&
name|systemPropertiesMode
operator|!=
name|SYSTEM_PROPERTIES_MODE_OVERRIDE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option systemPropertiesMode has invalid value: "
operator|+
name|systemPropertiesMode
argument_list|)
throw|;
block|}
if|if
condition|(
name|environmentVariableMode
operator|!=
name|ENVIRONMENT_VARIABLES_MODE_NEVER
operator|&&
name|environmentVariableMode
operator|!=
name|ENVIRONMENT_VARIABLES_MODE_FALLBACK
operator|&&
name|environmentVariableMode
operator|!=
name|ENVIRONMENT_VARIABLES_MODE_OVERRIDE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option environmentVariableMode has invalid value: "
operator|+
name|environmentVariableMode
argument_list|)
throw|;
block|}
comment|// inject the component to the parser
if|if
condition|(
name|propertiesParser
operator|instanceof
name|DefaultPropertiesParser
condition|)
block|{
operator|(
operator|(
name|DefaultPropertiesParser
operator|)
name|propertiesParser
operator|)
operator|.
name|setPropertiesComponent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|sources
argument_list|)
expr_stmt|;
block|}
DECL|method|addPropertiesLocationsAsPropertiesSource (PropertiesLocation location)
specifier|private
name|void
name|addPropertiesLocationsAsPropertiesSource
parameter_list|(
name|PropertiesLocation
name|location
parameter_list|)
block|{
if|if
condition|(
literal|"ref"
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getResolver
argument_list|()
argument_list|)
condition|)
block|{
name|addPropertiesSource
argument_list|(
operator|new
name|RefPropertiesSource
argument_list|(
name|this
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getResolver
argument_list|()
argument_list|)
condition|)
block|{
name|addPropertiesSource
argument_list|(
operator|new
name|FilePropertiesSource
argument_list|(
name|this
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"classpath"
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getResolver
argument_list|()
argument_list|)
condition|)
block|{
name|addPropertiesSource
argument_list|(
operator|new
name|ClasspathPropertiesSource
argument_list|(
name|this
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseLocations (List<PropertiesLocation> locations)
specifier|private
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|parseLocations
parameter_list|(
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|locations
parameter_list|)
block|{
name|List
argument_list|<
name|PropertiesLocation
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertiesLocation
name|location
range|:
name|locations
control|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Parsing location: {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|path
init|=
name|FilePathResolver
operator|.
name|resolvePath
argument_list|(
name|location
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Parsed location: {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
operator|new
name|PropertiesLocation
argument_list|(
name|location
operator|.
name|getResolver
argument_list|()
argument_list|,
name|path
argument_list|,
name|location
operator|.
name|isOptional
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreMissingLocation
operator|&&
operator|!
name|location
operator|.
name|isOptional
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ignored missing location: {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// must return a not-null answer
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

