begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   */
end_comment

begin_package
DECL|package|org.apache.camel.component.atmosphere.websocket
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmosphere
operator|.
name|websocket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|websocket
operator|.
name|WebSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|WebsocketProducer
specifier|public
class|class
name|WebsocketProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WebsocketProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|executor
specifier|private
specifier|static
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
DECL|method|WebsocketProducer (WebsocketEndpoint endpoint)
specifier|public
name|WebsocketProducer
parameter_list|(
name|WebsocketEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|WebsocketEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|WebsocketEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
comment|//TODO support binary data
name|Object
name|message
init|=
name|in
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring a null message"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|message
operator|instanceof
name|String
operator|||
name|message
operator|instanceof
name|byte
index|[]
operator|||
name|message
operator|instanceof
name|Reader
operator|||
name|message
operator|instanceof
name|InputStream
operator|)
condition|)
block|{
comment|// fallback to use String
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using String for unexpected message type {} "
argument_list|,
name|message
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|message
operator|=
name|in
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// REVISIT Reader and InputStream handling at Producer
comment|// special conversion for Reader and InputStream for now
if|if
condition|(
name|message
operator|instanceof
name|Reader
condition|)
block|{
name|message
operator|=
name|in
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|InputStream
condition|)
block|{
name|message
operator|=
name|in
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Sending to {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|isSendToAll
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending to all -> {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|//TODO consider using atmosphere's broadcast or a more configurable async send
for|for
control|(
specifier|final
name|WebSocket
name|websocket
range|:
name|getEndpoint
argument_list|()
operator|.
name|getWebSocketStore
argument_list|()
operator|.
name|getAllWebSockets
argument_list|()
control|)
block|{
specifier|final
name|Object
name|msg
init|=
name|message
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sendMessage
argument_list|(
name|websocket
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// look for connection key and get Websocket
name|String
name|connectionKey
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|WebsocketConstants
operator|.
name|CONNECTION_KEY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionKey
operator|!=
literal|null
condition|)
block|{
name|WebSocket
name|websocket
init|=
name|getEndpoint
argument_list|()
operator|.
name|getWebSocketStore
argument_list|()
operator|.
name|getWebSocket
argument_list|(
name|connectionKey
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Sending to connection key {} -> {}"
argument_list|,
name|connectionKey
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|websocket
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to send message to single connection; connetion key not set."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|sendMessage (WebSocket websocket, Object message)
specifier|private
name|void
name|sendMessage
parameter_list|(
name|WebSocket
name|websocket
parameter_list|,
name|Object
name|message
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|String
condition|)
block|{
name|websocket
operator|.
name|write
argument_list|(
operator|(
name|String
operator|)
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|websocket
operator|.
name|write
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|message
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|byte
index|[]
operator|)
name|message
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this should not happen unless one of the supported types is missing above.
name|LOG
operator|.
name|error
argument_list|(
literal|"unexpected message type {}"
argument_list|,
name|message
operator|==
literal|null
condition|?
literal|null
else|:
name|message
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when writing to websocket"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

