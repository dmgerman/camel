begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.wsservlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wsservlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmosphere
operator|.
name|websocket
operator|.
name|MemoryWebSocketStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|websocket
operator|.
name|WebSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MemoryWebSocketStoreTest
specifier|public
class|class
name|MemoryWebSocketStoreTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testAddAndRemove ()
specifier|public
name|void
name|testAddAndRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryWebSocketStore
name|store
init|=
operator|new
name|MemoryWebSocketStore
argument_list|()
decl_stmt|;
name|WebSocket
name|webSocket1
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|WebSocket
operator|.
name|class
argument_list|)
decl_stmt|;
name|WebSocket
name|webSocket2
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|WebSocket
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|connectionKey1
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|connectionKey2
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|addWebSocket
argument_list|(
name|connectionKey1
argument_list|,
name|webSocket1
argument_list|)
expr_stmt|;
name|verifyGet
argument_list|(
name|store
argument_list|,
name|connectionKey1
argument_list|,
name|webSocket1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getAllWebSockets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|addWebSocket
argument_list|(
name|connectionKey2
argument_list|,
name|webSocket2
argument_list|)
expr_stmt|;
name|verifyGet
argument_list|(
name|store
argument_list|,
name|connectionKey2
argument_list|,
name|webSocket2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyGet
argument_list|(
name|store
argument_list|,
name|connectionKey1
argument_list|,
name|webSocket1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|getAllWebSockets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeWebSocket
argument_list|(
name|connectionKey1
argument_list|)
expr_stmt|;
name|verifyGet
argument_list|(
name|store
argument_list|,
name|connectionKey1
argument_list|,
name|webSocket1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeWebSocket
argument_list|(
name|webSocket2
argument_list|)
expr_stmt|;
name|verifyGet
argument_list|(
name|store
argument_list|,
name|connectionKey2
argument_list|,
name|webSocket2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|getAllWebSockets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyGet (MemoryWebSocketStore store, String ck, WebSocket ws, boolean exists)
specifier|private
name|void
name|verifyGet
parameter_list|(
name|MemoryWebSocketStore
name|store
parameter_list|,
name|String
name|ck
parameter_list|,
name|WebSocket
name|ws
parameter_list|,
name|boolean
name|exists
parameter_list|)
block|{
name|WebSocket
name|aws
init|=
name|store
operator|.
name|getWebSocket
argument_list|(
name|ck
argument_list|)
decl_stmt|;
name|String
name|ack
init|=
name|store
operator|.
name|getConnectionKey
argument_list|(
name|ws
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|assertNotNull
argument_list|(
name|aws
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ws
argument_list|,
name|aws
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ck
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|aws
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

