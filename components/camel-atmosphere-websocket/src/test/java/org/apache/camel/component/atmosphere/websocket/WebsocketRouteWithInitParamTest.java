begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.atmosphere.websocket
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atmosphere
operator|.
name|websocket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|WebsocketRouteWithInitParamTest
specifier|public
class|class
name|WebsocketRouteWithInitParamTest
extends|extends
name|WebsocketCamelRouterWithInitParamTestSupport
block|{
annotation|@
name|Test
DECL|method|testWebsocketEventsResendingEnabled ()
specifier|public
name|void
name|testWebsocketEventsResendingEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|TestClient
name|wsclient
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|PORT
operator|+
literal|"/hola"
argument_list|)
decl_stmt|;
name|wsclient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPassParametersWebsocketOnOpen ()
specifier|public
name|void
name|testPassParametersWebsocketOnOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|TestClient
name|wsclient
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|PORT
operator|+
literal|"/hola1?param1=value1&param2=value2"
argument_list|)
decl_stmt|;
name|wsclient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// START SNIPPET: payload
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// route for events resending enabled
name|from
argument_list|(
literal|"atmosphere-websocket:///hola"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:info"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|checkEventsResendingEnabled
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// route for events resending enabled with parameters from url
name|from
argument_list|(
literal|"atmosphere-websocket:///hola1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:info"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|checkPassedParameters
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|checkEventsResendingEnabled (Exchange exchange)
specifier|private
specifier|static
name|void
name|checkEventsResendingEnabled
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|connectionKey
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|WebsocketConstants
operator|.
name|CONNECTION_KEY
argument_list|)
decl_stmt|;
name|Object
name|eventType
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|WebsocketConstants
operator|.
name|EVENT_TYPE
argument_list|)
decl_stmt|;
name|Object
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connectionKey
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventType
operator|instanceof
name|Integer
condition|)
block|{
name|assertTrue
argument_list|(
name|eventType
operator|.
name|equals
argument_list|(
name|WebsocketConstants
operator|.
name|ONOPEN_EVENT_TYPE
argument_list|)
operator|||
name|eventType
operator|.
name|equals
argument_list|(
name|WebsocketConstants
operator|.
name|ONCLOSE_EVENT_TYPE
argument_list|)
operator|||
name|eventType
operator|.
name|equals
argument_list|(
name|WebsocketConstants
operator|.
name|ONERROR_EVENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkPassedParameters (Exchange exchange)
specifier|private
specifier|static
name|void
name|checkPassedParameters
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|connectionKey
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|WebsocketConstants
operator|.
name|CONNECTION_KEY
argument_list|)
decl_stmt|;
name|Object
name|eventType
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|WebsocketConstants
operator|.
name|EVENT_TYPE
argument_list|)
decl_stmt|;
name|Object
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connectionKey
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|eventType
operator|instanceof
name|Integer
operator|)
operator|&&
name|eventType
operator|.
name|equals
argument_list|(
name|WebsocketConstants
operator|.
name|ONOPEN_EVENT_TYPE
argument_list|)
condition|)
block|{
name|String
name|param1
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"param1"
argument_list|)
decl_stmt|;
name|String
name|param2
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"param2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|param1
operator|.
name|equals
argument_list|(
literal|"value1"
argument_list|)
operator|&&
name|param2
operator|.
name|equals
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// END SNIPPET: payload
block|}
end_class

end_unit

