begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.validator.jing
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
operator|.
name|jing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thaiopensource
operator|.
name|relaxng
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thaiopensource
operator|.
name|validate
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thaiopensource
operator|.
name|xml
operator|.
name|sax
operator|.
name|Jaxp11XMLReaderCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"jing"
argument_list|,
name|title
operator|=
literal|"Jing"
argument_list|,
name|syntax
operator|=
literal|"jing:resourceUri"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"validation"
argument_list|)
DECL|class|JingEndpoint
specifier|public
class|class
name|JingEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|resourceUri
specifier|private
name|String
name|resourceUri
decl_stmt|;
annotation|@
name|UriParam
DECL|field|compactSyntax
specifier|private
name|boolean
name|compactSyntax
decl_stmt|;
DECL|field|schema
specifier|private
name|Schema
name|schema
decl_stmt|;
DECL|field|schemaFactory
specifier|private
name|SchemaFactory
name|schemaFactory
decl_stmt|;
DECL|field|inputSource
specifier|private
name|InputSource
name|inputSource
decl_stmt|;
DECL|method|JingEndpoint (String endpointUri, Component component)
specifier|public
name|JingEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|JingValidator
name|answer
init|=
operator|new
name|JingValidator
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setSchema
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This endpoint does not support consumer"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getResourceUri ()
specifier|public
name|String
name|getResourceUri
parameter_list|()
block|{
return|return
name|resourceUri
return|;
block|}
comment|/**      * URL to a local resource on the classpath or a full URL to a remote resource or resource on the file system which contains the schema to validate against.      */
DECL|method|setResourceUri (String resourceUri)
specifier|public
name|void
name|setResourceUri
parameter_list|(
name|String
name|resourceUri
parameter_list|)
block|{
name|this
operator|.
name|resourceUri
operator|=
name|resourceUri
expr_stmt|;
block|}
DECL|method|isCompactSyntax ()
specifier|public
name|boolean
name|isCompactSyntax
parameter_list|()
block|{
return|return
name|compactSyntax
return|;
block|}
comment|/**      * Whether to validate using RelaxNG compact syntax or not.      *<p/>      * By default this is<tt>false</tt> for using RelaxNG XML Syntax (rng)      * And<tt>true</tt> is for using  RelaxNG Compact Syntax (rnc)      */
DECL|method|setCompactSyntax (boolean compactSyntax)
specifier|public
name|void
name|setCompactSyntax
parameter_list|(
name|boolean
name|compactSyntax
parameter_list|)
block|{
name|this
operator|.
name|compactSyntax
operator|=
name|compactSyntax
expr_stmt|;
block|}
DECL|method|getSchema ()
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
DECL|method|setSchema (Schema schema)
specifier|public
name|void
name|setSchema
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
DECL|method|getSchemaFactory ()
specifier|public
name|SchemaFactory
name|getSchemaFactory
parameter_list|()
block|{
return|return
name|schemaFactory
return|;
block|}
DECL|method|setSchemaFactory (SchemaFactory schemaFactory)
specifier|public
name|void
name|setSchemaFactory
parameter_list|(
name|SchemaFactory
name|schemaFactory
parameter_list|)
block|{
name|this
operator|.
name|schemaFactory
operator|=
name|schemaFactory
expr_stmt|;
block|}
DECL|method|getInputSource ()
specifier|public
name|InputSource
name|getInputSource
parameter_list|()
block|{
return|return
name|inputSource
return|;
block|}
DECL|method|setInputSource (InputSource inputSource)
specifier|public
name|void
name|setInputSource
parameter_list|(
name|InputSource
name|inputSource
parameter_list|)
block|{
name|this
operator|.
name|inputSource
operator|=
name|inputSource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputSource
operator|==
literal|null
condition|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|resourceUri
argument_list|,
literal|"resourceUri"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|InputStream
name|inputStream
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|resourceUri
argument_list|)
decl_stmt|;
name|inputSource
operator|=
operator|new
name|InputSource
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaFactory
operator|==
literal|null
condition|)
block|{
name|schemaFactory
operator|=
operator|new
name|SchemaFactory
argument_list|()
expr_stmt|;
name|schemaFactory
operator|.
name|setCompactSyntax
argument_list|(
name|compactSyntax
argument_list|)
expr_stmt|;
name|schemaFactory
operator|.
name|setXMLReaderCreator
argument_list|(
operator|new
name|Jaxp11XMLReaderCreator
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|schemaFactory
operator|.
name|createSchema
argument_list|(
name|inputSource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

