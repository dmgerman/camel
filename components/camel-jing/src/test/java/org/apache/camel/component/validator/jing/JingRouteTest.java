begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.validator.jing
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
operator|.
name|jing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|validation
operator|.
name|SchemaValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|JingRouteTest
specifier|public
class|class
name|JingRouteTest
extends|extends
name|SpringTestSupport
block|{
DECL|method|testValidMessageUsingRelaxNG ()
specifier|public
name|void
name|testValidMessageUsingRelaxNG
parameter_list|()
throws|throws
name|Exception
block|{
name|assertValidMessage
argument_list|(
literal|"direct:rng"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidMessageUsingRelaxNG ()
specifier|public
name|void
name|testInvalidMessageUsingRelaxNG
parameter_list|()
throws|throws
name|Exception
block|{
name|assertInvalidMessage
argument_list|(
literal|"direct:rng"
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidMessageUsingRelaxNGCompactSyntax ()
specifier|public
name|void
name|testValidMessageUsingRelaxNGCompactSyntax
parameter_list|()
throws|throws
name|Exception
block|{
name|assertValidMessage
argument_list|(
literal|"direct:rnc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidMessageUsingRelaxNGCompactSyntax ()
specifier|public
name|void
name|testInvalidMessageUsingRelaxNGCompactSyntax
parameter_list|()
throws|throws
name|Exception
block|{
name|assertInvalidMessage
argument_list|(
literal|"direct:rnc"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertValidMessage (String endpointUri)
specifier|protected
name|void
name|assertValidMessage
parameter_list|(
name|String
name|endpointUri
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|body
init|=
literal|"<mail xmlns='http://foo.com/bar'><subject>Hey</subject><body>Hello world!</body></mail>"
decl_stmt|;
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|endpointUri
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertInvalidMessage (String endpointUri)
specifier|protected
name|void
name|assertInvalidMessage
parameter_list|(
name|String
name|endpointUri
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|body
init|=
literal|"<mail xmlns='http://foo.com/bar'><body>Hello world!</body></mail>"
decl_stmt|;
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|endpointUri
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
comment|// TODO ideally we'd not have to wrap validation exceptions!
comment|// TODO should we expose checked exceptions on CamelTemplate
comment|// or should we make validation errors be runtime exceptions?
catch|catch
parameter_list|(
name|RuntimeCamelException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SchemaValidationException
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Caught expected schema validation exception: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Not a SchemaValidationException: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getExpectedRouteCount ()
specifier|protected
name|int
name|getExpectedRouteCount
parameter_list|()
block|{
comment|// TODO why zero?
return|return
literal|0
return|;
block|}
DECL|method|createApplicationContext ()
specifier|protected
name|ClassPathXmlApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/validator/jing/camelContext.xml"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

