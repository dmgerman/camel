begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.ognl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|ognl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|LanguageTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|OgnlTest
specifier|public
class|class
name|OgnlTest
extends|extends
name|LanguageTestSupport
block|{
annotation|@
name|Test
DECL|method|testOgnlExpressions ()
specifier|public
name|void
name|testOgnlExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"exchange"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"exchange.getIn().body"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"getRequest().body"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"request.body"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"getRequest().headers['foo']"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"getRequest().headers.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"request.headers.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClassMethodExpression ()
specifier|public
name|void
name|testClassMethodExpression
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"@org.apache.camel.language.ognl.Animal1@getClassName()"
argument_list|,
literal|"Animal"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"We should get the ClassNotFoundException"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"ClassNotFoundException"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// setup the class resolver to load the right class for us
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|setClassResolver
argument_list|(
operator|new
name|MyClassResolver
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"@org.apache.camel.language.ognl.Animal1@getClassName()"
argument_list|,
literal|"Animal"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetOutFalseKeepsNullOutMessage ()
specifier|public
name|void
name|testGetOutFalseKeepsNullOutMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"exchange.hasOut()"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|exchange
operator|.
name|hasOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResponseCreatesOutMessage ()
specifier|public
name|void
name|testResponseCreatesOutMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"response.body"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchange
operator|.
name|hasOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLanguageName ()
specifier|protected
name|String
name|getLanguageName
parameter_list|()
block|{
return|return
literal|"ognl"
return|;
block|}
block|}
end_class

end_unit

