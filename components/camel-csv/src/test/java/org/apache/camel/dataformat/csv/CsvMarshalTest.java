begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests standard marshalling  */
end_comment

begin_class
DECL|class|CsvMarshalTest
specifier|public
class|class
name|CsvMarshalTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:output"
argument_list|)
DECL|field|output
name|MockEndpoint
name|output
decl_stmt|;
annotation|@
name|Test
DECL|method|shouldMarshalLists ()
specifier|public
name|void
name|shouldMarshalLists
parameter_list|()
throws|throws
name|Exception
block|{
name|output
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:default"
argument_list|,
name|Arrays
operator|.
expr|<
name|List
operator|>
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|String
index|[]
name|actuals
init|=
name|readOutputLines
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1,2,3"
block|,
literal|"one,two,three"
block|}
argument_list|,
name|actuals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldMarshalListsOneRow ()
specifier|public
name|void
name|shouldMarshalListsOneRow
parameter_list|()
throws|throws
name|Exception
block|{
name|output
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:default"
argument_list|,
name|Arrays
operator|.
expr|<
name|List
operator|>
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|String
index|[]
name|actuals
init|=
name|readOutputLines
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"one"
block|}
argument_list|,
name|actuals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldMarshalMaps ()
specifier|public
name|void
name|shouldMarshalMaps
parameter_list|()
throws|throws
name|Exception
block|{
name|output
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:default"
argument_list|,
name|Arrays
operator|.
expr|<
name|Map
operator|>
name|asList
argument_list|(
name|TestUtils
operator|.
name|asMap
argument_list|(
literal|"A"
argument_list|,
literal|"1"
argument_list|,
literal|"B"
argument_list|,
literal|"2"
argument_list|,
literal|"C"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
name|TestUtils
operator|.
name|asMap
argument_list|(
literal|"A"
argument_list|,
literal|"one"
argument_list|,
literal|"B"
argument_list|,
literal|"two"
argument_list|,
literal|"C"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1,2,3"
block|,
literal|"one,two,three"
block|}
argument_list|,
name|readOutputLines
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldMarshalSingleMap ()
specifier|public
name|void
name|shouldMarshalSingleMap
parameter_list|()
throws|throws
name|Exception
block|{
name|output
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:default"
argument_list|,
name|TestUtils
operator|.
name|asMap
argument_list|(
literal|"A"
argument_list|,
literal|"1"
argument_list|,
literal|"B"
argument_list|,
literal|"2"
argument_list|,
literal|"C"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1,2,3"
block|}
argument_list|,
name|readOutputLines
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldHandleColumns ()
specifier|public
name|void
name|shouldHandleColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|output
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:headers"
argument_list|,
name|Arrays
operator|.
expr|<
name|Map
operator|>
name|asList
argument_list|(
name|TestUtils
operator|.
name|asMap
argument_list|(
literal|"A"
argument_list|,
literal|"1"
argument_list|,
literal|"B"
argument_list|,
literal|"2"
argument_list|,
literal|"C"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
name|TestUtils
operator|.
name|asMap
argument_list|(
literal|"A"
argument_list|,
literal|"one"
argument_list|,
literal|"B"
argument_list|,
literal|"two"
argument_list|,
literal|"C"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"A,C"
block|,
literal|"1,3"
block|,
literal|"one,three"
block|}
argument_list|,
name|readOutputLines
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Default format
name|from
argument_list|(
literal|"direct:default"
argument_list|)
operator|.
name|marshal
argument_list|(
operator|new
name|CsvDataFormat
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:output"
argument_list|)
expr_stmt|;
comment|// Format with special headers
name|from
argument_list|(
literal|"direct:headers"
argument_list|)
operator|.
name|marshal
argument_list|(
operator|new
name|CsvDataFormat
argument_list|()
operator|.
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"C"
block|}
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:output"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|readOutputLines ()
specifier|private
name|String
index|[]
name|readOutputLines
parameter_list|()
block|{
return|return
name|output
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|split
argument_list|(
literal|"\r\n|\r|\n"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

