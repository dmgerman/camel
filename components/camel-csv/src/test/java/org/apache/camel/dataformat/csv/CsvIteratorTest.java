begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|mockit
operator|.
name|Expectations
import|;
end_import

begin_import
import|import
name|mockit
operator|.
name|Injectable
import|;
end_import

begin_class
DECL|class|CsvIteratorTest
specifier|public
class|class
name|CsvIteratorTest
block|{
DECL|field|HDD_CRASH
specifier|public
specifier|static
specifier|final
name|String
name|HDD_CRASH
init|=
literal|"HDD crash"
decl_stmt|;
annotation|@
name|Test
DECL|method|closeIfError (@njectable final InputStreamReader reader, @Injectable final CSVParser parser)
specifier|public
name|void
name|closeIfError
parameter_list|(
annotation|@
name|Injectable
specifier|final
name|InputStreamReader
name|reader
parameter_list|,
annotation|@
name|Injectable
specifier|final
name|CSVParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|Expectations
argument_list|()
block|{
block|{
name|parser
operator|.
name|getLine
parameter_list|()
constructor_decl|;
name|result
operator|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
expr_stmt|;
name|parser
operator|.
name|getLine
parameter_list|()
constructor_decl|;
name|result
operator|=
operator|new
name|String
index|[]
block|{
literal|"2"
block|}
expr_stmt|;
name|parser
operator|.
name|getLine
parameter_list|()
constructor_decl|;
name|result
operator|=
operator|new
name|IOException
argument_list|(
name|HDD_CRASH
argument_list|)
expr_stmt|;
comment|// The reader will be closed when there is nothing left
name|reader
operator|.
name|close
parameter_list|()
constructor_decl|;
block|}
block|}
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|CsvIterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|iterator
init|=
operator|new
name|CsvIterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|parser
argument_list|,
name|reader
argument_list|,
name|CsvLineConverters
operator|.
name|getListConverter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HDD_CRASH
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// okay
block|}
block|}
annotation|@
name|Test
DECL|method|normalCycle (@njectable final InputStreamReader reader, @Injectable final CSVParser parser)
specifier|public
name|void
name|normalCycle
parameter_list|(
annotation|@
name|Injectable
specifier|final
name|InputStreamReader
name|reader
parameter_list|,
annotation|@
name|Injectable
specifier|final
name|CSVParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|Expectations
argument_list|()
block|{
block|{
name|parser
operator|.
name|getLine
parameter_list|()
constructor_decl|;
name|result
operator|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
expr_stmt|;
name|parser
operator|.
name|getLine
parameter_list|()
constructor_decl|;
name|result
operator|=
operator|new
name|String
index|[]
block|{
literal|"2"
block|}
expr_stmt|;
name|parser
operator|.
name|getLine
parameter_list|()
constructor_decl|;
name|result
operator|=
literal|null
expr_stmt|;
comment|// The reader will be closed when there is nothing left
name|reader
operator|.
name|close
parameter_list|()
constructor_decl|;
block|}
block|}
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|CsvIterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|iterator
init|=
operator|new
name|CsvIterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|parser
argument_list|,
name|reader
argument_list|,
name|CsvLineConverters
operator|.
name|getListConverter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// okay
block|}
block|}
block|}
end_class

end_unit

