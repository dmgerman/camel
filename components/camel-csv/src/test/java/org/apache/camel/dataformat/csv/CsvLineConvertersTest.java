begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|CsvLineConvertersTest
specifier|public
class|class
name|CsvLineConvertersTest
block|{
annotation|@
name|Test
DECL|method|shouldConvertAsList ()
specifier|public
name|void
name|shouldConvertAsList
parameter_list|()
block|{
name|CsvLineConverter
argument_list|<
name|?
argument_list|>
name|converter
init|=
name|CsvLineConverters
operator|.
name|getListConverter
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|converter
operator|.
name|convertLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|result
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldConvertAsMap ()
specifier|public
name|void
name|shouldConvertAsMap
parameter_list|()
block|{
name|CsvLineConverter
argument_list|<
name|?
argument_list|>
name|converter
init|=
name|CsvLineConverters
operator|.
name|getMapLineConverter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"HEADER_1"
block|,
literal|"HEADER_2"
block|}
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|converter
operator|.
name|convertLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|result
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"HEADER_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"HEADER_2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|shouldNotConvertAsMapWithNullHeaders ()
specifier|public
name|void
name|shouldNotConvertAsMapWithNullHeaders
parameter_list|()
block|{
name|CsvLineConverters
operator|.
name|getMapLineConverter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|shouldNotConvertAsMapWithNoHeaders ()
specifier|public
name|void
name|shouldNotConvertAsMapWithNoHeaders
parameter_list|()
block|{
name|CsvLineConverters
operator|.
name|getMapLineConverter
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|shouldNotConvertAsMapWithInvalidLine ()
specifier|public
name|void
name|shouldNotConvertAsMapWithInvalidLine
parameter_list|()
block|{
name|CsvLineConverter
argument_list|<
name|?
argument_list|>
name|converter
init|=
name|CsvLineConverters
operator|.
name|getMapLineConverter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"HEADER_1"
block|,
literal|"HEADER_2"
block|}
argument_list|)
decl_stmt|;
name|converter
operator|.
name|convertLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

