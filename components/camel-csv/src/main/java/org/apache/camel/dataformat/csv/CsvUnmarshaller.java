begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVRecord
import|;
end_import

begin_comment
comment|/**  * This class unmarshal CSV into lists or maps depending on the configuration.  */
end_comment

begin_class
DECL|class|CsvUnmarshaller
specifier|abstract
class|class
name|CsvUnmarshaller
block|{
DECL|field|format
specifier|protected
specifier|final
name|CSVFormat
name|format
decl_stmt|;
DECL|field|converter
specifier|protected
specifier|final
name|CsvRecordConverter
argument_list|<
name|?
argument_list|>
name|converter
decl_stmt|;
DECL|method|CsvUnmarshaller (CSVFormat format, CsvDataFormat dataFormat)
specifier|private
name|CsvUnmarshaller
parameter_list|(
name|CSVFormat
name|format
parameter_list|,
name|CsvDataFormat
name|dataFormat
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|converter
operator|=
name|extractConverter
argument_list|(
name|dataFormat
argument_list|)
expr_stmt|;
block|}
DECL|method|create (CSVFormat format, CsvDataFormat dataFormat)
specifier|public
specifier|static
name|CsvUnmarshaller
name|create
parameter_list|(
name|CSVFormat
name|format
parameter_list|,
name|CsvDataFormat
name|dataFormat
parameter_list|)
block|{
comment|// If we want to use maps, thus the header must be either fixed or automatic
if|if
condition|(
operator|(
name|dataFormat
operator|.
name|isUseMaps
argument_list|()
operator|||
name|dataFormat
operator|.
name|isUseOrderedMaps
argument_list|()
operator|)
operator|&&
name|format
operator|.
name|getHeader
argument_list|()
operator|==
literal|null
condition|)
block|{
name|format
operator|=
name|format
operator|.
name|withHeader
argument_list|()
expr_stmt|;
block|}
comment|// If we want to skip the header record it must automatic otherwise it's not working
if|if
condition|(
name|format
operator|.
name|getSkipHeaderRecord
argument_list|()
operator|&&
name|format
operator|.
name|getHeader
argument_list|()
operator|==
literal|null
condition|)
block|{
name|format
operator|=
name|format
operator|.
name|withHeader
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dataFormat
operator|.
name|isLazyLoad
argument_list|()
condition|)
block|{
return|return
operator|new
name|StreamCsvUnmarshaller
argument_list|(
name|format
argument_list|,
name|dataFormat
argument_list|)
return|;
block|}
return|return
operator|new
name|BulkCsvUnmarshaller
argument_list|(
name|format
argument_list|,
name|dataFormat
argument_list|)
return|;
block|}
comment|/**      * Unmarshal the CSV      *      * @param exchange    Exchange (used for accessing type converter)      * @param inputStream Input CSV stream      * @return Unmarshalled CSV      * @throws IOException if the stream cannot be read properly      */
DECL|method|unmarshal (Exchange exchange, InputStream inputStream)
specifier|public
specifier|abstract
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|extractConverter (CsvDataFormat dataFormat)
specifier|private
specifier|static
name|CsvRecordConverter
argument_list|<
name|?
argument_list|>
name|extractConverter
parameter_list|(
name|CsvDataFormat
name|dataFormat
parameter_list|)
block|{
if|if
condition|(
name|dataFormat
operator|.
name|getRecordConverter
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|dataFormat
operator|.
name|getRecordConverter
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dataFormat
operator|.
name|isUseOrderedMaps
argument_list|()
condition|)
block|{
return|return
name|CsvRecordConverters
operator|.
name|orderedMapConverter
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dataFormat
operator|.
name|isUseMaps
argument_list|()
condition|)
block|{
return|return
name|CsvRecordConverters
operator|.
name|mapConverter
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|CsvRecordConverters
operator|.
name|listConverter
argument_list|()
return|;
block|}
block|}
comment|//region Implementations
comment|/**      * This class reads all the CSV into one big list.      */
DECL|class|BulkCsvUnmarshaller
specifier|private
specifier|static
specifier|final
class|class
name|BulkCsvUnmarshaller
extends|extends
name|CsvUnmarshaller
block|{
DECL|method|BulkCsvUnmarshaller (CSVFormat format, CsvDataFormat dataFormat)
specifier|private
name|BulkCsvUnmarshaller
parameter_list|(
name|CSVFormat
name|format
parameter_list|,
name|CsvDataFormat
name|dataFormat
parameter_list|)
block|{
name|super
argument_list|(
name|format
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
block|}
DECL|method|unmarshal (Exchange exchange, InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|CSVParser
name|parser
init|=
operator|new
name|CSVParser
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|ExchangeHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
argument_list|)
argument_list|,
name|format
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|asList
argument_list|(
name|parser
operator|.
name|iterator
argument_list|()
argument_list|,
name|converter
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|asList (Iterator<CSVRecord> iterator, CsvRecordConverter<T> converter)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|asList
parameter_list|(
name|Iterator
argument_list|<
name|CSVRecord
argument_list|>
name|iterator
parameter_list|,
name|CsvRecordConverter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|converter
operator|.
name|convertRecord
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
comment|/**      * This class streams the content of the CSV      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|StreamCsvUnmarshaller
specifier|private
specifier|static
specifier|final
class|class
name|StreamCsvUnmarshaller
extends|extends
name|CsvUnmarshaller
block|{
DECL|method|StreamCsvUnmarshaller (CSVFormat format, CsvDataFormat dataFormat)
specifier|private
name|StreamCsvUnmarshaller
parameter_list|(
name|CSVFormat
name|format
parameter_list|,
name|CsvDataFormat
name|dataFormat
parameter_list|)
block|{
name|super
argument_list|(
name|format
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unmarshal (Exchange exchange, InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|ExchangeHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
name|CSVParser
name|parser
init|=
operator|new
name|CSVParser
argument_list|(
name|reader
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|CsvIterator
name|answer
init|=
operator|new
name|CsvIterator
argument_list|(
name|parser
argument_list|,
name|converter
argument_list|)
decl_stmt|;
comment|// add to UoW so we can close the iterator so it can release any resources
name|exchange
operator|.
name|addOnCompletion
argument_list|(
operator|new
name|CsvUnmarshalOnCompletion
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**      * This class converts the CSV iterator into the proper result type.      *      * @param<T> Converted type      */
DECL|class|CsvIterator
specifier|private
specifier|static
specifier|final
class|class
name|CsvIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|parser
specifier|private
specifier|final
name|CSVParser
name|parser
decl_stmt|;
DECL|field|iterator
specifier|private
specifier|final
name|Iterator
argument_list|<
name|CSVRecord
argument_list|>
name|iterator
decl_stmt|;
DECL|field|converter
specifier|private
specifier|final
name|CsvRecordConverter
argument_list|<
name|T
argument_list|>
name|converter
decl_stmt|;
DECL|method|CsvIterator (CSVParser parser, CsvRecordConverter<T> converter)
specifier|private
name|CsvIterator
parameter_list|(
name|CSVParser
name|parser
parameter_list|,
name|CsvRecordConverter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|iterator
operator|=
name|parser
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
return|return
name|converter
operator|.
name|convertRecord
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|parser
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//endregion
block|}
end_class

end_unit

