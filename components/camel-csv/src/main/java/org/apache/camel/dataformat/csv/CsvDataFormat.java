begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|writer
operator|.
name|CSVConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|writer
operator|.
name|CSVField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|writer
operator|.
name|CSVWriter
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|CsvDataFormat
specifier|public
class|class
name|CsvDataFormat
implements|implements
name|DataFormat
block|{
DECL|field|strategy
specifier|private
name|CSVStrategy
name|strategy
init|=
name|CSVStrategy
operator|.
name|DEFAULT_STRATEGY
decl_stmt|;
DECL|field|config
specifier|private
name|CSVConfig
name|config
init|=
operator|new
name|CSVConfig
argument_list|()
decl_stmt|;
DECL|method|marshal (Exchange exchange, Object object, OutputStream outputStream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|object
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
name|map
init|=
name|ExchangeHelper
operator|.
name|convertToMandatoryType
argument_list|(
name|exchange
argument_list|,
name|Map
operator|.
name|class
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
try|try
block|{
name|CSVConfig
name|conf
init|=
name|createConfig
argument_list|()
decl_stmt|;
comment|// lets add fields
name|Set
name|set
init|=
name|map
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|set
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|text
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|CSVField
name|field
init|=
operator|new
name|CSVField
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|CSVWriter
name|writer
init|=
operator|new
name|CSVWriter
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeRecord
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|unmarshal (Exchange exchange, InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStreamReader
name|in
init|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
try|try
block|{
name|CSVParser
name|parser
init|=
operator|new
name|CSVParser
argument_list|(
name|in
argument_list|,
name|getStrategy
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
index|[]
name|strings
init|=
name|parser
operator|.
name|getLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|strings
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|line
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|list
return|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getConfig ()
specifier|public
name|CSVConfig
name|getConfig
parameter_list|()
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|createConfig
argument_list|()
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
DECL|method|setConfig (CSVConfig config)
specifier|public
name|void
name|setConfig
parameter_list|(
name|CSVConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|getStrategy ()
specifier|public
name|CSVStrategy
name|getStrategy
parameter_list|()
block|{
return|return
name|strategy
return|;
block|}
DECL|method|setStrategy (CSVStrategy strategy)
specifier|public
name|void
name|setStrategy
parameter_list|(
name|CSVStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|strategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|createConfig ()
specifier|protected
name|CSVConfig
name|createConfig
parameter_list|()
block|{
return|return
operator|new
name|CSVConfig
argument_list|()
return|;
block|}
block|}
end_class

end_unit

