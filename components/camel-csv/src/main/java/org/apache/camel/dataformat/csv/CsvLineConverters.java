begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This {@code CsvLineConverters} class provides common implementations of the {@code CsvLineConverter} interface.  */
end_comment

begin_class
DECL|class|CsvLineConverters
specifier|public
specifier|final
class|class
name|CsvLineConverters
block|{
DECL|method|CsvLineConverters ()
specifier|private
name|CsvLineConverters
parameter_list|()
block|{
comment|// Prevent instantiation
block|}
comment|/**      * Provides an implementation of {@code CsvLineConverter} that converts a line into a {@code List}.      *      * @return List-based {@code CsvLineConverter} implementation      */
DECL|method|getListConverter ()
specifier|public
specifier|static
name|CsvLineConverter
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getListConverter
parameter_list|()
block|{
return|return
name|ListLineConverter
operator|.
name|SINGLETON
return|;
block|}
comment|/**      * Provides an implementation of {@code CsvLineConverter} that converts a line into a {@code Map}.      *<p/>      * It requires to have unique {@code headers} values as well as the same number of item in each line.      *      * @param headers Headers of the CSV file      * @return Map-based {@code CsvLineConverter} implementation      */
DECL|method|getMapLineConverter (String[] headers)
specifier|public
specifier|static
name|CsvLineConverter
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getMapLineConverter
parameter_list|(
name|String
index|[]
name|headers
parameter_list|)
block|{
return|return
operator|new
name|MapLineConverter
argument_list|(
name|headers
argument_list|)
return|;
block|}
DECL|class|ListLineConverter
specifier|private
specifier|static
specifier|final
class|class
name|ListLineConverter
implements|implements
name|CsvLineConverter
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
DECL|field|SINGLETON
specifier|public
specifier|static
specifier|final
name|ListLineConverter
name|SINGLETON
init|=
operator|new
name|ListLineConverter
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|convertLine (String[] line)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|convertLine
parameter_list|(
name|String
index|[]
name|line
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|line
argument_list|)
return|;
block|}
block|}
DECL|class|MapLineConverter
specifier|private
specifier|static
specifier|final
class|class
name|MapLineConverter
implements|implements
name|CsvLineConverter
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
block|{
DECL|field|headers
specifier|private
specifier|final
name|String
index|[]
name|headers
decl_stmt|;
DECL|method|MapLineConverter (String[] headers)
specifier|private
name|MapLineConverter
parameter_list|(
name|String
index|[]
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|checkHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|convertLine (String[] line)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|convertLine
parameter_list|(
name|String
index|[]
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|.
name|length
operator|!=
name|headers
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This line does not have the same number of items than the header"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|line
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|headers
index|[
name|i
index|]
argument_list|,
name|line
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|checkHeaders (String[] headers)
specifier|private
specifier|static
name|String
index|[]
name|checkHeaders
parameter_list|(
name|String
index|[]
name|headers
parameter_list|)
block|{
comment|// Check that we have headers
if|if
condition|(
name|headers
operator|==
literal|null
operator|||
name|headers
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing headers for the CSV parsing"
argument_list|)
throw|;
block|}
comment|// Check that there is no duplicates
name|Set
argument_list|<
name|String
argument_list|>
name|headerSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|headers
operator|.
name|length
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|headerSet
argument_list|,
name|headers
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerSet
operator|.
name|size
argument_list|()
operator|!=
name|headers
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There are duplicate headers"
argument_list|)
throw|;
block|}
return|return
name|headers
return|;
block|}
block|}
block|}
end_class

end_unit

