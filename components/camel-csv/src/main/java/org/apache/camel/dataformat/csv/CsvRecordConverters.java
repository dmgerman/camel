begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVRecord
import|;
end_import

begin_comment
comment|/**  * This class defines common {@link CsvRecordConverter} implementations.  *  * @see CsvRecordConverter  */
end_comment

begin_class
DECL|class|CsvRecordConverters
specifier|final
class|class
name|CsvRecordConverters
block|{
DECL|method|CsvRecordConverters ()
specifier|private
name|CsvRecordConverters
parameter_list|()
block|{
comment|// Prevent instantiation
block|}
comment|/**      * Returns a converter that transforms the CSV record into a list.      *      * @return converter that transforms the CSV record into a list      */
DECL|method|listConverter ()
specifier|public
specifier|static
name|CsvRecordConverter
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|listConverter
parameter_list|()
block|{
return|return
name|ListCsvRecordConverter
operator|.
name|SINGLETON
return|;
block|}
DECL|class|ListCsvRecordConverter
specifier|private
specifier|static
specifier|final
class|class
name|ListCsvRecordConverter
implements|implements
name|CsvRecordConverter
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
DECL|field|SINGLETON
specifier|private
specifier|static
specifier|final
name|ListCsvRecordConverter
name|SINGLETON
init|=
operator|new
name|ListCsvRecordConverter
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|convertRecord (CSVRecord record)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|convertRecord
parameter_list|(
name|CSVRecord
name|record
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|record
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|record
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|record
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
comment|/**      * Returns a converter that transforms the CSV record into a map.      *      * @return converter that transforms the CSV record into a map      */
DECL|method|mapConverter ()
specifier|public
specifier|static
name|CsvRecordConverter
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|mapConverter
parameter_list|()
block|{
return|return
name|MapCsvRecordConverter
operator|.
name|SINGLETON
return|;
block|}
DECL|class|MapCsvRecordConverter
specifier|private
specifier|static
class|class
name|MapCsvRecordConverter
implements|implements
name|CsvRecordConverter
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
block|{
DECL|field|SINGLETON
specifier|private
specifier|static
specifier|final
name|MapCsvRecordConverter
name|SINGLETON
init|=
operator|new
name|MapCsvRecordConverter
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|convertRecord (CSVRecord record)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|convertRecord
parameter_list|(
name|CSVRecord
name|record
parameter_list|)
block|{
return|return
name|record
operator|.
name|toMap
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns a converter that transforms the CSV record into an ordered map.      *      * @return converter that transforms the CSV record into an ordered map      */
DECL|method|orderedMapConverter ()
specifier|public
specifier|static
name|CsvRecordConverter
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orderedMapConverter
parameter_list|()
block|{
return|return
name|OrderedMapCsvRecordConverter
operator|.
name|SINGLETON
return|;
block|}
DECL|class|OrderedMapCsvRecordConverter
specifier|private
specifier|static
class|class
name|OrderedMapCsvRecordConverter
implements|implements
name|CsvRecordConverter
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
block|{
DECL|field|SINGLETON
specifier|private
specifier|static
specifier|final
name|OrderedMapCsvRecordConverter
name|SINGLETON
init|=
operator|new
name|OrderedMapCsvRecordConverter
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertRecord (CSVRecord record)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|convertRecord
parameter_list|(
name|CSVRecord
name|record
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|answer
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// use reflection because CSVRecord does not return maps ordered
try|try
block|{
name|Field
name|field
init|=
name|record
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"mapping"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapping
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|record
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|mapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
name|int
name|col
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|record
operator|.
name|get
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// ignore
block|}
return|return
name|answer
return|;
block|}
block|}
block|}
end_class

end_unit

