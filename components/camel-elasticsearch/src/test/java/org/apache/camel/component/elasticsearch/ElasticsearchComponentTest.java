begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.elasticsearch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|ElasticsearchComponentTest
specifier|public
class|class
name|ElasticsearchComponentTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|BeforeClass
DECL|method|cleanupOnce ()
specifier|public
specifier|static
name|void
name|cleanupOnce
parameter_list|()
block|{
name|deleteDirectory
argument_list|(
literal|"target/data"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
comment|// let's speed up the tests using the same context
return|return
literal|true
return|;
block|}
comment|/**      * As we don't delete the {@code target/data} folder for<b>each</b> test      * below (otherwise they would run much slower), we need to make sure      * there's no side effect of the same used data through creating unique      * indexes.      */
DECL|method|createIndexedData (String... additionalPrefixes)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createIndexedData
parameter_list|(
name|String
modifier|...
name|additionalPrefixes
parameter_list|)
block|{
name|String
name|prefix
init|=
name|createPrefix
argument_list|()
decl_stmt|;
comment|// take over any potential prefixes we may have been asked for
if|if
condition|(
name|additionalPrefixes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|additionalPrefix
range|:
name|additionalPrefixes
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|additionalPrefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
name|prefix
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|key
init|=
name|prefix
operator|+
literal|"key"
decl_stmt|;
name|String
name|value
init|=
name|prefix
operator|+
literal|"value"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating indexed data using the key/value pair {} => {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|createPrefix ()
specifier|private
name|String
name|createPrefix
parameter_list|()
block|{
comment|// make use of the test method name to avoid collision
return|return
name|getTestMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"-"
return|;
block|}
annotation|@
name|Test
DECL|method|testIndex ()
specifier|public
name|void
name|testIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithReplication ()
specifier|public
name|void
name|testIndexWithReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:indexWithReplication"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithWriteConsistency ()
specifier|public
name|void
name|testIndexWithWriteConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:indexWithWriteConsistency"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBulkIndex ()
specifier|public
name|void
name|testBulkIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|documents
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|document1
init|=
name|createIndexedData
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|document2
init|=
name|createIndexedData
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|documents
operator|.
name|add
argument_list|(
name|document1
argument_list|)
expr_stmt|;
name|documents
operator|.
name|add
argument_list|(
name|document2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|indexIds
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:bulk_index"
argument_list|,
name|documents
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexIds should be set"
argument_list|,
name|indexIds
argument_list|)
expr_stmt|;
name|assertCollectionSize
argument_list|(
literal|"Indexed documents should match the size of documents"
argument_list|,
name|indexIds
argument_list|,
name|documents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
comment|//first, INDEX a value
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
comment|//now, verify GET succeeded
name|GetResponse
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:get"
argument_list|,
name|indexId
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response source should not be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
comment|//first, INDEX a value
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
comment|//now, verify GET succeeded
name|GetResponse
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:get"
argument_list|,
name|indexId
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response source should not be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
comment|//now, perform DELETE
name|DeleteResponse
name|deleteResponse
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:delete"
argument_list|,
name|indexId
argument_list|,
name|DeleteResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|deleteResponse
argument_list|)
expr_stmt|;
comment|//now, verify GET fails to find the indexed value
name|response
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:get"
argument_list|,
name|indexId
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"response source should be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearch ()
specifier|public
name|void
name|testSearch
parameter_list|()
throws|throws
name|Exception
block|{
comment|//first, INDEX a value
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|sendBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|)
expr_stmt|;
comment|//now, verify GET succeeded
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actualQuery
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|actualQuery
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"searchtest"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|match
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|match
operator|.
name|put
argument_list|(
literal|"match"
argument_list|,
name|actualQuery
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|query
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|query
operator|.
name|put
argument_list|(
literal|"query"
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:search"
argument_list|,
name|query
argument_list|,
name|SearchResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response hits should be == 1"
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithHeaders ()
specifier|public
name|void
name|testIndexWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithIDInHeader ()
specifier|public
name|void
name|testIndexWithIDInHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_ID
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"indexId should be equals to the provided id"
argument_list|,
literal|"123"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"need to setup the cluster IP for this test"
argument_list|)
DECL|method|indexWithIp ()
specifier|public
name|void
name|indexWithIp
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:indexWithIp"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"need to setup the cluster IP/Port for this test"
argument_list|)
DECL|method|indexWithIpAndPort ()
specifier|public
name|void
name|indexWithIpAndPort
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:indexWithIpAndPort"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"need to setup the cluster with multiple nodes for this test"
argument_list|)
DECL|method|indexWithTransportAddresses ()
specifier|public
name|void
name|indexWithTransportAddresses
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:indexWithTransportAddresses"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"need to setup the cluster with multiple nodes for this test"
argument_list|)
DECL|method|indexWithIpAndTransportAddresses ()
specifier|public
name|void
name|indexWithIpAndTransportAddresses
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
comment|//should ignore transport addresses configuration
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:indexWithIpAndTransportAddresses"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetWithHeaders ()
specifier|public
name|void
name|testGetWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
comment|//first, INDEX a value
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//now, verify GET
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_GET_BY_ID
argument_list|)
expr_stmt|;
name|GetResponse
name|response
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|indexId
argument_list|,
name|headers
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response source should not be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteWithHeaders ()
specifier|public
name|void
name|testDeleteWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
comment|//first, INDEX a value
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|createIndexedData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//now, verify GET
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_GET_BY_ID
argument_list|)
expr_stmt|;
name|GetResponse
name|response
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|indexId
argument_list|,
name|headers
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response source should not be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
comment|//now, perform DELETE
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_DELETE
argument_list|)
expr_stmt|;
name|DeleteResponse
name|deleteResponse
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|indexId
argument_list|,
name|headers
argument_list|,
name|DeleteResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|deleteResponse
argument_list|)
expr_stmt|;
comment|//now, verify GET fails to find the indexed value
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_GET_BY_ID
argument_list|)
expr_stmt|;
name|response
operator|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|indexId
argument_list|,
name|headers
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"response source should be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|indexRequestBody ()
specifier|public
name|void
name|indexRequestBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
name|createPrefix
argument_list|()
decl_stmt|;
comment|// given
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
name|prefix
operator|+
literal|"foo"
argument_list|,
name|prefix
operator|+
literal|"bar"
argument_list|,
name|prefix
operator|+
literal|"testId"
argument_list|)
decl_stmt|;
name|request
operator|.
name|source
argument_list|(
literal|"{\""
operator|+
name|prefix
operator|+
literal|"content\": \""
operator|+
name|prefix
operator|+
literal|"hello\"}"
argument_list|)
expr_stmt|;
comment|// when
name|String
name|documentId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
name|request
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|documentId
argument_list|,
name|equalTo
argument_list|(
name|prefix
operator|+
literal|"testId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRequestBody ()
specifier|public
name|void
name|getRequestBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
name|createPrefix
argument_list|()
decl_stmt|;
comment|// given
name|GetRequest
name|request
init|=
operator|new
name|GetRequest
argument_list|(
name|prefix
operator|+
literal|"foo"
argument_list|)
operator|.
name|type
argument_list|(
name|prefix
operator|+
literal|"bar"
argument_list|)
decl_stmt|;
comment|// when
name|String
name|documentId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
operator|new
name|IndexRequest
argument_list|(
name|prefix
operator|+
literal|"foo"
argument_list|,
name|prefix
operator|+
literal|"bar"
argument_list|,
name|prefix
operator|+
literal|"testId"
argument_list|)
operator|.
name|source
argument_list|(
literal|"{\""
operator|+
name|prefix
operator|+
literal|"content\": \""
operator|+
name|prefix
operator|+
literal|"hello\"}"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|GetResponse
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:get"
argument_list|,
name|request
operator|.
name|id
argument_list|(
name|documentId
argument_list|)
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|response
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prefix
operator|+
literal|"hello"
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
name|prefix
operator|+
literal|"content"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteRequestBody ()
specifier|public
name|void
name|deleteRequestBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
name|createPrefix
argument_list|()
decl_stmt|;
comment|// given
name|DeleteRequest
name|request
init|=
operator|new
name|DeleteRequest
argument_list|(
name|prefix
operator|+
literal|"foo"
argument_list|)
operator|.
name|type
argument_list|(
name|prefix
operator|+
literal|"bar"
argument_list|)
decl_stmt|;
comment|// when
name|String
name|documentId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
operator|new
name|IndexRequest
argument_list|(
literal|""
operator|+
name|prefix
operator|+
literal|"foo"
argument_list|,
literal|""
operator|+
name|prefix
operator|+
literal|"bar"
argument_list|,
literal|""
operator|+
name|prefix
operator|+
literal|"testId"
argument_list|)
operator|.
name|source
argument_list|(
literal|"{\""
operator|+
name|prefix
operator|+
literal|"content\": \""
operator|+
name|prefix
operator|+
literal|"hello\"}"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeleteResponse
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:delete"
argument_list|,
name|request
operator|.
name|id
argument_list|(
name|documentId
argument_list|)
argument_list|,
name|DeleteResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|response
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|documentId
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bulkIndexRequestBody ()
specifier|public
name|void
name|bulkIndexRequestBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
name|createPrefix
argument_list|()
decl_stmt|;
comment|// given
name|BulkRequest
name|request
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
name|prefix
operator|+
literal|"foo"
argument_list|,
name|prefix
operator|+
literal|"bar"
argument_list|,
name|prefix
operator|+
literal|"baz"
argument_list|)
operator|.
name|source
argument_list|(
literal|"{\""
operator|+
name|prefix
operator|+
literal|"content\": \""
operator|+
name|prefix
operator|+
literal|"hello\"}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// when
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|indexedDocumentIds
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:bulk_index"
argument_list|,
name|request
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|indexedDocumentIds
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexedDocumentIds
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexedDocumentIds
argument_list|,
name|hasItem
argument_list|(
name|prefix
operator|+
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bulkRequestBody ()
specifier|public
name|void
name|bulkRequestBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
name|createPrefix
argument_list|()
decl_stmt|;
comment|// given
name|BulkRequest
name|request
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
name|prefix
operator|+
literal|"foo"
argument_list|,
name|prefix
operator|+
literal|"bar"
argument_list|,
name|prefix
operator|+
literal|"baz"
argument_list|)
operator|.
name|source
argument_list|(
literal|"{\""
operator|+
name|prefix
operator|+
literal|"content\": \""
operator|+
name|prefix
operator|+
literal|"hello\"}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// when
name|BulkResponse
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:bulk"
argument_list|,
name|request
argument_list|,
name|BulkResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|response
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prefix
operator|+
literal|"baz"
argument_list|,
name|response
operator|.
name|getItems
argument_list|()
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:index"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=INDEX&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:indexWithReplication"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=INDEX&indexName=twitter&indexType=tweet&replicationType=SYNC"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:indexWithWriteConsistency"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=INDEX&indexName=twitter&indexType=tweet&consistencyLevel=ONE"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:get"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=GET_BY_ID&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:delete"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=DELETE&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:search"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=SEARCH&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bulk_index"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=BULK_INDEX&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bulk"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=BULK&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
comment|//from("direct:indexWithIp").to("elasticsearch://elasticsearch?operation=INDEX&indexName=twitter&indexType=tweet&ip=localhost");
comment|//from("direct:indexWithIpAndPort").to("elasticsearch://elasticsearch?operation=INDEX&indexName=twitter&indexType=tweet&ip=localhost&port=9300");
comment|//from("direct:indexWithTransportAddresses").to("elasticsearch://elasticsearch?operation=INDEX&indexName=twitter&indexType=tweet&transportAddresses=localhost:9300,localhost:9301");
comment|//from("direct:indexWithIpAndTransportAddresses").
comment|//to("elasticsearch://elasticsearch?operation=INDEX&indexName=twitter&indexType=tweet&ip=localhost&port=9300&transportAddresses=localhost:4444,localhost:5555");
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

