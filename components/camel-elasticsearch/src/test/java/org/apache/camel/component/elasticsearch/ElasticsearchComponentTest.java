begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.elasticsearch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ElasticsearchComponentTest
specifier|public
class|class
name|ElasticsearchComponentTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/data"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
comment|// let's speed up the tests using the same context
return|return
literal|true
return|;
block|}
annotation|@
name|Test
DECL|method|testIndex ()
specifier|public
name|void
name|testIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBulkIndex ()
specifier|public
name|void
name|testBulkIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|documents
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|document1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|document1
operator|.
name|put
argument_list|(
literal|"content1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|document2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|document2
operator|.
name|put
argument_list|(
literal|"content2"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|documents
operator|.
name|add
argument_list|(
name|document1
argument_list|)
expr_stmt|;
name|documents
operator|.
name|add
argument_list|(
name|document2
argument_list|)
expr_stmt|;
name|List
name|indexIds
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:bulk_index"
argument_list|,
name|documents
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexIds should be set"
argument_list|,
name|indexIds
argument_list|)
expr_stmt|;
name|assertCollectionSize
argument_list|(
literal|"Indexed documents should match the size of documents"
argument_list|,
name|indexIds
argument_list|,
name|documents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
comment|//first, INDEX a value
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
comment|//now, verify GET succeeded
name|GetResponse
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:get"
argument_list|,
name|indexId
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response source should not be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
comment|//first, INDEX a value
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:index"
argument_list|,
name|map
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
comment|//now, verify GET succeeded
name|GetResponse
name|response
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:get"
argument_list|,
name|indexId
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response source should not be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
comment|//now, perform DELETE
name|DeleteResponse
name|deleteResponse
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:delete"
argument_list|,
name|indexId
argument_list|,
name|DeleteResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|deleteResponse
argument_list|)
expr_stmt|;
comment|//now, verify GET fails to find the indexed value
name|response
operator|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:get"
argument_list|,
name|indexId
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"response source should be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithHeaders ()
specifier|public
name|void
name|testIndexWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithIDInHeader ()
specifier|public
name|void
name|testIndexWithIDInHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_ID
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"indexId should be equals to the provided id"
argument_list|,
literal|"123"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"need to setup the cluster IP for this test"
argument_list|)
DECL|method|indexWithIp ()
specifier|public
name|void
name|indexWithIp
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:indexWithIp"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"need to setup the cluster IP/Port for this test"
argument_list|)
DECL|method|indexWithIpAndPort ()
specifier|public
name|void
name|indexWithIpAndPort
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:indexWithIpAndPort"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indexId should be set"
argument_list|,
name|indexId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetWithHeaders ()
specifier|public
name|void
name|testGetWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
comment|//first, INDEX a value
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//now, verify GET
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_GET_BY_ID
argument_list|)
expr_stmt|;
name|GetResponse
name|response
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|indexId
argument_list|,
name|headers
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response source should not be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteWithHeaders ()
specifier|public
name|void
name|testDeleteWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
comment|//first, INDEX a value
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_INDEX
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_NAME
argument_list|,
literal|"twitter"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_INDEX_TYPE
argument_list|,
literal|"tweet"
argument_list|)
expr_stmt|;
name|String
name|indexId
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|map
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//now, verify GET
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_GET_BY_ID
argument_list|)
expr_stmt|;
name|GetResponse
name|response
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|indexId
argument_list|,
name|headers
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response source should not be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
comment|//now, perform DELETE
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_DELETE
argument_list|)
expr_stmt|;
name|DeleteResponse
name|deleteResponse
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|indexId
argument_list|,
name|headers
argument_list|,
name|DeleteResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|deleteResponse
argument_list|)
expr_stmt|;
comment|//now, verify GET fails to find the indexed value
name|headers
operator|.
name|put
argument_list|(
name|ElasticsearchConfiguration
operator|.
name|PARAM_OPERATION
argument_list|,
name|ElasticsearchConfiguration
operator|.
name|OPERATION_GET_BY_ID
argument_list|)
expr_stmt|;
name|response
operator|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
name|indexId
argument_list|,
name|headers
argument_list|,
name|GetResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"response should not be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"response source should be null"
argument_list|,
name|response
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:index"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=INDEX&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:get"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=GET_BY_ID&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:delete"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=DELETE&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bulk_index"
argument_list|)
operator|.
name|to
argument_list|(
literal|"elasticsearch://local?operation=BULK_INDEX&indexName=twitter&indexType=tweet"
argument_list|)
expr_stmt|;
comment|//from("direct:indexWithIp").to("elasticsearch://elasticsearch?operation=INDEX&indexName=twitter&indexType=tweet&ip=localhost");
comment|//from("direct:indexWithIpAndPort").to("elasticsearch://elasticsearch?operation=INDEX&indexName=twitter&indexType=tweet&ip=localhost&port=9300");
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

