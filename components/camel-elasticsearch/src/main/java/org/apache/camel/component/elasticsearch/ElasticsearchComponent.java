begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.elasticsearch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link ElasticsearchEndpoint}.  */
end_comment

begin_class
DECL|class|ElasticsearchComponent
specifier|public
class|class
name|ElasticsearchComponent
extends|extends
name|UriEndpointComponent
block|{
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
DECL|method|ElasticsearchComponent ()
specifier|public
name|ElasticsearchComponent
parameter_list|()
block|{
name|super
argument_list|(
name|ElasticsearchEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|ElasticsearchComponent (CamelContext context)
specifier|public
name|ElasticsearchComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|ElasticsearchEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|ElasticsearchConfiguration
name|config
init|=
operator|new
name|ElasticsearchConfiguration
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|ElasticsearchConstants
operator|.
name|LOCAL_NAME
operator|.
name|equals
argument_list|(
name|remaining
argument_list|)
condition|)
block|{
name|config
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setClusterName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|setLocal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|setClusterName
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getData
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setData
argument_list|(
name|config
operator|.
name|isLocal
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|isLocal
argument_list|()
operator|&&
operator|!
name|config
operator|.
name|getData
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid to use local node without data"
argument_list|)
throw|;
block|}
name|config
operator|.
name|setTransportAddressesList
argument_list|(
name|parseTransportAddresses
argument_list|(
name|config
operator|.
name|getTransportAddresses
argument_list|()
argument_list|,
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
operator|new
name|ElasticsearchEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|,
name|client
argument_list|)
decl_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|parseTransportAddresses (String ipsString, ElasticsearchConfiguration config)
specifier|private
name|List
argument_list|<
name|InetSocketTransportAddress
argument_list|>
name|parseTransportAddresses
parameter_list|(
name|String
name|ipsString
parameter_list|,
name|ElasticsearchConfiguration
name|config
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
name|ipsString
operator|==
literal|null
operator|||
name|ipsString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|addressesStr
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ipsString
operator|.
name|split
argument_list|(
name|ElasticsearchConstants
operator|.
name|TRANSPORT_ADDRESSES_SEPARATOR_REGEX
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InetSocketTransportAddress
argument_list|>
name|addressesTrAd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|addressesStr
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|address
range|:
name|addressesStr
control|)
block|{
name|String
index|[]
name|split
init|=
name|address
operator|.
name|split
argument_list|(
name|ElasticsearchConstants
operator|.
name|IP_PORT_SEPARATOR_REGEX
argument_list|)
decl_stmt|;
name|String
name|hostname
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|hostname
operator|=
name|split
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|Integer
name|port
init|=
name|split
operator|.
name|length
operator|>
literal|1
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
else|:
name|ElasticsearchConstants
operator|.
name|DEFAULT_PORT
decl_stmt|;
name|addressesTrAd
operator|.
name|add
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostname
argument_list|)
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addressesTrAd
return|;
block|}
DECL|method|getClient ()
specifier|public
name|Client
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
comment|/**      * To use an existing configured Elasticsearch client, instead of creating a client per endpoint.      */
DECL|method|setClient (Client client)
specifier|public
name|void
name|setClient
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
block|}
end_class

end_unit

