begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jetty8
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty8
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
operator|.
name|CamelHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
operator|.
name|JettyHttpComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jetty
operator|.
name|JettyHttpEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|AbstractConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_class
DECL|class|JettyHttpComponent8
specifier|public
class|class
name|JettyHttpComponent8
extends|extends
name|JettyHttpComponent
block|{
DECL|method|createCamelHttpClient (SslContextFactory sslContextFactory)
specifier|protected
name|CamelHttpClient
name|createCamelHttpClient
parameter_list|(
name|SslContextFactory
name|sslContextFactory
parameter_list|)
block|{
return|return
operator|new
name|CamelHttpClient8
argument_list|(
name|sslContextFactory
argument_list|)
return|;
block|}
DECL|method|createConnectorJettyInternal (Server server, JettyHttpEndpoint endpoint, SslContextFactory sslcf)
specifier|protected
name|AbstractConnector
name|createConnectorJettyInternal
parameter_list|(
name|Server
name|server
parameter_list|,
name|JettyHttpEndpoint
name|endpoint
parameter_list|,
name|SslContextFactory
name|sslcf
parameter_list|)
block|{
comment|//Jetty 8
name|AbstractConnector
name|result
init|=
literal|null
decl_stmt|;
name|String
name|hosto
init|=
name|endpoint
operator|.
name|getHttpUri
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|porto
init|=
name|endpoint
operator|.
name|getPort
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sslcf
operator|==
literal|null
operator|&&
operator|!
literal|"https"
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
operator|(
name|AbstractConnector
operator|)
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.nio.SelectChannelConnector"
argument_list|,
name|Server
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sslcf
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|(
name|AbstractConnector
operator|)
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.ssl.SslSelectChannelConnector"
argument_list|,
name|Server
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|AbstractConnector
operator|)
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.ssl.SslSelectChannelConnector"
argument_list|,
name|Server
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|SslContextFactory
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|sslcf
argument_list|)
expr_stmt|;
block|}
name|Server
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setSendServerVersion"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|server
argument_list|,
name|endpoint
operator|.
name|isSendServerVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Server
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setSendDateHeader"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|server
argument_list|,
name|endpoint
operator|.
name|isSendDateHeader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|requestBufferSize
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setRequestBufferSize"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|requestBufferSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|requestHeaderSize
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setRequestHeaderSize"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|requestHeaderSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|responseBufferSize
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setResponseBufferSize"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|responseBufferSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|responseHeaderSize
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setResponseBufferSize"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|responseHeaderSize
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setPort"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|porto
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosto
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|hosto
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
try|try
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setPort"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|porto
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosto
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|hosto
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSocketConnectorProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"https"
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
comment|// must copy the map otherwise it will be deleted
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|getSocketConnectorProperties
argument_list|()
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|result
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There are "
operator|+
name|properties
operator|.
name|size
argument_list|()
operator|+
literal|" parameters that couldn't be set on the SocketConnector."
operator|+
literal|" Check the uri if the parameters are spelt correctly and that they are properties of the SelectChannelConnector."
operator|+
literal|" Unknown parameters=["
operator|+
name|properties
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|getSslSocketConnectorProperties
argument_list|()
operator|!=
literal|null
operator|&&
literal|"https"
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
comment|// must copy the map otherwise it will be deleted
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|getSslSocketConnectorProperties
argument_list|()
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|result
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There are "
operator|+
name|properties
operator|.
name|size
argument_list|()
operator|+
literal|" parameters that couldn't be set on the SocketConnector."
operator|+
literal|" Check the uri if the parameters are spelt correctly and that they are properties of the SelectChannelConnector."
operator|+
literal|" Unknown parameters=["
operator|+
name|properties
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (URI endpointUri, URI httpUri)
specifier|protected
name|JettyHttpEndpoint
name|createEndpoint
parameter_list|(
name|URI
name|endpointUri
parameter_list|,
name|URI
name|httpUri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|JettyHttpEndpoint8
argument_list|(
name|this
argument_list|,
name|endpointUri
operator|.
name|toString
argument_list|()
argument_list|,
name|httpUri
argument_list|)
return|;
block|}
block|}
end_class

end_unit

