begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_comment
comment|/**  * Special {@link java.lang.reflect.InvocationHandler} for methods that have only one parameter. This  * parameter is directly sent to as the body of the message. The idea is to use  * that as a very open message format especially when combined with e.g. JAXB  * serialization.  */
end_comment

begin_class
DECL|class|PojoMessageInvocationHandler
specifier|public
class|class
name|PojoMessageInvocationHandler
extends|extends
name|AbstractCamelInvocationHandler
block|{
DECL|method|PojoMessageInvocationHandler (Endpoint endpoint, Producer producer)
specifier|public
name|PojoMessageInvocationHandler
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Producer
name|producer
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|producer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doInvokeProxy (Object proxy, Method method, Object[] args)
specifier|public
name|Object
name|doInvokeProxy
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|int
name|argsLength
init|=
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|args
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|argsLength
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error creating proxy for %s.%s Number of arguments must be 1 but is %d"
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|argsLength
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|ExchangePattern
name|pattern
init|=
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|Void
operator|.
name|TYPE
condition|?
name|ExchangePattern
operator|.
name|InOut
else|:
name|ExchangePattern
operator|.
name|InOnly
decl_stmt|;
return|return
name|invokeWithBody
argument_list|(
name|method
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|,
name|pattern
argument_list|)
return|;
block|}
block|}
end_class

end_unit

