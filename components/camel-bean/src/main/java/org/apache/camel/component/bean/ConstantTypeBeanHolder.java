begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A constant (singleton) bean implementation of {@link org.apache.camel.component.bean.BeanTypeHolder}  */
end_comment

begin_class
DECL|class|ConstantTypeBeanHolder
specifier|public
class|class
name|ConstantTypeBeanHolder
implements|implements
name|BeanTypeHolder
block|{
DECL|field|type
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
DECL|field|beanInfo
specifier|private
specifier|final
name|BeanInfo
name|beanInfo
decl_stmt|;
DECL|method|ConstantTypeBeanHolder (Class<?> type, BeanInfo beanInfo)
specifier|public
name|ConstantTypeBeanHolder
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|BeanInfo
name|beanInfo
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|beanInfo
argument_list|,
literal|"beanInfo"
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|beanInfo
operator|=
name|beanInfo
expr_stmt|;
block|}
DECL|method|ConstantTypeBeanHolder (Class<?> type, CamelContext context)
specifier|public
name|ConstantTypeBeanHolder
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
operator|new
name|BeanInfo
argument_list|(
name|context
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ConstantTypeBeanHolder (Class<?> type, CamelContext context, ParameterMappingStrategy parameterMappingStrategy)
specifier|public
name|ConstantTypeBeanHolder
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|CamelContext
name|context
parameter_list|,
name|ParameterMappingStrategy
name|parameterMappingStrategy
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
operator|new
name|BeanInfo
argument_list|(
name|context
argument_list|,
name|type
argument_list|,
name|parameterMappingStrategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a cached and constant {@link org.apache.camel.component.bean.BeanHolder} from this holder.      *      * @return a new {@link org.apache.camel.component.bean.BeanHolder} that has cached the lookup of the bean.      */
DECL|method|createCacheHolder ()
specifier|public
name|ConstantBeanHolder
name|createCacheHolder
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|bean
init|=
name|getBean
argument_list|()
decl_stmt|;
return|return
operator|new
name|ConstantBeanHolder
argument_list|(
name|bean
argument_list|,
name|beanInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getBean ()
specifier|public
name|Object
name|getBean
parameter_list|()
block|{
comment|// only create a bean if we have constructors
if|if
condition|(
name|beanInfo
operator|.
name|hasPublicConstructors
argument_list|()
condition|)
block|{
return|return
name|getBeanInfo
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getProcessor ()
specifier|public
name|Processor
name|getProcessor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|supportProcessor ()
specifier|public
name|boolean
name|supportProcessor
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getBeanInfo ()
specifier|public
name|BeanInfo
name|getBeanInfo
parameter_list|()
block|{
return|return
name|beanInfo
return|;
block|}
DECL|method|getBeanInfo (Object bean)
specifier|public
name|BeanInfo
name|getBeanInfo
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

