begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AccessibleObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AnnotatedElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionStage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExpressionEvaluationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExpressionAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringQuoteHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|asString
import|;
end_import

begin_comment
comment|/**  * Information about a method to be used for invocation.  */
end_comment

begin_class
DECL|class|MethodInfo
specifier|public
class|class
name|MethodInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|type
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
DECL|field|method
specifier|private
name|Method
name|method
decl_stmt|;
DECL|field|parameters
specifier|private
specifier|final
name|List
argument_list|<
name|ParameterInfo
argument_list|>
name|parameters
decl_stmt|;
DECL|field|bodyParameters
specifier|private
specifier|final
name|List
argument_list|<
name|ParameterInfo
argument_list|>
name|bodyParameters
decl_stmt|;
DECL|field|hasCustomAnnotation
specifier|private
specifier|final
name|boolean
name|hasCustomAnnotation
decl_stmt|;
DECL|field|hasHandlerAnnotation
specifier|private
specifier|final
name|boolean
name|hasHandlerAnnotation
decl_stmt|;
DECL|field|parametersExpression
specifier|private
name|Expression
name|parametersExpression
decl_stmt|;
DECL|field|pattern
specifier|private
name|ExchangePattern
name|pattern
init|=
name|ExchangePattern
operator|.
name|InOut
decl_stmt|;
DECL|field|recipientList
specifier|private
name|AsyncProcessor
name|recipientList
decl_stmt|;
DECL|field|routingSlip
specifier|private
name|AsyncProcessor
name|routingSlip
decl_stmt|;
DECL|field|dynamicRouter
specifier|private
name|AsyncProcessor
name|dynamicRouter
decl_stmt|;
comment|/**      * Adapter to invoke the method which has been annotated with the @DynamicRouter      */
DECL|class|DynamicRouterExpression
specifier|private
specifier|final
class|class
name|DynamicRouterExpression
extends|extends
name|ExpressionAdapter
block|{
DECL|field|pojo
specifier|private
specifier|final
name|Object
name|pojo
decl_stmt|;
DECL|method|DynamicRouterExpression (Object pojo)
specifier|private
name|DynamicRouterExpression
parameter_list|(
name|Object
name|pojo
parameter_list|)
block|{
name|this
operator|.
name|pojo
operator|=
name|pojo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// evaluate arguments on each invocation as the parameters can have changed/updated since last invocation
specifier|final
name|Object
index|[]
name|arguments
init|=
name|parametersExpression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|invoke
argument_list|(
name|method
argument_list|,
name|pojo
argument_list|,
name|arguments
argument_list|,
name|exchange
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DynamicRouter[invoking: "
operator|+
name|method
operator|+
literal|" on bean: "
operator|+
name|pojo
operator|+
literal|"]"
return|;
block|}
block|}
DECL|method|MethodInfo (CamelContext camelContext, Class<?> type, Method method, List<ParameterInfo> parameters, List<ParameterInfo> bodyParameters, boolean hasCustomAnnotation, boolean hasHandlerAnnotation)
specifier|public
name|MethodInfo
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Method
name|method
parameter_list|,
name|List
argument_list|<
name|ParameterInfo
argument_list|>
name|parameters
parameter_list|,
name|List
argument_list|<
name|ParameterInfo
argument_list|>
name|bodyParameters
parameter_list|,
name|boolean
name|hasCustomAnnotation
parameter_list|,
name|boolean
name|hasHandlerAnnotation
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|bodyParameters
operator|=
name|bodyParameters
expr_stmt|;
name|this
operator|.
name|hasCustomAnnotation
operator|=
name|hasCustomAnnotation
expr_stmt|;
name|this
operator|.
name|hasHandlerAnnotation
operator|=
name|hasHandlerAnnotation
expr_stmt|;
name|this
operator|.
name|parametersExpression
operator|=
name|createParametersExpression
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Annotation
argument_list|>
name|collectedMethodAnnotation
init|=
name|collectMethodAnnotations
argument_list|(
name|type
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|Pattern
name|oneway
init|=
name|findOneWayAnnotation
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|oneway
operator|!=
literal|null
condition|)
block|{
name|pattern
operator|=
name|oneway
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutingSlip
name|routingSlipAnnotation
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutingSlip
operator|)
name|collectedMethodAnnotation
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutingSlip
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|routingSlipAnnotation
operator|!=
literal|null
condition|)
block|{
name|routingSlip
operator|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getAnnotationBasedProcessorFactory
argument_list|()
operator|.
name|createRoutingSlip
argument_list|(
name|camelContext
argument_list|,
name|routingSlipAnnotation
argument_list|)
expr_stmt|;
comment|// add created routingSlip as a service so we have its lifecycle managed
try|try
block|{
name|camelContext
operator|.
name|addService
argument_list|(
name|routingSlip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|DynamicRouter
name|dynamicRouterAnnotation
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|DynamicRouter
operator|)
name|collectedMethodAnnotation
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|DynamicRouter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dynamicRouterAnnotation
operator|!=
literal|null
condition|)
block|{
name|dynamicRouter
operator|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getAnnotationBasedProcessorFactory
argument_list|()
operator|.
name|createDynamicRouter
argument_list|(
name|camelContext
argument_list|,
name|dynamicRouterAnnotation
argument_list|)
expr_stmt|;
comment|// add created dynamicRouter as a service so we have its lifecycle managed
try|try
block|{
name|camelContext
operator|.
name|addService
argument_list|(
name|dynamicRouter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RecipientList
name|recipientListAnnotation
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RecipientList
operator|)
name|collectedMethodAnnotation
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RecipientList
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|recipientListAnnotation
operator|!=
literal|null
condition|)
block|{
name|recipientList
operator|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getAnnotationBasedProcessorFactory
argument_list|()
operator|.
name|createRecipientList
argument_list|(
name|camelContext
argument_list|,
name|recipientListAnnotation
argument_list|)
expr_stmt|;
comment|// add created recipientList as a service so we have its lifecycle managed
try|try
block|{
name|camelContext
operator|.
name|addService
argument_list|(
name|recipientList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|collectMethodAnnotations (Class<?> c, Method method)
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Annotation
argument_list|>
name|collectMethodAnnotations
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Annotation
argument_list|>
name|annotations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectMethodAnnotations
argument_list|(
name|c
argument_list|,
name|method
argument_list|,
name|annotations
argument_list|)
expr_stmt|;
return|return
name|annotations
return|;
block|}
DECL|method|collectMethodAnnotations (Class<?> c, Method method, Map<Class<?>, Annotation> annotations)
specifier|private
name|void
name|collectMethodAnnotations
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Method
name|method
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Annotation
argument_list|>
name|annotations
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|i
range|:
name|c
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|collectMethodAnnotations
argument_list|(
name|i
argument_list|,
name|method
argument_list|,
name|annotations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|c
operator|.
name|isInterface
argument_list|()
operator|&&
name|c
operator|.
name|getSuperclass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|collectMethodAnnotations
argument_list|(
name|c
operator|.
name|getSuperclass
argument_list|()
argument_list|,
name|method
argument_list|,
name|annotations
argument_list|)
expr_stmt|;
block|}
comment|// make sure the sub class can override the definition
try|try
block|{
name|Annotation
index|[]
name|ma
init|=
name|c
operator|.
name|getDeclaredMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
for|for
control|(
name|Annotation
name|a
range|:
name|ma
control|)
block|{
name|annotations
operator|.
name|put
argument_list|(
name|a
operator|.
name|annotationType
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
decl||
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// do nothing here
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|method
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createMethodInvocation (final Object pojo, boolean hasParameters, final Exchange exchange)
specifier|public
name|MethodInvocation
name|createMethodInvocation
parameter_list|(
specifier|final
name|Object
name|pojo
parameter_list|,
name|boolean
name|hasParameters
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Object
index|[]
name|arguments
decl_stmt|;
if|if
condition|(
name|hasParameters
condition|)
block|{
name|arguments
operator|=
name|parametersExpression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arguments
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|MethodInvocation
argument_list|()
block|{
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
specifier|public
name|Object
index|[]
name|getArguments
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
specifier|public
name|boolean
name|proceed
parameter_list|(
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
comment|// reset cached streams so they can be read again
name|MessageHelper
operator|.
name|resetStreamCache
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|doProceed
argument_list|(
name|callback
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|boolean
name|doProceed
parameter_list|(
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
comment|// dynamic router should be invoked beforehand
if|if
condition|(
name|dynamicRouter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ServiceHelper
operator|.
name|isStarted
argument_list|(
name|dynamicRouter
argument_list|)
condition|)
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|dynamicRouter
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Maybe use a new constant than EVALUATE_EXPRESSION_RESULT
comment|// use a expression which invokes the method to be used by dynamic router
name|Expression
name|expression
init|=
operator|new
name|DynamicRouterExpression
argument_list|(
name|pojo
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EVALUATE_EXPRESSION_RESULT
argument_list|,
name|expression
argument_list|)
expr_stmt|;
return|return
name|dynamicRouter
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
comment|// invoke pojo
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|">>>> invoking: {} on bean: {} with arguments: {} for exchange: {}"
argument_list|,
name|method
argument_list|,
name|pojo
argument_list|,
name|asString
argument_list|(
name|arguments
argument_list|)
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
name|Object
name|result
init|=
name|invoke
argument_list|(
name|method
argument_list|,
name|pojo
argument_list|,
name|arguments
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
comment|// the method may be a closure or chained method returning a callable which should be called
if|if
condition|(
name|result
operator|instanceof
name|Callable
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Method returned Callback which will be called: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Object
name|callableResult
init|=
operator|(
operator|(
name|Callable
operator|)
name|result
operator|)
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|callableResult
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|callableResult
expr_stmt|;
block|}
else|else
block|{
comment|// if callable returned null we should not change the body
name|result
operator|=
name|Void
operator|.
name|TYPE
expr_stmt|;
block|}
block|}
if|if
condition|(
name|recipientList
operator|!=
literal|null
condition|)
block|{
comment|// ensure its started
if|if
condition|(
operator|!
name|ServiceHelper
operator|.
name|isStarted
argument_list|(
name|recipientList
argument_list|)
condition|)
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|recipientList
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EVALUATE_EXPRESSION_RESULT
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|recipientList
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
if|if
condition|(
name|routingSlip
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ServiceHelper
operator|.
name|isStarted
argument_list|(
name|routingSlip
argument_list|)
condition|)
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|routingSlip
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EVALUATE_EXPRESSION_RESULT
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|routingSlip
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
comment|//If it's Java 8 async result
if|if
condition|(
name|CompletionStage
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|getMethod
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|CompletionStage
argument_list|<
name|?
argument_list|>
name|completionStage
init|=
operator|(
name|CompletionStage
argument_list|<
name|?
argument_list|>
operator|)
name|result
decl_stmt|;
name|completionStage
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|resultObject
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resultObject
operator|!=
literal|null
condition|)
block|{
name|fillResult
argument_list|(
name|exchange
argument_list|,
name|resultObject
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// if the method returns something then set the value returned on the Exchange
if|if
condition|(
operator|!
name|getMethod
argument_list|()
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|Void
operator|.
name|TYPE
argument_list|)
operator|&&
name|result
operator|!=
name|Void
operator|.
name|TYPE
condition|)
block|{
name|fillResult
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|// we did not use any of the eips, but just invoked the bean
comment|// so notify the callback we are done synchronously
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|Object
name|getThis
parameter_list|()
block|{
return|return
name|pojo
return|;
block|}
specifier|public
name|AccessibleObject
name|getStaticPart
parameter_list|()
block|{
return|return
name|method
return|;
block|}
block|}
return|;
block|}
DECL|method|fillResult (Exchange exchange, Object result)
specifier|private
name|void
name|fillResult
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Setting bean invocation result : {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// the bean component forces OUT if the MEP is OUT capable
name|boolean
name|out
init|=
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
operator|||
name|exchange
operator|.
name|hasOut
argument_list|()
decl_stmt|;
name|Message
name|old
decl_stmt|;
if|if
condition|(
name|out
condition|)
block|{
name|old
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
expr_stmt|;
comment|// propagate headers
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|old
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
comment|// create a new message container so we do not drag specialized message objects along
comment|// but that is only needed if the old message is a specialized message
name|boolean
name|copyNeeded
init|=
operator|!
operator|(
name|old
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|DefaultMessage
operator|.
name|class
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|copyNeeded
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|DefaultMessage
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|copyFromWithNewBody
argument_list|(
name|old
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// replace message on exchange
name|ExchangeHelper
operator|.
name|replaceMessage
argument_list|(
name|exchange
argument_list|,
name|msg
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no copy needed so set replace value directly
name|old
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getMethod ()
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
comment|/**      * Returns the {@link org.apache.camel.ExchangePattern} that should be used when invoking this method. This value      * defaults to {@link org.apache.camel.ExchangePattern#InOut} unless some {@link org.apache.camel.Pattern} annotation is used      * to override the message exchange pattern.      *      * @return the exchange pattern to use for invoking this method.      */
DECL|method|getPattern ()
specifier|public
name|ExchangePattern
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
DECL|method|getParametersExpression ()
specifier|public
name|Expression
name|getParametersExpression
parameter_list|()
block|{
return|return
name|parametersExpression
return|;
block|}
DECL|method|getBodyParameters ()
specifier|public
name|List
argument_list|<
name|ParameterInfo
argument_list|>
name|getBodyParameters
parameter_list|()
block|{
return|return
name|bodyParameters
return|;
block|}
DECL|method|getBodyParameterType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getBodyParameterType
parameter_list|()
block|{
if|if
condition|(
name|bodyParameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ParameterInfo
name|parameterInfo
init|=
name|bodyParameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|parameterInfo
operator|.
name|getType
argument_list|()
return|;
block|}
DECL|method|bodyParameterMatches (Class<?> bodyType)
specifier|public
name|boolean
name|bodyParameterMatches
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|bodyType
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|actualType
init|=
name|getBodyParameterType
argument_list|()
decl_stmt|;
return|return
name|actualType
operator|!=
literal|null
operator|&&
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isAssignableFrom
argument_list|(
name|bodyType
argument_list|,
name|actualType
argument_list|)
return|;
block|}
DECL|method|getParameters ()
specifier|public
name|List
argument_list|<
name|ParameterInfo
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
DECL|method|hasBodyParameter ()
specifier|public
name|boolean
name|hasBodyParameter
parameter_list|()
block|{
return|return
operator|!
name|bodyParameters
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|hasCustomAnnotation ()
specifier|public
name|boolean
name|hasCustomAnnotation
parameter_list|()
block|{
return|return
name|hasCustomAnnotation
return|;
block|}
DECL|method|hasHandlerAnnotation ()
specifier|public
name|boolean
name|hasHandlerAnnotation
parameter_list|()
block|{
return|return
name|hasHandlerAnnotation
return|;
block|}
DECL|method|hasParameters ()
specifier|public
name|boolean
name|hasParameters
parameter_list|()
block|{
return|return
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|isReturnTypeVoid ()
specifier|public
name|boolean
name|isReturnTypeVoid
parameter_list|()
block|{
return|return
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"void"
argument_list|)
return|;
block|}
DECL|method|isStaticMethod ()
specifier|public
name|boolean
name|isStaticMethod
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns true if this method is covariant with the specified method      * (this method may above or below the specified method in the class hierarchy)      */
DECL|method|isCovariantWith (MethodInfo method)
specifier|public
name|boolean
name|isCovariantWith
parameter_list|(
name|MethodInfo
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|(
name|method
operator|.
name|getMethod
argument_list|()
operator|.
name|getReturnType
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getMethod
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|||
name|this
operator|.
name|getMethod
argument_list|()
operator|.
name|getReturnType
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|)
operator|&&
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
argument_list|,
name|this
operator|.
name|getMethod
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|invoke (Method mth, Object pojo, Object[] arguments, Exchange exchange)
specifier|protected
name|Object
name|invoke
parameter_list|(
name|Method
name|mth
parameter_list|,
name|Object
name|pojo
parameter_list|,
name|Object
index|[]
name|arguments
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|InvocationTargetException
block|{
try|try
block|{
return|return
name|ObjectHelper
operator|.
name|invokeMethodSafe
argument_list|(
name|mth
argument_list|,
name|pojo
argument_list|,
name|arguments
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"IllegalAccessException occurred invoking method: "
operator|+
name|mth
operator|+
literal|" using arguments: "
operator|+
name|asList
argument_list|(
name|arguments
argument_list|)
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"IllegalArgumentException occurred invoking method: "
operator|+
name|mth
operator|+
literal|" using arguments: "
operator|+
name|asList
argument_list|(
name|arguments
argument_list|)
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createParameterExpressions ()
specifier|protected
name|Expression
index|[]
name|createParameterExpressions
parameter_list|()
block|{
specifier|final
name|int
name|size
init|=
name|parameters
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating parameters expression for {} parameters"
argument_list|,
name|size
argument_list|)
expr_stmt|;
specifier|final
name|Expression
index|[]
name|expressions
init|=
operator|new
name|Expression
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|parameterExpression
init|=
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|expressions
index|[
name|i
index|]
operator|=
name|parameterExpression
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parameter #{} has expression: {}"
argument_list|,
name|i
argument_list|,
name|parameterExpression
argument_list|)
expr_stmt|;
block|}
return|return
name|expressions
return|;
block|}
DECL|method|createParametersExpression ()
specifier|protected
name|Expression
name|createParametersExpression
parameter_list|()
block|{
return|return
operator|new
name|ParameterExpression
argument_list|(
name|createParameterExpressions
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Finds the oneway annotation in priority order; look for method level annotations first, then the class level annotations,      * then super class annotations then interface annotations      *      * @param method the method on which to search      * @return the first matching annotation or none if it is not available      */
DECL|method|findOneWayAnnotation (Method method)
specifier|protected
name|Pattern
name|findOneWayAnnotation
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|Pattern
name|answer
init|=
name|getPatternAnnotation
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|method
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
comment|// create the search order of types to scan
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|typesToSearch
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addTypeAndSuperTypes
argument_list|(
name|type
argument_list|,
name|typesToSearch
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
init|=
name|type
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|anInterface
range|:
name|interfaces
control|)
block|{
name|addTypeAndSuperTypes
argument_list|(
name|anInterface
argument_list|,
name|typesToSearch
argument_list|)
expr_stmt|;
block|}
comment|// now let's scan for a type which the current declared class overloads
name|answer
operator|=
name|findOneWayAnnotationOnMethod
argument_list|(
name|typesToSearch
argument_list|,
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|findOneWayAnnotation
argument_list|(
name|typesToSearch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Returns the pattern annotation on the given annotated element; either as a direct annotation or      * on an annotation which is also annotated      *      * @param annotatedElement the element to look for the annotation      * @return the first matching annotation or null if none could be found      */
DECL|method|getPatternAnnotation (AnnotatedElement annotatedElement)
specifier|protected
name|Pattern
name|getPatternAnnotation
parameter_list|(
name|AnnotatedElement
name|annotatedElement
parameter_list|)
block|{
return|return
name|getPatternAnnotation
argument_list|(
name|annotatedElement
argument_list|,
literal|2
argument_list|)
return|;
block|}
comment|/**      * Returns the pattern annotation on the given annotated element; either as a direct annotation or      * on an annotation which is also annotated      *      * @param annotatedElement the element to look for the annotation      * @param depth the current depth      * @return the first matching annotation or null if none could be found      */
DECL|method|getPatternAnnotation (AnnotatedElement annotatedElement, int depth)
specifier|protected
name|Pattern
name|getPatternAnnotation
parameter_list|(
name|AnnotatedElement
name|annotatedElement
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|Pattern
name|answer
init|=
name|annotatedElement
operator|.
name|getAnnotation
argument_list|(
name|Pattern
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|nextDepth
init|=
name|depth
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|nextDepth
operator|>
literal|0
condition|)
block|{
comment|// look at all the annotations to see if any of those are annotated
name|Annotation
index|[]
name|annotations
init|=
name|annotatedElement
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
for|for
control|(
name|Annotation
name|annotation
range|:
name|annotations
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
init|=
name|annotation
operator|.
name|annotationType
argument_list|()
decl_stmt|;
if|if
condition|(
name|annotation
operator|instanceof
name|Pattern
operator|||
name|annotationType
operator|.
name|equals
argument_list|(
name|annotatedElement
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|Pattern
name|another
init|=
name|getPatternAnnotation
argument_list|(
name|annotationType
argument_list|,
name|nextDepth
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|another
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Duplicate pattern annotation: {} found on annotation: {} which will be ignored"
argument_list|,
name|another
argument_list|,
name|annotation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Adds the current class and all of its base classes (apart from {@link Object} to the given list      */
DECL|method|addTypeAndSuperTypes (Class<?> type, List<Class<?>> result)
specifier|protected
name|void
name|addTypeAndSuperTypes
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
init|=
name|type
init|;
name|t
operator|!=
literal|null
operator|&&
name|t
operator|!=
name|Object
operator|.
name|class
condition|;
name|t
operator|=
name|t
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Finds the first annotation on the base methods defined in the list of classes      */
DECL|method|findOneWayAnnotationOnMethod (List<Class<?>> classes, Method method)
specifier|protected
name|Pattern
name|findOneWayAnnotationOnMethod
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|classes
control|)
block|{
try|try
block|{
name|Method
name|definedMethod
init|=
name|type
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
name|Pattern
name|answer
init|=
name|getPatternAnnotation
argument_list|(
name|definedMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Finds the first annotation on the given list of classes      */
DECL|method|findOneWayAnnotation (List<Class<?>> classes)
specifier|protected
name|Pattern
name|findOneWayAnnotation
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|classes
control|)
block|{
name|Pattern
name|answer
init|=
name|getPatternAnnotation
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|hasExceptionParameter ()
specifier|protected
name|boolean
name|hasExceptionParameter
parameter_list|()
block|{
for|for
control|(
name|ParameterInfo
name|parameter
range|:
name|parameters
control|)
block|{
if|if
condition|(
name|Exception
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Expression to evaluate the bean parameter parameters and provide the correct values when the method is invoked.      */
DECL|class|ParameterExpression
specifier|private
specifier|final
class|class
name|ParameterExpression
implements|implements
name|Expression
block|{
DECL|field|expressions
specifier|private
specifier|final
name|Expression
index|[]
name|expressions
decl_stmt|;
DECL|method|ParameterExpression (Expression[] expressions)
name|ParameterExpression
parameter_list|(
name|Expression
index|[]
name|expressions
parameter_list|)
block|{
name|this
operator|.
name|expressions
operator|=
name|expressions
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|evaluate (Exchange exchange, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
comment|// if there was an explicit method name to invoke, then we should support using
comment|// any provided parameter values in the method name
name|String
name|methodName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|BEAN_METHOD_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the parameter values is between the parenthesis
name|String
name|methodParameters
init|=
name|StringHelper
operator|.
name|betweenOuterPair
argument_list|(
name|methodName
argument_list|,
literal|'('
argument_list|,
literal|')'
argument_list|)
decl_stmt|;
comment|// use an iterator to walk the parameter values
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methodParameters
operator|!=
literal|null
condition|)
block|{
comment|// split the parameters safely separated by comma, but beware that we can have
comment|// quoted parameters which contains comma as well, so do a safe quote split
name|String
index|[]
name|parameters
init|=
name|StringQuoteHelper
operator|.
name|splitSafeQuote
argument_list|(
name|methodParameters
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|parameters
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// remove headers as they should not be propagated
comment|// we need to do this before the expressions gets evaluated as it may contain
comment|// a @Bean expression which would by mistake read these headers. So the headers
comment|// must be removed at this point of time
if|if
condition|(
name|methodName
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|BEAN_METHOD_NAME
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|answer
init|=
name|evaluateParameterExpressions
argument_list|(
name|exchange
argument_list|,
name|body
argument_list|,
name|it
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|answer
return|;
block|}
comment|/**          * Evaluates all the parameter expressions          */
DECL|method|evaluateParameterExpressions (Exchange exchange, Object body, Iterator<?> it)
specifier|private
name|Object
index|[]
name|evaluateParameterExpressions
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|body
parameter_list|,
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
parameter_list|)
block|{
name|Object
index|[]
name|answer
init|=
operator|new
name|Object
index|[
name|expressions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|body
operator|instanceof
name|StreamCache
condition|)
block|{
comment|// need to reset stream cache for each expression as you may access the message body in multiple parameters
operator|(
operator|(
name|StreamCache
operator|)
name|body
operator|)
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// grab the parameter value for the given index
name|Object
name|parameterValue
init|=
name|it
operator|!=
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|?
name|it
operator|.
name|next
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// and the expected parameter type
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// the value for the parameter to use
name|Object
name|value
init|=
literal|null
decl_stmt|;
comment|// prefer to use parameter value if given, as they override any bean parameter binding
comment|// we should skip * as its a type placeholder to indicate any type
if|if
condition|(
name|parameterValue
operator|!=
literal|null
operator|&&
operator|!
name|parameterValue
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// evaluate the parameter value binding
name|value
operator|=
name|evaluateParameterValue
argument_list|(
name|exchange
argument_list|,
name|i
argument_list|,
name|parameterValue
argument_list|,
name|parameterType
argument_list|)
expr_stmt|;
block|}
comment|// use bean parameter binding, if still no value
name|Expression
name|expression
init|=
name|expressions
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|expression
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|evaluateParameterBinding
argument_list|(
name|exchange
argument_list|,
name|expression
argument_list|,
name|i
argument_list|,
name|parameterType
argument_list|)
expr_stmt|;
block|}
comment|// remember the value to use
if|if
condition|(
name|value
operator|!=
name|Void
operator|.
name|TYPE
condition|)
block|{
name|answer
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**          * Evaluate using parameter values where the values can be provided in the method name syntax.          *<p/>          * This methods returns accordingly:          *<ul>          *<li><tt>null</tt> - if not a parameter value</li>          *<li><tt>Void.TYPE</tt> - if an explicit null, forcing Camel to pass in<tt>null</tt> for that given parameter</li>          *<li>a non<tt>null</tt> value - if the parameter was a parameter value, and to be used</li>          *</ul>          *          * @since 2.9          */
DECL|method|evaluateParameterValue (Exchange exchange, int index, Object parameterValue, Class<?> parameterType)
specifier|private
name|Object
name|evaluateParameterValue
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|parameterValue
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|)
block|{
name|Object
name|answer
init|=
literal|null
decl_stmt|;
comment|// convert the parameter value to a String
name|String
name|exp
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|parameterValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
comment|// check if its a valid parameter value
name|boolean
name|valid
init|=
name|BeanHelper
operator|.
name|isValidParameterValue
argument_list|(
name|exp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|valid
condition|)
block|{
comment|// it may be a parameter type instead, and if so, then we should return null,
comment|// as this method is only for evaluating parameter values
name|Boolean
name|isClass
init|=
name|BeanHelper
operator|.
name|isAssignableToExpectedType
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|exp
argument_list|,
name|parameterType
argument_list|)
decl_stmt|;
comment|// the method will return a non null value if exp is a class
if|if
condition|(
name|isClass
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// use simple language to evaluate the expression, as it may use the simple language to refer to message body, headers etc.
name|Expression
name|expression
init|=
literal|null
decl_stmt|;
try|try
block|{
name|expression
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|createExpression
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|parameterValue
operator|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// use "null" to indicate the expression returned a null value which is a valid response we need to honor
if|if
condition|(
name|parameterValue
operator|==
literal|null
condition|)
block|{
name|parameterValue
operator|=
literal|"null"
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExpressionEvaluationException
argument_list|(
name|expression
argument_list|,
literal|"Cannot create/evaluate simple expression: "
operator|+
name|exp
operator|+
literal|" to be bound to parameter at index: "
operator|+
name|index
operator|+
literal|" on method: "
operator|+
name|getMethod
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// special for explicit null parameter values (as end users can explicit indicate they want null as parameter)
comment|// see method javadoc for details
if|if
condition|(
literal|"null"
operator|.
name|equals
argument_list|(
name|parameterValue
argument_list|)
condition|)
block|{
return|return
name|Void
operator|.
name|TYPE
return|;
block|}
comment|// the parameter value may match the expected type, then we use it as-is
if|if
condition|(
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|parameterValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// the parameter value was not already valid, but since the simple language have evaluated the expression
comment|// which may change the parameterValue, so we have to check it again to see if its now valid
name|exp
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|parameterValue
argument_list|)
expr_stmt|;
comment|// String values from the simple language is always valid
if|if
condition|(
operator|!
name|valid
condition|)
block|{
comment|// re validate if the parameter was not valid the first time (String values should be accepted)
name|valid
operator|=
name|parameterValue
operator|instanceof
name|String
operator|||
name|BeanHelper
operator|.
name|isValidParameterValue
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|valid
condition|)
block|{
comment|// we need to unquote String parameters, as the enclosing quotes is there to denote a parameter value
if|if
condition|(
name|parameterValue
operator|instanceof
name|String
condition|)
block|{
name|parameterValue
operator|=
name|StringHelper
operator|.
name|removeLeadingAndEndingQuotes
argument_list|(
operator|(
name|String
operator|)
name|parameterValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameterValue
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// its a valid parameter value, so convert it to the expected type of the parameter
name|answer
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|parameterType
argument_list|,
name|exchange
argument_list|,
name|parameterValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parameter #{} evaluated as: {} type: {}"
argument_list|,
name|index
argument_list|,
name|answer
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|type
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot convert from type: {} to type: {} for parameter #{}"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|type
argument_list|(
name|parameterValue
argument_list|)
argument_list|,
name|parameterType
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ParameterBindingException
argument_list|(
name|e
argument_list|,
name|method
argument_list|,
name|index
argument_list|,
name|parameterType
argument_list|,
name|parameterValue
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**          * Evaluate using classic parameter binding using the pre compute expression          */
DECL|method|evaluateParameterBinding (Exchange exchange, Expression expression, int index, Class<?> parameterType)
specifier|private
name|Object
name|evaluateParameterBinding
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|int
name|index
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|)
block|{
name|Object
name|answer
init|=
literal|null
decl_stmt|;
comment|// use object first to avoid type conversion so we know if there is a value or not
name|Object
name|result
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|parameterType
operator|.
name|isInstance
argument_list|(
name|result
argument_list|)
condition|)
block|{
comment|// optimize if the value is already the same type
name|answer
operator|=
name|result
expr_stmt|;
block|}
else|else
block|{
comment|// we got a value now try to convert it to the expected type
name|answer
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|parameterType
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parameter #{} evaluated as: {} type: {}"
argument_list|,
name|index
argument_list|,
name|answer
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|type
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoTypeConversionAvailableException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot convert from type: {} to type: {} for parameter #{}"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|type
argument_list|(
name|result
argument_list|)
argument_list|,
name|parameterType
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ParameterBindingException
argument_list|(
name|e
argument_list|,
name|method
argument_list|,
name|index
argument_list|,
name|parameterType
argument_list|,
name|result
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parameter #{} evaluated as null"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ParametersExpression: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|expressions
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

