begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AfterPropertiesConfigured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExpressionIllegalSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanExpressionProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|ConstantBeanHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|ConstantTypeBeanHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|MethodNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|RegistryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|LanguageSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|KeyValueHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|OgnlHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|hasDefaultPublicNoArgConstructor
import|;
end_import

begin_comment
comment|/**  * Evaluates an expression using a bean method invocation  */
end_comment

begin_class
DECL|class|BeanExpression
specifier|public
class|class
name|BeanExpression
implements|implements
name|Expression
implements|,
name|Predicate
implements|,
name|AfterPropertiesConfigured
block|{
DECL|field|bean
specifier|private
name|Object
name|bean
decl_stmt|;
DECL|field|beanName
specifier|private
name|String
name|beanName
decl_stmt|;
DECL|field|type
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
DECL|field|method
specifier|private
name|String
name|method
decl_stmt|;
DECL|field|beanHolder
specifier|private
specifier|volatile
name|BeanHolder
name|beanHolder
decl_stmt|;
DECL|method|BeanExpression (Object bean, String method)
specifier|public
name|BeanExpression
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|bean
operator|=
name|bean
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|beanName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|BeanExpression (String beanName, String method)
specifier|public
name|BeanExpression
parameter_list|(
name|String
name|beanName
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|beanName
operator|=
name|beanName
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|bean
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|BeanExpression (Class<?> type, String method)
specifier|public
name|BeanExpression
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|bean
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|beanName
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getBean ()
specifier|public
name|Object
name|getBean
parameter_list|()
block|{
return|return
name|bean
return|;
block|}
DECL|method|setBean (Object bean)
specifier|public
name|void
name|setBean
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
name|this
operator|.
name|bean
operator|=
name|bean
expr_stmt|;
block|}
DECL|method|getBeanName ()
specifier|public
name|String
name|getBeanName
parameter_list|()
block|{
return|return
name|beanName
return|;
block|}
DECL|method|setBeanName (String beanName)
specifier|public
name|void
name|setBeanName
parameter_list|(
name|String
name|beanName
parameter_list|)
block|{
name|this
operator|.
name|beanName
operator|=
name|beanName
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType (Class<?> type)
specifier|public
name|void
name|setType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getMethod ()
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
DECL|method|setMethod (String method)
specifier|public
name|void
name|setMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"BeanExpression["
argument_list|)
decl_stmt|;
if|if
condition|(
name|bean
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|bean
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|beanName
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|beanName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ObjectHelper
operator|.
name|className
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" method:"
argument_list|)
operator|.
name|append
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// if the bean holder doesn't exist then create it using the context from the exchange
if|if
condition|(
name|beanHolder
operator|==
literal|null
condition|)
block|{
name|beanHolder
operator|=
name|createBeanHolder
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// invoking the bean can either be the easy way or using OGNL
if|if
condition|(
name|bean
operator|!=
literal|null
operator|||
name|type
operator|!=
literal|null
condition|)
block|{
name|validateHasMethod
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|bean
argument_list|,
name|type
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
comment|// validate OGNL
if|if
condition|(
name|OgnlHelper
operator|.
name|isInvalidValidOgnlExpression
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|ExpressionIllegalSyntaxException
name|cause
init|=
operator|new
name|ExpressionIllegalSyntaxException
argument_list|(
name|method
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeBeanExpressionException
argument_list|(
name|exchange
argument_list|,
name|beanName
argument_list|,
name|method
argument_list|,
name|cause
argument_list|)
throw|;
block|}
if|if
condition|(
name|OgnlHelper
operator|.
name|isValidOgnlExpression
argument_list|(
name|method
argument_list|)
condition|)
block|{
comment|// okay the method is an ognl expression
try|try
block|{
return|return
name|invokeOgnlMethod
argument_list|(
name|beanHolder
argument_list|,
name|beanName
argument_list|,
name|method
argument_list|,
name|exchange
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeBeanExpressionException
condition|)
block|{
throw|throw
operator|(
name|RuntimeBeanExpressionException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|RuntimeBeanExpressionException
argument_list|(
name|exchange
argument_list|,
name|getBeanName
argument_list|(
name|beanName
argument_list|,
name|beanHolder
argument_list|)
argument_list|,
name|method
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// regular non ognl invocation
try|try
block|{
return|return
name|invokeBean
argument_list|(
name|beanHolder
argument_list|,
name|beanName
argument_list|,
name|method
argument_list|,
name|exchange
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeBeanExpressionException
condition|)
block|{
throw|throw
operator|(
name|RuntimeBeanExpressionException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|RuntimeBeanExpressionException
argument_list|(
name|exchange
argument_list|,
name|getBeanName
argument_list|(
name|beanName
argument_list|,
name|beanHolder
argument_list|)
argument_list|,
name|method
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|evaluate (Exchange exchange, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Object
name|result
init|=
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|Object
operator|.
name|class
operator|==
name|type
condition|)
block|{
comment|// do not use type converter if type is Object (optimize)
return|return
operator|(
name|T
operator|)
name|result
return|;
block|}
else|else
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
DECL|method|matches (Exchange exchange)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|afterPropertiesConfigured (CamelContext camelContext)
specifier|public
name|void
name|afterPropertiesConfigured
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
comment|// lets see if we can do additional validation that the bean has valid method during creation of the expression
name|Object
name|target
init|=
name|bean
decl_stmt|;
if|if
condition|(
name|bean
operator|==
literal|null
operator|&&
name|type
operator|==
literal|null
operator|&&
name|beanName
operator|!=
literal|null
condition|)
block|{
name|target
operator|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|camelContext
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
name|validateHasMethod
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|type
argument_list|,
name|method
argument_list|)
expr_stmt|;
comment|// if the bean holder doesn't exist then create it
if|if
condition|(
name|beanHolder
operator|==
literal|null
condition|)
block|{
name|beanHolder
operator|=
name|createBeanHolder
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Validates the given bean has the method.      *<p/>      * This implementation will skip trying to validate OGNL method name expressions.      *      * @param context  camel context      * @param bean     the bean instance      * @param type     the bean type      * @param method   the method, can be<tt>null</tt> if no method name provided      * @throws org.apache.camel.RuntimeCamelException is thrown if bean does not have the method      */
DECL|method|validateHasMethod (CamelContext context, Object bean, Class<?> type, String method)
specifier|protected
name|void
name|validateHasMethod
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|bean
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|String
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|bean
operator|==
literal|null
operator|&&
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either bean or type should be provided on "
operator|+
name|this
argument_list|)
throw|;
block|}
if|if
condition|(
name|bean
operator|==
literal|null
operator|&&
name|hasDefaultPublicNoArgConstructor
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|bean
operator|=
name|context
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|// do not try to validate ognl methods
if|if
condition|(
name|OgnlHelper
operator|.
name|isValidOgnlExpression
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// if invalid OGNL then fail
if|if
condition|(
name|OgnlHelper
operator|.
name|isInvalidValidOgnlExpression
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|ExpressionIllegalSyntaxException
name|cause
init|=
operator|new
name|ExpressionIllegalSyntaxException
argument_list|(
name|method
argument_list|)
decl_stmt|;
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
operator|new
name|MethodNotFoundException
argument_list|(
name|bean
operator|!=
literal|null
condition|?
name|bean
else|:
name|type
argument_list|,
name|method
argument_list|,
name|cause
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|bean
operator|!=
literal|null
condition|)
block|{
name|BeanInfo
name|info
init|=
operator|new
name|BeanInfo
argument_list|(
name|context
argument_list|,
name|bean
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|hasMethod
argument_list|(
name|method
argument_list|)
condition|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
operator|new
name|MethodNotFoundException
argument_list|(
literal|null
argument_list|,
name|bean
argument_list|,
name|method
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|BeanInfo
name|info
init|=
operator|new
name|BeanInfo
argument_list|(
name|context
argument_list|,
name|type
argument_list|)
decl_stmt|;
comment|// must be a static method as we do not have a bean instance to invoke
if|if
condition|(
operator|!
name|info
operator|.
name|hasStaticMethod
argument_list|(
name|method
argument_list|)
condition|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
operator|new
name|MethodNotFoundException
argument_list|(
literal|null
argument_list|,
name|type
argument_list|,
name|method
argument_list|,
literal|true
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|createBeanHolder (CamelContext context)
specifier|private
name|BeanHolder
name|createBeanHolder
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
comment|// either use registry lookup or a constant bean
name|BeanHolder
name|holder
decl_stmt|;
if|if
condition|(
name|bean
operator|!=
literal|null
condition|)
block|{
name|holder
operator|=
operator|new
name|ConstantBeanHolder
argument_list|(
name|bean
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|beanName
operator|!=
literal|null
condition|)
block|{
name|holder
operator|=
operator|new
name|RegistryBean
argument_list|(
name|context
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|holder
operator|=
operator|new
name|ConstantTypeBeanHolder
argument_list|(
name|type
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either bean, beanName or type should be set on "
operator|+
name|this
argument_list|)
throw|;
block|}
return|return
name|holder
return|;
block|}
DECL|method|getBeanName (String beanName, BeanHolder beanHolder)
specifier|private
specifier|static
name|String
name|getBeanName
parameter_list|(
name|String
name|beanName
parameter_list|,
name|BeanHolder
name|beanHolder
parameter_list|)
block|{
name|String
name|name
init|=
name|beanName
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|&&
name|beanHolder
operator|!=
literal|null
operator|&&
name|beanHolder
operator|.
name|getBean
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|beanHolder
operator|.
name|getBean
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|&&
name|beanHolder
operator|!=
literal|null
operator|&&
name|beanHolder
operator|.
name|getBeanInfo
argument_list|()
operator|!=
literal|null
operator|&&
name|beanHolder
operator|.
name|getBeanInfo
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|beanHolder
operator|.
name|getBeanInfo
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
comment|/**      * Invokes the bean and returns the result. If an exception was thrown while invoking the bean, then the      * exception is set on the exchange.      */
DECL|method|invokeBean (BeanHolder beanHolder, String beanName, String methodName, Exchange exchange)
specifier|private
specifier|static
name|Object
name|invokeBean
parameter_list|(
name|BeanHolder
name|beanHolder
parameter_list|,
name|String
name|beanName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|result
decl_stmt|;
name|BeanExpressionProcessor
name|processor
init|=
operator|new
name|BeanExpressionProcessor
argument_list|(
name|beanHolder
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodName
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|setMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
comment|// enable OGNL like invocation
name|processor
operator|.
name|setShorthandMethod
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// copy the original exchange to avoid side effects on it
name|Exchange
name|resultExchange
init|=
name|ExchangeHelper
operator|.
name|createCopy
argument_list|(
name|exchange
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// remove any existing exception in case we do OGNL on the exception
name|resultExchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// force to use InOut to retrieve the result on the OUT message
name|resultExchange
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|(
name|resultExchange
argument_list|)
expr_stmt|;
name|result
operator|=
name|resultExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
expr_stmt|;
comment|// propagate properties and headers from result
if|if
condition|(
name|resultExchange
operator|.
name|hasProperties
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|resultExchange
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resultExchange
operator|.
name|getOut
argument_list|()
operator|.
name|hasHeaders
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|resultExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// propagate exceptions
if|if
condition|(
name|resultExchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|resultExchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeBeanExpressionException
argument_list|(
name|exchange
argument_list|,
name|beanName
argument_list|,
name|methodName
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * To invoke a bean using a OGNL notation which denotes the chain of methods to invoke.      *<p/>      * For more advanced OGNL you may have to look for a real framework such as OGNL, Mvel or dynamic      * programming language such as Groovy.      */
DECL|method|invokeOgnlMethod (BeanHolder beanHolder, String beanName, String ognl, Exchange exchange)
specifier|private
specifier|static
name|Object
name|invokeOgnlMethod
parameter_list|(
name|BeanHolder
name|beanHolder
parameter_list|,
name|String
name|beanName
parameter_list|,
name|String
name|ognl
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// we must start with having bean as the result
name|Object
name|result
init|=
name|beanHolder
operator|.
name|getBean
argument_list|()
decl_stmt|;
comment|// copy the original exchange to avoid side effects on it
name|Exchange
name|resultExchange
init|=
name|ExchangeHelper
operator|.
name|createCopy
argument_list|(
name|exchange
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// remove any existing exception in case we do OGNL on the exception
name|resultExchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// force to use InOut to retrieve the result on the OUT message
name|resultExchange
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
comment|// do not propagate any method name when using OGNL, as with OGNL we
comment|// compute and provide the method name to explicit to invoke
name|resultExchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|BEAN_METHOD_NAME
argument_list|)
expr_stmt|;
comment|// current ognl path as we go along
name|String
name|ognlPath
init|=
literal|""
decl_stmt|;
comment|// loop and invoke each method
name|Object
name|beanToCall
init|=
name|beanHolder
operator|.
name|getBean
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|beanType
init|=
name|beanHolder
operator|.
name|getBeanInfo
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// there must be a bean to call with, we currently does not support OGNL expressions on using purely static methods
if|if
condition|(
name|beanToCall
operator|==
literal|null
operator|&&
name|beanType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bean instance and bean type is null. OGNL bean expressions requires to have either a bean instance of the class name of the bean to use."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ognl
operator|!=
literal|null
condition|)
block|{
comment|// must be a valid method name according to java identifier ruling
name|OgnlHelper
operator|.
name|validateMethodName
argument_list|(
name|ognl
argument_list|)
expr_stmt|;
block|}
comment|// Split ognl except when this is not a Map, Array
comment|// and we would like to keep the dots within the key name
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|OgnlHelper
operator|.
name|splitOgnl
argument_list|(
name|ognl
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|methodName
range|:
name|methods
control|)
block|{
name|BeanHolder
name|holder
decl_stmt|;
if|if
condition|(
name|beanToCall
operator|!=
literal|null
condition|)
block|{
name|holder
operator|=
operator|new
name|ConstantBeanHolder
argument_list|(
name|beanToCall
argument_list|,
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|beanType
operator|!=
literal|null
condition|)
block|{
name|holder
operator|=
operator|new
name|ConstantTypeBeanHolder
argument_list|(
name|beanType
argument_list|,
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|holder
operator|=
literal|null
expr_stmt|;
block|}
comment|// support the null safe operator
name|boolean
name|nullSafe
init|=
name|OgnlHelper
operator|.
name|isNullSafeOperator
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|getBeanName
argument_list|(
literal|null
argument_list|,
name|beanHolder
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeBeanExpressionException
argument_list|(
name|exchange
argument_list|,
name|name
argument_list|,
name|ognl
argument_list|,
literal|"last method returned null and therefore cannot continue to invoke method "
operator|+
name|methodName
operator|+
literal|" on a null instance"
argument_list|)
throw|;
block|}
comment|// keep up with how far are we doing
name|ognlPath
operator|+=
name|methodName
expr_stmt|;
comment|// get rid of leading ?. or . as we only needed that to determine if null safe was enabled or not
name|methodName
operator|=
name|OgnlHelper
operator|.
name|removeLeadingOperators
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
comment|// are we doing an index lookup (eg in Map/List/array etc)?
name|String
name|key
init|=
literal|null
decl_stmt|;
name|KeyValueHolder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|index
init|=
name|OgnlHelper
operator|.
name|isOgnlIndex
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|methodName
operator|=
name|index
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|key
operator|=
name|index
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
comment|// only invoke if we have a method name to use to invoke
if|if
condition|(
name|methodName
operator|!=
literal|null
condition|)
block|{
name|Object
name|newResult
init|=
name|invokeBean
argument_list|(
name|holder
argument_list|,
name|beanName
argument_list|,
name|methodName
argument_list|,
name|resultExchange
argument_list|)
decl_stmt|;
comment|// check for exception and rethrow if we failed
if|if
condition|(
name|resultExchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeBeanExpressionException
argument_list|(
name|exchange
argument_list|,
name|beanName
argument_list|,
name|methodName
argument_list|,
name|resultExchange
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|result
operator|=
name|newResult
expr_stmt|;
block|}
comment|// if there was a key then we need to lookup using the key
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
comment|// if key is a nested simple expression then re-evaluate that again
if|if
condition|(
name|LanguageSupport
operator|.
name|hasSimpleFunction
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Language
name|lan
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"simple"
argument_list|)
decl_stmt|;
name|key
operator|=
name|lan
operator|.
name|createExpression
argument_list|(
name|key
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|lookupResult
argument_list|(
name|resultExchange
argument_list|,
name|key
argument_list|,
name|result
argument_list|,
name|nullSafe
argument_list|,
name|ognlPath
argument_list|,
name|holder
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check null safe for null results
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|nullSafe
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// prepare for next bean to invoke
name|beanToCall
operator|=
name|result
expr_stmt|;
name|beanType
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|lookupResult (Exchange exchange, String key, Object result, boolean nullSafe, String ognlPath, Object bean)
specifier|private
specifier|static
name|Object
name|lookupResult
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|result
parameter_list|,
name|boolean
name|nullSafe
parameter_list|,
name|String
name|ognlPath
parameter_list|,
name|Object
name|bean
parameter_list|)
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|key
argument_list|,
literal|"key"
argument_list|,
literal|"in Simple language ognl path: "
operator|+
name|ognlPath
argument_list|)
expr_stmt|;
comment|// trim key
name|key
operator|=
name|key
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// remove any enclosing quotes
name|key
operator|=
name|StringHelper
operator|.
name|removeLeadingAndEndingQuotes
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// try map first
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|// special for list is last keyword
name|Integer
name|num
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|boolean
name|checkList
init|=
name|key
operator|.
name|startsWith
argument_list|(
literal|"last"
argument_list|)
operator|||
name|num
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|checkList
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"last"
argument_list|)
condition|)
block|{
name|num
operator|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
comment|// maybe its an expression to subtract a number after last
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|key
argument_list|,
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
name|Integer
name|redux
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|after
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|redux
operator|!=
literal|null
condition|)
block|{
name|num
operator|-=
name|redux
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ExpressionIllegalSyntaxException
argument_list|(
name|key
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|num
operator|!=
literal|null
operator|&&
name|num
operator|>=
literal|0
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|>
name|num
operator|-
literal|1
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|num
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|nullSafe
condition|)
block|{
comment|// not null safe then its mandatory so thrown out of bounds exception
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index: "
operator|+
name|num
operator|+
literal|", Size: "
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|" out of bounds with List from bean: "
operator|+
name|bean
operator|+
literal|"using OGNL path ["
operator|+
name|ognlPath
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|nullSafe
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Key: "
operator|+
name|key
operator|+
literal|" not found in bean: "
operator|+
name|bean
operator|+
literal|" of type: "
operator|+
name|ObjectHelper
operator|.
name|classCanonicalName
argument_list|(
name|bean
argument_list|)
operator|+
literal|" using OGNL path ["
operator|+
name|ognlPath
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// null safe so we can return null
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

