begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.apns.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|apns
operator|.
name|util
package|;
end_package

begin_class
DECL|class|ParamUtils
specifier|public
specifier|final
class|class
name|ParamUtils
block|{
DECL|method|ParamUtils ()
specifier|private
name|ParamUtils
parameter_list|()
block|{     }
DECL|method|checkNotNull (Object param, String paramValue)
specifier|public
specifier|static
name|void
name|checkNotNull
parameter_list|(
name|Object
name|param
parameter_list|,
name|String
name|paramValue
parameter_list|)
block|{
name|AssertUtils
operator|.
name|notNull
argument_list|(
name|paramValue
argument_list|,
name|param
operator|+
literal|" cannot be null"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNotEmpty (String paramValue, String paramName)
specifier|public
specifier|static
name|void
name|checkNotEmpty
parameter_list|(
name|String
name|paramValue
parameter_list|,
name|String
name|paramName
parameter_list|)
block|{
name|AssertUtils
operator|.
name|notNull
argument_list|(
name|paramValue
argument_list|,
name|paramName
operator|+
literal|" cannot be null"
argument_list|)
expr_stmt|;
name|AssertUtils
operator|.
name|isTrue
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|paramValue
argument_list|)
argument_list|,
name|paramName
operator|+
literal|" cannot be empty"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkDestination (String host, int port, String paramName)
specifier|public
specifier|static
name|void
name|checkDestination
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|paramName
parameter_list|)
block|{
if|if
condition|(
operator|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|host
argument_list|)
operator|&&
name|port
operator|!=
literal|0
operator|)
operator|||
operator|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|host
argument_list|)
operator|&&
name|port
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|paramName
operator|+
literal|"host and port parameters are not coherent: host="
operator|+
name|host
operator|+
literal|", port="
operator|+
name|port
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

