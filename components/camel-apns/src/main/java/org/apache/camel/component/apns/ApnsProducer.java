begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.apns
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|apns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|notnoop
operator|.
name|apns
operator|.
name|APNS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|notnoop
operator|.
name|exceptions
operator|.
name|ApnsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|apns
operator|.
name|model
operator|.
name|ApnsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|apns
operator|.
name|model
operator|.
name|MessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|apns
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|ApnsProducer
specifier|public
class|class
name|ApnsProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|tokenList
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|tokenList
decl_stmt|;
DECL|method|ApnsProducer (ApnsEndpoint endpoint)
specifier|public
name|ApnsProducer
parameter_list|(
name|ApnsEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|initiate
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|ApnsEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|ApnsEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|initiate (ApnsEndpoint apnsEndpoint)
specifier|private
name|void
name|initiate
parameter_list|(
name|ApnsEndpoint
name|apnsEndpoint
parameter_list|)
block|{
name|configureTokens
argument_list|(
name|apnsEndpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|configureTokens (ApnsEndpoint apnsEndpoint)
specifier|private
name|void
name|configureTokens
parameter_list|(
name|ApnsEndpoint
name|apnsEndpoint
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|apnsEndpoint
operator|.
name|getTokens
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|tokenList
operator|=
name|extractTokensFromString
argument_list|(
name|apnsEndpoint
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isTokensConfiguredUsingUri ()
specifier|public
name|boolean
name|isTokensConfiguredUsingUri
parameter_list|()
block|{
return|return
name|tokenList
operator|!=
literal|null
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|notify
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|notify (Exchange exchange)
specifier|private
name|void
name|notify
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|ApnsException
block|{
name|String
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|tokens
decl_stmt|;
if|if
condition|(
name|isTokensConfiguredUsingUri
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasTokensHeader
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tokens already configured on endpoint "
operator|+
name|ApnsConstants
operator|.
name|HEADER_TOKENS
argument_list|)
throw|;
block|}
name|tokens
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|tokenList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tokensHeader
init|=
name|getHeaderTokens
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|tokens
operator|=
name|extractTokensFromString
argument_list|(
name|tokensHeader
argument_list|)
expr_stmt|;
block|}
name|MessageType
name|messageType
init|=
name|getHeaderMessageType
argument_list|(
name|exchange
argument_list|,
name|MessageType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|String
name|payload
decl_stmt|;
if|if
condition|(
name|messageType
operator|==
name|MessageType
operator|.
name|STRING
condition|)
block|{
name|payload
operator|=
name|APNS
operator|.
name|newPayload
argument_list|()
operator|.
name|alertBody
argument_list|(
name|message
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|=
name|message
expr_stmt|;
block|}
name|Date
name|expiry
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|ApnsConstants
operator|.
name|HEADER_EXPIRY
argument_list|,
name|Date
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|expiry
operator|!=
literal|null
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|getApnsService
argument_list|()
operator|.
name|push
argument_list|(
name|tokens
argument_list|,
name|payload
argument_list|,
name|expiry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getEndpoint
argument_list|()
operator|.
name|getApnsService
argument_list|()
operator|.
name|push
argument_list|(
name|tokens
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHeaderTokens (Exchange exchange)
specifier|public
name|String
name|getHeaderTokens
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|ApnsConstants
operator|.
name|HEADER_TOKENS
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getHeaderMessageType (Exchange exchange, MessageType defaultMessageType)
specifier|public
name|MessageType
name|getHeaderMessageType
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MessageType
name|defaultMessageType
parameter_list|)
block|{
name|String
name|messageTypeStr
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|ApnsConstants
operator|.
name|HEADER_MESSAGE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageTypeStr
operator|==
literal|null
condition|)
block|{
return|return
name|defaultMessageType
return|;
block|}
name|MessageType
name|messageType
init|=
name|MessageType
operator|.
name|valueOf
argument_list|(
name|messageTypeStr
argument_list|)
decl_stmt|;
return|return
name|messageType
return|;
block|}
DECL|method|hasTokensHeader (Exchange exchange)
specifier|private
name|boolean
name|hasTokensHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|getHeaderTokens
argument_list|(
name|exchange
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|extractTokensFromString (String tokensStr)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|extractTokensFromString
parameter_list|(
name|String
name|tokensStr
parameter_list|)
block|{
name|tokensStr
operator|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|tokensStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokensStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No token specified"
argument_list|)
throw|;
block|}
name|String
index|[]
name|tokenArray
init|=
name|tokensStr
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|int
name|tokenArrayLength
init|=
name|tokenArray
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokenArrayLength
condition|;
name|i
operator|++
control|)
block|{
name|String
name|token
init|=
name|tokenArray
index|[
name|i
index|]
decl_stmt|;
name|tokenArray
index|[
name|i
index|]
operator|=
name|token
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|tokenLength
init|=
name|token
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenLength
operator|!=
literal|64
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Token has wrong size['"
operator|+
name|tokenLength
operator|+
literal|"']: "
operator|+
name|token
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tokenArray
argument_list|)
decl_stmt|;
return|return
name|tokens
return|;
block|}
block|}
end_class

end_unit

