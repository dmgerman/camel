begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.apns.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|apns
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|notnoop
operator|.
name|exceptions
operator|.
name|RuntimeIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_class
DECL|class|ResourceUtils
specifier|public
specifier|final
class|class
name|ResourceUtils
block|{
DECL|field|CLASSPATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CLASSPATH_PREFIX
init|=
literal|"classpath:"
decl_stmt|;
DECL|method|ResourceUtils ()
specifier|private
name|ResourceUtils
parameter_list|()
block|{     }
DECL|method|isClasspathResource (String path)
specifier|public
specifier|static
name|boolean
name|isClasspathResource
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|startsWith
argument_list|(
name|CLASSPATH_PREFIX
argument_list|)
return|;
block|}
DECL|method|getClasspathResourcePath (String path)
specifier|public
specifier|static
name|String
name|getClasspathResourcePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
name|CLASSPATH_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getInputStream (String path)
specifier|public
specifier|static
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isClasspathResource
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|String
name|classpathResourcePath
init|=
name|ResourceUtils
operator|.
name|getClasspathResourcePath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|is
operator|=
name|ResourceUtils
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|classpathResourcePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeIOException
argument_list|(
literal|"Certificate stream is null: '"
operator|+
name|classpathResourcePath
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|is
operator|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|is
return|;
block|}
DECL|method|close (Closeable closeable)
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|Closeable
name|closeable
parameter_list|)
block|{
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* Nothing to do */
block|}
block|}
block|}
block|}
end_class

end_unit

