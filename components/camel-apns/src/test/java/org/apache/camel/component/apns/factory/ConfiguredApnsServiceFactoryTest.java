begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.apns.factory
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|apns
operator|.
name|factory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|notnoop
operator|.
name|apns
operator|.
name|ApnsServiceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|ConfiguredApnsServiceFactoryTest
specifier|public
class|class
name|ConfiguredApnsServiceFactoryTest
block|{
DECL|field|apnsServiceBuilder
name|ApnsServiceBuilder
name|apnsServiceBuilder
init|=
name|mock
argument_list|(
name|ApnsServiceBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|apnsServiceFactory
name|ApnsServiceFactory
name|apnsServiceFactory
init|=
operator|new
name|ApnsServiceFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ApnsServiceBuilder
name|configureServiceBuilder
parameter_list|(
name|ApnsServiceBuilder
name|serviceBuilder
parameter_list|)
block|{
name|apnsServiceBuilder
operator|.
name|withSocksProxy
argument_list|(
literal|"my.proxy.com"
argument_list|,
literal|6666
argument_list|)
expr_stmt|;
return|return
name|apnsServiceBuilder
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|apnsServiceFactory
operator|.
name|setSslContextParameters
argument_list|(
name|mock
argument_list|(
name|SSLContextParameters
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldSetProxyOnDefaultServiceBuilder ()
specifier|public
name|void
name|shouldSetProxyOnDefaultServiceBuilder
parameter_list|()
block|{
comment|// When
name|apnsServiceFactory
operator|.
name|getApnsService
argument_list|()
expr_stmt|;
comment|// Then
name|verify
argument_list|(
name|apnsServiceBuilder
argument_list|)
operator|.
name|withSocksProxy
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

