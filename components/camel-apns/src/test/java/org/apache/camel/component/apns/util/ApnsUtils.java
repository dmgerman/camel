begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.apns.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|apns
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|notnoop
operator|.
name|apns
operator|.
name|internal
operator|.
name|ApnsFeedbackParsingUtilsAcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|notnoop
operator|.
name|apns
operator|.
name|internal
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|com
operator|.
name|notnoop
operator|.
name|apns
operator|.
name|utils
operator|.
name|FixedCertificates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|apns
operator|.
name|factory
operator|.
name|ApnsServiceFactory
import|;
end_import

begin_class
DECL|class|ApnsUtils
specifier|public
specifier|final
class|class
name|ApnsUtils
block|{
DECL|field|random
specifier|private
specifier|static
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|ApnsUtils ()
specifier|private
name|ApnsUtils
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|createRandomDeviceTokenBytes ()
specifier|public
specifier|static
name|byte
index|[]
name|createRandomDeviceTokenBytes
parameter_list|()
block|{
name|byte
index|[]
name|deviceTokenBytes
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|deviceTokenBytes
argument_list|)
expr_stmt|;
return|return
name|deviceTokenBytes
return|;
block|}
DECL|method|encodeHexToken (byte[] deviceTokenBytes)
specifier|public
specifier|static
name|String
name|encodeHexToken
parameter_list|(
name|byte
index|[]
name|deviceTokenBytes
parameter_list|)
block|{
name|String
name|deviceToken
init|=
name|Utilities
operator|.
name|encodeHex
argument_list|(
name|deviceTokenBytes
argument_list|)
decl_stmt|;
return|return
name|deviceToken
return|;
block|}
DECL|method|createDefaultTestConfiguration (CamelContext camelContext)
specifier|public
specifier|static
name|ApnsServiceFactory
name|createDefaultTestConfiguration
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|ApnsServiceFactory
name|apnsServiceFactory
init|=
operator|new
name|ApnsServiceFactory
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|apnsServiceFactory
operator|.
name|setFeedbackHost
argument_list|(
name|FixedCertificates
operator|.
name|TEST_HOST
argument_list|)
expr_stmt|;
name|apnsServiceFactory
operator|.
name|setFeedbackPort
argument_list|(
name|FixedCertificates
operator|.
name|TEST_FEEDBACK_PORT
argument_list|)
expr_stmt|;
name|apnsServiceFactory
operator|.
name|setGatewayHost
argument_list|(
name|FixedCertificates
operator|.
name|TEST_HOST
argument_list|)
expr_stmt|;
name|apnsServiceFactory
operator|.
name|setGatewayPort
argument_list|(
name|FixedCertificates
operator|.
name|TEST_GATEWAY_PORT
argument_list|)
expr_stmt|;
comment|// apnsServiceFactory.setCertificatePath("classpath:/" +
comment|// FixedCertificates.CLIENT_STORE);
comment|// apnsServiceFactory.setCertificatePassword(FixedCertificates.CLIENT_PASSWD);
name|apnsServiceFactory
operator|.
name|setSslContext
argument_list|(
name|FixedCertificates
operator|.
name|clientContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|apnsServiceFactory
return|;
block|}
DECL|method|generateFeedbackBytes (byte[] deviceTokenBytes)
specifier|public
specifier|static
name|byte
index|[]
name|generateFeedbackBytes
parameter_list|(
name|byte
index|[]
name|deviceTokenBytes
parameter_list|)
block|{
name|byte
index|[]
name|feedbackBytes
init|=
name|ApnsFeedbackParsingUtilsAcessor
operator|.
name|pack
argument_list|(
comment|/* time_t */
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
comment|/* length */
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|32
block|}
argument_list|,
comment|/* device token */
name|deviceTokenBytes
argument_list|)
decl_stmt|;
return|return
name|feedbackBytes
return|;
block|}
block|}
end_class

end_unit

