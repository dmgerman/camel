begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.zipkin
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|zipkin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * A function that lookup the property value from  * OS environment variables using the service idiom.  *<p/>  * A service is defined using two environment variables where name is name of the service:  *<ul>  *<li><tt>NAME_SERVICE_HOST</tt></li>  *<li><tt>NAME_SERVICE_PORT</tt></li>  *</ul>  * in other words the service uses<tt>_SERVICE_HOST</tt> and<tt>_SERVICE_PORT</tt> as prefix.  *<p/>  * This implementation is to return the port part only.  */
end_comment

begin_class
DECL|class|ServicePortFunction
specifier|public
specifier|final
class|class
name|ServicePortFunction
block|{
DECL|field|PORT_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PORT_PREFIX
init|=
literal|"_SERVICE_PORT"
decl_stmt|;
DECL|method|ServicePortFunction ()
specifier|private
name|ServicePortFunction
parameter_list|()
block|{     }
DECL|method|apply (String remainder)
specifier|public
specifier|static
name|String
name|apply
parameter_list|(
name|String
name|remainder
parameter_list|)
block|{
name|String
name|key
init|=
name|remainder
decl_stmt|;
name|String
name|defaultValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remainder
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|key
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|remainder
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|defaultValue
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|remainder
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
comment|// make sure to use upper case
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
comment|// make sure to use underscore as dash is not supported as ENV variables
name|key
operator|=
name|key
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
comment|// a service should have both the host and port defined
name|String
name|port
init|=
name|System
operator|.
name|getenv
argument_list|(
name|key
operator|+
name|PORT_PREFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
return|return
name|port
return|;
block|}
else|else
block|{
return|return
name|defaultValue
return|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
block|}
end_class

end_unit

