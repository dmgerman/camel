begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.zipkin
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|zipkin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|IdConversion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|SpanCollector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|twitter
operator|.
name|zipkin
operator|.
name|gen
operator|.
name|BinaryAnnotation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|twitter
operator|.
name|zipkin
operator|.
name|gen
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * To collect zipkin span's using a logger.  */
end_comment

begin_class
DECL|class|ZipkinLoggingSpanCollector
specifier|public
class|class
name|ZipkinLoggingSpanCollector
implements|implements
name|SpanCollector
block|{
DECL|field|defaultAnnotations
specifier|private
specifier|final
name|Set
argument_list|<
name|BinaryAnnotation
argument_list|>
name|defaultAnnotations
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|BinaryAnnotation
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|method|ZipkinLoggingSpanCollector ()
specifier|public
name|ZipkinLoggingSpanCollector
parameter_list|()
block|{
name|this
argument_list|(
name|ZipkinLoggingSpanCollector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ZipkinLoggingSpanCollector (String name)
specifier|public
name|ZipkinLoggingSpanCollector
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect (Span span)
specifier|public
name|void
name|collect
parameter_list|(
name|Span
name|span
parameter_list|)
block|{
if|if
condition|(
operator|!
name|defaultAnnotations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|BinaryAnnotation
name|ba
range|:
name|defaultAnnotations
control|)
block|{
name|span
operator|.
name|addToBinary_annotations
argument_list|(
name|ba
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|long
name|ms
init|=
name|span
operator|.
name|getDuration
argument_list|()
operator|!=
literal|null
condition|?
name|span
operator|.
name|getDuration
argument_list|()
operator|/
literal|1000
else|:
operator|-
literal|1
decl_stmt|;
name|String
name|id
init|=
name|IdConversion
operator|.
name|convertToString
argument_list|(
name|span
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s(%s) - %s ms"
argument_list|,
name|span
operator|.
name|getName
argument_list|()
argument_list|,
name|id
argument_list|,
name|ms
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addDefaultAnnotation (String key, String value)
specifier|public
name|void
name|addDefaultAnnotation
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|defaultAnnotations
operator|.
name|add
argument_list|(
name|BinaryAnnotation
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

