begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.zipkin
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|zipkin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|Brave
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|ClientSpanThreadBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|ServerSpan
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|ServerSpanThreadBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|SpanCollector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|scribe
operator|.
name|ScribeSpanCollector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|twitter
operator|.
name|zipkin
operator|.
name|gen
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StaticService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|ServiceHostPropertiesFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|ServicePortPropertiesFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeCreatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeSendingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeSentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventNotifierSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|RoutePolicySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|SynchronizationAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
operator|.
name|routeIdExpression
import|;
end_import

begin_comment
comment|/**  * To use Zipkin with Camel then setup this {@link ZipkinTracer} in your Camel application.  *<p/>  * Events (span) are captured for incoming and outgoing messages being sent to/from Camel.  * This means you need to configure which which Camel endpoints that maps to zipkin service names.  * The mapping can be configured using  *<ul>  *<li>route id - A Camel route id</li>  *<li>endpoint url - A Camel endpoint url</li>  *</ul>  * For both kinds you can use wildcards and regular expressions to match, which is using the rules from  * {@link EndpointHelper#matchPattern(String, String)} and {@link EndpointHelper#matchEndpoint(CamelContext, String, String)}  *<p/>  * To match all Camel messages you can use<tt>*</tt> in the pattern and configure that to the same service name.  *<br/>  * If no mapping has been configured then Camel will fallback and use endpoint uri's as service names.  * However its recommended to configure service mappings so you can use human logic names instead of Camel  * endpoint uris in the names.  *<p/>  * Camel will auto-configure a {@link ScribeSpanCollector} if no SpanCollector explicit has been configured, and  * if the hostname and port to the span collector has been configured as environment variables  *<ul>  *<li>ZIPKIN_COLLECTOR_THRIFT_SERVICE_HOST - The hostname</li>  *<li>ZIPKIN_COLLECTOR_THRIFT_SERVICE_PORT - The port number</li>  *</ul>  *<p/>  * This class is implemented as both an {@link org.apache.camel.spi.EventNotifier} and {@link RoutePolicy} that allows  * to trap when Camel starts/ends an {@link Exchange} being routed using the {@link RoutePolicy} and during the routing  * if the {@link Exchange} sends messages, then we track them using the {@link org.apache.camel.spi.EventNotifier}.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"ZipkinTracer"
argument_list|)
DECL|class|ZipkinTracer
specifier|public
class|class
name|ZipkinTracer
extends|extends
name|ServiceSupport
implements|implements
name|RoutePolicyFactory
implements|,
name|StaticService
implements|,
name|CamelContextAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZipkinTracer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ZIPKIN_COLLECTOR_THRIFT_SERVICE
specifier|private
specifier|static
specifier|final
name|String
name|ZIPKIN_COLLECTOR_THRIFT_SERVICE
init|=
literal|"zipkin-collector-thrift"
decl_stmt|;
DECL|field|eventNotifier
specifier|private
specifier|final
name|ZipkinEventNotifier
name|eventNotifier
init|=
operator|new
name|ZipkinEventNotifier
argument_list|()
decl_stmt|;
DECL|field|braves
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Brave
argument_list|>
name|braves
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|useFallbackServiceNames
specifier|private
specifier|transient
name|boolean
name|useFallbackServiceNames
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|rate
specifier|private
name|float
name|rate
init|=
literal|1.0f
decl_stmt|;
DECL|field|spanCollector
specifier|private
name|SpanCollector
name|spanCollector
decl_stmt|;
DECL|field|clientServiceMappings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|clientServiceMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|serverServiceMappings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serverServiceMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|excludePatterns
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|excludePatterns
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|includeMessageBody
specifier|private
name|boolean
name|includeMessageBody
decl_stmt|;
DECL|field|includeMessageBodyStreams
specifier|private
name|boolean
name|includeMessageBodyStreams
decl_stmt|;
DECL|method|ZipkinTracer ()
specifier|public
name|ZipkinTracer
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createRoutePolicy (CamelContext camelContext, String routeId, RouteDefinition route)
specifier|public
name|RoutePolicy
name|createRoutePolicy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|routeId
parameter_list|,
name|RouteDefinition
name|route
parameter_list|)
block|{
comment|// ensure this zipkin tracer gets initialized when Camel starts
name|init
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
return|return
operator|new
name|ZipkinRoutePolicy
argument_list|(
name|routeId
argument_list|)
return|;
block|}
comment|/**      * Registers this {@link ZipkinTracer} on the {@link CamelContext} if not already registered.      */
DECL|method|init (CamelContext camelContext)
specifier|public
name|void
name|init
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
if|if
condition|(
operator|!
name|camelContext
operator|.
name|hasService
argument_list|(
name|this
argument_list|)
condition|)
block|{
try|try
block|{
comment|// start this service eager so we init before Camel is starting up
name|camelContext
operator|.
name|addService
argument_list|(
name|this
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The hostname for the remote zipkin server to use."
argument_list|)
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
comment|/**      * Sets a hostname for the remote zipkin server to use.      */
DECL|method|setHostName (String hostName)
specifier|public
name|void
name|setHostName
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The port number for the remote zipkin server to use."
argument_list|)
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * Sets the port number for the remote zipkin server to use.      */
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Rates how many events should be traced by zipkin. The rate is expressed as a percentage (1.0f = 100%, 0.5f is 50%, 0.1f is 10%)."
argument_list|)
DECL|method|getRate ()
specifier|public
name|float
name|getRate
parameter_list|()
block|{
return|return
name|rate
return|;
block|}
comment|/**      * Configures a rate that decides how many events should be traced by zipkin.      * The rate is expressed as a percentage (1.0f = 100%, 0.5f is 50%, 0.1f is 10%).      *      * @param rate minimum sample rate is 0.0001, or 0.01% of traces      */
DECL|method|setRate (float rate)
specifier|public
name|void
name|setRate
parameter_list|(
name|float
name|rate
parameter_list|)
block|{
name|this
operator|.
name|rate
operator|=
name|rate
expr_stmt|;
block|}
DECL|method|getSpanCollector ()
specifier|public
name|SpanCollector
name|getSpanCollector
parameter_list|()
block|{
return|return
name|spanCollector
return|;
block|}
comment|/**      * The collector to use for sending zipkin span events to the zipkin server.      */
DECL|method|setSpanCollector (SpanCollector spanCollector)
specifier|public
name|void
name|setSpanCollector
parameter_list|(
name|SpanCollector
name|spanCollector
parameter_list|)
block|{
name|this
operator|.
name|spanCollector
operator|=
name|spanCollector
expr_stmt|;
block|}
DECL|method|getServiceName ()
specifier|public
name|String
name|getServiceName
parameter_list|()
block|{
return|return
name|clientServiceMappings
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
return|;
block|}
comment|/**      * To use a global service name that matches all Camel events      */
DECL|method|setServiceName (String serviceName)
specifier|public
name|void
name|setServiceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|clientServiceMappings
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
name|serverServiceMappings
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientServiceMappings ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getClientServiceMappings
parameter_list|()
block|{
return|return
name|clientServiceMappings
return|;
block|}
DECL|method|setClientServiceMappings (Map<String, String> clientServiceMappings)
specifier|public
name|void
name|setClientServiceMappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|clientServiceMappings
parameter_list|)
block|{
name|this
operator|.
name|clientServiceMappings
operator|=
name|clientServiceMappings
expr_stmt|;
block|}
comment|/**      * Adds a client service mapping that matches Camel events to the given zipkin service name.      * See more details at the class javadoc.      *      * @param pattern  the pattern such as route id, endpoint url      * @param serviceName the zipkin service name      */
DECL|method|addClientServiceMapping (String pattern, String serviceName)
specifier|public
name|void
name|addClientServiceMapping
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|serviceName
parameter_list|)
block|{
name|clientServiceMappings
operator|.
name|put
argument_list|(
name|pattern
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
block|}
DECL|method|getServerServiceMappings ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServerServiceMappings
parameter_list|()
block|{
return|return
name|serverServiceMappings
return|;
block|}
DECL|method|setServerServiceMappings (Map<String, String> serverServiceMappings)
specifier|public
name|void
name|setServerServiceMappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serverServiceMappings
parameter_list|)
block|{
name|this
operator|.
name|serverServiceMappings
operator|=
name|serverServiceMappings
expr_stmt|;
block|}
comment|/**      * Adds a server service mapping that matches Camel events to the given zipkin service name.      * See more details at the class javadoc.      *      * @param pattern  the pattern such as route id, endpoint url      * @param serviceName the zipkin service name      */
DECL|method|addServerServiceMapping (String pattern, String serviceName)
specifier|public
name|void
name|addServerServiceMapping
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|serviceName
parameter_list|)
block|{
name|serverServiceMappings
operator|.
name|put
argument_list|(
name|pattern
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
block|}
DECL|method|getExcludePatterns ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getExcludePatterns
parameter_list|()
block|{
return|return
name|excludePatterns
return|;
block|}
DECL|method|setExcludePatterns (Set<String> excludePatterns)
specifier|public
name|void
name|setExcludePatterns
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|excludePatterns
parameter_list|)
block|{
name|this
operator|.
name|excludePatterns
operator|=
name|excludePatterns
expr_stmt|;
block|}
comment|/**      * Adds an exclude pattern that will disable tracing with zipkin for Camel messages that matches the pattern.      *      * @param pattern  the pattern such as route id, endpoint url      */
DECL|method|addExcludePattern (String pattern)
specifier|public
name|void
name|addExcludePattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|excludePatterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether to include the Camel message body in the zipkin traces"
argument_list|)
DECL|method|isIncludeMessageBody ()
specifier|public
name|boolean
name|isIncludeMessageBody
parameter_list|()
block|{
return|return
name|includeMessageBody
return|;
block|}
comment|/**      * Whether to include the Camel message body in the zipkin traces.      *<p/>      * This is not recommended for production usage, or when having big payloads. You can limit the size by      * configuring the<a href="http://camel.apache.org/how-do-i-set-the-max-chars-when-debug-logging-messages-in-camel.html">max debug log size</a>.      *<p/>      * By default message bodies that are stream based are<b>not</b> included. You can use the option {@link #setIncludeMessageBodyStreams(boolean)} to      * turn that on.      */
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether to include the Camel message body in the zipkin traces"
argument_list|)
DECL|method|setIncludeMessageBody (boolean includeMessageBody)
specifier|public
name|void
name|setIncludeMessageBody
parameter_list|(
name|boolean
name|includeMessageBody
parameter_list|)
block|{
name|this
operator|.
name|includeMessageBody
operator|=
name|includeMessageBody
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether to include stream based Camel message bodies in the zipkin traces"
argument_list|)
DECL|method|isIncludeMessageBodyStreams ()
specifier|public
name|boolean
name|isIncludeMessageBodyStreams
parameter_list|()
block|{
return|return
name|includeMessageBodyStreams
return|;
block|}
comment|/**      * Whether to include message bodies that are stream based in the zipkin traces.      *<p/>      * This requires enabling<a href="http://camel.apache.org/stream-caching.html">stream caching</a> on the routes or globally on the CamelContext.      *<p/>      * This is not recommended for production usage, or when having big payloads. You can limit the size by      * configuring the<a href="http://camel.apache.org/how-do-i-set-the-max-chars-when-debug-logging-messages-in-camel.html">max debug log size</a>.      */
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether to include stream based Camel message bodies in the zipkin traces"
argument_list|)
DECL|method|setIncludeMessageBodyStreams (boolean includeMessageBodyStreams)
specifier|public
name|void
name|setIncludeMessageBodyStreams
parameter_list|(
name|boolean
name|includeMessageBodyStreams
parameter_list|)
block|{
name|this
operator|.
name|includeMessageBodyStreams
operator|=
name|includeMessageBodyStreams
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|eventNotifier
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|camelContext
operator|.
name|getRoutePolicyFactories
argument_list|()
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|camelContext
operator|.
name|addRoutePolicyFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spanCollector
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|hostName
operator|!=
literal|null
operator|&&
name|port
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuring Zipkin ScribeSpanCollector using host: {} and port: {}"
argument_list|,
name|hostName
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|spanCollector
operator|=
operator|new
name|ScribeSpanCollector
argument_list|(
name|hostName
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// is there a zipkin service setup as ENV variable to auto register a scribe span collector
name|String
name|host
init|=
operator|new
name|ServiceHostPropertiesFunction
argument_list|()
operator|.
name|apply
argument_list|(
name|ZIPKIN_COLLECTOR_THRIFT_SERVICE
argument_list|)
decl_stmt|;
name|String
name|port
init|=
operator|new
name|ServicePortPropertiesFunction
argument_list|()
operator|.
name|apply
argument_list|(
name|ZIPKIN_COLLECTOR_THRIFT_SERVICE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|host
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|port
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Auto-configuring Zipkin ScribeSpanCollector using host: {} and port: {}"
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|int
name|num
init|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|spanCollector
operator|=
operator|new
name|ScribeSpanCollector
argument_list|(
name|host
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|spanCollector
argument_list|,
literal|"SpanCollector"
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientServiceMappings
operator|.
name|isEmpty
argument_list|()
operator|&&
name|serverServiceMappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No service name(s) has been mapped in clientServiceMappings or serverServiceMappings. Camel will fallback and use endpoint uris as service names."
argument_list|)
expr_stmt|;
name|useFallbackServiceNames
operator|=
literal|true
expr_stmt|;
block|}
comment|// create braves mapped per service name
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|clientServiceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|createBraveForService
argument_list|(
name|pattern
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serverServiceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|createBraveForService
argument_list|(
name|pattern
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|spanCollector
argument_list|,
name|eventNotifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// stop event notifier
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|removeEventNotifier
argument_list|(
name|eventNotifier
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|eventNotifier
argument_list|)
expr_stmt|;
comment|// stop and close collector
name|ServiceHelper
operator|.
name|stopAndShutdownService
argument_list|(
name|spanCollector
argument_list|)
expr_stmt|;
if|if
condition|(
name|spanCollector
operator|instanceof
name|Closeable
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
operator|(
name|Closeable
operator|)
name|spanCollector
argument_list|)
expr_stmt|;
block|}
comment|// clear braves
name|braves
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// remove route policy
name|camelContext
operator|.
name|getRoutePolicyFactories
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getServiceName (Exchange exchange, Endpoint endpoint, boolean server, boolean client)
specifier|private
name|String
name|getServiceName
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|boolean
name|server
parameter_list|,
name|boolean
name|client
parameter_list|)
block|{
if|if
condition|(
name|client
condition|)
block|{
return|return
name|getServiceName
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|,
name|clientServiceMappings
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|server
condition|)
block|{
return|return
name|getServiceName
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|,
name|serverServiceMappings
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getServiceName (Exchange exchange, Endpoint endpoint, Map<String, String> serviceMappings)
specifier|private
name|String
name|getServiceName
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceMappings
parameter_list|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
comment|// endpoint takes precedence over route
if|if
condition|(
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|String
name|url
init|=
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
comment|// exclude patterns take precedence
for|for
control|(
name|String
name|pattern
range|:
name|excludePatterns
control|)
block|{
if|if
condition|(
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|url
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serviceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|url
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|answer
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|// route
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|String
name|id
init|=
name|routeIdExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
comment|// exclude patterns take precedence
for|for
control|(
name|String
name|pattern
range|:
name|excludePatterns
control|)
block|{
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|id
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serviceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|id
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|answer
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|String
name|id
init|=
name|exchange
operator|.
name|getFromRouteId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
comment|// exclude patterns take precedence
for|for
control|(
name|String
name|pattern
range|:
name|excludePatterns
control|)
block|{
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|id
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serviceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|id
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|answer
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|useFallbackServiceNames
condition|)
block|{
name|String
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|endpoint
operator|.
name|getEndpointKey
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|.
name|getEndpointKey
argument_list|()
expr_stmt|;
block|}
comment|// exclude patterns take precedence
for|for
control|(
name|String
name|pattern
range|:
name|excludePatterns
control|)
block|{
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|key
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|key
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using serviceName: {} as fallback"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|answer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using serviceName: {}"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|createBraveForService (String pattern, String serviceName)
specifier|private
name|void
name|createBraveForService
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|serviceName
parameter_list|)
block|{
name|Brave
name|brave
init|=
name|braves
operator|.
name|get
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|==
literal|null
operator|&&
operator|!
name|braves
operator|.
name|containsKey
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
name|Brave
operator|.
name|Builder
name|builder
init|=
operator|new
name|Brave
operator|.
name|Builder
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|traceSampler
argument_list|(
name|Sampler
operator|.
name|create
argument_list|(
name|rate
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|spanCollector
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|spanCollector
argument_list|(
name|spanCollector
argument_list|)
expr_stmt|;
block|}
name|brave
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|braves
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
name|brave
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBrave (String serviceName)
specifier|private
name|Brave
name|getBrave
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|Brave
name|brave
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|serviceName
operator|!=
literal|null
condition|)
block|{
name|brave
operator|=
name|braves
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|brave
operator|==
literal|null
operator|&&
name|useFallbackServiceNames
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating Brave assigned to serviceName: {}"
argument_list|,
name|serviceName
operator|+
literal|" as fallback"
argument_list|)
expr_stmt|;
name|Brave
operator|.
name|Builder
name|builder
init|=
operator|new
name|Brave
operator|.
name|Builder
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|traceSampler
argument_list|(
name|Sampler
operator|.
name|create
argument_list|(
name|rate
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|spanCollector
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|spanCollector
argument_list|(
name|spanCollector
argument_list|)
expr_stmt|;
block|}
name|brave
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|braves
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
name|brave
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|brave
return|;
block|}
DECL|method|clientRequest (Brave brave, String serviceName, ExchangeSendingEvent event)
specifier|private
name|void
name|clientRequest
parameter_list|(
name|Brave
name|brave
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|ExchangeSendingEvent
name|event
parameter_list|)
block|{
name|ClientSpanThreadBinder
name|clientBinder
init|=
name|brave
operator|.
name|clientSpanThreadBinder
argument_list|()
decl_stmt|;
name|ServerSpanThreadBinder
name|serverBinder
init|=
name|brave
operator|.
name|serverSpanThreadBinder
argument_list|()
decl_stmt|;
comment|// reuse existing span if we do multiple requests from the same
name|ZipkinState
name|state
init|=
name|event
operator|.
name|getExchange
argument_list|()
operator|.
name|getProperty
argument_list|(
name|ZipkinState
operator|.
name|KEY
argument_list|,
name|ZipkinState
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
operator|new
name|ZipkinState
argument_list|()
expr_stmt|;
name|event
operator|.
name|getExchange
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ZipkinState
operator|.
name|KEY
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|// if we started from a server span then lets reuse that when we call a downstream service
name|ServerSpan
name|last
init|=
name|state
operator|.
name|peekServerSpan
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|serverBinder
operator|.
name|setCurrentSpan
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
name|brave
operator|.
name|clientRequestInterceptor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ZipkinClientRequestAdapter
argument_list|(
name|this
argument_list|,
name|serviceName
argument_list|,
name|event
operator|.
name|getExchange
argument_list|()
argument_list|,
name|event
operator|.
name|getEndpoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// store span after request
name|Span
name|span
init|=
name|clientBinder
operator|.
name|getCurrentClientSpan
argument_list|()
decl_stmt|;
name|state
operator|.
name|pushClientSpan
argument_list|(
name|span
argument_list|)
expr_stmt|;
comment|// and reset binder
name|clientBinder
operator|.
name|setCurrentSpan
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|serverBinder
operator|.
name|setCurrentSpan
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|span
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|traceId
init|=
literal|""
operator|+
name|span
operator|.
name|getTrace_id
argument_list|()
decl_stmt|;
name|String
name|spanId
init|=
literal|""
operator|+
name|span
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|parentId
init|=
name|span
operator|.
name|getParent_id
argument_list|()
operator|!=
literal|null
condition|?
literal|""
operator|+
name|span
operator|.
name|getParent_id
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|parentId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"clientRequest [service=%s, traceId=%20s, spanId=%20s, parentId=%20s]"
argument_list|,
name|serviceName
argument_list|,
name|traceId
argument_list|,
name|spanId
argument_list|,
name|parentId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"clientRequest [service=%s, traceId=%20s, spanId=%20s]"
argument_list|,
name|serviceName
argument_list|,
name|traceId
argument_list|,
name|spanId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|clientResponse (Brave brave, String serviceName, ExchangeSentEvent event)
specifier|private
name|void
name|clientResponse
parameter_list|(
name|Brave
name|brave
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|ExchangeSentEvent
name|event
parameter_list|)
block|{
name|Span
name|span
init|=
literal|null
decl_stmt|;
name|ZipkinState
name|state
init|=
name|event
operator|.
name|getExchange
argument_list|()
operator|.
name|getProperty
argument_list|(
name|ZipkinState
operator|.
name|KEY
argument_list|,
name|ZipkinState
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
comment|// only process if it was a zipkin client event
name|span
operator|=
name|state
operator|.
name|popClientSpan
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|span
operator|!=
literal|null
condition|)
block|{
name|ClientSpanThreadBinder
name|clientBinder
init|=
name|brave
operator|.
name|clientSpanThreadBinder
argument_list|()
decl_stmt|;
name|clientBinder
operator|.
name|setCurrentSpan
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|brave
operator|.
name|clientResponseInterceptor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ZipkinClientResponseAdaptor
argument_list|(
name|this
argument_list|,
name|event
operator|.
name|getExchange
argument_list|()
argument_list|,
name|event
operator|.
name|getEndpoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// and reset binder
name|clientBinder
operator|.
name|setCurrentSpan
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|traceId
init|=
literal|""
operator|+
name|span
operator|.
name|getTrace_id
argument_list|()
decl_stmt|;
name|String
name|spanId
init|=
literal|""
operator|+
name|span
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|parentId
init|=
name|span
operator|.
name|getParent_id
argument_list|()
operator|!=
literal|null
condition|?
literal|""
operator|+
name|span
operator|.
name|getParent_id
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|parentId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"clientResponse[service=%s, traceId=%20s, spanId=%20s, parentId=%20s]"
argument_list|,
name|serviceName
argument_list|,
name|traceId
argument_list|,
name|spanId
argument_list|,
name|parentId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"clientResponse[service=%s, traceId=%20s, spanId=%20s]"
argument_list|,
name|serviceName
argument_list|,
name|traceId
argument_list|,
name|spanId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|serverRequest (Brave brave, String serviceName, Exchange exchange)
specifier|private
name|ServerSpan
name|serverRequest
parameter_list|(
name|Brave
name|brave
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|ServerSpanThreadBinder
name|serverBinder
init|=
name|brave
operator|.
name|serverSpanThreadBinder
argument_list|()
decl_stmt|;
comment|// reuse existing span if we do multiple requests from the same
name|ZipkinState
name|state
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|ZipkinState
operator|.
name|KEY
argument_list|,
name|ZipkinState
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
operator|new
name|ZipkinState
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|ZipkinState
operator|.
name|KEY
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|// if we started from a another server span then lets reuse that
name|ServerSpan
name|last
init|=
name|state
operator|.
name|peekServerSpan
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|serverBinder
operator|.
name|setCurrentSpan
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
name|brave
operator|.
name|serverRequestInterceptor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ZipkinServerRequestAdapter
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
comment|// store span after request
name|ServerSpan
name|span
init|=
name|serverBinder
operator|.
name|getCurrentServerSpan
argument_list|()
decl_stmt|;
name|state
operator|.
name|pushServerSpan
argument_list|(
name|span
argument_list|)
expr_stmt|;
comment|// and reset binder
name|serverBinder
operator|.
name|setCurrentSpan
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|span
operator|!=
literal|null
operator|&&
name|span
operator|.
name|getSpan
argument_list|()
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|traceId
init|=
literal|""
operator|+
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getTrace_id
argument_list|()
decl_stmt|;
name|String
name|spanId
init|=
literal|""
operator|+
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|parentId
init|=
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getParent_id
argument_list|()
operator|!=
literal|null
condition|?
literal|""
operator|+
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getParent_id
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|parentId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"serverRequest [service=%s, traceId=%20s, spanId=%20s, parentId=%20s]"
argument_list|,
name|serviceName
argument_list|,
name|traceId
argument_list|,
name|spanId
argument_list|,
name|parentId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"serverRequest [service=%s, traceId=%20s, spanId=%20s]"
argument_list|,
name|serviceName
argument_list|,
name|traceId
argument_list|,
name|spanId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|span
return|;
block|}
DECL|method|serverResponse (Brave brave, String serviceName, Exchange exchange)
specifier|private
name|void
name|serverResponse
parameter_list|(
name|Brave
name|brave
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|ServerSpan
name|span
init|=
literal|null
decl_stmt|;
name|ZipkinState
name|state
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|ZipkinState
operator|.
name|KEY
argument_list|,
name|ZipkinState
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
comment|// only process if it was a zipkin server event
name|span
operator|=
name|state
operator|.
name|popServerSpan
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|span
operator|!=
literal|null
condition|)
block|{
name|ServerSpanThreadBinder
name|serverBinder
init|=
name|brave
operator|.
name|serverSpanThreadBinder
argument_list|()
decl_stmt|;
name|serverBinder
operator|.
name|setCurrentSpan
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|brave
operator|.
name|serverResponseInterceptor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ZipkinServerResponseAdapter
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
comment|// and reset binder
name|serverBinder
operator|.
name|setCurrentSpan
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|span
operator|.
name|getSpan
argument_list|()
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|traceId
init|=
literal|""
operator|+
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getTrace_id
argument_list|()
decl_stmt|;
name|String
name|spanId
init|=
literal|""
operator|+
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|parentId
init|=
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getParent_id
argument_list|()
operator|!=
literal|null
condition|?
literal|""
operator|+
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getParent_id
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|parentId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"serverResponse[service=%s, traceId=%20s, spanId=%20s, parentId=%20s]"
argument_list|,
name|serviceName
argument_list|,
name|traceId
argument_list|,
name|spanId
argument_list|,
name|parentId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"serverResponse[service=%s, traceId=%20s, spanId=%20s]"
argument_list|,
name|serviceName
argument_list|,
name|traceId
argument_list|,
name|spanId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|hasZipkinTraceId (Exchange exchange)
specifier|private
name|boolean
name|hasZipkinTraceId
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// must have zipkin headers to start a server event
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|ZipkinConstants
operator|.
name|TRACE_ID
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|class|ZipkinEventNotifier
specifier|private
specifier|final
class|class
name|ZipkinEventNotifier
extends|extends
name|EventNotifierSupport
block|{
annotation|@
name|Override
DECL|method|notify (EventObject event)
specifier|public
name|void
name|notify
parameter_list|(
name|EventObject
name|event
parameter_list|)
throws|throws
name|Exception
block|{
comment|// use event notifier to track events when Camel messages to endpoints
comment|// these events corresponds to Zipkin client events
comment|// client events
if|if
condition|(
name|event
operator|instanceof
name|ExchangeSendingEvent
condition|)
block|{
name|ExchangeSendingEvent
name|ese
init|=
operator|(
name|ExchangeSendingEvent
operator|)
name|event
decl_stmt|;
name|String
name|serviceName
init|=
name|getServiceName
argument_list|(
name|ese
operator|.
name|getExchange
argument_list|()
argument_list|,
name|ese
operator|.
name|getEndpoint
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Brave
name|brave
init|=
name|getBrave
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|!=
literal|null
condition|)
block|{
name|clientRequest
argument_list|(
name|brave
argument_list|,
name|serviceName
argument_list|,
name|ese
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ExchangeSentEvent
condition|)
block|{
name|ExchangeSentEvent
name|ese
init|=
operator|(
name|ExchangeSentEvent
operator|)
name|event
decl_stmt|;
name|String
name|serviceName
init|=
name|getServiceName
argument_list|(
name|ese
operator|.
name|getExchange
argument_list|()
argument_list|,
name|ese
operator|.
name|getEndpoint
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Brave
name|brave
init|=
name|getBrave
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|!=
literal|null
condition|)
block|{
name|clientResponse
argument_list|(
name|brave
argument_list|,
name|serviceName
argument_list|,
name|ese
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|isEnabled (EventObject event)
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|EventObject
name|event
parameter_list|)
block|{
return|return
name|event
operator|instanceof
name|ExchangeSendingEvent
operator|||
name|event
operator|instanceof
name|ExchangeSentEvent
operator|||
name|event
operator|instanceof
name|ExchangeCreatedEvent
operator|||
name|event
operator|instanceof
name|ExchangeCompletedEvent
operator|||
name|event
operator|instanceof
name|ExchangeFailedEvent
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ZipkinEventNotifier"
return|;
block|}
block|}
DECL|class|ZipkinRoutePolicy
specifier|private
specifier|final
class|class
name|ZipkinRoutePolicy
extends|extends
name|RoutePolicySupport
block|{
DECL|field|routeId
specifier|private
specifier|final
name|String
name|routeId
decl_stmt|;
DECL|method|ZipkinRoutePolicy (String routeId)
name|ZipkinRoutePolicy
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
name|this
operator|.
name|routeId
operator|=
name|routeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onExchangeBegin (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeBegin
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// use route policy to track events when Camel a Camel route begins/end the lifecycle of an Exchange
comment|// these events corresponds to Zipkin server events
if|if
condition|(
name|hasZipkinTraceId
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|String
name|serviceName
init|=
name|getServiceName
argument_list|(
name|exchange
argument_list|,
name|route
operator|.
name|getEndpoint
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Brave
name|brave
init|=
name|getBrave
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|!=
literal|null
condition|)
block|{
name|serverRequest
argument_list|(
name|brave
argument_list|,
name|serviceName
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add on completion after the route is done, but before the consumer writes the response
comment|// this allows us to track the zipkin event before returning the response which is the right time
name|exchange
operator|.
name|addOnCompletion
argument_list|(
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onAfterRoute
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|serviceName
init|=
name|getServiceName
argument_list|(
name|exchange
argument_list|,
name|route
operator|.
name|getEndpoint
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Brave
name|brave
init|=
name|getBrave
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|!=
literal|null
condition|)
block|{
name|serverResponse
argument_list|(
name|brave
argument_list|,
name|serviceName
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ZipkinTracerOnCompletion["
operator|+
name|routeId
operator|+
literal|"]"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

