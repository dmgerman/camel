begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.zipkin
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|zipkin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_comment
comment|/**  * Helper class.  */
end_comment

begin_class
DECL|class|ZipkinHelper
specifier|public
specifier|final
class|class
name|ZipkinHelper
block|{
DECL|method|ZipkinHelper ()
specifier|private
name|ZipkinHelper
parameter_list|()
block|{     }
DECL|method|prepareBodyForLogging (Exchange exchange, boolean streams)
specifier|public
specifier|static
name|StreamCache
name|prepareBodyForLogging
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|streams
parameter_list|)
block|{
if|if
condition|(
operator|!
name|streams
condition|)
block|{
comment|// no need to prepare if streams is not enabled
return|return
literal|null
return|;
block|}
name|Message
name|message
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|// check if body is already cached
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|StreamCache
condition|)
block|{
name|StreamCache
name|sc
init|=
operator|(
name|StreamCache
operator|)
name|body
decl_stmt|;
comment|// reset so the cache is ready to be used before processing
name|sc
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|sc
return|;
block|}
comment|// cache the body and if we could do that replace it as the new body
name|StreamCache
name|sc
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|cache
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setBody
argument_list|(
name|sc
argument_list|)
expr_stmt|;
block|}
return|return
name|sc
return|;
block|}
block|}
end_class

end_unit

