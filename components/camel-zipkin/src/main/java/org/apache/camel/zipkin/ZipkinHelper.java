begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.zipkin
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|zipkin
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|IdConversion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|SpanId
import|;
end_import

begin_comment
comment|/**  * Helper class.  */
end_comment

begin_class
DECL|class|ZipkinHelper
specifier|public
specifier|final
class|class
name|ZipkinHelper
block|{
DECL|method|ZipkinHelper ()
specifier|private
name|ZipkinHelper
parameter_list|()
block|{     }
DECL|method|getSpanId (String traceId, String spanId, String parentSpanId)
specifier|public
specifier|static
name|SpanId
name|getSpanId
parameter_list|(
name|String
name|traceId
parameter_list|,
name|String
name|spanId
parameter_list|,
name|String
name|parentSpanId
parameter_list|)
block|{
if|if
condition|(
name|parentSpanId
operator|!=
literal|null
condition|)
block|{
return|return
name|SpanId
operator|.
name|create
argument_list|(
name|IdConversion
operator|.
name|convertToLong
argument_list|(
name|traceId
argument_list|)
argument_list|,
name|IdConversion
operator|.
name|convertToLong
argument_list|(
name|spanId
argument_list|)
argument_list|,
name|IdConversion
operator|.
name|convertToLong
argument_list|(
name|parentSpanId
argument_list|)
argument_list|)
return|;
block|}
return|return
name|SpanId
operator|.
name|create
argument_list|(
name|IdConversion
operator|.
name|convertToLong
argument_list|(
name|traceId
argument_list|)
argument_list|,
name|IdConversion
operator|.
name|convertToLong
argument_list|(
name|spanId
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

