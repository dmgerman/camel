begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.zipkin
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|zipkin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|ServerSpan
import|;
end_import

begin_import
import|import
name|com
operator|.
name|twitter
operator|.
name|zipkin
operator|.
name|gen
operator|.
name|Span
import|;
end_import

begin_class
DECL|class|ZipkinState
specifier|public
class|class
name|ZipkinState
block|{
DECL|field|KEY
specifier|public
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"CamelZipkinState"
decl_stmt|;
DECL|field|clientSpans
specifier|private
specifier|final
name|Stack
argument_list|<
name|Span
argument_list|>
name|clientSpans
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|serverSpans
specifier|private
specifier|final
name|Stack
argument_list|<
name|ServerSpan
argument_list|>
name|serverSpans
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|last
specifier|private
name|Object
name|last
decl_stmt|;
DECL|method|pushClientSpan (Span span)
specifier|public
name|void
name|pushClientSpan
parameter_list|(
name|Span
name|span
parameter_list|)
block|{
name|clientSpans
operator|.
name|push
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|last
operator|=
name|span
expr_stmt|;
block|}
DECL|method|popClientSpan ()
specifier|public
name|Span
name|popClientSpan
parameter_list|()
block|{
if|if
condition|(
operator|!
name|clientSpans
operator|.
name|empty
argument_list|()
condition|)
block|{
name|Span
name|answer
init|=
name|clientSpans
operator|.
name|pop
argument_list|()
decl_stmt|;
name|last
operator|=
name|answer
expr_stmt|;
return|return
name|answer
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|pushServerSpan (ServerSpan span)
specifier|public
name|void
name|pushServerSpan
parameter_list|(
name|ServerSpan
name|span
parameter_list|)
block|{
name|serverSpans
operator|.
name|push
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|last
operator|=
name|span
expr_stmt|;
block|}
DECL|method|popServerSpan ()
specifier|public
name|ServerSpan
name|popServerSpan
parameter_list|()
block|{
if|if
condition|(
operator|!
name|serverSpans
operator|.
name|empty
argument_list|()
condition|)
block|{
name|ServerSpan
name|answer
init|=
name|serverSpans
operator|.
name|pop
argument_list|()
decl_stmt|;
name|last
operator|=
name|answer
expr_stmt|;
return|return
name|answer
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getLast ()
specifier|public
name|Object
name|getLast
parameter_list|()
block|{
return|return
name|last
return|;
block|}
block|}
end_class

end_unit

