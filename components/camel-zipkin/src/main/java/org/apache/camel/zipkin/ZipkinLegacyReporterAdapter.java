begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.zipkin
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|zipkin
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|SpanCollector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|internal
operator|.
name|DefaultSpanCodec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|twitter
operator|.
name|zipkin
operator|.
name|gen
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|zipkin
operator|.
name|internal
operator|.
name|V2SpanConverter
import|;
end_import

begin_import
import|import
name|zipkin2
operator|.
name|reporter
operator|.
name|Reporter
import|;
end_import

begin_class
DECL|class|ZipkinLegacyReporterAdapter
specifier|final
class|class
name|ZipkinLegacyReporterAdapter
implements|implements
name|SpanCollector
implements|,
name|Reporter
argument_list|<
name|zipkin2
operator|.
name|Span
argument_list|>
block|{
DECL|field|delegate
specifier|final
name|SpanCollector
name|delegate
decl_stmt|;
DECL|method|ZipkinLegacyReporterAdapter (SpanCollector delegate)
name|ZipkinLegacyReporterAdapter
parameter_list|(
name|SpanCollector
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|report (zipkin2.Span span)
annotation|@
name|Override
specifier|public
name|void
name|report
parameter_list|(
name|zipkin2
operator|.
name|Span
name|span
parameter_list|)
block|{
name|collect
argument_list|(
name|DefaultSpanCodec
operator|.
name|fromZipkin
argument_list|(
name|V2SpanConverter
operator|.
name|toSpan
argument_list|(
name|span
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect (Span span)
specifier|public
name|void
name|collect
parameter_list|(
name|Span
name|span
parameter_list|)
block|{
name|delegate
operator|.
name|collect
argument_list|(
name|span
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|addDefaultAnnotation (String key, String value)
specifier|public
name|void
name|addDefaultAnnotation
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|delegate
operator|.
name|addDefaultAnnotation
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

