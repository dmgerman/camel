begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.zipkin
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|zipkin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|Brave
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|ClientSpanThreadBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|ServerSpan
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|ServerSpanThreadBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|kristofa
operator|.
name|brave
operator|.
name|SpanCollector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|twitter
operator|.
name|zipkin
operator|.
name|gen
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeCreatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeSendingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeSentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventNotifierSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
operator|.
name|routeIdExpression
import|;
end_import

begin_comment
comment|/**  * To use zipkin with Camel then setup this {@link org.apache.camel.spi.EventNotifier} in your Camel application.  *<p/>  * Events (span) are captured for incoming and outgoing messages being sent to/from Camel.  * This means you need to configure which which Camel endpoints that maps to zipkin service names.  * The mapping can be configured using  *<ul>  *<li>route id - A Camel route id</li>  *<li>endpoint url - A Camel endpoint url</li>  *</ul>  * For both kinds you can use wildcards and regular expressions to match, which is using the rules from  * {@link EndpointHelper#matchPattern(String, String)} and {@link EndpointHelper#matchEndpoint(CamelContext, String, String)}  *<p/>  * At least one mapping must be configured, you can use<tt>*</tt> to match all incoming and outgoing messages.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managing ZipkinEventNotifier"
argument_list|)
DECL|class|ZipkinEventNotifier
specifier|public
class|class
name|ZipkinEventNotifier
extends|extends
name|EventNotifierSupport
implements|implements
name|StatefulService
block|{
DECL|field|rate
specifier|private
name|float
name|rate
init|=
literal|1.0f
decl_stmt|;
DECL|field|spanCollector
specifier|private
name|SpanCollector
name|spanCollector
decl_stmt|;
DECL|field|serviceMappings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|braves
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Brave
argument_list|>
name|braves
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|includeMessageBody
specifier|private
name|boolean
name|includeMessageBody
decl_stmt|;
DECL|method|ZipkinEventNotifier ()
specifier|public
name|ZipkinEventNotifier
parameter_list|()
block|{     }
DECL|method|getRate ()
specifier|public
name|float
name|getRate
parameter_list|()
block|{
return|return
name|rate
return|;
block|}
comment|/**      * Configures a rate that decides how many events should be traced by zpkin.      * The rate is expressed as a percentage (1.0f = 100%, 0.5f is 50%, 0.1f is 10%).      *      * @param rate minimum sample rate is 0.0001, or 0.01% of traces      */
DECL|method|setRate (float rate)
specifier|public
name|void
name|setRate
parameter_list|(
name|float
name|rate
parameter_list|)
block|{
name|this
operator|.
name|rate
operator|=
name|rate
expr_stmt|;
block|}
DECL|method|getSpanCollector ()
specifier|public
name|SpanCollector
name|getSpanCollector
parameter_list|()
block|{
return|return
name|spanCollector
return|;
block|}
comment|/**      * The collector to use for sending zipkin span events to the zipkin server.      */
DECL|method|setSpanCollector (SpanCollector spanCollector)
specifier|public
name|void
name|setSpanCollector
parameter_list|(
name|SpanCollector
name|spanCollector
parameter_list|)
block|{
name|this
operator|.
name|spanCollector
operator|=
name|spanCollector
expr_stmt|;
block|}
DECL|method|getServiceName ()
specifier|public
name|String
name|getServiceName
parameter_list|()
block|{
return|return
name|serviceMappings
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
return|;
block|}
comment|/**      * To use a global service name that matches all Camel events      */
DECL|method|setServiceName (String serviceName)
specifier|public
name|void
name|setServiceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|serviceMappings
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
block|}
DECL|method|getServiceMappings ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServiceMappings
parameter_list|()
block|{
return|return
name|serviceMappings
return|;
block|}
DECL|method|setServiceMappings (Map<String, String> serviceMappings)
specifier|public
name|void
name|setServiceMappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceMappings
parameter_list|)
block|{
name|this
operator|.
name|serviceMappings
operator|=
name|serviceMappings
expr_stmt|;
block|}
comment|/**      * Adds a service mapping that matches Camel events to the given zipkin serivce name.      * See more details at the class javadoc.      *      * @param pattern  the pattern such as route id, endpoint url      * @param serviceName the zpkin service name      */
DECL|method|addServiceMapping (String pattern, String serviceName)
specifier|public
name|void
name|addServiceMapping
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|serviceName
parameter_list|)
block|{
name|serviceMappings
operator|.
name|put
argument_list|(
name|pattern
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether to include the Camel message body in the zipkin traces"
argument_list|)
DECL|method|isIncludeMessageBody ()
specifier|public
name|boolean
name|isIncludeMessageBody
parameter_list|()
block|{
return|return
name|includeMessageBody
return|;
block|}
comment|/**      * Whether to include the Camel message body in the zipkin traces.      *<p/>      * This is not recommended for production usage, or when having big payloads. You can limit the size by      * configuring the<a href="http://camel.apache.org/how-do-i-set-the-max-chars-when-debug-logging-messages-in-camel.html">max debug log size</a>.      */
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether to include the Camel message body in the zipkin traces"
argument_list|)
DECL|method|setIncludeMessageBody (boolean includeMessageBody)
specifier|public
name|void
name|setIncludeMessageBody
parameter_list|(
name|boolean
name|includeMessageBody
parameter_list|)
block|{
name|this
operator|.
name|includeMessageBody
operator|=
name|includeMessageBody
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceMappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"At least one service name must be configured"
argument_list|)
throw|;
block|}
comment|// create braves mapped per service name
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serviceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Brave
name|brave
init|=
name|braves
operator|.
name|get
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|==
literal|null
condition|)
block|{
name|Brave
operator|.
name|Builder
name|builder
init|=
operator|new
name|Brave
operator|.
name|Builder
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|traceSampler
argument_list|(
name|Sampler
operator|.
name|create
argument_list|(
name|rate
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|spanCollector
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|spanCollector
argument_list|(
name|spanCollector
argument_list|)
expr_stmt|;
block|}
name|brave
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|braves
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
name|brave
argument_list|)
expr_stmt|;
block|}
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|spanCollector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
comment|// stop and close collector
name|ServiceHelper
operator|.
name|stopAndShutdownService
argument_list|(
name|spanCollector
argument_list|)
expr_stmt|;
if|if
condition|(
name|spanCollector
operator|instanceof
name|Closeable
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
operator|(
name|Closeable
operator|)
name|spanCollector
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isEnabled (EventObject event)
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|EventObject
name|event
parameter_list|)
block|{
return|return
name|event
operator|instanceof
name|ExchangeSendingEvent
operator|||
name|event
operator|instanceof
name|ExchangeSentEvent
operator|||
name|event
operator|instanceof
name|ExchangeCreatedEvent
operator|||
name|event
operator|instanceof
name|ExchangeCompletedEvent
operator|||
name|event
operator|instanceof
name|ExchangeFailedEvent
return|;
block|}
DECL|method|getServiceName (Exchange exchange, Endpoint endpoint)
specifier|private
name|String
name|getServiceName
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
name|String
name|id
init|=
name|routeIdExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serviceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|pattern
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|answer
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|exchange
operator|.
name|getFromRouteId
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serviceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|pattern
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|answer
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|String
name|url
init|=
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serviceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|url
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|answer
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|url
init|=
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serviceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|url
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|answer
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getBrave (String serviceName)
specifier|private
name|Brave
name|getBrave
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
if|if
condition|(
name|serviceName
operator|!=
literal|null
condition|)
block|{
return|return
name|braves
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|notify (EventObject event)
specifier|public
name|void
name|notify
parameter_list|(
name|EventObject
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|instanceof
name|ExchangeSendingEvent
condition|)
block|{
name|ExchangeSendingEvent
name|ese
init|=
operator|(
name|ExchangeSendingEvent
operator|)
name|event
decl_stmt|;
name|String
name|serviceName
init|=
name|getServiceName
argument_list|(
name|ese
operator|.
name|getExchange
argument_list|()
argument_list|,
name|ese
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|Brave
name|brave
init|=
name|getBrave
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|!=
literal|null
condition|)
block|{
name|clientRequest
argument_list|(
name|brave
argument_list|,
name|serviceName
argument_list|,
name|ese
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ExchangeSentEvent
condition|)
block|{
name|ExchangeSentEvent
name|ese
init|=
operator|(
name|ExchangeSentEvent
operator|)
name|event
decl_stmt|;
name|String
name|serviceName
init|=
name|getServiceName
argument_list|(
name|ese
operator|.
name|getExchange
argument_list|()
argument_list|,
name|ese
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|Brave
name|brave
init|=
name|getBrave
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|!=
literal|null
condition|)
block|{
name|clientResponse
argument_list|(
name|brave
argument_list|,
name|serviceName
argument_list|,
name|ese
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ExchangeCreatedEvent
condition|)
block|{
name|ExchangeCreatedEvent
name|ece
init|=
operator|(
name|ExchangeCreatedEvent
operator|)
name|event
decl_stmt|;
name|String
name|serviceName
init|=
name|getServiceName
argument_list|(
name|ece
operator|.
name|getExchange
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Brave
name|brave
init|=
name|getBrave
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|!=
literal|null
condition|)
block|{
name|serverRequest
argument_list|(
name|brave
argument_list|,
name|serviceName
argument_list|,
name|ece
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ExchangeCompletedEvent
condition|)
block|{
name|ExchangeCompletedEvent
name|ece
init|=
operator|(
name|ExchangeCompletedEvent
operator|)
name|event
decl_stmt|;
name|String
name|serviceName
init|=
name|getServiceName
argument_list|(
name|ece
operator|.
name|getExchange
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Brave
name|brave
init|=
name|getBrave
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|!=
literal|null
condition|)
block|{
name|serverResponse
argument_list|(
name|brave
argument_list|,
name|serviceName
argument_list|,
name|ece
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ExchangeFailedEvent
condition|)
block|{
name|ExchangeFailedEvent
name|efe
init|=
operator|(
name|ExchangeFailedEvent
operator|)
name|event
decl_stmt|;
name|String
name|serviceName
init|=
name|getServiceName
argument_list|(
name|efe
operator|.
name|getExchange
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Brave
name|brave
init|=
name|getBrave
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brave
operator|!=
literal|null
condition|)
block|{
name|serverResponse
argument_list|(
name|brave
argument_list|,
name|serviceName
argument_list|,
name|efe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|clientRequest (Brave brave, String serviceName, ExchangeSendingEvent event)
specifier|private
name|void
name|clientRequest
parameter_list|(
name|Brave
name|brave
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|ExchangeSendingEvent
name|event
parameter_list|)
block|{
name|ClientSpanThreadBinder
name|binder
init|=
name|brave
operator|.
name|clientSpanThreadBinder
argument_list|()
decl_stmt|;
name|brave
operator|.
name|clientRequestInterceptor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ZipkinClientRequestAdapter
argument_list|(
name|this
argument_list|,
name|serviceName
argument_list|,
name|event
operator|.
name|getExchange
argument_list|()
argument_list|,
name|event
operator|.
name|getEndpoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Span
name|span
init|=
name|binder
operator|.
name|getCurrentClientSpan
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|"CamelZipkinClientSpan-"
operator|+
name|serviceName
decl_stmt|;
name|event
operator|.
name|getExchange
argument_list|()
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|span
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"clientRequest[service={}, spanId={}]"
argument_list|,
name|serviceName
argument_list|,
name|span
operator|!=
literal|null
condition|?
name|span
operator|.
name|getId
argument_list|()
else|:
literal|"<null>"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clientResponse (Brave brave, String serviceName, ExchangeSentEvent event)
specifier|private
name|void
name|clientResponse
parameter_list|(
name|Brave
name|brave
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|ExchangeSentEvent
name|event
parameter_list|)
block|{
name|ClientSpanThreadBinder
name|binder
init|=
name|brave
operator|.
name|clientSpanThreadBinder
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|"CamelZipkinClientSpan-"
operator|+
name|serviceName
decl_stmt|;
name|Span
name|span
init|=
name|event
operator|.
name|getExchange
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|Span
operator|.
name|class
argument_list|)
decl_stmt|;
name|binder
operator|.
name|setCurrentSpan
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|brave
operator|.
name|clientResponseInterceptor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ZipkinClientResponseAdaptor
argument_list|(
name|this
argument_list|,
name|event
operator|.
name|getExchange
argument_list|()
argument_list|,
name|event
operator|.
name|getEndpoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|binder
operator|.
name|setCurrentSpan
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"clientResponse[service={}, spanId={}]"
argument_list|,
name|serviceName
argument_list|,
name|span
operator|!=
literal|null
condition|?
name|span
operator|.
name|getId
argument_list|()
else|:
literal|"<null>"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|serverRequest (Brave brave, String serviceName, ExchangeCreatedEvent event)
specifier|private
name|void
name|serverRequest
parameter_list|(
name|Brave
name|brave
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|ExchangeCreatedEvent
name|event
parameter_list|)
block|{
name|ServerSpanThreadBinder
name|binder
init|=
name|brave
operator|.
name|serverSpanThreadBinder
argument_list|()
decl_stmt|;
name|brave
operator|.
name|serverRequestInterceptor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ZipkinServerRequestAdapter
argument_list|(
name|this
argument_list|,
name|event
operator|.
name|getExchange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ServerSpan
name|span
init|=
name|binder
operator|.
name|getCurrentServerSpan
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|"CamelZipkinServerSpan-"
operator|+
name|serviceName
decl_stmt|;
name|event
operator|.
name|getExchange
argument_list|()
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|span
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"serverRequest[service={}, spanId={}]"
argument_list|,
name|serviceName
argument_list|,
name|span
operator|!=
literal|null
condition|?
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getId
argument_list|()
else|:
literal|"<null>"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|serverResponse (Brave brave, String serviceName, ExchangeCompletedEvent event)
specifier|private
name|void
name|serverResponse
parameter_list|(
name|Brave
name|brave
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|ExchangeCompletedEvent
name|event
parameter_list|)
block|{
name|ServerSpanThreadBinder
name|binder
init|=
name|brave
operator|.
name|serverSpanThreadBinder
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|"CamelZipkinServerSpan-"
operator|+
name|serviceName
decl_stmt|;
name|ServerSpan
name|span
init|=
name|event
operator|.
name|getExchange
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|ServerSpan
operator|.
name|class
argument_list|)
decl_stmt|;
name|binder
operator|.
name|setCurrentSpan
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|brave
operator|.
name|serverResponseInterceptor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ZipkinServerResponseAdapter
argument_list|(
name|this
argument_list|,
name|event
operator|.
name|getExchange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|binder
operator|.
name|setCurrentSpan
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"serverResponse[service={}, spanId={}, status=exchangeCompleted]"
argument_list|,
name|serviceName
argument_list|,
name|span
operator|!=
literal|null
condition|?
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getId
argument_list|()
else|:
literal|"<null>"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|serverResponse (Brave brave, String serviceName, ExchangeFailedEvent event)
specifier|private
name|void
name|serverResponse
parameter_list|(
name|Brave
name|brave
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|ExchangeFailedEvent
name|event
parameter_list|)
block|{
name|ServerSpanThreadBinder
name|binder
init|=
name|brave
operator|.
name|serverSpanThreadBinder
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|"CamelZipkinServerSpan-"
operator|+
name|serviceName
decl_stmt|;
name|ServerSpan
name|span
init|=
name|event
operator|.
name|getExchange
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|ServerSpan
operator|.
name|class
argument_list|)
decl_stmt|;
name|binder
operator|.
name|setCurrentSpan
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|brave
operator|.
name|serverResponseInterceptor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ZipkinServerResponseAdapter
argument_list|(
name|this
argument_list|,
name|event
operator|.
name|getExchange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|binder
operator|.
name|setCurrentSpan
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"serverResponse[service={}, spanId={}, status=exchangeFailed]"
argument_list|,
name|serviceName
argument_list|,
name|span
operator|!=
literal|null
condition|?
name|span
operator|.
name|getSpan
argument_list|()
operator|.
name|getId
argument_list|()
else|:
literal|"<null>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

