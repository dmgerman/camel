begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kudu
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduScannerIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|KuduUtils
specifier|public
specifier|final
class|class
name|KuduUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KuduUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|KuduUtils ()
specifier|private
name|KuduUtils
parameter_list|()
block|{     }
comment|/**      * Convert results to a more Java friendly type      */
DECL|method|scannerToList (KuduTable table, KuduScanner scanner)
specifier|public
specifier|static
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scannerToList
parameter_list|(
name|KuduTable
name|table
parameter_list|,
name|KuduScanner
name|scanner
parameter_list|)
block|{
name|KuduScannerIterator
name|it
init|=
name|scanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RowResult
name|row
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|r
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnSchema
name|columnSchema
range|:
name|table
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumns
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|columnSchema
operator|.
name|getName
argument_list|()
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|row
operator|.
name|getObject
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|doScan (String tableName, KuduClient connection)
specifier|public
specifier|static
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|doScan
parameter_list|(
name|String
name|tableName
parameter_list|,
name|KuduClient
name|connection
parameter_list|)
throws|throws
name|KuduException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Scanning table {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|KuduTable
name|table
init|=
name|connection
operator|.
name|openTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projectColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnSchema
name|columnSchema
range|:
name|table
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|projectColumns
operator|.
name|add
argument_list|(
name|columnSchema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|KuduScanner
name|scanner
init|=
name|connection
operator|.
name|newScannerBuilder
argument_list|(
name|table
argument_list|)
operator|.
name|setProjectedColumnNames
argument_list|(
name|projectColumns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|KuduUtils
operator|.
name|scannerToList
argument_list|(
name|table
argument_list|,
name|scanner
argument_list|)
return|;
block|}
block|}
end_class

end_unit

