begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kudu
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|CreateTableOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|Insert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|PartialRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AbstractKuduTest
specifier|public
class|class
name|AbstractKuduTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractKuduTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
comment|/**      * This is the class that connects our Camel test with the      * Kudu testing framework to spin up a Kudu local endpoint.      */
DECL|field|ikc
specifier|public
name|IntegrationKuduConfiguration
name|ikc
init|=
operator|new
name|IntegrationKuduConfiguration
argument_list|()
decl_stmt|;
DECL|field|id
specifier|private
name|Integer
name|id
init|=
literal|1
decl_stmt|;
DECL|method|createTestTable (String tableName)
specifier|protected
name|void
name|createTestTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating table "
operator|+
name|tableName
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|KuduClient
name|client
init|=
name|ikc
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnSchema
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id"
argument_list|,
literal|"title"
argument_list|,
literal|"name"
argument_list|,
literal|"lastname"
argument_list|,
literal|"address"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Type
name|type
init|=
name|i
operator|==
literal|0
condition|?
name|Type
operator|.
name|INT32
else|:
name|Type
operator|.
name|STRING
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|type
argument_list|)
operator|.
name|key
argument_list|(
name|i
operator|==
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|rangeKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rangeKeys
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|Schema
argument_list|(
name|columns
argument_list|)
argument_list|,
operator|new
name|CreateTableOptions
argument_list|()
operator|.
name|setRangePartitionColumns
argument_list|(
name|rangeKeys
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ikc
operator|.
name|setupCamelContext
argument_list|(
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|deleteTestTable
argument_list|(
literal|"TestTable"
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteTestTable (String tableName)
specifier|protected
name|void
name|deleteTestTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing table "
operator|+
name|tableName
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|KuduClient
name|client
init|=
name|ikc
operator|.
name|getClient
argument_list|()
decl_stmt|;
try|try
block|{
name|client
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
block|}
DECL|method|insertRowInTestTable (String tableName)
specifier|protected
name|void
name|insertRowInTestTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Inserting row on table "
operator|+
name|tableName
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|KuduClient
name|client
init|=
name|ikc
operator|.
name|getClient
argument_list|()
decl_stmt|;
try|try
block|{
name|KuduTable
name|table
init|=
name|client
operator|.
name|openTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Insert
name|insert
init|=
name|table
operator|.
name|newInsert
argument_list|()
decl_stmt|;
name|PartialRow
name|row
init|=
name|insert
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|addInt
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|row
operator|.
name|addString
argument_list|(
literal|"title"
argument_list|,
literal|"Mr."
argument_list|)
expr_stmt|;
name|row
operator|.
name|addString
argument_list|(
literal|"name"
argument_list|,
literal|"Samuel"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addString
argument_list|(
literal|"lastname"
argument_list|,
literal|"Smith"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addString
argument_list|(
literal|"address"
argument_list|,
literal|"4359  Plainfield Avenue"
argument_list|)
expr_stmt|;
name|client
operator|.
name|newSession
argument_list|()
operator|.
name|apply
argument_list|(
name|insert
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KuduException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Row inserted on table "
operator|+
name|tableName
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

