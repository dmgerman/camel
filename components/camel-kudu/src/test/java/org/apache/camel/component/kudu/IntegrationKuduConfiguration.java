begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kudu
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|test
operator|.
name|KuduTestHarness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Use this class to run tests agains a local basic Kudu server. This  * local kudu server is spinned up by  * https://kudu.apache.org/docs/developing.html#_using_the_kudu_binary_test_jar  */
end_comment

begin_class
DECL|class|IntegrationKuduConfiguration
specifier|public
class|class
name|IntegrationKuduConfiguration
extends|extends
name|KuduTestHarness
block|{
DECL|method|IntegrationKuduConfiguration ()
specifier|public
name|IntegrationKuduConfiguration
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Setup the Camel Context and make sure all KuduEndpoints use the      * special KuduClient that connects to the local server.      *      * @param context      */
DECL|method|setupCamelContext (CamelContext context)
specifier|public
name|void
name|setupCamelContext
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|KuduClient
name|client
init|=
name|this
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|context
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
if|if
condition|(
name|endpoint
operator|instanceof
name|KuduEndpoint
condition|)
block|{
operator|(
operator|(
name|KuduEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|setKuduClient
argument_list|(
name|this
operator|.
name|getClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Needed because we have to shutdown the local cluster, but as      * Camel already closed the client, it will always throw an IllegalStateException.      */
annotation|@
name|Override
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|//Camel already closed the client so an exception will be thrown
comment|//no need to worry
block|}
block|}
block|}
end_class

end_unit

