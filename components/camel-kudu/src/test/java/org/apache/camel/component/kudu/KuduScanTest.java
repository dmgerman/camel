begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kudu
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|KuduScanTest
specifier|public
class|class
name|KuduScanTest
extends|extends
name|AbstractKuduTest
block|{
DECL|field|TABLE
specifier|public
specifier|static
specifier|final
name|String
name|TABLE
init|=
literal|"ScanTableTest"
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|value
operator|=
literal|"mock:result"
argument_list|)
DECL|field|successEndpoint
specifier|public
name|MockEndpoint
name|successEndpoint
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|value
operator|=
literal|"mock:error"
argument_list|)
DECL|field|errorEndpoint
specifier|public
name|MockEndpoint
name|errorEndpoint
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"mock:error"
argument_list|)
operator|.
name|redeliveryDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//integration test route
name|from
argument_list|(
literal|"direct:scan"
argument_list|)
operator|.
name|to
argument_list|(
literal|"kudu:localhost:7051/"
operator|+
name|TABLE
operator|+
literal|"?operation=scan"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:scan2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"kudu:localhost:7051/TestTable?operation=scan"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|deleteTestTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|createTestTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|insertRowInTestTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|insertRowInTestTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|scan ()
specifier|public
name|void
name|scan
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|errorEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|successEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:scan"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|errorEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|successEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|successEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exchanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|results
init|=
name|exchanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of results."
argument_list|,
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// INT32 id=??, STRING title=Mr.,
comment|// STRING name=Samuel, STRING lastname=Smith,
comment|// STRING address=4359  Plainfield Avenue
name|assertTrue
argument_list|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mr."
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Samuel"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"lastname"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4359  Plainfield Avenue"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"address"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// INT32 id=??, STRING title=Mr.,
comment|// STRING name=Samuel, STRING lastname=Smith,
comment|// STRING address=4359  Plainfield Avenue
name|assertTrue
argument_list|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mr."
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Samuel"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"lastname"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4359  Plainfield Avenue"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"address"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|scanTable ()
specifier|public
name|void
name|scanTable
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|createTestTable
argument_list|(
literal|"TestTable"
argument_list|)
expr_stmt|;
name|insertRowInTestTable
argument_list|(
literal|"TestTable"
argument_list|)
expr_stmt|;
name|errorEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|successEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:scan2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|errorEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|successEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|successEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of results."
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// INT32 id=??, STRING title=Mr.,
comment|// STRING name=Samuel, STRING lastname=Smith,
comment|// STRING address=4359  Plainfield Avenue
name|assertTrue
argument_list|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mr."
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Samuel"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"lastname"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4359  Plainfield Avenue"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"address"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

