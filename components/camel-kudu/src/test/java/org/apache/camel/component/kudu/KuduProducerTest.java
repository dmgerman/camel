begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kudu
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|CreateTableOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|KuduProducerTest
specifier|public
class|class
name|KuduProducerTest
extends|extends
name|AbstractKuduTest
block|{
annotation|@
name|EndpointInject
argument_list|(
name|value
operator|=
literal|"mock:result"
argument_list|)
DECL|field|successEndpoint
specifier|public
name|MockEndpoint
name|successEndpoint
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|value
operator|=
literal|"mock:error"
argument_list|)
DECL|field|errorEndpoint
specifier|public
name|MockEndpoint
name|errorEndpoint
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"mock:error"
argument_list|)
operator|.
name|redeliveryDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//integration test route
name|from
argument_list|(
literal|"direct:create"
argument_list|)
operator|.
name|to
argument_list|(
literal|"kudu:localhost:7051/TestTable?operation=create_table"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:insert"
argument_list|)
operator|.
name|to
argument_list|(
literal|"kudu:localhost:7051/TestTable?operation=insert"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:data"
argument_list|)
operator|.
name|to
argument_list|(
literal|"kudu:localhost:7051/TestTable?operation=insert"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|resetEndpoints ()
specifier|public
name|void
name|resetEndpoints
parameter_list|()
block|{
name|errorEndpoint
operator|.
name|reset
argument_list|()
expr_stmt|;
name|successEndpoint
operator|.
name|reset
argument_list|()
expr_stmt|;
name|deleteTestTable
argument_list|(
literal|"TestTable"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createTable ()
specifier|public
name|void
name|createTable
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|errorEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|successEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnSchema
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id"
argument_list|,
literal|"title"
argument_list|,
literal|"name"
argument_list|,
literal|"lastname"
argument_list|,
literal|"address"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|key
argument_list|(
name|i
operator|==
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|rangeKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rangeKeys
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|KuduConstants
operator|.
name|CAMEL_KUDU_SCHEMA
argument_list|,
operator|new
name|Schema
argument_list|(
name|columns
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|KuduConstants
operator|.
name|CAMEL_KUDU_TABLE_OPTIONS
argument_list|,
operator|new
name|CreateTableOptions
argument_list|()
operator|.
name|setRangePartitionColumns
argument_list|(
name|rangeKeys
argument_list|)
argument_list|)
expr_stmt|;
name|template
argument_list|()
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct://create"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|errorEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|successEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertRow ()
specifier|public
name|void
name|insertRow
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|createTestTable
argument_list|(
literal|"TestTable"
argument_list|)
expr_stmt|;
name|errorEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|successEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Create a sample row that can be inserted in the test table
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
literal|"Mr."
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Samuel"
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"lastname"
argument_list|,
literal|"Smith"
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"address"
argument_list|,
literal|"4359  Plainfield Avenue"
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:insert"
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|errorEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|successEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertRowDifferentData ()
specifier|public
name|void
name|insertRowDifferentData
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|createTestTable
argument_list|(
literal|"TestTable"
argument_list|)
expr_stmt|;
name|errorEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|successEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"_integer"
argument_list|,
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"_long"
argument_list|,
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|(
literal|500
argument_list|,
literal|600
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"_double"
argument_list|,
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextDouble
argument_list|(
literal|9000
argument_list|,
literal|9999
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"_float"
argument_list|,
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
literal|499
operator|-
literal|100
operator|)
operator|+
literal|100
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:data"
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|errorEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|successEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

