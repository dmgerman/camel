begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.azure.blob
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|azure
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|AccessCondition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobListingDetails
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlockEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlockListingFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudAppendBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudPageBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|ListBlobItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|PageRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|azure
operator|.
name|common
operator|.
name|ExchangeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Producer which sends messages to the Azure Storage Blob Service  */
end_comment

begin_class
DECL|class|BlobServiceProducer
specifier|public
class|class
name|BlobServiceProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobServiceProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|BlobServiceProducer (final Endpoint endpoint)
specifier|public
name|BlobServiceProducer
parameter_list|(
specifier|final
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|BlobServiceOperations
name|operation
init|=
name|determineOperation
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|operation
operator|=
name|BlobServiceOperations
operator|.
name|listBlobs
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|getBlob
case|:
name|getBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|deleteBlob
case|:
name|deleteBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|listBlobs
case|:
name|listBlobs
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|updateBlockBlob
case|:
name|updateBlockBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|uploadBlobBlocks
case|:
name|uploadBlobBlocks
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|commitBlobBlockList
case|:
name|commitBlobBlockList
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|getBlobBlockList
case|:
name|getBlobBlockList
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|createAppendBlob
case|:
name|createAppendBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|updateAppendBlob
case|:
name|updateAppendBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|createPageBlob
case|:
name|createPageBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|updatePageBlob
case|:
name|uploadPageBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|resizePageBlob
case|:
name|resizePageBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|clearPageBlob
case|:
name|clearPageBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|getPageBlobRanges
case|:
name|getPageBlobRanges
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|listBlobs (Exchange exchange)
specifier|private
name|void
name|listBlobs
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudBlobContainer
name|client
init|=
name|BlobServiceUtil
operator|.
name|createBlobContainerClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Getting the blob list from the container [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getContainerName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|BlobServiceConfiguration
name|cfg
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|EnumSet
argument_list|<
name|BlobListingDetails
argument_list|>
name|details
init|=
operator|(
name|EnumSet
argument_list|<
name|BlobListingDetails
argument_list|>
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|BLOB_LISTING_DETAILS
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|ListBlobItem
argument_list|>
name|items
init|=
name|client
operator|.
name|listBlobs
argument_list|(
name|cfg
operator|.
name|getBlobPrefix
argument_list|()
argument_list|,
name|cfg
operator|.
name|isUseFlatListing
argument_list|()
argument_list|,
name|details
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
decl_stmt|;
name|ExchangeUtil
operator|.
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
operator|.
name|setBody
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
DECL|method|updateBlockBlob (Exchange exchange)
specifier|private
name|void
name|updateBlockBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudBlockBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createBlockBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|configureCloudBlobForWrite
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|getInputStreamFromExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Putting a block blob [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|upload
argument_list|(
name|inputStream
argument_list|,
operator|-
literal|1
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeInputStreamIfNeeded
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|uploadBlobBlocks (Exchange exchange)
specifier|private
name|void
name|uploadBlobBlocks
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|object
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlobBlock
argument_list|>
name|blobBlocks
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|List
condition|)
block|{
name|blobBlocks
operator|=
operator|(
name|List
argument_list|<
name|BlobBlock
argument_list|>
operator|)
name|blobBlocks
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|BlobBlock
condition|)
block|{
name|blobBlocks
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|BlobBlock
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blobBlocks
operator|==
literal|null
operator|||
name|blobBlocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal storageBlocks payload"
argument_list|)
throw|;
block|}
name|CloudBlockBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createBlockBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|configureCloudBlobForWrite
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Putting a blob [{}] from blocks from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BlockEntry
argument_list|>
name|blockEntries
init|=
operator|new
name|LinkedList
argument_list|<
name|BlockEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlobBlock
name|blobBlock
range|:
name|blobBlocks
control|)
block|{
name|blockEntries
operator|.
name|add
argument_list|(
name|blobBlock
operator|.
name|getBlockEntry
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|uploadBlock
argument_list|(
name|blobBlock
operator|.
name|getBlockEntry
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|blobBlock
operator|.
name|getBlockStream
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|commitBlockListLater
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|COMMIT_BLOCK_LIST_LATER
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|!=
name|commitBlockListLater
condition|)
block|{
name|client
operator|.
name|commitBlockList
argument_list|(
name|blockEntries
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|commitBlobBlockList (Exchange exchange)
specifier|private
name|void
name|commitBlobBlockList
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|object
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockEntry
argument_list|>
name|blockEntries
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|List
condition|)
block|{
name|blockEntries
operator|=
operator|(
name|List
argument_list|<
name|BlockEntry
argument_list|>
operator|)
name|blockEntries
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|BlockEntry
condition|)
block|{
name|blockEntries
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|BlockEntry
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockEntries
operator|==
literal|null
operator|||
name|blockEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal commit block list payload"
argument_list|)
throw|;
block|}
name|CloudBlockBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createBlockBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Putting a blob [{}] block list from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|client
operator|.
name|commitBlockList
argument_list|(
name|blockEntries
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlob (Exchange exchange)
specifier|private
name|void
name|getBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|BlobServiceUtil
operator|.
name|getBlob
argument_list|(
name|exchange
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteBlob (Exchange exchange)
specifier|private
name|void
name|deleteBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getBlobType
argument_list|()
condition|)
block|{
case|case
name|blockblob
case|:
name|deleteBlockBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|appendblob
case|:
name|deleteAppendBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|pageblob
case|:
name|deletePageBlob
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported blob type"
argument_list|)
throw|;
block|}
block|}
DECL|method|getBlobBlockList (Exchange exchange)
specifier|private
name|void
name|getBlobBlockList
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudBlockBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createBlockBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Getting the blob block list [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|BlockListingFilter
name|filter
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|BlockListingFilter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
name|BlockListingFilter
operator|.
name|COMMITTED
expr_stmt|;
block|}
name|List
argument_list|<
name|BlockEntry
argument_list|>
name|blockEntries
init|=
name|client
operator|.
name|downloadBlockList
argument_list|(
name|filter
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
decl_stmt|;
name|ExchangeUtil
operator|.
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
operator|.
name|setBody
argument_list|(
name|blockEntries
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteBlockBlob (Exchange exchange)
specifier|private
name|void
name|deleteBlockBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudBlockBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createBlockBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doDeleteBlock
argument_list|(
name|client
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|createAppendBlob (Exchange exchange)
specifier|private
name|void
name|createAppendBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudAppendBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createAppendBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|getAccessCond
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Default: do not reset the blob content if the blob already exists
name|opts
operator|.
name|setAccessCond
argument_list|(
name|AccessCondition
operator|.
name|generateIfNotExistsCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doCreateAppendBlob
argument_list|(
name|client
argument_list|,
name|opts
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|doCreateAppendBlob (CloudAppendBlob client, BlobServiceRequestOptions opts, Exchange exchange)
specifier|private
name|void
name|doCreateAppendBlob
parameter_list|(
name|CloudAppendBlob
name|client
parameter_list|,
name|BlobServiceRequestOptions
name|opts
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating an append blob [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|createOrReplace
argument_list|(
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getHttpStatusCode
argument_list|()
operator|!=
literal|409
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|ExchangeUtil
operator|.
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
operator|.
name|setHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|APPEND_BLOCK_CREATED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
DECL|method|updateAppendBlob (Exchange exchange)
specifier|private
name|void
name|updateAppendBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudAppendBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createAppendBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|configureCloudBlobForWrite
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|getAccessCond
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Default: do not reset the blob content if the blob already exists
name|opts
operator|.
name|setAccessCond
argument_list|(
name|AccessCondition
operator|.
name|generateIfNotExistsCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|appendBlobCreated
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|APPEND_BLOCK_CREATED
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|!=
name|appendBlobCreated
condition|)
block|{
name|doCreateAppendBlob
argument_list|(
name|client
argument_list|,
name|opts
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|inputStream
init|=
name|getInputStreamFromExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|appendBlock
argument_list|(
name|inputStream
argument_list|,
operator|-
literal|1
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeInputStreamIfNeeded
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteAppendBlob (Exchange exchange)
specifier|private
name|void
name|deleteAppendBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudAppendBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createAppendBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doDeleteBlock
argument_list|(
name|client
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|createPageBlob (Exchange exchange)
specifier|private
name|void
name|createPageBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudPageBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createPageBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|getAccessCond
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Default: do not reset the blob content if the blob already exists
name|opts
operator|.
name|setAccessCond
argument_list|(
name|AccessCondition
operator|.
name|generateIfNotExistsCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doCreatePageBlob
argument_list|(
name|client
argument_list|,
name|opts
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|doCreatePageBlob (CloudPageBlob client, BlobServiceRequestOptions opts, Exchange exchange)
specifier|private
name|void
name|doCreatePageBlob
parameter_list|(
name|CloudPageBlob
name|client
parameter_list|,
name|BlobServiceRequestOptions
name|opts
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating a page blob [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|Long
name|pageSize
init|=
name|getPageBlobSize
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|create
argument_list|(
name|pageSize
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getHttpStatusCode
argument_list|()
operator|!=
literal|409
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|ExchangeUtil
operator|.
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
operator|.
name|setHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|PAGE_BLOCK_CREATED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadPageBlob (Exchange exchange)
specifier|private
name|void
name|uploadPageBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Updating a page blob [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|CloudPageBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createPageBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|configureCloudBlobForWrite
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|getAccessCond
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Default: do not reset the blob content if the blob already exists
name|opts
operator|.
name|setAccessCond
argument_list|(
name|AccessCondition
operator|.
name|generateIfNotExistsCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|pageBlobCreated
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|PAGE_BLOCK_CREATED
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|!=
name|pageBlobCreated
condition|)
block|{
name|doCreatePageBlob
argument_list|(
name|client
argument_list|,
name|opts
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|inputStream
init|=
name|getInputStreamFromExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|doUpdatePageBlob
argument_list|(
name|client
argument_list|,
name|inputStream
argument_list|,
name|opts
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|resizePageBlob (Exchange exchange)
specifier|private
name|void
name|resizePageBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Resizing a page blob [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|CloudPageBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createPageBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Long
name|pageSize
init|=
name|getPageBlobSize
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|client
operator|.
name|resize
argument_list|(
name|pageSize
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|clearPageBlob (Exchange exchange)
specifier|private
name|void
name|clearPageBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Clearing a page blob [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|CloudPageBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createPageBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Long
name|blobOffset
init|=
name|getConfiguration
argument_list|()
operator|.
name|getBlobOffset
argument_list|()
decl_stmt|;
name|Long
name|blobDataLength
init|=
name|getConfiguration
argument_list|()
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
name|PageRange
name|range
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|PAGE_BLOB_RANGE
argument_list|,
name|PageRange
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|blobOffset
operator|=
name|range
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
name|blobDataLength
operator|=
name|range
operator|.
name|getEndOffset
argument_list|()
operator|-
name|range
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blobDataLength
operator|==
literal|null
condition|)
block|{
name|blobDataLength
operator|=
name|blobOffset
operator|==
literal|0
condition|?
name|getPageBlobSize
argument_list|(
name|exchange
argument_list|)
else|:
literal|512L
expr_stmt|;
block|}
name|client
operator|.
name|clearPages
argument_list|(
name|blobOffset
argument_list|,
name|blobDataLength
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doUpdatePageBlob (CloudPageBlob client, InputStream is, BlobServiceRequestOptions opts, Exchange exchange)
specifier|private
name|void
name|doUpdatePageBlob
parameter_list|(
name|CloudPageBlob
name|client
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|BlobServiceRequestOptions
name|opts
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Long
name|blobOffset
init|=
name|getConfiguration
argument_list|()
operator|.
name|getBlobOffset
argument_list|()
decl_stmt|;
name|Long
name|blobDataLength
init|=
name|getConfiguration
argument_list|()
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
name|PageRange
name|range
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|PAGE_BLOB_RANGE
argument_list|,
name|PageRange
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|blobOffset
operator|=
name|range
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
name|blobDataLength
operator|=
name|range
operator|.
name|getEndOffset
argument_list|()
operator|-
name|range
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blobDataLength
operator|==
literal|null
condition|)
block|{
name|blobDataLength
operator|=
operator|(
name|long
operator|)
name|is
operator|.
name|available
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|client
operator|.
name|uploadPages
argument_list|(
name|is
argument_list|,
name|blobOffset
argument_list|,
name|blobDataLength
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeInputStreamIfNeeded
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPageBlobRanges (Exchange exchange)
specifier|private
name|void
name|getPageBlobRanges
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudPageBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createPageBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BlobServiceUtil
operator|.
name|configureCloudBlobForRead
argument_list|(
name|client
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|BlobServiceUtil
operator|.
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Getting the page blob ranges [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PageRange
argument_list|>
name|ranges
init|=
name|client
operator|.
name|downloadPageRanges
argument_list|(
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
decl_stmt|;
name|ExchangeUtil
operator|.
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
operator|.
name|setBody
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
block|}
DECL|method|deletePageBlob (Exchange exchange)
specifier|private
name|void
name|deletePageBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudPageBlob
name|client
init|=
name|BlobServiceUtil
operator|.
name|createPageBlobClient
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doDeleteBlock
argument_list|(
name|client
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|getPageBlobSize (Exchange exchange)
specifier|private
name|Long
name|getPageBlobSize
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Long
name|pageSize
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|PAGE_BLOB_SIZE
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageSize
operator|==
literal|null
condition|)
block|{
name|pageSize
operator|=
literal|512L
expr_stmt|;
block|}
return|return
name|pageSize
return|;
block|}
DECL|method|doDeleteBlock (CloudBlob client, Exchange exchange)
specifier|private
name|void
name|doDeleteBlock
parameter_list|(
name|CloudBlob
name|client
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Deleting a blob [{}] from exchange [{}]..."
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|client
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|getCharsetName (Exchange exchange)
specifier|private
name|String
name|getCharsetName
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|charset
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|charset
operator|==
literal|null
condition|?
literal|"UTF-8"
else|:
name|charset
return|;
block|}
DECL|method|configureCloudBlobForWrite (CloudBlob client)
specifier|private
name|void
name|configureCloudBlobForWrite
parameter_list|(
name|CloudBlob
name|client
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getStreamWriteSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|client
operator|.
name|setStreamWriteSizeInBytes
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getStreamWriteSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getBlobMetadata
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setMetadata
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getBlobMetadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|determineOperation (Exchange exchange)
specifier|private
name|BlobServiceOperations
name|determineOperation
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|BlobServiceOperations
name|operation
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|OPERATION
argument_list|,
name|BlobServiceOperations
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getOperation
argument_list|()
expr_stmt|;
block|}
return|return
name|operation
return|;
block|}
DECL|method|getConfiguration ()
specifier|protected
name|BlobServiceConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"StorageBlobProducer["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|BlobServiceEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|BlobServiceEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|getInputStreamFromExchange (Exchange exchange)
specifier|private
name|InputStream
name|getInputStreamFromExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|blobObject
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|blobObject
operator|instanceof
name|String
condition|)
block|{
name|String
name|charset
init|=
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|inputStream
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
operator|(
name|String
operator|)
name|blobObject
operator|)
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blobObject
operator|instanceof
name|InputStream
condition|)
block|{
name|inputStream
operator|=
operator|(
name|InputStream
operator|)
name|blobObject
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blobObject
operator|instanceof
name|File
condition|)
block|{
name|inputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
operator|(
name|File
operator|)
name|blobObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported blob type:"
operator|+
name|blobObject
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|inputStream
return|;
block|}
DECL|method|closeInputStreamIfNeeded (InputStream inputStream)
specifier|private
name|void
name|closeInputStreamIfNeeded
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|isCloseStreamAfterWrite
argument_list|()
condition|)
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

