begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.azure.blob
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|azure
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|AccessCondition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|OperationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobRequestOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudAppendBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudPageBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|PageRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|azure
operator|.
name|common
operator|.
name|ExchangeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|BlobServiceUtil
specifier|public
specifier|final
class|class
name|BlobServiceUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobServiceUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|BlobServiceUtil ()
specifier|private
name|BlobServiceUtil
parameter_list|()
block|{     }
DECL|method|getBlob (Exchange exchange, BlobServiceConfiguration cfg)
specifier|public
specifier|static
name|void
name|getBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|BlobServiceConfiguration
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|cfg
operator|.
name|getBlobType
argument_list|()
condition|)
block|{
case|case
name|blockblob
case|:
name|getBlockBlob
argument_list|(
name|exchange
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
break|break;
case|case
name|appendblob
case|:
name|getAppendBlob
argument_list|(
name|exchange
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
break|break;
case|case
name|pageblob
case|:
name|getPageBlob
argument_list|(
name|exchange
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported blob type"
argument_list|)
throw|;
block|}
block|}
DECL|method|getBlockBlob (Exchange exchange, BlobServiceConfiguration cfg)
specifier|private
specifier|static
name|void
name|getBlockBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|BlobServiceConfiguration
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudBlockBlob
name|client
init|=
name|createBlockBlobClient
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|doGetBlob
argument_list|(
name|client
argument_list|,
name|exchange
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
block|}
DECL|method|getAppendBlob (Exchange exchange, BlobServiceConfiguration cfg)
specifier|private
specifier|static
name|void
name|getAppendBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|BlobServiceConfiguration
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudAppendBlob
name|client
init|=
name|createAppendBlobClient
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|doGetBlob
argument_list|(
name|client
argument_list|,
name|exchange
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
block|}
DECL|method|getPageBlob (Exchange exchange, BlobServiceConfiguration cfg)
specifier|private
specifier|static
name|void
name|getPageBlob
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|BlobServiceConfiguration
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudPageBlob
name|client
init|=
name|createPageBlobClient
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|doGetBlob
argument_list|(
name|client
argument_list|,
name|exchange
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
block|}
DECL|method|doGetBlob (CloudBlob client, Exchange exchange, BlobServiceConfiguration cfg)
specifier|private
specifier|static
name|void
name|doGetBlob
parameter_list|(
name|CloudBlob
name|client
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|BlobServiceConfiguration
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
name|BlobServiceUtil
operator|.
name|configureCloudBlobForRead
argument_list|(
name|client
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|BlobServiceRequestOptions
name|opts
init|=
name|getRequestOptions
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Getting a blob [{}] from exchange [{}]..."
argument_list|,
name|cfg
operator|.
name|getBlobName
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|==
literal|null
condition|)
block|{
name|String
name|fileDir
init|=
name|cfg
operator|.
name|getFileDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileDir
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileDir
argument_list|,
name|getBlobFileName
argument_list|(
name|cfg
argument_list|)
argument_list|)
decl_stmt|;
name|ExchangeUtil
operator|.
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
operator|.
name|setBody
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|os
operator|==
literal|null
condition|)
block|{
comment|// Let the producers like file: deal with it
name|InputStream
name|blobStream
init|=
name|client
operator|.
name|openInputStream
argument_list|(
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|blobStream
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|getBlobFileName
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Long
name|blobOffset
init|=
name|cfg
operator|.
name|getBlobOffset
argument_list|()
decl_stmt|;
name|Long
name|blobDataLength
init|=
name|cfg
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|instanceof
name|CloudPageBlob
condition|)
block|{
name|PageRange
name|range
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|PAGE_BLOB_RANGE
argument_list|,
name|PageRange
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|blobOffset
operator|=
name|range
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
name|blobDataLength
operator|=
name|range
operator|.
name|getEndOffset
argument_list|()
operator|-
name|range
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
block|}
block|}
name|client
operator|.
name|downloadRange
argument_list|(
name|blobOffset
argument_list|,
name|blobDataLength
argument_list|,
name|os
argument_list|,
name|opts
operator|.
name|getAccessCond
argument_list|()
argument_list|,
name|opts
operator|.
name|getRequestOpts
argument_list|()
argument_list|,
name|opts
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|os
operator|!=
literal|null
operator|&&
name|cfg
operator|.
name|isCloseStreamAfterRead
argument_list|()
condition|)
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getBlobFileName (BlobServiceConfiguration cfg)
specifier|private
specifier|static
name|String
name|getBlobFileName
parameter_list|(
name|BlobServiceConfiguration
name|cfg
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getBlobName
argument_list|()
operator|+
literal|".blob"
return|;
block|}
DECL|method|createBlobContainerClient (BlobServiceConfiguration cfg)
specifier|public
specifier|static
name|CloudBlobContainer
name|createBlobContainerClient
parameter_list|(
name|BlobServiceConfiguration
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|prepareStorageBlobUri
argument_list|(
name|cfg
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|StorageCredentials
name|creds
init|=
name|getAccountCredentials
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
return|return
operator|new
name|CloudBlobContainer
argument_list|(
name|uri
argument_list|,
name|creds
argument_list|)
return|;
block|}
DECL|method|createBlockBlobClient (BlobServiceConfiguration cfg)
specifier|public
specifier|static
name|CloudBlockBlob
name|createBlockBlobClient
parameter_list|(
name|BlobServiceConfiguration
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudBlockBlob
name|client
init|=
operator|(
name|CloudBlockBlob
operator|)
name|getConfiguredClient
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|URI
name|uri
init|=
name|prepareStorageBlobUri
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|StorageCredentials
name|creds
init|=
name|getAccountCredentials
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|CloudBlockBlob
argument_list|(
name|uri
argument_list|,
name|creds
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|createAppendBlobClient (BlobServiceConfiguration cfg)
specifier|public
specifier|static
name|CloudAppendBlob
name|createAppendBlobClient
parameter_list|(
name|BlobServiceConfiguration
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudAppendBlob
name|client
init|=
operator|(
name|CloudAppendBlob
operator|)
name|getConfiguredClient
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|URI
name|uri
init|=
name|prepareStorageBlobUri
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|StorageCredentials
name|creds
init|=
name|getAccountCredentials
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|CloudAppendBlob
argument_list|(
name|uri
argument_list|,
name|creds
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|createPageBlobClient (BlobServiceConfiguration cfg)
specifier|public
specifier|static
name|CloudPageBlob
name|createPageBlobClient
parameter_list|(
name|BlobServiceConfiguration
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudPageBlob
name|client
init|=
operator|(
name|CloudPageBlob
operator|)
name|getConfiguredClient
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|URI
name|uri
init|=
name|prepareStorageBlobUri
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|StorageCredentials
name|creds
init|=
name|getAccountCredentials
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|CloudPageBlob
argument_list|(
name|uri
argument_list|,
name|creds
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|getConfiguredClient (BlobServiceConfiguration cfg)
specifier|public
specifier|static
name|CloudBlob
name|getConfiguredClient
parameter_list|(
name|BlobServiceConfiguration
name|cfg
parameter_list|)
block|{
name|CloudBlob
name|client
init|=
name|cfg
operator|.
name|getAzureBlobClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|expectedCls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getBlobType
argument_list|()
operator|==
name|BlobType
operator|.
name|blockblob
condition|)
block|{
name|expectedCls
operator|=
name|CloudBlockBlob
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cfg
operator|.
name|getBlobType
argument_list|()
operator|==
name|BlobType
operator|.
name|appendblob
condition|)
block|{
name|expectedCls
operator|=
name|CloudAppendBlob
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cfg
operator|.
name|getBlobType
argument_list|()
operator|==
name|BlobType
operator|.
name|pageblob
condition|)
block|{
name|expectedCls
operator|=
name|CloudPageBlob
operator|.
name|class
expr_stmt|;
block|}
if|if
condition|(
name|client
operator|.
name|getClass
argument_list|()
operator|!=
name|expectedCls
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Client Type"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|client
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|prepareStorageBlobUri
argument_list|(
name|cfg
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Client URI"
argument_list|)
throw|;
block|}
block|}
return|return
name|client
return|;
block|}
DECL|method|getAccountCredentials (BlobServiceConfiguration cfg)
specifier|public
specifier|static
name|StorageCredentials
name|getAccountCredentials
parameter_list|(
name|BlobServiceConfiguration
name|cfg
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getCredentials
argument_list|()
return|;
block|}
DECL|method|configureCloudBlobForRead (CloudBlob client, BlobServiceConfiguration cfg)
specifier|public
specifier|static
name|void
name|configureCloudBlobForRead
parameter_list|(
name|CloudBlob
name|client
parameter_list|,
name|BlobServiceConfiguration
name|cfg
parameter_list|)
block|{
if|if
condition|(
name|cfg
operator|.
name|getStreamReadSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|client
operator|.
name|setStreamMinimumReadSizeInBytes
argument_list|(
name|cfg
operator|.
name|getStreamReadSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareStorageBlobUri (BlobServiceConfiguration cfg)
specifier|public
specifier|static
name|URI
name|prepareStorageBlobUri
parameter_list|(
name|BlobServiceConfiguration
name|cfg
parameter_list|)
block|{
return|return
name|prepareStorageBlobUri
argument_list|(
name|cfg
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|prepareStorageBlobUri (BlobServiceConfiguration cfg, boolean blobNameRequired)
specifier|public
specifier|static
name|URI
name|prepareStorageBlobUri
parameter_list|(
name|BlobServiceConfiguration
name|cfg
parameter_list|,
name|boolean
name|blobNameRequired
parameter_list|)
block|{
if|if
condition|(
name|blobNameRequired
operator|&&
name|cfg
operator|.
name|getBlobName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Blob name must be specified"
argument_list|)
throw|;
block|}
name|StringBuilder
name|uriBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|uriBuilder
operator|.
name|append
argument_list|(
literal|"https://"
argument_list|)
operator|.
name|append
argument_list|(
name|cfg
operator|.
name|getAccountName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|BlobServiceConstants
operator|.
name|SERVICE_URI_SEGMENT
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|cfg
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getBlobName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|uriBuilder
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|cfg
operator|.
name|getBlobName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|URI
operator|.
name|create
argument_list|(
name|uriBuilder
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getRequestOptions (Exchange exchange)
specifier|public
specifier|static
name|BlobServiceRequestOptions
name|getRequestOptions
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|BlobServiceRequestOptions
name|opts
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|BLOB_SERVICE_REQUEST_OPTIONS
argument_list|,
name|BlobServiceRequestOptions
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|!=
literal|null
condition|)
block|{
return|return
name|opts
return|;
block|}
else|else
block|{
name|opts
operator|=
operator|new
name|BlobServiceRequestOptions
argument_list|()
expr_stmt|;
block|}
name|AccessCondition
name|accessCond
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|ACCESS_CONDITION
argument_list|,
name|AccessCondition
operator|.
name|class
argument_list|)
decl_stmt|;
name|BlobRequestOptions
name|requestOpts
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|BLOB_REQUEST_OPTIONS
argument_list|,
name|BlobRequestOptions
operator|.
name|class
argument_list|)
decl_stmt|;
name|OperationContext
name|opContext
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|BlobServiceConstants
operator|.
name|OPERATION_CONTEXT
argument_list|,
name|OperationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|opts
operator|.
name|setAccessCond
argument_list|(
name|accessCond
argument_list|)
expr_stmt|;
name|opts
operator|.
name|setOpContext
argument_list|(
name|opContext
argument_list|)
expr_stmt|;
name|opts
operator|.
name|setRequestOpts
argument_list|(
name|requestOpts
argument_list|)
expr_stmt|;
return|return
name|opts
return|;
block|}
block|}
end_class

end_unit

