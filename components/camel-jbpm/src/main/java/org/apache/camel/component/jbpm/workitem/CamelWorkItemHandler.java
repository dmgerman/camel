begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jbpm.workitem
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|workitem
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExchangeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|AbstractLogOrThrowWorkItemHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|Wid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|WidMavenDepends
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|WidParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|WidResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|service
operator|.
name|WidAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|service
operator|.
name|WidService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|services
operator|.
name|api
operator|.
name|service
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|manager
operator|.
name|RuntimeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|process
operator|.
name|WorkItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|process
operator|.
name|WorkItemManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|internal
operator|.
name|runtime
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Camel jBPM {@link WorkItemHandler} which allows to call Camel routes with a<code>direct</code> endpoint.  *<p/>  * The handler passes the {@WorkItem} to the route that has a consumer on the endpoint-id that can be passed with the  *<code>camel-endpoint-id</code>{@link WorkItem} parameter. E.g. when a the value "myCamelEndpoint" is passed to the   * {link WorkItem} via the<code>camel-endpoint-id</code> parameter, this command will send the {@link WorkItem} to the Camel URI  *<code>direct://myCamelEndpoint</code>.  *<p/>  * The body of the result {@link Message} of the invocation is returned via the<code>response</code> parameter. Access to the raw response  * {@link Message} is provided via the<code>message</code> parameter. This gives the user access to more advanced fields like message  * headers and attachments.  *<p/>  * This handler can be constructed in 2 ways. When using the default constructor, the handler will try to find the global KIE  * {@link CamelContext} from the<code>jBPM</code> {@link ServiceRegistry}. When the {@link RuntimeManager} is passed to the constructor,  * the handler will retrieve and use the {@link CamelContext} bound to the {@link RuntimeManage} from the {@link ServiceRegistry}  *   */
end_comment

begin_class
annotation|@
name|Wid
argument_list|(
name|widfile
operator|=
literal|"CamelConnector.wid"
argument_list|,
name|name
operator|=
literal|"CamelConnector"
argument_list|,
name|displayName
operator|=
literal|"CamelConnector"
argument_list|,
name|defaultHandler
operator|=
literal|"mvel: new org.apache.camel.component.jbpm.workitem.CamelWorkitemHandler()"
argument_list|,
name|documentation
operator|=
literal|"${artifactId}/index.html"
argument_list|,
name|parameters
operator|=
block|{
annotation|@
name|WidParameter
argument_list|(
name|name
operator|=
literal|"camel-endpoint-id"
argument_list|)
block|}
argument_list|,
name|results
operator|=
block|{
annotation|@
name|WidResult
argument_list|(
name|name
operator|=
literal|"response"
argument_list|)
block|,
annotation|@
name|WidResult
argument_list|(
name|name
operator|=
literal|"message"
argument_list|)
block|}
argument_list|,
name|mavenDepends
operator|=
block|{
annotation|@
name|WidMavenDepends
argument_list|(
name|group
operator|=
literal|"${groupId}"
argument_list|,
name|artifact
operator|=
literal|"${artifactId}"
argument_list|,
name|version
operator|=
literal|"${version}"
argument_list|)
block|}
argument_list|,
name|serviceInfo
operator|=
annotation|@
name|WidService
argument_list|(
name|category
operator|=
literal|"${name}"
argument_list|,
name|description
operator|=
literal|"${description}"
argument_list|,
name|keywords
operator|=
literal|"apache,camel,payload,route,connector"
argument_list|,
name|action
operator|=
annotation|@
name|WidAction
argument_list|(
name|title
operator|=
literal|"Send payload to a Camel endpoint"
argument_list|)
argument_list|)
argument_list|)
DECL|class|CamelWorkItemHandler
specifier|public
class|class
name|CamelWorkItemHandler
extends|extends
name|AbstractLogOrThrowWorkItemHandler
implements|implements
name|Cacheable
block|{
DECL|field|GLOBAL_CAMEL_CONTEXT_SERVICE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|GLOBAL_CAMEL_CONTEXT_SERVICE_KEY
init|=
literal|"GlobalCamelService"
decl_stmt|;
DECL|field|RUNTIME_CAMEL_CONTEXT_SERVICE_POSTFIX
specifier|private
specifier|static
specifier|final
name|String
name|RUNTIME_CAMEL_CONTEXT_SERVICE_POSTFIX
init|=
literal|"_CamelService"
decl_stmt|;
DECL|field|CAMEL_ENDPOINT_ID_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_ENDPOINT_ID_PARAM
init|=
literal|"camel-endpoint-id"
decl_stmt|;
DECL|field|RESPONSE_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|RESPONSE_PARAM
init|=
literal|"response"
decl_stmt|;
DECL|field|MESSAGE_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE_PARAM
init|=
literal|"message"
decl_stmt|;
DECL|field|logger
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelWorkItemHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|producerTemplate
specifier|private
specifier|final
name|ProducerTemplate
name|producerTemplate
decl_stmt|;
comment|/** 	 * Default Constructor. This creates a {@link ProducerTemplate} for the global {@link CamelContext}. 	 */
DECL|method|CamelWorkItemHandler ()
specifier|public
name|CamelWorkItemHandler
parameter_list|()
block|{
name|CamelContext
name|globalCamelContext
init|=
operator|(
name|CamelContext
operator|)
name|ServiceRegistry
operator|.
name|get
argument_list|()
operator|.
name|service
argument_list|(
name|GLOBAL_CAMEL_CONTEXT_SERVICE_KEY
argument_list|)
decl_stmt|;
comment|// TODO: Should we allow to set the maximumCacheSize on the producer?
name|this
operator|.
name|producerTemplate
operator|=
name|globalCamelContext
operator|.
name|createProducerTemplate
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor which accepts {@link RuntimeManager}. This causes this WorkItemHanlder to create a {@link ProducerTemplate} for the 	 * runtime specific {@link CamelContext}. 	 */
DECL|method|CamelWorkItemHandler (RuntimeManager runtimeManager)
specifier|public
name|CamelWorkItemHandler
parameter_list|(
name|RuntimeManager
name|runtimeManager
parameter_list|)
block|{
name|String
name|runtimeCamelContextKey
init|=
name|runtimeManager
operator|.
name|getIdentifier
argument_list|()
operator|+
name|RUNTIME_CAMEL_CONTEXT_SERVICE_POSTFIX
decl_stmt|;
name|CamelContext
name|runtimeCamelContext
init|=
operator|(
name|CamelContext
operator|)
name|ServiceRegistry
operator|.
name|get
argument_list|()
operator|.
name|service
argument_list|(
name|runtimeCamelContextKey
argument_list|)
decl_stmt|;
comment|// TODO: Should we allow to set the maximumCacheSize on the producer?
name|this
operator|.
name|producerTemplate
operator|=
name|runtimeCamelContext
operator|.
name|createProducerTemplate
argument_list|()
expr_stmt|;
block|}
DECL|method|executeWorkItem (WorkItem workItem, final WorkItemManager manager)
specifier|public
name|void
name|executeWorkItem
parameter_list|(
name|WorkItem
name|workItem
parameter_list|,
specifier|final
name|WorkItemManager
name|manager
parameter_list|)
block|{
name|String
name|camelEndpointId
init|=
operator|(
name|String
operator|)
name|workItem
operator|.
name|getParameter
argument_list|(
name|CAMEL_ENDPOINT_ID_PARAM
argument_list|)
decl_stmt|;
comment|// We only support direct. We don't need to support more, as direct simply gives us the entrypoint into the actual Camel Routes.
name|String
name|camelUri
init|=
literal|"direct://"
operator|+
name|camelEndpointId
decl_stmt|;
try|try
block|{
name|Exchange
name|inExchange
init|=
name|ExchangeBuilder
operator|.
name|anExchange
argument_list|(
name|producerTemplate
operator|.
name|getCamelContext
argument_list|()
argument_list|)
operator|.
name|withBody
argument_list|(
name|workItem
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Exchange
name|outExchange
init|=
name|producerTemplate
operator|.
name|send
argument_list|(
name|camelUri
argument_list|,
name|inExchange
argument_list|)
decl_stmt|;
comment|// producerTemplate.send does not throw exceptions, instead they are set on the returned Exchange.
if|if
condition|(
name|outExchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|outExchange
operator|.
name|getException
argument_list|()
throw|;
block|}
name|Message
name|outMessage
init|=
name|outExchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|response
init|=
name|outMessage
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|RESPONSE_PARAM
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|MESSAGE_PARAM
argument_list|,
name|outMessage
argument_list|)
expr_stmt|;
name|manager
operator|.
name|completeWorkItem
argument_list|(
name|workItem
operator|.
name|getId
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|abortWorkItem (WorkItem workItem, WorkItemManager manager)
specifier|public
name|void
name|abortWorkItem
parameter_list|(
name|WorkItem
name|workItem
parameter_list|,
name|WorkItemManager
name|manager
parameter_list|)
block|{
comment|// Do nothing, cannot be aborted
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|producerTemplate
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error encountered while closing the Camel Producer Template."
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Not much we can do here, so swallowing exception.
block|}
block|}
block|}
end_class

end_unit

