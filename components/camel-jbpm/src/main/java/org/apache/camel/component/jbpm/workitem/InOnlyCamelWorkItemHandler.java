begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jbpm.workitem
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|workitem
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExchangeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|JBPMConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|drools
operator|.
name|core
operator|.
name|process
operator|.
name|instance
operator|.
name|impl
operator|.
name|WorkItemImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|Wid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|WidMavenDepends
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|WidParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|WidResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|service
operator|.
name|WidAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|util
operator|.
name|service
operator|.
name|WidService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|manager
operator|.
name|RuntimeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|process
operator|.
name|WorkItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|process
operator|.
name|WorkItemHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|process
operator|.
name|WorkItemManager
import|;
end_import

begin_comment
comment|/**  * Camel jBPM {@link WorkItemHandler} that sends {@link Exchange Exchanges} with an<code>InOnly</code> Message Exchange Pattern.  *<p/>  * This handler does<b>NOT<b/> complete the {@link WorkItem}, and will not parse any response from the Camel route, other than possible exceptions.  * The use-case for this handler is asynchronous, one-way, communication, where an external party is responsible for completing the  * {@link WorkItem} at a later point in time.  *<p/>  * The handler creates a Camel Exchange and sets the {@link WorkItem} as the body of the {@link Message}. Furthermore, the following message  * headers are set:  *<ul>  *<li>deploymentId</li>  *<li>processInstanceId</li>  *<li>workItemId</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|Wid
argument_list|(
name|widfile
operator|=
literal|"InOnlyCamelConnector.wid"
argument_list|,
name|name
operator|=
literal|"InOnlyCamelConnector"
argument_list|,
name|displayName
operator|=
literal|"InOnlyCamelConnector"
argument_list|,
name|category
operator|=
literal|"Camel"
argument_list|,
name|defaultHandler
operator|=
literal|"mvel: new org.apache.camel.component.jbpm.workitem.InOnlyCamelWorkItemHandler()"
argument_list|,
name|documentation
operator|=
literal|"${artifactId}/index.html"
argument_list|,
name|parameters
operator|=
block|{
annotation|@
name|WidParameter
argument_list|(
name|name
operator|=
name|JBPMConstants
operator|.
name|CAMEL_ENDPOINT_ID_WI_PARAM
argument_list|)
block|}
argument_list|,
name|results
operator|=
block|{
annotation|@
name|WidResult
argument_list|(
name|name
operator|=
name|JBPMConstants
operator|.
name|RESPONSE_WI_PARAM
argument_list|)
block|,
annotation|@
name|WidResult
argument_list|(
name|name
operator|=
name|JBPMConstants
operator|.
name|MESSAGE_WI_PARAM
argument_list|)
block|}
argument_list|,
name|mavenDepends
operator|=
block|{
annotation|@
name|WidMavenDepends
argument_list|(
name|group
operator|=
literal|"${groupId}"
argument_list|,
name|artifact
operator|=
literal|"${artifactId}"
argument_list|,
name|version
operator|=
literal|"${version}"
argument_list|)
block|}
argument_list|,
name|serviceInfo
operator|=
annotation|@
name|WidService
argument_list|(
name|category
operator|=
literal|"${name}"
argument_list|,
name|description
operator|=
literal|"${description}"
argument_list|,
name|keywords
operator|=
literal|"apache,camel,payload,route,connector"
argument_list|,
name|action
operator|=
annotation|@
name|WidAction
argument_list|(
name|title
operator|=
literal|"Send payload to a Camel endpoint"
argument_list|)
argument_list|)
argument_list|,
name|icon
operator|=
literal|"InOnlyCamelConnector.png"
argument_list|)
DECL|class|InOnlyCamelWorkItemHandler
specifier|public
class|class
name|InOnlyCamelWorkItemHandler
extends|extends
name|AbstractCamelWorkItemHandler
block|{
DECL|method|InOnlyCamelWorkItemHandler ()
specifier|public
name|InOnlyCamelWorkItemHandler
parameter_list|()
block|{     }
DECL|method|InOnlyCamelWorkItemHandler (String camelEndpointId)
specifier|public
name|InOnlyCamelWorkItemHandler
parameter_list|(
name|String
name|camelEndpointId
parameter_list|)
block|{
name|super
argument_list|(
name|camelEndpointId
argument_list|)
expr_stmt|;
block|}
DECL|method|InOnlyCamelWorkItemHandler (RuntimeManager runtimeManager)
specifier|public
name|InOnlyCamelWorkItemHandler
parameter_list|(
name|RuntimeManager
name|runtimeManager
parameter_list|)
block|{
name|super
argument_list|(
name|runtimeManager
argument_list|)
expr_stmt|;
block|}
DECL|method|InOnlyCamelWorkItemHandler (RuntimeManager runtimeManager, String camelEndpointId)
specifier|public
name|InOnlyCamelWorkItemHandler
parameter_list|(
name|RuntimeManager
name|runtimeManager
parameter_list|,
name|String
name|camelEndpointId
parameter_list|)
block|{
name|super
argument_list|(
name|runtimeManager
argument_list|,
name|camelEndpointId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleResponse (Exchange responseExchange, WorkItem workItem, WorkItemManager manager)
specifier|protected
name|void
name|handleResponse
parameter_list|(
name|Exchange
name|responseExchange
parameter_list|,
name|WorkItem
name|workItem
parameter_list|,
name|WorkItemManager
name|manager
parameter_list|)
block|{
comment|// no-op. There is no response for InOnly, so need to handle anything
block|}
annotation|@
name|Override
DECL|method|buildExchange (ProducerTemplate template, WorkItem workItem)
specifier|protected
name|Exchange
name|buildExchange
parameter_list|(
name|ProducerTemplate
name|template
parameter_list|,
name|WorkItem
name|workItem
parameter_list|)
block|{
return|return
name|ExchangeBuilder
operator|.
name|anExchange
argument_list|(
name|template
operator|.
name|getCamelContext
argument_list|()
argument_list|)
operator|.
name|withPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"deploymentId"
argument_list|,
operator|(
operator|(
name|WorkItemImpl
operator|)
name|workItem
operator|)
operator|.
name|getDeploymentId
argument_list|()
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"processInstanceId"
argument_list|,
name|workItem
operator|.
name|getProcessInstanceId
argument_list|()
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"workItemId"
argument_list|,
name|workItem
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|withBody
argument_list|(
name|workItem
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

