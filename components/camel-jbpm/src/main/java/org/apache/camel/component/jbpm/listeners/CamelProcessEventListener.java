begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jbpm.listeners
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|listeners
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|JBPMCamelConsumerAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|JBPMConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|event
operator|.
name|process
operator|.
name|ProcessCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|event
operator|.
name|process
operator|.
name|ProcessEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|event
operator|.
name|process
operator|.
name|ProcessNodeLeftEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|event
operator|.
name|process
operator|.
name|ProcessNodeTriggeredEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|event
operator|.
name|process
operator|.
name|ProcessStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|event
operator|.
name|process
operator|.
name|ProcessVariableChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|internal
operator|.
name|runtime
operator|.
name|Cacheable
import|;
end_import

begin_class
DECL|class|CamelProcessEventListener
specifier|public
class|class
name|CamelProcessEventListener
implements|implements
name|ProcessEventListener
implements|,
name|Cacheable
implements|,
name|JBPMCamelConsumerAware
block|{
DECL|field|consumers
specifier|private
name|Set
argument_list|<
name|JBPMConsumer
argument_list|>
name|consumers
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|beforeProcessStarted (ProcessStartedEvent event)
specifier|public
name|void
name|beforeProcessStarted
parameter_list|(
name|ProcessStartedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeProcessStarted"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterProcessStarted (ProcessStartedEvent event)
specifier|public
name|void
name|afterProcessStarted
parameter_list|(
name|ProcessStartedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterProcessStarted"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeProcessCompleted (ProcessCompletedEvent event)
specifier|public
name|void
name|beforeProcessCompleted
parameter_list|(
name|ProcessCompletedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeProcessCompleted"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterProcessCompleted (ProcessCompletedEvent event)
specifier|public
name|void
name|afterProcessCompleted
parameter_list|(
name|ProcessCompletedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterProcessCompleted"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeNodeTriggered (ProcessNodeTriggeredEvent event)
specifier|public
name|void
name|beforeNodeTriggered
parameter_list|(
name|ProcessNodeTriggeredEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeNodeTriggered"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterNodeTriggered (ProcessNodeTriggeredEvent event)
specifier|public
name|void
name|afterNodeTriggered
parameter_list|(
name|ProcessNodeTriggeredEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterNodeTriggered"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeNodeLeft (ProcessNodeLeftEvent event)
specifier|public
name|void
name|beforeNodeLeft
parameter_list|(
name|ProcessNodeLeftEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeNodeLeft"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterNodeLeft (ProcessNodeLeftEvent event)
specifier|public
name|void
name|afterNodeLeft
parameter_list|(
name|ProcessNodeLeftEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterNodeLeft"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeVariableChanged (ProcessVariableChangedEvent event)
specifier|public
name|void
name|beforeVariableChanged
parameter_list|(
name|ProcessVariableChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeVariableChanged"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterVariableChanged (ProcessVariableChangedEvent event)
specifier|public
name|void
name|afterVariableChanged
parameter_list|(
name|ProcessVariableChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterVariableChanged"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|addConsumer (JBPMConsumer consumer)
specifier|public
name|void
name|addConsumer
parameter_list|(
name|JBPMConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumers
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeConsumer (JBPMConsumer consumer)
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|JBPMConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumers
operator|.
name|remove
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMessage (String eventType, Object event)
specifier|protected
name|void
name|sendMessage
parameter_list|(
name|String
name|eventType
parameter_list|,
name|Object
name|event
parameter_list|)
block|{
name|this
operator|.
name|consumers
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|isStarted
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|c
operator|.
name|sendMessage
argument_list|(
name|eventType
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

