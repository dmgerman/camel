begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jbpm.workitem
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|workitem
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|JBPMConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|process
operator|.
name|workitem
operator|.
name|core
operator|.
name|AbstractLogOrThrowWorkItemHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|services
operator|.
name|api
operator|.
name|service
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|manager
operator|.
name|RuntimeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|process
operator|.
name|WorkItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|process
operator|.
name|WorkItemHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|api
operator|.
name|runtime
operator|.
name|process
operator|.
name|WorkItemManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|internal
operator|.
name|runtime
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Camel jBPM {@link WorkItemHandler} which allows to call Camel routes with a<code>direct</code> endpoint.  *<p/>  * The handler passes the {@WorkItem} to the route that has a consumer on the endpoint-id that can be passed with the  *<code>CamelEndpointId</code>{@link WorkItem} parameter. E.g. when a the value "myCamelEndpoint" is passed to the {link WorkItem} via  * the<code>CamelEndpointId</code> parameter, this command will send the {@link WorkItem} to the Camel URI  *<code>direct://myCamelEndpoint</code>.  *<p/>  * The body of the result {@link Message} of the invocation is returned via the<code>Response</code> parameter. Access to the raw response  * {@link Message} is provided via the<code>Message</code> parameter. This gives the user access to more advanced fields like message  * headers and attachments.  *<p/>  * This handler can be constructed in multiple ways. When you don't pass a {@link RuntimeManager} to the constructor, the handler will try  * to find the global KIE {@link CamelContext} from the<code>jBPM</code> {@link ServiceRegistry}. When the {@link RuntimeManager} is passed  * to the constructor, the handler will retrieve and use the {@link CamelContext} bound to the {@link RuntimeManage} from the  * {@link ServiceRegistry}. When a<code>CamelEndpointId</code> is passed to the constructor, the handler will send all requests to the  * Camel route that is consuming from that endpoint, unless the endpoint is overridden by passing a the<code>CamelEndpointId</code> in  * the {@link WorkItem} parameters.  *   */
end_comment

begin_class
DECL|class|AbstractCamelWorkItemHandler
specifier|public
specifier|abstract
class|class
name|AbstractCamelWorkItemHandler
extends|extends
name|AbstractLogOrThrowWorkItemHandler
implements|implements
name|Cacheable
block|{
DECL|field|logger
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractCamelWorkItemHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|producerTemplate
specifier|private
specifier|final
name|ProducerTemplate
name|producerTemplate
decl_stmt|;
DECL|field|camelEndpointId
specifier|private
specifier|final
name|String
name|camelEndpointId
decl_stmt|;
comment|/**      * Default Constructor. This creates a {@link ProducerTemplate} for the global {@link CamelContext}.      */
DECL|method|AbstractCamelWorkItemHandler ()
specifier|public
name|AbstractCamelWorkItemHandler
parameter_list|()
block|{
name|this
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractCamelWorkItemHandler (String camelEndointId)
specifier|public
name|AbstractCamelWorkItemHandler
parameter_list|(
name|String
name|camelEndointId
parameter_list|)
block|{
name|CamelContext
name|globalCamelContext
init|=
operator|(
name|CamelContext
operator|)
name|ServiceRegistry
operator|.
name|get
argument_list|()
operator|.
name|service
argument_list|(
name|JBPMConstants
operator|.
name|GLOBAL_CAMEL_CONTEXT_SERVICE_KEY
argument_list|)
decl_stmt|;
name|this
operator|.
name|producerTemplate
operator|=
name|globalCamelContext
operator|.
name|createProducerTemplate
argument_list|()
expr_stmt|;
name|this
operator|.
name|camelEndpointId
operator|=
name|camelEndointId
expr_stmt|;
block|}
comment|/**      * Constructor which accepts {@link RuntimeManager}. This causes this WorkItemHanlder to create a {@link ProducerTemplate} for the      * runtime specific {@link CamelContext}.      */
DECL|method|AbstractCamelWorkItemHandler (RuntimeManager runtimeManager)
specifier|public
name|AbstractCamelWorkItemHandler
parameter_list|(
name|RuntimeManager
name|runtimeManager
parameter_list|)
block|{
name|this
argument_list|(
name|runtimeManager
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractCamelWorkItemHandler (RuntimeManager runtimeManager, String camelEndpointId)
specifier|public
name|AbstractCamelWorkItemHandler
parameter_list|(
name|RuntimeManager
name|runtimeManager
parameter_list|,
name|String
name|camelEndpointId
parameter_list|)
block|{
name|String
name|runtimeCamelContextKey
init|=
name|runtimeManager
operator|.
name|getIdentifier
argument_list|()
operator|+
name|JBPMConstants
operator|.
name|DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX
decl_stmt|;
name|CamelContext
name|runtimeCamelContext
init|=
operator|(
name|CamelContext
operator|)
name|ServiceRegistry
operator|.
name|get
argument_list|()
operator|.
name|service
argument_list|(
name|runtimeCamelContextKey
argument_list|)
decl_stmt|;
name|this
operator|.
name|producerTemplate
operator|=
name|runtimeCamelContext
operator|.
name|createProducerTemplate
argument_list|()
expr_stmt|;
name|this
operator|.
name|camelEndpointId
operator|=
name|camelEndpointId
expr_stmt|;
block|}
DECL|method|executeWorkItem (WorkItem workItem, final WorkItemManager manager)
specifier|public
name|void
name|executeWorkItem
parameter_list|(
name|WorkItem
name|workItem
parameter_list|,
specifier|final
name|WorkItemManager
name|manager
parameter_list|)
block|{
name|String
name|workItemCamelEndpointId
init|=
name|getCamelEndpointId
argument_list|(
name|workItem
argument_list|)
decl_stmt|;
comment|// We only support direct. We don't need to support more, as direct simply gives us the entrypoint into the actual Camel Routes.
name|String
name|camelUri
init|=
literal|"direct://"
operator|+
name|workItemCamelEndpointId
decl_stmt|;
try|try
block|{
name|Exchange
name|requestExchange
init|=
name|buildExchange
argument_list|(
name|producerTemplate
argument_list|,
name|workItem
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Sending Camel Exchange to: "
operator|+
name|camelUri
argument_list|)
expr_stmt|;
name|Exchange
name|responseExchange
init|=
name|producerTemplate
operator|.
name|send
argument_list|(
name|camelUri
argument_list|,
name|requestExchange
argument_list|)
decl_stmt|;
comment|// producerTemplate.send does not throw exceptions, instead they are set on the returned Exchange.
if|if
condition|(
name|responseExchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|responseExchange
operator|.
name|getException
argument_list|()
throw|;
block|}
name|handleResponse
argument_list|(
name|responseExchange
argument_list|,
name|workItem
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCamelEndpointId (WorkItem workItem)
specifier|protected
name|String
name|getCamelEndpointId
parameter_list|(
name|WorkItem
name|workItem
parameter_list|)
block|{
name|String
name|workItemCamelEndpointId
init|=
operator|(
name|String
operator|)
name|workItem
operator|.
name|getParameter
argument_list|(
name|JBPMConstants
operator|.
name|CAMEL_ENDPOINT_ID_WI_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|camelEndpointId
operator|!=
literal|null
operator|&&
operator|!
name|camelEndpointId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|workItemCamelEndpointId
operator|!=
literal|null
operator|&&
operator|!
name|workItemCamelEndpointId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"The Camel Endpoint ID has been set on both the WorkItemHanlder and WorkItem. The '"
operator|+
name|JBPMConstants
operator|.
name|CAMEL_ENDPOINT_ID_WI_PARAM
operator|+
literal|"' configured on the WorkItem overrides the global configuation."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|workItemCamelEndpointId
operator|=
name|camelEndpointId
expr_stmt|;
block|}
block|}
if|if
condition|(
name|workItemCamelEndpointId
operator|==
literal|null
operator|||
name|workItemCamelEndpointId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No Camel Endpoint ID specified. Please configure the '"
operator|+
name|JBPMConstants
operator|.
name|CAMEL_ENDPOINT_ID_WI_PARAM
operator|+
literal|"' in either the constructor of this WorkItemHandler, or pass it via the "
operator|+
name|JBPMConstants
operator|.
name|CAMEL_ENDPOINT_ID_WI_PARAM
operator|+
literal|"' WorkItem parameter."
argument_list|)
throw|;
block|}
return|return
name|workItemCamelEndpointId
return|;
block|}
DECL|method|handleResponse (Exchange responseExchange, WorkItem workItem, WorkItemManager manager)
specifier|protected
specifier|abstract
name|void
name|handleResponse
parameter_list|(
name|Exchange
name|responseExchange
parameter_list|,
name|WorkItem
name|workItem
parameter_list|,
name|WorkItemManager
name|manager
parameter_list|)
function_decl|;
DECL|method|buildExchange (ProducerTemplate template, WorkItem workItem)
specifier|protected
specifier|abstract
name|Exchange
name|buildExchange
parameter_list|(
name|ProducerTemplate
name|template
parameter_list|,
name|WorkItem
name|workItem
parameter_list|)
function_decl|;
DECL|method|abortWorkItem (WorkItem workItem, WorkItemManager manager)
specifier|public
name|void
name|abortWorkItem
parameter_list|(
name|WorkItem
name|workItem
parameter_list|,
name|WorkItemManager
name|manager
parameter_list|)
block|{
comment|// Do nothing, cannot be aborted
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|producerTemplate
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error encountered while closing the Camel Producer Template."
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Not much we can do here, so swallowing exception.
block|}
block|}
block|}
end_class

end_unit

