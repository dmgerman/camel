begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jbpm.listeners
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|listeners
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|JBPMCamelConsumerAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbpm
operator|.
name|JBPMConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseCancelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseCloseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseCommentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseDataEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseDestroyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseDynamicSubprocessEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseDynamicTaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseReopenEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseRoleAssignmentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jbpm
operator|.
name|casemgmt
operator|.
name|api
operator|.
name|event
operator|.
name|CaseStartEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kie
operator|.
name|internal
operator|.
name|runtime
operator|.
name|Cacheable
import|;
end_import

begin_class
DECL|class|CamelCaseEventListener
specifier|public
class|class
name|CamelCaseEventListener
implements|implements
name|CaseEventListener
implements|,
name|Cacheable
implements|,
name|JBPMCamelConsumerAware
block|{
DECL|field|consumers
specifier|private
name|Set
argument_list|<
name|JBPMConsumer
argument_list|>
name|consumers
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|beforeCaseStarted (CaseStartEvent event)
specifier|public
name|void
name|beforeCaseStarted
parameter_list|(
name|CaseStartEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseStarted"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseStarted (CaseStartEvent event)
specifier|public
name|void
name|afterCaseStarted
parameter_list|(
name|CaseStartEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseStarted"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseClosed (CaseCloseEvent event)
specifier|public
name|void
name|beforeCaseClosed
parameter_list|(
name|CaseCloseEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseClosed"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseClosed (CaseCloseEvent event)
specifier|public
name|void
name|afterCaseClosed
parameter_list|(
name|CaseCloseEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseClosed"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseCancelled (CaseCancelEvent event)
specifier|public
name|void
name|beforeCaseCancelled
parameter_list|(
name|CaseCancelEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseCancelled"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseCancelled (CaseCancelEvent event)
specifier|public
name|void
name|afterCaseCancelled
parameter_list|(
name|CaseCancelEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseCancelled"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseDestroyed (CaseDestroyEvent event)
specifier|public
name|void
name|beforeCaseDestroyed
parameter_list|(
name|CaseDestroyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseDestroyed"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseDestroyed (CaseDestroyEvent event)
specifier|public
name|void
name|afterCaseDestroyed
parameter_list|(
name|CaseDestroyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseDestroyed"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseReopen (CaseReopenEvent event)
specifier|public
name|void
name|beforeCaseReopen
parameter_list|(
name|CaseReopenEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseReopen"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseReopen (CaseReopenEvent event)
specifier|public
name|void
name|afterCaseReopen
parameter_list|(
name|CaseReopenEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseReopen"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseCommentAdded (CaseCommentEvent event)
specifier|public
name|void
name|beforeCaseCommentAdded
parameter_list|(
name|CaseCommentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseCommentAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseCommentAdded (CaseCommentEvent event)
specifier|public
name|void
name|afterCaseCommentAdded
parameter_list|(
name|CaseCommentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseCommentAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseCommentUpdated (CaseCommentEvent event)
specifier|public
name|void
name|beforeCaseCommentUpdated
parameter_list|(
name|CaseCommentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseCommentUpdated"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseCommentUpdated (CaseCommentEvent event)
specifier|public
name|void
name|afterCaseCommentUpdated
parameter_list|(
name|CaseCommentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseCommentUpdated"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseCommentRemoved (CaseCommentEvent event)
specifier|public
name|void
name|beforeCaseCommentRemoved
parameter_list|(
name|CaseCommentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseCommentRemoved"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseCommentRemoved (CaseCommentEvent event)
specifier|public
name|void
name|afterCaseCommentRemoved
parameter_list|(
name|CaseCommentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseCommentRemoved"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseRoleAssignmentAdded (CaseRoleAssignmentEvent event)
specifier|public
name|void
name|beforeCaseRoleAssignmentAdded
parameter_list|(
name|CaseRoleAssignmentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseRoleAssignmentAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseRoleAssignmentAdded (CaseRoleAssignmentEvent event)
specifier|public
name|void
name|afterCaseRoleAssignmentAdded
parameter_list|(
name|CaseRoleAssignmentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseRoleAssignmentAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseRoleAssignmentRemoved (CaseRoleAssignmentEvent event)
specifier|public
name|void
name|beforeCaseRoleAssignmentRemoved
parameter_list|(
name|CaseRoleAssignmentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseRoleAssignmentRemoved"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseRoleAssignmentRemoved (CaseRoleAssignmentEvent event)
specifier|public
name|void
name|afterCaseRoleAssignmentRemoved
parameter_list|(
name|CaseRoleAssignmentEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseRoleAssignmentRemoved"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseDataAdded (CaseDataEvent event)
specifier|public
name|void
name|beforeCaseDataAdded
parameter_list|(
name|CaseDataEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseDataAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseDataAdded (CaseDataEvent event)
specifier|public
name|void
name|afterCaseDataAdded
parameter_list|(
name|CaseDataEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseDataAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeCaseDataRemoved (CaseDataEvent event)
specifier|public
name|void
name|beforeCaseDataRemoved
parameter_list|(
name|CaseDataEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeCaseDataRemoved"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterCaseDataRemoved (CaseDataEvent event)
specifier|public
name|void
name|afterCaseDataRemoved
parameter_list|(
name|CaseDataEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterCaseDataRemoved"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeDynamicTaskAdded (CaseDynamicTaskEvent event)
specifier|public
name|void
name|beforeDynamicTaskAdded
parameter_list|(
name|CaseDynamicTaskEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeDynamicTaskAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterDynamicTaskAdded (CaseDynamicTaskEvent event)
specifier|public
name|void
name|afterDynamicTaskAdded
parameter_list|(
name|CaseDynamicTaskEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterDynamicTaskAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeDynamicProcessAdded (CaseDynamicSubprocessEvent event)
specifier|public
name|void
name|beforeDynamicProcessAdded
parameter_list|(
name|CaseDynamicSubprocessEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"beforeDynamicProcessAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterDynamicProcessAdded (CaseDynamicSubprocessEvent event)
specifier|public
name|void
name|afterDynamicProcessAdded
parameter_list|(
name|CaseDynamicSubprocessEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|sendMessage
argument_list|(
literal|"afterDynamicProcessAdded"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|addConsumer (JBPMConsumer consumer)
specifier|public
name|void
name|addConsumer
parameter_list|(
name|JBPMConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumers
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeConsumer (JBPMConsumer consumer)
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|JBPMConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumers
operator|.
name|remove
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMessage (String eventType, Object event)
specifier|protected
name|void
name|sendMessage
parameter_list|(
name|String
name|eventType
parameter_list|,
name|Object
name|event
parameter_list|)
block|{
name|this
operator|.
name|consumers
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|isStarted
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|c
operator|.
name|sendMessage
argument_list|(
name|eventType
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

