begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.ddbstream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|ddbstream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|Shard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ShardList
class|class
name|ShardList
block|{
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ShardList
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|shards
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Shard
argument_list|>
name|shards
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|addAll (Collection<Shard> shards)
name|void
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|Shard
argument_list|>
name|shards
parameter_list|)
block|{
for|for
control|(
name|Shard
name|shard
range|:
name|shards
control|)
block|{
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add (Shard shard)
name|void
name|add
parameter_list|(
name|Shard
name|shard
parameter_list|)
block|{
name|shards
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getShardId
argument_list|()
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|nextAfter (Shard previous)
name|Shard
name|nextAfter
parameter_list|(
name|Shard
name|previous
parameter_list|)
block|{
for|for
control|(
name|Shard
name|shard
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|previous
operator|.
name|getShardId
argument_list|()
operator|.
name|equals
argument_list|(
name|shard
operator|.
name|getParentShardId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|shard
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find the next shard for "
operator|+
name|previous
operator|+
literal|" in "
operator|+
name|shards
argument_list|)
throw|;
block|}
DECL|method|first ()
name|Shard
name|first
parameter_list|()
block|{
comment|// Potential optimisation: if the two provided sequence numbers are the
comment|// same then we can skip the shard entirely. Need to confirm this with AWS.
for|for
control|(
name|Shard
name|shard
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shards
operator|.
name|containsKey
argument_list|(
name|shard
operator|.
name|getParentShardId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|shard
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find an unparented shard in "
operator|+
name|shards
argument_list|)
throw|;
block|}
DECL|method|last ()
name|Shard
name|last
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Shard
argument_list|>
name|shardsByParent
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Shard
name|shard
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
name|shardsByParent
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getParentShardId
argument_list|()
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Shard
name|shard
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shardsByParent
operator|.
name|containsKey
argument_list|(
name|shard
operator|.
name|getShardId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|shard
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find a shard with no children "
operator|+
name|shards
argument_list|)
throw|;
block|}
DECL|method|afterSeq (String sequenceNumber)
name|Shard
name|afterSeq
parameter_list|(
name|String
name|sequenceNumber
parameter_list|)
block|{
return|return
name|atAfterSeq
argument_list|(
name|sequenceNumber
argument_list|,
name|BigIntComparisons
operator|.
name|Conditions
operator|.
name|LT
argument_list|)
return|;
block|}
DECL|method|atSeq (String sequenceNumber)
name|Shard
name|atSeq
parameter_list|(
name|String
name|sequenceNumber
parameter_list|)
block|{
return|return
name|atAfterSeq
argument_list|(
name|sequenceNumber
argument_list|,
name|BigIntComparisons
operator|.
name|Conditions
operator|.
name|LTEQ
argument_list|)
return|;
block|}
DECL|method|atAfterSeq (String sequenceNumber, BigIntComparisons condition)
name|Shard
name|atAfterSeq
parameter_list|(
name|String
name|sequenceNumber
parameter_list|,
name|BigIntComparisons
name|condition
parameter_list|)
block|{
name|BigInteger
name|atAfter
init|=
operator|new
name|BigInteger
argument_list|(
name|sequenceNumber
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Shard
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|sorted
operator|.
name|addAll
argument_list|(
name|shards
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
name|StartingSequenceNumberComparator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
for|for
control|(
name|Shard
name|shard
range|:
name|sorted
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|getSequenceNumberRange
argument_list|()
operator|.
name|getEndingSequenceNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BigInteger
name|end
init|=
operator|new
name|BigInteger
argument_list|(
name|shard
operator|.
name|getSequenceNumberRange
argument_list|()
operator|.
name|getEndingSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
comment|// essentially: after< end or after<= end
if|if
condition|(
name|condition
operator|.
name|matches
argument_list|(
name|atAfter
argument_list|,
name|end
argument_list|)
condition|)
block|{
return|return
name|shard
return|;
block|}
block|}
block|}
if|if
condition|(
name|shards
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|sorted
operator|.
name|get
argument_list|(
name|sorted
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find a shard with appropriate sequence numbers for "
operator|+
name|sequenceNumber
operator|+
literal|" in "
operator|+
name|shards
argument_list|)
throw|;
block|}
comment|/**      * Removes shards that are older than the provided shard. Does not remove      * the provided shard.      *      * @param removeBefore      */
DECL|method|removeOlderThan (Shard removeBefore)
name|void
name|removeOlderThan
parameter_list|(
name|Shard
name|removeBefore
parameter_list|)
block|{
name|String
name|current
init|=
name|removeBefore
operator|.
name|getParentShardId
argument_list|()
decl_stmt|;
name|int
name|removedShards
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|Shard
name|s
init|=
name|shards
operator|.
name|remove
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|removedShards
operator|++
expr_stmt|;
name|current
operator|=
name|s
operator|.
name|getParentShardId
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"removed {} shards from the store, new size is {}"
argument_list|,
name|removedShards
argument_list|,
name|shards
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ShardList{"
operator|+
literal|"shards="
operator|+
name|shards
operator|+
literal|'}'
return|;
block|}
DECL|enum|StartingSequenceNumberComparator
specifier|private
enum|enum
name|StartingSequenceNumberComparator
implements|implements
name|Comparator
argument_list|<
name|Shard
argument_list|>
block|{
DECL|enumConstant|INSTANCE
DECL|method|INSTANCE ()
name|INSTANCE
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Shard
name|o1
parameter_list|,
name|Shard
name|o2
parameter_list|)
block|{
name|BigInteger
name|i1
init|=
operator|new
name|BigInteger
argument_list|(
name|o1
operator|.
name|getSequenceNumberRange
argument_list|()
operator|.
name|getStartingSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|BigInteger
name|i2
init|=
operator|new
name|BigInteger
argument_list|(
name|o2
operator|.
name|getSequenceNumberRange
argument_list|()
operator|.
name|getStartingSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|i1
operator|.
name|compareTo
argument_list|(
name|i2
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

