begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.ddb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|ddb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * A Producer which stores data into the Amazon DynamoDB Service  *<a href="http://aws.amazon.com/dynamodb/">AWS DynamoDB</a>  */
end_comment

begin_class
DECL|class|DdbProducer
specifier|public
class|class
name|DdbProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|ddbProducerToString
specifier|private
specifier|transient
name|String
name|ddbProducerToString
decl_stmt|;
DECL|method|DdbProducer (Endpoint endpoint)
specifier|public
name|DdbProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|determineOperation
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
case|case
name|BatchGetItems
case|:
operator|new
name|BatchGetItemsCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
case|case
name|DeleteItem
case|:
operator|new
name|DeleteItemCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
case|case
name|DeleteTable
case|:
operator|new
name|DeleteTableCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
case|case
name|DescribeTable
case|:
operator|new
name|DescribeTableCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
case|case
name|GetItem
case|:
operator|new
name|GetItemCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
case|case
name|PutItem
case|:
operator|new
name|PutItemCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
case|case
name|Query
case|:
operator|new
name|QueryCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
case|case
name|Scan
case|:
operator|new
name|ScanCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
case|case
name|UpdateItem
case|:
operator|new
name|UpdateItemCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
case|case
name|UpdateTable
case|:
operator|new
name|UpdateTableCommand
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDdbClient
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|exchange
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation"
argument_list|)
throw|;
block|}
block|}
DECL|method|determineOperation (Exchange exchange)
specifier|private
name|DdbOperations
name|determineOperation
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|DdbOperations
name|operation
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DdbConstants
operator|.
name|OPERATION
argument_list|,
name|DdbOperations
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|operation
operator|!=
literal|null
condition|?
name|operation
else|:
name|getConfiguration
argument_list|()
operator|.
name|getOperation
argument_list|()
return|;
block|}
DECL|method|getConfiguration ()
specifier|protected
name|DdbConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|ddbProducerToString
operator|==
literal|null
condition|)
block|{
name|ddbProducerToString
operator|=
literal|"DdbProducer["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|ddbProducerToString
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|DdbEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|DdbEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
block|}
end_class

end_unit

