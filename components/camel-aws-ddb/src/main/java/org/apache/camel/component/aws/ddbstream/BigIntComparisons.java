begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.ddbstream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|ddbstream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_interface
DECL|interface|BigIntComparisons
interface|interface
name|BigIntComparisons
block|{
comment|/**      * @return true if the first parameter is LT/LTEQ/EQ/GTEQ/GT the second      */
DECL|method|matches (BigInteger first, BigInteger second)
name|boolean
name|matches
parameter_list|(
name|BigInteger
name|first
parameter_list|,
name|BigInteger
name|second
parameter_list|)
function_decl|;
DECL|enum|Conditions
enum|enum
name|Conditions
implements|implements
name|BigIntComparisons
block|{
DECL|enumConstant|LT
DECL|method|LT ()
name|LT
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|BigInteger
name|first
parameter_list|,
name|BigInteger
name|second
parameter_list|)
block|{
return|return
name|first
operator|.
name|compareTo
argument_list|(
name|second
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
block|,
DECL|enumConstant|LTEQ
DECL|method|LTEQ ()
name|LTEQ
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|BigInteger
name|first
parameter_list|,
name|BigInteger
name|second
parameter_list|)
block|{
return|return
name|first
operator|.
name|compareTo
argument_list|(
name|second
argument_list|)
operator|<=
literal|0
return|;
block|}
block|}
comment|// TODO Add EQ/GTEQ/GT as needed, but note that GTEQ == !LT and GT == !LTEQ and EQ == (!LT&& !GT)
block|}
block|}
end_interface

end_unit

