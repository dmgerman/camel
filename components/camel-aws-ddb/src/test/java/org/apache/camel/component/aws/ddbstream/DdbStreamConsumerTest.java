begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.ddbstream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|ddbstream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|AmazonDynamoDBStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ExpiredIteratorException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|GetRecordsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|GetRecordsResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ShardIteratorType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|StreamRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|DdbStreamConsumerTest
specifier|public
class|class
name|DdbStreamConsumerTest
block|{
DECL|field|undertest
specifier|private
name|DdbStreamConsumer
name|undertest
decl_stmt|;
annotation|@
name|Mock
DECL|field|amazonDynamoDBStreams
specifier|private
name|AmazonDynamoDBStreams
name|amazonDynamoDBStreams
decl_stmt|;
annotation|@
name|Mock
DECL|field|processor
specifier|private
name|AsyncProcessor
name|processor
decl_stmt|;
annotation|@
name|Mock
DECL|field|shardIteratorHandler
specifier|private
name|ShardIteratorHandler
name|shardIteratorHandler
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
DECL|field|component
specifier|private
specifier|final
name|DdbStreamComponent
name|component
init|=
operator|new
name|DdbStreamComponent
argument_list|(
name|context
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|DdbStreamEndpoint
name|endpoint
init|=
operator|new
name|DdbStreamEndpoint
argument_list|(
literal|null
argument_list|,
operator|new
name|DdbStreamConfiguration
argument_list|()
argument_list|,
name|component
argument_list|)
decl_stmt|;
DECL|field|recordsAnswer
specifier|private
name|GetRecordsAnswer
name|recordsAnswer
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setAmazonDynamoDbStreamsClient
argument_list|(
name|amazonDynamoDBStreams
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|start
argument_list|()
expr_stmt|;
name|undertest
operator|=
operator|new
name|DdbStreamConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|shardIteratorHandler
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|shardIterators
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|shardIterators
operator|.
name|put
argument_list|(
literal|"shard_iterator_a_000"
argument_list|,
literal|"shard_iterator_a_001"
argument_list|)
expr_stmt|;
name|shardIterators
operator|.
name|put
argument_list|(
literal|"shard_iterator_b_000"
argument_list|,
literal|"shard_iterator_b_001"
argument_list|)
expr_stmt|;
name|shardIterators
operator|.
name|put
argument_list|(
literal|"shard_iterator_b_001"
argument_list|,
literal|"shard_iterator_b_002"
argument_list|)
expr_stmt|;
name|shardIterators
operator|.
name|put
argument_list|(
literal|"shard_iterator_c_000"
argument_list|,
literal|"shard_iterator_c_001"
argument_list|)
expr_stmt|;
name|shardIterators
operator|.
name|put
argument_list|(
literal|"shard_iterator_d_000"
argument_list|,
literal|"shard_iterator_d_001"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Record
argument_list|>
argument_list|>
name|answers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|answers
operator|.
name|put
argument_list|(
literal|"shard_iterator_a_001"
argument_list|,
name|createRecords
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|answers
operator|.
name|put
argument_list|(
literal|"shard_iterator_b_000"
argument_list|,
name|createRecords
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|answers
operator|.
name|put
argument_list|(
literal|"shard_iterator_b_001"
argument_list|,
name|createRecords
argument_list|(
literal|"11"
argument_list|,
literal|"13"
argument_list|)
argument_list|)
expr_stmt|;
name|answers
operator|.
name|put
argument_list|(
literal|"shard_iterator_b_002"
argument_list|,
name|createRecords
argument_list|(
literal|"14"
argument_list|)
argument_list|)
expr_stmt|;
name|answers
operator|.
name|put
argument_list|(
literal|"shard_iterator_d_000"
argument_list|,
name|createRecords
argument_list|(
literal|"21"
argument_list|,
literal|"25"
argument_list|)
argument_list|)
expr_stmt|;
name|answers
operator|.
name|put
argument_list|(
literal|"shard_iterator_d_001"
argument_list|,
name|createRecords
argument_list|(
literal|"30"
argument_list|,
literal|"35"
argument_list|,
literal|"40"
argument_list|)
argument_list|)
expr_stmt|;
name|recordsAnswer
operator|=
operator|new
name|GetRecordsAnswer
argument_list|(
name|shardIterators
argument_list|,
name|answers
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|amazonDynamoDBStreams
operator|.
name|getRecords
argument_list|(
name|any
argument_list|(
name|GetRecordsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|recordsAnswer
argument_list|)
expr_stmt|;
block|}
DECL|method|pad (String num, int to)
name|String
name|pad
parameter_list|(
name|String
name|num
parameter_list|,
name|int
name|to
parameter_list|)
block|{
comment|// lazy padding
switch|switch
condition|(
name|num
operator|.
name|length
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
return|return
literal|"00"
operator|+
name|num
return|;
case|case
literal|2
case|:
return|return
literal|"0"
operator|+
name|num
return|;
default|default:
return|return
name|num
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|itResumesFromAfterTheLastSeenSequenceNumberWhenAShardIteratorHasExpired ()
specifier|public
name|void
name|itResumesFromAfterTheLastSeenSequenceNumberWhenAShardIteratorHasExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setIteratorType
argument_list|(
name|ShardIteratorType
operator|.
name|LATEST
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shardIteratorHandler
operator|.
name|getShardIterator
argument_list|(
name|ArgumentMatchers
operator|.
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"shard_iterator_b_000"
argument_list|,
literal|"shard_iterator_b_001"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shardIteratorHandler
operator|.
name|getShardIterator
argument_list|(
name|ArgumentMatchers
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"shard_iterator_b_001"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|amazonDynamoDBStreams
operator|.
name|getRecords
argument_list|(
name|any
argument_list|(
name|GetRecordsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|recordsAnswer
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ExpiredIteratorException
argument_list|(
literal|"expired shard"
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|recordsAnswer
argument_list|)
expr_stmt|;
name|undertest
operator|.
name|poll
argument_list|()
expr_stmt|;
name|undertest
operator|.
name|poll
argument_list|()
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Exchange
argument_list|>
name|exchangeCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|processor
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|exchangeCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|AsyncCallback
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|shardIteratorHandler
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getShardIterator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// first poll. Second poll, getRecords fails with an expired shard.
name|verify
argument_list|(
name|shardIteratorHandler
argument_list|)
operator|.
name|getShardIterator
argument_list|(
literal|"9"
argument_list|)
expr_stmt|;
comment|// second poll, with a resumeFrom.
name|assertThat
argument_list|(
name|exchangeCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Record
operator|.
name|class
argument_list|)
operator|.
name|getDynamodb
argument_list|()
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exchangeCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Record
operator|.
name|class
argument_list|)
operator|.
name|getDynamodb
argument_list|()
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exchangeCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Record
operator|.
name|class
argument_list|)
operator|.
name|getDynamodb
argument_list|()
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"13"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|atSeqNumber35GivesFirstRecordWithSeq35 ()
specifier|public
name|void
name|atSeqNumber35GivesFirstRecordWithSeq35
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setIteratorType
argument_list|(
name|ShardIteratorType
operator|.
name|AT_SEQUENCE_NUMBER
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setSequenceNumberProvider
argument_list|(
operator|new
name|StaticSequenceNumberProvider
argument_list|(
literal|"35"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shardIteratorHandler
operator|.
name|getShardIterator
argument_list|(
name|ArgumentMatchers
operator|.
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"shard_iterator_d_001"
argument_list|,
literal|"shard_iterator_d_002"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
comment|// poll lots.
name|undertest
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
name|ArgumentCaptor
argument_list|<
name|Exchange
argument_list|>
name|exchangeCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|processor
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|exchangeCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|AsyncCallback
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exchangeCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Record
operator|.
name|class
argument_list|)
operator|.
name|getDynamodb
argument_list|()
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"35"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exchangeCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Record
operator|.
name|class
argument_list|)
operator|.
name|getDynamodb
argument_list|()
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"40"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|afterSeqNumber35GivesFirstRecordWithSeq40 ()
specifier|public
name|void
name|afterSeqNumber35GivesFirstRecordWithSeq40
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setIteratorType
argument_list|(
name|ShardIteratorType
operator|.
name|AFTER_SEQUENCE_NUMBER
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setSequenceNumberProvider
argument_list|(
operator|new
name|StaticSequenceNumberProvider
argument_list|(
literal|"35"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shardIteratorHandler
operator|.
name|getShardIterator
argument_list|(
name|ArgumentMatchers
operator|.
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"shard_iterator_d_001"
argument_list|,
literal|"shard_iterator_d_002"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
comment|// poll lots.
name|undertest
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
name|ArgumentCaptor
argument_list|<
name|Exchange
argument_list|>
name|exchangeCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|processor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|exchangeCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|AsyncCallback
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exchangeCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Record
operator|.
name|class
argument_list|)
operator|.
name|getDynamodb
argument_list|()
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"40"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createRecords (String... sequenceNumbers)
specifier|private
specifier|static
name|Collection
argument_list|<
name|Record
argument_list|>
name|createRecords
parameter_list|(
name|String
modifier|...
name|sequenceNumbers
parameter_list|)
block|{
name|List
argument_list|<
name|Record
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|seqNum
range|:
name|sequenceNumbers
control|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|Record
argument_list|()
operator|.
name|withDynamodb
argument_list|(
operator|new
name|StreamRecord
argument_list|()
operator|.
name|withSequenceNumber
argument_list|(
name|seqNum
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|class|GetRecordsAnswer
specifier|private
class|class
name|GetRecordsAnswer
implements|implements
name|Answer
argument_list|<
name|GetRecordsResult
argument_list|>
block|{
DECL|field|shardIterators
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|shardIterators
decl_stmt|;
DECL|field|answers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Record
argument_list|>
argument_list|>
name|answers
decl_stmt|;
DECL|field|shardIteratorPattern
specifier|private
specifier|final
name|Pattern
name|shardIteratorPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"shard_iterator_d_0*(\\d+)"
argument_list|)
decl_stmt|;
DECL|method|GetRecordsAnswer (Map<String, String> shardIterators, Map<String, Collection<Record>> answers)
name|GetRecordsAnswer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|shardIterators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Record
argument_list|>
argument_list|>
name|answers
parameter_list|)
block|{
name|this
operator|.
name|shardIterators
operator|=
name|shardIterators
expr_stmt|;
name|this
operator|.
name|answers
operator|=
name|answers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|answer (InvocationOnMock invocation)
specifier|public
name|GetRecordsResult
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|String
name|shardIterator
init|=
operator|(
operator|(
name|GetRecordsRequest
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getShardIterator
argument_list|()
decl_stmt|;
comment|// note that HashMap returns null when there is no entry in the map.
comment|// A null 'nextShardIterator' indicates that the shard has finished
comment|// and we should move onto the next shard.
name|String
name|nextShardIterator
init|=
name|shardIterators
operator|.
name|get
argument_list|(
name|shardIterator
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|shardIteratorPattern
operator|.
name|matcher
argument_list|(
name|shardIterator
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Record
argument_list|>
name|ans
init|=
name|answers
operator|.
name|get
argument_list|(
name|shardIterator
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextShardIterator
operator|==
literal|null
operator|&&
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// last shard iterates forever.
name|Integer
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|nextShardIterator
operator|=
literal|"shard_iterator_d_"
operator|+
name|pad
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|num
operator|+
literal|1
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|ans
condition|)
block|{
comment|// default to an empty list of records.
name|ans
operator|=
name|createRecords
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|GetRecordsResult
argument_list|()
operator|.
name|withRecords
argument_list|(
name|ans
argument_list|)
operator|.
name|withNextShardIterator
argument_list|(
name|nextShardIterator
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

