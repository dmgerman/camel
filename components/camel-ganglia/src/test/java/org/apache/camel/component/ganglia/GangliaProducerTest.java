begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ganglia
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ganglia
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|gmetric
operator|.
name|GMetricSlope
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|gmetric
operator|.
name|GMetricType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|GangliaProducerTest
specifier|public
class|class
name|GangliaProducerTest
block|{
DECL|field|BODY
specifier|private
specifier|static
specifier|final
name|String
name|BODY
init|=
literal|"2.0"
decl_stmt|;
DECL|field|PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"prefix"
decl_stmt|;
DECL|field|GROUP_NAME
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_NAME
init|=
literal|"groupName"
decl_stmt|;
DECL|field|METRIC_NAME
specifier|private
specifier|static
specifier|final
name|String
name|METRIC_NAME
init|=
literal|"wheelbase"
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|GMetricType
name|TYPE
init|=
name|GMetricType
operator|.
name|DOUBLE
decl_stmt|;
DECL|field|SLOPE
specifier|private
specifier|static
specifier|final
name|GMetricSlope
name|SLOPE
init|=
name|GMetricSlope
operator|.
name|POSITIVE
decl_stmt|;
DECL|field|UNITS
specifier|private
specifier|static
specifier|final
name|String
name|UNITS
init|=
literal|"meter"
decl_stmt|;
DECL|field|T_MAX
specifier|private
specifier|static
specifier|final
name|int
name|T_MAX
init|=
literal|1
decl_stmt|;
DECL|field|D_MAX
specifier|private
specifier|static
specifier|final
name|int
name|D_MAX
init|=
literal|2
decl_stmt|;
DECL|field|CONF_GROUP_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CONF_GROUP_NAME
init|=
literal|"confGroupName"
decl_stmt|;
DECL|field|CONF_METRIC_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CONF_METRIC_NAME
init|=
literal|"confWheelbase"
decl_stmt|;
DECL|field|CONF_TYPE
specifier|private
specifier|static
specifier|final
name|GMetricType
name|CONF_TYPE
init|=
name|GMetricType
operator|.
name|INT8
decl_stmt|;
DECL|field|CONF_SLOPE
specifier|private
specifier|static
specifier|final
name|GMetricSlope
name|CONF_SLOPE
init|=
name|GMetricSlope
operator|.
name|NEGATIVE
decl_stmt|;
DECL|field|CONF_UNITS
specifier|private
specifier|static
specifier|final
name|String
name|CONF_UNITS
init|=
literal|"kelvin"
decl_stmt|;
DECL|field|CONF_T_MAX
specifier|private
specifier|static
specifier|final
name|int
name|CONF_T_MAX
init|=
literal|3
decl_stmt|;
DECL|field|CONF_D_MAX
specifier|private
specifier|static
specifier|final
name|int
name|CONF_D_MAX
init|=
literal|4
decl_stmt|;
annotation|@
name|Mock
DECL|field|mockPublisher
specifier|private
name|Publisher
name|mockPublisher
decl_stmt|;
annotation|@
name|Mock
DECL|field|mockEndpoint
specifier|private
name|GangliaEndpoint
name|mockEndpoint
decl_stmt|;
annotation|@
name|Mock
DECL|field|mockExchange
specifier|private
name|Exchange
name|mockExchange
decl_stmt|;
annotation|@
name|Mock
DECL|field|mockMessage
specifier|private
name|Message
name|mockMessage
decl_stmt|;
annotation|@
name|Mock
DECL|field|mockConf
specifier|private
name|GangliaConfiguration
name|mockConf
decl_stmt|;
DECL|field|mockHeaders
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mockHeaders
decl_stmt|;
DECL|field|gangliaProducer
specifier|private
name|GangliaProducer
name|gangliaProducer
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|when
argument_list|(
name|mockEndpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConf
operator|.
name|getPrefix
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConf
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF_GROUP_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConf
operator|.
name|getMetricName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF_METRIC_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConf
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF_TYPE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConf
operator|.
name|getSlope
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF_SLOPE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConf
operator|.
name|getUnits
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF_UNITS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConf
operator|.
name|getTmax
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF_T_MAX
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConf
operator|.
name|getDmax
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF_D_MAX
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockExchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockMessage
argument_list|)
expr_stmt|;
name|mockHeaders
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|mockHeaders
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|GROUP_NAME
argument_list|,
name|GROUP_NAME
argument_list|)
expr_stmt|;
name|mockHeaders
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_NAME
argument_list|,
name|METRIC_NAME
argument_list|)
expr_stmt|;
name|mockHeaders
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TYPE
argument_list|,
name|TYPE
argument_list|)
expr_stmt|;
name|mockHeaders
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_SLOPE
argument_list|,
name|SLOPE
argument_list|)
expr_stmt|;
name|mockHeaders
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_UNITS
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
name|mockHeaders
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TMAX
argument_list|,
name|T_MAX
argument_list|)
expr_stmt|;
name|mockHeaders
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_DMAX
argument_list|,
name|D_MAX
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMessage
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BODY
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMessage
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockHeaders
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMessage
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|GROUP_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|GROUP_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMessage
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|METRIC_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMessage
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TYPE
argument_list|,
name|GMetricType
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMessage
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_SLOPE
argument_list|,
name|GMetricSlope
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SLOPE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMessage
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_UNITS
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|UNITS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMessage
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TMAX
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|T_MAX
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMessage
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_DMAX
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|D_MAX
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|=
operator|new
name|GangliaProducer
argument_list|(
name|mockEndpoint
argument_list|,
name|mockPublisher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processMessageHeadersShouldSucceed ()
specifier|public
name|void
name|processMessageHeadersShouldSucceed
parameter_list|()
throws|throws
name|Exception
block|{
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|GROUP_NAME
argument_list|,
name|METRIC_NAME
argument_list|,
name|BODY
argument_list|,
name|TYPE
argument_list|,
name|SLOPE
argument_list|,
name|T_MAX
argument_list|,
name|D_MAX
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processEmptyDoubleShouldPublishNan ()
specifier|public
name|void
name|processEmptyDoubleShouldPublishNan
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|mockMessage
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|GROUP_NAME
argument_list|,
name|METRIC_NAME
argument_list|,
literal|"NaN"
argument_list|,
name|TYPE
argument_list|,
name|SLOPE
argument_list|,
name|T_MAX
argument_list|,
name|D_MAX
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processWithPrefixShouldPublishPrefix ()
specifier|public
name|void
name|processWithPrefixShouldPublishPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|mockConf
operator|.
name|getPrefix
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PREFIX
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|GROUP_NAME
argument_list|,
name|PREFIX
operator|+
literal|"_"
operator|+
name|METRIC_NAME
argument_list|,
name|BODY
argument_list|,
name|TYPE
argument_list|,
name|SLOPE
argument_list|,
name|T_MAX
argument_list|,
name|D_MAX
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processMessageWithoutGroupNameShouldPublishEndpointLevelConfiguration ()
specifier|public
name|void
name|processMessageWithoutGroupNameShouldPublishEndpointLevelConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|mockHeaders
operator|.
name|remove
argument_list|(
name|GangliaConstants
operator|.
name|GROUP_NAME
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|CONF_GROUP_NAME
argument_list|,
name|METRIC_NAME
argument_list|,
name|BODY
argument_list|,
name|TYPE
argument_list|,
name|SLOPE
argument_list|,
name|T_MAX
argument_list|,
name|D_MAX
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processMessageWithoutMetricNameShouldPublishEndpointLevelConfiguration ()
specifier|public
name|void
name|processMessageWithoutMetricNameShouldPublishEndpointLevelConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|mockHeaders
operator|.
name|remove
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_NAME
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|GROUP_NAME
argument_list|,
name|CONF_METRIC_NAME
argument_list|,
name|BODY
argument_list|,
name|TYPE
argument_list|,
name|SLOPE
argument_list|,
name|T_MAX
argument_list|,
name|D_MAX
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processMessageWithoutMetricTypeShouldPublishEndpointLevelConfiguration ()
specifier|public
name|void
name|processMessageWithoutMetricTypeShouldPublishEndpointLevelConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|mockHeaders
operator|.
name|remove
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TYPE
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|GROUP_NAME
argument_list|,
name|METRIC_NAME
argument_list|,
name|BODY
argument_list|,
name|CONF_TYPE
argument_list|,
name|SLOPE
argument_list|,
name|T_MAX
argument_list|,
name|D_MAX
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processMessageWithoutMetricSlopeShouldPublishEndpointLevelConfiguration ()
specifier|public
name|void
name|processMessageWithoutMetricSlopeShouldPublishEndpointLevelConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|mockHeaders
operator|.
name|remove
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_SLOPE
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|GROUP_NAME
argument_list|,
name|METRIC_NAME
argument_list|,
name|BODY
argument_list|,
name|TYPE
argument_list|,
name|CONF_SLOPE
argument_list|,
name|T_MAX
argument_list|,
name|D_MAX
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processMessageWithoutMetricUnitsShouldPublishEndpointLevelConfiguration ()
specifier|public
name|void
name|processMessageWithoutMetricUnitsShouldPublishEndpointLevelConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|mockHeaders
operator|.
name|remove
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_UNITS
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|GROUP_NAME
argument_list|,
name|METRIC_NAME
argument_list|,
name|BODY
argument_list|,
name|TYPE
argument_list|,
name|SLOPE
argument_list|,
name|T_MAX
argument_list|,
name|D_MAX
argument_list|,
name|CONF_UNITS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processMessageWithoutMetricTMaxShouldPublishEndpointLevelConfiguration ()
specifier|public
name|void
name|processMessageWithoutMetricTMaxShouldPublishEndpointLevelConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|mockHeaders
operator|.
name|remove
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TMAX
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|GROUP_NAME
argument_list|,
name|METRIC_NAME
argument_list|,
name|BODY
argument_list|,
name|TYPE
argument_list|,
name|SLOPE
argument_list|,
name|CONF_T_MAX
argument_list|,
name|D_MAX
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processMessageWithoutMetricDMaxShouldPublishEndpointLevelConfiguration ()
specifier|public
name|void
name|processMessageWithoutMetricDMaxShouldPublishEndpointLevelConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|mockHeaders
operator|.
name|remove
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_DMAX
argument_list|)
expr_stmt|;
name|gangliaProducer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPublisher
argument_list|)
operator|.
name|publish
argument_list|(
name|GROUP_NAME
argument_list|,
name|METRIC_NAME
argument_list|,
name|BODY
argument_list|,
name|TYPE
argument_list|,
name|SLOPE
argument_list|,
name|T_MAX
argument_list|,
name|CONF_D_MAX
argument_list|,
name|UNITS
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

