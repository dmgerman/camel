begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ganglia
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ganglia
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|gmetric
operator|.
name|GMetricSlope
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|gmetric
operator|.
name|GMetricType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * {@code GangliaCamelTest} is not shipped with an embedded gmond agent, as such  * datagrams sent by the camel-ganglia component during those tests are simply  * dropped at UDP level.  */
end_comment

begin_class
DECL|class|GangliaCamelTest
specifier|public
class|class
name|GangliaCamelTest
extends|extends
name|CamelGangliaTestSupport
block|{
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|getTestUri ()
specifier|private
name|String
name|getTestUri
parameter_list|()
block|{
return|return
literal|"ganglia:localhost:"
operator|+
name|getTestPort
argument_list|()
operator|+
literal|"?mode=UNICAST&metricName=temperature&type=Double"
return|;
block|}
annotation|@
name|Test
DECL|method|sendShouldNotThrow ()
specifier|public
name|void
name|sendShouldNotThrow
parameter_list|()
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|getTestUri
argument_list|()
argument_list|,
literal|28.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendUsingWireFormat30xShouldNotThrow ()
specifier|public
name|void
name|sendUsingWireFormat30xShouldNotThrow
parameter_list|()
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|getTestUri
argument_list|()
operator|+
literal|"&wireFormat31x=false"
argument_list|,
literal|28.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendMessageHeadersOverridingEndpointOptionsShouldNotThrow ()
specifier|public
name|void
name|sendMessageHeadersOverridingEndpointOptionsShouldNotThrow
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|GROUP_NAME
argument_list|,
literal|"sea-mesure"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_NAME
argument_list|,
literal|"depth"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TYPE
argument_list|,
name|GMetricType
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_SLOPE
argument_list|,
name|GMetricSlope
operator|.
name|NEGATIVE
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_UNITS
argument_list|,
literal|"cm"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TMAX
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_DMAX
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
name|getTestUri
argument_list|()
argument_list|,
operator|-
literal|3.0f
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendWithWrongTypeShouldThrow ()
specifier|public
name|void
name|sendWithWrongTypeShouldThrow
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|ResolveEndpointFailedException
operator|.
name|class
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|getTestUri
argument_list|()
operator|+
literal|"&type=wrong"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

