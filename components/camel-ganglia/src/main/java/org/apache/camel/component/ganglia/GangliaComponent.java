begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ganglia
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ganglia
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|gmetric
operator|.
name|GMetric
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|gmetric
operator|.
name|GMetricSlope
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|gmetric
operator|.
name|GMetricType
import|;
end_import

begin_class
DECL|class|GangliaComponent
specifier|public
class|class
name|GangliaComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|configuration
specifier|private
name|GangliaConfiguration
name|configuration
decl_stmt|;
DECL|method|GangliaComponent ()
specifier|public
name|GangliaComponent
parameter_list|()
block|{
name|super
argument_list|(
name|GangliaEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|GangliaConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|url
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
comment|// must use copy as each endpoint can have different options
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configuration
argument_list|,
literal|"configuration"
argument_list|)
expr_stmt|;
name|GangliaConfiguration
name|config
init|=
name|configuration
operator|.
name|copy
argument_list|()
decl_stmt|;
name|config
operator|.
name|configure
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|GangliaEndpoint
name|endpoint
init|=
operator|new
name|GangliaEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|GangliaConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/**      * To use the shared configuration. Properties of the shared configuration can also be set individually.      */
DECL|method|setConfiguration (GangliaConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|GangliaConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getHost
argument_list|()
return|;
block|}
comment|/**      * Host name for Ganglia server      * @param host      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|configuration
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**      * Port for Ganglia server      * @param port      */
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|configuration
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
DECL|method|getMode ()
specifier|public
name|GMetric
operator|.
name|UDPAddressingMode
name|getMode
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getMode
argument_list|()
return|;
block|}
comment|/**      * Send the UDP metric packets using MULTICAST or UNICAST      * @param mode      */
DECL|method|setMode (GMetric.UDPAddressingMode mode)
specifier|public
name|void
name|setMode
parameter_list|(
name|GMetric
operator|.
name|UDPAddressingMode
name|mode
parameter_list|)
block|{
name|configuration
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
DECL|method|getTtl ()
specifier|public
name|int
name|getTtl
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getTtl
argument_list|()
return|;
block|}
comment|/**      * If using multicast, set the TTL of the packets      * @param ttl      */
DECL|method|setTtl (int ttl)
specifier|public
name|void
name|setTtl
parameter_list|(
name|int
name|ttl
parameter_list|)
block|{
name|configuration
operator|.
name|setTtl
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
DECL|method|getWireFormat31x ()
specifier|public
name|boolean
name|getWireFormat31x
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getWireFormat31x
argument_list|()
return|;
block|}
comment|/**      * Use the wire format of Ganglia 3.1.0 and later versions.  Set this to false to use Ganglia 3.0.x or earlier.      * @param wireFormat31x      */
DECL|method|setWireFormat31x (boolean wireFormat31x)
specifier|public
name|void
name|setWireFormat31x
parameter_list|(
name|boolean
name|wireFormat31x
parameter_list|)
block|{
name|configuration
operator|.
name|setWireFormat31x
argument_list|(
name|wireFormat31x
argument_list|)
expr_stmt|;
block|}
DECL|method|getSpoofHostname ()
specifier|public
name|String
name|getSpoofHostname
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getSpoofHostname
argument_list|()
return|;
block|}
comment|/**      * Spoofing information IP:hostname      * @param spoofHostname      */
DECL|method|setSpoofHostname (String spoofHostname)
specifier|public
name|void
name|setSpoofHostname
parameter_list|(
name|String
name|spoofHostname
parameter_list|)
block|{
name|configuration
operator|.
name|setSpoofHostname
argument_list|(
name|spoofHostname
argument_list|)
expr_stmt|;
block|}
DECL|method|getGroupName ()
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getGroupName
argument_list|()
return|;
block|}
comment|/**      * The group that the metric belongs to.      * @param groupName      */
DECL|method|setGroupName (String groupName)
specifier|public
name|void
name|setGroupName
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|configuration
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getPrefix
argument_list|()
return|;
block|}
comment|/**      * Prefix the metric name with this string and an underscore.      * @param prefix      */
DECL|method|setPrefix (String prefix)
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|configuration
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
DECL|method|getMetricName ()
specifier|public
name|String
name|getMetricName
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getMetricName
argument_list|()
return|;
block|}
comment|/**      * The name to use for the metric.      * @param metricName      */
DECL|method|setMetricName (String metricName)
specifier|public
name|void
name|setMetricName
parameter_list|(
name|String
name|metricName
parameter_list|)
block|{
name|configuration
operator|.
name|setMetricName
argument_list|(
name|metricName
argument_list|)
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|GMetricType
name|getType
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getType
argument_list|()
return|;
block|}
comment|/**      * The type of value      * @param type      */
DECL|method|setType (GMetricType type)
specifier|public
name|void
name|setType
parameter_list|(
name|GMetricType
name|type
parameter_list|)
block|{
name|configuration
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|getSlope ()
specifier|public
name|GMetricSlope
name|getSlope
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getSlope
argument_list|()
return|;
block|}
comment|/**      * The slope      * @param slope      */
DECL|method|setSlope (GMetricSlope slope)
specifier|public
name|void
name|setSlope
parameter_list|(
name|GMetricSlope
name|slope
parameter_list|)
block|{
name|configuration
operator|.
name|setSlope
argument_list|(
name|slope
argument_list|)
expr_stmt|;
block|}
DECL|method|getUnits ()
specifier|public
name|String
name|getUnits
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getUnits
argument_list|()
return|;
block|}
comment|/**      * Any unit of measurement that qualifies the metric, e.g. widgets, litres, bytes.      * Do not include a prefix such as k (kilo) or m (milli), other tools may scale the units later.      * The value should be unscaled.      * @param units      */
DECL|method|setUnits (String units)
specifier|public
name|void
name|setUnits
parameter_list|(
name|String
name|units
parameter_list|)
block|{
name|configuration
operator|.
name|setUnits
argument_list|(
name|units
argument_list|)
expr_stmt|;
block|}
DECL|method|isWireFormat31x ()
specifier|public
name|boolean
name|isWireFormat31x
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isWireFormat31x
argument_list|()
return|;
block|}
DECL|method|getTmax ()
specifier|public
name|int
name|getTmax
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getTmax
argument_list|()
return|;
block|}
comment|/**      * Maximum time in seconds that the value can be considered current.      * After this, Ganglia considers the value to have expired.      * @param tmax      */
DECL|method|setTmax (int tmax)
specifier|public
name|void
name|setTmax
parameter_list|(
name|int
name|tmax
parameter_list|)
block|{
name|configuration
operator|.
name|setTmax
argument_list|(
name|tmax
argument_list|)
expr_stmt|;
block|}
DECL|method|getDmax ()
specifier|public
name|int
name|getDmax
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getDmax
argument_list|()
return|;
block|}
comment|/**      * Minumum time in seconds before Ganglia will purge the metric value if it expires.      * Set to 0 and the value will remain in Ganglia indefinitely until a gmond agent restart.      * @param dmax      */
DECL|method|setDmax (int dmax)
specifier|public
name|void
name|setDmax
parameter_list|(
name|int
name|dmax
parameter_list|)
block|{
name|configuration
operator|.
name|setDmax
argument_list|(
name|dmax
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

