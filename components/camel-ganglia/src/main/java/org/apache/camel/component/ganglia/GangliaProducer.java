begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ganglia
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ganglia
package|;
end_package

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|gmetric
operator|.
name|GMetricSlope
import|;
end_import

begin_import
import|import
name|info
operator|.
name|ganglia
operator|.
name|gmetric4j
operator|.
name|gmetric
operator|.
name|GMetricType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_class
DECL|class|GangliaProducer
specifier|public
class|class
name|GangliaProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|publisher
specifier|private
specifier|final
name|Publisher
name|publisher
decl_stmt|;
DECL|field|gangliaEndpoint
specifier|private
specifier|final
name|GangliaEndpoint
name|gangliaEndpoint
decl_stmt|;
DECL|method|GangliaProducer (GangliaEndpoint endpoint, Publisher publisher)
specifier|public
name|GangliaProducer
parameter_list|(
name|GangliaEndpoint
name|endpoint
parameter_list|,
name|Publisher
name|publisher
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|gangliaEndpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|publisher
operator|=
name|publisher
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|GangliaConfiguration
name|conf
init|=
name|gangliaEndpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|groupName
init|=
name|conf
operator|.
name|getGroupName
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GangliaConstants
operator|.
name|GROUP_NAME
argument_list|)
condition|)
block|{
name|groupName
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|GROUP_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|String
name|prefix
init|=
name|conf
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|metricName
init|=
name|conf
operator|.
name|getMetricName
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_NAME
argument_list|)
condition|)
block|{
name|metricName
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metricName
operator|=
name|prefix
operator|+
literal|"_"
operator|+
name|metricName
expr_stmt|;
block|}
name|GMetricType
name|type
init|=
name|conf
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TYPE
argument_list|)
condition|)
block|{
name|type
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TYPE
argument_list|,
name|GMetricType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|GMetricSlope
name|slope
init|=
name|conf
operator|.
name|getSlope
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_SLOPE
argument_list|)
condition|)
block|{
name|slope
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_SLOPE
argument_list|,
name|GMetricSlope
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|String
name|units
init|=
name|conf
operator|.
name|getUnits
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_UNITS
argument_list|)
condition|)
block|{
name|units
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_UNITS
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|int
name|tmax
init|=
name|conf
operator|.
name|getTmax
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TMAX
argument_list|)
condition|)
block|{
name|tmax
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_TMAX
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|int
name|dmax
init|=
name|conf
operator|.
name|getDmax
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_DMAX
argument_list|)
condition|)
block|{
name|dmax
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|GangliaConstants
operator|.
name|METRIC_DMAX
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|type
operator|==
name|GMetricType
operator|.
name|FLOAT
operator|||
name|type
operator|==
name|GMetricType
operator|.
name|DOUBLE
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Metric {} string value was null, using NaN"
argument_list|,
name|metricName
argument_list|)
expr_stmt|;
name|value
operator|=
literal|"NaN"
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending metric {} to Ganglia: {}"
argument_list|,
name|metricName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|publisher
operator|.
name|publish
argument_list|(
name|groupName
argument_list|,
name|metricName
argument_list|,
name|value
argument_list|,
name|type
argument_list|,
name|slope
argument_list|,
name|tmax
argument_list|,
name|dmax
argument_list|,
name|units
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Sending metric done"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

