begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.10.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
DECL|package|org.apache.camel.component.thrift.generated
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
operator|.
name|generated
package|;
end_package

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|,
literal|"unused"
block|}
argument_list|)
comment|/**  * Structs can also be exceptions, if they are nasty.  */
annotation|@
name|javax
operator|.
name|annotation
operator|.
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.10.0)"
argument_list|,
name|date
operator|=
literal|"2017-06-14"
argument_list|)
DECL|class|InvalidOperation
specifier|public
class|class
name|InvalidOperation
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|InvalidOperation
argument_list|,
name|InvalidOperation
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|InvalidOperation
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"InvalidOperation"
argument_list|)
decl_stmt|;
DECL|field|WHAT_OP_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|WHAT_OP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"whatOp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
DECL|field|WHY_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|WHY_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"why"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|InvalidOperationStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|InvalidOperationTupleSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|whatOp
specifier|public
name|int
name|whatOp
decl_stmt|;
comment|// required
DECL|field|why
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|why
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
DECL|enumConstant|WHAT_OP
name|WHAT_OP
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"whatOp"
argument_list|)
block|,
DECL|enumConstant|WHY
name|WHY
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"why"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// WHAT_OP
return|return
name|WHAT_OP
return|;
case|case
literal|2
case|:
comment|// WHY
return|return
name|WHY
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|__WHATOP_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__WHATOP_ISSET_ID
init|=
literal|0
decl_stmt|;
DECL|field|__isset_bitfield
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|WHAT_OP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"whatOp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|WHY
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"why"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|InvalidOperation
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|InvalidOperation ()
specifier|public
name|InvalidOperation
parameter_list|()
block|{   }
DECL|method|InvalidOperation ( int whatOp, java.lang.String why)
specifier|public
name|InvalidOperation
parameter_list|(
name|int
name|whatOp
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|why
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|whatOp
operator|=
name|whatOp
expr_stmt|;
name|setWhatOpIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|why
operator|=
name|why
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
DECL|method|InvalidOperation (InvalidOperation other)
specifier|public
name|InvalidOperation
parameter_list|(
name|InvalidOperation
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
name|this
operator|.
name|whatOp
operator|=
name|other
operator|.
name|whatOp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetWhy
argument_list|()
condition|)
block|{
name|this
operator|.
name|why
operator|=
name|other
operator|.
name|why
expr_stmt|;
block|}
block|}
DECL|method|deepCopy ()
specifier|public
name|InvalidOperation
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|InvalidOperation
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setWhatOpIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|whatOp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|why
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getWhatOp ()
specifier|public
name|int
name|getWhatOp
parameter_list|()
block|{
return|return
name|this
operator|.
name|whatOp
return|;
block|}
DECL|method|setWhatOp (int whatOp)
specifier|public
name|InvalidOperation
name|setWhatOp
parameter_list|(
name|int
name|whatOp
parameter_list|)
block|{
name|this
operator|.
name|whatOp
operator|=
name|whatOp
expr_stmt|;
name|setWhatOpIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetWhatOp ()
specifier|public
name|void
name|unsetWhatOp
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__WHATOP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field whatOp is set (has been assigned a value) and false otherwise */
DECL|method|isSetWhatOp ()
specifier|public
name|boolean
name|isSetWhatOp
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__WHATOP_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setWhatOpIsSet (boolean value)
specifier|public
name|void
name|setWhatOpIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__WHATOP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getWhy ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getWhy
parameter_list|()
block|{
return|return
name|this
operator|.
name|why
return|;
block|}
DECL|method|setWhy (java.lang.String why)
specifier|public
name|InvalidOperation
name|setWhy
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|why
parameter_list|)
block|{
name|this
operator|.
name|why
operator|=
name|why
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetWhy ()
specifier|public
name|void
name|unsetWhy
parameter_list|()
block|{
name|this
operator|.
name|why
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field why is set (has been assigned a value) and false otherwise */
DECL|method|isSetWhy ()
specifier|public
name|boolean
name|isSetWhy
parameter_list|()
block|{
return|return
name|this
operator|.
name|why
operator|!=
literal|null
return|;
block|}
DECL|method|setWhyIsSet (boolean value)
specifier|public
name|void
name|setWhyIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|why
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|WHAT_OP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetWhatOp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setWhatOp
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|WHY
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetWhy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setWhy
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|WHAT_OP
case|:
return|return
name|getWhatOp
argument_list|()
return|;
case|case
name|WHY
case|:
return|return
name|getWhy
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|WHAT_OP
case|:
return|return
name|isSetWhatOp
argument_list|()
return|;
case|case
name|WHY
case|:
return|return
name|isSetWhy
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|InvalidOperation
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|InvalidOperation
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (InvalidOperation that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|InvalidOperation
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_whatOp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_whatOp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_whatOp
operator|||
name|that_present_whatOp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_whatOp
operator|&&
name|that_present_whatOp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|whatOp
operator|!=
name|that
operator|.
name|whatOp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_why
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetWhy
argument_list|()
decl_stmt|;
name|boolean
name|that_present_why
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetWhy
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_why
operator|||
name|that_present_why
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_why
operator|&&
name|that_present_why
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|why
operator|.
name|equals
argument_list|(
name|that
operator|.
name|why
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|whatOp
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetWhy
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetWhy
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|why
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (InvalidOperation other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|InvalidOperation
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetWhatOp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetWhatOp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetWhatOp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|whatOp
argument_list|,
name|other
operator|.
name|whatOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetWhy
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetWhy
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetWhy
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|why
argument_list|,
name|other
operator|.
name|why
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"InvalidOperation("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"whatOp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|whatOp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"why:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|why
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|why
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|InvalidOperationStandardSchemeFactory
specifier|private
specifier|static
class|class
name|InvalidOperationStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|InvalidOperationStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|InvalidOperationStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|InvalidOperationStandardScheme
specifier|private
specifier|static
class|class
name|InvalidOperationStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|InvalidOperation
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, InvalidOperation struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|InvalidOperation
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// WHAT_OP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|whatOp
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setWhatOpIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// WHY
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|why
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setWhyIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, InvalidOperation struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|InvalidOperation
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|WHAT_OP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|whatOp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|why
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|WHY_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|why
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|InvalidOperationTupleSchemeFactory
specifier|private
specifier|static
class|class
name|InvalidOperationTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|InvalidOperationTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|InvalidOperationTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|InvalidOperationTupleScheme
specifier|private
specifier|static
class|class
name|InvalidOperationTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|InvalidOperation
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, InvalidOperation struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|InvalidOperation
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetWhatOp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetWhy
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetWhatOp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|whatOp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetWhy
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|why
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, InvalidOperation struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|InvalidOperation
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|whatOp
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setWhatOpIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|why
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setWhyIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
end_class

end_unit

