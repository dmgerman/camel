begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.10.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
DECL|package|org.apache.camel.component.thrift.generated
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
operator|.
name|generated
package|;
end_package

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|,
literal|"unused"
block|}
argument_list|)
annotation|@
name|javax
operator|.
name|annotation
operator|.
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.10.0)"
argument_list|,
name|date
operator|=
literal|"2017-06-14"
argument_list|)
DECL|class|Calculator
specifier|public
class|class
name|Calculator
block|{
comment|/**    * Ahh, now onto the cool part, defining a service. Services just need a name    * and can optionally inherit from another service using the extends keyword.    */
DECL|interface|Iface
specifier|public
interface|interface
name|Iface
block|{
comment|/**      * A method definition looks like C code. It has a return type, arguments,      * and optionally a list of exceptions that it may throw. Note that argument      * lists and exception lists are specified using the exact same syntax as      * field lists in struct or exception definitions.      */
DECL|method|ping ()
specifier|public
name|void
name|ping
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
DECL|method|add (int num1, int num2)
specifier|public
name|int
name|add
parameter_list|(
name|int
name|num1
parameter_list|,
name|int
name|num2
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
DECL|method|calculate (int logid, Work w)
specifier|public
name|int
name|calculate
parameter_list|(
name|int
name|logid
parameter_list|,
name|Work
name|w
parameter_list|)
throws|throws
name|InvalidOperation
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * This method has a oneway modifier. That means the client only makes      * a request and does not listen for any response at all. Oneway methods      * must be void.      */
DECL|method|zip ()
specifier|public
name|void
name|zip
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * This method echoed input object as return value.      *       * @param w      */
DECL|method|echo (Work w)
specifier|public
name|Work
name|echo
parameter_list|(
name|Work
name|w
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * This method contains all possible simple, special, struct and container types as input parameters      *       * @param v1      * @param v2      * @param v3      * @param v4      * @param v5      * @param v6      * @param v7      * @param v8      * @param v9      * @param v10      * @param v11      * @param v12      */
DECL|method|alltypes (boolean v1, byte v2, short v3, int v4, long v5, double v6, java.lang.String v7, java.nio.ByteBuffer v8, Work v9, java.util.List<java.lang.Integer> v10, java.util.Set<java.lang.String> v11, java.util.Map<java.lang.String,java.lang.Long> v12)
specifier|public
name|int
name|alltypes
parameter_list|(
name|boolean
name|v1
parameter_list|,
name|byte
name|v2
parameter_list|,
name|short
name|v3
parameter_list|,
name|int
name|v4
parameter_list|,
name|long
name|v5
parameter_list|,
name|double
name|v6
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|v7
parameter_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
parameter_list|,
name|Work
name|v9
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
block|}
DECL|interface|AsyncIface
specifier|public
interface|interface
name|AsyncIface
block|{
DECL|method|ping (org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
specifier|public
name|void
name|ping
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
DECL|method|add (int num1, int num2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
specifier|public
name|void
name|add
parameter_list|(
name|int
name|num1
parameter_list|,
name|int
name|num2
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
DECL|method|calculate (int logid, Work w, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
specifier|public
name|void
name|calculate
parameter_list|(
name|int
name|logid
parameter_list|,
name|Work
name|w
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
DECL|method|zip (org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
specifier|public
name|void
name|zip
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
DECL|method|echo (Work w, org.apache.thrift.async.AsyncMethodCallback<Work> resultHandler)
specifier|public
name|void
name|echo
parameter_list|(
name|Work
name|w
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Work
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
DECL|method|alltypes (boolean v1, byte v2, short v3, int v4, long v5, double v6, java.lang.String v7, java.nio.ByteBuffer v8, Work v9, java.util.List<java.lang.Integer> v10, java.util.Set<java.lang.String> v11, java.util.Map<java.lang.String,java.lang.Long> v12, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
specifier|public
name|void
name|alltypes
parameter_list|(
name|boolean
name|v1
parameter_list|,
name|byte
name|v2
parameter_list|,
name|short
name|v3
parameter_list|,
name|int
name|v4
parameter_list|,
name|long
name|v5
parameter_list|,
name|double
name|v6
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|v7
parameter_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
parameter_list|,
name|Work
name|v9
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
block|}
DECL|class|Client
specifier|public
specifier|static
class|class
name|Client
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TServiceClient
implements|implements
name|Iface
block|{
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TServiceClientFactory
argument_list|<
name|Client
argument_list|>
block|{
DECL|method|Factory ()
specifier|public
name|Factory
parameter_list|()
block|{}
DECL|method|getClient (org.apache.thrift.protocol.TProtocol prot)
specifier|public
name|Client
name|getClient
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
return|;
block|}
DECL|method|getClient (org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|Client
name|getClient
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
return|;
block|}
block|}
DECL|method|Client (org.apache.thrift.protocol.TProtocol prot)
specifier|public
name|Client
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
block|{
name|super
argument_list|(
name|prot
argument_list|,
name|prot
argument_list|)
expr_stmt|;
block|}
DECL|method|Client (org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|Client
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
block|{
name|super
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
block|}
DECL|method|ping ()
specifier|public
name|void
name|ping
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_ping
argument_list|()
expr_stmt|;
name|recv_ping
argument_list|()
expr_stmt|;
block|}
DECL|method|send_ping ()
specifier|public
name|void
name|send_ping
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|ping_args
name|args
init|=
operator|new
name|ping_args
argument_list|()
decl_stmt|;
name|sendBase
argument_list|(
literal|"ping"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|recv_ping ()
specifier|public
name|void
name|recv_ping
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|ping_result
name|result
init|=
operator|new
name|ping_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"ping"
argument_list|)
expr_stmt|;
return|return;
block|}
DECL|method|add (int num1, int num2)
specifier|public
name|int
name|add
parameter_list|(
name|int
name|num1
parameter_list|,
name|int
name|num2
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_add
argument_list|(
name|num1
argument_list|,
name|num2
argument_list|)
expr_stmt|;
return|return
name|recv_add
argument_list|()
return|;
block|}
DECL|method|send_add (int num1, int num2)
specifier|public
name|void
name|send_add
parameter_list|(
name|int
name|num1
parameter_list|,
name|int
name|num2
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|add_args
name|args
init|=
operator|new
name|add_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setNum1
argument_list|(
name|num1
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNum2
argument_list|(
name|num2
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"add"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|recv_add ()
specifier|public
name|int
name|recv_add
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|add_result
name|result
init|=
operator|new
name|add_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"add"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"add failed: unknown result"
argument_list|)
throw|;
block|}
DECL|method|calculate (int logid, Work w)
specifier|public
name|int
name|calculate
parameter_list|(
name|int
name|logid
parameter_list|,
name|Work
name|w
parameter_list|)
throws|throws
name|InvalidOperation
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_calculate
argument_list|(
name|logid
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return
name|recv_calculate
argument_list|()
return|;
block|}
DECL|method|send_calculate (int logid, Work w)
specifier|public
name|void
name|send_calculate
parameter_list|(
name|int
name|logid
parameter_list|,
name|Work
name|w
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|calculate_args
name|args
init|=
operator|new
name|calculate_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setLogid
argument_list|(
name|logid
argument_list|)
expr_stmt|;
name|args
operator|.
name|setW
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"calculate"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|recv_calculate ()
specifier|public
name|int
name|recv_calculate
parameter_list|()
throws|throws
name|InvalidOperation
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|calculate_result
name|result
init|=
operator|new
name|calculate_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"calculate"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|ouch
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ouch
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"calculate failed: unknown result"
argument_list|)
throw|;
block|}
DECL|method|zip ()
specifier|public
name|void
name|zip
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_zip
argument_list|()
expr_stmt|;
block|}
DECL|method|send_zip ()
specifier|public
name|void
name|send_zip
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|zip_args
name|args
init|=
operator|new
name|zip_args
argument_list|()
decl_stmt|;
name|sendBaseOneway
argument_list|(
literal|"zip"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|echo (Work w)
specifier|public
name|Work
name|echo
parameter_list|(
name|Work
name|w
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_echo
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return
name|recv_echo
argument_list|()
return|;
block|}
DECL|method|send_echo (Work w)
specifier|public
name|void
name|send_echo
parameter_list|(
name|Work
name|w
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|echo_args
name|args
init|=
operator|new
name|echo_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setW
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"echo"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|recv_echo ()
specifier|public
name|Work
name|recv_echo
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|echo_result
name|result
init|=
operator|new
name|echo_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"echo"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"echo failed: unknown result"
argument_list|)
throw|;
block|}
DECL|method|alltypes (boolean v1, byte v2, short v3, int v4, long v5, double v6, java.lang.String v7, java.nio.ByteBuffer v8, Work v9, java.util.List<java.lang.Integer> v10, java.util.Set<java.lang.String> v11, java.util.Map<java.lang.String,java.lang.Long> v12)
specifier|public
name|int
name|alltypes
parameter_list|(
name|boolean
name|v1
parameter_list|,
name|byte
name|v2
parameter_list|,
name|short
name|v3
parameter_list|,
name|int
name|v4
parameter_list|,
name|long
name|v5
parameter_list|,
name|double
name|v6
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|v7
parameter_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
parameter_list|,
name|Work
name|v9
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_alltypes
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|,
name|v4
argument_list|,
name|v5
argument_list|,
name|v6
argument_list|,
name|v7
argument_list|,
name|v8
argument_list|,
name|v9
argument_list|,
name|v10
argument_list|,
name|v11
argument_list|,
name|v12
argument_list|)
expr_stmt|;
return|return
name|recv_alltypes
argument_list|()
return|;
block|}
DECL|method|send_alltypes (boolean v1, byte v2, short v3, int v4, long v5, double v6, java.lang.String v7, java.nio.ByteBuffer v8, Work v9, java.util.List<java.lang.Integer> v10, java.util.Set<java.lang.String> v11, java.util.Map<java.lang.String,java.lang.Long> v12)
specifier|public
name|void
name|send_alltypes
parameter_list|(
name|boolean
name|v1
parameter_list|,
name|byte
name|v2
parameter_list|,
name|short
name|v3
parameter_list|,
name|int
name|v4
parameter_list|,
name|long
name|v5
parameter_list|,
name|double
name|v6
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|v7
parameter_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
parameter_list|,
name|Work
name|v9
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|alltypes_args
name|args
init|=
operator|new
name|alltypes_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setV1
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV2
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV3
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV4
argument_list|(
name|v4
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV5
argument_list|(
name|v5
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV6
argument_list|(
name|v6
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV7
argument_list|(
name|v7
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV8
argument_list|(
name|v8
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV9
argument_list|(
name|v9
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV10
argument_list|(
name|v10
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV11
argument_list|(
name|v11
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV12
argument_list|(
name|v12
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"alltypes"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|recv_alltypes ()
specifier|public
name|int
name|recv_alltypes
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|alltypes_result
name|result
init|=
operator|new
name|alltypes_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"alltypes"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"alltypes failed: unknown result"
argument_list|)
throw|;
block|}
block|}
DECL|class|AsyncClient
specifier|public
specifier|static
class|class
name|AsyncClient
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
implements|implements
name|AsyncIface
block|{
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientFactory
argument_list|<
name|AsyncClient
argument_list|>
block|{
DECL|field|clientManager
specifier|private
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientManager
name|clientManager
decl_stmt|;
DECL|field|protocolFactory
specifier|private
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
decl_stmt|;
DECL|method|Factory (org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory)
specifier|public
name|Factory
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|)
block|{
name|this
operator|.
name|clientManager
operator|=
name|clientManager
expr_stmt|;
name|this
operator|.
name|protocolFactory
operator|=
name|protocolFactory
expr_stmt|;
block|}
DECL|method|getAsyncClient (org.apache.thrift.transport.TNonblockingTransport transport)
specifier|public
name|AsyncClient
name|getAsyncClient
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
return|return
operator|new
name|AsyncClient
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
return|;
block|}
block|}
DECL|method|AsyncClient (org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport)
specifier|public
name|AsyncClient
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
name|super
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
DECL|method|ping (org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
specifier|public
name|void
name|ping
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|ping_call
name|method_call
init|=
operator|new
name|ping_call
argument_list|(
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
DECL|class|ping_call
specifier|public
specifier|static
class|class
name|ping_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
argument_list|<
name|Void
argument_list|>
block|{
DECL|method|ping_call (org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
specifier|public
name|ping_call
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|write_args (org.apache.thrift.protocol.TProtocol prot)
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"ping"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ping_args
name|args
init|=
operator|new
name|ping_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|Void
name|getResult
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|add (int num1, int num2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
specifier|public
name|void
name|add
parameter_list|(
name|int
name|num1
parameter_list|,
name|int
name|num2
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|add_call
name|method_call
init|=
operator|new
name|add_call
argument_list|(
name|num1
argument_list|,
name|num2
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
DECL|class|add_call
specifier|public
specifier|static
class|class
name|add_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
block|{
DECL|field|num1
specifier|private
name|int
name|num1
decl_stmt|;
DECL|field|num2
specifier|private
name|int
name|num2
decl_stmt|;
DECL|method|add_call (int num1, int num2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
specifier|public
name|add_call
parameter_list|(
name|int
name|num1
parameter_list|,
name|int
name|num2
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|num1
operator|=
name|num1
expr_stmt|;
name|this
operator|.
name|num2
operator|=
name|num2
expr_stmt|;
block|}
DECL|method|write_args (org.apache.thrift.protocol.TProtocol prot)
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"add"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|add_args
name|args
init|=
operator|new
name|add_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setNum1
argument_list|(
name|num1
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNum2
argument_list|(
name|num2
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|Integer
name|getResult
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_add
argument_list|()
return|;
block|}
block|}
DECL|method|calculate (int logid, Work w, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
specifier|public
name|void
name|calculate
parameter_list|(
name|int
name|logid
parameter_list|,
name|Work
name|w
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|calculate_call
name|method_call
init|=
operator|new
name|calculate_call
argument_list|(
name|logid
argument_list|,
name|w
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
DECL|class|calculate_call
specifier|public
specifier|static
class|class
name|calculate_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
block|{
DECL|field|logid
specifier|private
name|int
name|logid
decl_stmt|;
DECL|field|w
specifier|private
name|Work
name|w
decl_stmt|;
DECL|method|calculate_call (int logid, Work w, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
specifier|public
name|calculate_call
parameter_list|(
name|int
name|logid
parameter_list|,
name|Work
name|w
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|logid
operator|=
name|logid
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
block|}
DECL|method|write_args (org.apache.thrift.protocol.TProtocol prot)
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"calculate"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|calculate_args
name|args
init|=
operator|new
name|calculate_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setLogid
argument_list|(
name|logid
argument_list|)
expr_stmt|;
name|args
operator|.
name|setW
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|Integer
name|getResult
parameter_list|()
throws|throws
name|InvalidOperation
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_calculate
argument_list|()
return|;
block|}
block|}
DECL|method|zip (org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
specifier|public
name|void
name|zip
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|zip_call
name|method_call
init|=
operator|new
name|zip_call
argument_list|(
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
DECL|class|zip_call
specifier|public
specifier|static
class|class
name|zip_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
argument_list|<
name|Void
argument_list|>
block|{
DECL|method|zip_call (org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
specifier|public
name|zip_call
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|write_args (org.apache.thrift.protocol.TProtocol prot)
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"zip"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|ONEWAY
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|zip_args
name|args
init|=
operator|new
name|zip_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|Void
name|getResult
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|echo (Work w, org.apache.thrift.async.AsyncMethodCallback<Work> resultHandler)
specifier|public
name|void
name|echo
parameter_list|(
name|Work
name|w
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Work
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|echo_call
name|method_call
init|=
operator|new
name|echo_call
argument_list|(
name|w
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
DECL|class|echo_call
specifier|public
specifier|static
class|class
name|echo_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
argument_list|<
name|Work
argument_list|>
block|{
DECL|field|w
specifier|private
name|Work
name|w
decl_stmt|;
DECL|method|echo_call (Work w, org.apache.thrift.async.AsyncMethodCallback<Work> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
specifier|public
name|echo_call
parameter_list|(
name|Work
name|w
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Work
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
block|}
DECL|method|write_args (org.apache.thrift.protocol.TProtocol prot)
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"echo"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|echo_args
name|args
init|=
operator|new
name|echo_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setW
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|Work
name|getResult
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_echo
argument_list|()
return|;
block|}
block|}
DECL|method|alltypes (boolean v1, byte v2, short v3, int v4, long v5, double v6, java.lang.String v7, java.nio.ByteBuffer v8, Work v9, java.util.List<java.lang.Integer> v10, java.util.Set<java.lang.String> v11, java.util.Map<java.lang.String,java.lang.Long> v12, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
specifier|public
name|void
name|alltypes
parameter_list|(
name|boolean
name|v1
parameter_list|,
name|byte
name|v2
parameter_list|,
name|short
name|v3
parameter_list|,
name|int
name|v4
parameter_list|,
name|long
name|v5
parameter_list|,
name|double
name|v6
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|v7
parameter_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
parameter_list|,
name|Work
name|v9
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|alltypes_call
name|method_call
init|=
operator|new
name|alltypes_call
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|,
name|v4
argument_list|,
name|v5
argument_list|,
name|v6
argument_list|,
name|v7
argument_list|,
name|v8
argument_list|,
name|v9
argument_list|,
name|v10
argument_list|,
name|v11
argument_list|,
name|v12
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
DECL|class|alltypes_call
specifier|public
specifier|static
class|class
name|alltypes_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
block|{
DECL|field|v1
specifier|private
name|boolean
name|v1
decl_stmt|;
DECL|field|v2
specifier|private
name|byte
name|v2
decl_stmt|;
DECL|field|v3
specifier|private
name|short
name|v3
decl_stmt|;
DECL|field|v4
specifier|private
name|int
name|v4
decl_stmt|;
DECL|field|v5
specifier|private
name|long
name|v5
decl_stmt|;
DECL|field|v6
specifier|private
name|double
name|v6
decl_stmt|;
DECL|field|v7
specifier|private
name|java
operator|.
name|lang
operator|.
name|String
name|v7
decl_stmt|;
DECL|field|v8
specifier|private
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
decl_stmt|;
DECL|field|v9
specifier|private
name|Work
name|v9
decl_stmt|;
DECL|field|v10
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
decl_stmt|;
DECL|field|v11
specifier|private
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
decl_stmt|;
DECL|field|v12
specifier|private
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
decl_stmt|;
DECL|method|alltypes_call (boolean v1, byte v2, short v3, int v4, long v5, double v6, java.lang.String v7, java.nio.ByteBuffer v8, Work v9, java.util.List<java.lang.Integer> v10, java.util.Set<java.lang.String> v11, java.util.Map<java.lang.String,java.lang.Long> v12, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
specifier|public
name|alltypes_call
parameter_list|(
name|boolean
name|v1
parameter_list|,
name|byte
name|v2
parameter_list|,
name|short
name|v3
parameter_list|,
name|int
name|v4
parameter_list|,
name|long
name|v5
parameter_list|,
name|double
name|v6
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|v7
parameter_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
parameter_list|,
name|Work
name|v9
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|v1
operator|=
name|v1
expr_stmt|;
name|this
operator|.
name|v2
operator|=
name|v2
expr_stmt|;
name|this
operator|.
name|v3
operator|=
name|v3
expr_stmt|;
name|this
operator|.
name|v4
operator|=
name|v4
expr_stmt|;
name|this
operator|.
name|v5
operator|=
name|v5
expr_stmt|;
name|this
operator|.
name|v6
operator|=
name|v6
expr_stmt|;
name|this
operator|.
name|v7
operator|=
name|v7
expr_stmt|;
name|this
operator|.
name|v8
operator|=
name|v8
expr_stmt|;
name|this
operator|.
name|v9
operator|=
name|v9
expr_stmt|;
name|this
operator|.
name|v10
operator|=
name|v10
expr_stmt|;
name|this
operator|.
name|v11
operator|=
name|v11
expr_stmt|;
name|this
operator|.
name|v12
operator|=
name|v12
expr_stmt|;
block|}
DECL|method|write_args (org.apache.thrift.protocol.TProtocol prot)
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"alltypes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|alltypes_args
name|args
init|=
operator|new
name|alltypes_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setV1
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV2
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV3
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV4
argument_list|(
name|v4
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV5
argument_list|(
name|v5
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV6
argument_list|(
name|v6
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV7
argument_list|(
name|v7
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV8
argument_list|(
name|v8
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV9
argument_list|(
name|v9
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV10
argument_list|(
name|v10
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV11
argument_list|(
name|v11
argument_list|)
expr_stmt|;
name|args
operator|.
name|setV12
argument_list|(
name|v12
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|Integer
name|getResult
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_alltypes
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|Processor
specifier|public
specifier|static
class|class
name|Processor
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseProcessor
argument_list|<
name|I
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
block|{
DECL|field|_LOGGER
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|_LOGGER
init|=
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Processor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|Processor (I iface)
specifier|public
name|Processor
parameter_list|(
name|I
name|iface
parameter_list|)
block|{
name|super
argument_list|(
name|iface
argument_list|,
name|getProcessMap
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|>
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|Processor (I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
specifier|protected
name|Processor
parameter_list|(
name|I
name|iface
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|>
argument_list|>
name|processMap
parameter_list|)
block|{
name|super
argument_list|(
name|iface
argument_list|,
name|getProcessMap
argument_list|(
name|processMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getProcessMap (java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
specifier|private
specifier|static
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|>
argument_list|>
name|getProcessMap
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|>
argument_list|>
name|processMap
parameter_list|)
block|{
name|processMap
operator|.
name|put
argument_list|(
literal|"ping"
argument_list|,
operator|new
name|ping
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"add"
argument_list|,
operator|new
name|add
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"calculate"
argument_list|,
operator|new
name|calculate
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"zip"
argument_list|,
operator|new
name|zip
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"echo"
argument_list|,
operator|new
name|echo
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"alltypes"
argument_list|,
operator|new
name|alltypes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|processMap
return|;
block|}
DECL|class|ping
specifier|public
specifier|static
class|class
name|ping
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|ping_args
argument_list|>
block|{
DECL|method|ping ()
specifier|public
name|ping
parameter_list|()
block|{
name|super
argument_list|(
literal|"ping"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|ping_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|ping_args
argument_list|()
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getResult (I iface, ping_args args)
specifier|public
name|ping_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|ping_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|ping_result
name|result
init|=
operator|new
name|ping_result
argument_list|()
decl_stmt|;
name|iface
operator|.
name|ping
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|add
specifier|public
specifier|static
class|class
name|add
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|add_args
argument_list|>
block|{
DECL|method|add ()
specifier|public
name|add
parameter_list|()
block|{
name|super
argument_list|(
literal|"add"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|add_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|add_args
argument_list|()
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getResult (I iface, add_args args)
specifier|public
name|add_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|add_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|add_result
name|result
init|=
operator|new
name|add_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|add
argument_list|(
name|args
operator|.
name|num1
argument_list|,
name|args
operator|.
name|num2
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|calculate
specifier|public
specifier|static
class|class
name|calculate
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|calculate_args
argument_list|>
block|{
DECL|method|calculate ()
specifier|public
name|calculate
parameter_list|()
block|{
name|super
argument_list|(
literal|"calculate"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|calculate_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|calculate_args
argument_list|()
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getResult (I iface, calculate_args args)
specifier|public
name|calculate_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|calculate_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|calculate_result
name|result
init|=
operator|new
name|calculate_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|calculate
argument_list|(
name|args
operator|.
name|logid
argument_list|,
name|args
operator|.
name|w
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperation
name|ouch
parameter_list|)
block|{
name|result
operator|.
name|ouch
operator|=
name|ouch
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|class|zip
specifier|public
specifier|static
class|class
name|zip
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|zip_args
argument_list|>
block|{
DECL|method|zip ()
specifier|public
name|zip
parameter_list|()
block|{
name|super
argument_list|(
literal|"zip"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|zip_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|zip_args
argument_list|()
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getResult (I iface, zip_args args)
specifier|public
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|zip_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|iface
operator|.
name|zip
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|class|echo
specifier|public
specifier|static
class|class
name|echo
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|echo_args
argument_list|>
block|{
DECL|method|echo ()
specifier|public
name|echo
parameter_list|()
block|{
name|super
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|echo_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|echo_args
argument_list|()
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getResult (I iface, echo_args args)
specifier|public
name|echo_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|echo_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|echo_result
name|result
init|=
operator|new
name|echo_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|echo
argument_list|(
name|args
operator|.
name|w
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|alltypes
specifier|public
specifier|static
class|class
name|alltypes
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|alltypes_args
argument_list|>
block|{
DECL|method|alltypes ()
specifier|public
name|alltypes
parameter_list|()
block|{
name|super
argument_list|(
literal|"alltypes"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|alltypes_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|alltypes_args
argument_list|()
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getResult (I iface, alltypes_args args)
specifier|public
name|alltypes_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|alltypes_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|alltypes_result
name|result
init|=
operator|new
name|alltypes_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|alltypes
argument_list|(
name|args
operator|.
name|v1
argument_list|,
name|args
operator|.
name|v2
argument_list|,
name|args
operator|.
name|v3
argument_list|,
name|args
operator|.
name|v4
argument_list|,
name|args
operator|.
name|v5
argument_list|,
name|args
operator|.
name|v6
argument_list|,
name|args
operator|.
name|v7
argument_list|,
name|args
operator|.
name|v8
argument_list|,
name|args
operator|.
name|v9
argument_list|,
name|args
operator|.
name|v10
argument_list|,
name|args
operator|.
name|v11
argument_list|,
name|args
operator|.
name|v12
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
DECL|class|AsyncProcessor
specifier|public
specifier|static
class|class
name|AsyncProcessor
parameter_list|<
name|I
extends|extends
name|AsyncIface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseAsyncProcessor
argument_list|<
name|I
argument_list|>
block|{
DECL|field|_LOGGER
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|_LOGGER
init|=
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|AsyncProcessor (I iface)
specifier|public
name|AsyncProcessor
parameter_list|(
name|I
name|iface
parameter_list|)
block|{
name|super
argument_list|(
name|iface
argument_list|,
name|getProcessMap
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|AsyncProcessor (I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap)
specifier|protected
name|AsyncProcessor
parameter_list|(
name|I
name|iface
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|,
name|?
argument_list|>
argument_list|>
name|processMap
parameter_list|)
block|{
name|super
argument_list|(
name|iface
argument_list|,
name|getProcessMap
argument_list|(
name|processMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getProcessMap (java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap)
specifier|private
specifier|static
parameter_list|<
name|I
extends|extends
name|AsyncIface
parameter_list|>
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|,
name|?
argument_list|>
argument_list|>
name|getProcessMap
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|,
name|?
argument_list|>
argument_list|>
name|processMap
parameter_list|)
block|{
name|processMap
operator|.
name|put
argument_list|(
literal|"ping"
argument_list|,
operator|new
name|ping
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"add"
argument_list|,
operator|new
name|add
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"calculate"
argument_list|,
operator|new
name|calculate
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"zip"
argument_list|,
operator|new
name|zip
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"echo"
argument_list|,
operator|new
name|echo
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"alltypes"
argument_list|,
operator|new
name|alltypes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|processMap
return|;
block|}
DECL|class|ping
specifier|public
specifier|static
class|class
name|ping
parameter_list|<
name|I
extends|extends
name|AsyncIface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|ping_args
argument_list|,
name|Void
argument_list|>
block|{
DECL|method|ping ()
specifier|public
name|ping
parameter_list|()
block|{
name|super
argument_list|(
literal|"ping"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|ping_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|ping_args
argument_list|()
return|;
block|}
DECL|method|getResultHandler (final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
specifier|public
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|getResultHandler
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|AsyncFrameBuffer
name|fb
parameter_list|,
specifier|final
name|int
name|seqid
parameter_list|)
block|{
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
name|fcall
init|=
name|this
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onComplete
parameter_list|(
name|Void
name|o
parameter_list|)
block|{
name|ping_result
name|result
init|=
operator|new
name|ping_result
argument_list|()
decl_stmt|;
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|result
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onError
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|byte
name|msgType
init|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializable
name|msg
decl_stmt|;
name|ping_result
name|result
init|=
operator|new
name|ping_result
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TApplicationException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|msg
argument_list|,
name|msgType
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|ex
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|start (I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
specifier|public
name|void
name|start
parameter_list|(
name|I
name|iface
parameter_list|,
name|ping_args
name|args
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|iface
operator|.
name|ping
argument_list|(
name|resultHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|add
specifier|public
specifier|static
class|class
name|add
parameter_list|<
name|I
extends|extends
name|AsyncIface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|add_args
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
block|{
DECL|method|add ()
specifier|public
name|add
parameter_list|()
block|{
name|super
argument_list|(
literal|"add"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|add_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|add_args
argument_list|()
return|;
block|}
DECL|method|getResultHandler (final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
specifier|public
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|getResultHandler
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|AsyncFrameBuffer
name|fb
parameter_list|,
specifier|final
name|int
name|seqid
parameter_list|)
block|{
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
name|fcall
init|=
name|this
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onComplete
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Integer
name|o
parameter_list|)
block|{
name|add_result
name|result
init|=
operator|new
name|add_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|success
operator|=
name|o
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|result
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onError
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|byte
name|msgType
init|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializable
name|msg
decl_stmt|;
name|add_result
name|result
init|=
operator|new
name|add_result
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TApplicationException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|msg
argument_list|,
name|msgType
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|ex
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|start (I iface, add_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
specifier|public
name|void
name|start
parameter_list|(
name|I
name|iface
parameter_list|,
name|add_args
name|args
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|iface
operator|.
name|add
argument_list|(
name|args
operator|.
name|num1
argument_list|,
name|args
operator|.
name|num2
argument_list|,
name|resultHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|calculate
specifier|public
specifier|static
class|class
name|calculate
parameter_list|<
name|I
extends|extends
name|AsyncIface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|calculate_args
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
block|{
DECL|method|calculate ()
specifier|public
name|calculate
parameter_list|()
block|{
name|super
argument_list|(
literal|"calculate"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|calculate_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|calculate_args
argument_list|()
return|;
block|}
DECL|method|getResultHandler (final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
specifier|public
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|getResultHandler
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|AsyncFrameBuffer
name|fb
parameter_list|,
specifier|final
name|int
name|seqid
parameter_list|)
block|{
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
name|fcall
init|=
name|this
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onComplete
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Integer
name|o
parameter_list|)
block|{
name|calculate_result
name|result
init|=
operator|new
name|calculate_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|success
operator|=
name|o
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|result
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onError
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|byte
name|msgType
init|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializable
name|msg
decl_stmt|;
name|calculate_result
name|result
init|=
operator|new
name|calculate_result
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperation
condition|)
block|{
name|result
operator|.
name|ouch
operator|=
operator|(
name|InvalidOperation
operator|)
name|e
expr_stmt|;
name|result
operator|.
name|setOuchIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|msg
operator|=
name|result
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TApplicationException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|msg
argument_list|,
name|msgType
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|ex
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|start (I iface, calculate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
specifier|public
name|void
name|start
parameter_list|(
name|I
name|iface
parameter_list|,
name|calculate_args
name|args
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|iface
operator|.
name|calculate
argument_list|(
name|args
operator|.
name|logid
argument_list|,
name|args
operator|.
name|w
argument_list|,
name|resultHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|zip
specifier|public
specifier|static
class|class
name|zip
parameter_list|<
name|I
extends|extends
name|AsyncIface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|zip_args
argument_list|,
name|Void
argument_list|>
block|{
DECL|method|zip ()
specifier|public
name|zip
parameter_list|()
block|{
name|super
argument_list|(
literal|"zip"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|zip_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|zip_args
argument_list|()
return|;
block|}
DECL|method|getResultHandler (final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
specifier|public
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|getResultHandler
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|AsyncFrameBuffer
name|fb
parameter_list|,
specifier|final
name|int
name|seqid
parameter_list|)
block|{
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
name|fcall
init|=
name|this
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onComplete
parameter_list|(
name|Void
name|o
parameter_list|)
block|{           }
specifier|public
name|void
name|onError
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception inside oneway handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|start (I iface, zip_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
specifier|public
name|void
name|start
parameter_list|(
name|I
name|iface
parameter_list|,
name|zip_args
name|args
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Void
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|iface
operator|.
name|zip
argument_list|(
name|resultHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|echo
specifier|public
specifier|static
class|class
name|echo
parameter_list|<
name|I
extends|extends
name|AsyncIface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|echo_args
argument_list|,
name|Work
argument_list|>
block|{
DECL|method|echo ()
specifier|public
name|echo
parameter_list|()
block|{
name|super
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|echo_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|echo_args
argument_list|()
return|;
block|}
DECL|method|getResultHandler (final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
specifier|public
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Work
argument_list|>
name|getResultHandler
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|AsyncFrameBuffer
name|fb
parameter_list|,
specifier|final
name|int
name|seqid
parameter_list|)
block|{
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
name|fcall
init|=
name|this
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Work
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onComplete
parameter_list|(
name|Work
name|o
parameter_list|)
block|{
name|echo_result
name|result
init|=
operator|new
name|echo_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|success
operator|=
name|o
expr_stmt|;
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|result
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onError
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|byte
name|msgType
init|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializable
name|msg
decl_stmt|;
name|echo_result
name|result
init|=
operator|new
name|echo_result
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TApplicationException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|msg
argument_list|,
name|msgType
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|ex
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|start (I iface, echo_args args, org.apache.thrift.async.AsyncMethodCallback<Work> resultHandler)
specifier|public
name|void
name|start
parameter_list|(
name|I
name|iface
parameter_list|,
name|echo_args
name|args
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|Work
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|iface
operator|.
name|echo
argument_list|(
name|args
operator|.
name|w
argument_list|,
name|resultHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|alltypes
specifier|public
specifier|static
class|class
name|alltypes
parameter_list|<
name|I
extends|extends
name|AsyncIface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
argument_list|<
name|I
argument_list|,
name|alltypes_args
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
block|{
DECL|method|alltypes ()
specifier|public
name|alltypes
parameter_list|()
block|{
name|super
argument_list|(
literal|"alltypes"
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyArgsInstance ()
specifier|public
name|alltypes_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|alltypes_args
argument_list|()
return|;
block|}
DECL|method|getResultHandler (final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
specifier|public
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|getResultHandler
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|AsyncFrameBuffer
name|fb
parameter_list|,
specifier|final
name|int
name|seqid
parameter_list|)
block|{
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|AsyncProcessFunction
name|fcall
init|=
name|this
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onComplete
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Integer
name|o
parameter_list|)
block|{
name|alltypes_result
name|result
init|=
operator|new
name|alltypes_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|success
operator|=
name|o
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|result
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onError
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
name|byte
name|msgType
init|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|REPLY
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializable
name|msg
decl_stmt|;
name|alltypes_result
name|result
init|=
operator|new
name|alltypes_result
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TTransportException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
condition|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"TApplicationException inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception inside handler"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|msgType
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|EXCEPTION
expr_stmt|;
name|msg
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fcall
operator|.
name|sendResponse
argument_list|(
name|fb
argument_list|,
name|msg
argument_list|,
name|msgType
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|ex
parameter_list|)
block|{
name|_LOGGER
operator|.
name|error
argument_list|(
literal|"Exception writing to internal frame buffer"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|isOneway ()
specifier|protected
name|boolean
name|isOneway
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|start (I iface, alltypes_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
specifier|public
name|void
name|start
parameter_list|(
name|I
name|iface
parameter_list|,
name|alltypes_args
name|args
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|iface
operator|.
name|alltypes
argument_list|(
name|args
operator|.
name|v1
argument_list|,
name|args
operator|.
name|v2
argument_list|,
name|args
operator|.
name|v3
argument_list|,
name|args
operator|.
name|v4
argument_list|,
name|args
operator|.
name|v5
argument_list|,
name|args
operator|.
name|v6
argument_list|,
name|args
operator|.
name|v7
argument_list|,
name|args
operator|.
name|v8
argument_list|,
name|args
operator|.
name|v9
argument_list|,
name|args
operator|.
name|v10
argument_list|,
name|args
operator|.
name|v11
argument_list|,
name|args
operator|.
name|v12
argument_list|,
name|resultHandler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ping_args
specifier|public
specifier|static
class|class
name|ping_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|ping_args
argument_list|,
name|ping_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|ping_args
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"ping_args"
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|ping_argsStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|ping_argsTupleSchemeFactory
argument_list|()
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{ ;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|ping_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|ping_args ()
specifier|public
name|ping_args
parameter_list|()
block|{     }
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|ping_args (ping_args other)
specifier|public
name|ping_args
parameter_list|(
name|ping_args
name|other
parameter_list|)
block|{     }
DECL|method|deepCopy ()
specifier|public
name|ping_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|ping_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{     }
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|ping_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|ping_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (ping_args that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|ping_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ping_args other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ping_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"ping_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|ping_argsStandardSchemeFactory
specifier|private
specifier|static
class|class
name|ping_argsStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|ping_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|ping_argsStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|ping_argsStandardScheme
specifier|private
specifier|static
class|class
name|ping_argsStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|ping_args
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, ping_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|ping_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, ping_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|ping_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ping_argsTupleSchemeFactory
specifier|private
specifier|static
class|class
name|ping_argsTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|ping_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|ping_argsTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|ping_argsTupleScheme
specifier|private
specifier|static
class|class
name|ping_argsTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|ping_args
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, ping_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|ping_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, ping_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|ping_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|ping_result
specifier|public
specifier|static
class|class
name|ping_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|ping_result
argument_list|,
name|ping_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|ping_result
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"ping_result"
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|ping_resultStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|ping_resultTupleSchemeFactory
argument_list|()
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{ ;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|ping_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|ping_result ()
specifier|public
name|ping_result
parameter_list|()
block|{     }
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|ping_result (ping_result other)
specifier|public
name|ping_result
parameter_list|(
name|ping_result
name|other
parameter_list|)
block|{     }
DECL|method|deepCopy ()
specifier|public
name|ping_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|ping_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{     }
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|ping_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|ping_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (ping_result that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|ping_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ping_result other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ping_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"ping_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|ping_resultStandardSchemeFactory
specifier|private
specifier|static
class|class
name|ping_resultStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|ping_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|ping_resultStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|ping_resultStandardScheme
specifier|private
specifier|static
class|class
name|ping_resultStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|ping_result
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, ping_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|ping_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, ping_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|ping_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ping_resultTupleSchemeFactory
specifier|private
specifier|static
class|class
name|ping_resultTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|ping_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|ping_resultTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|ping_resultTupleScheme
specifier|private
specifier|static
class|class
name|ping_resultTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|ping_result
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, ping_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|ping_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, ping_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|ping_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|add_args
specifier|public
specifier|static
class|class
name|add_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|add_args
argument_list|,
name|add_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|add_args
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"add_args"
argument_list|)
decl_stmt|;
DECL|field|NUM1_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NUM1_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"num1"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
DECL|field|NUM2_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NUM2_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"num2"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|add_argsStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|add_argsTupleSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|num1
specifier|public
name|int
name|num1
decl_stmt|;
comment|// required
DECL|field|num2
specifier|public
name|int
name|num2
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
DECL|enumConstant|NUM1
name|NUM1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"num1"
argument_list|)
block|,
DECL|enumConstant|NUM2
name|NUM2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"num2"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// NUM1
return|return
name|NUM1
return|;
case|case
literal|2
case|:
comment|// NUM2
return|return
name|NUM2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|__NUM1_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__NUM1_ISSET_ID
init|=
literal|0
decl_stmt|;
DECL|field|__NUM2_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__NUM2_ISSET_ID
init|=
literal|1
decl_stmt|;
DECL|field|__isset_bitfield
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NUM1
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"num1"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NUM2
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"num2"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|add_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|add_args ()
specifier|public
name|add_args
parameter_list|()
block|{     }
DECL|method|add_args ( int num1, int num2)
specifier|public
name|add_args
parameter_list|(
name|int
name|num1
parameter_list|,
name|int
name|num2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|num1
operator|=
name|num1
expr_stmt|;
name|setNum1IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|num2
operator|=
name|num2
expr_stmt|;
name|setNum2IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|add_args (add_args other)
specifier|public
name|add_args
parameter_list|(
name|add_args
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
name|this
operator|.
name|num1
operator|=
name|other
operator|.
name|num1
expr_stmt|;
name|this
operator|.
name|num2
operator|=
name|other
operator|.
name|num2
expr_stmt|;
block|}
DECL|method|deepCopy ()
specifier|public
name|add_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|add_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setNum1IsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|num1
operator|=
literal|0
expr_stmt|;
name|setNum2IsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|num2
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getNum1 ()
specifier|public
name|int
name|getNum1
parameter_list|()
block|{
return|return
name|this
operator|.
name|num1
return|;
block|}
DECL|method|setNum1 (int num1)
specifier|public
name|add_args
name|setNum1
parameter_list|(
name|int
name|num1
parameter_list|)
block|{
name|this
operator|.
name|num1
operator|=
name|num1
expr_stmt|;
name|setNum1IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetNum1 ()
specifier|public
name|void
name|unsetNum1
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__NUM1_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field num1 is set (has been assigned a value) and false otherwise */
DECL|method|isSetNum1 ()
specifier|public
name|boolean
name|isSetNum1
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__NUM1_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setNum1IsSet (boolean value)
specifier|public
name|void
name|setNum1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__NUM1_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getNum2 ()
specifier|public
name|int
name|getNum2
parameter_list|()
block|{
return|return
name|this
operator|.
name|num2
return|;
block|}
DECL|method|setNum2 (int num2)
specifier|public
name|add_args
name|setNum2
parameter_list|(
name|int
name|num2
parameter_list|)
block|{
name|this
operator|.
name|num2
operator|=
name|num2
expr_stmt|;
name|setNum2IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetNum2 ()
specifier|public
name|void
name|unsetNum2
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__NUM2_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field num2 is set (has been assigned a value) and false otherwise */
DECL|method|isSetNum2 ()
specifier|public
name|boolean
name|isSetNum2
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__NUM2_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setNum2IsSet (boolean value)
specifier|public
name|void
name|setNum2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__NUM2_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NUM1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNum1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNum1
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUM2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNum2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNum2
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NUM1
case|:
return|return
name|getNum1
argument_list|()
return|;
case|case
name|NUM2
case|:
return|return
name|getNum2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NUM1
case|:
return|return
name|isSetNum1
argument_list|()
return|;
case|case
name|NUM2
case|:
return|return
name|isSetNum2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|add_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|add_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (add_args that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|add_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_num1
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_num1
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_num1
operator|||
name|that_present_num1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_num1
operator|&&
name|that_present_num1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|num1
operator|!=
name|that
operator|.
name|num1
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_num2
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_num2
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_num2
operator|||
name|that_present_num2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_num2
operator|&&
name|that_present_num2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|num2
operator|!=
name|that
operator|.
name|num2
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|num1
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|num2
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (add_args other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|add_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNum1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetNum1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNum1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|num1
argument_list|,
name|other
operator|.
name|num1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNum2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetNum2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNum2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|num2
argument_list|,
name|other
operator|.
name|num2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"add_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"num1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|num1
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"num2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|num2
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|add_argsStandardSchemeFactory
specifier|private
specifier|static
class|class
name|add_argsStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|add_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|add_argsStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|add_argsStandardScheme
specifier|private
specifier|static
class|class
name|add_argsStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|add_args
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, add_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|add_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// NUM1
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|num1
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNum1IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// NUM2
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|num2
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNum2IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, add_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|add_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM1_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|num1
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM2_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|num2
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|add_argsTupleSchemeFactory
specifier|private
specifier|static
class|class
name|add_argsTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|add_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|add_argsTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|add_argsTupleScheme
specifier|private
specifier|static
class|class
name|add_argsTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|add_args
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, add_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|add_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetNum1
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNum2
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetNum1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|num1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNum2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|num2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, add_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|add_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|num1
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNum1IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|num2
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNum2IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|add_result
specifier|public
specifier|static
class|class
name|add_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|add_result
argument_list|,
name|add_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|add_result
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"add_result"
argument_list|)
decl_stmt|;
DECL|field|SUCCESS_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|add_resultStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|add_resultTupleSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|success
specifier|public
name|int
name|success
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
DECL|enumConstant|SUCCESS
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|__SUCCESS_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
DECL|field|__isset_bitfield
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|add_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|add_result ()
specifier|public
name|add_result
parameter_list|()
block|{     }
DECL|method|add_result ( int success)
specifier|public
name|add_result
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|add_result (add_result other)
specifier|public
name|add_result
parameter_list|(
name|add_result
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
block|}
DECL|method|deepCopy ()
specifier|public
name|add_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|add_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getSuccess ()
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
DECL|method|setSuccess (int success)
specifier|public
name|add_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetSuccess ()
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
DECL|method|isSetSuccess ()
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setSuccessIsSet (boolean value)
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|add_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|add_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (add_result that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|add_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|success
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (add_result other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|add_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"add_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|add_resultStandardSchemeFactory
specifier|private
specifier|static
class|class
name|add_resultStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|add_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|add_resultStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|add_resultStandardScheme
specifier|private
specifier|static
class|class
name|add_resultStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|add_result
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, add_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|add_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, add_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|add_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|add_resultTupleSchemeFactory
specifier|private
specifier|static
class|class
name|add_resultTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|add_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|add_resultTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|add_resultTupleScheme
specifier|private
specifier|static
class|class
name|add_resultTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|add_result
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, add_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|add_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, add_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|add_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|calculate_args
specifier|public
specifier|static
class|class
name|calculate_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|calculate_args
argument_list|,
name|calculate_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|calculate_args
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"calculate_args"
argument_list|)
decl_stmt|;
DECL|field|LOGID_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LOGID_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"logid"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
DECL|field|W_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|W_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"w"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|calculate_argsStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|calculate_argsTupleSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|logid
specifier|public
name|int
name|logid
decl_stmt|;
comment|// required
DECL|field|w
specifier|public
name|Work
name|w
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
DECL|enumConstant|LOGID
name|LOGID
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"logid"
argument_list|)
block|,
DECL|enumConstant|W
name|W
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"w"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// LOGID
return|return
name|LOGID
return|;
case|case
literal|2
case|:
comment|// W
return|return
name|W
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|__LOGID_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__LOGID_ISSET_ID
init|=
literal|0
decl_stmt|;
DECL|field|__isset_bitfield
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LOGID
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"logid"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|W
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"w"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|Work
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|calculate_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|calculate_args ()
specifier|public
name|calculate_args
parameter_list|()
block|{     }
DECL|method|calculate_args ( int logid, Work w)
specifier|public
name|calculate_args
parameter_list|(
name|int
name|logid
parameter_list|,
name|Work
name|w
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|logid
operator|=
name|logid
expr_stmt|;
name|setLogidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|calculate_args (calculate_args other)
specifier|public
name|calculate_args
parameter_list|(
name|calculate_args
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
name|this
operator|.
name|logid
operator|=
name|other
operator|.
name|logid
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetW
argument_list|()
condition|)
block|{
name|this
operator|.
name|w
operator|=
operator|new
name|Work
argument_list|(
name|other
operator|.
name|w
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deepCopy ()
specifier|public
name|calculate_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|calculate_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setLogidIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|logid
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|w
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getLogid ()
specifier|public
name|int
name|getLogid
parameter_list|()
block|{
return|return
name|this
operator|.
name|logid
return|;
block|}
DECL|method|setLogid (int logid)
specifier|public
name|calculate_args
name|setLogid
parameter_list|(
name|int
name|logid
parameter_list|)
block|{
name|this
operator|.
name|logid
operator|=
name|logid
expr_stmt|;
name|setLogidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetLogid ()
specifier|public
name|void
name|unsetLogid
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LOGID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field logid is set (has been assigned a value) and false otherwise */
DECL|method|isSetLogid ()
specifier|public
name|boolean
name|isSetLogid
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LOGID_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setLogidIsSet (boolean value)
specifier|public
name|void
name|setLogidIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LOGID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getW ()
specifier|public
name|Work
name|getW
parameter_list|()
block|{
return|return
name|this
operator|.
name|w
return|;
block|}
DECL|method|setW (Work w)
specifier|public
name|calculate_args
name|setW
parameter_list|(
name|Work
name|w
parameter_list|)
block|{
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetW ()
specifier|public
name|void
name|unsetW
parameter_list|()
block|{
name|this
operator|.
name|w
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field w is set (has been assigned a value) and false otherwise */
DECL|method|isSetW ()
specifier|public
name|boolean
name|isSetW
parameter_list|()
block|{
return|return
name|this
operator|.
name|w
operator|!=
literal|null
return|;
block|}
DECL|method|setWIsSet (boolean value)
specifier|public
name|void
name|setWIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|w
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|LOGID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLogid
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLogid
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|W
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetW
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setW
argument_list|(
operator|(
name|Work
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|LOGID
case|:
return|return
name|getLogid
argument_list|()
return|;
case|case
name|W
case|:
return|return
name|getW
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|LOGID
case|:
return|return
name|isSetLogid
argument_list|()
return|;
case|case
name|W
case|:
return|return
name|isSetW
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|calculate_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|calculate_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (calculate_args that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|calculate_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_logid
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_logid
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_logid
operator|||
name|that_present_logid
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_logid
operator|&&
name|that_present_logid
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|logid
operator|!=
name|that
operator|.
name|logid
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_w
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetW
argument_list|()
decl_stmt|;
name|boolean
name|that_present_w
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetW
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_w
operator|||
name|that_present_w
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_w
operator|&&
name|that_present_w
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|w
operator|.
name|equals
argument_list|(
name|that
operator|.
name|w
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|logid
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetW
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetW
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|w
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (calculate_args other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|calculate_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLogid
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetLogid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLogid
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|logid
argument_list|,
name|other
operator|.
name|logid
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetW
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetW
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetW
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|w
argument_list|,
name|other
operator|.
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"calculate_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"logid:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|logid
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"w:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|w
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|w
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|w
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|calculate_argsStandardSchemeFactory
specifier|private
specifier|static
class|class
name|calculate_argsStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|calculate_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|calculate_argsStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|calculate_argsStandardScheme
specifier|private
specifier|static
class|class
name|calculate_argsStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|calculate_args
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, calculate_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|calculate_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// LOGID
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|logid
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setLogidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// W
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|w
operator|=
operator|new
name|Work
argument_list|()
expr_stmt|;
name|struct
operator|.
name|w
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setWIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, calculate_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|calculate_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LOGID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|logid
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|w
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|W_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|w
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|calculate_argsTupleSchemeFactory
specifier|private
specifier|static
class|class
name|calculate_argsTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|calculate_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|calculate_argsTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|calculate_argsTupleScheme
specifier|private
specifier|static
class|class
name|calculate_argsTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|calculate_args
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, calculate_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|calculate_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetLogid
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetW
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetLogid
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|logid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetW
argument_list|()
condition|)
block|{
name|struct
operator|.
name|w
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, calculate_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|calculate_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|logid
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setLogidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|w
operator|=
operator|new
name|Work
argument_list|()
expr_stmt|;
name|struct
operator|.
name|w
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setWIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|calculate_result
specifier|public
specifier|static
class|class
name|calculate_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|calculate_result
argument_list|,
name|calculate_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|calculate_result
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"calculate_result"
argument_list|)
decl_stmt|;
DECL|field|SUCCESS_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
DECL|field|OUCH_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|OUCH_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ouch"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|calculate_resultStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|calculate_resultTupleSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|success
specifier|public
name|int
name|success
decl_stmt|;
comment|// required
DECL|field|ouch
specifier|public
name|InvalidOperation
name|ouch
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
DECL|enumConstant|SUCCESS
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
DECL|enumConstant|OUCH
name|OUCH
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"ouch"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// OUCH
return|return
name|OUCH
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|__SUCCESS_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
DECL|field|__isset_bitfield
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|OUCH
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ouch"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|InvalidOperation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|calculate_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|calculate_result ()
specifier|public
name|calculate_result
parameter_list|()
block|{     }
DECL|method|calculate_result ( int success, InvalidOperation ouch)
specifier|public
name|calculate_result
parameter_list|(
name|int
name|success
parameter_list|,
name|InvalidOperation
name|ouch
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|ouch
operator|=
name|ouch
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|calculate_result (calculate_result other)
specifier|public
name|calculate_result
parameter_list|(
name|calculate_result
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetOuch
argument_list|()
condition|)
block|{
name|this
operator|.
name|ouch
operator|=
operator|new
name|InvalidOperation
argument_list|(
name|other
operator|.
name|ouch
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deepCopy ()
specifier|public
name|calculate_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|calculate_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|ouch
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getSuccess ()
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
DECL|method|setSuccess (int success)
specifier|public
name|calculate_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetSuccess ()
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
DECL|method|isSetSuccess ()
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setSuccessIsSet (boolean value)
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getOuch ()
specifier|public
name|InvalidOperation
name|getOuch
parameter_list|()
block|{
return|return
name|this
operator|.
name|ouch
return|;
block|}
DECL|method|setOuch (InvalidOperation ouch)
specifier|public
name|calculate_result
name|setOuch
parameter_list|(
name|InvalidOperation
name|ouch
parameter_list|)
block|{
name|this
operator|.
name|ouch
operator|=
name|ouch
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetOuch ()
specifier|public
name|void
name|unsetOuch
parameter_list|()
block|{
name|this
operator|.
name|ouch
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ouch is set (has been assigned a value) and false otherwise */
DECL|method|isSetOuch ()
specifier|public
name|boolean
name|isSetOuch
parameter_list|()
block|{
return|return
name|this
operator|.
name|ouch
operator|!=
literal|null
return|;
block|}
DECL|method|setOuchIsSet (boolean value)
specifier|public
name|void
name|setOuchIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ouch
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OUCH
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetOuch
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setOuch
argument_list|(
operator|(
name|InvalidOperation
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|OUCH
case|:
return|return
name|getOuch
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|OUCH
case|:
return|return
name|isSetOuch
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|calculate_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|calculate_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (calculate_result that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|calculate_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ouch
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetOuch
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ouch
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetOuch
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ouch
operator|||
name|that_present_ouch
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ouch
operator|&&
name|that_present_ouch
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ouch
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ouch
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|success
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetOuch
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetOuch
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|ouch
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (calculate_result other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|calculate_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetOuch
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetOuch
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetOuch
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ouch
argument_list|,
name|other
operator|.
name|ouch
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"calculate_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ouch:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ouch
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ouch
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|calculate_resultStandardSchemeFactory
specifier|private
specifier|static
class|class
name|calculate_resultStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|calculate_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|calculate_resultStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|calculate_resultStandardScheme
specifier|private
specifier|static
class|class
name|calculate_resultStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|calculate_result
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, calculate_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|calculate_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// OUCH
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ouch
operator|=
operator|new
name|InvalidOperation
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ouch
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setOuchIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, calculate_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|calculate_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ouch
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|OUCH_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ouch
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|calculate_resultTupleSchemeFactory
specifier|private
specifier|static
class|class
name|calculate_resultTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|calculate_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|calculate_resultTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|calculate_resultTupleScheme
specifier|private
specifier|static
class|class
name|calculate_resultTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|calculate_result
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, calculate_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|calculate_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetOuch
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetOuch
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ouch
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, calculate_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|calculate_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ouch
operator|=
operator|new
name|InvalidOperation
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ouch
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setOuchIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|zip_args
specifier|public
specifier|static
class|class
name|zip_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|zip_args
argument_list|,
name|zip_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|zip_args
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"zip_args"
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|zip_argsStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|zip_argsTupleSchemeFactory
argument_list|()
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{ ;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|zip_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|zip_args ()
specifier|public
name|zip_args
parameter_list|()
block|{     }
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|zip_args (zip_args other)
specifier|public
name|zip_args
parameter_list|(
name|zip_args
name|other
parameter_list|)
block|{     }
DECL|method|deepCopy ()
specifier|public
name|zip_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|zip_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{     }
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|zip_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|zip_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (zip_args that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|zip_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (zip_args other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|zip_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"zip_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|zip_argsStandardSchemeFactory
specifier|private
specifier|static
class|class
name|zip_argsStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|zip_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|zip_argsStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|zip_argsStandardScheme
specifier|private
specifier|static
class|class
name|zip_argsStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|zip_args
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, zip_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|zip_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, zip_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|zip_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|zip_argsTupleSchemeFactory
specifier|private
specifier|static
class|class
name|zip_argsTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|zip_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|zip_argsTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|zip_argsTupleScheme
specifier|private
specifier|static
class|class
name|zip_argsTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|zip_args
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, zip_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|zip_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, zip_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|zip_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|echo_args
specifier|public
specifier|static
class|class
name|echo_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|echo_args
argument_list|,
name|echo_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|echo_args
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"echo_args"
argument_list|)
decl_stmt|;
DECL|field|W_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|W_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"w"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|echo_argsStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|echo_argsTupleSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|w
specifier|public
name|Work
name|w
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
DECL|enumConstant|W
name|W
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"w"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// W
return|return
name|W
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|W
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"w"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|Work
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|echo_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|echo_args ()
specifier|public
name|echo_args
parameter_list|()
block|{     }
DECL|method|echo_args ( Work w)
specifier|public
name|echo_args
parameter_list|(
name|Work
name|w
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|echo_args (echo_args other)
specifier|public
name|echo_args
parameter_list|(
name|echo_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetW
argument_list|()
condition|)
block|{
name|this
operator|.
name|w
operator|=
operator|new
name|Work
argument_list|(
name|other
operator|.
name|w
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deepCopy ()
specifier|public
name|echo_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|echo_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|w
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getW ()
specifier|public
name|Work
name|getW
parameter_list|()
block|{
return|return
name|this
operator|.
name|w
return|;
block|}
DECL|method|setW (Work w)
specifier|public
name|echo_args
name|setW
parameter_list|(
name|Work
name|w
parameter_list|)
block|{
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetW ()
specifier|public
name|void
name|unsetW
parameter_list|()
block|{
name|this
operator|.
name|w
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field w is set (has been assigned a value) and false otherwise */
DECL|method|isSetW ()
specifier|public
name|boolean
name|isSetW
parameter_list|()
block|{
return|return
name|this
operator|.
name|w
operator|!=
literal|null
return|;
block|}
DECL|method|setWIsSet (boolean value)
specifier|public
name|void
name|setWIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|w
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|W
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetW
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setW
argument_list|(
operator|(
name|Work
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|W
case|:
return|return
name|getW
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|W
case|:
return|return
name|isSetW
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|echo_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|echo_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (echo_args that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|echo_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_w
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetW
argument_list|()
decl_stmt|;
name|boolean
name|that_present_w
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetW
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_w
operator|||
name|that_present_w
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_w
operator|&&
name|that_present_w
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|w
operator|.
name|equals
argument_list|(
name|that
operator|.
name|w
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetW
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetW
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|w
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (echo_args other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|echo_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetW
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetW
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetW
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|w
argument_list|,
name|other
operator|.
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"echo_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"w:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|w
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|w
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|w
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|echo_argsStandardSchemeFactory
specifier|private
specifier|static
class|class
name|echo_argsStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|echo_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|echo_argsStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|echo_argsStandardScheme
specifier|private
specifier|static
class|class
name|echo_argsStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|echo_args
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, echo_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|echo_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// W
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|w
operator|=
operator|new
name|Work
argument_list|()
expr_stmt|;
name|struct
operator|.
name|w
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setWIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, echo_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|echo_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|w
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|W_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|w
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|echo_argsTupleSchemeFactory
specifier|private
specifier|static
class|class
name|echo_argsTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|echo_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|echo_argsTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|echo_argsTupleScheme
specifier|private
specifier|static
class|class
name|echo_argsTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|echo_args
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, echo_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|echo_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetW
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetW
argument_list|()
condition|)
block|{
name|struct
operator|.
name|w
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, echo_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|echo_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|w
operator|=
operator|new
name|Work
argument_list|()
expr_stmt|;
name|struct
operator|.
name|w
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setWIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|echo_result
specifier|public
specifier|static
class|class
name|echo_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|echo_result
argument_list|,
name|echo_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|echo_result
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"echo_result"
argument_list|)
decl_stmt|;
DECL|field|SUCCESS_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|echo_resultStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|echo_resultTupleSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|success
specifier|public
name|Work
name|success
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
DECL|enumConstant|SUCCESS
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|Work
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|echo_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|echo_result ()
specifier|public
name|echo_result
parameter_list|()
block|{     }
DECL|method|echo_result ( Work success)
specifier|public
name|echo_result
parameter_list|(
name|Work
name|success
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|echo_result (echo_result other)
specifier|public
name|echo_result
parameter_list|(
name|echo_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Work
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deepCopy ()
specifier|public
name|echo_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|echo_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getSuccess ()
specifier|public
name|Work
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
DECL|method|setSuccess (Work success)
specifier|public
name|echo_result
name|setSuccess
parameter_list|(
name|Work
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetSuccess ()
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
DECL|method|isSetSuccess ()
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
DECL|method|setSuccessIsSet (boolean value)
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Work
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|echo_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|echo_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (echo_result that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|echo_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetSuccess
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|success
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (echo_result other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|echo_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"echo_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
if|if
condition|(
name|success
operator|!=
literal|null
condition|)
block|{
name|success
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|echo_resultStandardSchemeFactory
specifier|private
specifier|static
class|class
name|echo_resultStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|echo_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|echo_resultStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|echo_resultStandardScheme
specifier|private
specifier|static
class|class
name|echo_resultStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|echo_result
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, echo_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|echo_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|success
operator|=
operator|new
name|Work
argument_list|()
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, echo_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|echo_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|echo_resultTupleSchemeFactory
specifier|private
specifier|static
class|class
name|echo_resultTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|echo_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|echo_resultTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|echo_resultTupleScheme
specifier|private
specifier|static
class|class
name|echo_resultTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|echo_result
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, echo_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|echo_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|struct
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, echo_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|echo_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
operator|new
name|Work
argument_list|()
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|alltypes_args
specifier|public
specifier|static
class|class
name|alltypes_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|alltypes_args
argument_list|,
name|alltypes_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|alltypes_args
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"alltypes_args"
argument_list|)
decl_stmt|;
DECL|field|V1_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V1_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v1"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
DECL|field|V2_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V2_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v2"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BYTE
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
DECL|field|V3_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V3_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v3"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
DECL|field|V4_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V4_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v4"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
DECL|field|V5_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V5_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v5"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
DECL|field|V6_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V6_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v6"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|DOUBLE
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
DECL|field|V7_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V7_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v7"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
DECL|field|V8_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V8_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v8"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
DECL|field|V9_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V9_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v9"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
DECL|field|V10_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V10_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v10"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
DECL|field|V11_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V11_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v11"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
argument_list|,
operator|(
name|short
operator|)
literal|11
argument_list|)
decl_stmt|;
DECL|field|V12_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|V12_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"v12"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|alltypes_argsStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|alltypes_argsTupleSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|v1
specifier|public
name|boolean
name|v1
decl_stmt|;
comment|// required
DECL|field|v2
specifier|public
name|byte
name|v2
decl_stmt|;
comment|// required
DECL|field|v3
specifier|public
name|short
name|v3
decl_stmt|;
comment|// required
DECL|field|v4
specifier|public
name|int
name|v4
decl_stmt|;
comment|// required
DECL|field|v5
specifier|public
name|long
name|v5
decl_stmt|;
comment|// required
DECL|field|v6
specifier|public
name|double
name|v6
decl_stmt|;
comment|// required
DECL|field|v7
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|v7
decl_stmt|;
comment|// required
DECL|field|v8
specifier|public
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
decl_stmt|;
comment|// required
DECL|field|v9
specifier|public
name|Work
name|v9
decl_stmt|;
comment|// required
DECL|field|v10
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
decl_stmt|;
comment|// required
DECL|field|v11
specifier|public
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
decl_stmt|;
comment|// required
DECL|field|v12
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
DECL|enumConstant|V1
name|V1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"v1"
argument_list|)
block|,
DECL|enumConstant|V2
name|V2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"v2"
argument_list|)
block|,
DECL|enumConstant|V3
name|V3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"v3"
argument_list|)
block|,
DECL|enumConstant|V4
name|V4
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"v4"
argument_list|)
block|,
DECL|enumConstant|V5
name|V5
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"v5"
argument_list|)
block|,
DECL|enumConstant|V6
name|V6
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"v6"
argument_list|)
block|,
DECL|enumConstant|V7
name|V7
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"v7"
argument_list|)
block|,
DECL|enumConstant|V8
name|V8
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"v8"
argument_list|)
block|,
DECL|enumConstant|V9
name|V9
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"v9"
argument_list|)
block|,
DECL|enumConstant|V10
name|V10
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
literal|"v10"
argument_list|)
block|,
DECL|enumConstant|V11
name|V11
argument_list|(
operator|(
name|short
operator|)
literal|11
argument_list|,
literal|"v11"
argument_list|)
block|,
DECL|enumConstant|V12
name|V12
argument_list|(
operator|(
name|short
operator|)
literal|12
argument_list|,
literal|"v12"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// V1
return|return
name|V1
return|;
case|case
literal|2
case|:
comment|// V2
return|return
name|V2
return|;
case|case
literal|3
case|:
comment|// V3
return|return
name|V3
return|;
case|case
literal|4
case|:
comment|// V4
return|return
name|V4
return|;
case|case
literal|5
case|:
comment|// V5
return|return
name|V5
return|;
case|case
literal|6
case|:
comment|// V6
return|return
name|V6
return|;
case|case
literal|7
case|:
comment|// V7
return|return
name|V7
return|;
case|case
literal|8
case|:
comment|// V8
return|return
name|V8
return|;
case|case
literal|9
case|:
comment|// V9
return|return
name|V9
return|;
case|case
literal|10
case|:
comment|// V10
return|return
name|V10
return|;
case|case
literal|11
case|:
comment|// V11
return|return
name|V11
return|;
case|case
literal|12
case|:
comment|// V12
return|return
name|V12
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|__V1_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__V1_ISSET_ID
init|=
literal|0
decl_stmt|;
DECL|field|__V2_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__V2_ISSET_ID
init|=
literal|1
decl_stmt|;
DECL|field|__V3_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__V3_ISSET_ID
init|=
literal|2
decl_stmt|;
DECL|field|__V4_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__V4_ISSET_ID
init|=
literal|3
decl_stmt|;
DECL|field|__V5_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__V5_ISSET_ID
init|=
literal|4
decl_stmt|;
DECL|field|__V6_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__V6_ISSET_ID
init|=
literal|5
decl_stmt|;
DECL|field|__isset_bitfield
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V1
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v1"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V2
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v2"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BYTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V3
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v3"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V4
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v4"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V5
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v5"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V6
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v6"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|DOUBLE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V7
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v7"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V8
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v8"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V9
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v9"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|Work
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V10
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v10"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V11
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v11"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|SetMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|V12
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"v12"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alltypes_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|alltypes_args ()
specifier|public
name|alltypes_args
parameter_list|()
block|{     }
DECL|method|alltypes_args ( boolean v1, byte v2, short v3, int v4, long v5, double v6, java.lang.String v7, java.nio.ByteBuffer v8, Work v9, java.util.List<java.lang.Integer> v10, java.util.Set<java.lang.String> v11, java.util.Map<java.lang.String,java.lang.Long> v12)
specifier|public
name|alltypes_args
parameter_list|(
name|boolean
name|v1
parameter_list|,
name|byte
name|v2
parameter_list|,
name|short
name|v3
parameter_list|,
name|int
name|v4
parameter_list|,
name|long
name|v5
parameter_list|,
name|double
name|v6
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|v7
parameter_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
parameter_list|,
name|Work
name|v9
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|v1
operator|=
name|v1
expr_stmt|;
name|setV1IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|v2
operator|=
name|v2
expr_stmt|;
name|setV2IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|v3
operator|=
name|v3
expr_stmt|;
name|setV3IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|v4
operator|=
name|v4
expr_stmt|;
name|setV4IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|v5
operator|=
name|v5
expr_stmt|;
name|setV5IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|v6
operator|=
name|v6
expr_stmt|;
name|setV6IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|v7
operator|=
name|v7
expr_stmt|;
name|this
operator|.
name|v8
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|v8
argument_list|)
expr_stmt|;
name|this
operator|.
name|v9
operator|=
name|v9
expr_stmt|;
name|this
operator|.
name|v10
operator|=
name|v10
expr_stmt|;
name|this
operator|.
name|v11
operator|=
name|v11
expr_stmt|;
name|this
operator|.
name|v12
operator|=
name|v12
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|alltypes_args (alltypes_args other)
specifier|public
name|alltypes_args
parameter_list|(
name|alltypes_args
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
name|this
operator|.
name|v1
operator|=
name|other
operator|.
name|v1
expr_stmt|;
name|this
operator|.
name|v2
operator|=
name|other
operator|.
name|v2
expr_stmt|;
name|this
operator|.
name|v3
operator|=
name|other
operator|.
name|v3
expr_stmt|;
name|this
operator|.
name|v4
operator|=
name|other
operator|.
name|v4
expr_stmt|;
name|this
operator|.
name|v5
operator|=
name|other
operator|.
name|v5
expr_stmt|;
name|this
operator|.
name|v6
operator|=
name|other
operator|.
name|v6
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetV7
argument_list|()
condition|)
block|{
name|this
operator|.
name|v7
operator|=
name|other
operator|.
name|v7
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetV8
argument_list|()
condition|)
block|{
name|this
operator|.
name|v8
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|other
operator|.
name|v8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetV9
argument_list|()
condition|)
block|{
name|this
operator|.
name|v9
operator|=
operator|new
name|Work
argument_list|(
name|other
operator|.
name|v9
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetV10
argument_list|()
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|__this__v10
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|(
name|other
operator|.
name|v10
argument_list|)
decl_stmt|;
name|this
operator|.
name|v10
operator|=
name|__this__v10
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetV11
argument_list|()
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|__this__v11
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
argument_list|(
name|other
operator|.
name|v11
argument_list|)
decl_stmt|;
name|this
operator|.
name|v11
operator|=
name|__this__v11
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetV12
argument_list|()
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|__this__v12
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
argument_list|(
name|other
operator|.
name|v12
argument_list|)
decl_stmt|;
name|this
operator|.
name|v12
operator|=
name|__this__v12
expr_stmt|;
block|}
block|}
DECL|method|deepCopy ()
specifier|public
name|alltypes_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alltypes_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setV1IsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|v1
operator|=
literal|false
expr_stmt|;
name|setV2IsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|v2
operator|=
literal|0
expr_stmt|;
name|setV3IsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|v3
operator|=
literal|0
expr_stmt|;
name|setV4IsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|v4
operator|=
literal|0
expr_stmt|;
name|setV5IsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|v5
operator|=
literal|0
expr_stmt|;
name|setV6IsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|v6
operator|=
literal|0.0
expr_stmt|;
name|this
operator|.
name|v7
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|v8
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|v9
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|v10
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|v11
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|v12
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|isV1 ()
specifier|public
name|boolean
name|isV1
parameter_list|()
block|{
return|return
name|this
operator|.
name|v1
return|;
block|}
DECL|method|setV1 (boolean v1)
specifier|public
name|alltypes_args
name|setV1
parameter_list|(
name|boolean
name|v1
parameter_list|)
block|{
name|this
operator|.
name|v1
operator|=
name|v1
expr_stmt|;
name|setV1IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV1 ()
specifier|public
name|void
name|unsetV1
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V1_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field v1 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV1 ()
specifier|public
name|boolean
name|isSetV1
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V1_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setV1IsSet (boolean value)
specifier|public
name|void
name|setV1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V1_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getV2 ()
specifier|public
name|byte
name|getV2
parameter_list|()
block|{
return|return
name|this
operator|.
name|v2
return|;
block|}
DECL|method|setV2 (byte v2)
specifier|public
name|alltypes_args
name|setV2
parameter_list|(
name|byte
name|v2
parameter_list|)
block|{
name|this
operator|.
name|v2
operator|=
name|v2
expr_stmt|;
name|setV2IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV2 ()
specifier|public
name|void
name|unsetV2
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V2_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field v2 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV2 ()
specifier|public
name|boolean
name|isSetV2
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V2_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setV2IsSet (boolean value)
specifier|public
name|void
name|setV2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V2_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getV3 ()
specifier|public
name|short
name|getV3
parameter_list|()
block|{
return|return
name|this
operator|.
name|v3
return|;
block|}
DECL|method|setV3 (short v3)
specifier|public
name|alltypes_args
name|setV3
parameter_list|(
name|short
name|v3
parameter_list|)
block|{
name|this
operator|.
name|v3
operator|=
name|v3
expr_stmt|;
name|setV3IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV3 ()
specifier|public
name|void
name|unsetV3
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V3_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field v3 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV3 ()
specifier|public
name|boolean
name|isSetV3
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V3_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setV3IsSet (boolean value)
specifier|public
name|void
name|setV3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V3_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getV4 ()
specifier|public
name|int
name|getV4
parameter_list|()
block|{
return|return
name|this
operator|.
name|v4
return|;
block|}
DECL|method|setV4 (int v4)
specifier|public
name|alltypes_args
name|setV4
parameter_list|(
name|int
name|v4
parameter_list|)
block|{
name|this
operator|.
name|v4
operator|=
name|v4
expr_stmt|;
name|setV4IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV4 ()
specifier|public
name|void
name|unsetV4
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V4_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field v4 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV4 ()
specifier|public
name|boolean
name|isSetV4
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V4_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setV4IsSet (boolean value)
specifier|public
name|void
name|setV4IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V4_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getV5 ()
specifier|public
name|long
name|getV5
parameter_list|()
block|{
return|return
name|this
operator|.
name|v5
return|;
block|}
DECL|method|setV5 (long v5)
specifier|public
name|alltypes_args
name|setV5
parameter_list|(
name|long
name|v5
parameter_list|)
block|{
name|this
operator|.
name|v5
operator|=
name|v5
expr_stmt|;
name|setV5IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV5 ()
specifier|public
name|void
name|unsetV5
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V5_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field v5 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV5 ()
specifier|public
name|boolean
name|isSetV5
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V5_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setV5IsSet (boolean value)
specifier|public
name|void
name|setV5IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V5_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getV6 ()
specifier|public
name|double
name|getV6
parameter_list|()
block|{
return|return
name|this
operator|.
name|v6
return|;
block|}
DECL|method|setV6 (double v6)
specifier|public
name|alltypes_args
name|setV6
parameter_list|(
name|double
name|v6
parameter_list|)
block|{
name|this
operator|.
name|v6
operator|=
name|v6
expr_stmt|;
name|setV6IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV6 ()
specifier|public
name|void
name|unsetV6
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V6_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field v6 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV6 ()
specifier|public
name|boolean
name|isSetV6
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V6_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setV6IsSet (boolean value)
specifier|public
name|void
name|setV6IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__V6_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getV7 ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getV7
parameter_list|()
block|{
return|return
name|this
operator|.
name|v7
return|;
block|}
DECL|method|setV7 (java.lang.String v7)
specifier|public
name|alltypes_args
name|setV7
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|v7
parameter_list|)
block|{
name|this
operator|.
name|v7
operator|=
name|v7
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV7 ()
specifier|public
name|void
name|unsetV7
parameter_list|()
block|{
name|this
operator|.
name|v7
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field v7 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV7 ()
specifier|public
name|boolean
name|isSetV7
parameter_list|()
block|{
return|return
name|this
operator|.
name|v7
operator|!=
literal|null
return|;
block|}
DECL|method|setV7IsSet (boolean value)
specifier|public
name|void
name|setV7IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|v7
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getV8 ()
specifier|public
name|byte
index|[]
name|getV8
parameter_list|()
block|{
name|setV8
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|v8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|v8
operator|==
literal|null
condition|?
literal|null
else|:
name|v8
operator|.
name|array
argument_list|()
return|;
block|}
DECL|method|bufferForV8 ()
specifier|public
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|bufferForV8
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|v8
argument_list|)
return|;
block|}
DECL|method|setV8 (byte[] v8)
specifier|public
name|alltypes_args
name|setV8
parameter_list|(
name|byte
index|[]
name|v8
parameter_list|)
block|{
name|this
operator|.
name|v8
operator|=
name|v8
operator|==
literal|null
condition|?
operator|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|)
literal|null
else|:
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|v8
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setV8 (java.nio.ByteBuffer v8)
specifier|public
name|alltypes_args
name|setV8
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|v8
parameter_list|)
block|{
name|this
operator|.
name|v8
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|v8
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV8 ()
specifier|public
name|void
name|unsetV8
parameter_list|()
block|{
name|this
operator|.
name|v8
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field v8 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV8 ()
specifier|public
name|boolean
name|isSetV8
parameter_list|()
block|{
return|return
name|this
operator|.
name|v8
operator|!=
literal|null
return|;
block|}
DECL|method|setV8IsSet (boolean value)
specifier|public
name|void
name|setV8IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|v8
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getV9 ()
specifier|public
name|Work
name|getV9
parameter_list|()
block|{
return|return
name|this
operator|.
name|v9
return|;
block|}
DECL|method|setV9 (Work v9)
specifier|public
name|alltypes_args
name|setV9
parameter_list|(
name|Work
name|v9
parameter_list|)
block|{
name|this
operator|.
name|v9
operator|=
name|v9
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV9 ()
specifier|public
name|void
name|unsetV9
parameter_list|()
block|{
name|this
operator|.
name|v9
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field v9 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV9 ()
specifier|public
name|boolean
name|isSetV9
parameter_list|()
block|{
return|return
name|this
operator|.
name|v9
operator|!=
literal|null
return|;
block|}
DECL|method|setV9IsSet (boolean value)
specifier|public
name|void
name|setV9IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|v9
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getV10Size ()
specifier|public
name|int
name|getV10Size
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|v10
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|v10
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getV10Iterator ()
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|getV10Iterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|v10
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|v10
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|addToV10 (int elem)
specifier|public
name|void
name|addToV10
parameter_list|(
name|int
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|v10
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|v10
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|v10
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
DECL|method|getV10 ()
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|getV10
parameter_list|()
block|{
return|return
name|this
operator|.
name|v10
return|;
block|}
DECL|method|setV10 (java.util.List<java.lang.Integer> v10)
specifier|public
name|alltypes_args
name|setV10
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|v10
parameter_list|)
block|{
name|this
operator|.
name|v10
operator|=
name|v10
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV10 ()
specifier|public
name|void
name|unsetV10
parameter_list|()
block|{
name|this
operator|.
name|v10
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field v10 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV10 ()
specifier|public
name|boolean
name|isSetV10
parameter_list|()
block|{
return|return
name|this
operator|.
name|v10
operator|!=
literal|null
return|;
block|}
DECL|method|setV10IsSet (boolean value)
specifier|public
name|void
name|setV10IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|v10
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getV11Size ()
specifier|public
name|int
name|getV11Size
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|v11
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|v11
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getV11Iterator ()
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|getV11Iterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|v11
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|v11
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|addToV11 (java.lang.String elem)
specifier|public
name|void
name|addToV11
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|v11
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|v11
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|v11
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
DECL|method|getV11 ()
specifier|public
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|getV11
parameter_list|()
block|{
return|return
name|this
operator|.
name|v11
return|;
block|}
DECL|method|setV11 (java.util.Set<java.lang.String> v11)
specifier|public
name|alltypes_args
name|setV11
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|v11
parameter_list|)
block|{
name|this
operator|.
name|v11
operator|=
name|v11
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV11 ()
specifier|public
name|void
name|unsetV11
parameter_list|()
block|{
name|this
operator|.
name|v11
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field v11 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV11 ()
specifier|public
name|boolean
name|isSetV11
parameter_list|()
block|{
return|return
name|this
operator|.
name|v11
operator|!=
literal|null
return|;
block|}
DECL|method|setV11IsSet (boolean value)
specifier|public
name|void
name|setV11IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|v11
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getV12Size ()
specifier|public
name|int
name|getV12Size
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|v12
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|v12
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|putToV12 (java.lang.String key, long val)
specifier|public
name|void
name|putToV12
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|v12
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|v12
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|v12
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|getV12 ()
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|getV12
parameter_list|()
block|{
return|return
name|this
operator|.
name|v12
return|;
block|}
DECL|method|setV12 (java.util.Map<java.lang.String,java.lang.Long> v12)
specifier|public
name|alltypes_args
name|setV12
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|v12
parameter_list|)
block|{
name|this
operator|.
name|v12
operator|=
name|v12
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetV12 ()
specifier|public
name|void
name|unsetV12
parameter_list|()
block|{
name|this
operator|.
name|v12
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field v12 is set (has been assigned a value) and false otherwise */
DECL|method|isSetV12 ()
specifier|public
name|boolean
name|isSetV12
parameter_list|()
block|{
return|return
name|this
operator|.
name|v12
operator|!=
literal|null
return|;
block|}
DECL|method|setV12IsSet (boolean value)
specifier|public
name|void
name|setV12IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|v12
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|V1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV1
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV2
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Byte
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV3
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V4
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV4
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV4
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V5
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV5
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV5
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V6
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV6
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV6
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Double
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V7
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV7
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV7
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V8
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV8
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|setV8
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setV8
argument_list|(
operator|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|V9
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV9
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV9
argument_list|(
operator|(
name|Work
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V10
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV10
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV10
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V11
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV11
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV11
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|V12
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetV12
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setV12
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|V1
case|:
return|return
name|isV1
argument_list|()
return|;
case|case
name|V2
case|:
return|return
name|getV2
argument_list|()
return|;
case|case
name|V3
case|:
return|return
name|getV3
argument_list|()
return|;
case|case
name|V4
case|:
return|return
name|getV4
argument_list|()
return|;
case|case
name|V5
case|:
return|return
name|getV5
argument_list|()
return|;
case|case
name|V6
case|:
return|return
name|getV6
argument_list|()
return|;
case|case
name|V7
case|:
return|return
name|getV7
argument_list|()
return|;
case|case
name|V8
case|:
return|return
name|getV8
argument_list|()
return|;
case|case
name|V9
case|:
return|return
name|getV9
argument_list|()
return|;
case|case
name|V10
case|:
return|return
name|getV10
argument_list|()
return|;
case|case
name|V11
case|:
return|return
name|getV11
argument_list|()
return|;
case|case
name|V12
case|:
return|return
name|getV12
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|V1
case|:
return|return
name|isSetV1
argument_list|()
return|;
case|case
name|V2
case|:
return|return
name|isSetV2
argument_list|()
return|;
case|case
name|V3
case|:
return|return
name|isSetV3
argument_list|()
return|;
case|case
name|V4
case|:
return|return
name|isSetV4
argument_list|()
return|;
case|case
name|V5
case|:
return|return
name|isSetV5
argument_list|()
return|;
case|case
name|V6
case|:
return|return
name|isSetV6
argument_list|()
return|;
case|case
name|V7
case|:
return|return
name|isSetV7
argument_list|()
return|;
case|case
name|V8
case|:
return|return
name|isSetV8
argument_list|()
return|;
case|case
name|V9
case|:
return|return
name|isSetV9
argument_list|()
return|;
case|case
name|V10
case|:
return|return
name|isSetV10
argument_list|()
return|;
case|case
name|V11
case|:
return|return
name|isSetV11
argument_list|()
return|;
case|case
name|V12
case|:
return|return
name|isSetV12
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alltypes_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alltypes_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (alltypes_args that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|alltypes_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_v1
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_v1
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_v1
operator|||
name|that_present_v1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v1
operator|&&
name|that_present_v1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|v1
operator|!=
name|that
operator|.
name|v1
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v2
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_v2
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_v2
operator|||
name|that_present_v2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v2
operator|&&
name|that_present_v2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|v2
operator|!=
name|that
operator|.
name|v2
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v3
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_v3
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_v3
operator|||
name|that_present_v3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v3
operator|&&
name|that_present_v3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|v3
operator|!=
name|that
operator|.
name|v3
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v4
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_v4
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_v4
operator|||
name|that_present_v4
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v4
operator|&&
name|that_present_v4
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|v4
operator|!=
name|that
operator|.
name|v4
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v5
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_v5
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_v5
operator|||
name|that_present_v5
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v5
operator|&&
name|that_present_v5
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|v5
operator|!=
name|that
operator|.
name|v5
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v6
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_v6
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_v6
operator|||
name|that_present_v6
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v6
operator|&&
name|that_present_v6
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|v6
operator|!=
name|that
operator|.
name|v6
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v7
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetV7
argument_list|()
decl_stmt|;
name|boolean
name|that_present_v7
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetV7
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_v7
operator|||
name|that_present_v7
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v7
operator|&&
name|that_present_v7
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|v7
operator|.
name|equals
argument_list|(
name|that
operator|.
name|v7
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v8
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetV8
argument_list|()
decl_stmt|;
name|boolean
name|that_present_v8
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetV8
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_v8
operator|||
name|that_present_v8
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v8
operator|&&
name|that_present_v8
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|v8
operator|.
name|equals
argument_list|(
name|that
operator|.
name|v8
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v9
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetV9
argument_list|()
decl_stmt|;
name|boolean
name|that_present_v9
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetV9
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_v9
operator|||
name|that_present_v9
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v9
operator|&&
name|that_present_v9
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|v9
operator|.
name|equals
argument_list|(
name|that
operator|.
name|v9
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v10
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetV10
argument_list|()
decl_stmt|;
name|boolean
name|that_present_v10
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetV10
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_v10
operator|||
name|that_present_v10
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v10
operator|&&
name|that_present_v10
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|v10
operator|.
name|equals
argument_list|(
name|that
operator|.
name|v10
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v11
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetV11
argument_list|()
decl_stmt|;
name|boolean
name|that_present_v11
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetV11
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_v11
operator|||
name|that_present_v11
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v11
operator|&&
name|that_present_v11
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|v11
operator|.
name|equals
argument_list|(
name|that
operator|.
name|v11
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_v12
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetV12
argument_list|()
decl_stmt|;
name|boolean
name|that_present_v12
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetV12
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_v12
operator|||
name|that_present_v12
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_v12
operator|&&
name|that_present_v12
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|v12
operator|.
name|equals
argument_list|(
name|that
operator|.
name|v12
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|v1
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
call|(
name|int
call|)
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|v3
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|v4
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|hashCode
argument_list|(
name|v5
argument_list|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|hashCode
argument_list|(
name|v6
argument_list|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetV7
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetV7
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|v7
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetV8
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetV8
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|v8
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetV9
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetV9
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|v9
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetV10
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetV10
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|v10
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetV11
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetV11
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|v11
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetV12
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetV12
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|v12
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (alltypes_args other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|alltypes_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v1
argument_list|,
name|other
operator|.
name|v1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v2
argument_list|,
name|other
operator|.
name|v2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v3
argument_list|,
name|other
operator|.
name|v3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV4
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV4
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV4
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v4
argument_list|,
name|other
operator|.
name|v4
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV5
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV5
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV5
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v5
argument_list|,
name|other
operator|.
name|v5
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV6
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV6
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV6
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v6
argument_list|,
name|other
operator|.
name|v6
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV7
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV7
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV7
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v7
argument_list|,
name|other
operator|.
name|v7
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV8
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV8
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV8
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v8
argument_list|,
name|other
operator|.
name|v8
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV9
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV9
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV9
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v9
argument_list|,
name|other
operator|.
name|v9
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV10
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV10
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV10
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v10
argument_list|,
name|other
operator|.
name|v10
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV11
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV11
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV11
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v11
argument_list|,
name|other
operator|.
name|v11
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetV12
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetV12
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetV12
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|v12
argument_list|,
name|other
operator|.
name|v12
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"alltypes_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v1
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v2
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v3
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v4:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v4
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v5:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v5
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v6:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v6
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v7:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|v7
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v7
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v8:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|v8
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|toString
argument_list|(
name|this
operator|.
name|v8
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v9:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|v9
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v9
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v10:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|v10
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v10
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v11:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|v11
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v11
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"v12:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|v12
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|v12
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
if|if
condition|(
name|v9
operator|!=
literal|null
condition|)
block|{
name|v9
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|alltypes_argsStandardSchemeFactory
specifier|private
specifier|static
class|class
name|alltypes_argsStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|alltypes_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|alltypes_argsStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|alltypes_argsStandardScheme
specifier|private
specifier|static
class|class
name|alltypes_argsStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|alltypes_args
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, alltypes_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|alltypes_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// V1
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|v1
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV1IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// V2
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BYTE
condition|)
block|{
name|struct
operator|.
name|v2
operator|=
name|iprot
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV2IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// V3
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I16
condition|)
block|{
name|struct
operator|.
name|v3
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV3IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// V4
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|v4
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV4IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// V5
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|v5
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV5IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// V6
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|DOUBLE
condition|)
block|{
name|struct
operator|.
name|v6
operator|=
name|iprot
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV6IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// V7
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|v7
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV7IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// V8
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|v8
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV8IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// V9
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|v9
operator|=
operator|new
name|Work
argument_list|()
expr_stmt|;
name|struct
operator|.
name|v9
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setV9IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// V10
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list0
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|v10
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|(
name|_list0
operator|.
name|size
argument_list|)
expr_stmt|;
name|int
name|_elem1
decl_stmt|;
for|for
control|(
name|int
name|_i2
init|=
literal|0
init|;
name|_i2
operator|<
name|_list0
operator|.
name|size
condition|;
operator|++
name|_i2
control|)
block|{
name|_elem1
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|v10
operator|.
name|add
argument_list|(
name|_elem1
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setV10IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// V11
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
name|_set3
init|=
name|iprot
operator|.
name|readSetBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|v11
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_set3
operator|.
name|size
argument_list|)
expr_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|_elem4
decl_stmt|;
for|for
control|(
name|int
name|_i5
init|=
literal|0
init|;
name|_i5
operator|<
name|_set3
operator|.
name|size
condition|;
operator|++
name|_i5
control|)
block|{
name|_elem4
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|v11
operator|.
name|add
argument_list|(
name|_elem4
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readSetEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setV11IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// V12
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map6
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|v12
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
argument_list|(
literal|2
operator|*
name|_map6
operator|.
name|size
argument_list|)
expr_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|_key7
decl_stmt|;
name|long
name|_val8
decl_stmt|;
for|for
control|(
name|int
name|_i9
init|=
literal|0
init|;
name|_i9
operator|<
name|_map6
operator|.
name|size
condition|;
operator|++
name|_i9
control|)
block|{
name|_key7
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val8
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|v12
operator|.
name|put
argument_list|(
name|_key7
argument_list|,
name|_val8
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setV12IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, alltypes_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|alltypes_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V1_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|v1
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V2_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeByte
argument_list|(
name|struct
operator|.
name|v2
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V3_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|struct
operator|.
name|v3
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V4_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|v4
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V5_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|v5
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V6_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeDouble
argument_list|(
name|struct
operator|.
name|v6
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|v7
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V7_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|v7
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|v8
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V8_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|v8
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|v9
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V9_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|v9
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|v10
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V10_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|struct
operator|.
name|v10
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_iter10
range|:
name|struct
operator|.
name|v10
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter10
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|v11
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V11_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeSetBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|v11
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|String
name|_iter11
range|:
name|struct
operator|.
name|v11
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter11
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeSetEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|v12
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|V12_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
name|struct
operator|.
name|v12
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|_iter12
range|:
name|struct
operator|.
name|v12
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter12
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|_iter12
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|alltypes_argsTupleSchemeFactory
specifier|private
specifier|static
class|class
name|alltypes_argsTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|alltypes_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|alltypes_argsTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|alltypes_argsTupleScheme
specifier|private
specifier|static
class|class
name|alltypes_argsTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|alltypes_args
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, alltypes_args struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|alltypes_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetV1
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV2
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV3
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV4
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV5
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV6
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV7
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV8
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV9
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV10
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV11
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV12
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|11
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|12
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetV1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|v1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeByte
argument_list|(
name|struct
operator|.
name|v2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI16
argument_list|(
name|struct
operator|.
name|v3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV4
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|v4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV5
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|v5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV6
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeDouble
argument_list|(
name|struct
operator|.
name|v6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV7
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|v7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV8
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|v8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV9
argument_list|()
condition|)
block|{
name|struct
operator|.
name|v9
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV10
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|v10
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_iter13
range|:
name|struct
operator|.
name|v10
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter13
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV11
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|v11
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|String
name|_iter14
range|:
name|struct
operator|.
name|v11
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter14
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetV12
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|v12
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
name|_iter15
range|:
name|struct
operator|.
name|v12
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter15
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|_iter15
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, alltypes_args struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|alltypes_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|v1
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV1IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|v2
operator|=
name|iprot
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV2IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|v3
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV3IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|v4
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV4IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|v5
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV5IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|struct
operator|.
name|v6
operator|=
name|iprot
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV6IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|6
argument_list|)
condition|)
block|{
name|struct
operator|.
name|v7
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV7IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|7
argument_list|)
condition|)
block|{
name|struct
operator|.
name|v8
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setV8IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|)
block|{
name|struct
operator|.
name|v9
operator|=
operator|new
name|Work
argument_list|()
expr_stmt|;
name|struct
operator|.
name|v9
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setV9IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|9
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list16
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|v10
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|(
name|_list16
operator|.
name|size
argument_list|)
expr_stmt|;
name|int
name|_elem17
decl_stmt|;
for|for
control|(
name|int
name|_i18
init|=
literal|0
init|;
name|_i18
operator|<
name|_list16
operator|.
name|size
condition|;
operator|++
name|_i18
control|)
block|{
name|_elem17
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|v10
operator|.
name|add
argument_list|(
name|_elem17
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setV10IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|10
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
name|_set19
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|v11
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_set19
operator|.
name|size
argument_list|)
expr_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|_elem20
decl_stmt|;
for|for
control|(
name|int
name|_i21
init|=
literal|0
init|;
name|_i21
operator|<
name|_set19
operator|.
name|size
condition|;
operator|++
name|_i21
control|)
block|{
name|_elem20
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|v11
operator|.
name|add
argument_list|(
name|_elem20
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setV11IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|11
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map22
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|v12
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
argument_list|(
literal|2
operator|*
name|_map22
operator|.
name|size
argument_list|)
expr_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|_key23
decl_stmt|;
name|long
name|_val24
decl_stmt|;
for|for
control|(
name|int
name|_i25
init|=
literal|0
init|;
name|_i25
operator|<
name|_map22
operator|.
name|size
condition|;
operator|++
name|_i25
control|)
block|{
name|_key23
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val24
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|v12
operator|.
name|put
argument_list|(
name|_key23
argument_list|,
name|_val24
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setV12IsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
DECL|class|alltypes_result
specifier|public
specifier|static
class|class
name|alltypes_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|alltypes_result
argument_list|,
name|alltypes_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|alltypes_result
argument_list|>
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"alltypes_result"
argument_list|)
decl_stmt|;
DECL|field|SUCCESS_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
DECL|field|STANDARD_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|alltypes_resultStandardSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|TUPLE_SCHEME_FACTORY
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|alltypes_resultTupleSchemeFactory
argument_list|()
decl_stmt|;
DECL|field|success
specifier|public
name|int
name|success
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
DECL|enumConstant|SUCCESS
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
DECL|method|findByThriftId (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
DECL|method|findByThriftIdOrThrow (int fieldId)
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
DECL|method|findByName (java.lang.String name)
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields (short thriftId, java.lang.String fieldName)
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId ()
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|__SUCCESS_ISSET_ID
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
DECL|field|__isset_bitfield
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alltypes_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|alltypes_result ()
specifier|public
name|alltypes_result
parameter_list|()
block|{     }
DECL|method|alltypes_result ( int success)
specifier|public
name|alltypes_result
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|alltypes_result (alltypes_result other)
specifier|public
name|alltypes_result
parameter_list|(
name|alltypes_result
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
block|}
DECL|method|deepCopy ()
specifier|public
name|alltypes_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alltypes_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getSuccess ()
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
DECL|method|setSuccess (int success)
specifier|public
name|alltypes_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetSuccess ()
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
DECL|method|isSetSuccess ()
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
DECL|method|setSuccessIsSet (boolean value)
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setFieldValue (_Fields field, java.lang.Object value)
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue (_Fields field)
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
DECL|method|isSet (_Fields field)
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alltypes_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alltypes_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals (alltypes_result that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|alltypes_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|success
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (alltypes_result other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|alltypes_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId (int fieldId)
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"alltypes_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
DECL|method|writeObject (java.io.ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|method|readObject (java.io.ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
DECL|class|alltypes_resultStandardSchemeFactory
specifier|private
specifier|static
class|class
name|alltypes_resultStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|alltypes_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|alltypes_resultStandardScheme
argument_list|()
return|;
block|}
block|}
DECL|class|alltypes_resultStandardScheme
specifier|private
specifier|static
class|class
name|alltypes_resultStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|alltypes_result
argument_list|>
block|{
DECL|method|read (org.apache.thrift.protocol.TProtocol iprot, alltypes_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|alltypes_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write (org.apache.thrift.protocol.TProtocol oprot, alltypes_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|alltypes_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|alltypes_resultTupleSchemeFactory
specifier|private
specifier|static
class|class
name|alltypes_resultTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
DECL|method|getScheme ()
specifier|public
name|alltypes_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|alltypes_resultTupleScheme
argument_list|()
return|;
block|}
block|}
DECL|class|alltypes_resultTupleScheme
specifier|private
specifier|static
class|class
name|alltypes_resultTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|alltypes_result
argument_list|>
block|{
annotation|@
name|Override
DECL|method|write (org.apache.thrift.protocol.TProtocol prot, alltypes_result struct)
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|alltypes_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (org.apache.thrift.protocol.TProtocol prot, alltypes_result struct)
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|alltypes_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scheme (org.apache.thrift.protocol.TProtocol proto)
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

