begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.thrift
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|MultithreadingTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|RunnableAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Calculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Work
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ThriftConsumerConcurrentTest
specifier|public
class|class
name|ThriftConsumerConcurrentTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThriftConsumerConcurrentTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|THRIFT_SYNC_REQUEST_TEST_PORT
specifier|private
specifier|static
specifier|final
name|int
name|THRIFT_SYNC_REQUEST_TEST_PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|THRIFT_ASYNC_REQUEST_TEST_PORT
specifier|private
specifier|static
specifier|final
name|int
name|THRIFT_ASYNC_REQUEST_TEST_PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|THRIFT_TEST_NUM1
specifier|private
specifier|static
specifier|final
name|int
name|THRIFT_TEST_NUM1
init|=
literal|12
decl_stmt|;
DECL|field|CONCURRENT_THREAD_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|CONCURRENT_THREAD_COUNT
init|=
literal|30
decl_stmt|;
DECL|field|ROUNDS_PER_THREAD_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|ROUNDS_PER_THREAD_COUNT
init|=
literal|10
decl_stmt|;
DECL|field|idCounter
specifier|private
specifier|static
name|AtomicInteger
name|idCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|createId ()
specifier|public
specifier|static
name|Integer
name|createId
parameter_list|()
block|{
return|return
name|idCounter
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
DECL|method|getId ()
specifier|public
specifier|static
name|Integer
name|getId
parameter_list|()
block|{
return|return
name|idCounter
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testSyncWithConcurrentThreads ()
specifier|public
name|void
name|testSyncWithConcurrentThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|RunnableAssert
name|ra
init|=
operator|new
name|RunnableAssert
argument_list|(
literal|"testSyncWithConcurrentThreads"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|TTransportException
block|{
name|TTransport
name|transport
init|=
operator|new
name|TSocket
argument_list|(
literal|"localhost"
argument_list|,
name|THRIFT_SYNC_REQUEST_TEST_PORT
argument_list|)
decl_stmt|;
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
name|TProtocol
name|protocol
init|=
operator|new
name|TBinaryProtocol
argument_list|(
operator|new
name|TFramedTransport
argument_list|(
name|transport
argument_list|)
argument_list|)
decl_stmt|;
name|Calculator
operator|.
name|Client
name|client
init|=
operator|(
operator|new
name|Calculator
operator|.
name|Client
operator|.
name|Factory
argument_list|()
operator|)
operator|.
name|getClient
argument_list|(
name|protocol
argument_list|)
decl_stmt|;
name|int
name|instanceId
init|=
name|createId
argument_list|()
decl_stmt|;
name|int
name|calculateResponse
init|=
literal|0
decl_stmt|;
try|try
block|{
name|calculateResponse
operator|=
name|client
operator|.
name|calculate
argument_list|(
literal|1
argument_list|,
operator|new
name|Work
argument_list|(
name|instanceId
argument_list|,
name|THRIFT_TEST_NUM1
argument_list|,
name|Operation
operator|.
name|MULTIPLY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"instanceId = "
operator|+
name|instanceId
argument_list|,
name|calculateResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|instanceId
operator|*
name|THRIFT_TEST_NUM1
argument_list|,
name|calculateResponse
argument_list|)
expr_stmt|;
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
operator|new
name|MultithreadingTester
argument_list|()
operator|.
name|add
argument_list|(
name|ra
argument_list|)
operator|.
name|numThreads
argument_list|(
name|CONCURRENT_THREAD_COUNT
argument_list|)
operator|.
name|numRoundsPerThread
argument_list|(
name|ROUNDS_PER_THREAD_COUNT
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncWithConcurrentThreads ()
specifier|public
name|void
name|testAsyncWithConcurrentThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|RunnableAssert
name|ra
init|=
operator|new
name|RunnableAssert
argument_list|(
literal|"testAsyncWithConcurrentThreads"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|TTransportException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TNonblockingTransport
name|transport
init|=
operator|new
name|TNonblockingSocket
argument_list|(
literal|"localhost"
argument_list|,
name|THRIFT_ASYNC_REQUEST_TEST_PORT
argument_list|)
decl_stmt|;
name|Calculator
operator|.
name|AsyncClient
name|client
init|=
operator|(
operator|new
name|Calculator
operator|.
name|AsyncClient
operator|.
name|Factory
argument_list|(
operator|new
name|TAsyncClientManager
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
operator|)
operator|.
name|getAsyncClient
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|int
name|instanceId
init|=
name|createId
argument_list|()
decl_stmt|;
name|CalculateAsyncMethodCallback
name|calculateCallback
init|=
operator|new
name|CalculateAsyncMethodCallback
argument_list|(
name|latch
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|calculate
argument_list|(
literal|1
argument_list|,
operator|new
name|Work
argument_list|(
name|instanceId
argument_list|,
name|THRIFT_TEST_NUM1
argument_list|,
name|Operation
operator|.
name|MULTIPLY
argument_list|)
argument_list|,
name|calculateCallback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|int
name|calculateResponse
init|=
name|calculateCallback
operator|.
name|getCalculateResponse
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"instanceId = "
operator|+
name|instanceId
argument_list|,
name|calculateResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|instanceId
operator|*
name|THRIFT_TEST_NUM1
argument_list|,
name|calculateResponse
argument_list|)
expr_stmt|;
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
operator|new
name|MultithreadingTester
argument_list|()
operator|.
name|add
argument_list|(
name|ra
argument_list|)
operator|.
name|numThreads
argument_list|(
name|CONCURRENT_THREAD_COUNT
argument_list|)
operator|.
name|numRoundsPerThread
argument_list|(
name|ROUNDS_PER_THREAD_COUNT
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|class|CalculateAsyncMethodCallback
specifier|public
class|class
name|CalculateAsyncMethodCallback
implements|implements
name|AsyncMethodCallback
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|calculateResponse
specifier|private
name|Integer
name|calculateResponse
decl_stmt|;
DECL|method|CalculateAsyncMethodCallback (CountDownLatch latch)
specifier|public
name|CalculateAsyncMethodCallback
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onComplete (Integer response)
specifier|public
name|void
name|onComplete
parameter_list|(
name|Integer
name|response
parameter_list|)
block|{
name|calculateResponse
operator|=
name|response
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onError (Exception exception)
specifier|public
name|void
name|onError
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|getCalculateResponse ()
specifier|public
name|Integer
name|getCalculateResponse
parameter_list|()
block|{
return|return
name|calculateResponse
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"thrift://localhost:"
operator|+
name|THRIFT_SYNC_REQUEST_TEST_PORT
operator|+
literal|"/org.apache.camel.component.thrift.generated.Calculator?synchronous=true"
argument_list|)
operator|.
name|setBody
argument_list|(
name|simple
argument_list|(
literal|"${body[1]}"
argument_list|)
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|CalculatorMessageBuilder
argument_list|()
argument_list|,
literal|"multiply"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"thrift://localhost:"
operator|+
name|THRIFT_ASYNC_REQUEST_TEST_PORT
operator|+
literal|"/org.apache.camel.component.thrift.generated.Calculator"
argument_list|)
operator|.
name|setBody
argument_list|(
name|simple
argument_list|(
literal|"${body[1]}"
argument_list|)
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|CalculatorMessageBuilder
argument_list|()
argument_list|,
literal|"multiply"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|CalculatorMessageBuilder
specifier|public
class|class
name|CalculatorMessageBuilder
block|{
DECL|method|multiply (Work work)
specifier|public
name|Integer
name|multiply
parameter_list|(
name|Work
name|work
parameter_list|)
block|{
return|return
name|work
operator|.
name|num1
operator|*
name|work
operator|.
name|num2
return|;
block|}
block|}
block|}
end_class

end_unit

