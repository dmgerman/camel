begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.thrift
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
operator|.
name|client
operator|.
name|AsyncClientMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TJSONProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSimpleJSONProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TZlibTransport
import|;
end_import

begin_comment
comment|/**  * ThriftUtils helpers are working with dynamic methods via Camel and Java  * reflection utilities  */
end_comment

begin_class
DECL|class|ThriftUtils
specifier|public
specifier|final
class|class
name|ThriftUtils
block|{
DECL|method|ThriftUtils ()
specifier|private
name|ThriftUtils
parameter_list|()
block|{     }
DECL|method|extractServiceName (String service)
specifier|public
specifier|static
name|String
name|extractServiceName
parameter_list|(
name|String
name|service
parameter_list|)
block|{
return|return
name|service
operator|.
name|substring
argument_list|(
name|service
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|extractServicePackage (String service)
specifier|public
specifier|static
name|String
name|extractServicePackage
parameter_list|(
name|String
name|service
parameter_list|)
block|{
return|return
name|service
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|constructClientInstance (String packageName, String serviceName, TTransport transport, ThriftExchangeProtocol exchangeProtocol, final ThriftNegotiationType negotiationType, final ThriftCompressionType compressionType, final CamelContext context)
specifier|public
specifier|static
name|Object
name|constructClientInstance
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|TTransport
name|transport
parameter_list|,
name|ThriftExchangeProtocol
name|exchangeProtocol
parameter_list|,
specifier|final
name|ThriftNegotiationType
name|negotiationType
parameter_list|,
specifier|final
name|ThriftCompressionType
name|compressionType
parameter_list|,
specifier|final
name|CamelContext
name|context
parameter_list|)
block|{
name|Object
name|clientInstance
init|=
literal|null
decl_stmt|;
name|Class
index|[]
name|constructorParamTypes
init|=
block|{
name|TProtocol
operator|.
name|class
block|}
decl_stmt|;
name|Object
index|[]
name|constructorParamValues
init|=
block|{
name|constructSyncProtocol
argument_list|(
name|transport
argument_list|,
name|exchangeProtocol
argument_list|,
name|negotiationType
argument_list|,
name|compressionType
argument_list|)
block|}
decl_stmt|;
name|String
name|clientClassName
init|=
name|packageName
operator|+
literal|"."
operator|+
name|serviceName
operator|+
literal|"$"
operator|+
name|ThriftConstants
operator|.
name|THRIFT_SYNC_CLIENT_CLASS_NAME
decl_stmt|;
try|try
block|{
name|Class
name|clientClass
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|clientClassName
argument_list|)
decl_stmt|;
name|Constructor
name|clientConstructor
init|=
name|clientClass
operator|.
name|getConstructor
argument_list|(
name|constructorParamTypes
argument_list|)
decl_stmt|;
name|clientInstance
operator|=
name|clientConstructor
operator|.
name|newInstance
argument_list|(
name|constructorParamValues
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Thrift client class not found: "
operator|+
name|clientClassName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Thrift client class constructor not found: "
operator|+
name|clientClassName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|clientInstance
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|constructAsyncClientInstance (String packageName, String serviceName, TNonblockingTransport transport, ThriftExchangeProtocol exchangeProtocol, final CamelContext context)
specifier|public
specifier|static
name|Object
name|constructAsyncClientInstance
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|,
name|ThriftExchangeProtocol
name|exchangeProtocol
parameter_list|,
specifier|final
name|CamelContext
name|context
parameter_list|)
block|{
name|Object
name|asynClientInstance
init|=
literal|null
decl_stmt|;
name|Class
index|[]
name|getterParamTypes
init|=
block|{
name|TNonblockingTransport
operator|.
name|class
block|}
decl_stmt|;
name|Class
index|[]
name|constructorParamTypes
init|=
block|{
name|TAsyncClientManager
operator|.
name|class
block|,
name|TProtocolFactory
operator|.
name|class
block|}
decl_stmt|;
name|String
name|clientClassName
init|=
name|packageName
operator|+
literal|"."
operator|+
name|serviceName
operator|+
literal|"$"
operator|+
name|ThriftConstants
operator|.
name|THRIFT_ASYNC_CLIENT_CLASS_NAME
operator|+
literal|"$"
operator|+
name|ThriftConstants
operator|.
name|THRIFT_ASYNC_CLIENT_FACTORY_NAME
decl_stmt|;
try|try
block|{
name|Class
name|clientClass
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|clientClassName
argument_list|)
decl_stmt|;
name|Constructor
name|factoryConstructor
init|=
name|clientClass
operator|.
name|getConstructor
argument_list|(
name|constructorParamTypes
argument_list|)
decl_stmt|;
name|Object
name|factoryInstance
init|=
name|factoryConstructor
operator|.
name|newInstance
argument_list|(
operator|new
name|TAsyncClientManager
argument_list|()
argument_list|,
name|constructAsyncProtocol
argument_list|(
name|exchangeProtocol
argument_list|)
argument_list|)
decl_stmt|;
name|Method
name|asyncClientGetter
init|=
name|ReflectionHelper
operator|.
name|findMethod
argument_list|(
name|clientClass
argument_list|,
name|ThriftConstants
operator|.
name|THRIFT_ASYNC_CLIENT_GETTER_NAME
argument_list|,
name|getterParamTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncClientGetter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Thrift async client getter not found: "
operator|+
name|clientClassName
operator|+
literal|"."
operator|+
name|ThriftConstants
operator|.
name|THRIFT_ASYNC_CLIENT_GETTER_NAME
argument_list|)
throw|;
block|}
name|asynClientInstance
operator|=
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|asyncClientGetter
argument_list|,
name|factoryInstance
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Thrift sync client class not found: "
operator|+
name|clientClassName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Thrift sync client factory class not found: "
operator|+
name|clientClassName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
decl||
name|IOException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|asynClientInstance
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|method|invokeSyncMethod (Object syncClient, String invokeMethod, Object request)
specifier|public
specifier|static
name|Object
name|invokeSyncMethod
parameter_list|(
name|Object
name|syncClient
parameter_list|,
name|String
name|invokeMethod
parameter_list|,
name|Object
name|request
parameter_list|)
block|{
name|Object
index|[]
name|params
init|=
name|convertObjects2Primitives
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Class
index|[]
name|paramsTypes
init|=
operator|(
name|Class
index|[]
operator|)
name|params
index|[
literal|0
index|]
decl_stmt|;
name|Object
index|[]
name|paramsValues
init|=
operator|(
name|Object
index|[]
operator|)
name|params
index|[
literal|1
index|]
decl_stmt|;
name|Method
name|method
init|=
name|ReflectionHelper
operator|.
name|findMethod
argument_list|(
name|syncClient
operator|.
name|getClass
argument_list|()
argument_list|,
name|invokeMethod
argument_list|,
name|paramsTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Thrift service client method not found: "
operator|+
name|syncClient
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|invokeMethod
operator|+
name|printParamsTypes
argument_list|(
name|paramsTypes
argument_list|)
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|syncClient
argument_list|,
name|paramsValues
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|method|invokeAsyncMethod (Object asyncClient, String invokeMethod, Object request, AsyncClientMethodCallback methodCallback)
specifier|public
specifier|static
name|void
name|invokeAsyncMethod
parameter_list|(
name|Object
name|asyncClient
parameter_list|,
name|String
name|invokeMethod
parameter_list|,
name|Object
name|request
parameter_list|,
name|AsyncClientMethodCallback
name|methodCallback
parameter_list|)
block|{
name|Object
index|[]
name|params
init|=
name|convertObjects2Primitives
argument_list|(
name|request
argument_list|,
name|methodCallback
argument_list|)
decl_stmt|;
name|Class
index|[]
name|paramsTypes
init|=
operator|(
name|Class
index|[]
operator|)
name|params
index|[
literal|0
index|]
decl_stmt|;
name|Object
index|[]
name|paramsValues
init|=
operator|(
name|Object
index|[]
operator|)
name|params
index|[
literal|1
index|]
decl_stmt|;
name|Method
name|method
init|=
name|ReflectionHelper
operator|.
name|findMethod
argument_list|(
name|asyncClient
operator|.
name|getClass
argument_list|()
argument_list|,
name|invokeMethod
argument_list|,
name|paramsTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Thrift service client method not found: "
operator|+
name|asyncClient
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|invokeMethod
operator|+
name|printParamsTypes
argument_list|(
name|paramsTypes
argument_list|)
argument_list|)
throw|;
block|}
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|asyncClient
argument_list|,
name|paramsValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|getServerInterface (String packageName, String serviceName, boolean isSyncInterface, final CamelContext context)
specifier|public
specifier|static
name|Class
name|getServerInterface
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|boolean
name|isSyncInterface
parameter_list|,
specifier|final
name|CamelContext
name|context
parameter_list|)
block|{
name|String
name|serverInterfaceName
init|=
literal|null
decl_stmt|;
name|Class
name|serverInterface
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isSyncInterface
condition|)
block|{
name|serverInterfaceName
operator|=
name|packageName
operator|+
literal|"."
operator|+
name|serviceName
operator|+
literal|"$"
operator|+
name|ThriftConstants
operator|.
name|THRIFT_SERVER_SYNC_INTERFACE_NAME
expr_stmt|;
block|}
else|else
block|{
name|serverInterfaceName
operator|=
name|packageName
operator|+
literal|"."
operator|+
name|serviceName
operator|+
literal|"$"
operator|+
name|ThriftConstants
operator|.
name|THRIFT_SERVER_ASYNC_INTERFACE_NAME
expr_stmt|;
block|}
name|serverInterface
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|serverInterfaceName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find server interface implementation for: "
operator|+
name|serverInterfaceName
argument_list|)
throw|;
block|}
return|return
name|serverInterface
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|constructServerProcessor (String packageName, String serviceName, Object serverImplementation, boolean isSyncProcessor, final CamelContext context)
specifier|public
specifier|static
name|Object
name|constructServerProcessor
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|Object
name|serverImplementation
parameter_list|,
name|boolean
name|isSyncProcessor
parameter_list|,
specifier|final
name|CamelContext
name|context
parameter_list|)
block|{
name|String
name|processorClassName
init|=
literal|null
decl_stmt|;
name|Class
name|serverInterface
init|=
literal|null
decl_stmt|;
name|Object
name|processorInstance
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isSyncProcessor
condition|)
block|{
name|processorClassName
operator|=
name|packageName
operator|+
literal|"."
operator|+
name|serviceName
operator|+
literal|"$"
operator|+
name|ThriftConstants
operator|.
name|THRIFT_SERVER_SYNC_PROCESSOR_CLASS
expr_stmt|;
name|serverInterface
operator|=
name|getServerInterface
argument_list|(
name|packageName
argument_list|,
name|serviceName
argument_list|,
name|isSyncProcessor
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processorClassName
operator|=
name|packageName
operator|+
literal|"."
operator|+
name|serviceName
operator|+
literal|"$"
operator|+
name|ThriftConstants
operator|.
name|THRIFT_SERVER_ASYNC_PROCESSOR_CLASS
expr_stmt|;
name|serverInterface
operator|=
name|getServerInterface
argument_list|(
name|packageName
argument_list|,
name|serviceName
argument_list|,
name|isSyncProcessor
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|Class
name|processorClass
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|processorClassName
argument_list|)
decl_stmt|;
name|Constructor
name|procesorConstructor
init|=
name|processorClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|serverInterface
block|}
argument_list|)
decl_stmt|;
name|processorInstance
operator|=
name|procesorConstructor
operator|.
name|newInstance
argument_list|(
name|serverImplementation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find server processor for: "
operator|+
name|processorClassName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Processor class instance not found for: "
operator|+
name|processorClassName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|processorInstance
return|;
block|}
DECL|method|constructSyncProtocol (TTransport transport, ThriftExchangeProtocol exchangeProtocol, final ThriftNegotiationType negotiationType, final ThriftCompressionType compressionType)
specifier|private
specifier|static
name|TProtocol
name|constructSyncProtocol
parameter_list|(
name|TTransport
name|transport
parameter_list|,
name|ThriftExchangeProtocol
name|exchangeProtocol
parameter_list|,
specifier|final
name|ThriftNegotiationType
name|negotiationType
parameter_list|,
specifier|final
name|ThriftCompressionType
name|compressionType
parameter_list|)
block|{
if|if
condition|(
name|negotiationType
operator|==
name|ThriftNegotiationType
operator|.
name|SSL
condition|)
block|{
comment|// If negotiation passed over SSL/TLS the only binary transport is supported
return|return
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|compressionType
operator|==
name|ThriftCompressionType
operator|.
name|ZLIB
condition|)
block|{
return|return
operator|new
name|TBinaryProtocol
argument_list|(
operator|new
name|TZlibTransport
argument_list|(
name|transport
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
switch|switch
condition|(
name|exchangeProtocol
condition|)
block|{
case|case
name|BINARY
case|:
return|return
operator|new
name|TBinaryProtocol
argument_list|(
operator|new
name|TFramedTransport
argument_list|(
name|transport
argument_list|)
argument_list|)
return|;
case|case
name|JSON
case|:
return|return
operator|new
name|TJSONProtocol
argument_list|(
operator|new
name|TFramedTransport
argument_list|(
name|transport
argument_list|)
argument_list|)
return|;
case|case
name|SJSON
case|:
return|return
operator|new
name|TSimpleJSONProtocol
argument_list|(
operator|new
name|TFramedTransport
argument_list|(
name|transport
argument_list|)
argument_list|)
return|;
case|case
name|COMPACT
case|:
return|return
operator|new
name|TCompactProtocol
argument_list|(
operator|new
name|TFramedTransport
argument_list|(
name|transport
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Exchange protocol "
operator|+
name|exchangeProtocol
operator|+
literal|" not implemented"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|constructAsyncProtocol (ThriftExchangeProtocol exchangeProtocol)
specifier|private
specifier|static
name|TProtocolFactory
name|constructAsyncProtocol
parameter_list|(
name|ThriftExchangeProtocol
name|exchangeProtocol
parameter_list|)
block|{
switch|switch
condition|(
name|exchangeProtocol
condition|)
block|{
case|case
name|BINARY
case|:
return|return
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
return|;
case|case
name|JSON
case|:
return|return
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
return|;
case|case
name|SJSON
case|:
return|return
operator|new
name|TSimpleJSONProtocol
operator|.
name|Factory
argument_list|()
return|;
case|case
name|COMPACT
case|:
return|return
operator|new
name|TCompactProtocol
operator|.
name|Factory
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Exchange protocol "
operator|+
name|exchangeProtocol
operator|+
literal|" not implemented"
argument_list|)
throw|;
block|}
block|}
comment|/**      * The function find onComplete method inside interface implementation and      * get fist parameter (but not Object.class) as return type      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|findMethodReturnType (Class clazz, String name)
specifier|public
specifier|static
name|Class
name|findMethodReturnType
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|printParamsTypes (Class[] paramsTypes)
specifier|private
specifier|static
name|String
name|printParamsTypes
parameter_list|(
name|Class
index|[]
name|paramsTypes
parameter_list|)
block|{
name|StringJoiner
name|joiner
init|=
operator|new
name|StringJoiner
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
name|paramType
range|:
name|paramsTypes
control|)
block|{
name|joiner
operator|.
name|add
argument_list|(
name|paramType
operator|==
literal|null
condition|?
literal|"null"
else|:
name|paramType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|"("
operator|+
name|joiner
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
comment|/**      * The function transforms objects types stored as list or simple object      * inside the Body to the primitives objects to find appropriate method      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|method|convertObjects2Primitives (Object request, AsyncClientMethodCallback methodCallback)
specifier|private
specifier|static
name|Object
index|[]
name|convertObjects2Primitives
parameter_list|(
name|Object
name|request
parameter_list|,
name|AsyncClientMethodCallback
name|methodCallback
parameter_list|)
block|{
name|Class
index|[]
name|paramsTypes
init|=
literal|null
decl_stmt|;
name|Object
index|[]
name|paramsValues
init|=
literal|null
decl_stmt|;
name|int
name|paramListSize
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|List
condition|)
block|{
name|List
name|paramList
init|=
operator|(
name|List
operator|)
name|request
decl_stmt|;
name|paramListSize
operator|=
name|paramList
operator|.
name|size
argument_list|()
operator|+
operator|(
name|methodCallback
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
name|paramsTypes
operator|=
operator|new
name|Class
index|[
name|paramListSize
index|]
expr_stmt|;
name|paramsValues
operator|=
operator|new
name|Object
index|[
name|paramListSize
index|]
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|param
range|:
name|paramList
control|)
block|{
if|if
condition|(
name|param
operator|instanceof
name|Short
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|short
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|instanceof
name|Long
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|long
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|instanceof
name|Integer
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|int
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|instanceof
name|Double
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|double
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|instanceof
name|Byte
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|byte
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|instanceof
name|Boolean
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|boolean
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|instanceof
name|List
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|List
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|instanceof
name|Set
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|Set
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|instanceof
name|Map
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|Map
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|instanceof
name|ByteBuffer
condition|)
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|ByteBuffer
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|paramsTypes
index|[
name|idx
index|]
operator|=
name|param
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
name|paramsValues
index|[
name|idx
index|]
operator|=
name|param
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|paramListSize
operator|=
name|methodCallback
operator|==
literal|null
condition|?
literal|1
else|:
literal|2
expr_stmt|;
name|paramsTypes
operator|=
operator|new
name|Class
index|[
name|paramListSize
index|]
expr_stmt|;
name|paramsValues
operator|=
operator|new
name|Object
index|[
name|paramListSize
index|]
expr_stmt|;
name|paramsTypes
index|[
literal|0
index|]
operator|=
name|request
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|paramsValues
index|[
literal|0
index|]
operator|=
name|request
expr_stmt|;
block|}
else|else
block|{
name|paramListSize
operator|=
name|methodCallback
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|paramsTypes
operator|=
operator|new
name|Class
index|[
name|paramListSize
index|]
expr_stmt|;
name|paramsValues
operator|=
operator|new
name|Object
index|[
name|paramListSize
index|]
expr_stmt|;
block|}
if|if
condition|(
name|methodCallback
operator|!=
literal|null
condition|)
block|{
name|paramsTypes
index|[
name|paramListSize
operator|-
literal|1
index|]
operator|=
name|AsyncMethodCallback
operator|.
name|class
expr_stmt|;
name|paramsValues
index|[
name|paramListSize
operator|-
literal|1
index|]
operator|=
name|methodCallback
expr_stmt|;
block|}
return|return
operator|new
name|Object
index|[]
block|{
name|paramsTypes
block|,
name|paramsValues
block|}
return|;
block|}
block|}
end_class

end_unit

