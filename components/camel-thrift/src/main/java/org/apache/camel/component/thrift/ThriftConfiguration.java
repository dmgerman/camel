begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.thrift
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|ThriftConfiguration
specifier|public
class|class
name|ThriftConfiguration
block|{
annotation|@
name|UriPath
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|service
specifier|private
name|String
name|service
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|method
specifier|private
name|String
name|method
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"BINARY"
argument_list|)
DECL|field|exchangeProtocol
specifier|private
name|ThriftExchangeProtocol
name|exchangeProtocol
init|=
name|ThriftExchangeProtocol
operator|.
name|BINARY
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
literal|"PLAINTEXT"
argument_list|)
DECL|field|negotiationType
specifier|private
name|ThriftNegotiationType
name|negotiationType
init|=
name|ThriftNegotiationType
operator|.
name|PLAINTEXT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|sslParameters
specifier|private
name|SSLContextParameters
name|sslParameters
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"NONE"
argument_list|)
DECL|field|compressionType
specifier|private
name|ThriftCompressionType
name|compressionType
init|=
name|ThriftCompressionType
operator|.
name|NONE
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|clientTimeout
specifier|private
name|int
name|clientTimeout
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ThriftConstants
operator|.
name|THRIFT_CONSUMER_POOL_SIZE
argument_list|)
DECL|field|poolSize
specifier|private
name|int
name|poolSize
init|=
name|ThriftConstants
operator|.
name|THRIFT_CONSUMER_POOL_SIZE
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ThriftConstants
operator|.
name|THRIFT_CONSUMER_MAX_POOL_SIZE
argument_list|)
DECL|field|maxPoolSize
specifier|private
name|int
name|maxPoolSize
init|=
name|ThriftConstants
operator|.
name|THRIFT_CONSUMER_MAX_POOL_SIZE
decl_stmt|;
comment|/**      * Fully qualified service name from the thrift descriptor file      * (package dot service definition name)      */
DECL|method|getService ()
specifier|public
name|String
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
DECL|method|setService (String service)
specifier|public
name|void
name|setService
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
comment|/**      * The Thrift invoked method name      */
DECL|method|getMethod ()
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
DECL|method|setMethod (String method)
specifier|public
name|void
name|setMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
comment|/**      * Exchange protocol serialization type      */
DECL|method|getExchangeProtocol ()
specifier|public
name|ThriftExchangeProtocol
name|getExchangeProtocol
parameter_list|()
block|{
return|return
name|exchangeProtocol
return|;
block|}
DECL|method|setExchangeProtocol (ThriftExchangeProtocol exchangeProtocol)
specifier|public
name|void
name|setExchangeProtocol
parameter_list|(
name|ThriftExchangeProtocol
name|exchangeProtocol
parameter_list|)
block|{
name|this
operator|.
name|exchangeProtocol
operator|=
name|exchangeProtocol
expr_stmt|;
block|}
comment|/**      * Security negotiation type      */
DECL|method|getNegotiationType ()
specifier|public
name|ThriftNegotiationType
name|getNegotiationType
parameter_list|()
block|{
return|return
name|negotiationType
return|;
block|}
DECL|method|setNegotiationType (ThriftNegotiationType negotiationType)
specifier|public
name|void
name|setNegotiationType
parameter_list|(
name|ThriftNegotiationType
name|negotiationType
parameter_list|)
block|{
name|this
operator|.
name|negotiationType
operator|=
name|negotiationType
expr_stmt|;
block|}
comment|/**      * Configuration parameters for SSL/TLS security negotiation      */
DECL|method|getSslParameters ()
specifier|public
name|SSLContextParameters
name|getSslParameters
parameter_list|()
block|{
return|return
name|sslParameters
return|;
block|}
DECL|method|setSslParameters (SSLContextParameters sslParameters)
specifier|public
name|void
name|setSslParameters
parameter_list|(
name|SSLContextParameters
name|sslParameters
parameter_list|)
block|{
name|this
operator|.
name|sslParameters
operator|=
name|sslParameters
expr_stmt|;
block|}
comment|/**      * Protocol compression mechanism type      */
DECL|method|getCompressionType ()
specifier|public
name|ThriftCompressionType
name|getCompressionType
parameter_list|()
block|{
return|return
name|compressionType
return|;
block|}
DECL|method|setCompressionType (ThriftCompressionType compressionType)
specifier|public
name|void
name|setCompressionType
parameter_list|(
name|ThriftCompressionType
name|compressionType
parameter_list|)
block|{
name|this
operator|.
name|compressionType
operator|=
name|compressionType
expr_stmt|;
block|}
comment|/**      * The Thrift server host name. This is localhost or 0.0.0.0 (if not      * defined) when being a consumer or remote server host name when using      * producer.      */
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
comment|/**      * The Thrift server port      */
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
comment|/**      * Client timeout for consumers      */
DECL|method|getClientTimeout ()
specifier|public
name|int
name|getClientTimeout
parameter_list|()
block|{
return|return
name|clientTimeout
return|;
block|}
DECL|method|setClientTimeout (int clientTimeout)
specifier|public
name|void
name|setClientTimeout
parameter_list|(
name|int
name|clientTimeout
parameter_list|)
block|{
name|this
operator|.
name|clientTimeout
operator|=
name|clientTimeout
expr_stmt|;
block|}
comment|/**      * The Thrift server consumer initial thread pool size      */
DECL|method|getPoolSize ()
specifier|public
name|int
name|getPoolSize
parameter_list|()
block|{
return|return
name|poolSize
return|;
block|}
DECL|method|setPoolSize (int poolSize)
specifier|public
name|void
name|setPoolSize
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|this
operator|.
name|poolSize
operator|=
name|poolSize
expr_stmt|;
block|}
comment|/**      * The Thrift server consumer max thread pool size      */
DECL|method|getMaxPoolSize ()
specifier|public
name|int
name|getMaxPoolSize
parameter_list|()
block|{
return|return
name|maxPoolSize
return|;
block|}
DECL|method|setMaxPoolSize (int maxPoolSize)
specifier|public
name|void
name|setMaxPoolSize
parameter_list|(
name|int
name|maxPoolSize
parameter_list|)
block|{
name|this
operator|.
name|maxPoolSize
operator|=
name|maxPoolSize
expr_stmt|;
block|}
DECL|method|parseURI (URI uri, Map<String, Object> parameters, ThriftComponent component)
specifier|public
name|void
name|parseURI
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|ThriftComponent
name|component
parameter_list|)
block|{
name|setHost
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|getPort
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|setPort
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setService
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

