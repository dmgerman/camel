begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.thrift.server
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|thrift
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|ServerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServerEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSaslTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/*  * Thrift ThreadPoolServer implementation with executors controlled by the Camel Executor Service Manager  */
end_comment

begin_class
DECL|class|ThriftThreadPoolServer
specifier|public
class|class
name|ThriftThreadPoolServer
extends|extends
name|TServer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThriftThreadPoolServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|class|Args
specifier|public
specifier|static
class|class
name|Args
extends|extends
name|AbstractServerArgs
argument_list|<
name|Args
argument_list|>
block|{
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|startThreadPool
specifier|private
name|ExecutorService
name|startThreadPool
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|field|requestTimeout
specifier|private
name|int
name|requestTimeout
init|=
literal|20
decl_stmt|;
DECL|field|requestTimeoutUnit
specifier|private
name|TimeUnit
name|requestTimeoutUnit
init|=
name|TimeUnit
operator|.
name|SECONDS
decl_stmt|;
DECL|field|beBackoffSlotLength
specifier|private
name|int
name|beBackoffSlotLength
init|=
literal|100
decl_stmt|;
DECL|field|beBackoffSlotLengthUnit
specifier|private
name|TimeUnit
name|beBackoffSlotLengthUnit
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
decl_stmt|;
DECL|method|Args (TServerTransport transport)
specifier|public
name|Args
parameter_list|(
name|TServerTransport
name|transport
parameter_list|)
block|{
name|super
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
DECL|method|requestTimeout (int n)
specifier|public
name|Args
name|requestTimeout
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|requestTimeout
operator|=
name|n
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|requestTimeoutUnit (TimeUnit tu)
specifier|public
name|Args
name|requestTimeoutUnit
parameter_list|(
name|TimeUnit
name|tu
parameter_list|)
block|{
name|requestTimeoutUnit
operator|=
name|tu
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Binary exponential backoff slot length
DECL|method|beBackoffSlotLength (int n)
specifier|public
name|Args
name|beBackoffSlotLength
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|beBackoffSlotLength
operator|=
name|n
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Binary exponential backoff slot time unit
DECL|method|beBackoffSlotLengthUnit (TimeUnit tu)
specifier|public
name|Args
name|beBackoffSlotLengthUnit
parameter_list|(
name|TimeUnit
name|tu
parameter_list|)
block|{
name|beBackoffSlotLengthUnit
operator|=
name|tu
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|executorService (ExecutorService executorService)
specifier|public
name|Args
name|executorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startThreadPool (ExecutorService startThreadPool)
specifier|public
name|Args
name|startThreadPool
parameter_list|(
name|ExecutorService
name|startThreadPool
parameter_list|)
block|{
name|this
operator|.
name|startThreadPool
operator|=
name|startThreadPool
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|context (CamelContext context)
specifier|public
name|Args
name|context
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|// Executor service for handling client connections
DECL|field|invoker
specifier|private
specifier|final
name|ExecutorService
name|invoker
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|CamelContext
name|context
decl_stmt|;
DECL|field|startExecutor
specifier|private
specifier|final
name|ExecutorService
name|startExecutor
decl_stmt|;
DECL|field|requestTimeoutUnit
specifier|private
specifier|final
name|TimeUnit
name|requestTimeoutUnit
decl_stmt|;
DECL|field|requestTimeout
specifier|private
specifier|final
name|long
name|requestTimeout
decl_stmt|;
DECL|field|beBackoffSlotInMillis
specifier|private
specifier|final
name|long
name|beBackoffSlotInMillis
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|ThriftThreadPoolServer (Args args)
specifier|public
name|ThriftThreadPoolServer
parameter_list|(
name|Args
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|requestTimeoutUnit
operator|=
name|args
operator|.
name|requestTimeoutUnit
expr_stmt|;
name|requestTimeout
operator|=
name|args
operator|.
name|requestTimeout
expr_stmt|;
name|beBackoffSlotInMillis
operator|=
name|args
operator|.
name|beBackoffSlotLengthUnit
operator|.
name|toMillis
argument_list|(
name|args
operator|.
name|beBackoffSlotLength
argument_list|)
expr_stmt|;
name|context
operator|=
name|args
operator|.
name|context
expr_stmt|;
name|invoker
operator|=
name|args
operator|.
name|executorService
expr_stmt|;
name|startExecutor
operator|=
name|args
operator|.
name|startThreadPool
expr_stmt|;
block|}
DECL|method|serve ()
specifier|public
name|void
name|serve
parameter_list|()
block|{
try|try
block|{
name|serverTransport_
operator|.
name|listen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TTransportException
name|ttx
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error occurred during listening."
argument_list|,
name|ttx
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Run the preServe event
if|if
condition|(
name|eventHandler_
operator|!=
literal|null
condition|)
block|{
name|eventHandler_
operator|.
name|preServe
argument_list|()
expr_stmt|;
block|}
name|startExecutor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
name|stopped_
operator|=
literal|false
expr_stmt|;
name|setServing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|waitForShutdown
argument_list|()
expr_stmt|;
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownGraceful
argument_list|(
name|invoker
argument_list|)
expr_stmt|;
name|setServing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForShutdown ()
specifier|private
name|void
name|waitForShutdown
parameter_list|()
block|{
name|int
name|failureCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|stopped_
condition|)
block|{
try|try
block|{
name|TTransport
name|client
init|=
name|serverTransport_
operator|.
name|accept
argument_list|()
decl_stmt|;
name|WorkerProcess
name|wp
init|=
operator|new
name|WorkerProcess
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|int
name|retryCount
init|=
literal|0
decl_stmt|;
name|long
name|remainTimeInMillis
init|=
name|requestTimeoutUnit
operator|.
name|toMillis
argument_list|(
name|requestTimeout
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|invoker
operator|.
name|execute
argument_list|(
name|wp
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|RejectedExecutionException
condition|)
block|{
name|retryCount
operator|++
expr_stmt|;
try|try
block|{
if|if
condition|(
name|remainTimeInMillis
operator|>
literal|0
condition|)
block|{
comment|// do a truncated 20 binary exponential
comment|// backoff sleep
name|long
name|sleepTimeInMillis
init|=
operator|(
call|(
name|long
call|)
argument_list|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|*
operator|(
literal|1L
operator|<<
name|Math
operator|.
name|min
argument_list|(
name|retryCount
argument_list|,
literal|20
argument_list|)
operator|)
argument_list|)
operator|)
operator|*
name|beBackoffSlotInMillis
decl_stmt|;
name|sleepTimeInMillis
operator|=
name|Math
operator|.
name|min
argument_list|(
name|sleepTimeInMillis
argument_list|,
name|remainTimeInMillis
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|sleepTimeInMillis
argument_list|)
expr_stmt|;
name|remainTimeInMillis
operator|=
name|remainTimeInMillis
operator|-
name|sleepTimeInMillis
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|wp
operator|=
literal|null
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Task has been rejected by ExecutorService "
operator|+
name|retryCount
operator|+
literal|" times till timedout, reason: "
operator|+
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting to place client on executor queue."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"ExecutorService threw error: "
operator|+
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
else|else
block|{
comment|// for other possible runtime errors from
comment|// ExecutorService, should also not kill serve
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"ExecutorService threw error: "
operator|+
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|TTransportException
name|ttx
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopped_
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Transport error occurred during acceptance of message."
argument_list|,
name|ttx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|stopped_
operator|=
literal|true
expr_stmt|;
name|serverTransport_
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownGraceful
argument_list|(
name|startExecutor
argument_list|)
expr_stmt|;
block|}
DECL|class|WorkerProcess
specifier|private
specifier|final
class|class
name|WorkerProcess
implements|implements
name|Runnable
block|{
comment|/**          * Client that this services.          */
DECL|field|client
specifier|private
name|TTransport
name|client
decl_stmt|;
comment|/**          * Default constructor.          *          * @param client Transport to process          */
DECL|method|WorkerProcess (TTransport client)
specifier|private
name|WorkerProcess
parameter_list|(
name|TTransport
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
comment|/**          * Loops on processing a client forever          */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TProcessor
name|processor
init|=
literal|null
decl_stmt|;
name|TTransport
name|inputTransport
init|=
literal|null
decl_stmt|;
name|TTransport
name|outputTransport
init|=
literal|null
decl_stmt|;
name|TProtocol
name|inputProtocol
init|=
literal|null
decl_stmt|;
name|TProtocol
name|outputProtocol
init|=
literal|null
decl_stmt|;
name|TServerEventHandler
name|eventHandler
init|=
literal|null
decl_stmt|;
name|ServerContext
name|connectionContext
init|=
literal|null
decl_stmt|;
try|try
block|{
name|processor
operator|=
name|processorFactory_
operator|.
name|getProcessor
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|inputTransport
operator|=
name|inputTransportFactory_
operator|.
name|getTransport
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|outputTransport
operator|=
name|outputTransportFactory_
operator|.
name|getTransport
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|inputProtocol
operator|=
name|inputProtocolFactory_
operator|.
name|getProtocol
argument_list|(
name|inputTransport
argument_list|)
expr_stmt|;
name|outputProtocol
operator|=
name|outputProtocolFactory_
operator|.
name|getProtocol
argument_list|(
name|outputTransport
argument_list|)
expr_stmt|;
name|eventHandler
operator|=
name|getEventHandler
argument_list|()
expr_stmt|;
if|if
condition|(
name|eventHandler
operator|!=
literal|null
condition|)
block|{
name|connectionContext
operator|=
name|eventHandler
operator|.
name|createContext
argument_list|(
name|inputProtocol
argument_list|,
name|outputProtocol
argument_list|)
expr_stmt|;
block|}
comment|// we check stopped_ first to make sure we're not supposed to be
comment|// shutting
comment|// down. this is necessary for graceful shutdown.
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|eventHandler
operator|!=
literal|null
condition|)
block|{
name|eventHandler
operator|.
name|processContext
argument_list|(
name|connectionContext
argument_list|,
name|inputTransport
argument_list|,
name|outputTransport
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stopped_
operator|||
operator|!
name|processor
operator|.
name|process
argument_list|(
name|inputProtocol
argument_list|,
name|outputProtocol
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|TSaslTransportException
name|ttx
parameter_list|)
block|{
comment|// Something thats not SASL was in the stream, continue silently
block|}
catch|catch
parameter_list|(
name|TTransportException
name|ttx
parameter_list|)
block|{
comment|// Assume the client died and continue silently
block|}
catch|catch
parameter_list|(
name|TException
name|tx
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Thrift error occurred during processing of message."
argument_list|,
name|tx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|x
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error occurred during processing of message."
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|eventHandler
operator|!=
literal|null
condition|)
block|{
name|eventHandler
operator|.
name|deleteContext
argument_list|(
name|connectionContext
argument_list|,
name|inputProtocol
argument_list|,
name|outputProtocol
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputTransport
operator|!=
literal|null
condition|)
block|{
name|inputTransport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|outputTransport
operator|!=
literal|null
condition|)
block|{
name|outputTransport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|client
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

