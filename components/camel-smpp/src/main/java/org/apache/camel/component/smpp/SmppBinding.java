begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.smpp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|smpp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|AlertNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|DataSm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|DeliverSm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|DeliveryReceipt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|SubmitSm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|util
operator|.
name|AbsoluteTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|util
operator|.
name|TimeFormatter
import|;
end_import

begin_comment
comment|/**  * A Strategy used to convert between a Camel {@link Exchange} and  * {@link SmppMessage} to and from a SMPP {@link Command}  *   * @version $Revision$  * @author muellerc  */
end_comment

begin_class
DECL|class|SmppBinding
specifier|public
class|class
name|SmppBinding
block|{
DECL|field|SEQUENCE_NUMBER
specifier|public
specifier|static
specifier|final
name|String
name|SEQUENCE_NUMBER
init|=
literal|"CamelSmppSequenceNumber"
decl_stmt|;
DECL|field|SUBMITTED
specifier|public
specifier|static
specifier|final
name|String
name|SUBMITTED
init|=
literal|"CamelSmppSubmitted"
decl_stmt|;
DECL|field|SUBMIT_DATE
specifier|public
specifier|static
specifier|final
name|String
name|SUBMIT_DATE
init|=
literal|"CamelSmppSubmitDate"
decl_stmt|;
DECL|field|ERROR
specifier|public
specifier|static
specifier|final
name|String
name|ERROR
init|=
literal|"CamelSmppError"
decl_stmt|;
DECL|field|DONE_DATE
specifier|public
specifier|static
specifier|final
name|String
name|DONE_DATE
init|=
literal|"CamelSmppDoneDate"
decl_stmt|;
DECL|field|DELIVERED
specifier|public
specifier|static
specifier|final
name|String
name|DELIVERED
init|=
literal|"CamelSmppDelivered"
decl_stmt|;
DECL|field|COMMAND_ID
specifier|public
specifier|static
specifier|final
name|String
name|COMMAND_ID
init|=
literal|"CamelSmppCommandId"
decl_stmt|;
DECL|field|COMMAND_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|COMMAND_STATUS
init|=
literal|"CamelSmppCommandStatus"
decl_stmt|;
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"CamelSmppId"
decl_stmt|;
DECL|field|REPLACE_IF_PRESENT_FLAG
specifier|public
specifier|static
specifier|final
name|String
name|REPLACE_IF_PRESENT_FLAG
init|=
literal|"CamelSmppReplaceIfPresentFlag"
decl_stmt|;
DECL|field|VALIDITY_PERIOD
specifier|public
specifier|static
specifier|final
name|String
name|VALIDITY_PERIOD
init|=
literal|"CamelSmppValidityPeriod"
decl_stmt|;
DECL|field|SCHEDULE_DELIVERY_TIME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEDULE_DELIVERY_TIME
init|=
literal|"CamelSmppScheduleDeliveryTime"
decl_stmt|;
DECL|field|PRIORITY_FLAG
specifier|public
specifier|static
specifier|final
name|String
name|PRIORITY_FLAG
init|=
literal|"CamelSmppPriorityFlag"
decl_stmt|;
DECL|field|PROTOCOL_ID
specifier|public
specifier|static
specifier|final
name|String
name|PROTOCOL_ID
init|=
literal|"CamelSmppProtocolId"
decl_stmt|;
DECL|field|REGISTERED_DELIVERY
specifier|public
specifier|static
specifier|final
name|String
name|REGISTERED_DELIVERY
init|=
literal|"CamelSmppRegisteredDelivery"
decl_stmt|;
DECL|field|SERVICE_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_TYPE
init|=
literal|"CamelSmppServiceType"
decl_stmt|;
DECL|field|SOURCE_ADDR_NPI
specifier|public
specifier|static
specifier|final
name|String
name|SOURCE_ADDR_NPI
init|=
literal|"CamelSmppSourceAddrNpi"
decl_stmt|;
DECL|field|SOURCE_ADDR_TON
specifier|public
specifier|static
specifier|final
name|String
name|SOURCE_ADDR_TON
init|=
literal|"CamelSmppSourceAddrTon"
decl_stmt|;
DECL|field|SOURCE_ADDR
specifier|public
specifier|static
specifier|final
name|String
name|SOURCE_ADDR
init|=
literal|"CamelSmppSourceAddr"
decl_stmt|;
DECL|field|DEST_ADDR_NPI
specifier|public
specifier|static
specifier|final
name|String
name|DEST_ADDR_NPI
init|=
literal|"CamelSmppDestAddrNpi"
decl_stmt|;
DECL|field|DEST_ADDR_TON
specifier|public
specifier|static
specifier|final
name|String
name|DEST_ADDR_TON
init|=
literal|"CamelSmppDestAddrTon"
decl_stmt|;
DECL|field|DEST_ADDR
specifier|public
specifier|static
specifier|final
name|String
name|DEST_ADDR
init|=
literal|"CamelSmppDestAddr"
decl_stmt|;
DECL|field|ESME_ADDR_NPI
specifier|public
specifier|static
specifier|final
name|String
name|ESME_ADDR_NPI
init|=
literal|"CamelSmppEsmeAddrNpi"
decl_stmt|;
DECL|field|ESME_ADDR_TON
specifier|public
specifier|static
specifier|final
name|String
name|ESME_ADDR_TON
init|=
literal|"CamelSmppEsmeAddrTon"
decl_stmt|;
DECL|field|ESME_ADDR
specifier|public
specifier|static
specifier|final
name|String
name|ESME_ADDR
init|=
literal|"CamelSmppEsmeAddr"
decl_stmt|;
DECL|field|FINAL_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|FINAL_STATUS
init|=
literal|"CamelSmppStatus"
decl_stmt|;
DECL|field|DATA_CODING
specifier|public
specifier|static
specifier|final
name|String
name|DATA_CODING
init|=
literal|"CamelSmppDataCoding"
decl_stmt|;
DECL|field|timeFormatter
specifier|private
specifier|static
name|TimeFormatter
name|timeFormatter
init|=
operator|new
name|AbsoluteTimeFormatter
argument_list|()
decl_stmt|;
DECL|field|configuration
specifier|private
name|SmppConfiguration
name|configuration
decl_stmt|;
DECL|method|SmppBinding ()
specifier|public
name|SmppBinding
parameter_list|()
block|{
name|this
operator|.
name|configuration
operator|=
operator|new
name|SmppConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|SmppBinding (SmppConfiguration configuration)
specifier|public
name|SmppBinding
parameter_list|(
name|SmppConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
comment|/**      * Create the SubmitSm object from the inbound exchange      *       * @throws UnsupportedEncodingException if the encoding is not supported      */
DECL|method|createSubmitSm (Exchange exchange)
specifier|public
name|SubmitSm
name|createSubmitSm
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|SubmitSm
name|submitSm
init|=
operator|new
name|SubmitSm
argument_list|()
decl_stmt|;
name|submitSm
operator|.
name|setShortMessage
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getBytes
argument_list|(
name|configuration
operator|.
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|DEST_ADDR
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setDestAddress
argument_list|(
operator|(
name|String
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|DEST_ADDR
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setDestAddress
argument_list|(
name|configuration
operator|.
name|getDestAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|DEST_ADDR_TON
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setDestAddrTon
argument_list|(
operator|(
name|Byte
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|DEST_ADDR_TON
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setDestAddrTon
argument_list|(
name|configuration
operator|.
name|getDestAddrTon
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|DEST_ADDR_NPI
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setDestAddrNpi
argument_list|(
operator|(
name|Byte
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|DEST_ADDR_NPI
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setDestAddrNpi
argument_list|(
name|configuration
operator|.
name|getDestAddrNpi
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|SOURCE_ADDR
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setSourceAddr
argument_list|(
operator|(
name|String
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|SOURCE_ADDR
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setSourceAddr
argument_list|(
name|configuration
operator|.
name|getSourceAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|SOURCE_ADDR_TON
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setSourceAddrTon
argument_list|(
operator|(
name|Byte
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|SOURCE_ADDR_TON
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setSourceAddrTon
argument_list|(
name|configuration
operator|.
name|getSourceAddrTon
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|SOURCE_ADDR_NPI
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setSourceAddrNpi
argument_list|(
operator|(
name|Byte
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|SOURCE_ADDR_NPI
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setSourceAddrNpi
argument_list|(
name|configuration
operator|.
name|getDestAddrNpi
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|SERVICE_TYPE
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setServiceType
argument_list|(
operator|(
name|String
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|SERVICE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setServiceType
argument_list|(
name|configuration
operator|.
name|getServiceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|REGISTERED_DELIVERY
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setRegisteredDelivery
argument_list|(
operator|(
name|Byte
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|REGISTERED_DELIVERY
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setRegisteredDelivery
argument_list|(
name|configuration
operator|.
name|getRegisteredDelivery
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|PROTOCOL_ID
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setProtocolId
argument_list|(
operator|(
name|Byte
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|PROTOCOL_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setProtocolId
argument_list|(
name|configuration
operator|.
name|getProtocolId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|PRIORITY_FLAG
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setPriorityFlag
argument_list|(
operator|(
name|Byte
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|PRIORITY_FLAG
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setPriorityFlag
argument_list|(
name|configuration
operator|.
name|getPriorityFlag
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|SCHEDULE_DELIVERY_TIME
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setScheduleDeliveryTime
argument_list|(
name|timeFormatter
operator|.
name|format
argument_list|(
operator|(
name|Date
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|SCHEDULE_DELIVERY_TIME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|VALIDITY_PERIOD
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setValidityPeriod
argument_list|(
name|timeFormatter
operator|.
name|format
argument_list|(
operator|(
name|Date
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|VALIDITY_PERIOD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|REPLACE_IF_PRESENT_FLAG
argument_list|)
condition|)
block|{
name|submitSm
operator|.
name|setReplaceIfPresent
argument_list|(
operator|(
name|Byte
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|REPLACE_IF_PRESENT_FLAG
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submitSm
operator|.
name|setReplaceIfPresent
argument_list|(
name|configuration
operator|.
name|getReplaceIfPresentFlag
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|DATA_CODING
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|submitSm
operator|.
name|setDataCoding
argument_list|(
operator|(
name|Byte
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|DATA_CODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|submitSm
operator|.
name|setDataCoding
argument_list|(
name|configuration
operator|.
name|getDataCoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|submitSm
return|;
block|}
comment|/**      * Create a new SmppMessage from the inbound alert notification      */
DECL|method|createSmppMessage (AlertNotification alertNotification)
specifier|public
name|SmppMessage
name|createSmppMessage
parameter_list|(
name|AlertNotification
name|alertNotification
parameter_list|)
block|{
name|SmppMessage
name|smppMessage
init|=
operator|new
name|SmppMessage
argument_list|(
name|alertNotification
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SEQUENCE_NUMBER
argument_list|,
name|alertNotification
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|COMMAND_ID
argument_list|,
name|alertNotification
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|COMMAND_STATUS
argument_list|,
name|alertNotification
operator|.
name|getCommandStatus
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SOURCE_ADDR
argument_list|,
name|alertNotification
operator|.
name|getSourceAddr
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SOURCE_ADDR_NPI
argument_list|,
name|alertNotification
operator|.
name|getSourceAddrNpi
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SOURCE_ADDR_TON
argument_list|,
name|alertNotification
operator|.
name|getSourceAddrTon
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|ESME_ADDR
argument_list|,
name|alertNotification
operator|.
name|getEsmeAddr
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|ESME_ADDR_NPI
argument_list|,
name|alertNotification
operator|.
name|getEsmeAddrNpi
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|ESME_ADDR_TON
argument_list|,
name|alertNotification
operator|.
name|getEsmeAddrTon
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|smppMessage
return|;
block|}
comment|/**      * Create a new SmppMessage from the inbound deliver sm or deliver receipt      */
DECL|method|createSmppMessage (DeliverSm deliverSm)
specifier|public
name|SmppMessage
name|createSmppMessage
parameter_list|(
name|DeliverSm
name|deliverSm
parameter_list|)
throws|throws
name|Exception
block|{
name|SmppMessage
name|smppMessage
init|=
operator|new
name|SmppMessage
argument_list|(
name|deliverSm
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|deliverSm
operator|.
name|isSmscDeliveryReceipt
argument_list|()
condition|)
block|{
name|DeliveryReceipt
name|smscDeliveryReceipt
init|=
name|deliverSm
operator|.
name|getShortMessageAsDeliveryReceipt
argument_list|()
decl_stmt|;
name|smppMessage
operator|.
name|setBody
argument_list|(
name|smscDeliveryReceipt
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|ID
argument_list|,
name|smscDeliveryReceipt
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|DELIVERED
argument_list|,
name|smscDeliveryReceipt
operator|.
name|getDelivered
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|DONE_DATE
argument_list|,
name|smscDeliveryReceipt
operator|.
name|getDoneDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"000"
operator|.
name|equals
argument_list|(
name|smscDeliveryReceipt
operator|.
name|getError
argument_list|()
argument_list|)
condition|)
block|{
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|ERROR
argument_list|,
name|smscDeliveryReceipt
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SUBMIT_DATE
argument_list|,
name|smscDeliveryReceipt
operator|.
name|getSubmitDate
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SUBMITTED
argument_list|,
name|smscDeliveryReceipt
operator|.
name|getSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|FINAL_STATUS
argument_list|,
name|smscDeliveryReceipt
operator|.
name|getFinalStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|smppMessage
operator|.
name|setBody
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|deliverSm
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|configuration
operator|.
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SEQUENCE_NUMBER
argument_list|,
name|deliverSm
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|COMMAND_ID
argument_list|,
name|deliverSm
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SOURCE_ADDR
argument_list|,
name|deliverSm
operator|.
name|getSourceAddr
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|DEST_ADDR
argument_list|,
name|deliverSm
operator|.
name|getDestAddress
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SCHEDULE_DELIVERY_TIME
argument_list|,
name|deliverSm
operator|.
name|getScheduleDeliveryTime
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|VALIDITY_PERIOD
argument_list|,
name|deliverSm
operator|.
name|getValidityPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SERVICE_TYPE
argument_list|,
name|deliverSm
operator|.
name|getServiceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|smppMessage
return|;
block|}
DECL|method|createSmppMessage (DataSm dataSm, String smppMessageId)
specifier|public
name|SmppMessage
name|createSmppMessage
parameter_list|(
name|DataSm
name|dataSm
parameter_list|,
name|String
name|smppMessageId
parameter_list|)
block|{
name|SmppMessage
name|smppMessage
init|=
operator|new
name|SmppMessage
argument_list|(
name|dataSm
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|ID
argument_list|,
name|smppMessageId
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SEQUENCE_NUMBER
argument_list|,
name|dataSm
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|COMMAND_ID
argument_list|,
name|dataSm
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|COMMAND_STATUS
argument_list|,
name|dataSm
operator|.
name|getCommandStatus
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SOURCE_ADDR
argument_list|,
name|dataSm
operator|.
name|getSourceAddr
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SOURCE_ADDR_NPI
argument_list|,
name|dataSm
operator|.
name|getSourceAddrNpi
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SOURCE_ADDR_TON
argument_list|,
name|dataSm
operator|.
name|getSourceAddrTon
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|DEST_ADDR
argument_list|,
name|dataSm
operator|.
name|getDestAddress
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|DEST_ADDR_NPI
argument_list|,
name|dataSm
operator|.
name|getDestAddrNpi
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|DEST_ADDR_TON
argument_list|,
name|dataSm
operator|.
name|getDestAddrTon
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|SERVICE_TYPE
argument_list|,
name|dataSm
operator|.
name|getServiceType
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|REGISTERED_DELIVERY
argument_list|,
name|dataSm
operator|.
name|getRegisteredDelivery
argument_list|()
argument_list|)
expr_stmt|;
name|smppMessage
operator|.
name|setHeader
argument_list|(
name|DATA_CODING
argument_list|,
name|dataSm
operator|.
name|getDataCoding
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|smppMessage
return|;
block|}
comment|/**      * Returns the current date. Externalized for better test support.      *       * @return the current date      */
DECL|method|getCurrentDate ()
name|Date
name|getCurrentDate
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|()
return|;
block|}
comment|/**      * Returns the smpp configuration      *       * @return the configuration      */
DECL|method|getConfiguration ()
specifier|public
name|SmppConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/**      * Set the smpp configuration.      *       * @param configuration smppConfiguration      */
DECL|method|setConfiguration (SmppConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|SmppConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
block|}
end_class

end_unit

