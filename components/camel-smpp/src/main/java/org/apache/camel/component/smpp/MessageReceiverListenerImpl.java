begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.smpp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|smpp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|AlertNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|DataSm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|DeliverSm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|extra
operator|.
name|ProcessRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|session
operator|.
name|DataSmResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|session
operator|.
name|MessageReceiverListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|util
operator|.
name|MessageIDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|util
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|util
operator|.
name|RandomMessageIDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|MessageReceiverListenerImpl
specifier|public
class|class
name|MessageReceiverListenerImpl
implements|implements
name|MessageReceiverListener
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MessageReceiverListenerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|messageIDGenerator
specifier|private
name|MessageIDGenerator
name|messageIDGenerator
init|=
operator|new
name|RandomMessageIDGenerator
argument_list|()
decl_stmt|;
DECL|field|endpoint
specifier|private
name|SmppEndpoint
name|endpoint
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
decl_stmt|;
DECL|field|exceptionHandler
specifier|private
name|ExceptionHandler
name|exceptionHandler
decl_stmt|;
DECL|method|MessageReceiverListenerImpl (SmppEndpoint endpoint, Processor processor, ExceptionHandler exceptionHandler)
specifier|public
name|MessageReceiverListenerImpl
parameter_list|(
name|SmppEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|exceptionHandler
operator|=
name|exceptionHandler
expr_stmt|;
block|}
DECL|method|onAcceptAlertNotification (AlertNotification alertNotification)
specifier|public
name|void
name|onAcceptAlertNotification
parameter_list|(
name|AlertNotification
name|alertNotification
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received an alertNotification {}"
argument_list|,
name|alertNotification
argument_list|)
expr_stmt|;
try|try
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnAcceptAlertNotificationExchange
argument_list|(
name|alertNotification
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing the new smpp exchange..."
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processed the new smpp exchange"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionHandler
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onAcceptDeliverSm (DeliverSm deliverSm)
specifier|public
name|void
name|onAcceptDeliverSm
parameter_list|(
name|DeliverSm
name|deliverSm
parameter_list|)
throws|throws
name|ProcessRequestException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received a deliverSm {}"
argument_list|,
name|deliverSm
argument_list|)
expr_stmt|;
try|try
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnAcceptDeliverSmExchange
argument_list|(
name|deliverSm
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"processing the new smpp exchange..."
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"processed the new smpp exchange"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionHandler
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ProcessRequestException
condition|)
block|{
throw|throw
operator|(
name|ProcessRequestException
operator|)
name|e
throw|;
block|}
block|}
block|}
DECL|method|onAcceptDataSm (DataSm dataSm, Session session)
specifier|public
name|DataSmResult
name|onAcceptDataSm
parameter_list|(
name|DataSm
name|dataSm
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|ProcessRequestException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received a dataSm {}"
argument_list|,
name|dataSm
argument_list|)
expr_stmt|;
name|MessageId
name|newMessageId
init|=
name|messageIDGenerator
operator|.
name|newMessageId
argument_list|()
decl_stmt|;
try|try
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnAcceptDataSm
argument_list|(
name|dataSm
argument_list|,
name|newMessageId
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"processing the new smpp exchange..."
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"processed the new smpp exchange"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionHandler
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ProcessRequestException
condition|)
block|{
throw|throw
operator|(
name|ProcessRequestException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|ProcessRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|255
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|DataSmResult
argument_list|(
name|newMessageId
argument_list|,
name|dataSm
operator|.
name|getOptionalParametes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setMessageIDGenerator (MessageIDGenerator messageIDGenerator)
specifier|public
name|void
name|setMessageIDGenerator
parameter_list|(
name|MessageIDGenerator
name|messageIDGenerator
parameter_list|)
block|{
name|this
operator|.
name|messageIDGenerator
operator|=
name|messageIDGenerator
expr_stmt|;
block|}
block|}
end_class

end_unit

