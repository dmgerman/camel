begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.smpp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|smpp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
operator|.
name|OctetString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|session
operator|.
name|SMPPSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AbstractSmppCommand
specifier|public
specifier|abstract
class|class
name|AbstractSmppCommand
implements|implements
name|SmppCommand
block|{
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|session
specifier|protected
name|SMPPSession
name|session
decl_stmt|;
DECL|field|config
specifier|protected
name|SmppConfiguration
name|config
decl_stmt|;
DECL|method|AbstractSmppCommand (SMPPSession session, SmppConfiguration config)
specifier|public
name|AbstractSmppCommand
parameter_list|(
name|SMPPSession
name|session
parameter_list|,
name|SmppConfiguration
name|config
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|getResponseMessage (Exchange exchange)
specifier|protected
name|Message
name|getResponseMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Message
name|message
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
condition|)
block|{
name|message
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
DECL|method|createOptionalParametersByCode (Map<Short, Object> optinalParamaters)
specifier|protected
name|List
argument_list|<
name|OptionalParameter
argument_list|>
name|createOptionalParametersByCode
parameter_list|(
name|Map
argument_list|<
name|Short
argument_list|,
name|Object
argument_list|>
name|optinalParamaters
parameter_list|)
block|{
name|List
argument_list|<
name|OptionalParameter
argument_list|>
name|optParams
init|=
operator|new
name|ArrayList
argument_list|<
name|OptionalParameter
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Short
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|optinalParamaters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|OptionalParameter
name|optParam
init|=
literal|null
decl_stmt|;
name|Short
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|optParam
operator|=
operator|new
name|OptionalParameter
operator|.
name|Null
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|optParam
operator|=
operator|new
name|OptionalParameter
operator|.
name|OctetString
argument_list|(
name|key
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|optParam
operator|=
operator|new
name|OptionalParameter
operator|.
name|COctetString
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
name|optParam
operator|=
operator|new
name|OptionalParameter
operator|.
name|Byte
argument_list|(
name|key
argument_list|,
operator|(
name|Byte
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|optParam
operator|=
operator|new
name|OptionalParameter
operator|.
name|Int
argument_list|(
name|key
argument_list|,
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
name|optParam
operator|=
operator|new
name|OptionalParameter
operator|.
name|Short
argument_list|(
name|key
argument_list|,
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Couldn't determine optional parameter for value {} (type: {}). Skip this one."
argument_list|,
name|value
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|optParams
operator|.
name|add
argument_list|(
name|optParam
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Couldn't determine optional parameter for key {} and value {}. Skip this one."
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|optParams
return|;
block|}
comment|/**      * @deprecated will be removed in Camel 2.13.0/3.0.0 - use createOptionalParametersByCode instead      * @param optinalParamaters      * @return      */
annotation|@
name|Deprecated
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|createOptionalParametersByName (Map<String, String> optinalParamaters)
specifier|protected
name|List
argument_list|<
name|OptionalParameter
argument_list|>
name|createOptionalParametersByName
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|optinalParamaters
parameter_list|)
block|{
name|List
argument_list|<
name|OptionalParameter
argument_list|>
name|optParams
init|=
operator|new
name|ArrayList
argument_list|<
name|OptionalParameter
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|optinalParamaters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|OptionalParameter
name|optParam
init|=
literal|null
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
name|Tag
name|tag
init|=
name|Tag
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Class
name|type
init|=
name|determineTypeClass
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|>
name|ancestorClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Class
name|superclass
init|=
name|type
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
name|ancestorClasses
operator|.
name|add
argument_list|(
name|superclass
argument_list|)
expr_stmt|;
if|if
condition|(
name|superclass
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
name|ancestorClasses
operator|.
name|add
argument_list|(
name|superclass
operator|.
name|getSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ancestorClasses
operator|.
name|contains
argument_list|(
name|OctetString
operator|.
name|class
argument_list|)
condition|)
block|{
name|optParam
operator|=
operator|(
name|OptionalParameter
operator|)
name|type
operator|.
name|getConstructor
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ancestorClasses
operator|.
name|contains
argument_list|(
name|OptionalParameter
operator|.
name|Byte
operator|.
name|class
argument_list|)
condition|)
block|{
name|Byte
name|byteValue
init|=
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|Byte
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// required because jsmpp 2.1.1 interpreted null as 0
name|optParam
operator|=
operator|(
name|OptionalParameter
operator|)
name|type
operator|.
name|getConstructor
argument_list|(
name|byte
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|byteValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ancestorClasses
operator|.
name|contains
argument_list|(
name|OptionalParameter
operator|.
name|Int
operator|.
name|class
argument_list|)
condition|)
block|{
name|Integer
name|intValue
init|=
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// required because jsmpp 2.1.1 interpreted null as 0
name|optParam
operator|=
operator|(
name|OptionalParameter
operator|)
name|type
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|intValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ancestorClasses
operator|.
name|contains
argument_list|(
name|OptionalParameter
operator|.
name|Short
operator|.
name|class
argument_list|)
condition|)
block|{
name|Short
name|shortValue
init|=
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|Short
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// required because jsmpp 2.1.1 interpreted null as 0
name|optParam
operator|=
operator|(
name|OptionalParameter
operator|)
name|type
operator|.
name|getConstructor
argument_list|(
name|short
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|shortValue
argument_list|)
expr_stmt|;
block|}
name|optParams
operator|.
name|add
argument_list|(
name|optParam
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Couldn't determine optional parameter for key {} and value {}. Skip this one."
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|optParams
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|determineTypeClass (Tag tag)
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|OptionalParameter
argument_list|>
name|determineTypeClass
parameter_list|(
name|Tag
name|tag
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
comment|// we have to use reflection because the type field is private
name|Field
name|f
init|=
name|tag
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|OptionalParameter
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|tag
argument_list|)
return|;
block|}
block|}
end_class

end_unit

