begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.smpp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|smpp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|session
operator|.
name|SessionStateListener
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|SmppComponent
specifier|public
class|class
name|SmppComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|configuration
specifier|private
name|SmppConfiguration
name|configuration
decl_stmt|;
DECL|method|SmppComponent ()
specifier|public
name|SmppComponent
parameter_list|()
block|{
name|super
argument_list|(
name|SmppEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|SmppComponent (SmppConfiguration configuration)
specifier|public
name|SmppComponent
parameter_list|(
name|SmppConfiguration
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|SmppComponent (CamelContext context)
specifier|public
name|SmppComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|SmppEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|configuration
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|configuration
operator|=
operator|new
name|SmppConfiguration
argument_list|()
expr_stmt|;
block|}
comment|// create a copy of the configuration as other endpoints can adjust their copy as well
name|SmppConfiguration
name|config
init|=
name|this
operator|.
name|configuration
operator|.
name|copy
argument_list|()
decl_stmt|;
name|config
operator|.
name|configureFromURI
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO Camel 3.0 cmueller: We should change the default in Camel 3.0 to '' so that we can remove this special handling
comment|// special handling to set the system type to an empty string
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
literal|"systemType"
argument_list|)
operator|&&
name|parameters
operator|.
name|get
argument_list|(
literal|"systemType"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setSystemType
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|remove
argument_list|(
literal|"systemType"
argument_list|)
expr_stmt|;
block|}
comment|// special handling to set the service type to an empty string
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
literal|"serviceType"
argument_list|)
operator|&&
name|parameters
operator|.
name|get
argument_list|(
literal|"serviceType"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setServiceType
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|remove
argument_list|(
literal|"serviceType"
argument_list|)
expr_stmt|;
block|}
name|setProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|createEndpoint
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      * Create a new smpp endpoint with the provided smpp configuration      */
DECL|method|createEndpoint (SmppConfiguration config)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|SmppConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createEndpoint
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      * Create a new smpp endpoint with the provided uri and smpp configuration      */
DECL|method|createEndpoint (String uri, SmppConfiguration config)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|SmppConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|SmppEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|SmppConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/**      * To use the shared SmppConfiguration as configuration. Properties of the shared configuration can also be set individually.      */
DECL|method|setConfiguration (SmppConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|SmppConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getConfigurationOrCreate ()
specifier|private
name|SmppConfiguration
name|getConfigurationOrCreate
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setConfiguration
argument_list|(
operator|new
name|SmppConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHost
argument_list|()
return|;
block|}
comment|/**      * Hostname for the SMSC server to use.      * @param host      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|Integer
name|getPort
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**      * Port number for the SMSC server to use.      * @param port      */
DECL|method|setPort (Integer port)
specifier|public
name|void
name|setPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
DECL|method|getSystemId ()
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSystemId
argument_list|()
return|;
block|}
comment|/**      * The system id (username) for connecting to SMSC server.      * @param systemId      */
DECL|method|setSystemId (String systemId)
specifier|public
name|void
name|setSystemId
parameter_list|(
name|String
name|systemId
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSystemId
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
block|}
comment|/**      * The password for connecting to SMSC server.      */
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getPassword
argument_list|()
return|;
block|}
DECL|method|getDataCoding ()
specifier|public
name|byte
name|getDataCoding
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getDataCoding
argument_list|()
return|;
block|}
comment|/**      * Defines the data coding according the SMPP 3.4 specification, section 5.2.19.      * Example data encodings are:      *<ul>      *<li>0: SMSC Default Alphabet</li>      *<li>3: Latin 1 (ISO-8859-1)</li>      *<li>4: Octet unspecified (8-bit binary)</li>      *<li>8: UCS2 (ISO/IEC-10646)</li>      *<li>13: Extended Kanji JIS(X 0212-1990)</li>      *</ul>      * @param dataCoding      */
DECL|method|setDataCoding (byte dataCoding)
specifier|public
name|void
name|setDataCoding
parameter_list|(
name|byte
name|dataCoding
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setDataCoding
argument_list|(
name|dataCoding
argument_list|)
expr_stmt|;
block|}
DECL|method|getAlphabet ()
specifier|public
name|byte
name|getAlphabet
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getAlphabet
argument_list|()
return|;
block|}
comment|/**      * Defines encoding of data according the SMPP 3.4 specification, section 5.2.19.      *<ul>      *<li>0: SMSC Default Alphabet      *<li>4: 8 bit Alphabet</li>      *<li>8: UCS2 Alphabet</li></li>      *</ul>      * @param alphabet      */
DECL|method|setAlphabet (byte alphabet)
specifier|public
name|void
name|setAlphabet
parameter_list|(
name|byte
name|alphabet
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setAlphabet
argument_list|(
name|alphabet
argument_list|)
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getEncoding
argument_list|()
return|;
block|}
comment|/**      * Defines the encoding scheme of the short message user data.      * Only for SubmitSm, ReplaceSm and SubmitMulti.      * @param encoding      */
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
DECL|method|getEnquireLinkTimer ()
specifier|public
name|Integer
name|getEnquireLinkTimer
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getEnquireLinkTimer
argument_list|()
return|;
block|}
comment|/**      * Defines the interval in milliseconds between the confidence checks.      * The confidence check is used to test the communication path between an ESME and an SMSC.      * @param enquireLinkTimer      */
DECL|method|setEnquireLinkTimer (Integer enquireLinkTimer)
specifier|public
name|void
name|setEnquireLinkTimer
parameter_list|(
name|Integer
name|enquireLinkTimer
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setEnquireLinkTimer
argument_list|(
name|enquireLinkTimer
argument_list|)
expr_stmt|;
block|}
DECL|method|getTransactionTimer ()
specifier|public
name|Integer
name|getTransactionTimer
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getTransactionTimer
argument_list|()
return|;
block|}
comment|/**      * Defines the maximum period of inactivity allowed after a transaction, after which      * an SMPP entity may assume that the session is no longer active.      * This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).      * @param transactionTimer      */
DECL|method|setTransactionTimer (Integer transactionTimer)
specifier|public
name|void
name|setTransactionTimer
parameter_list|(
name|Integer
name|transactionTimer
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setTransactionTimer
argument_list|(
name|transactionTimer
argument_list|)
expr_stmt|;
block|}
DECL|method|getSystemType ()
specifier|public
name|String
name|getSystemType
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSystemType
argument_list|()
return|;
block|}
comment|/**      * This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).      * @param systemType      */
DECL|method|setSystemType (String systemType)
specifier|public
name|void
name|setSystemType
parameter_list|(
name|String
name|systemType
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSystemType
argument_list|(
name|systemType
argument_list|)
expr_stmt|;
block|}
DECL|method|getRegisteredDelivery ()
specifier|public
name|byte
name|getRegisteredDelivery
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getRegisteredDelivery
argument_list|()
return|;
block|}
comment|/**      * Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:      *<ul>      *<li>0: No SMSC delivery receipt requested.</li>      *<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>      *<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>      *</ul>      * @param registeredDelivery      */
DECL|method|setRegisteredDelivery (byte registeredDelivery)
specifier|public
name|void
name|setRegisteredDelivery
parameter_list|(
name|byte
name|registeredDelivery
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setRegisteredDelivery
argument_list|(
name|registeredDelivery
argument_list|)
expr_stmt|;
block|}
DECL|method|getServiceType ()
specifier|public
name|String
name|getServiceType
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getServiceType
argument_list|()
return|;
block|}
comment|/**      * The service type parameter can be used to indicate the SMS Application service associated with the message.      * The following generic service_types are defined:      *<ul>      *<li>CMT: Cellular Messaging</li>      *<li>CPT: Cellular Paging</li>      *<li>VMN: Voice Mail Notification</li>      *<li>VMA: Voice Mail Alerting</li>      *<li>WAP: Wireless Application Protocol</li>      *<li>USSD: Unstructured Supplementary Services Data</li>      *</ul>      * @param serviceType      */
DECL|method|setServiceType (String serviceType)
specifier|public
name|void
name|setServiceType
parameter_list|(
name|String
name|serviceType
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setServiceType
argument_list|(
name|serviceType
argument_list|)
expr_stmt|;
block|}
DECL|method|getSourceAddrTon ()
specifier|public
name|byte
name|getSourceAddrTon
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSourceAddrTon
argument_list|()
return|;
block|}
comment|/**      * Defines the type of number (TON) to be used in the SME originator address parameters.      * The following TON values are defined:      *<ul>      *<li>0: Unknown</li>      *<li>1: International</li>      *<li>2: National</li>      *<li>3: Network Specific</li>      *<li>4: Subscriber Number</li>      *<li>5: Alphanumeric</li>      *<li>6: Abbreviated</li>      *</ul>      * @param sourceAddrTon      */
DECL|method|setSourceAddrTon (byte sourceAddrTon)
specifier|public
name|void
name|setSourceAddrTon
parameter_list|(
name|byte
name|sourceAddrTon
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSourceAddrTon
argument_list|(
name|sourceAddrTon
argument_list|)
expr_stmt|;
block|}
DECL|method|getDestAddrTon ()
specifier|public
name|byte
name|getDestAddrTon
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getDestAddrTon
argument_list|()
return|;
block|}
comment|/**      * Defines the type of number (TON) to be used in the SME destination address parameters.      * Only for SubmitSm, SubmitMulti, CancelSm and DataSm.      * The following TON values are defined:      *<ul>      *<li>0: Unknown</li>      *<li>1: International</li>      *<li>2: National</li>      *<li>3: Network Specific</li>      *<li>4: Subscriber Number</li>      *<li>5: Alphanumeric</li>      *<li>6: Abbreviated</li>      *</ul>      * @param destAddrTon      */
DECL|method|setDestAddrTon (byte destAddrTon)
specifier|public
name|void
name|setDestAddrTon
parameter_list|(
name|byte
name|destAddrTon
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setDestAddrTon
argument_list|(
name|destAddrTon
argument_list|)
expr_stmt|;
block|}
DECL|method|getSourceAddrNpi ()
specifier|public
name|byte
name|getSourceAddrNpi
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSourceAddrNpi
argument_list|()
return|;
block|}
comment|/**      * Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters.      * The following NPI values are defined:      *<ul>      *<li>0: Unknown</li>      *<li>1: ISDN (E163/E164)</li>      *<li>2: Data (X.121)</li>      *<li>3: Telex (F.69)</li>      *<li>6: Land Mobile (E.212)</li>      *<li>8: National</li>      *<li>9: Private</li>      *<li>10: ERMES</li>      *<li>13: Internet (IP)</li>      *<li>18: WAP Client Id (to be defined by WAP Forum)</li>      *</ul>      * @param sourceAddrNpi      */
DECL|method|setSourceAddrNpi (byte sourceAddrNpi)
specifier|public
name|void
name|setSourceAddrNpi
parameter_list|(
name|byte
name|sourceAddrNpi
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSourceAddrNpi
argument_list|(
name|sourceAddrNpi
argument_list|)
expr_stmt|;
block|}
DECL|method|getDestAddrNpi ()
specifier|public
name|byte
name|getDestAddrNpi
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getDestAddrNpi
argument_list|()
return|;
block|}
comment|/**      * Defines the type of number (TON) to be used in the SME destination address parameters.      * Only for SubmitSm, SubmitMulti, CancelSm and DataSm.      * The following NPI values are defined:      *<ul>      *<li>0: Unknown</li>      *<li>1: ISDN (E163/E164)</li>      *<li>2: Data (X.121)</li>      *<li>3: Telex (F.69)</li>      *<li>6: Land Mobile (E.212)</li>      *<li>8: National</li>      *<li>9: Private</li>      *<li>10: ERMES</li>      *<li>13: Internet (IP)</li>      *<li>18: WAP Client Id (to be defined by WAP Forum)</li>      *</ul>      * @param destAddrNpi      */
DECL|method|setDestAddrNpi (byte destAddrNpi)
specifier|public
name|void
name|setDestAddrNpi
parameter_list|(
name|byte
name|destAddrNpi
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setDestAddrNpi
argument_list|(
name|destAddrNpi
argument_list|)
expr_stmt|;
block|}
DECL|method|getProtocolId ()
specifier|public
name|byte
name|getProtocolId
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getProtocolId
argument_list|()
return|;
block|}
comment|/**      * The protocol id      * @param protocolId      */
DECL|method|setProtocolId (byte protocolId)
specifier|public
name|void
name|setProtocolId
parameter_list|(
name|byte
name|protocolId
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setProtocolId
argument_list|(
name|protocolId
argument_list|)
expr_stmt|;
block|}
DECL|method|getPriorityFlag ()
specifier|public
name|byte
name|getPriorityFlag
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getPriorityFlag
argument_list|()
return|;
block|}
comment|/**      * Allows the originating SME to assign a priority level to the short message.      * Only for SubmitSm and SubmitMulti.      * Four Priority Levels are supported:      *<ul>      *<li>0: Level 0 (lowest) priority</li>      *<li>1: Level 1 priority</li>      *<li>2: Level 2 priority</li>      *<li>3: Level 3 (highest) priority</li>      *</ul>      * @param priorityFlag      */
DECL|method|setPriorityFlag (byte priorityFlag)
specifier|public
name|void
name|setPriorityFlag
parameter_list|(
name|byte
name|priorityFlag
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setPriorityFlag
argument_list|(
name|priorityFlag
argument_list|)
expr_stmt|;
block|}
DECL|method|getReplaceIfPresentFlag ()
specifier|public
name|byte
name|getReplaceIfPresentFlag
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getReplaceIfPresentFlag
argument_list|()
return|;
block|}
comment|/**      * Used to request the SMSC to replace a previously submitted message, that is still pending delivery.      * The SMSC will replace an existing message provided that the source address, destination address and service      * type match the same fields in the new message.      * The following replace if present flag values are defined:      *<ul>      *<li>0: Don't replace</li>      *<li>1: Replace</li>      *</ul>      * @param replaceIfPresentFlag      */
DECL|method|setReplaceIfPresentFlag (byte replaceIfPresentFlag)
specifier|public
name|void
name|setReplaceIfPresentFlag
parameter_list|(
name|byte
name|replaceIfPresentFlag
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setReplaceIfPresentFlag
argument_list|(
name|replaceIfPresentFlag
argument_list|)
expr_stmt|;
block|}
DECL|method|getSourceAddr ()
specifier|public
name|String
name|getSourceAddr
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSourceAddr
argument_list|()
return|;
block|}
comment|/**      * Defines the address of SME (Short Message Entity) which originated this message.      * @param sourceAddr      */
DECL|method|setSourceAddr (String sourceAddr)
specifier|public
name|void
name|setSourceAddr
parameter_list|(
name|String
name|sourceAddr
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSourceAddr
argument_list|(
name|sourceAddr
argument_list|)
expr_stmt|;
block|}
DECL|method|getDestAddr ()
specifier|public
name|String
name|getDestAddr
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getDestAddr
argument_list|()
return|;
block|}
comment|/**      * Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS.      * Only for SubmitSm, SubmitMulti, CancelSm and DataSm.      * @param destAddr      */
DECL|method|setDestAddr (String destAddr)
specifier|public
name|void
name|setDestAddr
parameter_list|(
name|String
name|destAddr
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setDestAddr
argument_list|(
name|destAddr
argument_list|)
expr_stmt|;
block|}
DECL|method|getTypeOfNumber ()
specifier|public
name|byte
name|getTypeOfNumber
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getTypeOfNumber
argument_list|()
return|;
block|}
comment|/**      * Defines the type of number (TON) to be used in the SME.      * The following TON values are defined:      *<ul>      *<li>0: Unknown</li>      *<li>1: International</li>      *<li>2: National</li>      *<li>3: Network Specific</li>      *<li>4: Subscriber Number</li>      *<li>5: Alphanumeric</li>      *<li>6: Abbreviated</li>      *</ul>      * @param typeOfNumber      */
DECL|method|setTypeOfNumber (byte typeOfNumber)
specifier|public
name|void
name|setTypeOfNumber
parameter_list|(
name|byte
name|typeOfNumber
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setTypeOfNumber
argument_list|(
name|typeOfNumber
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumberingPlanIndicator ()
specifier|public
name|byte
name|getNumberingPlanIndicator
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getNumberingPlanIndicator
argument_list|()
return|;
block|}
comment|/**      * Defines the numeric plan indicator (NPI) to be used in the SME.      * The following NPI values are defined:      *<ul>      *<li>0: Unknown</li>      *<li>1: ISDN (E163/E164)</li>      *<li>2: Data (X.121)</li>      *<li>3: Telex (F.69)</li>      *<li>6: Land Mobile (E.212)</li>      *<li>8: National</li>      *<li>9: Private</li>      *<li>10: ERMES</li>      *<li>13: Internet (IP)</li>      *<li>18: WAP Client Id (to be defined by WAP Forum)</li>      *</ul>      * @param numberingPlanIndicator      */
DECL|method|setNumberingPlanIndicator (byte numberingPlanIndicator)
specifier|public
name|void
name|setNumberingPlanIndicator
parameter_list|(
name|byte
name|numberingPlanIndicator
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setNumberingPlanIndicator
argument_list|(
name|numberingPlanIndicator
argument_list|)
expr_stmt|;
block|}
DECL|method|getUsingSSL ()
specifier|public
name|boolean
name|getUsingSSL
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getUsingSSL
argument_list|()
return|;
block|}
comment|/**      * Whether using SSL with the smpps protocol      * @param usingSSL      */
DECL|method|setUsingSSL (boolean usingSSL)
specifier|public
name|void
name|setUsingSSL
parameter_list|(
name|boolean
name|usingSSL
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setUsingSSL
argument_list|(
name|usingSSL
argument_list|)
expr_stmt|;
block|}
DECL|method|getInitialReconnectDelay ()
specifier|public
name|long
name|getInitialReconnectDelay
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getInitialReconnectDelay
argument_list|()
return|;
block|}
comment|/**      * Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.      * @param initialReconnectDelay      */
DECL|method|setInitialReconnectDelay (long initialReconnectDelay)
specifier|public
name|void
name|setInitialReconnectDelay
parameter_list|(
name|long
name|initialReconnectDelay
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setInitialReconnectDelay
argument_list|(
name|initialReconnectDelay
argument_list|)
expr_stmt|;
block|}
DECL|method|getReconnectDelay ()
specifier|public
name|long
name|getReconnectDelay
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getReconnectDelay
argument_list|()
return|;
block|}
comment|/**      * Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.      * @param reconnectDelay      */
DECL|method|setReconnectDelay (long reconnectDelay)
specifier|public
name|void
name|setReconnectDelay
parameter_list|(
name|long
name|reconnectDelay
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setReconnectDelay
argument_list|(
name|reconnectDelay
argument_list|)
expr_stmt|;
block|}
DECL|method|isLazySessionCreation ()
specifier|public
name|boolean
name|isLazySessionCreation
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|isLazySessionCreation
argument_list|()
return|;
block|}
comment|/**      * Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started.      * Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange.      * If they are present, Camel will use these data to connect to the SMSC.      * @param lazySessionCreation      */
DECL|method|setLazySessionCreation (boolean lazySessionCreation)
specifier|public
name|void
name|setLazySessionCreation
parameter_list|(
name|boolean
name|lazySessionCreation
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setLazySessionCreation
argument_list|(
name|lazySessionCreation
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpProxyHost ()
specifier|public
name|String
name|getHttpProxyHost
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHttpProxyHost
argument_list|()
return|;
block|}
comment|/**      * If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.      * @param httpProxyHost      */
DECL|method|setHttpProxyHost (String httpProxyHost)
specifier|public
name|void
name|setHttpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHttpProxyHost
argument_list|(
name|httpProxyHost
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpProxyPort ()
specifier|public
name|Integer
name|getHttpProxyPort
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHttpProxyPort
argument_list|()
return|;
block|}
comment|/**      * If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.      * @param httpProxyPort      */
DECL|method|setHttpProxyPort (Integer httpProxyPort)
specifier|public
name|void
name|setHttpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHttpProxyPort
argument_list|(
name|httpProxyPort
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpProxyUsername ()
specifier|public
name|String
name|getHttpProxyUsername
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHttpProxyUsername
argument_list|()
return|;
block|}
comment|/**      * If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.      * @param httpProxyUsername      */
DECL|method|setHttpProxyUsername (String httpProxyUsername)
specifier|public
name|void
name|setHttpProxyUsername
parameter_list|(
name|String
name|httpProxyUsername
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHttpProxyUsername
argument_list|(
name|httpProxyUsername
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpProxyPassword ()
specifier|public
name|String
name|getHttpProxyPassword
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHttpProxyPassword
argument_list|()
return|;
block|}
comment|/**      * If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.      * @param httpProxyPassword      */
DECL|method|setHttpProxyPassword (String httpProxyPassword)
specifier|public
name|void
name|setHttpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHttpProxyPassword
argument_list|(
name|httpProxyPassword
argument_list|)
expr_stmt|;
block|}
DECL|method|getSessionStateListener ()
specifier|public
name|SessionStateListener
name|getSessionStateListener
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSessionStateListener
argument_list|()
return|;
block|}
comment|/**      * You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.      * @param sessionStateListener      */
DECL|method|setSessionStateListener (SessionStateListener sessionStateListener)
specifier|public
name|void
name|setSessionStateListener
parameter_list|(
name|SessionStateListener
name|sessionStateListener
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSessionStateListener
argument_list|(
name|sessionStateListener
argument_list|)
expr_stmt|;
block|}
DECL|method|getAddressRange ()
specifier|public
name|String
name|getAddressRange
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getAddressRange
argument_list|()
return|;
block|}
comment|/**      *  You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification.      *  The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.      * @param addressRange      */
DECL|method|setAddressRange (String addressRange)
specifier|public
name|void
name|setAddressRange
parameter_list|(
name|String
name|addressRange
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setAddressRange
argument_list|(
name|addressRange
argument_list|)
expr_stmt|;
block|}
DECL|method|getSplittingPolicy ()
specifier|public
name|SmppSplittingPolicy
name|getSplittingPolicy
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getSplittingPolicy
argument_list|()
return|;
block|}
comment|/**      * You can specify a policy for handling long messages:      *<ul>      *<li>ALLOW - the default, long messages are split to 140 bytes per message</li>      *<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC.      *     Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>      *<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>      *</ul>      * @param splittingPolicy      */
DECL|method|setSplittingPolicy (SmppSplittingPolicy splittingPolicy)
specifier|public
name|void
name|setSplittingPolicy
parameter_list|(
name|SmppSplittingPolicy
name|splittingPolicy
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setSplittingPolicy
argument_list|(
name|splittingPolicy
argument_list|)
expr_stmt|;
block|}
comment|/**      * These headers will be passed to the proxy server while establishing the connection.      * @param proxyHeaders      */
DECL|method|setProxyHeaders (Map<String, String> proxyHeaders)
specifier|public
name|void
name|setProxyHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|proxyHeaders
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setProxyHeaders
argument_list|(
name|proxyHeaders
argument_list|)
expr_stmt|;
block|}
DECL|method|getProxyHeaders ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProxyHeaders
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getProxyHeaders
argument_list|()
return|;
block|}
block|}
end_class

end_unit

