begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.smpp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|smpp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
operator|.
name|COctetString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
operator|.
name|OctetString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|session
operator|.
name|SMPPSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_class
DECL|class|AbstractSmppCommandTest
specifier|public
class|class
name|AbstractSmppCommandTest
block|{
DECL|field|session
specifier|private
name|SMPPSession
name|session
init|=
operator|new
name|SMPPSession
argument_list|()
decl_stmt|;
DECL|field|config
specifier|private
name|SmppConfiguration
name|config
init|=
operator|new
name|SmppConfiguration
argument_list|()
decl_stmt|;
DECL|field|command
specifier|private
name|AbstractSmppCommand
name|command
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|session
operator|=
operator|new
name|SMPPSession
argument_list|()
expr_stmt|;
name|config
operator|=
operator|new
name|SmppConfiguration
argument_list|()
expr_stmt|;
name|command
operator|=
operator|new
name|AbstractSmppCommand
argument_list|(
name|session
argument_list|,
name|config
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|SmppException
block|{             }
block|}
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|constructor ()
specifier|public
name|void
name|constructor
parameter_list|()
block|{
name|assertSame
argument_list|(
name|session
argument_list|,
name|command
operator|.
name|session
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|config
argument_list|,
name|command
operator|.
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getResponseMessage ()
specifier|public
name|void
name|getResponseMessage
parameter_list|()
block|{
name|Exchange
name|inOnlyExchange
init|=
operator|new
name|DefaultExchange
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
decl_stmt|;
name|Exchange
name|inOutExchange
init|=
operator|new
name|DefaultExchange
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|inOnlyExchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|command
operator|.
name|getResponseMessage
argument_list|(
name|inOnlyExchange
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|inOutExchange
operator|.
name|getOut
argument_list|()
argument_list|,
name|command
operator|.
name|getResponseMessage
argument_list|(
name|inOutExchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|determineTypeClass ()
specifier|public
name|void
name|determineTypeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
name|OctetString
operator|.
name|class
argument_list|,
name|command
operator|.
name|determineTypeClass
argument_list|(
name|Tag
operator|.
name|SOURCE_SUBADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|COctetString
operator|.
name|class
argument_list|,
name|command
operator|.
name|determineTypeClass
argument_list|(
name|Tag
operator|.
name|ADDITIONAL_STATUS_INFO_TEXT
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
operator|.
name|Byte
operator|.
name|class
argument_list|,
name|command
operator|.
name|determineTypeClass
argument_list|(
name|Tag
operator|.
name|DEST_ADDR_SUBUNIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
operator|.
name|Short
operator|.
name|class
argument_list|,
name|command
operator|.
name|determineTypeClass
argument_list|(
name|Tag
operator|.
name|DEST_TELEMATICS_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
operator|.
name|Int
operator|.
name|class
argument_list|,
name|command
operator|.
name|determineTypeClass
argument_list|(
name|Tag
operator|.
name|QOS_TIME_TO_LIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
operator|.
name|Null
operator|.
name|class
argument_list|,
name|command
operator|.
name|determineTypeClass
argument_list|(
name|Tag
operator|.
name|ALERT_ON_MESSAGE_DELIVERY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

