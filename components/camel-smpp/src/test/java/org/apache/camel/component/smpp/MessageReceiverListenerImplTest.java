begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.smpp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|smpp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|PDUStringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|AlertNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|DataSm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|DeliverSm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|bean
operator|.
name|OptionalParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|session
operator|.
name|DataSmResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|session
operator|.
name|SMPPSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|util
operator|.
name|MessageIDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|util
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|MessageReceiverListenerImplTest
specifier|public
class|class
name|MessageReceiverListenerImplTest
block|{
DECL|field|listener
specifier|private
name|MessageReceiverListenerImpl
name|listener
decl_stmt|;
DECL|field|endpoint
specifier|private
name|SmppEndpoint
name|endpoint
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
decl_stmt|;
DECL|field|exceptionHandler
specifier|private
name|ExceptionHandler
name|exceptionHandler
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|endpoint
operator|=
name|mock
argument_list|(
name|SmppEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|processor
operator|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
expr_stmt|;
name|exceptionHandler
operator|=
name|mock
argument_list|(
name|ExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|MessageReceiverListenerImpl
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setMessageIDGenerator
argument_list|(
operator|new
name|MessageIDGenerator
argument_list|()
block|{
specifier|public
name|MessageId
name|newMessageId
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|MessageId
argument_list|(
literal|"1"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PDUStringException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onAcceptAlertNotificationSuccess ()
specifier|public
name|void
name|onAcceptAlertNotificationSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|AlertNotification
name|alertNotification
init|=
name|mock
argument_list|(
name|AlertNotification
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|createOnAcceptAlertNotificationExchange
argument_list|(
name|alertNotification
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onAcceptAlertNotification
argument_list|(
name|alertNotification
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|endpoint
argument_list|)
operator|.
name|createOnAcceptAlertNotificationExchange
argument_list|(
name|alertNotification
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onAcceptDeliverSmException ()
specifier|public
name|void
name|onAcceptDeliverSmException
parameter_list|()
throws|throws
name|Exception
block|{
name|DeliverSm
name|deliverSm
init|=
name|mock
argument_list|(
name|DeliverSm
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|createOnAcceptDeliverSmExchange
argument_list|(
name|deliverSm
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onAcceptDeliverSm
argument_list|(
name|deliverSm
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|endpoint
argument_list|)
operator|.
name|createOnAcceptDeliverSmExchange
argument_list|(
name|deliverSm
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onAcceptDataSmSuccess ()
specifier|public
name|void
name|onAcceptDataSmSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|SMPPSession
name|session
init|=
name|mock
argument_list|(
name|SMPPSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataSm
name|dataSm
init|=
name|mock
argument_list|(
name|DataSm
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|OptionalParameter
index|[]
name|optionalParameters
init|=
operator|new
name|OptionalParameter
index|[]
block|{}
decl_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|createOnAcceptDataSm
argument_list|(
name|dataSm
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dataSm
operator|.
name|getOptionalParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|optionalParameters
argument_list|)
expr_stmt|;
name|DataSmResult
name|result
init|=
name|listener
operator|.
name|onAcceptDataSm
argument_list|(
name|dataSm
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|endpoint
argument_list|)
operator|.
name|createOnAcceptDataSm
argument_list|(
name|dataSm
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|optionalParameters
argument_list|,
name|result
operator|.
name|getOptionalParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

