begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.smpp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|smpp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsmpp
operator|.
name|session
operator|.
name|connection
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * JUnit test class for<code>org.apache.camel.component.smpp.SmppConnectionFactory</code>  *   * @version   */
end_comment

begin_class
DECL|class|SmppConnectionFactoryTest
specifier|public
class|class
name|SmppConnectionFactoryTest
block|{
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Must be manually tested"
argument_list|)
DECL|method|createConnection ()
specifier|public
name|void
name|createConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|SmppConfiguration
name|configuration
init|=
operator|new
name|SmppConfiguration
argument_list|()
decl_stmt|;
name|SmppConnectionFactory
name|factory
init|=
name|SmppConnectionFactory
operator|.
name|getInstance
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"localhost"
argument_list|,
literal|2775
argument_list|)
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|connection
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Must be manually tested"
argument_list|)
DECL|method|createConnectionWithProxyHost ()
specifier|public
name|void
name|createConnectionWithProxyHost
parameter_list|()
throws|throws
name|IOException
block|{
name|SmppConfiguration
name|configuration
init|=
operator|new
name|SmppConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setHttpProxyHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setHttpProxyPort
argument_list|(
operator|new
name|Integer
argument_list|(
literal|3128
argument_list|)
argument_list|)
expr_stmt|;
name|SmppConnectionFactory
name|factory
init|=
name|SmppConnectionFactory
operator|.
name|getInstance
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"localhost"
argument_list|,
literal|2775
argument_list|)
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|connection
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Must be manually tested"
argument_list|)
DECL|method|createConnectionWithProxyUsername ()
specifier|public
name|void
name|createConnectionWithProxyUsername
parameter_list|()
throws|throws
name|IOException
block|{
name|SmppConfiguration
name|configuration
init|=
operator|new
name|SmppConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setHttpProxyHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setHttpProxyPort
argument_list|(
operator|new
name|Integer
argument_list|(
literal|3128
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setHttpProxyUsername
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setHttpProxyPassword
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|SmppConnectionFactory
name|factory
init|=
name|SmppConnectionFactory
operator|.
name|getInstance
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"localhost"
argument_list|,
literal|2775
argument_list|)
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|connection
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

