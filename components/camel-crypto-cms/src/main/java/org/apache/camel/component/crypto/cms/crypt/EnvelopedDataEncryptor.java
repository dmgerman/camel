begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.cms.crypt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|crypt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|AttributesGeneratorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|CryptoCmsMarshallerAbstract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|OriginatorInformationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|pkcs
operator|.
name|PKCSObjectIdentifiers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|AlgorithmIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSEnvelopedDataStreamGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|OriginatorInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|jcajce
operator|.
name|JceCMSContentEncryptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|jcajce
operator|.
name|JceKeyTransRecipientInfoGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OutputEncryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Processor for creating an enveloped data object.  */
end_comment

begin_class
DECL|class|EnvelopedDataEncryptor
specifier|public
class|class
name|EnvelopedDataEncryptor
extends|extends
name|CryptoCmsMarshallerAbstract
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnvelopedDataEncryptor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|EnvelopedDataEncryptorConfiguration
name|conf
decl_stmt|;
DECL|method|EnvelopedDataEncryptor (EnvelopedDataEncryptorConfiguration conf)
specifier|public
name|EnvelopedDataEncryptor
parameter_list|(
name|EnvelopedDataEncryptorConfiguration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|marshalInternal (InputStream is, OutputStream os, Exchange exchange)
specifier|protected
name|void
name|marshalInternal
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Content encryption algorithm: {}"
argument_list|,
name|conf
operator|.
name|getAlgorithmID
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parameter secretKeyLength: {}"
argument_list|,
name|conf
operator|.
name|getSecretKeyLength
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|encryptingStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|CMSEnvelopedDataStreamGenerator
name|gen
init|=
operator|new
name|CMSEnvelopedDataStreamGenerator
argument_list|()
decl_stmt|;
name|OriginatorInformationProvider
name|originatorInformationProvider
init|=
name|conf
operator|.
name|getOriginatorInformationProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|originatorInformationProvider
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"originatorInformationProvider found"
argument_list|)
expr_stmt|;
name|OriginatorInformation
name|originatorInformation
init|=
name|originatorInformationProvider
operator|.
name|getOriginatorInformation
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|originatorInformation
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"originatorInformation found"
argument_list|)
expr_stmt|;
name|gen
operator|.
name|setOriginatorInfo
argument_list|(
name|originatorInformation
argument_list|)
expr_stmt|;
block|}
block|}
name|AttributesGeneratorProvider
name|attributeGeneratorProvider
init|=
name|conf
operator|.
name|getUnprotectedAttributesGeneratorProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributeGeneratorProvider
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"attributeGeneratorProvider found"
argument_list|)
expr_stmt|;
name|gen
operator|.
name|setUnprotectedAttributeGenerator
argument_list|(
name|attributeGeneratorProvider
operator|.
name|getAttributesGenerator
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getRecipient
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CryptoCmsException
argument_list|(
literal|"No recipient configured."
argument_list|)
throw|;
block|}
for|for
control|(
name|RecipientInfo
name|recipientInfo
range|:
name|conf
operator|.
name|getRecipient
argument_list|()
control|)
block|{
comment|// currently we only support key transport alternative, in
comment|// future there maybe others
name|TransRecipientInfo
name|keyTransrecipientInfo
init|=
operator|(
name|TransRecipientInfo
operator|)
name|recipientInfo
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recipient info: {}"
argument_list|,
name|keyTransrecipientInfo
argument_list|)
expr_stmt|;
name|X509Certificate
name|encryptCert
init|=
name|keyTransrecipientInfo
operator|.
name|getCertificate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encryption certificate for recipient with '{}' : {}"
argument_list|,
name|keyTransrecipientInfo
argument_list|,
name|encryptCert
argument_list|)
expr_stmt|;
name|AlgorithmIdentifier
name|keyEncryptionAlgorithm
init|=
name|determineKeyEncryptionAlgorithmIdentifier
argument_list|(
name|keyTransrecipientInfo
operator|.
name|getKeyEncryptionAlgorithm
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|keyTransrecipientInfo
argument_list|)
decl_stmt|;
name|JceKeyTransRecipientInfoGenerator
name|keyTransRecipeintInfoGen
init|=
operator|new
name|JceKeyTransRecipientInfoGenerator
argument_list|(
name|encryptCert
argument_list|,
name|keyEncryptionAlgorithm
argument_list|)
decl_stmt|;
name|keyTransRecipeintInfoGen
operator|.
name|setProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
expr_stmt|;
name|gen
operator|.
name|addRecipientInfoGenerator
argument_list|(
name|keyTransRecipeintInfoGen
argument_list|)
expr_stmt|;
block|}
name|OutputEncryptor
name|encryptor
init|=
operator|new
name|JceCMSContentEncryptorBuilder
argument_list|(
name|conf
operator|.
name|getAlgorithmID
argument_list|()
argument_list|)
operator|.
name|setProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|encryptingStream
operator|=
name|gen
operator|.
name|open
argument_list|(
name|os
argument_list|,
name|encryptor
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|encryptingStream
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CMS Enveloped Data creation successful"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|encryptingStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|determineKeyEncryptionAlgorithmIdentifier (String keyEncryptionAlgorithm, TransRecipientInfo keyTransRecipient)
specifier|private
name|AlgorithmIdentifier
name|determineKeyEncryptionAlgorithmIdentifier
parameter_list|(
name|String
name|keyEncryptionAlgorithm
parameter_list|,
name|TransRecipientInfo
name|keyTransRecipient
parameter_list|)
throws|throws
name|CryptoCmsException
block|{
if|if
condition|(
name|keyEncryptionAlgorithm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CryptoCmsException
argument_list|(
literal|"Key encryption algorithm  of recipient info '"
operator|+
name|keyTransRecipient
operator|+
literal|"' is missing"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"RSA"
operator|.
name|equals
argument_list|(
name|keyEncryptionAlgorithm
argument_list|)
condition|)
block|{
return|return
operator|new
name|AlgorithmIdentifier
argument_list|(
name|PKCSObjectIdentifiers
operator|.
name|rsaEncryption
argument_list|)
return|;
block|}
throw|throw
operator|new
name|CryptoCmsException
argument_list|(
literal|"Key encryption algorithm '"
operator|+
name|keyEncryptionAlgorithm
operator|+
literal|"' of recipient info '"
operator|+
name|keyTransRecipient
operator|+
literal|"' is not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

