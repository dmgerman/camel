begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.cms.crypt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|crypt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|AttributesGeneratorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|CryptoCmsMarshallerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|OriginatorInformationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1ObjectIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|EnvelopedDataEncryptorConfiguration
specifier|public
class|class
name|EnvelopedDataEncryptorConfiguration
extends|extends
name|CryptoCmsMarshallerConfiguration
block|{
DECL|field|CAST5_CBC_PKCS5_PADDING
specifier|private
specifier|static
specifier|final
name|String
name|CAST5_CBC_PKCS5_PADDING
init|=
literal|"CAST5/CBC/PKCS5Padding"
decl_stmt|;
DECL|field|RC2_CBC_PKCS5_PADDING
specifier|private
specifier|static
specifier|final
name|String
name|RC2_CBC_PKCS5_PADDING
init|=
literal|"RC2/CBC/PKCS5Padding"
decl_stmt|;
DECL|field|CAMELLIA_CBC_PKCS5_PADDING
specifier|private
specifier|static
specifier|final
name|String
name|CAMELLIA_CBC_PKCS5_PADDING
init|=
literal|"Camellia/CBC/PKCS5Padding"
decl_stmt|;
DECL|field|AES_CBC_PKCS5_PADDING
specifier|private
specifier|static
specifier|final
name|String
name|AES_CBC_PKCS5_PADDING
init|=
literal|"AES/CBC/PKCS5Padding"
decl_stmt|;
DECL|field|DES_CBC_PKCS5_PADDING
specifier|private
specifier|static
specifier|final
name|String
name|DES_CBC_PKCS5_PADDING
init|=
literal|"DES/CBC/PKCS5Padding"
decl_stmt|;
DECL|field|DESEDE_CBC_PKCS5_PADDING
specifier|private
specifier|static
specifier|final
name|String
name|DESEDE_CBC_PKCS5_PADDING
init|=
literal|"DESede/CBC/PKCS5Padding"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnvelopedDataEncryptorConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SUPPORTED_ENCRYPTION_ALGORITHMS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|SUPPORTED_ENCRYPTION_ALGORITHMS
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|7
argument_list|)
decl_stmt|;
static|static
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|allowedKeyLengthForAESandCamellia
decl_stmt|;
if|if
condition|(
name|isLimitedEncryptionStrength
argument_list|()
condition|)
block|{
name|allowedKeyLengthForAESandCamellia
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|128
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allowedKeyLengthForAESandCamellia
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|256
block|,
literal|192
block|,
literal|128
block|}
argument_list|)
expr_stmt|;
block|}
name|SUPPORTED_ENCRYPTION_ALGORITHMS
operator|.
name|put
argument_list|(
name|DESEDE_CBC_PKCS5_PADDING
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|192
block|,
literal|128
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|SUPPORTED_ENCRYPTION_ALGORITHMS
operator|.
name|put
argument_list|(
name|DES_CBC_PKCS5_PADDING
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|64
block|,
literal|56
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|SUPPORTED_ENCRYPTION_ALGORITHMS
operator|.
name|put
argument_list|(
name|AES_CBC_PKCS5_PADDING
argument_list|,
name|allowedKeyLengthForAESandCamellia
argument_list|)
expr_stmt|;
name|SUPPORTED_ENCRYPTION_ALGORITHMS
operator|.
name|put
argument_list|(
name|CAMELLIA_CBC_PKCS5_PADDING
argument_list|,
name|allowedKeyLengthForAESandCamellia
argument_list|)
expr_stmt|;
name|SUPPORTED_ENCRYPTION_ALGORITHMS
operator|.
name|put
argument_list|(
name|RC2_CBC_PKCS5_PADDING
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|128
block|,
literal|120
block|,
literal|112
block|,
literal|104
block|,
literal|96
block|,
literal|88
block|,
literal|80
block|,
literal|72
block|,
literal|64
block|,
literal|56
block|,
literal|48
block|,
literal|40
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|SUPPORTED_ENCRYPTION_ALGORITHMS
operator|.
name|put
argument_list|(
name|CAST5_CBC_PKCS5_PADDING
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|128
block|,
literal|120
block|,
literal|112
block|,
literal|104
block|,
literal|96
block|,
literal|88
block|,
literal|80
block|,
literal|72
block|,
literal|64
block|,
literal|56
block|,
literal|48
block|,
literal|40
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"encrypt"
argument_list|,
name|multiValue
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Recipient Info: reference to a bean which implements the interface org.apache.camel.component.crypto.cms.api.TransRecipientInfo"
argument_list|)
DECL|field|recipient
specifier|private
specifier|final
name|List
argument_list|<
name|RecipientInfo
argument_list|>
name|recipient
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"encrypt"
argument_list|,
name|enums
operator|=
literal|"AES/CBC/PKCS5Padding,DESede/CBC/PKCS5Padding,Camellia/CBC/PKCS5Padding,CAST5/CBC/PKCS5Padding"
argument_list|)
DECL|field|contentEncryptionAlgorithm
specifier|private
name|String
name|contentEncryptionAlgorithm
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"encrypt"
argument_list|)
DECL|field|secretKeyLength
specifier|private
name|int
name|secretKeyLength
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"encrypt"
argument_list|,
name|defaultValue
operator|=
literal|"null"
argument_list|)
DECL|field|unprotectedAttributesGeneratorProvider
specifier|private
name|AttributesGeneratorProvider
name|unprotectedAttributesGeneratorProvider
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"encrypt"
argument_list|,
name|defaultValue
operator|=
literal|"null"
argument_list|)
DECL|field|originatorInformationProvider
specifier|private
name|OriginatorInformationProvider
name|originatorInformationProvider
decl_stmt|;
comment|// calculated parameters
DECL|field|algorithmId
specifier|private
name|ASN1ObjectIdentifier
name|algorithmId
decl_stmt|;
DECL|method|EnvelopedDataEncryptorConfiguration (CamelContext context)
specifier|public
name|EnvelopedDataEncryptorConfiguration
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|isLimitedEncryptionStrength ()
specifier|private
specifier|static
name|boolean
name|isLimitedEncryptionStrength
parameter_list|()
block|{
comment|// limited encryption strength
name|boolean
name|limitedEncryptionStrength
decl_stmt|;
try|try
block|{
name|limitedEncryptionStrength
operator|=
name|Cipher
operator|.
name|getMaxAllowedKeyLength
argument_list|(
literal|"AES"
argument_list|)
operator|<
literal|256
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
comment|// should never occur
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|limitedEncryptionStrength
return|;
block|}
DECL|method|getRecipient ()
specifier|public
name|List
argument_list|<
name|RecipientInfo
argument_list|>
name|getRecipient
parameter_list|()
block|{
return|return
name|recipient
return|;
block|}
DECL|method|setRecipient (RecipientInfo recipient)
specifier|public
name|void
name|setRecipient
parameter_list|(
name|RecipientInfo
name|recipient
parameter_list|)
block|{
name|this
operator|.
name|recipient
operator|.
name|add
argument_list|(
name|recipient
argument_list|)
expr_stmt|;
block|}
comment|// for multi values
DECL|method|setRecipient (List<?> recipients)
specifier|public
name|void
name|setRecipient
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|recipients
parameter_list|)
block|{
if|if
condition|(
name|recipients
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Object
name|recipientOb
range|:
name|recipients
control|)
block|{
if|if
condition|(
name|recipientOb
operator|instanceof
name|String
condition|)
block|{
name|String
name|recipientName
init|=
operator|(
name|String
operator|)
name|recipientOb
decl_stmt|;
name|String
name|valueNoHash
init|=
name|recipientName
operator|.
name|replaceAll
argument_list|(
literal|"#"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|getContext
argument_list|()
operator|!=
literal|null
operator|&&
name|recipientName
operator|!=
literal|null
condition|)
block|{
name|RecipientInfo
name|recipient
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|valueNoHash
argument_list|,
name|RecipientInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|recipient
operator|!=
literal|null
condition|)
block|{
name|setRecipient
argument_list|(
name|recipient
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|getContentEncryptionAlgorithm ()
specifier|public
name|String
name|getContentEncryptionAlgorithm
parameter_list|()
block|{
return|return
name|contentEncryptionAlgorithm
return|;
block|}
comment|/**      * Encryption algorithm, for example "DESede/CBC/PKCS5Padding". Further      * possible values: DESede/CBC/PKCS5Padding, AES/CBC/PKCS5Padding,      * Camellia/CBC/PKCS5Padding, CAST5/CBC/PKCS5Padding.      */
DECL|method|setContentEncryptionAlgorithm (String contentEncryptionAlgorithm)
specifier|public
name|void
name|setContentEncryptionAlgorithm
parameter_list|(
name|String
name|contentEncryptionAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|contentEncryptionAlgorithm
operator|=
name|contentEncryptionAlgorithm
expr_stmt|;
block|}
DECL|method|getSecretKeyLength ()
specifier|public
name|int
name|getSecretKeyLength
parameter_list|()
block|{
return|return
name|secretKeyLength
return|;
block|}
comment|/**      * Key length for the secret symmetric key used for the content encryption.      * Only used if the specified content-encryption algorithm allows keys of      * different sizes. If contentEncryptionAlgorithm=AES/CBC/PKCS5Padding or      * Camellia/CBC/PKCS5Padding then 128; if      * contentEncryptionAlgorithm=DESede/CBC/PKCS5Padding then 192, 128; if      * strong encryption is enabled then for AES/CBC/PKCS5Padding and      * Camellia/CBC/PKCS5Padding also the key lengths 192 and 256 are possible.      */
DECL|method|setSecretKeyLength (int secretKeyLength)
specifier|public
name|void
name|setSecretKeyLength
parameter_list|(
name|int
name|secretKeyLength
parameter_list|)
block|{
name|this
operator|.
name|secretKeyLength
operator|=
name|secretKeyLength
expr_stmt|;
block|}
DECL|method|getUnprotectedAttributesGeneratorProvider ()
specifier|public
name|AttributesGeneratorProvider
name|getUnprotectedAttributesGeneratorProvider
parameter_list|()
block|{
return|return
name|unprotectedAttributesGeneratorProvider
return|;
block|}
comment|/**      * Provider of the generator for the unprotected attributes. The default      * value is<code>null</code> which means no unprotected attribute is added      * to the Enveloped Data object. See      * https://tools.ietf.org/html/rfc5652#section-6.1.      */
DECL|method|setUnprotectedAttributesGeneratorProvider (AttributesGeneratorProvider unprotectedAttributeTableGeneratorProvider)
specifier|public
name|void
name|setUnprotectedAttributesGeneratorProvider
parameter_list|(
name|AttributesGeneratorProvider
name|unprotectedAttributeTableGeneratorProvider
parameter_list|)
block|{
name|this
operator|.
name|unprotectedAttributesGeneratorProvider
operator|=
name|unprotectedAttributeTableGeneratorProvider
expr_stmt|;
block|}
DECL|method|getOriginatorInformationProvider ()
specifier|public
name|OriginatorInformationProvider
name|getOriginatorInformationProvider
parameter_list|()
block|{
return|return
name|originatorInformationProvider
return|;
block|}
comment|/**      * Provider for the originator info. See      * https://tools.ietf.org/html/rfc5652#section-6.1. The default value is      *<code>null</code>.      */
DECL|method|setOriginatorInformationProvider (OriginatorInformationProvider originatorInformationProvider)
specifier|public
name|void
name|setOriginatorInformationProvider
parameter_list|(
name|OriginatorInformationProvider
name|originatorInformationProvider
parameter_list|)
block|{
name|this
operator|.
name|originatorInformationProvider
operator|=
name|originatorInformationProvider
expr_stmt|;
block|}
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|CryptoCmsException
block|{
if|if
condition|(
name|recipient
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|logErrorAndThrow
argument_list|(
name|LOG
argument_list|,
literal|"No recipient configured."
argument_list|)
expr_stmt|;
block|}
name|checkEncryptionAlgorithmAndSecretKeyLength
argument_list|()
expr_stmt|;
name|calcualteAlgorithmIdWithKeyLength
argument_list|()
expr_stmt|;
block|}
DECL|method|checkEncryptionAlgorithmAndSecretKeyLength ()
specifier|private
name|void
name|checkEncryptionAlgorithmAndSecretKeyLength
parameter_list|()
throws|throws
name|CryptoCmsException
block|{
if|if
condition|(
name|contentEncryptionAlgorithm
operator|==
literal|null
condition|)
block|{
name|logErrorAndThrow
argument_list|(
name|LOG
argument_list|,
literal|"Content encryption algorithm is null"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|SUPPORTED_ENCRYPTION_ALGORITHMS
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|contentEncryptionAlgorithm
argument_list|)
condition|)
block|{
name|logErrorAndThrow
argument_list|(
name|LOG
argument_list|,
literal|"Content encryption algorithm "
operator|+
name|contentEncryptionAlgorithm
operator|+
literal|" not supported"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|SUPPORTED_ENCRYPTION_ALGORITHMS
operator|.
name|get
argument_list|(
name|contentEncryptionAlgorithm
argument_list|)
operator|.
name|contains
argument_list|(
name|secretKeyLength
argument_list|)
condition|)
block|{
name|logErrorAndThrow
argument_list|(
name|LOG
argument_list|,
literal|"Content encryption algorithm "
operator|+
name|contentEncryptionAlgorithm
operator|+
literal|" does not supported secretKeyLength of "
operator|+
name|secretKeyLength
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|calcualteAlgorithmIdWithKeyLength ()
specifier|private
name|void
name|calcualteAlgorithmIdWithKeyLength
parameter_list|()
block|{
if|if
condition|(
name|DESEDE_CBC_PKCS5_PADDING
operator|.
name|equals
argument_list|(
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|DES_EDE3_CBC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DES_CBC_PKCS5_PADDING
operator|.
name|equals
argument_list|(
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|DES_CBC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|AES_CBC_PKCS5_PADDING
operator|.
name|equals
argument_list|(
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|getSecretKeyLength
argument_list|()
condition|)
block|{
case|case
literal|256
case|:
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|AES256_CBC
expr_stmt|;
break|break;
case|case
literal|192
case|:
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|AES192_CBC
expr_stmt|;
break|break;
case|case
literal|128
case|:
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|AES128_CBC
expr_stmt|;
break|break;
default|default:
comment|// should not happen, has already been checked
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported secret key length "
operator|+
name|getSecretKeyLength
argument_list|()
operator|+
literal|" for algorithm AES"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|CAMELLIA_CBC_PKCS5_PADDING
operator|.
name|equals
argument_list|(
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|getSecretKeyLength
argument_list|()
condition|)
block|{
case|case
literal|256
case|:
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|CAMELLIA256_CBC
expr_stmt|;
break|break;
case|case
literal|192
case|:
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|CAMELLIA192_CBC
expr_stmt|;
break|break;
case|case
literal|128
case|:
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|CAMELLIA128_CBC
expr_stmt|;
break|break;
default|default:
comment|// should not happen, has already been checked
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported secret key length "
operator|+
name|getSecretKeyLength
argument_list|()
operator|+
literal|" for algorithm Camellia"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|RC2_CBC_PKCS5_PADDING
operator|.
name|equals
argument_list|(
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|RC2_CBC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CAST5_CBC_PKCS5_PADDING
operator|.
name|equals
argument_list|(
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
name|algorithmId
operator|=
name|CMSAlgorithm
operator|.
name|CAST5_CBC
expr_stmt|;
block|}
else|else
block|{
comment|// should not occur, has already been checked
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Content encryption algorithm "
operator|+
name|getContentEncryptionAlgorithm
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Content encryption algorithm.      *       * @return algorithm Id      */
DECL|method|getAlgorithmID ()
specifier|public
name|ASN1ObjectIdentifier
name|getAlgorithmID
parameter_list|()
block|{
return|return
name|algorithmId
return|;
block|}
block|}
end_class

end_unit

