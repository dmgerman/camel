begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.cms.sig
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|CryptoCmsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSSignedDataParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSTypedStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcaDigestCalculatorProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Verifies the signature contained in the header  * {@link CryptoCmsConstants#CAMEL_CRYPTO_CMS_SIGNED_DATA}.  */
end_comment

begin_class
DECL|class|SignedDataVerifierFromHeader
specifier|public
class|class
name|SignedDataVerifierFromHeader
extends|extends
name|SignedDataVerifier
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SignedDataVerifierFromHeader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|SignedDataVerifierConfiguration
name|conf
decl_stmt|;
DECL|method|SignedDataVerifierFromHeader (SignedDataVerifierConfiguration conf)
specifier|public
name|SignedDataVerifierFromHeader
parameter_list|(
name|SignedDataVerifierConfiguration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NOPMD see
comment|// method
comment|// processSignedDataHader
name|InputStream
name|signature
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CryptoCmsConstants
operator|.
name|CAMEL_CRYPTO_CMS_SIGNED_DATA
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|signature
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No signed data found in header {}. Assuming signed data contained in message body"
argument_list|,
name|CryptoCmsConstants
operator|.
name|CAMEL_CRYPTO_CMS_SIGNED_DATA
argument_list|)
expr_stmt|;
name|super
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Signed data header {} found."
argument_list|,
name|CryptoCmsConstants
operator|.
name|CAMEL_CRYPTO_CMS_SIGNED_DATA
argument_list|)
expr_stmt|;
name|processSignedDataHeader
argument_list|(
name|exchange
argument_list|,
name|signature
argument_list|)
expr_stmt|;
comment|// remove header
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|CryptoCmsConstants
operator|.
name|CAMEL_CRYPTO_CMS_SIGNED_DATA
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processSignedDataHeader (Exchange exchange, InputStream signature)
specifier|protected
name|void
name|processSignedDataHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|signature
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NOPMD
comment|// all exceptions must be caught and re-thrown in order to make a
comment|// clean-up, see code below
if|if
condition|(
name|conf
operator|.
name|isSignedDataHeaderBase64
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|signature
operator|=
operator|new
name|Base64InputStream
argument_list|(
name|signature
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|stream
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// lets setup the out message before we invoke the dataFormat
comment|// so that it can mutate it if necessary
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|out
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|isFromBase64
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|stream
operator|=
operator|new
name|Base64InputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|unmarshalInternal
argument_list|(
name|stream
argument_list|,
name|signature
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// remove OUT message, as an exception occurred
name|exchange
operator|.
name|setOut
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|stream
argument_list|,
literal|"input stream"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unmarshalInternal (InputStream is, InputStream signature, Exchange exchange)
specifier|protected
name|void
name|unmarshalInternal
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|InputStream
name|signature
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CMSSignedDataParser
name|sp
decl_stmt|;
try|try
block|{
name|sp
operator|=
operator|new
name|CMSSignedDataParser
argument_list|(
operator|new
name|JcaDigestCalculatorProviderBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|CMSTypedStream
argument_list|(
name|is
argument_list|)
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptoCmsFormatException
argument_list|(
name|getFormatErrorMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
comment|// content must be read in order to calculate the hash for the
comment|// signature
name|sp
operator|.
name|getSignedContent
argument_list|()
operator|.
name|drain
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// nullpointer exception is thrown
comment|// when the signed content is missing
throw|throw
name|getContentMissingException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Signed data found"
argument_list|)
expr_stmt|;
name|debugLog
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sp
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

