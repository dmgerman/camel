begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.cms.common
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|CryptoCmsMarshallerConfiguration
specifier|public
specifier|abstract
class|class
name|CryptoCmsMarshallerConfiguration
block|{
DECL|field|context
specifier|private
specifier|final
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"encrypt_sign"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|toBase64
specifier|private
name|Boolean
name|toBase64
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|method|CryptoCmsMarshallerConfiguration (CamelContext context)
specifier|public
name|CryptoCmsMarshallerConfiguration
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|getToBase64 ()
specifier|public
name|Boolean
name|getToBase64
parameter_list|()
block|{
return|return
name|toBase64
return|;
block|}
comment|/**      * Indicates whether the Signed Data or Enveloped Data instance shall be      * base 64 encoded. Default value is<code>false</code>.      */
DECL|method|setToBase64 (Boolean toBase64)
specifier|public
name|void
name|setToBase64
parameter_list|(
name|Boolean
name|toBase64
parameter_list|)
block|{
name|this
operator|.
name|toBase64
operator|=
name|toBase64
expr_stmt|;
block|}
DECL|method|getContext ()
specifier|protected
name|CamelContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|logErrorAndThrow (final Logger log, String message)
specifier|protected
name|void
name|logErrorAndThrow
parameter_list|(
specifier|final
name|Logger
name|log
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|CryptoCmsException
block|{
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CryptoCmsException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

