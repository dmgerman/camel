begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.cms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|crypt
operator|.
name|DefaultEnvelopedDataDecryptorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|crypt
operator|.
name|EnvelopedDataEncryptorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
operator|.
name|DefaultSignedDataVerifierConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
operator|.
name|SignedDataCreatorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * The crypto cms component is used for encrypting data in CMS Enveloped Data  * format, decrypting CMS Enveloped Data, signing data in CMS Signed Data  * format, and verifying CMS Signed Data.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.20.0"
argument_list|,
name|scheme
operator|=
literal|"crypto-cms"
argument_list|,
name|title
operator|=
literal|"Crypto CMS"
argument_list|,
name|syntax
operator|=
literal|"crypto-cms:cryptoOperation:name"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"security,transformation"
argument_list|)
DECL|class|CryptoCmsEndpoint
specifier|public
class|class
name|CryptoCmsEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|cryptoOperation
specifier|private
name|CryptoOperation
name|cryptoOperation
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|// to include different kind of configuration params
annotation|@
name|UriParam
DECL|field|signConfig
specifier|private
name|SignedDataCreatorConfiguration
name|signConfig
decl_stmt|;
annotation|@
name|UriParam
DECL|field|verifyConfig
specifier|private
name|DefaultSignedDataVerifierConfiguration
name|verifyConfig
decl_stmt|;
annotation|@
name|UriParam
DECL|field|encryptConfig
specifier|private
name|EnvelopedDataEncryptorConfiguration
name|encryptConfig
decl_stmt|;
annotation|@
name|UriParam
DECL|field|decryptConfig
specifier|private
name|DefaultEnvelopedDataDecryptorConfiguration
name|decryptConfig
decl_stmt|;
DECL|method|CryptoCmsEndpoint (String uri, CryptoCmsComponent component, Processor processor)
specifier|public
name|CryptoCmsEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|CryptoCmsComponent
name|component
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Set the Crypto operation from that supplied after the crypto scheme in      * the endpoint uri e.g. crypto-cms:sign sets sign as the operation.      * Possible values: "sign", "verify", "encrypt", or "decrypt".      */
DECL|method|setCryptoOperation (String operation)
specifier|public
name|void
name|setCryptoOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|cryptoOperation
operator|=
name|CryptoOperation
operator|.
name|valueOf
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
DECL|method|setCryptoOperation (CryptoOperation operation)
specifier|public
name|void
name|setCryptoOperation
parameter_list|(
name|CryptoOperation
name|operation
parameter_list|)
block|{
name|this
operator|.
name|cryptoOperation
operator|=
name|operation
expr_stmt|;
block|}
comment|/**      * Gets the Crypto operation that was supplied in the crypto scheme in      * the endpoint uri      */
DECL|method|getCryptoOperation ()
specifier|public
name|CryptoOperation
name|getCryptoOperation
parameter_list|()
block|{
return|return
name|cryptoOperation
return|;
block|}
comment|/**      * The name part in the URI can be chosen by the user to distinguish between      * different signer/verifier/encryptor/decryptor endpoints within the camel      * context.      */
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
block|{
return|return
operator|new
name|CryptoCmsProducer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Crypto CMS endpoints are not meant to be consumed from. They are meant be used as intermediate endpoints"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getManagedObject (CryptoCmsEndpoint endpoint)
specifier|public
name|Object
name|getManagedObject
parameter_list|(
name|CryptoCmsEndpoint
name|endpoint
parameter_list|)
block|{
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

