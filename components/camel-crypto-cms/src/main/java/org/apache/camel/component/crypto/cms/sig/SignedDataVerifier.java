begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.cms.sig
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|CryptoCmsUnmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsNoCertificateForSignerInfoException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsNoCertificateForSignerInfosException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsSignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsSignatureInvalidContentHashException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsVerifierCertificateNotValidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|stream
operator|.
name|OutputStreamBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|CMSAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|AlgorithmIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|jcajce
operator|.
name|JcaCertStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSAttributeTableGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSSignedDataParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSSignerDigestMismatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSVerifierCertificateNotValidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|SignerInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|SignerInformationStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|jcajce
operator|.
name|JcaSimpleSignerInfoVerifierBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcaDigestCalculatorProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SignedDataVerifier
specifier|public
class|class
name|SignedDataVerifier
extends|extends
name|CryptoCmsUnmarshaller
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SignedDataVerifier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|SignedDataVerifierConfiguration
name|conf
decl_stmt|;
DECL|method|SignedDataVerifier (SignedDataVerifierConfiguration config)
specifier|public
name|SignedDataVerifier
parameter_list|(
name|SignedDataVerifierConfiguration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unmarshalInternal (InputStream is, Exchange exchange)
specifier|protected
name|Object
name|unmarshalInternal
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CMSSignedDataParser
name|sp
decl_stmt|;
try|try
block|{
name|sp
operator|=
operator|new
name|CMSSignedDataParser
argument_list|(
operator|new
name|JcaDigestCalculatorProviderBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptoCmsFormatException
argument_list|(
name|getFormatErrorMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|OutputStreamBuilder
name|output
init|=
name|getOutputStream
argument_list|(
name|sp
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|debugLog
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sp
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getFormatErrorMessage ()
specifier|protected
name|String
name|getFormatErrorMessage
parameter_list|()
block|{
return|return
literal|"Message has invalid format. It was not possible to parse the message into a PKCS7/CMS content info object containing PKCS7/CMS Signed Data."
return|;
block|}
DECL|method|getOutputStream (CMSSignedDataParser sp, Exchange exchange)
specifier|protected
name|OutputStreamBuilder
name|getOutputStream
parameter_list|(
name|CMSSignedDataParser
name|sp
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// get the InputStream with the plain data
name|InputStream
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|sp
operator|.
name|getSignedContent
argument_list|()
operator|.
name|getContentStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// nullpointer exception is
comment|// thrown when the signed content
comment|// is missing
throw|throw
name|getContentMissingException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// the input stream must be completely read, otherwise the signer
comment|// info is not available!
name|OutputStreamBuilder
name|osb
init|=
name|OutputStreamBuilder
operator|.
name|withExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
try|try
block|{
comment|// data can be null in the case of explicit Signed Data
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|IOHelper
operator|.
name|copy
argument_list|(
name|data
argument_list|,
name|osb
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptoCmsException
argument_list|(
literal|"Error during reading the signed content of the signed data object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|osb
return|;
block|}
DECL|method|getContentMissingException (NullPointerException e)
specifier|protected
name|CryptoCmsException
name|getContentMissingException
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
return|return
operator|new
name|CryptoCmsException
argument_list|(
literal|"PKCS7/CMS signature validation not possible: The content for which the hash-value must be calculated is missing in the PKCS7/CMS signed data instance. "
operator|+
literal|"Please check the configuration of the sender of the PKCS7/CMS signature."
argument_list|,
name|e
argument_list|)
return|;
block|}
DECL|method|debugLog (CMSSignedDataParser sp)
specifier|protected
name|void
name|debugLog
parameter_list|(
name|CMSSignedDataParser
name|sp
parameter_list|)
throws|throws
name|CMSException
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|SignerInformationStore
name|signers
init|=
name|sp
operator|.
name|getSignerInfos
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|AlgorithmIdentifier
argument_list|>
name|messageDigestAlgorithms
init|=
name|sp
operator|.
name|getDigestAlgorithmIDs
argument_list|()
decl_stmt|;
for|for
control|(
name|AlgorithmIdentifier
name|algorithm
range|:
name|messageDigestAlgorithms
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Message digest algorithm: {}"
argument_list|,
name|algorithm
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Included Signer Infos:"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SignerInformation
name|signer
range|:
name|signers
operator|.
name|getSigners
argument_list|()
control|)
block|{
name|i
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"    Signer {}: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|i
block|,
name|signerInformationToString
argument_list|(
name|signer
argument_list|)
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|signer
operator|.
name|getSignedAttributes
argument_list|()
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
name|authAttTable
init|=
name|signer
operator|.
name|getSignedAttributes
argument_list|()
operator|.
name|toHashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|authAttTable
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"    Signed attributes of signer {}: {}"
argument_list|,
name|i
argument_list|,
name|attributesToString
argument_list|(
name|authAttTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|signer
operator|.
name|getUnsignedAttributes
argument_list|()
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
name|unAuthAtts
init|=
name|signer
operator|.
name|getUnsignedAttributes
argument_list|()
operator|.
name|toHashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|unAuthAtts
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"    Unsigned attributes of signer {}: {}"
argument_list|,
name|i
argument_list|,
name|attributesToString
argument_list|(
name|unAuthAtts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verify (CMSSignedDataParser signed, Exchange exchange)
specifier|protected
name|void
name|verify
parameter_list|(
name|CMSSignedDataParser
name|signed
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|SignerInformationStore
name|signers
init|=
name|getNonEmptySenderInfos
argument_list|(
name|signed
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|X509Certificate
argument_list|>
name|allowedVerifyCerts
init|=
name|conf
operator|.
name|getCertificates
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedVerifyCerts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CryptoCmsNoCertificateForSignerInfosException
argument_list|(
literal|"Cannot verify the signatures of the PKCS7/CMS Signed Data object: No verifier certificate is configured."
argument_list|)
throw|;
block|}
name|JcaCertStore
name|certStore
init|=
operator|new
name|JcaCertStore
argument_list|(
name|allowedVerifyCerts
argument_list|)
decl_stmt|;
name|boolean
name|atLeastOneSignatureVerified
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SignerInformation
name|signer
range|:
name|signers
operator|.
name|getSigners
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Collection
argument_list|<
name|X509CertificateHolder
argument_list|>
name|certCollection
init|=
name|certStore
operator|.
name|getMatches
argument_list|(
name|signer
operator|.
name|getSID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|certCollection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|isVerifySignaturesOfAllSigners
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CryptoCmsNoCertificateForSignerInfoException
argument_list|(
literal|"KCS7/CMS signature verification failed. The public key for the signer information with"
operator|+
name|signerInformationToString
argument_list|(
name|signer
argument_list|)
operator|+
literal|" cannot be found in the configured certificates: "
operator|+
name|certsToString
argument_list|(
name|allowedVerifyCerts
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|Iterator
argument_list|<
name|X509CertificateHolder
argument_list|>
name|certIt
init|=
name|certCollection
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|X509CertificateHolder
name|cert
init|=
name|certIt
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|signer
operator|.
name|verify
argument_list|(
operator|new
name|JcaSimpleSignerInfoVerifierBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
operator|.
name|build
argument_list|(
name|cert
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verification successful"
argument_list|)
expr_stmt|;
name|atLeastOneSignatureVerified
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|isVerifySignaturesOfAllSigners
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|CryptoCmsSignatureException
argument_list|(
literal|"PKCS7/CMS signature verification failed for signer information with "
operator|+
name|issuerSerialNumberSubject
argument_list|(
name|cert
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CMSSignerDigestMismatchException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptoCmsSignatureInvalidContentHashException
argument_list|(
literal|"PKCS7/CMS signature verification failed for signer information with "
operator|+
name|issuerSerialNumberSubject
argument_list|(
name|cert
argument_list|)
operator|+
literal|". Calculated hash differs from the signed hash value. Either the message content does not correspond "
operator|+
literal|"to the signature or the message might be tampered."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CMSVerifierCertificateNotValidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptoCmsVerifierCertificateNotValidException
argument_list|(
literal|"PKCS7/CMS signature verification failed for signer information with "
operator|+
name|issuerSerialNumberSubject
argument_list|(
name|cert
argument_list|)
operator|+
literal|". Certificate was not valid at the signing time."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|atLeastOneSignatureVerified
condition|)
block|{
throw|throw
operator|new
name|CryptoCmsNoCertificateForSignerInfosException
argument_list|(
literal|"Cannot verify the signature of the PKCS7/CMS signed data object with the certificates "
operator|+
name|certsToString
argument_list|(
name|allowedVerifyCerts
argument_list|)
operator|+
literal|" specified in the configuration. The signers in the signed data object are: "
operator|+
name|signersToString
argument_list|(
name|signers
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|getNonEmptySenderInfos (CMSSignedDataParser signed)
name|SignerInformationStore
name|getNonEmptySenderInfos
parameter_list|(
name|CMSSignedDataParser
name|signed
parameter_list|)
throws|throws
name|CryptoCmsException
throws|,
name|CMSException
block|{
name|SignerInformationStore
name|senders
init|=
name|signed
operator|.
name|getSignerInfos
argument_list|()
decl_stmt|;
if|if
condition|(
name|senders
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|CryptoCmsException
argument_list|(
literal|"Sent CMS/PKCS7 signed data message is incorrect. No signer info found in signed data. Correct the sent message."
argument_list|)
throw|;
block|}
return|return
name|senders
return|;
block|}
DECL|method|signerInformationToString (SignerInformation sigInfo)
specifier|protected
name|String
name|signerInformationToString
parameter_list|(
name|SignerInformation
name|sigInfo
parameter_list|)
block|{
if|if
condition|(
name|sigInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ContentTypeOID="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sigInfo
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Issuer="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sigInfo
operator|.
name|getSID
argument_list|()
operator|.
name|getIssuer
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", SerialNumber="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sigInfo
operator|.
name|getSID
argument_list|()
operator|.
name|getSerialNumber
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", SignerInfoVersion="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sigInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", SignatureAlgorithmOID="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sigInfo
operator|.
name|getDigestAlgOID
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", EncryptionAlgorithmOID="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sigInfo
operator|.
name|getEncryptionAlgOID
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", isCounterSignature="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sigInfo
operator|.
name|isCounterSignature
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|signersToString (SignerInformationStore signers)
specifier|protected
name|String
name|signersToString
parameter_list|(
name|SignerInformationStore
name|signers
parameter_list|)
block|{
if|if
condition|(
name|signers
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SignerInformation
argument_list|>
name|sigInfos
init|=
name|signers
operator|.
name|getSigners
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|sigInfos
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SignerInformation
name|sigInfo
range|:
name|sigInfos
control|)
block|{
name|counter
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Issuer="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sigInfo
operator|.
name|getSID
argument_list|()
operator|.
name|getIssuer
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", SerialNumber="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sigInfo
operator|.
name|getSID
argument_list|()
operator|.
name|getSerialNumber
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|<
name|size
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|attributesToString (Hashtable<String, Attribute> attributes)
specifier|protected
name|String
name|attributesToString
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Attribute
name|attr
range|:
name|attributes
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|attr
operator|.
name|getAttrType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CMSAttributes
operator|.
name|signingTime
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getAttrType
argument_list|()
argument_list|)
operator|||
name|CMSAttributes
operator|.
name|messageDigest
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getAttrType
argument_list|()
argument_list|)
operator|||
name|CMSAttributes
operator|.
name|cmsAlgorithmProtect
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getAttrType
argument_list|()
argument_list|)
operator|||
name|CMSAttributeTableGenerator
operator|.
name|CONTENT_TYPE
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getAttrType
argument_list|()
argument_list|)
condition|)
block|{
comment|// for these attributes we can print the value because we know
comment|// they do not contain confidential or personal data
name|sb
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|attr
operator|.
name|getAttrValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

