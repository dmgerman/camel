begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.cms.sig
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|CryptoCmsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|CryptoCmsMarshallerAbstract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsInvalidKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSSignedDataStreamGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|jcajce
operator|.
name|JcaSignerInfoGeneratorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|ContentSigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcaContentSignerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcaDigestCalculatorProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SignedDataCreator
specifier|public
class|class
name|SignedDataCreator
extends|extends
name|CryptoCmsMarshallerAbstract
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SignedDataCreator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|SignedDataCreatorConfiguration
name|config
decl_stmt|;
DECL|method|SignedDataCreator (SignedDataCreatorConfiguration conf)
specifier|public
name|SignedDataCreator
parameter_list|(
name|SignedDataCreatorConfiguration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|config
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBodyAndHeader (Message out, Object encodedSignedData)
specifier|protected
name|void
name|setBodyAndHeader
parameter_list|(
name|Message
name|out
parameter_list|,
name|Object
name|encodedSignedData
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getIncludeContent
argument_list|()
condition|)
block|{
comment|/*              * The encodedSignedData object contains the signer infos including              * the message content.              */
name|out
operator|.
name|setBody
argument_list|(
name|encodedSignedData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*              * The encodedSignedData object contains only the signer infos              * (without the message content). As the message body is not changed              * in this case and is passed through              */
name|out
operator|.
name|setHeader
argument_list|(
name|CryptoCmsConstants
operator|.
name|CAMEL_CRYPTO_CMS_SIGNED_DATA
argument_list|,
name|encodedSignedData
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|marshalInternal (InputStream is, OutputStream os, Exchange exchange)
specifier|protected
name|void
name|marshalInternal
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CMSSignedDataStreamGenerator
name|gen
init|=
operator|new
name|CMSSignedDataStreamGenerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getSigner
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CryptoCmsException
argument_list|(
literal|"No signer information configured"
argument_list|)
throw|;
block|}
for|for
control|(
name|SignerInfo
name|signer
range|:
name|config
operator|.
name|getSigner
argument_list|()
control|)
block|{
comment|// these certificates are sent within the signature
name|LOG
operator|.
name|debug
argument_list|(
literal|"Signer info: {}"
argument_list|,
name|signer
argument_list|)
expr_stmt|;
name|X509Certificate
name|signerCert
init|=
name|signer
operator|.
name|getCertificate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|signerCert
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CryptoCmsException
argument_list|(
literal|"Certificate missing in the singer information "
operator|+
name|signer
argument_list|)
throw|;
block|}
name|PrivateKey
name|key
init|=
name|signer
operator|.
name|getPrivateKey
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CryptoCmsException
argument_list|(
literal|"Private key missing in the singer information "
operator|+
name|signer
argument_list|)
throw|;
block|}
name|ContentSigner
name|contentSigner
decl_stmt|;
try|try
block|{
name|contentSigner
operator|=
operator|new
name|JcaContentSignerBuilder
argument_list|(
name|signer
operator|.
name|getSignatureAlgorithm
argument_list|(
name|exchange
argument_list|)
argument_list|)
operator|.
name|setProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
operator|.
name|build
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OperatorCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptoCmsInvalidKeyException
argument_list|(
literal|"The private key of the signer information  '"
operator|+
name|signer
operator|+
literal|"' does not fit to the specified signature algorithm '"
operator|+
name|signer
operator|.
name|getSignatureAlgorithm
argument_list|(
name|exchange
argument_list|)
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|JcaSignerInfoGeneratorBuilder
name|signerBuilder
init|=
operator|new
name|JcaSignerInfoGeneratorBuilder
argument_list|(
operator|new
name|JcaDigestCalculatorProviderBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|signerBuilder
operator|.
name|setSignedAttributeGenerator
argument_list|(
name|signer
operator|.
name|getSignedAttributeGenerator
argument_list|(
name|exchange
argument_list|)
argument_list|)
operator|.
name|setUnsignedAttributeGenerator
argument_list|(
name|signer
operator|.
name|getUnsignedAttributeGenerator
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|addSignerInfoGenerator
argument_list|(
name|signerBuilder
operator|.
name|build
argument_list|(
name|contentSigner
argument_list|,
name|signerCert
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Certificate
argument_list|>
name|certificateList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Certificate
name|cert
range|:
name|signer
operator|.
name|getCertificateChain
argument_list|(
name|exchange
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|certificateList
operator|.
name|contains
argument_list|(
name|cert
argument_list|)
condition|)
block|{
name|certificateList
operator|.
name|add
argument_list|(
name|cert
argument_list|)
expr_stmt|;
name|gen
operator|.
name|addCertificate
argument_list|(
operator|new
name|X509CertificateHolder
argument_list|(
name|cert
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Certificate added to Signed Data certificate list: {}"
argument_list|,
name|cert
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|OutputStream
name|sigOut
init|=
name|gen
operator|.
name|open
argument_list|(
name|os
argument_list|,
name|config
operator|.
name|getIncludeContent
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|sigOut
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|sigOut
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"CMS Signed Data generation successful"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

